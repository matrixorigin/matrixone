// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const SNAPSHOTS = 57437
const INTEGRAL = 57438
const HEX = 57439
const FLOAT = 57440
const HEXNUM = 57441
const BIT_LITERAL = 57442
const NULL = 57443
const TRUE = 57444
const FALSE = 57445
const LOWER_THAN_CHARSET = 57446
const CHARSET = 57447
const UNIQUE = 57448
const KEY = 57449
const OR = 57450
const PIPE_CONCAT = 57451
const XOR = 57452
const AND = 57453
const NOT = 57454
const BETWEEN = 57455
const CASE = 57456
const WHEN = 57457
const THEN = 57458
const ELSE = 57459
const END = 57460
const ELSEIF = 57461
const LOWER_THAN_EQ = 57462
const LE = 57463
const GE = 57464
const NE = 57465
const NULL_SAFE_EQUAL = 57466
const IS = 57467
const LIKE = 57468
const REGEXP = 57469
const IN = 57470
const ASSIGNMENT = 57471
const ILIKE = 57472
const SHIFT_LEFT = 57473
const SHIFT_RIGHT = 57474
const DIV = 57475
const MOD = 57476
const UNARY = 57477
const COLLATE = 57478
const BINARY = 57479
const UNDERSCORE_BINARY = 57480
const INTERVAL = 57481
const OUT = 57482
const INOUT = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const WORK = 57489
const CONSISTENT = 57490
const SNAPSHOT = 57491
const CHAIN = 57492
const NO = 57493
const RELEASE = 57494
const PRIORITY = 57495
const QUICK = 57496
const BIT = 57497
const TINYINT = 57498
const SMALLINT = 57499
const MEDIUMINT = 57500
const INT = 57501
const INTEGER = 57502
const BIGINT = 57503
const INTNUM = 57504
const REAL = 57505
const DOUBLE = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const DECIMAL_VALUE = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const UUID = 57531
const VECF32 = 57532
const VECF64 = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const INT1 = 57542
const INT2 = 57543
const INT3 = 57544
const INT4 = 57545
const INT8 = 57546
const S3OPTION = 57547
const STAGEOPTION = 57548
const SQL_SMALL_RESULT = 57549
const SQL_BIG_RESULT = 57550
const SQL_BUFFER_RESULT = 57551
const LOW_PRIORITY = 57552
const HIGH_PRIORITY = 57553
const DELAYED = 57554
const CREATE = 57555
const ALTER = 57556
const DROP = 57557
const RENAME = 57558
const ANALYZE = 57559
const ADD = 57560
const RETURNS = 57561
const SCHEMA = 57562
const TABLE = 57563
const SEQUENCE = 57564
const INDEX = 57565
const VIEW = 57566
const TO = 57567
const IGNORE = 57568
const IF = 57569
const PRIMARY = 57570
const COLUMN = 57571
const CONSTRAINT = 57572
const SPATIAL = 57573
const FULLTEXT = 57574
const FOREIGN = 57575
const KEY_BLOCK_SIZE = 57576
const SHOW = 57577
const DESCRIBE = 57578
const EXPLAIN = 57579
const DATE = 57580
const ESCAPE = 57581
const REPAIR = 57582
const OPTIMIZE = 57583
const TRUNCATE = 57584
const MAXVALUE = 57585
const PARTITION = 57586
const REORGANIZE = 57587
const LESS = 57588
const THAN = 57589
const PROCEDURE = 57590
const TRIGGER = 57591
const STATUS = 57592
const VARIABLES = 57593
const ROLE = 57594
const PROXY = 57595
const AVG_ROW_LENGTH = 57596
const STORAGE = 57597
const DISK = 57598
const MEMORY = 57599
const CHECKSUM = 57600
const COMPRESSION = 57601
const DATA = 57602
const DIRECTORY = 57603
const DELAY_KEY_WRITE = 57604
const ENCRYPTION = 57605
const ENGINE = 57606
const MAX_ROWS = 57607
const MIN_ROWS = 57608
const PACK_KEYS = 57609
const ROW_FORMAT = 57610
const STATS_AUTO_RECALC = 57611
const STATS_PERSISTENT = 57612
const STATS_SAMPLE_PAGES = 57613
const DYNAMIC = 57614
const COMPRESSED = 57615
const REDUNDANT = 57616
const COMPACT = 57617
const FIXED = 57618
const COLUMN_FORMAT = 57619
const AUTO_RANDOM = 57620
const ENGINE_ATTRIBUTE = 57621
const SECONDARY_ENGINE_ATTRIBUTE = 57622
const INSERT_METHOD = 57623
const RESTRICT = 57624
const CASCADE = 57625
const ACTION = 57626
const PARTIAL = 57627
const SIMPLE = 57628
const CHECK = 57629
const ENFORCED = 57630
const RANGE = 57631
const LIST = 57632
const ALGORITHM = 57633
const LINEAR = 57634
const PARTITIONS = 57635
const SUBPARTITION = 57636
const SUBPARTITIONS = 57637
const CLUSTER = 57638
const TYPE = 57639
const ANY = 57640
const SOME = 57641
const EXTERNAL = 57642
const LOCALFILE = 57643
const URL = 57644
const PREPARE = 57645
const DEALLOCATE = 57646
const RESET = 57647
const EXTENSION = 57648
const INCREMENT = 57649
const CYCLE = 57650
const MINVALUE = 57651
const PUBLICATION = 57652
const SUBSCRIPTIONS = 57653
const PUBLICATIONS = 57654
const PROPERTIES = 57655
const PARSER = 57656
const VISIBLE = 57657
const INVISIBLE = 57658
const BTREE = 57659
const HASH = 57660
const RTREE = 57661
const BSI = 57662
const IVFFLAT = 57663
const MASTER = 57664
const ZONEMAP = 57665
const LEADING = 57666
const BOTH = 57667
const TRAILING = 57668
const UNKNOWN = 57669
const LISTS = 57670
const OP_TYPE = 57671
const REINDEX = 57672
const EXPIRE = 57673
const ACCOUNT = 57674
const ACCOUNTS = 57675
const UNLOCK = 57676
const DAY = 57677
const NEVER = 57678
const PUMP = 57679
const MYSQL_COMPATIBILITY_MODE = 57680
const MODIFY = 57681
const CHANGE = 57682
const SECOND = 57683
const ASCII = 57684
const COALESCE = 57685
const COLLATION = 57686
const HOUR = 57687
const MICROSECOND = 57688
const MINUTE = 57689
const MONTH = 57690
const QUARTER = 57691
const REPEAT = 57692
const REVERSE = 57693
const ROW_COUNT = 57694
const WEEK = 57695
const REVOKE = 57696
const FUNCTION = 57697
const PRIVILEGES = 57698
const TABLESPACE = 57699
const EXECUTE = 57700
const SUPER = 57701
const GRANT = 57702
const OPTION = 57703
const REFERENCES = 57704
const REPLICATION = 57705
const SLAVE = 57706
const CLIENT = 57707
const USAGE = 57708
const RELOAD = 57709
const FILE = 57710
const TEMPORARY = 57711
const ROUTINE = 57712
const EVENT = 57713
const SHUTDOWN = 57714
const NULLX = 57715
const AUTO_INCREMENT = 57716
const APPROXNUM = 57717
const SIGNED = 57718
const UNSIGNED = 57719
const ZEROFILL = 57720
const ENGINES = 57721
const LOW_CARDINALITY = 57722
const AUTOEXTEND_SIZE = 57723
const ADMIN_NAME = 57724
const RANDOM = 57725
const SUSPEND = 57726
const ATTRIBUTE = 57727
const HISTORY = 57728
const REUSE = 57729
const CURRENT = 57730
const OPTIONAL = 57731
const FAILED_LOGIN_ATTEMPTS = 57732
const PASSWORD_LOCK_TIME = 57733
const UNBOUNDED = 57734
const SECONDARY = 57735
const RESTRICTED = 57736
const USER = 57737
const IDENTIFIED = 57738
const CIPHER = 57739
const ISSUER = 57740
const X509 = 57741
const SUBJECT = 57742
const SAN = 57743
const REQUIRE = 57744
const SSL = 57745
const NONE = 57746
const PASSWORD = 57747
const SHARED = 57748
const EXCLUSIVE = 57749
const MAX_QUERIES_PER_HOUR = 57750
const MAX_UPDATES_PER_HOUR = 57751
const MAX_CONNECTIONS_PER_HOUR = 57752
const MAX_USER_CONNECTIONS = 57753
const FORMAT = 57754
const VERBOSE = 57755
const CONNECTION = 57756
const TRIGGERS = 57757
const PROFILES = 57758
const LOAD = 57759
const INLINE = 57760
const INFILE = 57761
const TERMINATED = 57762
const OPTIONALLY = 57763
const ENCLOSED = 57764
const ESCAPED = 57765
const STARTING = 57766
const LINES = 57767
const ROWS = 57768
const IMPORT = 57769
const DISCARD = 57770
const JSONTYPE = 57771
const MODUMP = 57772
const OVER = 57773
const PRECEDING = 57774
const FOLLOWING = 57775
const GROUPS = 57776
const DATABASES = 57777
const TABLES = 57778
const SEQUENCES = 57779
const EXTENDED = 57780
const FULL = 57781
const PROCESSLIST = 57782
const FIELDS = 57783
const COLUMNS = 57784
const OPEN = 57785
const ERRORS = 57786
const WARNINGS = 57787
const INDEXES = 57788
const SCHEMAS = 57789
const NODE = 57790
const LOCKS = 57791
const ROLES = 57792
const TABLE_NUMBER = 57793
const COLUMN_NUMBER = 57794
const TABLE_VALUES = 57795
const TABLE_SIZE = 57796
const NAMES = 57797
const GLOBAL = 57798
const PERSIST = 57799
const SESSION = 57800
const ISOLATION = 57801
const LEVEL = 57802
const READ = 57803
const WRITE = 57804
const ONLY = 57805
const REPEATABLE = 57806
const COMMITTED = 57807
const UNCOMMITTED = 57808
const SERIALIZABLE = 57809
const LOCAL = 57810
const EVENTS = 57811
const PLUGINS = 57812
const CURRENT_TIMESTAMP = 57813
const DATABASE = 57814
const CURRENT_TIME = 57815
const LOCALTIME = 57816
const LOCALTIMESTAMP = 57817
const UTC_DATE = 57818
const UTC_TIME = 57819
const UTC_TIMESTAMP = 57820
const REPLACE = 57821
const CONVERT = 57822
const SEPARATOR = 57823
const TIMESTAMPDIFF = 57824
const CURRENT_DATE = 57825
const CURRENT_USER = 57826
const CURRENT_ROLE = 57827
const SECOND_MICROSECOND = 57828
const MINUTE_MICROSECOND = 57829
const MINUTE_SECOND = 57830
const HOUR_MICROSECOND = 57831
const HOUR_SECOND = 57832
const HOUR_MINUTE = 57833
const DAY_MICROSECOND = 57834
const DAY_SECOND = 57835
const DAY_MINUTE = 57836
const DAY_HOUR = 57837
const YEAR_MONTH = 57838
const SQL_TSI_HOUR = 57839
const SQL_TSI_DAY = 57840
const SQL_TSI_WEEK = 57841
const SQL_TSI_MONTH = 57842
const SQL_TSI_QUARTER = 57843
const SQL_TSI_YEAR = 57844
const SQL_TSI_SECOND = 57845
const SQL_TSI_MINUTE = 57846
const RECURSIVE = 57847
const CONFIG = 57848
const DRAINER = 57849
const SOURCE = 57850
const STREAM = 57851
const HEADERS = 57852
const CONNECTOR = 57853
const CONNECTORS = 57854
const DAEMON = 57855
const PAUSE = 57856
const CANCEL = 57857
const TASK = 57858
const RESUME = 57859
const MATCH = 57860
const AGAINST = 57861
const BOOLEAN = 57862
const LANGUAGE = 57863
const WITH = 57864
const QUERY = 57865
const EXPANSION = 57866
const WITHOUT = 57867
const VALIDATION = 57868
const ADDDATE = 57869
const BIT_AND = 57870
const BIT_OR = 57871
const BIT_XOR = 57872
const CAST = 57873
const COUNT = 57874
const APPROX_COUNT = 57875
const APPROX_COUNT_DISTINCT = 57876
const SERIAL_EXTRACT = 57877
const APPROX_PERCENTILE = 57878
const CURDATE = 57879
const CURTIME = 57880
const DATE_ADD = 57881
const DATE_SUB = 57882
const EXTRACT = 57883
const GROUP_CONCAT = 57884
const MAX = 57885
const MID = 57886
const MIN = 57887
const NOW = 57888
const POSITION = 57889
const SESSION_USER = 57890
const STD = 57891
const STDDEV = 57892
const MEDIAN = 57893
const CLUSTER_CENTERS = 57894
const KMEANS = 57895
const STDDEV_POP = 57896
const STDDEV_SAMP = 57897
const SUBDATE = 57898
const SUBSTR = 57899
const SUBSTRING = 57900
const SUM = 57901
const SYSDATE = 57902
const SYSTEM_USER = 57903
const TRANSLATE = 57904
const TRIM = 57905
const VARIANCE = 57906
const VAR_POP = 57907
const VAR_SAMP = 57908
const AVG = 57909
const RANK = 57910
const ROW_NUMBER = 57911
const DENSE_RANK = 57912
const BIT_CAST = 57913
const BITMAP_BIT_POSITION = 57914
const BITMAP_BUCKET_NUMBER = 57915
const BITMAP_COUNT = 57916
const BITMAP_CONSTRUCT_AGG = 57917
const BITMAP_OR_AGG = 57918
const NEXTVAL = 57919
const SETVAL = 57920
const CURRVAL = 57921
const LASTVAL = 57922
const ARROW = 57923
const ROW = 57924
const OUTFILE = 57925
const HEADER = 57926
const MAX_FILE_SIZE = 57927
const FORCE_QUOTE = 57928
const PARALLEL = 57929
const UNUSED = 57930
const BINDINGS = 57931
const DO = 57932
const DECLARE = 57933
const LOOP = 57934
const WHILE = 57935
const LEAVE = 57936
const ITERATE = 57937
const UNTIL = 57938
const CALL = 57939
const PREV = 57940
const SLIDING = 57941
const FILL = 57942
const SPBEGIN = 57943
const BACKEND = 57944
const SERVERS = 57945
const HANDLER = 57946
const PERCENT = 57947
const SAMPLE = 57948
const KILL = 57949
const BACKUP = 57950
const FILESYSTEM = 57951
const PARALLELISM = 57952
const QUERY_RESULT = 57953

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:11726

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 119,
	11, 714,
	22, 714,
	-2, 707,
	-1, 139,
	238, 1105,
	240, 1006,
	-2, 1053,
	-1, 164,
	43, 540,
	240, 540,
	267, 547,
	268, 547,
	463, 540,
	-2, 574,
	-1, 205,
	632, 1858,
	-2, 454,
	-1, 505,
	632, 1976,
	-2, 348,
	-1, 563,
	632, 2035,
	-2, 346,
	-1, 564,
	632, 2036,
	-2, 347,
	-1, 565,
	632, 2037,
	-2, 349,
	-1, 692,
	319, 136,
	435, 136,
	436, 136,
	-2, 1763,
	-1, 758,
	82, 1550,
	-2, 1913,
	-1, 759,
	82, 1568,
	-2, 1884,
	-1, 763,
	82, 1569,
	-2, 1912,
	-1, 796,
	82, 1477,
	-2, 2107,
	-1, 797,
	82, 1478,
	-2, 2106,
	-1, 798,
	82, 1479,
	-2, 2096,
	-1, 799,
	82, 2068,
	-2, 2089,
	-1, 800,
	82, 2069,
	-2, 2090,
	-1, 801,
	82, 2070,
	-2, 2098,
	-1, 802,
	82, 2071,
	-2, 2078,
	-1, 803,
	82, 2072,
	-2, 2087,
	-1, 804,
	82, 2073,
	-2, 2099,
	-1, 805,
	82, 2074,
	-2, 2100,
	-1, 806,
	82, 2075,
	-2, 2105,
	-1, 807,
	82, 2076,
	-2, 2110,
	-1, 808,
	82, 2077,
	-2, 2111,
	-1, 809,
	82, 1546,
	-2, 1950,
	-1, 810,
	82, 1547,
	-2, 1747,
	-1, 811,
	82, 1548,
	-2, 1959,
	-1, 812,
	82, 1549,
	-2, 1756,
	-1, 814,
	82, 1552,
	-2, 1764,
	-1, 815,
	82, 1553,
	-2, 1983,
	-1, 817,
	82, 1556,
	-2, 1783,
	-1, 819,
	82, 1558,
	-2, 1995,
	-1, 820,
	82, 1559,
	-2, 1994,
	-1, 821,
	82, 1560,
	-2, 1827,
	-1, 822,
	82, 1561,
	-2, 1908,
	-1, 825,
	82, 1564,
	-2, 2006,
	-1, 827,
	82, 1566,
	-2, 2009,
	-1, 828,
	82, 1567,
	-2, 2011,
	-1, 829,
	82, 1570,
	-2, 2019,
	-1, 830,
	82, 1571,
	-2, 1893,
	-1, 831,
	82, 1572,
	-2, 1938,
	-1, 832,
	82, 1573,
	-2, 1903,
	-1, 833,
	82, 1574,
	-2, 1928,
	-1, 844,
	82, 1455,
	-2, 2101,
	-1, 845,
	82, 1456,
	-2, 2102,
	-1, 846,
	82, 1457,
	-2, 2103,
	-1, 933,
	458, 574,
	459, 574,
	-2, 541,
	-1, 979,
	124, 1747,
	135, 1747,
	155, 1747,
	-2, 1721,
	-1, 1091,
	22, 741,
	-2, 690,
	-1, 1196,
	11, 714,
	22, 714,
	-2, 1335,
	-1, 1278,
	22, 741,
	-2, 690,
	-1, 1599,
	82, 1621,
	-2, 1910,
	-1, 1600,
	82, 1622,
	-2, 1911,
	-1, 1754,
	83, 891,
	-2, 897,
	-1, 2177,
	107, 1045,
	151, 1045,
	190, 1045,
	193, 1045,
	280, 1045,
	-2, 1038,
	-1, 2323,
	11, 714,
	22, 714,
	-2, 834,
	-1, 2355,
	83, 1707,
	156, 1707,
	-2, 1895,
	-1, 2356,
	83, 1707,
	156, 1707,
	-2, 1894,
	-1, 2357,
	83, 1683,
	156, 1683,
	-2, 1881,
	-1, 2358,
	83, 1684,
	156, 1684,
	-2, 1886,
	-1, 2359,
	83, 1685,
	156, 1685,
	-2, 1815,
	-1, 2360,
	83, 1686,
	156, 1686,
	-2, 1809,
	-1, 2361,
	83, 1687,
	156, 1687,
	-2, 1737,
	-1, 2362,
	83, 1688,
	156, 1688,
	-2, 1883,
	-1, 2363,
	83, 1689,
	156, 1689,
	-2, 1813,
	-1, 2364,
	83, 1690,
	156, 1690,
	-2, 1808,
	-1, 2365,
	83, 1691,
	156, 1691,
	-2, 1797,
	-1, 2366,
	83, 1707,
	156, 1707,
	-2, 1798,
	-1, 2367,
	83, 1707,
	156, 1707,
	-2, 1799,
	-1, 2369,
	83, 1696,
	156, 1696,
	-2, 1928,
	-1, 2370,
	83, 1674,
	156, 1674,
	-2, 1913,
	-1, 2371,
	83, 1705,
	156, 1705,
	-2, 1884,
	-1, 2372,
	83, 1705,
	156, 1705,
	-2, 1912,
	-1, 2373,
	83, 1705,
	156, 1705,
	-2, 1765,
	-1, 2374,
	83, 1703,
	156, 1703,
	-2, 1903,
	-1, 2375,
	83, 1700,
	156, 1700,
	-2, 1788,
	-1, 2376,
	82, 1655,
	83, 1655,
	156, 1655,
	393, 1655,
	394, 1655,
	395, 1655,
	-2, 1736,
	-1, 2377,
	82, 1656,
	83, 1656,
	156, 1656,
	393, 1656,
	394, 1656,
	395, 1656,
	-2, 1738,
	-1, 2378,
	82, 1657,
	83, 1657,
	156, 1657,
	393, 1657,
	394, 1657,
	395, 1657,
	-2, 1955,
	-1, 2379,
	82, 1659,
	83, 1659,
	156, 1659,
	393, 1659,
	394, 1659,
	395, 1659,
	-2, 1885,
	-1, 2380,
	82, 1661,
	83, 1661,
	156, 1661,
	393, 1661,
	394, 1661,
	395, 1661,
	-2, 1867,
	-1, 2381,
	82, 1663,
	83, 1663,
	156, 1663,
	393, 1663,
	394, 1663,
	395, 1663,
	-2, 1814,
	-1, 2382,
	82, 1665,
	83, 1665,
	156, 1665,
	393, 1665,
	394, 1665,
	395, 1665,
	-2, 1793,
	-1, 2383,
	82, 1666,
	83, 1666,
	156, 1666,
	393, 1666,
	394, 1666,
	395, 1666,
	-2, 1794,
	-1, 2384,
	82, 1668,
	83, 1668,
	156, 1668,
	393, 1668,
	394, 1668,
	395, 1668,
	-2, 1735,
	-1, 2385,
	83, 1710,
	156, 1710,
	393, 1710,
	394, 1710,
	395, 1710,
	-2, 1770,
	-1, 2386,
	83, 1710,
	156, 1710,
	393, 1710,
	394, 1710,
	395, 1710,
	-2, 1784,
	-1, 2387,
	83, 1713,
	156, 1713,
	393, 1713,
	394, 1713,
	395, 1713,
	-2, 1766,
	-1, 2388,
	83, 1713,
	156, 1713,
	393, 1713,
	394, 1713,
	395, 1713,
	-2, 1830,
	-1, 2389,
	83, 1710,
	156, 1710,
	393, 1710,
	394, 1710,
	395, 1710,
	-2, 1851,
	-1, 2584,
	107, 1045,
	151, 1045,
	190, 1045,
	193, 1045,
	280, 1045,
	-2, 1039,
	-1, 2600,
	80, 634,
	156, 634,
	-2, 1218,
	-1, 2988,
	193, 1045,
	304, 1303,
	-2, 1275,
	-1, 3144,
	107, 1045,
	151, 1045,
	190, 1045,
	193, 1045,
	-2, 1161,
	-1, 3146,
	107, 1045,
	151, 1045,
	190, 1045,
	193, 1045,
	-2, 1161,
	-1, 3158,
	80, 634,
	156, 634,
	-2, 1219,
	-1, 3179,
	193, 1045,
	304, 1303,
	-2, 1276,
	-1, 3314,
	107, 1045,
	151, 1045,
	190, 1045,
	193, 1045,
	-2, 1162,
	-1, 3340,
	83, 1123,
	156, 1123,
	-2, 1045,
	-1, 3468,
	83, 1123,
	156, 1123,
	-2, 1045,
	-1, 3614,
	83, 1127,
	156, 1127,
	-2, 1045,
	-1, 3661,
	83, 1128,
	156, 1128,
	-2, 1045,
}

const yyPrivate = 57344

const yyLast = 47038

var yyAct = [...]int{
	725, 702, 727, 3707, 3681, 2629, 194, 3700, 3618, 1838,
	3624, 1579, 3164, 3257, 3521, 3007, 3617, 3547, 3625, 3468,
	2974, 711, 3074, 3506, 3577, 3368, 2623, 3446, 2440, 3500,
	3193, 1231, 3075, 3467, 1361, 3525, 2632, 3302, 1575, 3396,
	597, 704, 3299, 755, 1423, 3301, 3507, 1092, 1500, 2626,
	3252, 613, 3509, 619, 619, 1367, 3437, 1786, 3261, 619,
	636, 645, 3131, 2221, 645, 2983, 3180, 978, 3321, 2603,
	3311, 3283, 1626, 2947, 740, 119, 1582, 2910, 56, 3147,
	119, 700, 3072, 2736, 1928, 3120, 2737, 2719, 2653, 2936,
	179, 3003, 36, 2735, 2985, 2992, 2729, 1893, 3149, 656,
	3316, 2475, 2036, 1640, 2798, 3060, 650, 2351, 2758, 2224,
	2732, 3040, 2573, 2915, 1416, 1997, 694, 2911, 2917, 2920,
	1925, 2913, 2912, 1083, 1943, 2188, 2585, 2955, 2301, 2842,
	2156, 625, 2144, 2991, 119, 2145, 2020, 2771, 699, 2908,
	2422, 2006, 908, 2317, 2353, 1496, 2405, 2005, 118, 1971,
	1504, 2318, 642, 2254, 2032, 1732, 1501, 1998, 2781, 35,
	2031, 1896, 1921, 1332, 2562, 2306, 2557, 1894, 597, 972,
	1817, 2655, 2634, 2222, 1828, 2595, 6, 1370, 190, 8,
	189, 7, 1035, 2187, 1510, 1762, 2349, 1573, 1301, 2033,
	1463, 1432, 693, 2066, 194, 1402, 194, 2168, 1026, 1027,
	2217, 1633, 703, 2508, 1613, 619, 1489, 612, 1105, 596,
	1528, 712, 2043, 26, 1564, 1513, 2004, 1987, 2001, 1470,
	1961, 971, 1572, 15, 1401, 1350, 1346, 13, 907, 14,
	2325, 1798, 941, 1641, 1455, 628, 23, 1761, 848, 658,
	1362, 659, 1797, 32, 1399, 2507, 985, 631, 16, 10,
	987, 180, 22, 119, 884, 644, 170, 176, 905, 1276,
	928, 890, 1462, 1232, 655, 2040, 3431, 2543, 119, 2327,
	119, 2543, 2543, 641, 1164, 1165, 1166, 1163, 1164, 1165,
	1166, 1163, 1334, 637, 1022, 1023, 1024, 639, 3161, 640,
	1164, 1165, 1166, 1163, 2962, 2050, 1578, 1087, 3134, 3067,
	2463, 695, 2411, 638, 2010, 2409, 2408, 2406, 1745, 1477,
	1019, 1473, 1018, 624, 178, 614, 2143, 1295, 2892, 648,
	984, 850, 1019, 851, 2889, 1019, 1338, 2894, 2891, 3183,
	3692, 986, 1384, 2535, 2533, 615, 1739, 1291, 1164, 1165,
	1166, 1163, 1087, 3250, 1475, 2794, 2792, 701, 1164, 1165,
	1166, 1163, 1976, 3403, 3397, 1017, 3253, 8, 3073, 7,
	1509, 2017, 1226, 3511, 2000, 849, 1371, 3195, 2869, 3599,
	2262, 177, 860, 177, 2537, 1127, 3288, 2449, 2457, 177,
	3186, 3453, 177, 177, 52, 166, 140, 177, 2037, 620,
	3284, 3181, 695, 1296, 3148, 2591, 3203, 3204, 2179, 3421,
	1517, 177, 3182, 3558, 1442, 177, 1441, 1440, 990, 988,
	989, 1307, 2867, 1324, 2172, 654, 2048, 2343, 1161, 117,
	2764, 177, 52, 166, 140, 3454, 2344, 2814, 3423, 1938,
	1514, 2423, 177, 52, 166, 140, 2765, 2766, 1565, 3187,
	171, 1569, 2589, 1812, 960, 1906, 1907, 1103, 171, 2806,
	177, 1516, 171, 117, 1297, 1905, 171, 177, 52, 166,
	140, 177, 52, 166, 140, 1568, 1746, 1747, 1526, 839,
	171, 838, 840, 841, 171, 842, 843, 1380, 2559, 1142,
	1381, 861, 1143, 1135, 950, 1537, 1137, 1403, 2560, 1405,
	171, 2978, 982, 2331, 983, 912, 2330, 2893, 1523, 2332,
	1366, 171, 1581, 2890, 1365, 1368, 1369, 1549, 1368, 1369,
	1145, 1154, 3628, 3629, 1138, 2976, 1159, 3274, 981, 1525,
	980, 1100, 1358, 3514, 3590, 3514, 171, 3513, 3596, 3512,
	171, 3513, 3589, 3202, 2132, 2225, 3649, 2558, 3512, 3588,
	3592, 3498, 1306, 3685, 3686, 3501, 3502, 3503, 3504, 1570,
	3076, 2799, 2444, 3579, 3579, 2800, 3582, 2801, 3400, 1585,
	3191, 3076, 1097, 2052, 910, 911, 1383, 3518, 3089, 1108,
	2929, 1912, 1567, 3121, 2044, 951, 1922, 3128, 1560, 896,
	2538, 2674, 3188, 3192, 3190, 3189, 1476, 1474, 956, 954,
	1140, 955, 1108, 2295, 1131, 2931, 2167, 2549, 1984, 1147,
	3425, 3594, 1148, 1916, 3415, 2565, 3416, 3293, 3205, 3601,
	3602, 2921, 2454, 1483, 1482, 1157, 1158, 619, 619, 1133,
	3197, 3198, 3597, 3598, 2830, 2926, 2927, 1156, 619, 1096,
	1150, 1136, 1139, 2832, 163, 2260, 1130, 2723, 3428, 3251,
	2793, 2928, 2298, 3290, 2297, 2302, 2547, 645, 645, 139,
	619, 175, 3220, 1141, 3273, 3006, 689, 1132, 953, 691,
	3418, 952, 3275, 3656, 690, 1095, 3627, 3205, 2925, 2049,
	2945, 164, 3004, 3005, 2956, 1584, 1583, 961, 3540, 3184,
	1936, 1937, 2548, 2728, 3535, 3196, 3458, 2596, 3526, 1566,
	2980, 3417, 2536, 647, 1393, 1308, 646, 2174, 937, 957,
	3210, 3450, 3542, 2975, 3217, 3165, 913, 119, 119, 985,
	1146, 1204, 3548, 987, 2628, 2055, 2057, 2058, 3172, 1356,
	1345, 1294, 1152, 1153, 3517, 642, 642, 3221, 1382, 3359,
	1144, 3718, 2272, 915, 1134, 2271, 3415, 3264, 3416, 1113,
	1029, 3430, 3092, 2571, 1089, 1412, 2836, 2542, 1151, 2624,
	2625, 1343, 2628, 1122, 3410, 2292, 2293, 1096, 2038, 1411,
	2038, 1120, 959, 2010, 1110, 1109, 3348, 1342, 2240, 1088,
	1341, 2038, 1088, 1149, 2220, 2243, 1360, 1359, 3009, 3549,
	1196, 2923, 3438, 984, 987, 2984, 1084, 1110, 1109, 3150,
	3472, 2888, 3418, 1236, 986, 2813, 936, 935, 1235, 2071,
	1102, 3354, 2263, 2220, 643, 3248, 3616, 1019, 2237, 1302,
	1019, 2011, 2039, 1019, 1019, 3201, 3600, 1088, 934, 1019,
	1019, 654, 3452, 3417, 2703, 1661, 898, 3576, 899, 909,
	1400, 3079, 2242, 3000, 2450, 2407, 3703, 2051, 2335, 958,
	914, 946, 643, 3459, 2258, 1478, 641, 641, 1591, 1594,
	1595, 2041, 2835, 3424, 984, 2230, 637, 637, 3451, 1592,
	639, 639, 640, 640, 942, 986, 53, 1368, 1369, 2346,
	653, 1316, 1195, 1304, 613, 2241, 638, 638, 643, 849,
	1099, 1101, 643, 1322, 1321, 1091, 2534, 1320, 1111, 3200,
	1198, 1368, 1369, 1119, 3289, 1274, 2458, 141, 1279, 141,
	943, 947, 1115, 1116, 53, 141, 2932, 908, 141, 141,
	1923, 3411, 3426, 141, 2564, 3508, 2981, 1319, 1121, 3471,
	931, 2922, 929, 933, 950, 1205, 1281, 141, 930, 927,
	926, 141, 932, 917, 918, 916, 919, 920, 921, 922,
	53, 948, 1357, 949, 53, 2833, 1090, 141, 983, 3593,
	172, 173, 1085, 174, 944, 945, 2056, 619, 141, 1395,
	1913, 2675, 1364, 2676, 2677, 597, 597, 1561, 1901, 3008,
	2568, 2569, 3294, 3704, 597, 597, 141, 2067, 1427, 1427,
	2924, 619, 2227, 141, 3615, 2567, 2231, 141, 1657, 649,
	3114, 940, 1915, 1127, 1654, 3004, 3005, 939, 1656, 1653,
	1655, 1659, 1660, 645, 1456, 613, 1658, 3361, 2483, 1466,
	1466, 1309, 2776, 2777, 3350, 2236, 1425, 1425, 3349, 2234,
	194, 618, 618, 1429, 2672, 2760, 2762, 626, 3001, 597,
	1434, 1247, 1248, 3355, 3356, 951, 1078, 1074, 1075, 1076,
	1077, 1329, 2488, 3411, 2487, 2486, 2484, 3412, 2577, 2580,
	2581, 2582, 2578, 2579, 1200, 1201, 1202, 1203, 1436, 3080,
	2053, 2054, 625, 951, 2545, 1311, 1312, 1313, 1314, 1315,
	2148, 1317, 2704, 2706, 2707, 2708, 2705, 1323, 897, 1126,
	1508, 1305, 1511, 1484, 2227, 2230, 1300, 938, 1520, 1593,
	1421, 1422, 2844, 2843, 119, 3369, 3370, 3371, 3375, 3373,
	3374, 3372, 2150, 2149, 3701, 3702, 1749, 2943, 1750, 1280,
	1278, 2485, 900, 1547, 902, 903, 904, 2147, 953, 2226,
	2284, 952, 1298, 1299, 2228, 1748, 863, 1427, 864, 1427,
	1096, 2694, 2695, 3322, 1407, 1409, 1339, 1310, 1527, 1542,
	1543, 3719, 3586, 1419, 1420, 1093, 953, 1352, 1353, 952,
	1664, 1665, 1666, 1667, 1668, 1669, 1662, 1663, 119, 2227,
	2230, 1339, 987, 2159, 119, 1331, 1580, 2315, 987, 1162,
	1385, 1386, 3037, 626, 3714, 1127, 1515, 119, 2229, 2961,
	2170, 2425, 1524, 1010, 1015, 1016, 2160, 2161, 3033, 119,
	1394, 1372, 2761, 1337, 1375, 642, 1427, 867, 1479, 1344,
	2601, 2101, 1498, 1499, 2100, 3709, 1354, 1556, 1410, 1519,
	3117, 3698, 1457, 1639, 1373, 1374, 2231, 1376, 1377, 1378,
	3091, 2226, 2220, 2225, 2137, 2223, 2228, 1688, 1506, 3002,
	2449, 1546, 1503, 1093, 1627, 1507, 2944, 2215, 3013, 1545,
	3726, 1435, 3711, 1487, 624, 1490, 1491, 2046, 866, 2489,
	2490, 1448, 869, 868, 2693, 2602, 1492, 1493, 1454, 1601,
	1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611,
	1612, 1468, 1467, 2080, 2316, 1624, 1625, 1162, 3710, 962,
	2229, 3663, 3011, 1577, 3664, 2898, 1347, 1351, 1351, 1351,
	1162, 2231, 2316, 1096, 3636, 2169, 2226, 2220, 2225, 3037,
	2223, 2228, 1751, 1164, 1165, 1166, 1163, 1456, 1596, 1730,
	1347, 1347, 1760, 1427, 1764, 1765, 641, 1767, 1768, 619,
	1558, 2896, 1673, 1697, 619, 1964, 637, 1427, 1555, 1741,
	639, 908, 640, 1530, 1787, 951, 2316, 2203, 1552, 2602,
	3630, 1427, 1551, 2779, 3612, 2551, 638, 1395, 2539, 2079,
	1536, 1554, 636, 1535, 3664, 2229, 1538, 1164, 1165, 1166,
	1163, 1563, 1733, 1553, 1550, 1571, 2439, 3637, 1687, 1576,
	3568, 2430, 1811, 2346, 3543, 1012, 1013, 1014, 1275, 2257,
	1562, 1818, 1818, 3531, 1395, 2037, 1395, 1395, 1904, 2213,
	619, 619, 3491, 1760, 1760, 3490, 2142, 1427, 1890, 1891,
	1903, 1615, 3485, 2865, 2136, 1759, 1678, 1679, 1680, 1164,
	1165, 1166, 1163, 3434, 597, 1766, 1427, 3613, 953, 1694,
	3484, 952, 1695, 1574, 1164, 1165, 1166, 1163, 3483, 3482,
	3462, 1815, 3461, 3433, 853, 854, 855, 856, 2135, 1708,
	1709, 2108, 3226, 3434, 619, 1760, 1427, 2046, 1948, 2028,
	619, 619, 619, 1953, 1954, 2077, 3532, 1125, 1729, 3174,
	1958, 1959, 1960, 3140, 1962, 3492, 1966, 1934, 2192, 1939,
	2202, 1330, 3107, 194, 1902, 3434, 194, 194, 1630, 194,
	1413, 3103, 3021, 1702, 2755, 2514, 1885, 1886, 2506, 1736,
	3161, 2783, 1840, 3434, 2604, 2452, 1756, 1757, 1758, 2465,
	1127, 3434, 3434, 2046, 3385, 2046, 3434, 2451, 1770, 1771,
	1772, 1773, 1917, 2443, 1731, 2346, 2447, 1688, 1688, 2008,
	1737, 2208, 1909, 2096, 1911, 2081, 1688, 1688, 1799, 2435,
	1801, 1802, 3175, 2022, 1929, 1930, 3141, 1675, 1945, 1622,
	1623, 1755, 1931, 1932, 1808, 3108, 1947, 119, 2432, 2427,
	119, 119, 1819, 119, 3104, 3022, 1179, 2316, 1162, 1784,
	1787, 1162, 2016, 1975, 1427, 2035, 1978, 1979, 1794, 1981,
	1924, 1820, 1162, 1783, 1950, 1951, 1952, 1670, 1671, 2027,
	1674, 1804, 858, 1124, 1969, 618, 1086, 1800, 1689, 2192,
	2420, 985, 1956, 1809, 119, 987, 1094, 1532, 987, 1212,
	985, 1696, 2428, 1698, 987, 1699, 1700, 1701, 1112, 1763,
	1081, 1079, 1515, 2418, 119, 1821, 3127, 2029, 1118, 2416,
	3224, 2433, 2428, 1779, 1195, 1795, 1796, 1933, 1822, 1823,
	1892, 1908, 642, 1910, 1889, 1918, 2414, 1792, 2191, 2012,
	728, 738, 1805, 1806, 2138, 2115, 2114, 696, 2099, 2966,
	729, 2827, 730, 734, 737, 733, 731, 732, 2003, 865,
	1125, 1788, 1816, 2421, 3720, 984, 2090, 2003, 1946, 1417,
	853, 854, 855, 856, 984, 2089, 986, 2088, 2045, 1539,
	1418, 1803, 1348, 1789, 1790, 986, 2419, 2957, 1970, 1972,
	1335, 1196, 2415, 1763, 1336, 987, 3536, 1810, 1415, 3689,
	1813, 1814, 2064, 2065, 2255, 735, 3432, 1973, 1347, 2415,
	3407, 2192, 3323, 1989, 3352, 1379, 3153, 2137, 1162, 1162,
	3065, 1162, 1351, 1177, 1187, 1188, 1180, 1181, 1182, 1183,
	1184, 1185, 1186, 1179, 1351, 2009, 3351, 736, 2406, 1162,
	3537, 2018, 1574, 2015, 2013, 3151, 3337, 1438, 1162, 2026,
	1162, 2046, 1540, 641, 694, 3295, 3324, 619, 619, 619,
	3154, 3133, 3038, 637, 2958, 984, 3031, 639, 3026, 640,
	3023, 619, 619, 619, 619, 2938, 986, 2030, 2725, 1677,
	1676, 1677, 1676, 638, 2189, 870, 2575, 2025, 1634, 3152,
	2024, 2544, 2462, 2431, 2195, 1395, 1621, 2337, 1414, 1349,
	1326, 2060, 1182, 1183, 1184, 1185, 1186, 1179, 2959, 2059,
	1325, 1098, 1618, 1620, 1617, 1335, 1619, 2068, 858, 1336,
	2472, 1395, 2061, 2400, 2785, 1389, 1390, 1752, 1392, 1615,
	1396, 1397, 1398, 1634, 2073, 2074, 1166, 1163, 2249, 1020,
	1021, 1471, 3587, 1973, 1025, 1163, 3364, 3343, 1178, 1177,
	1187, 1188, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1179,
	3363, 2802, 1443, 1444, 1445, 1446, 1447, 2103, 1449, 1450,
	1451, 1452, 1453, 2858, 2664, 2662, 1459, 1460, 1461, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1179, 2640, 2109, 2110,
	1714, 2112, 1707, 1164, 1165, 1166, 1163, 2638, 2119, 2320,
	2320, 1903, 2320, 3694, 3068, 3296, 3297, 3693, 2256, 1187,
	1188, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1179, 3717,
	597, 597, 2527, 3291, 2528, 1391, 3640, 3611, 1096, 2131,
	2133, 2134, 2857, 3610, 1427, 619, 1170, 1171, 1172, 1173,
	1174, 1175, 1176, 1168, 3125, 3538, 2153, 2574, 2139, 1433,
	619, 3487, 2715, 2219, 2218, 3475, 1096, 2390, 613, 1164,
	1165, 1166, 1163, 1466, 1236, 1903, 2062, 2063, 2395, 1235,
	2397, 3713, 2341, 3465, 194, 2323, 2171, 3455, 1214, 987,
	3292, 3716, 2199, 1164, 1165, 1166, 1163, 2205, 3132, 2212,
	2206, 1213, 2354, 3398, 2410, 3326, 3325, 3166, 2324, 2261,
	3155, 3126, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2714,
	2092, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281,
	2282, 2283, 3124, 2285, 2286, 2287, 2288, 2289, 2445, 2290,
	2333, 2035, 2334, 2232, 2233, 2930, 2238, 2196, 1427, 1902,
	1427, 2207, 1427, 2322, 2730, 2326, 1692, 1096, 119, 984,
	2338, 2339, 2209, 3466, 2916, 2464, 1164, 1165, 1166, 1163,
	986, 1693, 2394, 2713, 2401, 3066, 1164, 1165, 1166, 1163,
	1164, 1165, 1166, 1163, 2348, 2474, 2091, 2711, 2455, 2402,
	3712, 1427, 2492, 2459, 2823, 2797, 2796, 2299, 2700, 1407,
	1409, 2204, 1164, 1165, 1166, 1163, 2698, 2499, 2697, 2696,
	2328, 1472, 1427, 1164, 1165, 1166, 1163, 1178, 1177, 1187,
	1188, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1179, 1425,
	2712, 2498, 2197, 2198, 2688, 2491, 2342, 1164, 1165, 1166,
	1163, 2682, 2200, 2201, 2710, 1471, 2681, 2441, 2442, 3621,
	1425, 1164, 1165, 1166, 1163, 2699, 2500, 3524, 2680, 2679,
	2345, 2540, 2141, 2393, 3555, 1992, 1991, 2503, 2504, 1096,
	1990, 3279, 3551, 1096, 1986, 2391, 1164, 1165, 1166, 1163,
	1427, 1985, 1942, 2572, 1164, 1165, 1166, 1163, 1941, 1760,
	2480, 1940, 1351, 1533, 2461, 2501, 1293, 2600, 1164, 1165,
	1166, 1163, 3420, 2606, 3258, 2552, 3687, 689, 3655, 2354,
	691, 3654, 2456, 3651, 3520, 690, 3300, 3505, 2470, 2616,
	1164, 1165, 1166, 1163, 1164, 1165, 1166, 1163, 1096, 3496,
	2448, 2476, 2531, 2476, 2846, 2453, 2637, 2437, 3479, 3474,
	3473, 2446, 3429, 1096, 1096, 1096, 1818, 3427, 3399, 1096,
	3345, 2648, 2649, 2650, 2651, 1096, 2658, 3307, 2659, 2660,
	3278, 2661, 3277, 2663, 3256, 119, 2466, 2467, 3254, 987,
	3233, 3230, 2482, 3228, 2658, 119, 2078, 2720, 3123, 3122,
	2643, 2644, 2587, 2590, 3119, 2647, 2320, 3419, 2586, 3100,
	3098, 2654, 3267, 3032, 3028, 3019, 3018, 1769, 2392, 2939,
	2716, 2903, 1774, 2902, 2607, 3266, 2900, 2399, 597, 1164,
	1165, 1166, 1163, 1760, 1096, 1903, 1903, 1903, 1903, 1164,
	1165, 1166, 1163, 2146, 1840, 2837, 1096, 1903, 2834, 1949,
	2320, 2561, 1164, 1165, 1166, 1163, 2795, 2554, 2769, 2556,
	2597, 2709, 2701, 2635, 1574, 2631, 1427, 2635, 2691, 2689,
	2738, 1164, 1165, 1166, 1163, 1167, 3214, 619, 619, 2553,
	2642, 3408, 2738, 1197, 2685, 2570, 2618, 2684, 1824, 1825,
	2509, 2510, 1207, 2683, 2541, 2076, 2515, 2605, 2438, 8,
	2599, 7, 1994, 1164, 1165, 1166, 1163, 795, 794, 1902,
	1902, 1902, 1902, 1988, 1744, 2615, 2617, 1215, 2620, 1743,
	2084, 1902, 1534, 1243, 3095, 2633, 1239, 1238, 1082, 2751,
	2639, 862, 3280, 194, 3265, 3146, 2646, 3145, 194, 2861,
	2670, 2671, 1944, 2636, 3144, 2469, 3116, 3112, 1944, 1944,
	1944, 1164, 1165, 1166, 1163, 2686, 2687, 2690, 2860, 1688,
	3110, 1688, 3109, 3106, 2812, 2678, 1164, 1165, 1166, 1163,
	1164, 1165, 1166, 1163, 2822, 3105, 3099, 3097, 3081, 2722,
	1427, 3071, 3070, 2829, 3056, 1164, 1165, 1166, 1163, 3055,
	177, 2721, 166, 140, 2726, 2967, 1763, 2724, 2906, 2895,
	2863, 2754, 2739, 2740, 2741, 2742, 2856, 119, 2752, 2608,
	2750, 2753, 119, 1164, 1165, 1166, 1163, 2848, 2613, 2614,
	2847, 2841, 2778, 2786, 2859, 2550, 2767, 2417, 2790, 2780,
	2770, 2413, 119, 2412, 2120, 2113, 987, 2107, 2106, 2105,
	119, 1733, 2104, 2102, 987, 2098, 2811, 2097, 1498, 1499,
	2807, 1164, 1165, 1166, 1163, 2095, 2609, 2086, 2815, 171,
	2630, 2612, 2083, 2082, 1993, 2851, 1727, 2853, 2525, 1506,
	1726, 1725, 1691, 1503, 1690, 2809, 1507, 1681, 1439, 2901,
	2826, 2788, 2816, 2787, 1437, 3639, 1096, 2524, 2784, 2831,
	177, 1233, 2919, 1491, 3550, 1164, 1165, 1166, 1163, 3493,
	2808, 2523, 2934, 1492, 1493, 2817, 2819, 619, 2810, 2818,
	3481, 3476, 2805, 2803, 1164, 1165, 1166, 1163, 2522, 2948,
	1096, 1486, 3379, 1096, 1096, 3362, 2838, 2521, 1164, 1165,
	1166, 1163, 1903, 2189, 2825, 2965, 3358, 2839, 2845, 3336,
	3320, 3241, 3239, 3212, 3211, 1164, 1165, 1166, 1163, 2854,
	2855, 2520, 3208, 2249, 1164, 1165, 1166, 1163, 3207, 171,
	3669, 2519, 3173, 2852, 3170, 2990, 3168, 2993, 3135, 2993,
	2993, 1497, 1488, 2897, 1096, 1502, 1505, 1494, 1164, 1165,
	1166, 1163, 1333, 2717, 2942, 2641, 1465, 1465, 1164, 1165,
	1166, 1163, 2593, 3014, 985, 2592, 119, 3010, 987, 119,
	987, 1427, 1427, 987, 3567, 2518, 1902, 2588, 2555, 2899,
	2977, 2979, 2904, 3012, 2951, 2586, 2526, 2954, 2763, 2426,
	2849, 2850, 2336, 2291, 119, 2190, 2162, 2905, 987, 2963,
	2140, 2935, 1164, 1165, 1166, 1163, 1616, 171, 1955, 1425,
	1425, 2941, 2973, 1754, 1740, 3015, 3016, 1559, 619, 1518,
	1495, 1292, 2960, 2919, 1277, 2163, 2164, 2165, 2964, 2950,
	2989, 1273, 2952, 2953, 1760, 1760, 1521, 2998, 984, 2180,
	2181, 2182, 2183, 2219, 2218, 2972, 1272, 1271, 1270, 986,
	1269, 2870, 2871, 1268, 1267, 1266, 1265, 2872, 2873, 2874,
	2875, 2999, 2876, 2877, 2878, 2879, 2880, 2881, 2882, 2883,
	2884, 2885, 2994, 2995, 1264, 1263, 1262, 2988, 1261, 1260,
	1096, 1259, 1258, 1257, 2492, 1256, 1255, 1254, 1703, 1704,
	1705, 1706, 1253, 3069, 1710, 1711, 1712, 1713, 1715, 1716,
	1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1252, 1251,
	1586, 1587, 1588, 1589, 1590, 1250, 2354, 1178, 1177, 1187,
	1188, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1179, 2996,
	1249, 1246, 3667, 2517, 1245, 3024, 619, 1244, 1242, 3027,
	3030, 3025, 3020, 1241, 3034, 3035, 3029, 2516, 1240, 1237,
	3565, 1230, 1631, 3045, 1229, 1227, 1635, 1636, 1637, 1638,
	1164, 1165, 1166, 1163, 2513, 1672, 3049, 1226, 1225, 1224,
	3052, 3053, 3054, 1682, 1164, 1165, 1166, 1163, 1223, 1222,
	1221, 1220, 1190, 1219, 1194, 1218, 1217, 3058, 1216, 1211,
	3064, 1164, 1165, 1166, 1163, 3334, 1210, 1209, 2971, 1208,
	1191, 1193, 1189, 1433, 1192, 1178, 1177, 1187, 1188, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1179, 1129, 1944, 1080,
	3041, 3042, 3082, 3084, 3087, 1734, 3563, 3561, 3209, 3088,
	3083, 2194, 2176, 1117, 3101, 2968, 3626, 3044, 2576, 2347,
	2969, 2970, 2468, 1996, 1128, 3047, 3139, 3046, 3093, 1178,
	1177, 1187, 1188, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	1179, 2320, 1903, 3158, 2744, 2743, 1178, 1177, 1187, 1188,
	1180, 1181, 1182, 1183, 1184, 1185, 1186, 1179, 2747, 2745,
	3341, 2436, 119, 2748, 2746, 3176, 987, 1791, 1096, 119,
	2429, 2476, 2512, 987, 104, 1327, 3243, 2990, 2511, 2937,
	3115, 1096, 3113, 2749, 3244, 2312, 2313, 3118, 1781, 1782,
	2821, 1807, 1096, 2505, 3223, 55, 54, 2495, 1427, 1164,
	1165, 1166, 1163, 2259, 3177, 1164, 1165, 1166, 1163, 1776,
	1777, 1778, 3130, 3219, 1760, 3160, 1902, 3216, 1096, 3059,
	1164, 1165, 1166, 1163, 1164, 1165, 1166, 1163, 2654, 3085,
	3086, 621, 3206, 3242, 1877, 2986, 1425, 2987, 3167, 3157,
	3169, 1480, 3225, 3036, 1734, 2424, 2152, 194, 2666, 1734,
	1734, 3163, 622, 623, 2738, 2667, 2668, 2669, 3048, 2471,
	1096, 2441, 2442, 3678, 3235, 1629, 2460, 1529, 1512, 3199,
	1957, 1123, 3213, 3218, 3215, 2914, 3136, 3137, 3138, 2907,
	3222, 3245, 3142, 3143, 3156, 2619, 1164, 1165, 1166, 1163,
	3227, 3229, 1164, 1165, 1166, 1163, 2738, 2594, 1096, 1974,
	3232, 2211, 1977, 3237, 3236, 1980, 2185, 3234, 1982, 1785,
	1753, 1677, 1676, 1288, 1289, 3478, 1096, 1427, 1427, 1286,
	1287, 119, 2948, 2308, 2311, 2312, 2313, 2309, 3231, 2310,
	2314, 1284, 1285, 3017, 3315, 2598, 3315, 3249, 3263, 2300,
	2303, 2296, 1888, 3259, 1282, 1283, 1388, 3260, 1387, 1096,
	3330, 1096, 3303, 1155, 3051, 1425, 1627, 2772, 2151, 2021,
	3333, 3305, 3335, 2023, 3309, 3310, 1340, 1318, 1427, 1363,
	3287, 3646, 3644, 3604, 3584, 3286, 3285, 2308, 2311, 2312,
	2313, 2309, 3583, 2310, 2314, 1580, 619, 1580, 1096, 1096,
	3306, 3581, 1096, 1096, 3527, 3308, 3494, 3319, 3393, 119,
	3392, 3331, 3318, 987, 3255, 3102, 1627, 3078, 3160, 3077,
	3381, 3062, 3329, 2244, 2214, 1531, 3376, 3312, 3061, 2782,
	1787, 3339, 3390, 3206, 3303, 3303, 3342, 3247, 3303, 3303,
	1339, 3394, 3395, 3366, 3367, 3338, 2824, 3377, 3378, 3282,
	3346, 3671, 3670, 3670, 1427, 3344, 2178, 2085, 1114, 3671,
	3387, 3360, 3057, 1093, 853, 854, 855, 856, 2070, 1093,
	3199, 1355, 2075, 181, 3, 63, 2, 3276, 3690, 3691,
	3159, 1, 2532, 1738, 3414, 3386, 1290, 3388, 3162, 3382,
	857, 852, 1425, 1404, 2329, 1935, 1431, 1742, 3406, 859,
	2756, 3401, 2757, 3050, 2759, 2773, 2774, 2546, 3405, 3409,
	2042, 3447, 2727, 2087, 3441, 3413, 2294, 2166, 2933, 1328,
	901, 2094, 1683, 1544, 1009, 1107, 1541, 1096, 1106, 1104,
	1632, 742, 1999, 3268, 2718, 3269, 2692, 3389, 3464, 3677,
	3470, 3706, 3435, 2111, 3638, 3680, 1557, 726, 2116, 2117,
	2118, 3575, 3497, 2121, 2122, 2123, 2124, 2125, 2126, 2127,
	2128, 2129, 2130, 1580, 3383, 3456, 3444, 3443, 3384, 3642,
	1096, 3460, 3499, 3404, 3442, 1427, 3263, 2047, 119, 1160,
	2804, 924, 987, 783, 753, 1228, 1522, 3332, 2868, 2866,
	1011, 752, 3129, 2566, 3477, 2775, 3439, 3449, 1008, 925,
	1983, 3402, 1481, 1485, 2210, 3457, 3303, 3546, 3340, 2982,
	2627, 3541, 3516, 1425, 3171, 3486, 3272, 3270, 3271, 3488,
	660, 1914, 3510, 595, 969, 1096, 3380, 1995, 661, 2193,
	3595, 3495, 3480, 881, 2175, 882, 874, 2584, 2583, 1597,
	3528, 1178, 1177, 1187, 1188, 1180, 1181, 1182, 1183, 1184,
	1185, 1186, 1179, 1169, 3523, 1614, 2886, 2887, 1206, 698,
	2072, 3303, 3522, 2563, 3519, 3194, 2768, 62, 3545, 61,
	3530, 60, 1096, 3327, 3328, 59, 1965, 202, 744, 201,
	1427, 3539, 3298, 3570, 3573, 3572, 3682, 3560, 3562, 3564,
	3566, 724, 3544, 723, 722, 721, 720, 719, 3574, 3553,
	2307, 2305, 2304, 1898, 1897, 1963, 2946, 2657, 3303, 2652,
	1829, 1827, 2645, 2239, 2246, 1826, 3623, 3559, 1425, 3580,
	1427, 3578, 3556, 3447, 3569, 3557, 3357, 2702, 3262, 3489,
	1775, 2235, 1846, 2673, 1843, 2940, 1842, 2665, 3353, 3614,
	3347, 1874, 3445, 3603, 3605, 3622, 3314, 1734, 3178, 1734,
	3607, 3179, 3185, 2184, 1034, 1030, 1032, 1033, 1425, 1031,
	2481, 2216, 2909, 2158, 3606, 3608, 3609, 1734, 1734, 2157,
	2155, 2154, 1303, 3515, 3591, 3281, 2352, 3631, 2350, 3632,
	3043, 3633, 3039, 3634, 2007, 3645, 3529, 3647, 3648, 3635,
	3641, 3533, 3534, 3643, 2019, 1096, 2820, 1899, 1895, 3510,
	1465, 3650, 2177, 3422, 1780, 875, 2173, 156, 49, 101,
	154, 1006, 48, 90, 3470, 89, 3659, 100, 152, 47,
	186, 3660, 3554, 3662, 3661, 185, 3668, 3665, 3676, 188,
	3684, 3657, 3683, 3666, 187, 184, 3672, 3673, 3674, 3675,
	2403, 2404, 183, 1469, 182, 3585, 3317, 3695, 2434, 1096,
	3688, 847, 38, 37, 33, 12, 11, 34, 21, 20,
	3696, 3545, 3697, 3699, 1548, 19, 25, 31, 30, 3705,
	3708, 112, 111, 29, 110, 109, 1944, 108, 107, 177,
	52, 166, 140, 1007, 106, 1580, 28, 18, 42, 41,
	40, 9, 99, 3715, 97, 27, 98, 167, 95, 96,
	93, 3684, 3722, 3683, 159, 3721, 91, 74, 168, 73,
	72, 3708, 2473, 3723, 87, 2479, 86, 3727, 177, 52,
	166, 140, 2493, 2494, 85, 84, 83, 117, 82, 80,
	2496, 2497, 81, 923, 71, 70, 167, 69, 68, 67,
	3652, 3653, 105, 159, 94, 92, 2502, 168, 171, 78,
	88, 79, 77, 76, 1001, 996, 991, 995, 999, 75,
	66, 65, 898, 64, 899, 138, 117, 137, 136, 135,
	134, 132, 133, 131, 1586, 1734, 130, 2069, 129, 128,
	127, 105, 1004, 126, 43, 44, 994, 171, 45, 46,
	148, 2864, 147, 149, 3090, 151, 153, 150, 155, 145,
	879, 1178, 1177, 1187, 1188, 1180, 1181, 1182, 1183, 1184,
	1185, 1186, 1179, 143, 893, 146, 889, 144, 142, 57,
	102, 17, 24, 4, 0, 122, 123, 0, 124, 125,
	0, 0, 0, 0, 0, 0, 0, 1002, 0, 0,
	2610, 2611, 0, 0, 1005, 1178, 1177, 1187, 1188, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1179, 0, 0, 0,
	0, 0, 0, 0, 122, 123, 992, 124, 125, 0,
	0, 0, 871, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1003,
	0, 0, 671, 670, 677, 667, 139, 165, 175, 0,
	103, 0, 0, 0, 674, 675, 0, 676, 680, 0,
	0, 662, 0, 0, 0, 0, 0, 0, 164, 158,
	157, 685, 0, 0, 0, 58, 0, 0, 0, 993,
	0, 0, 0, 0, 0, 139, 165, 175, 0, 103,
	0, 0, 0, 895, 0, 888, 0, 0, 0, 0,
	0, 0, 0, 0, 892, 891, 0, 164, 158, 157,
	0, 0, 0, 0, 58, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 880, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 160, 161, 162, 0,
	0, 0, 0, 0, 0, 887, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1000, 0, 0, 0,
	0, 0, 0, 0, 897, 0, 0, 169, 0, 886,
	0, 0, 0, 885, 0, 160, 161, 162, 0, 872,
	0, 0, 0, 878, 0, 0, 0, 113, 0, 0,
	0, 163, 997, 114, 2789, 998, 2791, 0, 0, 0,
	0, 0, 0, 0, 0, 876, 169, 0, 0, 0,
	0, 0, 0, 0, 1734, 0, 0, 0, 0, 1734,
	1875, 0, 0, 0, 0, 1836, 113, 2021, 0, 0,
	163, 0, 114, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 1877, 1845, 0, 0, 663,
	665, 664, 2840, 51, 0, 1878, 1879, 0, 877, 669,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 673, 0, 0, 0, 0, 2862, 0, 688, 115,
	0, 1844, 0, 0, 0, 666, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 0, 1852, 0, 0, 0,
	0, 0, 53, 0, 3365, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 894, 0, 172, 173, 0,
	174, 53, 0, 0, 0, 141, 671, 670, 677, 667,
	0, 0, 0, 0, 0, 0, 0, 0, 674, 675,
	0, 676, 680, 0, 1868, 662, 0, 0, 0, 0,
	0, 0, 0, 0, 883, 685, 172, 173, 0, 174,
	0, 0, 0, 0, 141, 0, 0, 1875, 0, 0,
	0, 0, 1836, 0, 668, 672, 678, 0, 679, 681,
	0, 0, 682, 683, 684, 0, 0, 686, 687, 0,
	0, 0, 0, 116, 39, 0, 0, 0, 689, 2997,
	50, 691, 1877, 1845, 5, 0, 690, 0, 0, 0,
	120, 121, 1878, 1879, 0, 1835, 1837, 1834, 0, 1831,
	0, 0, 0, 0, 1856, 0, 0, 0, 0, 0,
	0, 0, 116, 39, 0, 1862, 0, 0, 1844, 50,
	0, 0, 0, 1847, 0, 1830, 0, 0, 0, 120,
	121, 0, 0, 1852, 0, 1850, 1884, 0, 0, 1851,
	1853, 1855, 0, 1857, 1858, 1859, 1863, 1864, 1865, 1867,
	1870, 1871, 1872, 0, 0, 0, 0, 0, 0, 0,
	1860, 1869, 1861, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1839, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1876, 0, 0, 0, 0, 0,
	0, 1868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1832, 1833, 0, 663, 665, 664, 0, 0, 0, 0,
	0, 0, 0, 669, 0, 0, 0, 0, 1873, 0,
	0, 0, 0, 0, 0, 673, 0, 0, 0, 0,
	0, 0, 688, 0, 0, 1849, 0, 0, 0, 666,
	0, 0, 1848, 657, 0, 0, 0, 0, 0, 0,
	0, 0, 1835, 2622, 1834, 0, 2621, 0, 0, 0,
	0, 1856, 0, 0, 0, 0, 1866, 0, 0, 0,
	0, 0, 1862, 0, 0, 1854, 3094, 0, 0, 0,
	0, 0, 0, 3096, 0, 0, 0, 0, 1881, 1880,
	0, 0, 1850, 1884, 0, 0, 1851, 1853, 1855, 0,
	1857, 1858, 1859, 1863, 1864, 1865, 1867, 1870, 1871, 1872,
	0, 0, 0, 0, 3111, 0, 0, 1860, 1869, 1861,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1839,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1841, 0, 0, 0, 0, 0, 0, 668, 672,
	678, 1876, 679, 681, 1052, 0, 682, 683, 684, 0,
	0, 686, 687, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1832, 1833, 0,
	0, 0, 0, 1883, 0, 0, 1882, 0, 0, 0,
	0, 0, 0, 0, 0, 1873, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1849, 0, 0, 0, 0, 0, 0, 1848,
	0, 0, 0, 0, 1052, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1866, 0, 1734, 0, 0, 0, 0,
	0, 0, 1854, 1661, 0, 0, 1734, 0, 0, 3238,
	0, 0, 3240, 0, 0, 1881, 1880, 1875, 0, 0,
	0, 1164, 1165, 1166, 1163, 1038, 0, 0, 0, 3246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1052, 1060, 1064, 1066, 1068, 1070,
	1071, 1073, 1877, 1078, 1074, 1075, 1076, 1077, 0, 1055,
	1056, 1057, 1058, 1036, 1037, 1061, 0, 1039, 1841, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1053,
	1049, 1050, 1059, 0, 0, 0, 0, 0, 0, 0,
	1063, 1065, 1067, 1069, 1072, 1038, 0, 0, 0, 1028,
	1661, 0, 0, 1852, 0, 0, 0, 0, 0, 0,
	1883, 0, 0, 1882, 0, 1060, 1064, 1066, 1068, 1070,
	1071, 1073, 0, 1078, 1074, 1075, 1076, 1077, 1054, 1055,
	1056, 1057, 1058, 1036, 1037, 1061, 0, 1039, 0, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1053,
	1049, 1050, 1059, 0, 0, 0, 0, 0, 0, 0,
	1063, 1065, 1067, 1069, 1072, 1038, 1657, 3440, 0, 0,
	0, 1868, 1654, 0, 0, 0, 1656, 1653, 1655, 1659,
	1660, 0, 0, 0, 1658, 1060, 1064, 1066, 1068, 1070,
	1071, 1073, 0, 1078, 1074, 1075, 1076, 1077, 1054, 1055,
	1056, 1057, 1058, 1036, 1037, 1061, 0, 1039, 0, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1053,
	1049, 1050, 1059, 0, 0, 0, 0, 0, 0, 0,
	1063, 1065, 1067, 1069, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1856, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1862, 1657, 0, 0, 2477, 2478, 1054, 1654,
	0, 0, 3436, 1656, 1653, 1655, 1659, 1660, 0, 0,
	0, 1658, 1850, 1884, 0, 0, 1851, 1853, 1855, 0,
	1857, 1858, 1859, 1863, 1864, 1865, 1867, 1870, 1871, 1872,
	0, 0, 0, 0, 0, 0, 0, 1860, 1869, 1861,
	0, 0, 0, 0, 0, 0, 0, 1642, 1643, 1644,
	1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1664, 1665,
	1666, 1667, 1668, 1669, 1662, 1663, 0, 0, 0, 0,
	0, 1876, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1873, 1215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1849, 0, 0, 0, 0, 0, 0, 1848,
	1062, 0, 0, 0, 1642, 1643, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1664, 1665, 1666, 1667, 1668,
	1669, 1662, 1663, 1866, 0, 0, 0, 0, 0, 0,
	0, 0, 1854, 0, 3552, 0, 0, 0, 0, 0,
	0, 0, 0, 760, 0, 0, 0, 0, 0, 0,
	0, 0, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 713, 0, 0, 0, 304,
	1062, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	751, 525, 476, 395, 348, 543, 542, 0, 0, 818,
	826, 0, 0, 0, 0, 0, 0, 0, 3619, 0,
	0, 705, 0, 0, 741, 795, 794, 728, 738, 0,
	0, 277, 200, 471, 590, 473, 472, 729, 0, 730,
	734, 737, 733, 731, 732, 0, 810, 0, 0, 0,
	1062, 0, 0, 697, 709, 0, 714, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	706, 707, 0, 0, 3619, 0, 761, 0, 708, 0,
	0, 756, 735, 739, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 736, 759, 763, 298, 832, 757,
	425, 271, 3619, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 833, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 754, 0, 587, 0,
	427, 0, 0, 816, 0, 0, 0, 399, 3725, 0,
	331, 0, 0, 0, 758, 0, 385, 366, 829, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	1685, 1684, 1686, 439, 332, 333, 0, 311, 259, 260,
	604, 814, 362, 553, 586, 478, 0, 828, 809, 811,
	812, 815, 819, 820, 821, 822, 823, 825, 827, 831,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 830, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 762, 528, 529, 352, 353, 354, 355, 817, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 839, 813, 838,
	840, 841, 837, 842, 843, 824, 718, 0, 769, 835,
	834, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 802, 776, 777, 778, 715, 779, 773,
	774, 716, 775, 803, 767, 799, 800, 743, 770, 780,
	798, 781, 801, 804, 805, 844, 845, 787, 771, 225,
	846, 784, 806, 797, 796, 782, 768, 807, 808, 750,
	745, 785, 786, 772, 790, 791, 792, 717, 764, 765,
	766, 788, 789, 746, 747, 748, 749, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 793, 760, 605, 474, 475, 585, 0, 710,
	0, 0, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 713, 0, 0, 0, 304,
	1735, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	751, 525, 476, 395, 348, 543, 542, 0, 0, 818,
	826, 0, 0, 0, 0, 0, 0, 0, 1926, 0,
	0, 705, 0, 0, 741, 795, 794, 728, 738, 0,
	0, 277, 200, 471, 590, 473, 472, 729, 0, 730,
	734, 737, 733, 731, 732, 0, 810, 0, 0, 0,
	0, 0, 0, 697, 709, 0, 714, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	706, 707, 0, 0, 0, 0, 761, 0, 708, 0,
	0, 1927, 735, 739, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 736, 759, 763, 298, 832, 757,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 833, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 754, 0, 587, 0,
	427, 0, 0, 816, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 758, 0, 385, 366, 829, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 814, 362, 553, 586, 478, 0, 828, 809, 811,
	812, 815, 819, 820, 821, 822, 823, 825, 827, 831,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 830, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 762, 528, 529, 352, 353, 354, 355, 817, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 839, 813, 838,
	840, 841, 837, 842, 843, 824, 718, 0, 769, 835,
	834, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 802, 776, 777, 778, 715, 779, 773,
	774, 716, 775, 803, 767, 799, 800, 743, 770, 780,
	798, 781, 801, 804, 805, 844, 845, 787, 771, 225,
	846, 784, 806, 797, 796, 782, 768, 807, 808, 750,
	745, 785, 786, 772, 790, 791, 792, 717, 764, 765,
	766, 788, 789, 746, 747, 748, 749, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 793, 0, 605, 474, 475, 585, 0, 710,
	177, 760, 0, 0, 0, 0, 0, 0, 0, 0,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 713, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 1199, 525,
	476, 395, 348, 543, 542, 0, 0, 818, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 705,
	0, 0, 741, 795, 794, 728, 738, 0, 0, 277,
	200, 471, 590, 473, 472, 729, 0, 730, 734, 737,
	733, 731, 732, 0, 810, 0, 0, 0, 0, 0,
	0, 697, 709, 0, 714, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 706, 707,
	0, 0, 0, 0, 761, 0, 708, 0, 0, 756,
	735, 739, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 736, 759, 763, 298, 832, 757, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 833, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 754, 0, 587, 0, 427, 0,
	0, 816, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 758, 0, 385, 366, 829, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 814,
	362, 553, 586, 478, 0, 828, 809, 811, 812, 815,
	819, 820, 821, 822, 823, 825, 827, 831, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 830,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 762,
	528, 529, 352, 353, 354, 355, 817, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 839, 813, 838, 840, 841,
	837, 842, 843, 824, 718, 0, 769, 835, 834, 836,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 141, 376, 309, 549,
	550, 802, 776, 777, 778, 715, 779, 773, 774, 716,
	775, 803, 767, 799, 800, 743, 770, 780, 798, 781,
	801, 804, 805, 844, 845, 787, 771, 225, 846, 784,
	806, 797, 796, 782, 768, 807, 808, 750, 745, 785,
	786, 772, 790, 791, 792, 717, 764, 765, 766, 788,
	789, 746, 747, 748, 749, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	793, 760, 605, 474, 475, 585, 0, 710, 0, 0,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 713, 0, 0, 0, 304, 3724, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 751, 525,
	476, 395, 348, 543, 542, 0, 0, 818, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 705,
	0, 0, 741, 795, 794, 728, 738, 0, 0, 277,
	200, 471, 590, 473, 472, 729, 0, 730, 734, 737,
	733, 731, 732, 0, 810, 0, 0, 0, 0, 0,
	0, 697, 709, 0, 714, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 706, 707,
	0, 0, 0, 0, 761, 0, 708, 0, 0, 756,
	735, 739, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 736, 759, 763, 298, 832, 757, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 833, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 754, 0, 587, 0, 427, 0,
	0, 816, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 758, 0, 385, 366, 829, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 814,
	362, 553, 586, 478, 0, 828, 809, 811, 812, 815,
	819, 820, 821, 822, 823, 825, 827, 831, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 830,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 762,
	528, 529, 352, 353, 354, 355, 817, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 839, 813, 838, 840, 841,
	837, 842, 843, 824, 718, 0, 769, 835, 834, 836,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 802, 776, 777, 778, 715, 779, 773, 774, 716,
	775, 803, 767, 799, 800, 743, 770, 780, 798, 781,
	801, 804, 805, 844, 845, 787, 771, 225, 846, 784,
	806, 797, 796, 782, 768, 807, 808, 750, 745, 785,
	786, 772, 790, 791, 792, 717, 764, 765, 766, 788,
	789, 746, 747, 748, 749, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	793, 760, 605, 474, 475, 585, 0, 710, 0, 0,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 713, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 751, 525,
	476, 395, 348, 543, 542, 0, 0, 818, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 705,
	0, 0, 741, 795, 794, 728, 738, 0, 0, 277,
	200, 471, 590, 473, 472, 729, 0, 730, 734, 737,
	733, 731, 732, 0, 810, 0, 0, 0, 0, 0,
	0, 697, 709, 0, 714, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 706, 707,
	0, 0, 0, 0, 761, 0, 708, 0, 0, 756,
	735, 739, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 736, 759, 763, 298, 832, 757, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 833, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 754, 0, 587, 0, 427, 0,
	0, 816, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 758, 0, 385, 366, 829, 3620, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 814,
	362, 553, 586, 478, 0, 828, 809, 811, 812, 815,
	819, 820, 821, 822, 823, 825, 827, 831, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 830,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 762,
	528, 529, 352, 353, 354, 355, 817, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 839, 813, 838, 840, 841,
	837, 842, 843, 824, 718, 0, 769, 835, 834, 836,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 802, 776, 777, 778, 715, 779, 773, 774, 716,
	775, 803, 767, 799, 800, 743, 770, 780, 798, 781,
	801, 804, 805, 844, 845, 787, 771, 225, 846, 784,
	806, 797, 796, 782, 768, 807, 808, 750, 745, 785,
	786, 772, 790, 791, 792, 717, 764, 765, 766, 788,
	789, 746, 747, 748, 749, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	793, 760, 605, 474, 475, 585, 0, 710, 0, 0,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 713, 0, 0, 0, 304, 1735, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 751, 525,
	476, 395, 348, 543, 542, 0, 0, 818, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 705,
	0, 0, 741, 795, 794, 728, 738, 0, 0, 277,
	200, 471, 590, 473, 472, 729, 0, 730, 734, 737,
	733, 731, 732, 0, 810, 0, 0, 0, 0, 0,
	0, 697, 709, 0, 714, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 706, 707,
	0, 0, 0, 0, 761, 0, 708, 0, 0, 756,
	735, 739, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 736, 759, 763, 298, 832, 757, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 833, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 754, 0, 587, 0, 427, 0,
	0, 816, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 758, 0, 385, 366, 829, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 814,
	362, 553, 586, 478, 0, 828, 809, 811, 812, 815,
	819, 820, 821, 822, 823, 825, 827, 831, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 830,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 762,
	528, 529, 352, 353, 354, 355, 817, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 839, 813, 838, 840, 841,
	837, 842, 843, 824, 718, 0, 769, 835, 834, 836,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 802, 776, 777, 778, 715, 779, 773, 774, 716,
	775, 803, 767, 799, 800, 743, 770, 780, 798, 781,
	801, 804, 805, 844, 845, 787, 771, 225, 846, 784,
	806, 797, 796, 782, 768, 807, 808, 750, 745, 785,
	786, 772, 790, 791, 792, 717, 764, 765, 766, 788,
	789, 746, 747, 748, 749, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	793, 760, 605, 474, 475, 585, 0, 710, 0, 0,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 713, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 751, 525,
	476, 395, 348, 543, 542, 0, 0, 818, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 705,
	0, 0, 741, 795, 794, 728, 738, 0, 0, 277,
	200, 471, 590, 473, 472, 729, 0, 730, 734, 737,
	733, 731, 732, 0, 810, 0, 0, 0, 0, 0,
	0, 697, 709, 0, 714, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 706, 707,
	1464, 0, 0, 0, 761, 0, 708, 0, 0, 756,
	735, 739, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 736, 759, 763, 298, 832, 757, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 833, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 754, 0, 587, 0, 427, 0,
	0, 816, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 758, 0, 385, 366, 829, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 814,
	362, 553, 586, 478, 0, 828, 809, 811, 812, 815,
	819, 820, 821, 822, 823, 825, 827, 831, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 830,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 762,
	528, 529, 352, 353, 354, 355, 817, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 839, 813, 838, 840, 841,
	837, 842, 843, 824, 718, 0, 769, 835, 834, 836,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 802, 776, 777, 778, 715, 779, 773, 774, 716,
	775, 803, 767, 799, 800, 743, 770, 780, 798, 781,
	801, 804, 805, 844, 845, 787, 771, 225, 846, 784,
	806, 797, 796, 782, 768, 807, 808, 750, 745, 785,
	786, 772, 790, 791, 792, 717, 764, 765, 766, 788,
	789, 746, 747, 748, 749, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	793, 0, 605, 474, 475, 585, 760, 710, 0, 2093,
	0, 0, 0, 0, 0, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 713, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 751, 525, 476, 395, 348, 543, 542,
	0, 0, 818, 826, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 705, 0, 0, 741, 795, 794,
	728, 738, 0, 0, 277, 200, 471, 590, 473, 472,
	729, 0, 730, 734, 737, 733, 731, 732, 0, 810,
	0, 0, 0, 0, 0, 0, 697, 709, 0, 714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 706, 707, 0, 0, 0, 0, 761,
	0, 708, 0, 0, 756, 735, 739, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 736, 759, 763,
	298, 832, 757, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 833, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 754,
	0, 587, 0, 427, 0, 0, 816, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 758, 0, 385,
	366, 829, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 814, 362, 553, 586, 478, 0,
	828, 809, 811, 812, 815, 819, 820, 821, 822, 823,
	825, 827, 831, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 830, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 762, 528, 529, 352, 353, 354,
	355, 817, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	839, 813, 838, 840, 841, 837, 842, 843, 824, 718,
	0, 769, 835, 834, 836, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 802, 776, 777, 778,
	715, 779, 773, 774, 716, 775, 803, 767, 799, 800,
	743, 770, 780, 798, 781, 801, 804, 805, 844, 845,
	787, 771, 225, 846, 784, 806, 797, 796, 782, 768,
	807, 808, 750, 745, 785, 786, 772, 790, 791, 792,
	717, 764, 765, 766, 788, 789, 746, 747, 748, 749,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 793, 760, 605, 474, 475,
	585, 0, 710, 0, 0, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 713, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 751, 525, 476, 395, 348, 543, 542,
	0, 0, 818, 826, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 705, 0, 0, 741, 795, 794,
	728, 738, 0, 0, 277, 200, 471, 590, 473, 472,
	729, 0, 730, 734, 737, 733, 731, 732, 0, 810,
	0, 0, 0, 0, 0, 0, 697, 709, 0, 714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 706, 707, 1728, 0, 0, 0, 761,
	0, 708, 0, 0, 756, 735, 739, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 736, 759, 763,
	298, 832, 757, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 833, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 754,
	0, 587, 0, 427, 0, 0, 816, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 758, 0, 385,
	366, 829, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 814, 362, 553, 586, 478, 0,
	828, 809, 811, 812, 815, 819, 820, 821, 822, 823,
	825, 827, 831, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 830, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 762, 528, 529, 352, 353, 354,
	355, 817, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	839, 813, 838, 840, 841, 837, 842, 843, 824, 718,
	0, 769, 835, 834, 836, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 802, 776, 777, 778,
	715, 779, 773, 774, 716, 775, 803, 767, 799, 800,
	743, 770, 780, 798, 781, 801, 804, 805, 844, 845,
	787, 771, 225, 846, 784, 806, 797, 796, 782, 768,
	807, 808, 750, 745, 785, 786, 772, 790, 791, 792,
	717, 764, 765, 766, 788, 789, 746, 747, 748, 749,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 793, 760, 605, 474, 475,
	585, 0, 710, 0, 0, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 713, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 751, 525, 476, 395, 348, 543, 542,
	0, 0, 818, 826, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 705, 0, 0, 741, 795, 794,
	728, 738, 0, 0, 277, 200, 471, 590, 473, 472,
	729, 0, 730, 734, 737, 733, 731, 732, 0, 810,
	0, 0, 0, 0, 0, 0, 697, 709, 0, 714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 706, 707, 0, 0, 0, 0, 761,
	0, 708, 0, 0, 756, 735, 739, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 736, 759, 763,
	298, 832, 757, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 833, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 754,
	0, 587, 0, 427, 0, 0, 816, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 758, 0, 385,
	366, 829, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 814, 362, 553, 586, 478, 0,
	828, 809, 811, 812, 815, 819, 820, 821, 822, 823,
	825, 827, 831, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 830, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 762, 528, 529, 352, 353, 354,
	355, 817, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	839, 813, 838, 840, 841, 837, 842, 843, 824, 718,
	0, 769, 835, 834, 836, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 802, 776, 777, 778,
	715, 779, 773, 774, 716, 775, 803, 767, 799, 800,
	743, 770, 780, 798, 781, 801, 804, 805, 844, 845,
	787, 771, 225, 846, 784, 806, 797, 796, 782, 768,
	807, 808, 750, 745, 785, 786, 772, 790, 791, 792,
	717, 764, 765, 766, 788, 789, 746, 747, 748, 749,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 793, 760, 605, 474, 475,
	585, 0, 710, 0, 0, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 713, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 751, 525, 476, 395, 348, 543, 542,
	0, 0, 818, 826, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 705, 0, 0, 741, 795, 794,
	728, 738, 0, 0, 277, 200, 471, 590, 473, 472,
	2529, 0, 2530, 734, 737, 733, 731, 732, 0, 810,
	0, 0, 0, 0, 0, 0, 697, 709, 0, 714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 706, 707, 0, 0, 0, 0, 761,
	0, 708, 0, 0, 756, 735, 739, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 736, 759, 763,
	298, 832, 757, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 833, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 754,
	0, 587, 0, 427, 0, 0, 816, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 758, 0, 385,
	366, 829, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 814, 362, 553, 586, 478, 0,
	828, 809, 811, 812, 815, 819, 820, 821, 822, 823,
	825, 827, 831, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 830, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 762, 528, 529, 352, 353, 354,
	355, 817, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	839, 813, 838, 840, 841, 837, 842, 843, 824, 718,
	0, 769, 835, 834, 836, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 802, 776, 777, 778,
	715, 779, 773, 774, 716, 775, 803, 767, 799, 800,
	743, 770, 780, 798, 781, 801, 804, 805, 844, 845,
	787, 771, 225, 846, 784, 806, 797, 796, 782, 768,
	807, 808, 750, 745, 785, 786, 772, 790, 791, 792,
	717, 764, 765, 766, 788, 789, 746, 747, 748, 749,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 793, 760, 605, 474, 475,
	585, 0, 710, 0, 0, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 1598, 0, 0, 0, 713, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 751, 525, 476, 395, 348, 543, 542,
	0, 0, 818, 826, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 705, 0, 0, 741, 795, 794,
	728, 738, 0, 0, 277, 200, 471, 590, 473, 472,
	729, 0, 730, 734, 737, 733, 731, 732, 0, 810,
	0, 0, 0, 0, 0, 0, 0, 709, 0, 714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 706, 707, 0, 0, 0, 0, 761,
	0, 708, 0, 0, 756, 735, 739, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 736, 759, 763,
	298, 832, 757, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 833, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 754,
	0, 587, 0, 427, 0, 0, 816, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 758, 0, 385,
	366, 829, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 1599, 1600, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 814, 362, 553, 586, 478, 0,
	828, 809, 811, 812, 815, 819, 820, 821, 822, 823,
	825, 827, 831, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 830, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 762, 528, 529, 352, 353, 354,
	355, 817, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	839, 813, 838, 840, 841, 837, 842, 843, 824, 718,
	0, 769, 835, 834, 836, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 802, 776, 777, 778,
	715, 779, 773, 774, 716, 775, 803, 767, 799, 800,
	743, 770, 780, 798, 781, 801, 804, 805, 844, 845,
	787, 771, 225, 846, 784, 806, 797, 796, 782, 768,
	807, 808, 750, 745, 785, 786, 772, 790, 791, 792,
	717, 764, 765, 766, 788, 789, 746, 747, 748, 749,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 793, 760, 605, 474, 475,
	585, 0, 710, 0, 0, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 713, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 751, 525, 476, 395, 348, 543, 542,
	0, 0, 818, 826, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 705, 0, 0, 741, 795, 794,
	728, 738, 0, 0, 277, 200, 471, 590, 473, 472,
	729, 0, 730, 734, 737, 733, 731, 732, 0, 810,
	0, 0, 0, 0, 0, 0, 0, 709, 0, 714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 706, 707, 0, 0, 0, 0, 761,
	0, 708, 0, 0, 756, 735, 739, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 736, 759, 763,
	298, 832, 757, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 833, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 754,
	0, 587, 0, 427, 0, 0, 816, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 758, 0, 385,
	366, 829, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 814, 362, 553, 586, 478, 0,
	828, 809, 811, 812, 815, 819, 820, 821, 822, 823,
	825, 827, 831, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 830, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 762, 528, 529, 352, 353, 354,
	355, 817, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	839, 813, 838, 840, 841, 837, 842, 843, 824, 718,
	0, 769, 835, 834, 836, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 802, 776, 777, 778,
	715, 779, 773, 774, 716, 775, 803, 767, 799, 800,
	743, 770, 780, 798, 781, 801, 804, 805, 844, 845,
	787, 771, 225, 846, 784, 806, 797, 796, 782, 768,
	807, 808, 750, 745, 785, 786, 772, 790, 791, 792,
	717, 764, 765, 766, 788, 789, 746, 747, 748, 749,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 793, 760, 605, 474, 475,
	585, 0, 710, 0, 0, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 713, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 751, 525, 476, 395, 348, 543, 542,
	0, 0, 818, 826, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 741, 795, 794,
	728, 738, 0, 0, 277, 200, 471, 590, 473, 472,
	729, 0, 730, 734, 737, 733, 731, 732, 0, 810,
	0, 0, 0, 0, 0, 0, 697, 709, 0, 714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 706, 707, 0, 0, 0, 0, 761,
	0, 708, 0, 0, 756, 735, 739, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 736, 759, 763,
	298, 832, 757, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 833, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 754,
	0, 587, 0, 427, 0, 0, 816, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 758, 0, 385,
	366, 829, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 814, 362, 553, 586, 478, 0,
	828, 809, 811, 812, 815, 819, 820, 821, 822, 823,
	825, 827, 831, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 830, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 762, 528, 529, 352, 353, 354,
	355, 817, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	839, 813, 838, 840, 841, 837, 842, 843, 824, 718,
	0, 769, 835, 834, 836, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 802, 776, 777, 778,
	715, 779, 773, 774, 716, 775, 803, 767, 799, 800,
	743, 770, 780, 798, 781, 801, 804, 805, 844, 845,
	787, 771, 225, 846, 784, 806, 797, 796, 782, 768,
	807, 808, 750, 745, 785, 786, 772, 790, 791, 792,
	717, 764, 765, 766, 788, 789, 746, 747, 748, 749,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 793, 0, 605, 474, 475,
	585, 0, 710, 177, 52, 166, 140, 0, 0, 0,
	0, 0, 0, 364, 0, 489, 522, 511, 594, 477,
	0, 167, 0, 0, 0, 0, 0, 0, 159, 0,
	304, 0, 168, 334, 526, 508, 518, 509, 494, 495,
	496, 503, 314, 497, 498, 499, 469, 500, 470, 501,
	502, 117, 525, 476, 395, 348, 543, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 171, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 277, 200, 471, 590, 473, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	400, 417, 278, 391, 430, 283, 398, 273, 363, 387,
	0, 0, 269, 415, 397, 345, 324, 325, 268, 0,
	382, 302, 316, 299, 361, 0, 414, 442, 298, 433,
	0, 425, 271, 0, 424, 360, 411, 416, 346, 340,
	270, 413, 344, 339, 328, 306, 458, 329, 330, 320,
	372, 338, 373, 321, 350, 349, 351, 0, 0, 0,
	0, 0, 453, 454, 0, 0, 0, 0, 0, 0,
	139, 165, 175, 0, 103, 0, 584, 0, 0, 587,
	0, 427, 0, 0, 192, 0, 0, 0, 399, 0,
	0, 331, 164, 158, 157, 443, 0, 385, 366, 204,
	0, 0, 383, 336, 412, 374, 418, 401, 426, 379,
	375, 262, 402, 301, 347, 274, 276, 296, 303, 305,
	307, 308, 356, 357, 369, 390, 403, 404, 405, 300,
	284, 384, 285, 318, 286, 263, 292, 290, 293, 392,
	294, 265, 370, 409, 0, 313, 380, 343, 266, 342,
	371, 408, 407, 275, 434, 440, 441, 530, 0, 446,
	563, 564, 565, 455, 460, 461, 462, 464, 465, 466,
	467, 531, 548, 515, 485, 448, 539, 482, 486, 487,
	551, 0, 0, 0, 439, 332, 333, 0, 311, 259,
	260, 422, 297, 362, 553, 586, 478, 0, 540, 479,
	488, 289, 512, 524, 523, 358, 438, 195, 535, 538,
	468, 205, 0, 532, 547, 505, 546, 206, 368, 0,
	389, 544, 491, 0, 536, 510, 0, 537, 506, 541,
	0, 480, 0, 396, 420, 432, 449, 452, 481, 566,
	567, 568, 264, 451, 570, 571, 572, 573, 574, 575,
	576, 569, 423, 513, 490, 516, 431, 493, 492, 0,
	0, 527, 447, 528, 529, 352, 353, 354, 355, 315,
	554, 282, 450, 378, 115, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 519, 520, 517, 203, 0, 577,
	578, 0, 0, 444, 445, 310, 317, 463, 319, 281,
	367, 312, 429, 326, 0, 456, 521, 457, 580, 583,
	581, 582, 359, 322, 323, 393, 327, 337, 381, 428,
	365, 386, 279, 419, 394, 341, 507, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 561, 560, 559, 558, 557,
	556, 555, 0, 0, 504, 406, 291, 253, 287, 288,
	295, 377, 272, 410, 388, 0, 261, 484, 335, 141,
	376, 309, 549, 550, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 552, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 256,
	257, 258, 0, 0, 249, 250, 251, 252, 0, 0,
	0, 435, 436, 437, 459, 421, 483, 207, 39, 193,
	196, 198, 197, 0, 50, 533, 545, 579, 5, 588,
	589, 591, 593, 592, 120, 208, 474, 475, 585, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 364,
	0, 489, 522, 511, 594, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 334,
	526, 508, 518, 509, 494, 495, 496, 503, 314, 497,
	498, 499, 469, 500, 470, 501, 502, 117, 525, 476,
	395, 348, 543, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 277, 200,
	471, 590, 473, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 2227, 2230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 400, 417, 278, 391,
	430, 283, 398, 273, 363, 387, 0, 0, 269, 415,
	397, 345, 324, 325, 268, 0, 382, 302, 316, 299,
	361, 0, 414, 442, 298, 433, 0, 425, 271, 0,
	424, 360, 411, 416, 346, 340, 270, 413, 344, 339,
	328, 306, 458, 329, 330, 320, 372, 338, 373, 321,
	350, 349, 351, 0, 0, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 0, 587, 2231, 427, 0, 0,
	0, 2226, 0, 2225, 399, 2223, 2228, 331, 0, 0,
	0, 443, 0, 385, 366, 607, 0, 0, 383, 336,
	412, 374, 418, 401, 426, 379, 375, 262, 402, 301,
	347, 274, 276, 296, 303, 305, 307, 308, 356, 357,
	369, 390, 403, 404, 405, 300, 284, 384, 285, 318,
	286, 263, 292, 290, 293, 392, 294, 265, 370, 409,
	2229, 313, 380, 343, 266, 342, 371, 408, 407, 275,
	434, 440, 441, 530, 0, 446, 608, 609, 610, 455,
	460, 461, 462, 464, 465, 466, 467, 531, 548, 515,
	485, 448, 539, 482, 486, 487, 551, 0, 0, 0,
	439, 332, 333, 0, 311, 259, 260, 604, 297, 362,
	553, 586, 478, 0, 540, 479, 488, 289, 512, 524,
	523, 358, 438, 0, 535, 538, 468, 603, 0, 532,
	547, 606, 546, 600, 368, 0, 389, 544, 491, 0,
	536, 510, 0, 537, 506, 541, 0, 480, 0, 396,
	420, 432, 449, 452, 481, 566, 567, 568, 264, 451,
	570, 571, 572, 573, 574, 575, 576, 569, 423, 513,
	490, 516, 431, 493, 492, 0, 0, 527, 447, 528,
	529, 352, 353, 354, 355, 315, 554, 282, 450, 378,
	0, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	519, 520, 517, 611, 0, 577, 578, 0, 0, 444,
	445, 310, 317, 463, 319, 281, 367, 312, 429, 326,
	0, 456, 521, 457, 580, 583, 581, 582, 359, 322,
	323, 393, 327, 337, 381, 428, 365, 386, 279, 419,
	394, 341, 507, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 561, 560, 559, 558, 557, 556, 555, 0, 0,
	504, 406, 291, 253, 287, 288, 295, 601, 598, 410,
	602, 0, 261, 484, 335, 141, 376, 309, 549, 550,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 552, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 256, 257, 258, 0, 0,
	249, 250, 251, 252, 0, 0, 0, 435, 436, 437,
	459, 421, 483, 599, 0, 0, 0, 0, 0, 0,
	0, 533, 545, 579, 0, 588, 589, 591, 593, 592,
	0, 605, 474, 475, 585, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 0, 525, 476, 395, 348, 543, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1234, 0, 0, 199, 0, 0,
	728, 738, 0, 0, 277, 200, 471, 590, 473, 472,
	729, 0, 730, 734, 737, 733, 731, 732, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 735, 0, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 736, 414, 442,
	298, 433, 0, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 458, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 0,
	0, 587, 0, 427, 0, 0, 0, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 443, 0, 385,
	366, 607, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 297, 362, 553, 586, 478, 0,
	540, 479, 488, 289, 512, 524, 523, 358, 438, 0,
	535, 538, 468, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 423, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 447, 528, 529, 352, 353, 354,
	355, 315, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	552, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 256, 257, 258, 0, 0, 249, 250, 251, 252,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 592, 0, 605, 474, 475,
	585, 177, 52, 166, 140, 0, 0, 0, 0, 0,
	0, 364, 629, 489, 522, 511, 594, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 334, 526, 508, 518, 509, 494, 495, 496, 503,
	314, 497, 498, 499, 469, 500, 470, 501, 502, 0,
	525, 476, 395, 348, 543, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 635, 0, 0, 0, 0,
	634, 0, 0, 199, 0, 0, 0, 0, 0, 0,
	277, 200, 471, 590, 473, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 400, 417,
	278, 391, 430, 283, 398, 273, 363, 387, 0, 0,
	269, 415, 397, 345, 324, 325, 268, 0, 382, 302,
	316, 299, 361, 0, 414, 442, 298, 433, 0, 425,
	271, 0, 424, 360, 411, 416, 346, 340, 270, 413,
	344, 339, 328, 306, 458, 329, 330, 320, 372, 338,
	373, 321, 350, 349, 351, 0, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 633, 0, 584, 0, 0, 587, 0, 427,
	0, 0, 0, 0, 0, 0, 399, 0, 0, 331,
	0, 0, 0, 443, 0, 385, 366, 607, 0, 0,
	383, 336, 412, 374, 418, 401, 426, 379, 375, 262,
	402, 301, 347, 274, 276, 296, 303, 305, 307, 308,
	356, 357, 369, 390, 403, 404, 405, 300, 284, 384,
	285, 318, 286, 263, 292, 290, 293, 392, 294, 265,
	370, 409, 0, 313, 380, 343, 266, 342, 371, 408,
	407, 275, 434, 440, 441, 530, 0, 446, 608, 609,
	610, 455, 460, 461, 462, 464, 465, 466, 467, 531,
	548, 515, 485, 448, 539, 482, 486, 487, 551, 0,
	0, 0, 439, 332, 333, 0, 311, 259, 260, 604,
	297, 362, 553, 586, 478, 0, 540, 479, 488, 289,
	512, 524, 523, 358, 438, 0, 535, 538, 468, 603,
	0, 532, 547, 606, 546, 600, 368, 0, 389, 544,
	491, 0, 536, 510, 0, 537, 506, 541, 0, 480,
	0, 396, 420, 432, 449, 452, 481, 566, 567, 568,
	264, 451, 570, 571, 572, 573, 574, 575, 576, 569,
	423, 513, 490, 516, 431, 493, 492, 0, 0, 527,
	447, 528, 529, 352, 353, 354, 355, 630, 632, 282,
	450, 378, 643, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 519, 520, 517, 611, 0, 577, 578, 0,
	0, 444, 445, 310, 317, 463, 319, 281, 367, 312,
	429, 326, 0, 456, 521, 457, 580, 583, 581, 582,
	359, 322, 323, 393, 327, 337, 381, 428, 365, 386,
	279, 419, 394, 341, 507, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 561, 560, 559, 558, 557, 556, 555,
	0, 0, 504, 406, 291, 253, 287, 288, 295, 601,
	598, 410, 602, 0, 261, 484, 335, 141, 376, 309,
	549, 550, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 552, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 256, 257, 258,
	0, 0, 249, 250, 251, 252, 0, 0, 0, 435,
	436, 437, 459, 421, 483, 599, 0, 0, 0, 0,
	0, 0, 0, 533, 545, 579, 0, 588, 589, 591,
	593, 592, 0, 605, 474, 475, 585, 364, 0, 489,
	522, 511, 594, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 334, 526, 508,
	518, 509, 494, 495, 496, 503, 314, 497, 498, 499,
	469, 500, 470, 501, 502, 0, 525, 476, 395, 348,
	543, 542, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 277, 200, 471, 590,
	473, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 2227, 2230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 400, 417, 278, 391, 430, 283,
	398, 273, 363, 387, 0, 0, 269, 415, 397, 345,
	324, 325, 268, 0, 382, 302, 316, 299, 361, 0,
	414, 442, 298, 433, 0, 425, 271, 0, 424, 360,
	411, 416, 346, 340, 270, 413, 344, 339, 328, 306,
	458, 329, 330, 320, 372, 338, 373, 321, 350, 349,
	351, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 0, 0, 587, 2231, 427, 0, 0, 0, 2226,
	0, 2225, 399, 2223, 2228, 331, 0, 0, 0, 443,
	0, 385, 366, 607, 0, 0, 383, 336, 412, 374,
	418, 401, 426, 379, 375, 262, 402, 301, 347, 274,
	276, 296, 303, 305, 307, 308, 356, 357, 369, 390,
	403, 404, 405, 300, 284, 384, 285, 318, 286, 263,
	292, 290, 293, 392, 294, 265, 370, 409, 2229, 313,
	380, 343, 266, 342, 371, 408, 407, 275, 434, 440,
	441, 530, 0, 446, 608, 609, 610, 455, 460, 461,
	462, 464, 465, 466, 467, 531, 548, 515, 485, 448,
	539, 482, 486, 487, 551, 0, 0, 0, 439, 332,
	333, 0, 311, 259, 260, 604, 297, 362, 553, 586,
	478, 0, 540, 479, 488, 289, 512, 524, 523, 358,
	438, 0, 535, 538, 468, 603, 0, 532, 547, 606,
	546, 600, 368, 0, 389, 544, 491, 0, 536, 510,
	0, 537, 506, 541, 0, 480, 0, 396, 420, 432,
	449, 452, 481, 566, 567, 568, 264, 451, 570, 571,
	572, 573, 574, 575, 576, 569, 423, 513, 490, 516,
	431, 493, 492, 0, 0, 527, 447, 528, 529, 352,
	353, 354, 355, 315, 554, 282, 450, 378, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 520,
	517, 611, 0, 577, 578, 0, 0, 444, 445, 310,
	317, 463, 319, 281, 367, 312, 429, 326, 0, 456,
	521, 457, 580, 583, 581, 582, 359, 322, 323, 393,
	327, 337, 381, 428, 365, 386, 279, 419, 394, 341,
	507, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 561,
	560, 559, 558, 557, 556, 555, 0, 0, 504, 406,
	291, 253, 287, 288, 295, 601, 598, 410, 602, 0,
	261, 484, 335, 0, 376, 309, 549, 550, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 552, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 256, 257, 258, 0, 0, 249, 250,
	251, 252, 0, 0, 0, 435, 436, 437, 459, 421,
	483, 599, 0, 0, 0, 0, 0, 0, 0, 533,
	545, 579, 0, 588, 589, 591, 593, 592, 0, 605,
	474, 475, 585, 364, 0, 489, 522, 511, 594, 477,
	0, 1052, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 334, 526, 508, 518, 509, 494, 495,
	496, 503, 314, 497, 498, 499, 469, 500, 470, 501,
	502, 0, 525, 476, 395, 348, 543, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 277, 200, 471, 590, 473, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1038, 0, 0, 0, 0, 0, 0, 267,
	400, 417, 278, 391, 430, 283, 398, 273, 363, 387,
	0, 0, 2376, 2379, 2380, 2381, 2382, 2383, 2384, 0,
	2389, 2385, 2386, 2387, 2388, 0, 2371, 2372, 2373, 2374,
	1036, 2355, 2377, 0, 2356, 360, 2357, 2358, 2359, 2360,
	2361, 2362, 2363, 2364, 2365, 2368, 2369, 2366, 2367, 2375,
	372, 338, 373, 321, 350, 349, 351, 1063, 1065, 1067,
	1069, 1072, 453, 454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 587,
	0, 427, 0, 0, 0, 0, 0, 0, 399, 0,
	0, 331, 0, 0, 0, 2370, 0, 385, 366, 607,
	0, 0, 383, 336, 412, 374, 418, 401, 426, 379,
	375, 262, 402, 301, 347, 274, 276, 296, 303, 305,
	307, 308, 356, 357, 369, 390, 403, 404, 405, 300,
	284, 384, 285, 318, 286, 263, 292, 290, 293, 392,
	294, 265, 370, 409, 0, 313, 380, 343, 266, 342,
	371, 408, 407, 275, 434, 440, 441, 530, 0, 446,
	608, 609, 610, 455, 460, 461, 462, 464, 465, 466,
	467, 531, 548, 515, 485, 448, 539, 482, 486, 487,
	551, 0, 0, 0, 439, 332, 333, 0, 311, 259,
	260, 604, 297, 362, 553, 586, 478, 0, 540, 479,
	488, 289, 512, 524, 523, 358, 438, 0, 535, 538,
	468, 603, 0, 532, 547, 606, 546, 600, 368, 0,
	389, 544, 491, 0, 536, 510, 0, 537, 506, 541,
	0, 480, 0, 396, 420, 432, 449, 452, 481, 566,
	567, 568, 264, 451, 570, 571, 572, 573, 574, 575,
	576, 569, 423, 513, 490, 516, 431, 493, 492, 0,
	0, 527, 447, 528, 529, 352, 353, 354, 355, 315,
	554, 282, 450, 378, 0, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 519, 520, 517, 611, 0, 577,
	578, 0, 0, 444, 445, 310, 317, 463, 319, 281,
	367, 312, 429, 326, 0, 456, 521, 457, 580, 583,
	581, 582, 359, 322, 323, 393, 327, 337, 381, 428,
	365, 386, 279, 419, 394, 341, 507, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 561, 560, 559, 558, 557,
	556, 555, 0, 0, 504, 406, 291, 253, 287, 288,
	295, 601, 598, 410, 602, 0, 261, 2378, 335, 0,
	376, 309, 549, 550, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 552, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 256,
	257, 258, 0, 0, 249, 250, 251, 252, 0, 0,
	0, 435, 436, 437, 459, 421, 483, 599, 0, 0,
	0, 0, 0, 0, 0, 533, 545, 579, 0, 588,
	589, 591, 593, 592, 0, 605, 474, 475, 585, 364,
	0, 489, 522, 511, 594, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 334,
	526, 508, 518, 509, 494, 495, 496, 503, 314, 497,
	498, 499, 469, 500, 470, 501, 502, 0, 525, 476,
	395, 348, 543, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 277, 200,
	471, 590, 473, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 2248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 400, 417, 278, 391,
	430, 283, 398, 273, 363, 387, 0, 0, 269, 415,
	397, 345, 324, 325, 268, 0, 382, 302, 316, 299,
	361, 0, 414, 442, 298, 433, 0, 425, 271, 0,
	424, 360, 411, 416, 346, 340, 270, 413, 344, 339,
	328, 306, 458, 329, 330, 320, 372, 338, 373, 321,
	350, 349, 351, 0, 0, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 0, 587, 2247, 427, 0, 0,
	0, 2253, 2250, 2252, 399, 0, 2251, 331, 0, 0,
	0, 443, 0, 385, 366, 607, 0, 2245, 383, 336,
	412, 374, 418, 401, 426, 379, 375, 262, 402, 301,
	347, 274, 276, 296, 303, 305, 307, 308, 356, 357,
	369, 390, 403, 404, 405, 300, 284, 384, 285, 318,
	286, 263, 292, 290, 293, 392, 294, 265, 370, 409,
	0, 313, 380, 343, 266, 342, 371, 408, 407, 275,
	434, 440, 441, 530, 0, 446, 608, 609, 610, 455,
	460, 461, 462, 464, 465, 466, 467, 531, 548, 515,
	485, 448, 539, 482, 486, 487, 551, 0, 0, 0,
	439, 332, 333, 0, 311, 259, 260, 604, 297, 362,
	553, 586, 478, 0, 540, 479, 488, 289, 512, 524,
	523, 358, 438, 0, 535, 538, 468, 603, 0, 532,
	547, 606, 546, 600, 368, 0, 389, 544, 491, 0,
	536, 510, 0, 537, 506, 541, 0, 480, 0, 396,
	420, 432, 449, 452, 481, 566, 567, 568, 264, 451,
	570, 571, 572, 573, 574, 575, 576, 569, 423, 513,
	490, 516, 431, 493, 492, 0, 0, 527, 447, 528,
	529, 352, 353, 354, 355, 315, 554, 282, 450, 378,
	0, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	519, 520, 517, 611, 0, 577, 578, 0, 0, 444,
	445, 310, 317, 463, 319, 281, 367, 312, 429, 326,
	0, 456, 521, 457, 580, 583, 581, 582, 359, 322,
	323, 393, 327, 337, 381, 428, 365, 386, 279, 419,
	394, 341, 507, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 561, 560, 559, 558, 557, 556, 555, 0, 0,
	504, 406, 291, 253, 287, 288, 295, 601, 598, 410,
	602, 0, 261, 484, 335, 0, 376, 309, 549, 550,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 552, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 256, 257, 258, 0, 0,
	249, 250, 251, 252, 0, 0, 0, 435, 436, 437,
	459, 421, 483, 599, 0, 0, 0, 0, 0, 0,
	0, 533, 545, 579, 0, 588, 589, 591, 593, 592,
	0, 605, 474, 475, 585, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 0, 525, 476, 395, 348, 543, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 277, 200, 471, 590, 473, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 2248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 0, 414, 442,
	298, 433, 0, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 458, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 0,
	0, 587, 2247, 427, 0, 0, 0, 2253, 2250, 2252,
	399, 0, 2251, 331, 0, 0, 0, 443, 0, 385,
	366, 607, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 297, 362, 553, 586, 478, 0,
	540, 479, 488, 289, 512, 524, 523, 358, 438, 0,
	535, 538, 468, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 423, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 447, 528, 529, 352, 353, 354,
	355, 315, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	552, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 256, 257, 258, 0, 0, 249, 250, 251, 252,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 592, 0, 605, 474, 475,
	585, 364, 0, 489, 522, 511, 594, 477, 0, 0,
	0, 0, 0, 1967, 0, 0, 0, 0, 304, 0,
	0, 334, 526, 508, 518, 509, 494, 495, 496, 503,
	314, 497, 498, 499, 469, 500, 470, 501, 502, 0,
	525, 476, 395, 348, 543, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 1968, 0, 0, 0,
	277, 200, 471, 590, 473, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 1164, 1165,
	1166, 1163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 400, 417,
	278, 391, 430, 283, 398, 273, 363, 387, 0, 0,
	269, 415, 397, 345, 324, 325, 268, 0, 382, 302,
	316, 299, 361, 0, 414, 442, 298, 433, 0, 425,
	271, 0, 424, 360, 411, 416, 346, 340, 270, 413,
	344, 339, 328, 306, 458, 329, 330, 320, 372, 338,
	373, 321, 350, 349, 351, 0, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 0, 0, 587, 0, 427,
	0, 0, 0, 0, 0, 0, 399, 0, 0, 331,
	0, 0, 0, 443, 0, 385, 366, 607, 0, 0,
	383, 336, 412, 374, 418, 401, 426, 379, 375, 262,
	402, 301, 347, 274, 276, 296, 303, 305, 307, 308,
	356, 357, 369, 390, 403, 404, 405, 300, 284, 384,
	285, 318, 286, 263, 292, 290, 293, 392, 294, 265,
	370, 409, 0, 313, 380, 343, 266, 342, 371, 408,
	407, 275, 434, 440, 441, 530, 0, 446, 608, 609,
	610, 455, 460, 461, 462, 464, 465, 466, 467, 531,
	548, 515, 485, 448, 539, 482, 486, 487, 551, 0,
	0, 0, 439, 332, 333, 0, 311, 259, 260, 604,
	297, 362, 553, 586, 478, 0, 540, 479, 488, 289,
	512, 524, 523, 358, 438, 0, 535, 538, 468, 603,
	0, 532, 547, 606, 546, 600, 368, 0, 389, 544,
	491, 0, 536, 510, 0, 537, 506, 541, 0, 480,
	0, 396, 420, 432, 449, 452, 481, 566, 567, 568,
	264, 451, 570, 571, 572, 573, 574, 575, 576, 569,
	423, 513, 490, 516, 431, 493, 492, 0, 0, 527,
	447, 528, 529, 352, 353, 354, 355, 315, 554, 282,
	450, 378, 0, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 519, 520, 517, 611, 0, 577, 578, 0,
	0, 444, 445, 310, 317, 463, 319, 281, 367, 312,
	429, 326, 0, 456, 521, 457, 580, 583, 581, 582,
	359, 322, 323, 393, 327, 337, 381, 428, 365, 386,
	279, 419, 394, 341, 507, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 561, 560, 559, 558, 557, 556, 555,
	0, 0, 504, 406, 291, 253, 287, 288, 295, 601,
	598, 410, 602, 0, 261, 484, 335, 0, 376, 309,
	549, 550, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 552, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 256, 257, 258,
	0, 0, 249, 250, 251, 252, 0, 0, 0, 435,
	436, 437, 459, 421, 483, 599, 0, 0, 0, 0,
	0, 0, 0, 533, 545, 579, 0, 588, 589, 591,
	593, 592, 177, 605, 474, 475, 585, 0, 0, 0,
	0, 0, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	117, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 2014, 0, 199, 0, 0, 0, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 587, 0,
	427, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 141, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 177, 605, 474, 475, 585, 0, 0,
	0, 0, 0, 364, 0, 489, 522, 511, 594, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 334, 526, 508, 518, 509, 494, 495,
	496, 503, 314, 497, 498, 499, 469, 500, 470, 501,
	502, 117, 525, 476, 395, 348, 543, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 2002, 0, 199, 0, 0, 0, 0,
	0, 0, 277, 200, 471, 590, 473, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	400, 417, 278, 391, 430, 283, 398, 273, 363, 387,
	0, 0, 269, 415, 397, 345, 324, 325, 268, 0,
	382, 302, 316, 299, 361, 0, 414, 442, 298, 433,
	0, 425, 271, 0, 424, 360, 411, 416, 346, 340,
	270, 413, 344, 339, 328, 306, 458, 329, 330, 320,
	372, 338, 373, 321, 350, 349, 351, 0, 0, 0,
	0, 0, 453, 454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 587,
	0, 427, 0, 0, 0, 0, 0, 0, 399, 0,
	0, 331, 0, 0, 0, 443, 0, 385, 366, 607,
	0, 0, 383, 336, 412, 374, 418, 401, 426, 379,
	375, 262, 402, 301, 347, 274, 276, 296, 303, 305,
	307, 308, 356, 357, 369, 390, 403, 404, 405, 300,
	284, 384, 285, 318, 286, 263, 292, 290, 293, 392,
	294, 265, 370, 409, 0, 313, 380, 343, 266, 342,
	371, 408, 407, 275, 434, 440, 441, 530, 0, 446,
	608, 609, 610, 455, 460, 461, 462, 464, 465, 466,
	467, 531, 548, 515, 485, 448, 539, 482, 486, 487,
	551, 0, 0, 0, 439, 332, 333, 0, 311, 259,
	260, 604, 297, 362, 553, 586, 478, 0, 540, 479,
	488, 289, 512, 524, 523, 358, 438, 0, 535, 538,
	468, 603, 0, 532, 547, 606, 546, 600, 368, 0,
	389, 544, 491, 0, 536, 510, 0, 537, 506, 541,
	0, 480, 0, 396, 420, 432, 449, 452, 481, 566,
	567, 568, 264, 451, 570, 571, 572, 573, 574, 575,
	576, 569, 423, 513, 490, 516, 431, 493, 492, 0,
	0, 527, 447, 528, 529, 352, 353, 354, 355, 315,
	554, 282, 450, 378, 0, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 519, 520, 517, 611, 0, 577,
	578, 0, 0, 444, 445, 310, 317, 463, 319, 281,
	367, 312, 429, 326, 0, 456, 521, 457, 580, 583,
	581, 582, 359, 322, 323, 393, 327, 337, 381, 428,
	365, 386, 279, 419, 394, 341, 507, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 561, 560, 559, 558, 557,
	556, 555, 0, 0, 504, 406, 291, 253, 287, 288,
	295, 601, 598, 410, 602, 0, 261, 484, 335, 141,
	376, 309, 549, 550, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 552, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 256,
	257, 258, 0, 0, 249, 250, 251, 252, 0, 0,
	0, 435, 436, 437, 459, 421, 483, 599, 0, 0,
	0, 0, 0, 0, 0, 533, 545, 579, 0, 588,
	589, 591, 593, 592, 0, 605, 474, 475, 585, 364,
	0, 489, 522, 511, 594, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 968, 0, 334,
	526, 508, 518, 509, 494, 495, 496, 503, 314, 497,
	498, 499, 469, 500, 470, 501, 502, 0, 525, 476,
	395, 348, 543, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 975, 976, 0, 0, 0, 0, 277, 200,
	471, 590, 473, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 979, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 400, 963, 278, 391,
	430, 283, 398, 273, 363, 387, 0, 0, 269, 415,
	397, 345, 324, 325, 268, 0, 382, 302, 316, 299,
	361, 0, 414, 442, 298, 433, 953, 425, 271, 952,
	424, 360, 411, 416, 346, 340, 270, 413, 344, 339,
	328, 306, 458, 329, 330, 320, 372, 338, 373, 321,
	350, 349, 351, 0, 0, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 0, 587, 0, 427, 0, 0,
	0, 0, 0, 0, 399, 0, 0, 331, 0, 0,
	0, 443, 0, 385, 366, 607, 0, 0, 383, 336,
	412, 374, 418, 401, 426, 966, 375, 262, 402, 301,
	347, 274, 276, 296, 303, 305, 307, 308, 356, 357,
	369, 390, 403, 404, 405, 300, 284, 384, 285, 318,
	286, 263, 292, 290, 293, 392, 294, 265, 370, 409,
	0, 313, 380, 343, 266, 342, 371, 408, 407, 275,
	434, 440, 441, 530, 0, 446, 608, 609, 610, 455,
	460, 461, 462, 464, 465, 466, 467, 531, 548, 515,
	485, 448, 539, 482, 486, 487, 551, 0, 0, 0,
	439, 332, 333, 0, 311, 259, 260, 604, 297, 362,
	553, 586, 478, 0, 540, 479, 488, 289, 512, 524,
	523, 358, 438, 0, 535, 538, 468, 603, 0, 532,
	547, 606, 546, 600, 368, 0, 389, 544, 491, 0,
	536, 510, 0, 537, 506, 541, 0, 480, 0, 396,
	420, 432, 449, 452, 481, 566, 567, 568, 264, 451,
	570, 571, 572, 573, 574, 575, 967, 569, 423, 513,
	490, 516, 431, 493, 492, 0, 0, 527, 970, 528,
	529, 352, 353, 354, 355, 315, 554, 282, 450, 378,
	0, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	519, 520, 517, 611, 0, 577, 578, 0, 0, 444,
	445, 310, 317, 463, 319, 281, 367, 312, 429, 326,
	0, 456, 521, 457, 580, 583, 581, 582, 977, 964,
	973, 965, 327, 337, 381, 428, 365, 386, 279, 419,
	394, 974, 507, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 561, 560, 559, 558, 557, 556, 555, 0, 0,
	504, 406, 291, 253, 287, 288, 295, 601, 598, 410,
	602, 0, 261, 484, 335, 0, 376, 309, 549, 550,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 552, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 256, 257, 258, 0, 0,
	249, 250, 251, 252, 0, 0, 0, 435, 436, 437,
	459, 421, 483, 599, 0, 0, 0, 0, 0, 0,
	0, 533, 545, 579, 0, 588, 589, 591, 593, 592,
	177, 605, 474, 475, 585, 0, 0, 0, 0, 0,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 117, 525,
	476, 395, 348, 543, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1900,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 277,
	200, 471, 590, 473, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 0, 414, 442, 298, 433, 0, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 458, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 587, 0, 427, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 443, 0, 385, 366, 607, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 297,
	362, 553, 586, 478, 0, 540, 479, 488, 289, 512,
	524, 523, 358, 438, 0, 535, 538, 468, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 423,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 447,
	528, 529, 352, 353, 354, 355, 315, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 141, 376, 309, 549,
	550, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 552, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 256, 257, 258, 0,
	0, 249, 250, 251, 252, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	592, 0, 605, 474, 475, 585, 364, 0, 489, 522,
	511, 594, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 0, 334, 526, 508, 518,
	509, 494, 495, 496, 503, 314, 497, 498, 499, 469,
	500, 470, 501, 502, 0, 525, 476, 395, 348, 543,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 975,
	976, 0, 0, 0, 0, 277, 200, 471, 590, 473,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	979, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 400, 417, 278, 391, 430, 283, 398,
	273, 363, 387, 0, 0, 269, 415, 397, 345, 324,
	325, 268, 0, 382, 302, 316, 299, 361, 0, 414,
	442, 298, 433, 953, 425, 271, 952, 424, 360, 411,
	416, 346, 340, 270, 413, 344, 339, 328, 306, 458,
	329, 330, 320, 372, 338, 373, 321, 350, 349, 351,
	0, 0, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 587, 0, 427, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 331, 0, 0, 0, 443, 0,
	385, 366, 607, 0, 0, 383, 336, 412, 374, 418,
	401, 426, 379, 375, 262, 402, 301, 347, 274, 276,
	296, 303, 305, 307, 308, 356, 357, 369, 390, 403,
	404, 405, 300, 284, 384, 285, 318, 286, 263, 292,
	290, 293, 392, 294, 265, 370, 409, 0, 313, 380,
	343, 266, 342, 371, 408, 407, 275, 434, 440, 441,
	530, 0, 446, 608, 609, 610, 455, 460, 461, 462,
	464, 465, 466, 467, 531, 548, 515, 485, 448, 539,
	482, 486, 487, 551, 0, 0, 0, 439, 332, 333,
	0, 311, 259, 260, 604, 297, 362, 553, 586, 478,
	0, 540, 479, 488, 289, 512, 524, 523, 358, 438,
	0, 535, 538, 468, 603, 0, 532, 547, 606, 546,
	600, 368, 0, 389, 544, 491, 0, 536, 510, 0,
	537, 506, 541, 0, 480, 0, 396, 420, 432, 449,
	452, 481, 566, 567, 568, 264, 451, 570, 571, 572,
	573, 574, 575, 576, 569, 423, 513, 490, 516, 431,
	493, 492, 0, 0, 527, 447, 528, 529, 352, 353,
	354, 355, 315, 554, 282, 450, 378, 0, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 520, 517,
	611, 0, 577, 578, 0, 0, 444, 445, 310, 317,
	463, 319, 281, 367, 312, 429, 326, 0, 456, 521,
	457, 580, 583, 581, 582, 977, 1919, 973, 1920, 327,
	337, 381, 428, 365, 386, 279, 419, 394, 974, 507,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 561, 560,
	559, 558, 557, 556, 555, 0, 0, 504, 406, 291,
	253, 287, 288, 295, 601, 598, 410, 602, 0, 261,
	484, 335, 0, 376, 309, 549, 550, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 552, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 256, 257, 258, 0, 0, 249, 250, 251,
	252, 0, 0, 0, 435, 436, 437, 459, 421, 483,
	599, 0, 0, 0, 0, 0, 0, 0, 533, 545,
	579, 0, 588, 589, 591, 593, 592, 0, 605, 474,
	475, 585, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 2731, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	0, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 2734, 0, 0, 2733, 584, 0, 0, 587, 0,
	427, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 0, 605, 474, 475, 585, 364, 0,
	489, 522, 511, 594, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 304, 1430, 0, 334, 526,
	508, 518, 509, 494, 495, 496, 503, 314, 497, 498,
	499, 469, 500, 470, 501, 502, 0, 525, 476, 395,
	348, 543, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 1428, 0, 0, 0, 277, 200, 471,
	590, 473, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1426, 0, 0,
	0, 0, 0, 0, 267, 400, 417, 278, 391, 430,
	283, 398, 273, 363, 387, 0, 0, 269, 415, 397,
	345, 324, 325, 268, 0, 382, 302, 316, 299, 361,
	0, 414, 442, 298, 433, 0, 425, 271, 0, 424,
	360, 411, 416, 346, 340, 270, 413, 344, 339, 328,
	306, 458, 329, 330, 320, 372, 338, 373, 321, 350,
	349, 351, 0, 0, 0, 0, 0, 453, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 587, 0, 427, 0, 0, 0,
	0, 0, 0, 399, 0, 0, 331, 0, 0, 0,
	443, 0, 385, 366, 607, 0, 0, 383, 336, 412,
	374, 418, 401, 426, 379, 375, 262, 402, 301, 347,
	274, 276, 296, 303, 305, 307, 308, 356, 357, 369,
	390, 403, 404, 405, 300, 284, 384, 285, 318, 286,
	263, 292, 290, 293, 392, 294, 265, 370, 409, 0,
	313, 380, 343, 266, 342, 371, 408, 407, 275, 434,
	440, 441, 530, 0, 446, 608, 609, 610, 455, 460,
	461, 462, 464, 465, 466, 467, 531, 548, 515, 485,
	448, 539, 482, 486, 487, 551, 0, 0, 0, 439,
	332, 333, 0, 311, 259, 260, 604, 297, 362, 553,
	586, 478, 0, 540, 479, 488, 289, 512, 524, 523,
	358, 438, 0, 535, 538, 468, 603, 0, 532, 547,
	606, 546, 600, 368, 0, 389, 544, 491, 0, 536,
	510, 0, 537, 506, 541, 0, 480, 0, 396, 420,
	432, 449, 452, 481, 566, 567, 568, 264, 451, 570,
	571, 572, 573, 574, 575, 576, 569, 423, 513, 490,
	516, 431, 493, 492, 0, 0, 527, 447, 528, 529,
	352, 353, 354, 355, 315, 554, 282, 450, 378, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	520, 517, 611, 0, 577, 578, 0, 0, 444, 445,
	310, 317, 463, 319, 281, 367, 312, 429, 326, 0,
	456, 521, 457, 580, 583, 581, 582, 359, 322, 323,
	393, 327, 337, 381, 428, 365, 386, 279, 419, 394,
	341, 507, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	561, 560, 559, 558, 557, 556, 555, 0, 0, 504,
	406, 291, 253, 287, 288, 295, 601, 598, 410, 602,
	0, 261, 484, 335, 0, 376, 309, 549, 550, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 552, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 256, 257, 258, 0, 0, 249,
	250, 251, 252, 0, 0, 0, 435, 436, 437, 459,
	421, 483, 599, 0, 0, 0, 0, 0, 0, 0,
	533, 545, 579, 0, 588, 589, 591, 593, 592, 0,
	605, 474, 475, 585, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 1424, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 0, 525, 476, 395, 348, 543, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 1428,
	0, 0, 0, 277, 200, 471, 590, 473, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1426, 0, 0, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 0, 414, 442, 298,
	433, 0, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 458, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 0, 0,
	587, 0, 427, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 443, 0, 385, 366,
	607, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 0, 0, 0, 439, 332, 333, 0, 311,
	259, 260, 604, 297, 362, 553, 586, 478, 0, 540,
	479, 488, 289, 512, 524, 523, 358, 438, 0, 535,
	538, 468, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 0, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 423, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 447, 528, 529, 352, 353, 354, 355,
	315, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	0, 376, 309, 549, 550, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 552,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	256, 257, 258, 0, 0, 249, 250, 251, 252, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 592, 0, 605, 474, 475, 585,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 0, 525,
	476, 395, 348, 543, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3679, 0, 199, 795, 0, 0, 0, 0, 0, 277,
	200, 471, 590, 473, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 0, 414, 442, 298, 433, 0, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 458, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 587, 0, 427, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 443, 0, 385, 366, 607, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 297,
	362, 553, 586, 478, 0, 540, 479, 488, 289, 512,
	524, 523, 358, 438, 0, 535, 538, 468, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 423,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 447,
	528, 529, 352, 353, 354, 355, 315, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 552, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 256, 257, 258, 0,
	0, 249, 250, 251, 252, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	592, 0, 605, 474, 475, 585, 364, 0, 489, 522,
	511, 594, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 0, 334, 526, 508, 518,
	509, 494, 495, 496, 503, 314, 497, 498, 499, 469,
	500, 470, 501, 502, 0, 525, 476, 395, 348, 543,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 1428, 0, 0, 0, 277, 200, 471, 590, 473,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1426, 0, 0, 0, 0,
	0, 0, 267, 400, 417, 278, 391, 430, 283, 398,
	273, 363, 387, 0, 0, 269, 415, 397, 345, 324,
	325, 268, 0, 382, 302, 316, 299, 361, 0, 414,
	442, 298, 433, 0, 425, 271, 0, 424, 360, 411,
	416, 346, 340, 270, 413, 344, 339, 328, 306, 458,
	329, 330, 320, 372, 338, 373, 321, 350, 349, 351,
	0, 0, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 587, 0, 427, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 331, 0, 0, 0, 443, 0,
	385, 366, 607, 0, 0, 383, 336, 412, 374, 418,
	401, 426, 379, 375, 262, 402, 301, 347, 274, 276,
	296, 303, 305, 307, 308, 356, 357, 369, 390, 403,
	404, 405, 300, 284, 384, 285, 318, 286, 263, 292,
	290, 293, 392, 294, 265, 370, 409, 0, 313, 380,
	343, 266, 342, 371, 408, 407, 275, 434, 440, 441,
	530, 0, 446, 608, 609, 610, 455, 460, 461, 462,
	464, 465, 466, 467, 531, 548, 515, 485, 448, 539,
	482, 486, 487, 551, 0, 0, 0, 439, 332, 333,
	0, 311, 259, 260, 604, 297, 362, 553, 586, 478,
	0, 540, 479, 488, 289, 512, 524, 523, 358, 438,
	0, 535, 538, 468, 603, 0, 532, 547, 606, 546,
	600, 368, 0, 389, 544, 491, 0, 536, 510, 0,
	537, 506, 541, 0, 480, 0, 396, 420, 432, 449,
	452, 481, 566, 567, 568, 264, 451, 570, 571, 572,
	573, 574, 575, 576, 569, 423, 513, 490, 516, 431,
	493, 492, 0, 0, 527, 447, 528, 529, 352, 353,
	354, 355, 315, 554, 282, 450, 378, 0, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 520, 517,
	611, 0, 577, 578, 0, 0, 444, 445, 310, 317,
	463, 319, 281, 367, 312, 429, 326, 0, 456, 521,
	457, 580, 583, 581, 582, 359, 322, 323, 393, 327,
	337, 381, 428, 365, 386, 279, 419, 394, 341, 507,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 561, 560,
	559, 558, 557, 556, 555, 0, 0, 504, 406, 291,
	253, 287, 288, 295, 601, 598, 410, 602, 0, 261,
	484, 335, 0, 376, 309, 549, 550, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 552, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 256, 257, 258, 0, 0, 249, 250, 251,
	252, 0, 0, 0, 435, 436, 437, 459, 421, 483,
	599, 0, 0, 0, 0, 0, 0, 0, 533, 545,
	579, 0, 588, 589, 591, 593, 592, 0, 605, 474,
	475, 585, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	0, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 1428, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1628, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 587, 0,
	427, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 0, 605, 474, 475, 585, 364, 0,
	489, 522, 511, 594, 477, 0, 0, 0, 0, 0,
	2319, 0, 0, 0, 0, 304, 0, 0, 334, 526,
	508, 518, 509, 494, 495, 496, 503, 314, 497, 498,
	499, 469, 500, 470, 501, 502, 0, 525, 476, 395,
	348, 543, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 2321, 0, 0, 0, 277, 200, 471,
	590, 473, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 400, 417, 278, 391, 430,
	283, 398, 273, 363, 387, 0, 0, 269, 415, 397,
	345, 324, 325, 268, 0, 382, 302, 316, 299, 361,
	0, 414, 442, 298, 433, 0, 425, 271, 0, 424,
	360, 411, 416, 346, 340, 270, 413, 344, 339, 328,
	306, 458, 329, 330, 320, 372, 338, 373, 321, 350,
	349, 351, 0, 0, 0, 0, 0, 453, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 587, 0, 427, 0, 0, 0,
	0, 0, 0, 399, 0, 0, 331, 0, 0, 0,
	443, 0, 385, 366, 607, 0, 0, 383, 336, 412,
	374, 418, 401, 426, 379, 375, 262, 402, 301, 347,
	274, 276, 296, 303, 305, 307, 308, 356, 357, 369,
	390, 403, 404, 405, 300, 284, 384, 285, 318, 286,
	263, 292, 290, 293, 392, 294, 265, 370, 409, 0,
	313, 380, 343, 266, 342, 371, 408, 407, 275, 434,
	440, 441, 530, 0, 446, 608, 609, 610, 455, 460,
	461, 462, 464, 465, 466, 467, 531, 548, 515, 485,
	448, 539, 482, 486, 487, 551, 0, 0, 0, 439,
	332, 333, 0, 311, 259, 260, 604, 297, 362, 553,
	586, 478, 0, 540, 479, 488, 289, 512, 524, 523,
	358, 438, 0, 535, 538, 468, 603, 0, 532, 547,
	606, 546, 600, 368, 0, 389, 544, 491, 0, 536,
	510, 0, 537, 506, 541, 0, 480, 0, 396, 420,
	432, 449, 452, 481, 566, 567, 568, 264, 451, 570,
	571, 572, 573, 574, 575, 576, 569, 423, 513, 490,
	516, 431, 493, 492, 0, 0, 527, 447, 528, 529,
	352, 353, 354, 355, 315, 554, 282, 450, 378, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	520, 517, 611, 0, 577, 578, 0, 0, 444, 445,
	310, 317, 463, 319, 281, 367, 312, 429, 326, 0,
	456, 521, 457, 580, 583, 581, 582, 359, 322, 323,
	393, 327, 337, 381, 428, 365, 386, 279, 419, 394,
	341, 507, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	561, 560, 559, 558, 557, 556, 555, 0, 0, 504,
	406, 291, 253, 287, 288, 295, 601, 598, 410, 602,
	0, 261, 484, 335, 0, 376, 309, 549, 550, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 552, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 256, 257, 258, 0, 0, 249,
	250, 251, 252, 0, 0, 0, 435, 436, 437, 459,
	421, 483, 599, 0, 0, 0, 0, 0, 0, 0,
	533, 545, 579, 0, 588, 589, 591, 593, 592, 0,
	605, 474, 475, 585, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 2340, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 0, 525, 476, 395, 348, 543, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 1428,
	0, 0, 0, 277, 200, 471, 590, 473, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 0, 414, 442, 298,
	433, 0, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 458, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 0, 0,
	587, 0, 427, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 443, 0, 385, 366,
	607, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 0, 0, 0, 439, 332, 333, 0, 311,
	259, 260, 604, 297, 362, 553, 586, 478, 0, 540,
	479, 488, 289, 512, 524, 523, 358, 438, 0, 535,
	538, 468, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 0, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 423, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 447, 528, 529, 352, 353, 354, 355,
	315, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	0, 376, 309, 549, 550, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 552,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	256, 257, 258, 0, 0, 249, 250, 251, 252, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 592, 0, 605, 474, 475, 585,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 617, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 0, 525,
	476, 395, 348, 543, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 277,
	200, 471, 590, 473, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 0, 414, 442, 298, 433, 0, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 458, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 587, 0, 427, 0,
	616, 0, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 443, 0, 385, 366, 607, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 297,
	362, 553, 586, 478, 0, 540, 479, 488, 289, 512,
	524, 523, 358, 438, 0, 535, 538, 468, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 423,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 447,
	528, 529, 352, 353, 354, 355, 315, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 552, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 256, 257, 258, 0,
	0, 249, 250, 251, 252, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	592, 0, 605, 474, 475, 585, 364, 0, 489, 522,
	511, 594, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 0, 334, 526, 508, 518,
	509, 494, 495, 496, 503, 314, 497, 498, 499, 469,
	500, 470, 501, 502, 0, 525, 476, 395, 348, 543,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 795,
	0, 0, 0, 0, 0, 277, 200, 471, 590, 473,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 400, 417, 278, 391, 430, 283, 398,
	273, 363, 387, 0, 0, 269, 415, 397, 345, 324,
	325, 268, 0, 382, 302, 316, 299, 361, 0, 414,
	442, 298, 433, 0, 425, 271, 0, 424, 360, 411,
	416, 346, 340, 270, 413, 344, 339, 328, 306, 458,
	329, 330, 320, 372, 338, 373, 321, 350, 349, 351,
	0, 0, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 587, 0, 427, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 331, 0, 0, 0, 443, 0,
	385, 366, 607, 0, 0, 383, 336, 412, 374, 418,
	401, 426, 379, 375, 262, 402, 301, 347, 274, 276,
	296, 303, 305, 307, 308, 356, 357, 369, 390, 403,
	404, 405, 300, 284, 384, 285, 318, 286, 263, 292,
	290, 293, 392, 294, 265, 370, 409, 0, 313, 380,
	343, 266, 342, 371, 408, 407, 275, 434, 440, 441,
	530, 0, 446, 608, 609, 610, 455, 460, 461, 462,
	464, 465, 466, 467, 531, 548, 515, 485, 448, 539,
	482, 486, 487, 551, 0, 0, 0, 439, 332, 333,
	0, 311, 259, 260, 604, 297, 362, 553, 586, 478,
	0, 540, 479, 488, 289, 512, 524, 523, 358, 438,
	0, 535, 538, 468, 603, 0, 532, 547, 606, 546,
	600, 368, 0, 389, 544, 491, 0, 536, 510, 0,
	537, 506, 541, 0, 480, 0, 396, 420, 432, 449,
	452, 481, 566, 567, 568, 264, 451, 570, 571, 572,
	573, 574, 575, 576, 569, 423, 513, 490, 516, 431,
	493, 492, 0, 0, 527, 447, 528, 529, 352, 353,
	354, 355, 315, 554, 282, 450, 378, 0, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 520, 517,
	611, 0, 577, 578, 0, 0, 444, 445, 310, 317,
	463, 319, 281, 367, 312, 429, 326, 0, 456, 521,
	457, 580, 583, 581, 582, 359, 322, 323, 393, 327,
	337, 381, 428, 365, 386, 279, 419, 394, 341, 507,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 561, 560,
	559, 558, 557, 556, 555, 0, 0, 504, 406, 291,
	253, 287, 288, 295, 601, 598, 410, 602, 0, 261,
	484, 335, 0, 376, 309, 549, 550, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 552, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 256, 257, 258, 0, 0, 249, 250, 251,
	252, 0, 0, 0, 435, 436, 437, 459, 421, 483,
	599, 0, 0, 0, 0, 0, 0, 0, 533, 545,
	579, 0, 588, 589, 591, 593, 592, 0, 605, 474,
	475, 585, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	0, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3658, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 587, 0,
	427, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 0, 605, 474, 475, 585, 364, 0,
	489, 522, 511, 594, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 304, 0, 0, 334, 526,
	508, 518, 509, 494, 495, 496, 503, 314, 497, 498,
	499, 469, 500, 470, 501, 502, 0, 525, 476, 395,
	348, 543, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 3448, 0, 0, 0, 277, 200, 471,
	590, 473, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 400, 417, 278, 391, 430,
	283, 398, 273, 363, 387, 0, 0, 269, 415, 397,
	345, 324, 325, 268, 0, 382, 302, 316, 299, 361,
	0, 414, 442, 298, 433, 0, 425, 271, 0, 424,
	360, 411, 416, 346, 340, 270, 413, 344, 339, 328,
	306, 458, 329, 330, 320, 372, 338, 373, 321, 350,
	349, 351, 0, 0, 0, 0, 0, 453, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 587, 0, 427, 0, 0, 0,
	0, 0, 0, 399, 0, 0, 331, 0, 0, 0,
	443, 0, 385, 366, 607, 0, 0, 383, 336, 412,
	374, 418, 401, 426, 379, 375, 262, 402, 301, 347,
	274, 276, 296, 303, 305, 307, 308, 356, 357, 369,
	390, 403, 404, 405, 300, 284, 384, 285, 318, 286,
	263, 292, 290, 293, 392, 294, 265, 370, 409, 0,
	313, 380, 343, 266, 342, 371, 408, 407, 275, 434,
	440, 441, 530, 0, 446, 608, 609, 610, 455, 460,
	461, 462, 464, 465, 466, 467, 531, 548, 515, 485,
	448, 539, 482, 486, 487, 551, 0, 0, 0, 439,
	332, 333, 0, 311, 259, 260, 604, 297, 362, 553,
	586, 478, 0, 540, 479, 488, 289, 512, 524, 523,
	358, 438, 0, 535, 538, 468, 603, 0, 532, 547,
	606, 546, 600, 368, 0, 389, 544, 491, 0, 536,
	510, 0, 537, 506, 541, 0, 480, 0, 396, 420,
	432, 449, 452, 481, 566, 567, 568, 264, 451, 570,
	571, 572, 573, 574, 575, 576, 569, 423, 513, 490,
	516, 431, 493, 492, 0, 0, 527, 447, 528, 529,
	352, 353, 354, 355, 315, 554, 282, 450, 378, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	520, 517, 611, 0, 577, 578, 0, 0, 444, 445,
	310, 317, 463, 319, 281, 367, 312, 429, 326, 0,
	456, 521, 457, 580, 583, 581, 582, 359, 322, 323,
	393, 327, 337, 381, 428, 365, 386, 279, 419, 394,
	341, 507, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	561, 560, 559, 558, 557, 556, 555, 0, 0, 504,
	406, 291, 253, 287, 288, 295, 601, 598, 410, 602,
	0, 261, 484, 335, 0, 376, 309, 549, 550, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 552, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 256, 257, 258, 0, 0, 249,
	250, 251, 252, 0, 0, 0, 435, 436, 437, 459,
	421, 483, 599, 0, 0, 0, 0, 0, 0, 0,
	533, 545, 579, 0, 588, 589, 591, 593, 592, 0,
	605, 474, 475, 585, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 0, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 0, 525, 476, 395, 348, 543, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 277, 200, 471, 590, 473, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 0, 414, 442, 298,
	433, 0, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 458, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 0, 0,
	587, 0, 427, 0, 0, 0, 3571, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 443, 0, 385, 366,
	607, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 0, 0, 0, 439, 332, 333, 0, 311,
	259, 260, 604, 297, 362, 553, 586, 478, 0, 540,
	479, 488, 289, 512, 524, 523, 358, 438, 0, 535,
	538, 468, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 0, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 423, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 447, 528, 529, 352, 353, 354, 355,
	315, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	0, 376, 309, 549, 550, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 552,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	256, 257, 258, 0, 0, 249, 250, 251, 252, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 592, 0, 605, 474, 475, 585,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 0, 525,
	476, 395, 348, 543, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3304,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 277,
	200, 471, 590, 473, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 0, 414, 442, 298, 433, 0, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 458, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 587, 0, 427, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 443, 0, 385, 366, 607, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 297,
	362, 553, 586, 478, 0, 540, 479, 488, 289, 512,
	524, 523, 358, 438, 0, 535, 538, 468, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 423,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 447,
	528, 529, 352, 353, 354, 355, 315, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 552, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 256, 257, 258, 0,
	0, 249, 250, 251, 252, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	592, 0, 605, 474, 475, 585, 364, 0, 489, 522,
	511, 594, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 0, 334, 526, 508, 518,
	509, 494, 495, 496, 503, 314, 497, 498, 499, 469,
	500, 470, 501, 502, 0, 525, 476, 395, 348, 543,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3463, 0, 199, 0,
	0, 0, 0, 0, 0, 277, 200, 471, 590, 473,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 400, 417, 278, 391, 430, 283, 398,
	273, 363, 387, 0, 0, 269, 415, 397, 345, 324,
	325, 268, 0, 382, 302, 316, 299, 361, 0, 414,
	442, 298, 433, 0, 425, 271, 0, 424, 360, 411,
	416, 346, 340, 270, 413, 344, 339, 328, 306, 458,
	329, 330, 320, 372, 338, 373, 321, 350, 349, 351,
	0, 0, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 587, 0, 427, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 331, 0, 0, 0, 443, 0,
	385, 366, 607, 0, 0, 383, 336, 412, 374, 418,
	401, 426, 379, 375, 262, 402, 301, 347, 274, 276,
	296, 303, 305, 307, 308, 356, 357, 369, 390, 403,
	404, 405, 300, 284, 384, 285, 318, 286, 263, 292,
	290, 293, 392, 294, 265, 370, 409, 0, 313, 380,
	343, 266, 342, 371, 408, 407, 275, 434, 440, 441,
	530, 0, 446, 608, 609, 610, 455, 460, 461, 462,
	464, 465, 466, 467, 531, 548, 515, 485, 448, 539,
	482, 486, 487, 551, 0, 0, 0, 439, 332, 333,
	0, 311, 259, 260, 604, 297, 362, 553, 586, 478,
	0, 540, 479, 488, 289, 512, 524, 523, 358, 438,
	0, 535, 538, 468, 603, 0, 532, 547, 606, 546,
	600, 368, 0, 389, 544, 491, 0, 536, 510, 0,
	537, 506, 541, 0, 480, 0, 396, 420, 432, 449,
	452, 481, 566, 567, 568, 264, 451, 570, 571, 572,
	573, 574, 575, 576, 569, 423, 513, 490, 516, 431,
	493, 492, 0, 0, 527, 447, 528, 529, 352, 353,
	354, 355, 315, 554, 282, 450, 378, 0, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 520, 517,
	611, 0, 577, 578, 0, 0, 444, 445, 310, 317,
	463, 319, 281, 367, 312, 429, 326, 0, 456, 521,
	457, 580, 583, 581, 582, 359, 322, 323, 393, 327,
	337, 381, 428, 365, 386, 279, 419, 394, 341, 507,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 561, 560,
	559, 558, 557, 556, 555, 0, 0, 504, 406, 291,
	253, 287, 288, 295, 601, 598, 410, 602, 0, 261,
	484, 335, 0, 376, 309, 549, 550, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 552, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 256, 257, 258, 0, 0, 249, 250, 251,
	252, 0, 0, 0, 435, 436, 437, 459, 421, 483,
	599, 0, 0, 0, 0, 0, 0, 0, 533, 545,
	579, 0, 588, 589, 591, 593, 592, 0, 605, 474,
	475, 585, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	0, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 587, 0,
	427, 0, 0, 0, 3391, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 0, 605, 474, 475, 585, 364, 0,
	489, 522, 511, 594, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 304, 0, 0, 334, 526,
	508, 518, 509, 494, 495, 496, 503, 314, 497, 498,
	499, 469, 500, 470, 501, 502, 0, 525, 476, 395,
	348, 543, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 2949, 0, 0, 0, 277, 200, 471,
	590, 473, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 400, 417, 278, 391, 430,
	283, 398, 273, 363, 387, 0, 0, 269, 415, 397,
	345, 324, 325, 268, 0, 382, 302, 316, 299, 361,
	0, 414, 442, 298, 433, 0, 425, 271, 0, 424,
	360, 411, 416, 346, 340, 270, 413, 344, 339, 328,
	306, 458, 329, 330, 320, 372, 338, 373, 321, 350,
	349, 351, 0, 0, 0, 0, 0, 453, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 587, 0, 427, 0, 0, 0,
	0, 0, 0, 399, 0, 0, 331, 0, 0, 0,
	443, 0, 385, 366, 607, 0, 0, 383, 336, 412,
	374, 418, 401, 426, 379, 375, 262, 402, 301, 347,
	274, 276, 296, 303, 305, 307, 308, 356, 357, 369,
	390, 403, 404, 405, 300, 284, 384, 285, 318, 286,
	263, 292, 290, 293, 392, 294, 265, 370, 409, 0,
	313, 380, 343, 266, 342, 371, 408, 407, 275, 434,
	440, 441, 530, 0, 446, 608, 609, 610, 455, 460,
	461, 462, 464, 465, 466, 467, 531, 548, 515, 485,
	448, 539, 482, 486, 487, 551, 0, 0, 0, 439,
	332, 333, 0, 311, 259, 260, 604, 297, 362, 553,
	586, 478, 0, 540, 479, 488, 289, 512, 524, 523,
	358, 438, 0, 535, 538, 468, 603, 0, 532, 547,
	606, 546, 600, 368, 0, 389, 544, 491, 0, 536,
	510, 0, 537, 506, 541, 0, 480, 0, 396, 420,
	432, 449, 452, 481, 566, 567, 568, 264, 451, 570,
	571, 572, 573, 574, 575, 576, 569, 423, 513, 490,
	516, 431, 493, 492, 0, 0, 527, 447, 528, 529,
	352, 353, 354, 355, 315, 554, 282, 450, 378, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	520, 517, 611, 0, 577, 578, 0, 0, 444, 445,
	310, 317, 463, 319, 281, 367, 312, 429, 326, 0,
	456, 521, 457, 580, 583, 581, 582, 359, 322, 323,
	393, 327, 337, 381, 428, 365, 386, 279, 419, 394,
	341, 507, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	561, 560, 559, 558, 557, 556, 555, 0, 0, 504,
	406, 291, 253, 287, 288, 295, 601, 598, 410, 602,
	0, 261, 484, 335, 0, 376, 309, 549, 550, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 552, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 256, 257, 258, 0, 0, 249,
	250, 251, 252, 0, 0, 0, 435, 436, 437, 459,
	421, 483, 599, 0, 0, 0, 0, 0, 0, 0,
	533, 545, 579, 0, 588, 589, 591, 593, 592, 0,
	605, 474, 475, 585, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 0, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 0, 525, 476, 395, 348, 543, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 277, 200, 471, 590, 473, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2966, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 0, 414, 442, 298,
	433, 0, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 458, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 0, 0,
	587, 0, 427, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 443, 0, 385, 366,
	607, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 0, 0, 0, 439, 332, 333, 0, 311,
	259, 260, 604, 297, 362, 553, 586, 478, 0, 540,
	479, 488, 289, 512, 524, 523, 358, 438, 0, 535,
	538, 468, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 0, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 423, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 447, 528, 529, 352, 353, 354, 355,
	315, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	0, 376, 309, 549, 550, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 552,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	256, 257, 258, 0, 0, 249, 250, 251, 252, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 592, 0, 605, 474, 475, 585,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 0, 525,
	476, 395, 348, 543, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1900,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 277,
	200, 471, 590, 473, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 0, 414, 442, 298, 433, 0, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 458, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 587, 0, 427, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 443, 0, 385, 366, 607, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 297,
	362, 553, 586, 478, 0, 540, 479, 488, 289, 512,
	524, 523, 358, 438, 0, 535, 538, 468, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 423,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 447,
	528, 529, 352, 353, 354, 355, 315, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 552, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 256, 257, 258, 0,
	0, 249, 250, 251, 252, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	592, 0, 605, 474, 475, 585, 364, 0, 489, 522,
	511, 594, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 0, 334, 526, 508, 518,
	509, 494, 495, 496, 503, 314, 497, 498, 499, 469,
	500, 470, 501, 502, 0, 525, 476, 395, 348, 543,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 0, 0, 0, 0, 277, 200, 471, 590, 473,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 400, 417, 278, 391, 430, 283, 398,
	273, 363, 387, 0, 0, 269, 415, 397, 345, 324,
	325, 268, 0, 382, 302, 316, 299, 361, 0, 414,
	442, 298, 433, 0, 425, 271, 0, 424, 360, 411,
	416, 346, 340, 270, 413, 344, 339, 328, 306, 458,
	329, 330, 320, 372, 338, 373, 321, 350, 349, 351,
	0, 0, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 587, 0, 427, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 331, 0, 0, 0, 443, 0,
	385, 366, 607, 0, 0, 383, 336, 412, 374, 418,
	401, 426, 379, 375, 262, 402, 301, 347, 274, 276,
	296, 303, 305, 307, 308, 356, 357, 369, 390, 403,
	404, 405, 300, 284, 384, 285, 318, 286, 263, 292,
	290, 293, 392, 294, 265, 370, 409, 0, 313, 380,
	343, 266, 342, 371, 408, 407, 275, 434, 440, 441,
	530, 0, 446, 608, 609, 610, 455, 460, 461, 462,
	464, 465, 466, 467, 531, 548, 515, 485, 448, 539,
	482, 486, 487, 551, 0, 0, 0, 439, 332, 333,
	0, 311, 259, 260, 604, 297, 362, 553, 586, 478,
	0, 540, 479, 488, 289, 512, 524, 523, 358, 438,
	0, 535, 538, 468, 603, 0, 532, 547, 606, 546,
	600, 368, 0, 389, 544, 491, 0, 536, 510, 0,
	537, 506, 541, 0, 480, 0, 396, 420, 432, 449,
	452, 481, 566, 567, 568, 264, 451, 570, 571, 572,
	573, 574, 575, 576, 569, 423, 513, 490, 516, 431,
	493, 492, 0, 0, 527, 447, 528, 529, 352, 353,
	354, 355, 315, 554, 282, 450, 378, 0, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 520, 517,
	611, 0, 577, 578, 0, 0, 444, 445, 310, 317,
	463, 319, 281, 367, 312, 429, 326, 0, 456, 521,
	457, 580, 583, 581, 582, 359, 322, 323, 393, 327,
	337, 381, 428, 365, 386, 279, 419, 394, 341, 507,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 561, 560,
	559, 558, 557, 556, 555, 0, 0, 504, 406, 291,
	253, 287, 288, 295, 601, 598, 410, 602, 0, 261,
	484, 335, 0, 376, 309, 549, 550, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 552, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 256, 257, 258, 0, 0, 249, 250, 251,
	252, 0, 0, 0, 435, 436, 437, 459, 421, 483,
	599, 0, 0, 0, 0, 0, 0, 0, 533, 545,
	579, 0, 588, 589, 591, 593, 592, 0, 605, 474,
	475, 585, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	0, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 2918, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 587, 0,
	427, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 0, 605, 474, 475, 585, 364, 0,
	489, 522, 511, 594, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 304, 0, 0, 334, 526,
	508, 518, 509, 494, 495, 496, 503, 314, 497, 498,
	499, 469, 500, 470, 501, 502, 0, 525, 476, 395,
	348, 543, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 0, 0, 0, 0, 277, 200, 471,
	590, 473, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2828, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 400, 417, 278, 391, 430,
	283, 398, 273, 363, 387, 0, 0, 269, 415, 397,
	345, 324, 325, 268, 0, 382, 302, 316, 299, 361,
	0, 414, 442, 298, 433, 0, 425, 271, 0, 424,
	360, 411, 416, 346, 340, 270, 413, 344, 339, 328,
	306, 458, 329, 330, 320, 372, 338, 373, 321, 350,
	349, 351, 0, 0, 0, 0, 0, 453, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 587, 0, 427, 0, 0, 0,
	0, 0, 0, 399, 0, 0, 331, 0, 0, 0,
	443, 0, 385, 366, 607, 0, 0, 383, 336, 412,
	374, 418, 401, 426, 379, 375, 262, 402, 301, 347,
	274, 276, 296, 303, 305, 307, 308, 356, 357, 369,
	390, 403, 404, 405, 300, 284, 384, 285, 318, 286,
	263, 292, 290, 293, 392, 294, 265, 370, 409, 0,
	313, 380, 343, 266, 342, 371, 408, 407, 275, 434,
	440, 441, 530, 0, 446, 608, 609, 610, 455, 460,
	461, 462, 464, 465, 466, 467, 531, 548, 515, 485,
	448, 539, 482, 486, 487, 551, 0, 0, 0, 439,
	332, 333, 0, 311, 259, 260, 604, 297, 362, 553,
	586, 478, 0, 540, 479, 488, 289, 512, 524, 523,
	358, 438, 0, 535, 538, 468, 603, 0, 532, 547,
	606, 546, 600, 368, 0, 389, 544, 491, 0, 536,
	510, 0, 537, 506, 541, 0, 480, 0, 396, 420,
	432, 449, 452, 481, 566, 567, 568, 264, 451, 570,
	571, 572, 573, 574, 575, 576, 569, 423, 513, 490,
	516, 431, 493, 492, 0, 0, 527, 447, 528, 529,
	352, 353, 354, 355, 315, 554, 282, 450, 378, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	520, 517, 611, 0, 577, 578, 0, 0, 444, 445,
	310, 317, 463, 319, 281, 367, 312, 429, 326, 0,
	456, 521, 457, 580, 583, 581, 582, 359, 322, 323,
	393, 327, 337, 381, 428, 365, 386, 279, 419, 394,
	341, 507, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	561, 560, 559, 558, 557, 556, 555, 0, 0, 504,
	406, 291, 253, 287, 288, 295, 601, 598, 410, 602,
	0, 261, 484, 335, 0, 376, 309, 549, 550, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 552, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 256, 257, 258, 0, 0, 249,
	250, 251, 252, 0, 0, 0, 435, 436, 437, 459,
	421, 483, 599, 0, 0, 0, 0, 0, 0, 0,
	533, 545, 579, 0, 588, 589, 591, 593, 592, 0,
	605, 474, 475, 585, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 0, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 0, 525, 476, 395, 348, 543, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 1428,
	0, 0, 0, 277, 200, 471, 590, 473, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 0, 414, 442, 298,
	433, 0, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 458, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 0, 0,
	587, 0, 427, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 443, 0, 385, 366,
	607, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 0, 0, 0, 439, 332, 333, 0, 311,
	259, 260, 604, 297, 362, 553, 586, 478, 0, 540,
	479, 488, 289, 512, 524, 523, 358, 438, 0, 535,
	538, 468, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 0, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 423, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 447, 528, 529, 352, 353, 354, 355,
	315, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	0, 376, 309, 549, 550, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 552,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	256, 257, 258, 0, 0, 249, 250, 251, 252, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 592, 0, 605, 474, 475, 585,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 0, 525,
	476, 395, 348, 543, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 2321, 0, 0, 0, 277,
	200, 471, 590, 473, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 0, 414, 442, 298, 433, 0, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 458, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 587, 0, 427, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 443, 0, 385, 366, 607, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 297,
	362, 553, 586, 478, 0, 540, 479, 488, 289, 512,
	524, 523, 358, 438, 0, 535, 538, 468, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 423,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 447,
	528, 529, 352, 353, 354, 355, 315, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 552, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 256, 257, 258, 0,
	0, 249, 250, 251, 252, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	592, 0, 605, 474, 475, 585, 364, 0, 489, 522,
	511, 594, 477, 0, 0, 2656, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 0, 334, 526, 508, 518,
	509, 494, 495, 496, 503, 314, 497, 498, 499, 469,
	500, 470, 501, 502, 0, 525, 476, 395, 348, 543,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 0, 0, 0, 0, 277, 200, 471, 590, 473,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 400, 417, 278, 391, 430, 283, 398,
	273, 363, 387, 0, 0, 269, 415, 397, 345, 324,
	325, 268, 0, 382, 302, 316, 299, 361, 0, 414,
	442, 298, 433, 0, 425, 271, 0, 424, 360, 411,
	416, 346, 340, 270, 413, 344, 339, 328, 306, 458,
	329, 330, 320, 372, 338, 373, 321, 350, 349, 351,
	0, 0, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 587, 0, 427, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 331, 0, 0, 0, 443, 0,
	385, 366, 607, 0, 0, 383, 336, 412, 374, 418,
	401, 426, 379, 375, 262, 402, 301, 347, 274, 276,
	296, 303, 305, 307, 308, 356, 357, 369, 390, 403,
	404, 405, 300, 284, 384, 285, 318, 286, 263, 292,
	290, 293, 392, 294, 265, 370, 409, 0, 313, 380,
	343, 266, 342, 371, 408, 407, 275, 434, 440, 441,
	530, 0, 446, 608, 609, 610, 455, 460, 461, 462,
	464, 465, 466, 467, 531, 548, 515, 485, 448, 539,
	482, 486, 487, 551, 0, 0, 0, 439, 332, 333,
	0, 311, 259, 260, 604, 297, 362, 553, 586, 478,
	0, 540, 479, 488, 289, 512, 524, 523, 358, 438,
	0, 535, 538, 468, 603, 0, 532, 547, 606, 546,
	600, 368, 0, 389, 544, 491, 0, 536, 510, 0,
	537, 506, 541, 0, 480, 0, 396, 420, 432, 449,
	452, 481, 566, 567, 568, 264, 451, 570, 571, 572,
	573, 574, 575, 576, 569, 423, 513, 490, 516, 431,
	493, 492, 0, 0, 527, 447, 528, 529, 352, 353,
	354, 355, 315, 554, 282, 450, 378, 0, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 520, 517,
	611, 0, 577, 578, 0, 0, 444, 445, 310, 317,
	463, 319, 281, 367, 312, 429, 326, 0, 456, 521,
	457, 580, 583, 581, 582, 359, 322, 323, 393, 327,
	337, 381, 428, 365, 386, 279, 419, 394, 341, 507,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 561, 560,
	559, 558, 557, 556, 555, 0, 0, 504, 406, 291,
	253, 287, 288, 295, 601, 598, 410, 602, 0, 261,
	484, 335, 0, 376, 309, 549, 550, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 552, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 256, 257, 258, 0, 0, 249, 250, 251,
	252, 0, 0, 0, 435, 436, 437, 459, 421, 483,
	599, 0, 0, 0, 0, 0, 0, 0, 533, 545,
	579, 0, 588, 589, 591, 593, 592, 0, 605, 474,
	475, 585, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	0, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2034, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 587, 0,
	427, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 0, 605, 474, 475, 585, 364, 0,
	489, 522, 511, 594, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 304, 0, 0, 334, 526,
	508, 518, 509, 494, 495, 496, 503, 314, 497, 498,
	499, 469, 500, 470, 501, 502, 0, 525, 476, 395,
	348, 543, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 0, 0, 0, 0, 277, 200, 471,
	590, 473, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2398, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 400, 417, 278, 391, 430,
	283, 398, 273, 363, 387, 0, 0, 269, 415, 397,
	345, 324, 325, 268, 0, 382, 302, 316, 299, 361,
	0, 414, 442, 298, 433, 0, 425, 271, 0, 424,
	360, 411, 416, 346, 340, 270, 413, 344, 339, 328,
	306, 458, 329, 330, 320, 372, 338, 373, 321, 350,
	349, 351, 0, 0, 0, 0, 0, 453, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 587, 0, 427, 0, 0, 0,
	0, 0, 0, 399, 0, 0, 331, 0, 0, 0,
	443, 0, 385, 366, 607, 0, 0, 383, 336, 412,
	374, 418, 401, 426, 379, 375, 262, 402, 301, 347,
	274, 276, 296, 303, 305, 307, 308, 356, 357, 369,
	390, 403, 404, 405, 300, 284, 384, 285, 318, 286,
	263, 292, 290, 293, 392, 294, 265, 370, 409, 0,
	313, 380, 343, 266, 342, 371, 408, 407, 275, 434,
	440, 441, 530, 0, 446, 608, 609, 610, 455, 460,
	461, 462, 464, 465, 466, 467, 531, 548, 515, 485,
	448, 539, 482, 486, 487, 551, 0, 0, 0, 439,
	332, 333, 0, 311, 259, 260, 604, 297, 362, 553,
	586, 478, 0, 540, 479, 488, 289, 512, 524, 523,
	358, 438, 0, 535, 538, 468, 603, 0, 532, 547,
	606, 546, 600, 368, 0, 389, 544, 491, 0, 536,
	510, 0, 537, 506, 541, 0, 480, 0, 396, 420,
	432, 449, 452, 481, 566, 567, 568, 264, 451, 570,
	571, 572, 573, 574, 575, 576, 569, 423, 513, 490,
	516, 431, 493, 492, 0, 0, 527, 447, 528, 529,
	352, 353, 354, 355, 315, 554, 282, 450, 378, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	520, 517, 611, 0, 577, 578, 0, 0, 444, 445,
	310, 317, 463, 319, 281, 367, 312, 429, 326, 0,
	456, 521, 457, 580, 583, 581, 582, 359, 322, 323,
	393, 327, 337, 381, 428, 365, 386, 279, 419, 394,
	341, 507, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	561, 560, 559, 558, 557, 556, 555, 0, 0, 504,
	406, 291, 253, 287, 288, 295, 601, 598, 410, 602,
	0, 261, 484, 335, 0, 376, 309, 549, 550, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 552, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 256, 257, 258, 0, 0, 249,
	250, 251, 252, 0, 0, 0, 435, 436, 437, 459,
	421, 483, 599, 0, 0, 0, 0, 0, 0, 0,
	533, 545, 579, 0, 588, 589, 591, 593, 592, 0,
	605, 474, 475, 585, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 0, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 0, 525, 476, 395, 348, 543, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 2396,
	0, 0, 0, 277, 200, 471, 590, 473, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 0, 414, 442, 298,
	433, 0, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 458, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 0, 0,
	587, 0, 427, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 443, 0, 385, 366,
	607, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 0, 0, 0, 439, 332, 333, 0, 311,
	259, 260, 604, 297, 362, 553, 586, 478, 0, 540,
	479, 488, 289, 512, 524, 523, 358, 438, 0, 535,
	538, 468, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 0, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 423, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 447, 528, 529, 352, 353, 354, 355,
	315, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	0, 376, 309, 549, 550, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 552,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	256, 257, 258, 0, 0, 249, 250, 251, 252, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 592, 2186, 605, 474, 475, 585,
	0, 364, 0, 489, 522, 511, 594, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 334, 526, 508, 518, 509, 494, 495, 496, 503,
	314, 497, 498, 499, 469, 500, 470, 501, 502, 0,
	525, 476, 395, 348, 543, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 0, 0,
	277, 200, 471, 590, 473, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 400, 417,
	278, 391, 430, 283, 398, 273, 363, 387, 0, 0,
	269, 415, 397, 345, 324, 325, 268, 0, 382, 302,
	316, 299, 361, 0, 414, 442, 298, 433, 0, 425,
	271, 0, 424, 360, 411, 416, 346, 340, 270, 413,
	344, 339, 328, 306, 458, 329, 330, 320, 372, 338,
	373, 321, 350, 349, 351, 0, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 0, 0, 587, 0, 427,
	0, 0, 0, 0, 0, 0, 399, 0, 0, 331,
	0, 0, 0, 443, 0, 385, 366, 607, 0, 0,
	383, 336, 412, 374, 418, 401, 426, 379, 375, 262,
	402, 301, 347, 274, 276, 296, 303, 305, 307, 308,
	356, 357, 369, 390, 403, 404, 405, 300, 284, 384,
	285, 318, 286, 263, 292, 290, 293, 392, 294, 265,
	370, 409, 0, 313, 380, 343, 266, 342, 371, 408,
	407, 275, 434, 440, 441, 530, 0, 446, 608, 609,
	610, 455, 460, 461, 462, 464, 465, 466, 467, 531,
	548, 515, 485, 448, 539, 482, 486, 487, 551, 0,
	0, 0, 439, 332, 333, 0, 311, 259, 260, 604,
	297, 362, 553, 586, 478, 0, 540, 479, 488, 289,
	512, 524, 523, 358, 438, 0, 535, 538, 468, 603,
	0, 532, 547, 606, 546, 600, 368, 0, 389, 544,
	491, 0, 536, 510, 0, 537, 506, 541, 0, 480,
	0, 396, 420, 432, 449, 452, 481, 566, 567, 568,
	264, 451, 570, 571, 572, 573, 574, 575, 576, 569,
	423, 513, 490, 516, 431, 493, 492, 0, 0, 527,
	447, 528, 529, 352, 353, 354, 355, 315, 554, 282,
	450, 378, 0, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 519, 520, 517, 611, 0, 577, 578, 0,
	0, 444, 445, 310, 317, 463, 319, 281, 367, 312,
	429, 326, 0, 456, 521, 457, 580, 583, 581, 582,
	359, 322, 323, 393, 327, 337, 381, 428, 365, 386,
	279, 419, 394, 341, 507, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 561, 560, 559, 558, 557, 556, 555,
	0, 0, 504, 406, 291, 253, 287, 288, 295, 601,
	598, 410, 602, 0, 261, 484, 335, 0, 376, 309,
	549, 550, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 552, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 256, 257, 258,
	0, 0, 249, 250, 251, 252, 0, 0, 0, 435,
	436, 437, 459, 421, 483, 599, 0, 0, 0, 0,
	0, 0, 0, 533, 545, 579, 0, 588, 589, 591,
	593, 592, 0, 605, 474, 475, 585, 364, 0, 489,
	522, 511, 594, 477, 0, 1887, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 334, 526, 508,
	518, 509, 494, 495, 496, 503, 314, 497, 498, 499,
	469, 500, 470, 501, 502, 0, 525, 476, 395, 348,
	543, 542, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 277, 200, 471, 590,
	473, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 400, 417, 278, 391, 430, 283,
	398, 273, 363, 387, 0, 0, 269, 415, 397, 345,
	324, 325, 268, 0, 382, 302, 316, 299, 361, 0,
	414, 442, 298, 433, 0, 425, 271, 0, 424, 360,
	411, 416, 346, 340, 270, 413, 344, 339, 328, 306,
	458, 329, 330, 320, 372, 338, 373, 321, 350, 349,
	351, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 0, 0, 587, 0, 427, 0, 0, 0, 0,
	0, 0, 399, 0, 0, 331, 0, 0, 0, 443,
	0, 385, 366, 607, 0, 0, 383, 336, 412, 374,
	418, 401, 426, 379, 375, 262, 402, 301, 347, 274,
	276, 296, 303, 305, 307, 308, 356, 357, 369, 390,
	403, 404, 405, 300, 284, 384, 285, 318, 286, 263,
	292, 290, 293, 392, 294, 265, 370, 409, 0, 313,
	380, 343, 266, 342, 371, 408, 407, 275, 434, 440,
	441, 530, 0, 446, 608, 609, 610, 455, 460, 461,
	462, 464, 465, 466, 467, 531, 548, 515, 485, 448,
	539, 482, 486, 487, 551, 0, 0, 0, 439, 332,
	333, 0, 311, 259, 260, 604, 297, 362, 553, 586,
	478, 0, 540, 479, 488, 289, 512, 524, 523, 358,
	438, 0, 535, 538, 468, 603, 0, 532, 547, 606,
	546, 600, 368, 0, 389, 544, 491, 0, 536, 510,
	0, 537, 506, 541, 0, 480, 0, 396, 420, 432,
	449, 452, 481, 566, 567, 568, 264, 451, 570, 571,
	572, 573, 574, 575, 576, 569, 423, 513, 490, 516,
	431, 493, 492, 0, 0, 527, 447, 528, 529, 352,
	353, 354, 355, 315, 554, 282, 450, 378, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 520,
	517, 611, 0, 577, 578, 0, 0, 444, 445, 310,
	317, 463, 319, 281, 367, 312, 429, 326, 0, 456,
	521, 457, 580, 583, 581, 582, 359, 322, 323, 393,
	327, 337, 381, 428, 365, 386, 279, 419, 394, 341,
	507, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 561,
	560, 559, 558, 557, 556, 555, 0, 0, 504, 406,
	291, 253, 287, 288, 295, 601, 598, 410, 602, 0,
	261, 484, 335, 0, 376, 309, 549, 550, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 552, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 256, 257, 258, 0, 0, 249, 250,
	251, 252, 0, 0, 0, 435, 436, 437, 459, 421,
	483, 599, 0, 0, 0, 0, 0, 0, 0, 533,
	545, 579, 0, 588, 589, 591, 593, 592, 0, 605,
	474, 475, 585, 364, 0, 489, 522, 511, 594, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 334, 526, 508, 518, 509, 494, 495,
	496, 503, 314, 497, 498, 499, 469, 500, 470, 501,
	502, 0, 525, 476, 395, 348, 543, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 1428, 0,
	0, 0, 277, 200, 471, 590, 473, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	400, 417, 278, 391, 430, 283, 398, 273, 363, 387,
	0, 0, 269, 415, 397, 345, 324, 325, 268, 0,
	382, 302, 316, 299, 361, 0, 414, 442, 298, 433,
	0, 425, 271, 0, 424, 360, 411, 416, 346, 340,
	270, 413, 344, 339, 328, 306, 458, 329, 330, 320,
	372, 338, 373, 321, 350, 349, 351, 0, 0, 0,
	0, 0, 453, 454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 587,
	0, 427, 0, 0, 0, 0, 0, 0, 399, 0,
	0, 331, 0, 0, 0, 443, 0, 385, 366, 607,
	0, 0, 383, 336, 412, 374, 418, 401, 426, 1793,
	375, 262, 402, 301, 347, 274, 276, 296, 303, 305,
	307, 308, 356, 357, 369, 390, 403, 404, 405, 300,
	284, 384, 285, 318, 286, 263, 292, 290, 293, 392,
	294, 265, 370, 409, 0, 313, 380, 343, 266, 342,
	371, 408, 407, 275, 434, 440, 441, 530, 0, 446,
	608, 609, 610, 455, 460, 461, 462, 464, 465, 466,
	467, 531, 548, 515, 485, 448, 539, 482, 486, 487,
	551, 0, 0, 0, 439, 332, 333, 0, 311, 259,
	260, 604, 297, 362, 553, 586, 478, 0, 540, 479,
	488, 289, 512, 524, 523, 358, 438, 0, 535, 538,
	468, 603, 0, 532, 547, 606, 546, 600, 368, 0,
	389, 544, 491, 0, 536, 510, 0, 537, 506, 541,
	0, 480, 0, 396, 420, 432, 449, 452, 481, 566,
	567, 568, 264, 451, 570, 571, 572, 573, 574, 575,
	576, 569, 423, 513, 490, 516, 431, 493, 492, 0,
	0, 527, 447, 528, 529, 352, 353, 354, 355, 315,
	554, 282, 450, 378, 0, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 519, 520, 517, 611, 0, 577,
	578, 0, 0, 444, 445, 310, 317, 463, 319, 281,
	367, 312, 429, 326, 0, 456, 521, 457, 580, 583,
	581, 582, 359, 322, 323, 393, 327, 337, 381, 428,
	365, 386, 279, 419, 394, 341, 507, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 561, 560, 559, 558, 557,
	556, 555, 0, 0, 504, 406, 291, 253, 287, 288,
	295, 601, 598, 410, 602, 0, 261, 484, 335, 0,
	376, 309, 549, 550, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 552, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 256,
	257, 258, 0, 0, 249, 250, 251, 252, 0, 0,
	0, 435, 436, 437, 459, 421, 483, 599, 0, 0,
	0, 0, 0, 0, 0, 533, 545, 579, 0, 588,
	589, 591, 593, 592, 0, 605, 474, 475, 585, 364,
	0, 489, 522, 511, 594, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 334,
	526, 508, 518, 509, 494, 495, 496, 503, 314, 497,
	498, 499, 469, 500, 470, 501, 502, 0, 525, 476,
	395, 348, 543, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 277, 200,
	471, 590, 473, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 400, 417, 278, 391,
	430, 283, 398, 273, 363, 387, 0, 0, 269, 415,
	397, 345, 324, 325, 268, 0, 382, 302, 316, 299,
	361, 0, 414, 442, 298, 433, 0, 425, 271, 0,
	424, 360, 411, 416, 346, 340, 270, 413, 344, 339,
	328, 306, 458, 329, 330, 320, 372, 338, 373, 321,
	350, 349, 351, 0, 0, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 0, 587, 0, 427, 0, 0,
	1458, 0, 0, 0, 399, 0, 0, 331, 0, 0,
	0, 443, 0, 385, 366, 607, 0, 0, 383, 336,
	412, 374, 418, 401, 426, 379, 375, 262, 402, 301,
	347, 274, 276, 296, 303, 305, 307, 308, 356, 357,
	369, 390, 403, 404, 405, 300, 284, 384, 285, 318,
	286, 263, 292, 290, 293, 392, 294, 265, 370, 409,
	0, 313, 380, 343, 266, 342, 371, 408, 407, 275,
	434, 440, 441, 530, 0, 446, 608, 609, 610, 455,
	460, 461, 462, 464, 465, 466, 467, 531, 548, 515,
	485, 448, 539, 482, 486, 487, 551, 0, 0, 0,
	439, 332, 333, 0, 311, 259, 260, 604, 297, 362,
	553, 586, 478, 0, 540, 479, 488, 289, 512, 524,
	523, 358, 438, 0, 535, 538, 468, 603, 0, 532,
	547, 606, 546, 600, 368, 0, 389, 544, 491, 0,
	536, 510, 0, 537, 506, 541, 0, 480, 0, 396,
	420, 432, 449, 452, 481, 566, 567, 568, 264, 451,
	570, 571, 572, 573, 574, 575, 576, 569, 423, 513,
	490, 516, 431, 493, 492, 0, 0, 527, 447, 528,
	529, 352, 353, 354, 355, 315, 554, 282, 450, 378,
	0, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	519, 520, 517, 611, 0, 577, 578, 0, 0, 444,
	445, 310, 317, 463, 319, 281, 367, 312, 429, 326,
	0, 456, 521, 457, 580, 583, 581, 582, 359, 322,
	323, 393, 327, 337, 381, 428, 365, 386, 279, 419,
	394, 341, 507, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 561, 560, 559, 558, 557, 556, 555, 0, 0,
	504, 406, 291, 253, 287, 288, 295, 601, 598, 410,
	602, 0, 261, 484, 335, 0, 376, 309, 549, 550,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 552, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 256, 257, 258, 0, 0,
	249, 250, 251, 252, 0, 0, 0, 435, 436, 437,
	459, 421, 483, 599, 0, 0, 0, 0, 0, 0,
	0, 533, 545, 579, 0, 588, 589, 591, 593, 592,
	0, 605, 474, 475, 585, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 617, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 0, 525, 476, 395, 348, 543, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 277, 200, 471, 590, 473, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 0, 414, 442,
	298, 433, 0, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 458, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 0,
	0, 587, 0, 427, 0, 0, 0, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 443, 0, 385,
	366, 607, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 297, 362, 553, 586, 478, 0,
	540, 479, 488, 289, 512, 524, 523, 358, 438, 0,
	535, 538, 468, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 423, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 447, 528, 529, 352, 353, 354,
	355, 315, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	552, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 256, 257, 258, 0, 0, 249, 250, 251, 252,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 592, 0, 605, 474, 475,
	585, 364, 0, 489, 522, 511, 594, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 334, 526, 508, 518, 509, 494, 495, 496, 503,
	314, 497, 498, 499, 469, 500, 470, 501, 502, 0,
	525, 476, 395, 348, 543, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 0, 0,
	277, 200, 471, 590, 473, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 400, 417,
	278, 391, 430, 283, 398, 273, 363, 387, 0, 0,
	269, 415, 397, 345, 324, 325, 268, 0, 382, 302,
	316, 299, 361, 0, 414, 442, 298, 433, 0, 425,
	271, 0, 424, 360, 411, 416, 346, 340, 270, 413,
	344, 339, 328, 306, 458, 329, 330, 320, 372, 338,
	373, 321, 350, 349, 351, 0, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 0, 627, 587, 0, 427,
	0, 0, 0, 0, 0, 0, 399, 0, 0, 331,
	0, 0, 0, 443, 0, 385, 366, 607, 0, 0,
	383, 336, 412, 374, 418, 401, 426, 379, 375, 262,
	402, 301, 347, 274, 276, 296, 303, 305, 307, 308,
	356, 357, 369, 390, 403, 404, 405, 300, 284, 384,
	285, 318, 286, 263, 292, 290, 293, 392, 294, 265,
	370, 409, 0, 313, 380, 343, 266, 342, 371, 408,
	407, 275, 434, 440, 441, 530, 0, 446, 608, 609,
	610, 455, 460, 461, 462, 464, 465, 466, 467, 531,
	548, 515, 485, 448, 539, 482, 486, 487, 551, 0,
	0, 0, 439, 332, 333, 0, 311, 259, 260, 604,
	297, 362, 553, 586, 478, 0, 540, 479, 488, 289,
	512, 524, 523, 358, 438, 0, 535, 538, 468, 603,
	0, 532, 547, 606, 546, 600, 368, 0, 389, 544,
	491, 0, 536, 510, 0, 537, 506, 541, 0, 480,
	0, 396, 420, 432, 449, 452, 481, 566, 567, 568,
	264, 451, 570, 571, 572, 573, 574, 575, 576, 569,
	423, 513, 490, 516, 431, 493, 492, 0, 0, 527,
	447, 528, 529, 352, 353, 354, 355, 315, 554, 282,
	450, 378, 0, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 519, 520, 517, 611, 0, 577, 578, 0,
	0, 444, 445, 310, 317, 463, 319, 281, 367, 312,
	429, 326, 0, 456, 521, 457, 580, 583, 581, 582,
	359, 322, 323, 393, 327, 337, 381, 428, 365, 386,
	279, 419, 394, 341, 507, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 561, 560, 559, 558, 557, 556, 555,
	0, 0, 504, 406, 291, 253, 287, 288, 295, 601,
	598, 410, 602, 0, 261, 484, 335, 0, 376, 309,
	549, 550, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 552, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 256, 257, 258,
	0, 0, 249, 250, 251, 252, 0, 0, 0, 435,
	436, 437, 459, 421, 483, 599, 0, 0, 0, 0,
	0, 0, 0, 533, 545, 579, 0, 588, 589, 591,
	593, 592, 0, 605, 474, 475, 585, 364, 0, 489,
	522, 511, 594, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 334, 526, 508,
	518, 509, 494, 495, 496, 503, 314, 497, 498, 499,
	469, 500, 470, 501, 502, 0, 525, 476, 395, 348,
	543, 542, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 277, 200, 471, 590,
	473, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 400, 417, 278, 391, 430, 283,
	398, 273, 363, 387, 0, 0, 269, 415, 397, 345,
	324, 325, 268, 0, 382, 302, 316, 299, 361, 0,
	414, 442, 298, 433, 0, 425, 271, 0, 424, 360,
	411, 416, 346, 340, 270, 413, 344, 339, 328, 306,
	458, 329, 330, 320, 372, 338, 373, 321, 350, 349,
	351, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 0, 0, 587, 0, 427, 0, 0, 0, 0,
	0, 0, 399, 0, 0, 331, 0, 0, 0, 443,
	0, 385, 366, 607, 0, 0, 383, 336, 412, 374,
	418, 401, 426, 379, 375, 262, 402, 301, 347, 274,
	276, 296, 303, 305, 307, 308, 356, 357, 369, 390,
	403, 404, 405, 300, 284, 384, 285, 318, 286, 263,
	292, 290, 293, 392, 294, 265, 370, 409, 0, 313,
	380, 343, 266, 342, 371, 408, 407, 275, 434, 440,
	441, 530, 0, 446, 608, 609, 610, 455, 460, 461,
	462, 464, 465, 466, 467, 531, 548, 515, 485, 448,
	539, 482, 486, 487, 551, 0, 0, 0, 439, 332,
	333, 0, 311, 259, 260, 604, 297, 362, 553, 586,
	478, 0, 540, 479, 488, 289, 512, 524, 523, 358,
	438, 0, 535, 538, 468, 603, 0, 532, 547, 606,
	546, 600, 368, 0, 389, 544, 491, 0, 536, 510,
	0, 537, 506, 541, 0, 480, 0, 396, 420, 432,
	449, 452, 481, 566, 567, 568, 264, 451, 570, 571,
	572, 573, 574, 575, 576, 569, 423, 513, 490, 516,
	431, 493, 492, 0, 0, 527, 447, 528, 529, 352,
	353, 354, 355, 315, 554, 282, 450, 378, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 520,
	517, 611, 0, 577, 578, 0, 0, 444, 445, 310,
	317, 463, 319, 281, 367, 312, 429, 326, 0, 456,
	521, 457, 580, 583, 581, 582, 359, 322, 323, 393,
	327, 337, 381, 428, 365, 386, 279, 419, 394, 341,
	507, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 561,
	560, 559, 558, 557, 556, 555, 906, 0, 504, 406,
	291, 253, 287, 288, 295, 601, 598, 410, 602, 0,
	261, 484, 335, 0, 376, 309, 549, 550, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 552, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 256, 257, 258, 0, 0, 249, 250,
	251, 252, 0, 0, 0, 435, 436, 437, 459, 421,
	483, 599, 0, 0, 0, 0, 0, 0, 0, 533,
	545, 579, 0, 588, 589, 591, 593, 592, 0, 605,
	474, 475, 585, 364, 0, 489, 522, 511, 594, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 334, 526, 508, 518, 509, 494, 495,
	496, 503, 314, 497, 498, 499, 469, 500, 470, 501,
	502, 0, 525, 476, 395, 348, 543, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 277, 200, 471, 590, 473, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	400, 417, 278, 391, 430, 283, 398, 273, 363, 387,
	0, 0, 269, 415, 397, 345, 324, 325, 268, 0,
	382, 302, 316, 299, 361, 0, 414, 442, 298, 433,
	0, 425, 271, 0, 424, 360, 411, 416, 346, 340,
	270, 413, 344, 339, 328, 306, 458, 329, 330, 320,
	372, 338, 373, 321, 350, 349, 351, 0, 0, 0,
	0, 0, 453, 454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 587,
	0, 427, 0, 0, 0, 0, 0, 0, 399, 0,
	0, 331, 0, 0, 0, 443, 0, 385, 366, 607,
	0, 0, 383, 336, 412, 374, 418, 401, 426, 379,
	375, 262, 402, 301, 347, 274, 276, 296, 303, 305,
	307, 308, 356, 357, 369, 390, 403, 404, 405, 300,
	284, 384, 285, 318, 286, 263, 292, 290, 293, 392,
	294, 265, 370, 409, 0, 313, 380, 343, 266, 342,
	371, 408, 407, 275, 434, 440, 441, 530, 0, 446,
	608, 609, 610, 455, 460, 461, 462, 464, 465, 466,
	467, 531, 548, 515, 485, 448, 539, 482, 486, 487,
	551, 0, 0, 0, 439, 332, 333, 0, 311, 259,
	260, 604, 297, 362, 553, 586, 478, 0, 540, 479,
	488, 289, 512, 524, 523, 358, 438, 0, 535, 538,
	468, 603, 0, 532, 547, 606, 546, 600, 368, 0,
	389, 544, 491, 0, 536, 510, 0, 537, 506, 541,
	0, 480, 0, 396, 420, 432, 449, 452, 481, 566,
	567, 568, 264, 451, 570, 571, 572, 573, 574, 575,
	576, 569, 423, 513, 490, 516, 431, 493, 492, 0,
	0, 527, 447, 528, 529, 352, 353, 354, 355, 315,
	554, 282, 450, 378, 0, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 519, 520, 517, 611, 0, 577,
	578, 0, 0, 444, 445, 310, 317, 463, 319, 281,
	367, 312, 429, 326, 0, 456, 521, 457, 580, 583,
	581, 582, 359, 322, 323, 393, 327, 337, 381, 428,
	365, 386, 279, 419, 394, 341, 507, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 561, 560, 559, 558, 557,
	556, 555, 0, 0, 504, 406, 291, 253, 287, 288,
	295, 601, 598, 410, 602, 0, 261, 484, 335, 0,
	376, 309, 549, 550, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 552, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 256,
	257, 258, 0, 0, 249, 250, 251, 252, 0, 0,
	0, 435, 436, 437, 459, 421, 483, 599, 0, 0,
	0, 0, 0, 0, 0, 533, 545, 579, 0, 588,
	589, 591, 593, 592, 0, 605, 474, 475, 585, 364,
	0, 489, 522, 511, 594, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 334,
	526, 508, 518, 509, 494, 495, 496, 503, 314, 497,
	498, 499, 469, 500, 470, 501, 502, 0, 525, 476,
	395, 348, 543, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 277, 200,
	471, 590, 473, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 400, 1408, 278, 391,
	430, 283, 398, 273, 363, 387, 0, 0, 269, 415,
	397, 345, 324, 325, 268, 0, 382, 302, 316, 299,
	361, 0, 414, 442, 298, 433, 0, 425, 271, 0,
	424, 360, 411, 416, 346, 340, 270, 413, 344, 339,
	328, 306, 458, 329, 330, 320, 372, 338, 373, 321,
	350, 349, 351, 0, 0, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 0, 587, 0, 427, 0, 0,
	0, 0, 0, 0, 399, 0, 0, 331, 0, 0,
	0, 443, 0, 385, 366, 607, 0, 0, 383, 336,
	412, 374, 418, 401, 426, 379, 375, 262, 402, 301,
	347, 274, 276, 296, 303, 305, 307, 308, 356, 357,
	369, 390, 403, 404, 405, 300, 284, 384, 285, 318,
	286, 263, 292, 290, 293, 392, 294, 265, 370, 409,
	0, 313, 380, 343, 266, 342, 371, 408, 407, 275,
	434, 440, 441, 530, 0, 446, 608, 609, 610, 455,
	460, 461, 462, 464, 465, 466, 467, 531, 548, 515,
	485, 448, 539, 482, 486, 487, 551, 0, 0, 0,
	439, 332, 333, 0, 311, 259, 260, 604, 297, 362,
	553, 586, 478, 0, 540, 479, 488, 289, 512, 524,
	523, 358, 438, 0, 535, 538, 468, 603, 0, 532,
	547, 606, 546, 600, 368, 0, 389, 544, 491, 0,
	536, 510, 0, 537, 506, 541, 0, 480, 0, 396,
	420, 432, 449, 452, 481, 566, 567, 568, 264, 451,
	570, 571, 572, 573, 574, 575, 576, 569, 423, 513,
	490, 516, 431, 493, 492, 0, 0, 527, 447, 528,
	529, 352, 353, 354, 355, 315, 554, 282, 450, 378,
	0, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	519, 520, 517, 611, 0, 577, 578, 0, 0, 444,
	445, 310, 317, 463, 319, 281, 367, 312, 429, 326,
	0, 456, 521, 457, 580, 583, 581, 582, 359, 322,
	323, 393, 327, 337, 381, 428, 365, 386, 279, 419,
	394, 341, 507, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 561, 560, 559, 558, 557, 556, 555, 0, 0,
	504, 406, 291, 253, 287, 288, 295, 601, 598, 410,
	602, 0, 261, 484, 335, 0, 376, 309, 549, 550,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 552, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 256, 257, 258, 0, 0,
	249, 250, 251, 252, 0, 0, 0, 435, 436, 437,
	459, 421, 483, 599, 0, 0, 0, 0, 0, 0,
	0, 533, 545, 579, 0, 588, 589, 591, 593, 592,
	0, 605, 474, 475, 585, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 0, 525, 476, 395, 348, 543, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 277, 200, 471, 590, 473, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 400, 1406, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 0, 414, 442,
	298, 433, 0, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 458, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 0,
	0, 587, 0, 427, 0, 0, 0, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 443, 0, 385,
	366, 607, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 297, 362, 553, 586, 478, 0,
	540, 479, 488, 289, 512, 524, 523, 358, 438, 0,
	535, 538, 468, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 423, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 447, 528, 529, 352, 353, 354,
	355, 315, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	552, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 256, 257, 258, 0, 0, 249, 250, 251, 252,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 592, 0, 605, 474, 475,
	585, 364, 0, 489, 522, 511, 594, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 334, 526, 508, 518, 509, 494, 495, 496, 503,
	314, 497, 498, 499, 469, 500, 470, 501, 502, 0,
	525, 476, 395, 348, 543, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 0, 0,
	277, 200, 471, 590, 473, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 400, 417,
	278, 391, 430, 283, 398, 273, 363, 387, 0, 0,
	269, 415, 397, 345, 324, 325, 268, 0, 382, 302,
	316, 299, 361, 0, 414, 442, 298, 433, 0, 425,
	271, 0, 424, 360, 411, 416, 346, 340, 270, 413,
	344, 339, 328, 306, 458, 329, 330, 320, 372, 338,
	373, 321, 350, 349, 351, 0, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 0, 0, 587, 0, 427,
	0, 0, 0, 0, 0, 0, 399, 0, 0, 331,
	0, 0, 0, 443, 0, 385, 366, 607, 0, 0,
	383, 336, 412, 374, 418, 401, 426, 379, 375, 262,
	402, 301, 347, 274, 276, 692, 303, 305, 307, 308,
	356, 357, 369, 390, 403, 404, 405, 300, 284, 384,
	285, 318, 286, 263, 292, 290, 293, 392, 294, 265,
	370, 409, 0, 313, 380, 343, 266, 342, 371, 408,
	407, 275, 434, 440, 441, 530, 0, 446, 608, 609,
	610, 455, 460, 461, 462, 464, 465, 466, 467, 531,
	548, 515, 485, 448, 539, 482, 486, 487, 551, 0,
	0, 0, 439, 332, 333, 0, 311, 259, 260, 604,
	297, 362, 553, 586, 478, 0, 540, 479, 488, 289,
	512, 524, 523, 358, 438, 0, 535, 538, 468, 603,
	0, 532, 547, 606, 546, 600, 368, 0, 389, 544,
	491, 0, 536, 510, 0, 537, 506, 541, 0, 480,
	0, 396, 420, 432, 449, 452, 481, 566, 567, 568,
	264, 451, 570, 571, 572, 573, 574, 575, 576, 569,
	423, 513, 490, 516, 431, 493, 492, 0, 0, 527,
	447, 528, 529, 352, 353, 354, 355, 315, 554, 282,
	450, 378, 0, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 519, 520, 517, 611, 0, 577, 578, 0,
	0, 444, 445, 310, 317, 463, 319, 281, 367, 312,
	429, 326, 0, 456, 521, 457, 580, 583, 581, 582,
	359, 322, 323, 393, 327, 337, 381, 428, 365, 386,
	279, 419, 394, 341, 507, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 561, 560, 559, 558, 557, 556, 555,
	0, 0, 504, 406, 291, 253, 287, 288, 295, 601,
	598, 410, 602, 0, 261, 484, 335, 0, 376, 309,
	549, 550, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 552, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 256, 257, 258,
	0, 0, 249, 250, 251, 252, 0, 0, 0, 435,
	436, 437, 459, 421, 483, 599, 0, 0, 0, 0,
	0, 0, 0, 533, 545, 579, 0, 588, 589, 591,
	593, 592, 0, 605, 474, 475, 585, 364, 0, 489,
	522, 511, 594, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 334, 526, 508,
	518, 509, 494, 495, 496, 503, 314, 497, 498, 499,
	469, 500, 470, 501, 502, 0, 525, 476, 395, 348,
	543, 542, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 277, 200, 471, 590,
	473, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 400, 417, 278, 391, 430, 283,
	398, 273, 363, 387, 0, 0, 269, 415, 397, 345,
	324, 325, 268, 0, 382, 302, 316, 299, 361, 0,
	414, 442, 298, 433, 0, 425, 271, 0, 424, 360,
	411, 416, 346, 340, 270, 413, 344, 339, 328, 306,
	458, 329, 330, 320, 372, 338, 373, 321, 350, 349,
	351, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 0, 0, 587, 0, 427, 0, 0, 0, 0,
	0, 0, 399, 0, 0, 331, 0, 0, 0, 443,
	0, 385, 366, 607, 0, 0, 383, 336, 412, 374,
	418, 401, 426, 651, 375, 262, 402, 301, 347, 274,
	276, 296, 303, 305, 307, 308, 356, 357, 369, 390,
	403, 404, 405, 300, 284, 384, 285, 318, 286, 263,
	292, 290, 293, 392, 294, 265, 370, 409, 0, 313,
	380, 343, 266, 342, 371, 408, 407, 275, 434, 440,
	441, 530, 0, 446, 608, 609, 610, 455, 460, 461,
	462, 464, 465, 466, 467, 531, 548, 515, 485, 448,
	539, 482, 486, 487, 551, 0, 0, 0, 439, 332,
	333, 0, 311, 259, 260, 604, 297, 362, 553, 586,
	478, 0, 540, 479, 488, 289, 512, 524, 523, 358,
	438, 0, 535, 538, 468, 603, 0, 532, 547, 606,
	546, 600, 368, 0, 389, 544, 491, 0, 536, 510,
	0, 537, 506, 541, 0, 480, 0, 396, 420, 432,
	449, 452, 481, 566, 567, 568, 264, 451, 570, 571,
	572, 573, 574, 575, 652, 569, 423, 513, 490, 516,
	431, 493, 492, 0, 0, 527, 447, 528, 529, 352,
	353, 354, 355, 315, 554, 282, 450, 378, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 520,
	517, 611, 0, 577, 578, 0, 0, 444, 445, 310,
	317, 463, 319, 281, 367, 312, 429, 326, 0, 456,
	521, 457, 580, 583, 581, 582, 359, 322, 323, 393,
	327, 337, 381, 428, 365, 386, 279, 419, 394, 341,
	507, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 561,
	560, 559, 558, 557, 556, 555, 0, 0, 504, 406,
	291, 253, 287, 288, 295, 601, 598, 410, 602, 0,
	261, 484, 335, 0, 376, 309, 549, 550, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 552, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 256, 257, 258, 0, 0, 249, 250,
	251, 252, 0, 0, 0, 435, 436, 437, 459, 421,
	483, 599, 0, 0, 0, 1875, 0, 0, 0, 533,
	545, 579, 177, 588, 589, 591, 593, 592, 0, 605,
	474, 475, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3313, 0, 0, 0, 0, 0,
	1877, 0, 0, 1875, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1877, 0,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1852, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3469,
	0, 0, 0, 671, 670, 677, 667, 0, 0, 1852,
	0, 0, 0, 0, 0, 674, 675, 0, 676, 680,
	0, 0, 662, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 685, 0, 0, 0, 0, 0, 0, 1868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1875, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 689, 0, 1868, 691, 0,
	0, 0, 0, 690, 0, 0, 0, 1877, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1856,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1862, 0, 0, 0, 0, 0, 0, 0, 1852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1850, 1884, 0, 0, 1851, 1853, 1855, 1856, 1857, 1858,
	1859, 1863, 1864, 1865, 1867, 1870, 1871, 1872, 1862, 0,
	0, 0, 0, 0, 0, 1860, 1869, 1861, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1850, 1884,
	0, 0, 1851, 1853, 1855, 0, 1857, 1858, 1859, 1863,
	1864, 1865, 1867, 1870, 1871, 1872, 1868, 0, 0, 1876,
	0, 0, 0, 1860, 1869, 1861, 0, 0, 0, 0,
	663, 665, 664, 0, 0, 0, 0, 0, 0, 0,
	669, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 673, 0, 0, 0, 0, 1876, 0, 688,
	0, 0, 0, 1873, 0, 0, 666, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1849, 0, 0, 0, 0, 0, 0, 1848, 0, 0,
	0, 0, 0, 0, 0, 0, 1856, 0, 0, 0,
	0, 1873, 0, 0, 0, 0, 0, 1862, 0, 0,
	0, 1866, 0, 0, 0, 0, 0, 0, 1849, 0,
	1854, 0, 0, 0, 0, 1848, 0, 1850, 1884, 0,
	0, 1851, 1853, 1855, 0, 1857, 1858, 1859, 1863, 1864,
	1865, 1867, 1870, 1871, 1872, 0, 0, 0, 0, 1866,
	0, 0, 1860, 1869, 1861, 0, 0, 0, 1854, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 668, 672, 678, 0, 679,
	681, 0, 0, 682, 683, 684, 1876, 0, 686, 687,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	1873, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1849, 0, 0,
	0, 0, 0, 0, 1848, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1866, 0,
	0, 0, 0, 0, 0, 0, 0, 1854,
}

var yyPact = [...]int{
	3676, -1000, -1000, -1000, -315, 13680, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 43410,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	43410, -313, 27047, 41592, -1000, -1000, 2447, -1000, 42198, 15518,
	43410, 376, 373, 43410, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 751, -1000, 45834, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 577, 4203, 45228, 10622, -234, -1000, 1428,
	-59, 2313, 962, 967, 1084, 1084, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3716,
	887, 42804, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 468, 350, 887, 20376, 67, 65,
	1428, 392, -121, -120, -122, 3527, -1000, 1151, 3715, 191,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10622, 10622, 13680, -347, 13680, 10622, 43410, 43410, -1000,
	-1000, -1000, -1000, -313, 42198, 577, 4203, 10622, 2313, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -120, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -121, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -122, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 65, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 4623, -1000, 1456, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2837, 1455, 2310, 525, 41592, 43410, -1000, 142,
	525, -1000, -1000, -1000, 1428, 3268, -1000, 43410, 43410, 131,
	1687, -1000, 444, 370, 358, 259, 1453, -1000, -1000, -1000,
	-1000, -1000, -1000, 462, 3251, -1000, 43410, 43410, 2853, 43410,
	-1000, 2112, 492, 46550, 3055, 1504, 837, 2865, -1000, -1000,
	2835, -1000, 263, 245, 241, 361, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 270, -1000, 3146, -1000, -1000, 249, -1000,
	-1000, 234, -1000, -1000, -1000, 63, -1000, -1000, -1000, -1000,
	-1000, -1000, -67, -1000, -1000, 1013, 2031, 10622, 1812, -1000,
	2768, 1473, -1000, -1000, -1000, 6347, 12452, 12452, 12452, 12452,
	43410, -1000, -1000, 2625, 10622, 2817, 2815, 2814, 2807, -1000,
	-1000, -1000, -1000, -1000, -1000, 1444, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1890, -1000, -1000, -1000, 13062,
	-1000, 2806, 2804, 2803, 2801, 2799, 2798, 2797, 2796, 2787,
	2786, 2785, 2773, 2772, 2769, 2479, 14902, 2767, 2309, 2308,
	2766, 2761, 2756, 2305, 2755, 2752, 2749, 2479, 2479, 2748,
	2733, 2727, 2726, 2710, 2705, 2704, 2703, 2701, 2700, 2699,
	2697, 2696, 2694, 2693, 2692, 2674, 2673, 2672, 2671, 2668,
	2666, 2665, 2664, 2649, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1222, -1000, 2642,
	3262, 2547, -1000, 3132, 3119, 3107, 3101, -279, 2639, 2088,
	-1000, -1000, 95, -1000, -85, -1000, -1000, 955, -1000, 917,
	-1000, 565, 43410, 43410, 170, 770, 565, 565, 565, 565,
	565, 631, 565, 3163, 679, 649, 646, 645, 565, -83,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1686, 1676, 2936,
	870, -1000, -1000, -1000, -1000, 1315, 43410, -1000, 2570, 1558,
	1558, 3232, 3162, 503, 500, 484, 1558, 413, -1000, 1665,
	1665, 1665, 1665, 1558, 479, 509, 3167, 3167, 47, 1665,
	28, 1558, 1558, 28, 1558, 1558, 1683, 239, -288, -1000,
	-1000, -1000, -1000, 1665, 1665, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3137, 3135, 577, 577, 43410, 171, 43410, 577,
	577, 577, 587, 11, 44622, 44016, 2112, 490, 476, 1324,
	1674, -1000, 1545, 43410, 43410, 1545, 1545, 23411, 22805, -1000,
	43410, -1000, 3262, 2547, 2471, 1664, 2465, 2547, -126, -127,
	-129, 577, 577, 577, 577, 577, 193, 577, 577, 577,
	577, 577, 43410, 43410, 40986, 577, 577, 577, 8787, 8787,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13680,
	2017, 1982, 190, -23, -304, 238, -1000, -1000, 43410, 3020,
	220, -1000, -1000, -1000, 2509, -1000, 2560, 2560, 2560, 2560,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2560,
	2560, 2565, 2638, -1000, -1000, 2559, 2559, 2559, 2509, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2563, 2563, 2564, 2564, 2563, 43410,
	10622, 43410, 3049, 369, 2637, 525, -1000, 43410, 10622, 437,
	3262, 3048, 3167, 3214, -1000, -1000, 1442, 2085, 2304, -1000,
	259, -1000, 408, 259, 1596, -1000, 1035, -1000, -1000, -1000,
	-1000, -1000, 43410, -67, 419, -1000, -1000, 2291, 2635, -1000,
	546, 1301, 1344, -1000, 200, 3889, 35531, 2112, 35531, 43410,
	-1000, -1000, -1000, -1000, -1000, -1000, 49, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	240, -1000, 10622, 10622, 10622, 10622, 10622, -1000, 745, 11842,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 12452, 12452, 12452,
	12452, 12452, 12452, 12452, 12452, 12452, 12452, 12452, 12452, 2624,
	1680, 12452, 12452, 12452, 12452, 25229, 1664, 3002, 1322, 280,
	1473, 1473, 1473, 1473, 10622, -1000, 1670, 2031, 10622, 10622,
	10622, 10622, 43410, -1000, -1000, 4591, 10622, 10622, 4494, 10622,
	3099, 10622, 10622, 10622, 2464, 5119, 43410, 10622, -1000, 2461,
	2459, -1000, -1000, 1963, 10622, -1000, -1000, 10622, -1000, -1000,
	10622, 12452, 10622, -1000, 10622, 10622, 10622, -1000, -1000, 636,
	3099, 3099, 3099, 1749, 10622, 10622, 3099, 3099, 3099, 1747,
	3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099,
	2458, 2457, 2453, 10012, 3167, -234, -1000, 8177, 3048, 3167,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-281, 2632, 43410, 2301, 2296, -322, -13, 960, 938, 941,
	-1000, 43410, 1713, 3095, -1000, 2631, 43410, 565, 565, 565,
	-1000, 43410, 35531, 43410, 43410, 2112, 43410, 43410, 43410, 565,
	565, 565, 565, 43410, -1000, 2976, 35531, 2952, 587, -1000,
	43410, 1315, 3094, 43410, 3232, 12452, 12452, -1000, -1000, 10622,
	40380, 1665, 1558, 1558, -1000, -1000, 43410, -1000, -1000, -1000,
	1665, 43410, 1665, 1665, 3232, 1665, -1000, -1000, -1000, 1558,
	1558, -1000, -1000, 10622, -1000, -1000, 1665, 1665, -1000, -1000,
	3232, 43410, -10, 3232, 3232, 50, -1000, -1000, -1000, 1558,
	43410, 43410, 565, 43410, -1000, 43410, 43410, -1000, -1000, 43410,
	43410, 4074, 43410, 39774, 3131, -1000, 35531, 43410, 43410, 33107,
	-1000, 1232, -1000, -22, -1000, -34, 11, 1545, 11, 1545,
	-1000, 539, 571, 21593, 488, 35531, 5729, -1000, -1000, 1545,
	1545, 5729, 5729, 1476, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1311, -1000, 202, 3167, -1000, -1000, -1000, -1000, -1000,
	2083, 2080, 2074, 43410, 43410, 35531, 2112, 43410, 577, 43410,
	43410, 43410, 43410, 43410, -1000, 2626, 1437, -1000, 3054, 43410,
	43410, 43410, 1308, -1000, -1000, 18548, 1429, 1308, -1000, 1723,
	-1000, 10622, 13680, -257, 10622, 13680, 13680, 10622, 13680, -1000,
	10622, 203, -1000, -1000, -1000, -1000, 2073, -1000, 2066, -1000,
	-1000, -1000, -1000, -1000, 2295, 2295, -1000, 2062, -1000, -1000,
	-1000, -1000, 2058, -1000, -1000, 2057, -1000, -1000, -1000, 2451,
	1013, -1000, 2284, 2864, -235, -1000, 19770, 43410, 43410, 369,
	-326, 180, -1000, -235, -1000, 19159, 43410, 3167, -1000, -239,
	3048, 10622, 43410, -1000, 3159, -1000, -1000, 259, -1000, 448,
	335, -1000, -1000, -1000, -1000, -1000, -1000, 1424, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1293, -1000, 43410,
	-1000, -1000, 200, 35531, 37349, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 232, -1000, -1000, 179, -1000, 609, 161, 1595,
	-1000, -1000, 173, 207, 134, 838, 2031, -1000, 1724, 1724,
	1732, -1000, 612, -1000, -1000, -1000, -1000, 2625, -1000, -1000,
	-1000, 1770, 1585, -1000, 1659, 1659, 1408, 1408, 1408, 1408,
	1408, 1738, 1738, -1000, -1000, -1000, 6347, 2624, 12452, 12452,
	12452, 12452, 721, 721, 2680, 3674, -1000, -1000, -1000, -1000,
	10622, 168, 1715, -1000, 10622, 2330, 1299, 2231, 1193, 1370,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2450, 2449, 2373, 3250, 2444, 10622, -1000, -1000, 1594, 1592,
	1583, -1000, 1993, 9402, -1000, -1000, -1000, 2442, 1368, 2434,
	-1000, -1000, -1000, 2432, 1565, 1121, 2430, 1711, 2429, 2426,
	2425, 2424, 1285, 10622, 10622, 10622, 10622, 2422, 1563, 1562,
	10622, 10622, 10622, 10622, 2421, 10622, 10622, 10622, 10622, 10622,
	10622, 10622, 10622, 10622, 10622, 86, 86, 86, 1282, 1248,
	-1000, -1000, 1561, -1000, 2031, -1000, -1000, 3048, -1000, 2618,
	2054, 1240, -1000, -1000, -311, 2225, -1000, -1000, 951, 901,
	934, 3154, 3030, 43410, 1029, 2614, 43410, 43410, 43410, 197,
	-1000, 1139, -1000, 161, -75, 378, 1019, 2852, 3249, -141,
	43410, 43410, 43410, 43410, 3091, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 39168, -1000, 2613, 1555, -1000, -1000, 1473,
	1473, 2031, 2851, 43410, 43410, 3232, 3232, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1665, 3232, 3232, 1314, 1558, 1665,
	-1000, -1000, 1665, -1000, -1000, 1665, -1000, -1000, 1366, -1000,
	43410, -1000, -1000, -1000, 3086, 2570, 1233, -1000, -1000, -1000,
	3213, 976, 557, 557, 773, 528, 3212, 17336, -1000, 1580,
	1228, 602, 2980, 261, -1000, 1580, -173, 541, 1580, 1580,
	1580, 1580, 1580, 1580, 1580, 457, 454, 1580, 1580, 1580,
	1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 959, 1580,
	1580, 1580, 1580, 1580, -1000, 1580, 2611, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 482, 194, 3130, 289, 287, 1139,
	3128, 296, 3129, 1136, -1000, -1000, -1000, -1000, 25835, 25835,
	20987, 25835, -1000, 187, 11, 15, -1000, -1000, 1232, 5729,
	1232, 5729, -1000, -1000, 596, -1000, -1000, 1019, -1000, 43410,
	43410, -1000, -1000, 2610, 1673, -1000, -1000, 14902, -1000, 5729,
	5729, -1000, -1000, 26441, 43410, -1000, -68, -1000, -53, 3048,
	-1000, -1000, -1000, 1217, -1000, -1000, 1229, 1019, 2860, 43410,
	1217, 1217, 1217, -1000, -1000, 16730, 43410, 43410, -1000, -1000,
	-1000, 3232, 8787, -1000, 33107, -1000, -1000, 38561, -1000, 37955,
	3232, 1702, -1000, 13680, 1960, 185, -1000, 228, -307, 184,
	1873, 181, 2031, -1000, -1000, 2420, 2418, 1553, -1000, 1536,
	2414, 1530, 1507, -1000, -27, -1000, 3025, 1025, -1000, 2607,
	-1000, 1466, 2929, -1000, 1215, -1000, 1669, 1465, -1000, -1000,
	10622, -1000, 1025, 1446, 2920, 1215, 3048, 2280, -1000, 1210,
	-1000, 2100, 1358, 121, -1000, -1000, -1000, 43410, 2291, 1433,
	37349, 1074, -1000, 592, 1352, 1340, -1000, 35531, 235, 35531,
	-1000, 35531, -1000, -1000, 357, -1000, 43410, 3047, -1000, -1000,
	-1000, 2225, 1668, -330, 43410, -1000, -1000, -1000, -1000, -1000,
	1416, -1000, 721, 721, 2680, 2829, -1000, 12452, -1000, 12452,
	2996, -1000, 1699, -1000, 10622, 1956, 4553, 10622, 4553, 856,
	24623, 43410, -1000, -1000, 10622, 10622, -1000, 2934, -1000, -1000,
	-1000, -1000, 10622, 10622, 2104, -1000, 43410, -1000, -1000, -1000,
	-1000, 24623, -1000, 12452, -1000, -1000, -1000, -1000, 10622, 1134,
	1134, 2930, 1405, 86, 86, 86, 2915, 2909, 2781, 1402,
	86, 2764, 2750, 2592, 2548, 2538, 2514, 2505, 2488, 2474,
	2455, -1000, 2604, -1000, -1000, 1824, 11232, 8177, -1000, -1000,
	271, 1192, 2053, 2276, 116, -1000, 1667, -1000, -1000, -1000,
	895, 333, -1000, 212, 2412, 1189, -1000, -1000, 43410, -1000,
	-1000, -1000, 16730, 2570, 2596, 2570, 77, 1580, 563, 35531,
	474, -1000, 43410, 1852, 1662, 2859, 714, 3013, 43410, 2595,
	360, 2583, 2580, 3082, 363, 4693, 43410, 1183, -1000, 1339,
	3715, -1000, 43410, -1000, 2112, -1000, 1558, -1000, -1000, 3232,
	-1000, -1000, 10622, 10622, 3232, 1558, 1558, 1665, 43410, -1000,
	363, 4693, 3070, 4251, 443, 2448, -1000, 43410, -1000, -1000,
	-1000, 874, -1000, 746, 565, 43410, 1788, 746, 1778, 2573,
	-1000, -1000, 43410, 43410, 43410, 43410, -1000, -1000, 43410, -1000,
	43410, 43410, 43410, 43410, 43410, 36743, -1000, 43410, 43410, -1000,
	43410, 1766, 43410, 1765, 3027, -1000, 1580, 1580, 831, -1000,
	-1000, 540, -1000, 36743, 2051, 2050, 2038, 2033, 2275, 2269,
	2266, 1580, 1580, 2026, 2251, 36137, 2250, 1086, 2001, 2000,
	1998, 2047, 2244, 783, -1000, 2243, 2036, 2022, 1911, 43410,
	2571, 2179, -1000, -1000, 77, 1580, 282, 43410, 1654, 563,
	364, 1952, 22199, 43410, 33107, 33107, 33107, 33107, -1000, 2897,
	2896, -1000, 2911, 2910, 2935, 43410, 33107, 2570, -1000, 36137,
	-1000, -1000, -1000, 1664, 1401, 3075, 949, 10622, -1000, -1000,
	-58, -46, -1000, -1000, -1000, 35531, 2240, 488, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3153, 43410, 43410, 713, 2409,
	1187, -1000, -1000, -1000, 4693, 2560, 2560, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2560, 2560, 2565, -1000,
	-1000, 2559, 2559, 2559, 2509, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2563, 2563, 2564, 2564, 2563,
	-1000, -1000, 3220, -1000, 1180, -1000, -1000, 1336, -1000, 3220,
	1707, -319, 13680, 1587, 1616, -1000, 10622, 13680, 10622, -263,
	273, -265, -1000, -1000, -1000, 2238, -1000, -1000, -1000, 1988,
	-1000, 1987, 109, 118, 1752, -235, 8177, 388, 43410, -235,
	43410, 8177, -1000, 43410, 164, 366, -235, 3153, -27, 10622,
	2966, -1000, -1000, 43410, 1986, -1000, -1000, -1000, 3239, 35531,
	2112, 1508, 34925, -1000, 246, -1000, 221, 545, 2230, -1000,
	614, 115, 2227, 2225, -1000, -1000, -1000, -1000, 12452, 1473,
	-1000, -1000, -1000, 2031, 10622, 2408, -1000, 916, 916, 2189,
	2407, 2404, -1000, 2560, 2560, -1000, 2509, 2559, 2509, 916,
	916, 2393, -1000, 1849, 2411, -1000, 2345, 2326, 10622, -1000,
	2387, 3718, 1247, -86, -202, 86, 86, -1000, -1000, -1000,
	-1000, 86, 86, 86, 86, -1000, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 530, -119, -294, -125,
	-295, -1000, 2386, 1165, -1000, -1000, -1000, -1000, -1000, 4494,
	1129, -1000, -1000, 2225, 2208, -1000, -1000, -1000, 43410, 2205,
	2203, 1029, 4693, 2385, 3064, 16124, 3060, 1962, -1000, -1000,
	-1000, 34319, 519, -1000, -1000, -1000, 627, 222, 1937, 497,
	-1000, 43410, 296, 2947, 1651, 2201, 43410, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3013, -1000, 956, 343, 31895, 14296,
	-1000, 374, 16124, 16124, 374, 348, 1666, -1000, 525, 1099,
	139, 33107, 43410, -1000, 32501, 2382, -1000, 1019, 3232, -1000,
	2031, 2031, -1000, 3232, 3232, 1558, -1000, 348, -1000, 374,
	-1000, 1051, 17942, 393, 433, 409, -1000, 581, -1000, -1000,
	524, 3010, 4693, -1000, 43410, -1000, 43410, -1000, 43410, 43410,
	565, 10622, 3010, 43410, 591, -1000, -1000, 997, 340, 317,
	664, 664, 1126, -1000, 3044, -1000, -1000, 1082, -1000, -1000,
	-1000, -1000, 43410, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	24623, 24623, 3122, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2198, 2197, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 43410, 1399, -1000,
	1646, 1962, 34319, 1644, 1545, 2196, 519, 1852, 1642, -1000,
	2195, -1000, 1032, 43410, 43410, -1000, 1143, -1000, 1638, 2841,
	2858, 2841, -1000, -1000, -1000, -1000, 2879, -1000, 2877, -1000,
	-1000, 1143, -1000, -1000, -1000, -1000, -1000, 949, -1000, 3150,
	746, 746, 746, 2376, -1000, -1000, -1000, 1074, 2371, -1000,
	-1000, -1000, 3257, -1000, -1000, -1000, -1000, -1000, -1000, 16730,
	2998, 3218, 3210, 33713, 3218, -1000, -319, 1599, -1000, 1946,
	178, 1783, 43410, -1000, -1000, -1000, 2369, 2368, -243, 124,
	3208, 3206, 816, -1000, 2365, 1068, -235, -1000, -1000, 1025,
	-1000, -1000, -1000, -1000, -235, -1000, 1025, -1000, 109, -1000,
	-1000, 3004, -1000, -1000, 2112, -1000, 219, -1000, -1000, -1000,
	-1000, -1000, -1000, 146, -1000, 43410, -1000, 1064, 111, -1000,
	2031, -1000, -1000, -1000, -1000, -1000, 4553, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10622, -1000,
	-1000, -1000, 2311, -1000, -1000, 10622, 2364, 2192, 2363, 2191,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3262, -1000, 3204, 1398,
	2362, 2350, 1389, 2349, 2347, -1000, 10622, 2334, 4494, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 754, 374, 2333, 1054,
	-1000, -1000, -1000, -1000, 374, -1000, 2186, 160, -1000, -1000,
	-1000, 2181, 2180, 1924, -1000, -1000, 1903, 1462, 172, -1000,
	-1000, -1000, -1000, -1000, -1000, 1952, 1896, 1637, -332, -1000,
	2556, -1000, 1580, 1580, 1580, 43410, 1380, -1000, 1580, 1580,
	2331, -1000, 2324, 2322, -145, 529, 1647, 1618, -1000, 1902,
	25835, 33107, 32501, 1118, -1000, 1335, -1000, -1000, -1000, -1000,
	-1000, 3232, 529, -1000, 394, 1899, 12452, 2554, 12452, 2552,
	410, 2550, 1376, -1000, 43410, -1000, -1000, 43410, 288, 2546,
	-1000, 2540, 2848, 386, 2532, 2531, 43410, 2263, -1000, 3010,
	43410, 663, 2992, -1000, -1000, -1000, 307, -1000, -1000, 422,
	-1000, 43410, -1000, 43410, -1000, 1469, -1000, 24623, -1000, -1000,
	1359, -1000, 2179, 2175, -1000, 160, 2173, 5729, -1000, -1000,
	2947, 2172, -1000, 43410, 1032, 1032, 3262, 43410, 8177, -1000,
	-1000, 10622, 2530, -1000, 10622, -1000, -1000, -1000, -1000, -1000,
	2529, 2985, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1552,
	-1000, 10622, 10622, -1000, -1000, 561, 13680, -267, 272, -1000,
	-1000, -1000, -246, 2170, -1000, -1000, 3203, 2166, 2106, 43410,
	-1000, -1000, 1025, 1025, -243, -1000, -1000, 1019, -1000, -1000,
	928, 460, -1000, 2321, 2212, -1000, 2199, 86, -1000, 86,
	-1000, 211, 10622, -1000, 2164, -1000, -1000, -1000, 2162, -1000,
	-1000, 2078, -1000, 2319, 4693, -149, -145, 16124, -149, -1000,
	-1000, 355, -1000, -1000, 291, -1000, -1000, 1882, 566, -1000,
	-1000, -1000, 1631, 1801, 2118, 30077, 24623, 25229, 2159, -1000,
	-1000, 31895, 1552, 1552, 46439, 240, 46606, -1000, 2528, 973,
	1614, -1000, 1898, -1000, 1897, -1000, 3232, 1118, 133, -1000,
	-1000, 1506, -1000, 973, 2448, 3200, -1000, 3314, 43410, 2812,
	43410, 2527, 1622, 12452, -1000, 524, 2919, -1000, -1000, 288,
	-1000, -1000, 1744, 12452, -1000, -1000, 2152, 25229, 725, 1612,
	1590, 760, 2524, -1000, 425, 3256, -1000, -1000, -1000, 814,
	2513, -1000, 1751, 1737, -1000, 43410, -1000, 30077, 30077, 761,
	761, 30077, 30077, 2510, 664, -1000, -1000, 12452, -1000, -1000,
	1580, -1000, -1000, -1000, 1580, 1353, -1000, -1000, -1000, -1000,
	-1000, -1000, 1896, -1000, -1000, 3167, -1000, -1000, 2031, 43410,
	2031, 31289, -1000, 3199, 3197, -1000, 2031, 1013, -1000, -319,
	43410, 43410, -249, 1895, -1000, 2150, 119, -1000, -1000, 1016,
	-246, -251, 50, 24623, 1586, -1000, -1000, -1000, -1000, -1000,
	2268, -1000, 638, -1000, -1000, -1000, 1013, 2194, 2109, -1000,
	-1000, -139, -1000, -1000, 368, -1000, -1000, -1000, 512, 2149,
	-1000, -1000, 286, -1000, -1000, 2144, -1000, -1000, 110, -1000,
	1582, 1350, -1000, 2509, 10622, -1000, -1000, -1000, -1000, -1000,
	-1000, 521, -1000, 374, 4691, -1000, 1228, -1000, 928, 521,
	28865, 533, 283, -1000, 1879, -1000, -1000, 3262, -1000, 518,
	-1000, 405, -1000, 1349, -1000, 1347, 30683, 1875, 1970, -1000,
	46477, 656, -1000, -1000, 2680, -1000, -1000, -1000, -1000, -1000,
	-1000, 2142, 2141, -1000, -1000, -1000, -1000, -1000, 1857, 2499,
	-19, 3104, 2140, -1000, -1000, 2498, 1346, 1345, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1337, 1319, 30077,
	-1000, -1000, 2680, 1853, 24623, 1580, -1000, -1000, 1312, 1309,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2487, -1000, -1000,
	3195, -249, -1000, 2131, 99, 108, -1000, 2119, -1000, -1000,
	506, -236, 80, 78, 76, -1000, -1000, -1000, 10622, -1000,
	-1000, 43410, 420, -1000, -1000, -1000, 145, -1000, -1000, -1000,
	-1000, 2118, 2116, -1000, 30077, 3044, 2064, 375, 3193, -1000,
	46606, -1000, 1580, -1000, 375, 1300, -1000, 1580, 1580, -1000,
	359, -1000, 1598, -1000, 1847, -1000, 3167, -1000, 353, -1000,
	390, -1000, -1000, -1000, 1291, -1000, -1000, -1000, 46477, 401,
	-1000, 515, 2482, -1000, -1000, 2079, 10622, 2479, 1580, 2071,
	-132, 30077, 2847, 2846, 2770, 2594, 1287, -1000, -1000, 24623,
	-1000, -1000, 29471, 43410, 2106, -1000, -1000, 584, 113, 108,
	-1000, 3190, 117, 3181, 3173, 986, 1729, -1000, 89, 82,
	74, -1000, -1000, -1000, -1000, 505, -1000, 223, -1000, -1000,
	-1000, 277, -1000, -1000, 3044, -1000, 3172, 443, -1000, 24623,
	-1000, -1000, 28865, 1552, 1552, -1000, -1000, 1835, -1000, -1000,
	-1000, -1000, 1829, -1000, -1000, -1000, 1261, -1000, 43410, 724,
	7567, -1000, 2056, -1000, 43410, -1000, 2857, -1000, 210, 1257,
	277, 761, 277, 761, 277, 761, 277, 761, 229, -1000,
	-1000, -1000, 1211, -1000, -1000, 2473, 1828, 124, 112, 3171,
	-1000, 2106, 3170, 2106, 2106, -1000, 90, 506, -1000, -1000,
	-1000, 2115, -1000, -1000, -1000, -1000, 1580, 1580, 2113, 2110,
	332, -1000, -1000, -1000, 28259, 393, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 401, 46606, -1000, 7567, 1198, -1000, 2031,
	-1000, 664, -1000, -1000, 2753, 2551, 3246, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 43410, 3052, 24017,
	101, -1000, -1000, -1000, 2108, -1000, 2106, -1000, -1000, 1575,
	-1000, -291, 1809, 1805, -1000, -1000, 43410, -1000, 43410, 394,
	-1000, 46606, 1128, -1000, 7567, -1000, -1000, 3254, -1000, 3247,
	805, 805, 277, 277, 277, 277, -1000, -1000, 43410, -1000,
	1122, -1000, -1000, -1000, 1087, -1000, -1000, -1000, -1000, 1992,
	-1000, -1000, 1883, -1000, -1000, -1000, 1091, 2448, -1000, -1000,
	-1000, -1000, -1000, 1878, 430, -1000, 985, -1000, 1540, -1000,
	27653, 43410, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 43410,
	6957, -1000, 1085, -1000, -1000, 2031, 43410, -1000,
}

var yyPgo = [...]int{
	0, 176, 3283, 251, 180, 3833, 90, 249, 227, 223,
	248, 3832, 3831, 3830, 3016, 3015, 3829, 3828, 3827, 3825,
	3823, 3809, 3808, 3807, 3806, 3805, 3803, 3802, 3800, 3799,
	3798, 3795, 3794, 3793, 3790, 3789, 3788, 3786, 3783, 3782,
	3781, 3780, 3779, 3778, 3777, 3775, 236, 3773, 3771, 3770,
	3769, 3763, 3762, 3761, 3760, 3759, 3755, 3754, 3749, 3748,
	3747, 3745, 3744, 3743, 3742, 3739, 3738, 3736, 3735, 3734,
	3726, 3724, 3720, 3719, 3717, 3716, 3710, 3709, 3708, 3706,
	213, 3705, 2994, 3704, 3702, 3701, 3700, 3699, 3698, 3697,
	247, 3696, 3694, 3688, 3687, 3685, 3684, 3683, 3682, 3681,
	3678, 3677, 243, 3676, 3675, 3674, 3669, 252, 3668, 229,
	3667, 178, 159, 3666, 3665, 3664, 3663, 3662, 3661, 238,
	210, 76, 3656, 58, 3655, 3654, 219, 3653, 149, 3652,
	146, 3651, 3650, 3645, 3644, 3639, 3635, 3630, 3629, 3628,
	3627, 3625, 3623, 3622, 3620, 3619, 3618, 3617, 3616, 96,
	3615, 261, 3614, 71, 3613, 3612, 128, 92, 148, 256,
	74, 257, 262, 190, 183, 97, 3608, 335, 3607, 167,
	230, 161, 28, 3606, 136, 3604, 259, 47, 34, 240,
	141, 57, 163, 123, 3594, 218, 110, 111, 3592, 3590,
	137, 234, 186, 3588, 107, 3586, 3585, 3584, 3583, 3582,
	192, 207, 3581, 3580, 130, 3579, 3573, 139, 3572, 77,
	122, 173, 121, 3571, 968, 125, 124, 117, 101, 3570,
	144, 3569, 3567, 3566, 3565, 182, 3564, 3563, 129, 66,
	3562, 3561, 3558, 70, 3556, 79, 3552, 44, 3551, 72,
	3550, 3548, 3547, 3546, 3544, 3543, 3542, 3541, 3540, 3538,
	3537, 3536, 50, 3535, 3532, 7, 10, 18, 3526, 30,
	3525, 174, 3524, 3523, 3522, 3521, 3520, 94, 88, 3519,
	91, 171, 3517, 9, 27, 73, 3516, 3515, 220, 326,
	105, 158, 3514, 323, 3513, 3512, 3511, 165, 3510, 1537,
	3507, 3506, 3505, 3504, 3503, 3501, 36, 3496, 217, 39,
	3495, 135, 132, 3492, 42, 67, 231, 242, 3489, 3488,
	3487, 153, 200, 143, 38, 0, 3486, 151, 3485, 3481,
	3479, 255, 3477, 235, 225, 170, 282, 260, 177, 3476,
	3475, 63, 3473, 164, 41, 52, 138, 81, 21, 347,
	3470, 1647, 8, 193, 3469, 204, 3468, 360, 16, 184,
	157, 3467, 3466, 31, 263, 3465, 3463, 3449, 126, 3448,
	3447, 188, 100, 3446, 3445, 3444, 3443, 45, 3442, 37,
	14, 3440, 99, 3439, 241, 3438, 296, 154, 187, 185,
	160, 222, 237, 86, 83, 3437, 1659, 162, 102, 15,
	3436, 221, 3434, 169, 114, 3433, 120, 3431, 239, 264,
	214, 3430, 189, 11, 56, 35, 26, 49, 12, 245,
	203, 3428, 3427, 23, 46, 3426, 55, 3424, 20, 3421,
	3420, 65, 5, 3419, 3418, 19, 17, 3417, 33, 211,
	175, 127, 98, 68, 3415, 3414, 48, 206, 3413, 145,
	156, 150, 3412, 82, 3411, 3410, 3409, 870, 3408, 254,
	3407, 3405, 3403, 3402, 3401, 3400, 3399, 3398, 215, 3396,
	115, 43, 3395, 3394, 3393, 3391, 84, 155, 3390, 3389,
	3387, 3383, 29, 140, 3382, 13, 3379, 22, 24, 32,
	3362, 104, 3361, 2, 202, 3357, 3356, 4, 3355, 3354,
	1, 3, 3351, 3349, 133, 3347, 95, 25, 172, 109,
	3346, 3344, 87, 216, 147, 3342, 3341, 103, 233, 201,
	3340, 78, 228, 258, 3339, 208, 3338, 3336, 3335, 3334,
	3333, 3332, 1112, 3330, 3329, 244, 69, 93, 118, 3328,
	3327, 3326, 85, 166, 113, 119, 62, 89, 3322, 112,
	212, 3320, 197, 3317, 3314, 3313, 108, 3312, 3310, 3309,
	3307, 191, 3306, 3305, 195, 224, 3304, 3303, 321, 3301,
	3300, 3296, 3293, 3292, 3291, 3289, 3288, 3286, 3285, 226,
	366, 3281,
}

//line mysql_sql.y:11726
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObejectInfo {
	v, _ := st.union.(tree.ObejectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 564, 567, 567, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 117, 117, 146, 543, 543, 116, 549,
	549, 549, 550, 550, 113, 135, 134, 137, 137, 136,
	136, 133, 133, 129, 132, 132, 131, 131, 130, 125,
	127, 127, 126, 128, 128, 114, 102, 115, 493, 493,
	492, 492, 491, 491, 444, 444, 490, 490, 490, 489,
	489, 489, 488, 488, 487, 487, 486, 486, 484, 484,
	485, 483, 482, 482, 482, 480, 480, 480, 476, 476,
	478, 477, 477, 479, 471, 471, 474, 474, 472, 472,
	472, 472, 475, 470, 470, 470, 469, 469, 101, 101,
	101, 388, 388, 100, 100, 402, 402, 402, 402, 402,
	400, 400, 400, 400, 400, 400, 399, 399, 398, 398,
	403, 403, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 91, 91, 91, 91, 91, 96, 96, 96,
	555, 555, 554, 554, 556, 556, 556, 556, 557, 557,
	94, 94, 94, 95, 397, 397, 397, 92, 93, 93,
	387, 387, 392, 392, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 396, 396, 396,
	394, 394, 393, 393, 395, 395, 85, 85, 85, 88,
	87, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	86, 86, 86, 86, 86, 86, 81, 81, 81, 81,
	81, 80, 80, 82, 82, 384, 384, 383, 97, 97,
	98, 552, 552, 551, 553, 553, 553, 553, 99, 105,
	105, 105, 105, 105, 105, 105, 104, 104, 107, 107,
	106, 108, 90, 90, 90, 90, 90, 90, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 518, 518, 518, 520, 520, 319, 320, 568, 322,
	318, 318, 318, 514, 514, 515, 516, 517, 517, 517,
	103, 11, 11, 11, 11, 11, 11, 11, 11, 13,
	79, 84, 84, 260, 260, 265, 265, 266, 266, 266,
	271, 271, 272, 272, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 261, 261, 247, 247, 247, 242,
	242, 242, 242, 243, 243, 244, 244, 245, 245, 245,
	245, 246, 246, 312, 312, 267, 267, 267, 269, 269,
	268, 264, 262, 262, 262, 262, 262, 262, 262, 263,
	263, 263, 263, 270, 270, 77, 83, 83, 83, 531,
	531, 78, 542, 542, 447, 447, 333, 333, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 452, 453, 329, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 53, 56,
	57, 52, 52, 52, 373, 373, 51, 569, 569, 307,
	307, 65, 64, 55, 66, 67, 68, 69, 70, 71,
	50, 63, 63, 63, 63, 63, 63, 63, 63, 74,
	465, 465, 571, 571, 571, 72, 73, 446, 446, 446,
	62, 61, 60, 59, 58, 58, 49, 49, 48, 48,
	54, 141, 142, 142, 326, 326, 326, 328, 328, 324,
	570, 570, 416, 416, 327, 327, 47, 47, 47, 47,
	75, 325, 325, 306, 323, 323, 323, 12, 12, 10,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 25, 26, 28, 381, 381,
	378, 27, 19, 18, 18, 22, 21, 17, 17, 20,
	23, 24, 24, 9, 9, 9, 9, 14, 14, 15,
	164, 164, 215, 215, 526, 526, 522, 522, 523, 523,
	523, 524, 524, 525, 525, 109, 459, 459, 459, 459,
	459, 459, 8, 8, 186, 186, 458, 458, 458, 458,
	458, 458, 385, 385, 385, 503, 503, 503, 504, 185,
	185, 180, 180, 460, 460, 350, 505, 505, 468, 468,
	467, 467, 466, 466, 183, 183, 184, 184, 167, 167,
	120, 120, 473, 473, 473, 473, 481, 481, 443, 443,
	252, 252, 299, 299, 300, 300, 157, 157, 158, 158,
	158, 158, 158, 158, 558, 558, 559, 560, 561, 561,
	562, 562, 562, 563, 563, 563, 563, 563, 511, 511,
	513, 513, 512, 182, 182, 178, 178, 179, 179, 179,
	177, 177, 176, 175, 175, 174, 172, 172, 172, 173,
	173, 173, 190, 190, 160, 160, 160, 159, 159, 159,
	159, 159, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 161, 161, 519, 519, 519, 448,
	448, 448, 455, 455, 280, 280, 281, 281, 279, 279,
	162, 162, 163, 163, 163, 163, 278, 278, 277, 165,
	165, 171, 170, 170, 166, 166, 166, 166, 288, 288,
	287, 287, 287, 287, 112, 118, 118, 119, 189, 189,
	286, 285, 285, 285, 188, 188, 187, 187, 181, 181,
	169, 169, 169, 169, 284, 168, 282, 548, 548, 547,
	547, 546, 544, 544, 544, 545, 545, 545, 545, 495,
	495, 495, 495, 495, 313, 313, 313, 317, 317, 316,
	316, 316, 316, 316, 321, 7, 7, 7, 7, 7,
	7, 7, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 38, 199, 200, 39, 201,
	201, 202, 202, 203, 203, 204, 205, 206, 206, 206,
	206, 37, 191, 191, 192, 192, 193, 193, 194, 195,
	195, 195, 198, 196, 197, 197, 566, 566, 565, 36,
	36, 29, 150, 150, 151, 151, 151, 153, 153, 248,
	248, 248, 152, 152, 154, 154, 154, 527, 530, 528,
	528, 532, 532, 532, 533, 533, 533, 533, 534, 534,
	30, 138, 143, 537, 537, 537, 536, 536, 538, 538,
	539, 539, 303, 303, 304, 304, 148, 149, 149, 145,
	140, 156, 156, 156, 156, 156, 139, 144, 147, 529,
	535, 535, 535, 382, 382, 379, 380, 380, 377, 376,
	376, 376, 541, 541, 540, 540, 540, 314, 314, 31,
	372, 372, 374, 375, 375, 375, 366, 366, 366, 366,
	35, 370, 370, 371, 371, 371, 371, 371, 371, 371,
	367, 367, 369, 369, 365, 365, 365, 365, 365, 365,
	365, 34, 155, 155, 364, 364, 361, 361, 359, 359,
	360, 360, 358, 358, 358, 362, 362, 42, 76, 43,
	44, 45, 41, 363, 363, 33, 33, 33, 33, 33,
	33, 33, 33, 122, 121, 121, 121, 121, 121, 124,
	124, 302, 302, 301, 301, 123, 249, 249, 40, 227,
	227, 435, 435, 430, 430, 430, 430, 430, 450, 450,
	450, 431, 431, 431, 432, 432, 432, 434, 434, 434,
	433, 433, 433, 433, 433, 449, 449, 451, 451, 451,
	404, 404, 405, 405, 405, 408, 408, 422, 422, 423,
	423, 421, 421, 428, 428, 427, 427, 426, 426, 425,
	425, 424, 424, 424, 424, 419, 419, 418, 418, 406,
	406, 406, 406, 406, 407, 407, 407, 417, 417, 420,
	420, 276, 276, 275, 275, 235, 235, 236, 236, 274,
	274, 233, 233, 234, 234, 234, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 501, 501, 502, 238, 238, 250, 250, 250, 250,
	250, 250, 237, 237, 239, 239, 216, 216, 214, 214,
	214, 214, 207, 207, 208, 208, 209, 209, 209, 213,
	213, 212, 212, 212, 212, 210, 210, 211, 211, 211,
	211, 211, 211, 390, 390, 498, 498, 499, 499, 494,
	494, 494, 497, 497, 497, 497, 497, 497, 497, 500,
	500, 500, 496, 496, 217, 297, 297, 297, 315, 315,
	315, 315, 296, 296, 296, 232, 232, 231, 231, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 389, 389, 330, 330, 331, 331, 259, 258, 258,
	258, 258, 258, 256, 257, 255, 255, 255, 255, 255,
	254, 254, 253, 253, 253, 368, 368, 251, 251, 241,
	241, 241, 240, 240, 240, 429, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 294, 294, 294, 295, 295,
	295, 295, 295, 295, 295, 295, 340, 340, 346, 346,
	510, 510, 509, 218, 218, 218, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 228, 228, 228, 413, 413,
	413, 413, 414, 414, 414, 414, 415, 415, 415, 411,
	411, 412, 412, 351, 352, 352, 456, 456, 457, 457,
	409, 409, 410, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 464, 464, 464, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 521, 521, 521, 506, 506, 506,
	507, 507, 507, 507, 507, 507, 507, 507, 507, 507,
	507, 507, 508, 508, 508, 508, 508, 508, 508, 508,
	508, 508, 508, 508, 508, 508, 508, 508, 508, 292,
	292, 292, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	353, 353, 354, 354, 461, 461, 461, 461, 461, 461,
	462, 462, 463, 463, 463, 463, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 338, 289, 289, 289, 355,
	347, 347, 348, 348, 349, 349, 341, 341, 341, 341,
	341, 341, 342, 342, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 343, 343, 345, 345,
	357, 357, 357, 356, 356, 356, 356, 356, 356, 356,
	230, 230, 230, 230, 335, 335, 335, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 220,
	220, 220, 220, 224, 224, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 225,
	225, 225, 225, 225, 223, 223, 223, 223, 223, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 110, 111, 111,
	222, 298, 298, 436, 436, 439, 439, 437, 437, 438,
	440, 440, 440, 441, 441, 441, 442, 442, 442, 445,
	445, 305, 305, 305, 311, 311, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 6, 1, 2, 4, 0,
	1, 1, 0, 1, 5, 2, 2, 6, 9, 6,
	9, 4, 7, 8, 0, 1, 1, 2, 4, 6,
	1, 2, 4, 0, 2, 10, 10, 2, 0, 2,
	1, 3, 3, 3, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 2, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 2, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 1, 1, 2, 2, 1, 1, 1,
	3, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 4,
	1, 3, 3, 1, 2, 2, 2, 1, 2, 2,
	3, 4, 4, 6, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 2,
	2, 0, 1, 4, 2, 4, 1, 5, 3, 2,
	1, 2, 2, 4, 4, 5, 2, 1, 3, 4,
	4, 1, 2, 9, 7, 1, 3, 3, 1, 1,
	3, 1, 3, 2, 1, 2, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 2, 4,
	3, 3, 1, 1, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 5, 3, 4, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 1, 1, 1, 1,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 10,
	7, 4, 4, 1, 3, 1, 6, 3, 3, 3,
	1, 1, 1, 3, 2, 4, 5, 5, 6, 5,
	5, 3, 2, 2, 1, 3, 4, 3, 7, 5,
	8, 2, 2, 1, 3, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 2, 1, 3,
	2, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	6, 3, 3, 1, 1, 7, 7, 8, 8, 0,
	4, 7, 0, 3, 0, 2, 0, 1, 1, 1,
	1, 4, 2, 2, 3, 3, 4, 5, 3, 4,
	4, 2, 2, 2, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	3, 2, 5, 5, 0, 2, 7, 0, 1, 0,
	1, 5, 5, 3, 3, 2, 4, 4, 4, 4,
	4, 1, 1, 1, 3, 3, 1, 1, 1, 6,
	0, 1, 1, 1, 1, 5, 5, 0, 1, 1,
	3, 3, 3, 4, 6, 7, 4, 4, 7, 8,
	3, 3, 3, 4, 0, 2, 2, 0, 2, 2,
	1, 1, 1, 1, 0, 1, 4, 4, 5, 4,
	3, 1, 3, 1, 1, 3, 5, 2, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 4, 1, 3,
	1, 4, 6, 6, 4, 4, 4, 4, 4, 3,
	6, 3, 5, 1, 1, 2, 2, 11, 8, 9,
	1, 3, 2, 4, 0, 2, 0, 1, 1, 1,
	1, 0, 1, 0, 1, 4, 2, 1, 5, 4,
	4, 2, 5, 5, 1, 3, 2, 1, 5, 4,
	4, 2, 0, 5, 4, 0, 1, 3, 3, 1,
	3, 1, 3, 1, 3, 4, 0, 1, 0, 1,
	1, 3, 1, 1, 0, 4, 1, 3, 2, 1,
	0, 8, 0, 4, 7, 4, 0, 2, 0, 2,
	0, 2, 0, 4, 1, 3, 1, 1, 6, 4,
	5, 7, 4, 5, 0, 1, 3, 8, 0, 6,
	0, 4, 6, 1, 1, 1, 1, 1, 2, 3,
	1, 3, 6, 0, 3, 0, 1, 2, 4, 4,
	0, 1, 3, 1, 3, 3, 0, 1, 1, 0,
	2, 2, 0, 2, 3, 3, 3, 1, 3, 3,
	3, 3, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 7, 7, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 2,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	3, 1, 1, 1, 4, 4, 4, 3, 2, 2,
	2, 3, 2, 3, 4, 1, 3, 4, 0, 2,
	1, 1, 2, 2, 0, 1, 2, 4, 1, 3,
	1, 3, 2, 3, 1, 4, 3, 0, 1, 1,
	2, 5, 2, 2, 2, 0, 2, 3, 3, 0,
	1, 3, 1, 3, 0, 1, 2, 1, 1, 0,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 1, 7, 1,
	3, 0, 1, 1, 3, 1, 3, 0, 1, 1,
	1, 14, 1, 3, 0, 1, 1, 3, 1, 1,
	2, 4, 1, 1, 1, 1, 0, 1, 2, 9,
	9, 7, 1, 2, 3, 3, 3, 0, 4, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 4, 1,
	1, 3, 4, 3, 0, 1, 1, 1, 0, 2,
	7, 8, 8, 0, 3, 3, 0, 3, 0, 3,
	0, 5, 1, 3, 0, 3, 3, 0, 2, 9,
	6, 0, 2, 2, 3, 3, 4, 4, 4, 1,
	0, 2, 2, 1, 3, 2, 1, 3, 2, 1,
	3, 2, 0, 1, 3, 4, 3, 1, 1, 4,
	1, 3, 1, 1, 1, 1, 0, 1, 1, 1,
	11, 0, 2, 3, 3, 2, 2, 3, 1, 1,
	1, 3, 3, 4, 0, 2, 2, 2, 2, 2,
	2, 6, 0, 4, 1, 1, 0, 3, 0, 1,
	1, 2, 4, 4, 4, 0, 1, 8, 2, 4,
	4, 4, 9, 0, 2, 11, 9, 11, 8, 6,
	9, 7, 10, 2, 2, 9, 4, 5, 3, 0,
	4, 1, 3, 0, 3, 6, 0, 2, 10, 0,
	2, 0, 2, 0, 3, 2, 4, 3, 0, 2,
	1, 0, 2, 3, 0, 2, 3, 0, 2, 1,
	0, 3, 2, 4, 3, 0, 1, 0, 1, 1,
	0, 6, 0, 3, 5, 0, 4, 0, 3, 1,
	3, 4, 5, 0, 3, 1, 3, 2, 3, 1,
	2, 0, 4, 6, 5, 0, 2, 0, 2, 4,
	5, 4, 5, 1, 5, 6, 5, 0, 3, 0,
	1, 1, 3, 3, 3, 0, 4, 1, 3, 3,
	3, 0, 1, 1, 3, 2, 3, 3, 3, 4,
	4, 3, 3, 3, 3, 4, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 5,
	4, 1, 3, 3, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	4, 6, 0, 1, 1, 3, 1, 1, 1, 1,
	1, 7, 9, 7, 9, 2, 1, 7, 9, 7,
	9, 8, 5, 0, 1, 0, 1, 1, 1, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 3, 1, 3, 5, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 2, 1,
	2, 2, 1, 1, 2, 2, 2, 3, 3, 2,
	2, 1, 5, 6, 4, 1, 1, 1, 5, 4,
	1, 1, 2, 0, 1, 1, 2, 5, 0, 1,
	1, 2, 2, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 2, 2, 2, 0, 3, 0, 3, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 3, 5, 2, 2, 2, 2, 4, 1,
	1, 2, 5, 6, 8, 6, 6, 6, 1, 1,
	1, 1, 1, 1, 3, 4, 4, 4, 7, 9,
	7, 7, 7, 9, 7, 7, 0, 2, 0, 1,
	1, 2, 4, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 2, 2, 2, 0, 1, 1, 1, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	5, 0, 1, 3, 0, 1, 0, 2, 0, 2,
	0, 1, 6, 8, 8, 6, 6, 5, 5, 5,
	6, 6, 6, 6, 5, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 1, 1, 1, 4, 4,
	6, 8, 6, 4, 5, 4, 4, 4, 3, 4,
	6, 6, 7, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 8, 4, 2, 3, 2, 4, 2, 2, 4,
	6, 2, 2, 4, 6, 4, 2, 4, 4, 4,
	0, 1, 2, 3, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 3,
	0, 1, 1, 3, 1, 3, 3, 3, 3, 3,
	2, 1, 1, 1, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 1, 3, 4, 4, 5, 4,
	5, 3, 4, 5, 6, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 2, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 4, 4, 1, 2, 3, 5,
	1, 1, 3, 0, 1, 0, 3, 0, 3, 3,
	0, 3, 5, 0, 3, 5, 0, 1, 1, 0,
	1, 1, 2, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -564, -567, -2, -5, 618, -1, -4, -111, -85,
	-7, -113, -114, -8, -109, -9, -10, -12, -89, -104,
	-106, -108, -107, -46, -11, -103, -80, -81, -91, -97,
	-100, -101, -102, -115, -110, -112, -157, -116, -117, 608,
	-86, -87, -88, -32, -31, -30, -29, -138, -143, -146,
	614, 447, 14, 496, -14, -15, -511, -16, 259, -318,
	-319, -320, -322, -568, -47, -48, -49, -58, -59, -60,
	-61, -62, -72, -73, -74, -50, -51, -52, -55, -53,
	-65, -64, -66, -67, -68, -69, -70, -71, -54, -141,
	-142, -75, -56, -76, -57, -78, -77, -83, -79, -84,
	-140, -145, -13, 234, -82, 76, -92, -93, -94, -95,
	-96, -98, -99, 371, 377, 434, 607, 61, -158, -160,
	624, 625, 159, 160, 162, 163, -33, -34, -35, -36,
	-37, -38, -40, -39, -41, -42, -43, -44, -45, 230,
	16, 539, -17, -20, -18, -21, -19, -27, -28, -26,
	-23, -25, -139, -24, -144, -22, -147, 254, 253, 38,
	320, 321, 322, 375, 252, 231, 15, 31, 42, 351,
	-159, 82, 531, 532, 534, 232, -161, 13, 629, -6,
	-3, -2, -125, -129, -133, -136, -137, -134, -135, -4,
	-111, 117, 244, 609, -315, 367, 610, 612, 611, 85,
	93, -308, -310, 447, 259, 371, 377, 607, 625, 544,
	545, 546, 547, 548, 549, 550, 551, 553, 554, 555,
	556, 557, 558, 559, 569, 570, 560, 561, 562, 563,
	564, 565, 566, 567, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 499, 594,
	595, 596, 597, 527, 552, 588, 589, 590, 591, 349,
	350, 536, 271, 295, 402, 301, 308, 159, 178, 172,
	200, 192, 532, 167, 275, 313, 276, 92, 162, 482,
	107, 459, 431, 165, 290, 292, 294, 528, 529, 361,
	297, 526, 296, 298, 300, 530, 277, 352, 188, 183,
	289, 273, 181, 278, 40, 279, 205, 280, 281, 541,
	455, 348, 461, 305, 52, 429, 182, 456, 293, 458,
	209, 213, 473, 474, 176, 177, 463, 476, 204, 207,
	208, 251, 345, 346, 43, 538, 263, 477, 211, 203,
	199, 485, 309, 307, 202, 175, 198, 274, 65, 215,
	214, 216, 425, 426, 427, 428, 282, 283, 365, 472,
	195, 184, 353, 168, 23, 480, 258, 460, 378, 284,
	302, 310, 210, 212, 265, 270, 540, 531, 433, 269,
	306, 478, 180, 262, 291, 257, 481, 169, 534, 380,
	285, 163, 299, 475, 484, 64, 393, 174, 166, 248,
	160, 267, 272, 286, 287, 288, 525, 312, 311, 303,
	533, 196, 264, 201, 186, 173, 197, 161, 266, 483,
	394, 605, 351, 412, 194, 191, 268, 241, 479, 462,
	164, 416, 395, 189, 314, 601, 602, 603, 366, 344,
	315, 316, 187, 255, 453, 454, 319, 422, 335, 396,
	432, 403, 397, 222, 223, 323, 465, 467, 206, 604,
	324, 325, 326, 457, 327, 328, 329, 330, 370, 56,
	58, 94, 97, 96, 626, 627, 63, 29, 356, 359,
	391, 398, 337, 606, 537, 334, 338, 339, 360, 25,
	414, 382, 418, 417, 48, 49, 50, 53, 54, 55,
	57, 59, 60, 51, 524, 375, 388, 486, 45, 47,
	385, 27, 362, 413, 435, 333, 415, 446, 46, 444,
	445, 466, 26, 364, 363, 62, 44, 421, 423, 424,
	317, 331, 373, 615, 487, 368, 384, 387, 369, 336,
	358, 389, 67, 66, 381, 616, 376, 374, 332, 542,
	543, 340, 568, 354, 430, 521, 520, 519, 518, 517,
	516, 515, 514, 320, 321, 322, 399, 400, 401, 411,
	404, 405, 406, 407, 408, 409, 410, 449, 450, 617,
	468, 470, 471, 469, 236, 628, 355, 239, 619, 620,
	95, 621, 623, 622, 28, -395, -393, -315, 532, 607,
	377, 531, 534, 371, 351, 625, 375, 259, 320, 321,
	322, 447, -201, -315, 628, -167, 243, 39, -214, -315,
	-167, -82, -15, -14, -159, -160, -214, 238, -323, 24,
	429, -90, 430, 234, 82, 77, -315, -9, -102, -8,
	-109, -80, -157, 434, -321, -315, 320, 320, -321, 238,
	-315, 269, 410, -447, 244, -399, -372, 270, -398, -374,
	-401, -375, 32, 230, 232, 231, 266, 16, 375, 240,
	14, 13, 376, 252, 25, 26, 28, 15, 377, 379,
	29, 380, 383, 384, 385, 42, 388, 389, 259, 85,
	93, 88, 277, -200, -315, -349, -341, 114, -344, -336,
	-337, -339, -490, -484, -334, 82, 141, 142, 149, 115,
	630, -338, -429, 36, 117, 548, 552, 588, 497, -290,
	-291, -292, -293, -294, -295, -315, -485, -483, 88, 98,
	100, 104, 105, 103, 101, 153, 185, 102, 89, 154,
	-160, 85, -506, 558, -309, 581, 594, 595, 596, 597,
	580, 61, -454, -463, 237, -461, 152, 190, 255, 186,
	14, 147, 422, 187, 589, 590, 591, 555, 577, 499,
	559, 569, 584, 550, 551, 553, 545, 546, 547, 549,
	560, 562, 576, -464, 572, 582, 583, 568, 592, 593,
	585, 586, 587, 623, 87, 86, 575, 574, 561, 556,
	557, 563, 544, 554, 564, 565, 573, 578, 579, 359,
	107, 360, 361, 489, 352, 362, 244, 429, 70, 363,
	364, 365, 366, 367, 496, 368, 71, 369, 358, 259,
	412, 370, 189, 206, 501, 500, 502, 493, 490, 488,
	491, 492, 494, 495, 566, 567, 571, -118, -119, 599,
	-558, -283, -559, 6, 7, 8, 9, -560, 154, -549,
	431, 540, 88, 164, 161, -386, 164, 113, 169, 168,
	-386, 166, 323, 265, -363, -150, 349, 412, 327, 94,
	269, -366, -364, 528, -449, 317, 313, 289, 239, 110,
	-151, 249, 248, 108, 489, 237, 386, 308, 56, 58,
	-522, -523, 227, 228, 229, -513, 522, -512, -315, 361,
	96, 97, 27, 238, 372, 265, 467, 465, 466, 468,
	469, 470, 471, -63, -465, -446, 462, 461, -327, 454,
	460, 452, 464, 455, 350, 329, 328, 230, 619, 529,
	523, -305, 396, 432, 486, 487, 373, 433, 473, 475,
	456, 107, 193, 190, 239, 241, 238, 349, 489, 412,
	94, 327, -522, 161, 473, 475, 269, 410, 41, -392,
	422, -391, -393, 474, 485, 86, 87, 472, -305, 107,
	453, 453, -558, -283, -158, -160, -112, -511, 530, 530,
	530, 239, 349, 412, 269, 240, 238, 525, 528, 241,
	489, 237, 320, 372, 265, 327, 94, 166, -448, -519,
	32, -455, 224, 225, 226, 33, 34, -1, 121, 629,
	-341, -341, -6, 632, -6, -341, -315, -315, 156, -220,
	-224, -221, -223, -222, -226, -225, 190, 191, 152, 194,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 207,
	208, 205, 31, 206, 255, 186, 187, 188, 189, 209,
	172, 192, 537, 217, 173, 218, 174, 219, 175, 220,
	176, 177, 221, 178, 181, 182, 183, 184, 180, 155,
	82, 155, 88, -183, 261, -167, -214, 155, 630, -183,
	-558, -176, -177, 11, -214, -296, -315, 431, 124, -90,
	77, -90, 430, 77, -514, -515, -516, -518, 234, 430,
	429, -107, 155, 277, 17, -321, -321, 80, -214, -374,
	269, -399, -372, 36, 79, 156, 242, 156, 79, 82,
	373, 349, 412, 374, 489, 238, 386, 241, 269, 387,
	349, 412, 238, 241, 489, 269, 349, 238, 241, 412,
	269, 387, 452, 453, 241, 27, 378, 381, 382, 453,
	-469, 485, 156, 113, 110, 111, 112, -341, 131, -356,
	124, 125, 126, 127, 128, 129, 130, 138, 137, 148,
	141, 142, 143, 144, 145, 146, 147, 139, 140, 134,
	114, 132, 136, 133, 116, 151, -160, -341, -349, 61,
	-339, -339, -339, -339, -315, -429, -346, -341, 82, 82,
	82, 82, 155, 101, 88, -341, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, -462, 82,
	82, -353, -354, 82, 82, -334, -296, 82, 88, 88,
	82, 82, 82, 88, 82, 82, 82, -354, -354, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, -177, 156, -176, 82, -176, -177,
	-161, -160, 32, 33, 32, 33, 32, 33, 32, 33,
	-561, 616, 82, 98, 626, 222, 478, 539, 167, 168,
	169, -361, 244, -199, -315, -201, 372, 241, 525, 241,
	-151, -361, -361, -361, -361, -361, 240, -361, 24, 238,
	238, 238, 238, -361, 496, 124, 124, 59, -524, 171,
	156, -513, -182, 82, -326, 132, 136, -326, -279, 18,
	24, 267, 267, 267, -326, 307, -569, -570, 17, 134,
	-324, -570, -324, -324, -326, -571, 240, 463, 43, 268,
	267, -178, -179, 22, -178, 457, 453, -416, 458, 459,
	-328, -570, -327, -326, -326, -327, -326, -326, -326, 32,
	238, 241, 489, 327, 620, -569, -569, 31, 31, -447,
	-447, -214, -447, 523, -306, -315, -447, -447, -447, -525,
	243, -555, -554, 476, -557, 478, 161, -393, 161, -393,
	-374, 269, 269, 156, 124, 24, -394, 124, 135, -393,
	-393, -394, -394, -237, 41, -314, 152, -315, 88, -237,
	41, -552, -551, -214, -177, -161, -160, 83, 83, 83,
	533, 533, 533, -447, -447, -447, -447, -447, -449, -447,
	-447, -447, -447, -447, -321, -191, -315, -201, 244, -447,
	-447, -447, -162, -163, 143, -341, -315, -162, -3, -127,
	-126, 118, 119, 121, 610, 367, 609, 613, 607, -393,
	41, -442, 394, 393, -436, -438, 82, -437, 82, -437,
	-437, -437, -437, -437, 82, 82, -439, 82, -439, -439,
	-436, -440, 82, -440, -441, 82, -441, -440, -315, -347,
	-349, -315, 39, -458, 61, -157, 82, 31, 82, -183,
	-315, -341, -459, 61, -157, 82, 31, -177, -120, 39,
	-179, 21, 155, 98, 88, -107, -90, 77, -107, 83,
	156, -517, 104, 105, -520, 204, 196, -315, -105, 88,
	-7, -8, -9, -10, -46, -80, -157, -486, -484, 82,
	32, 421, 79, 17, -400, 238, 489, 372, 265, 241,
	349, -398, -381, -378, -376, -314, -374, -377, -376, -403,
	-296, 453, -121, 436, 435, 319, -341, -341, -341, -341,
	-341, 103, 114, 344, 104, 105, -336, -357, 32, 315,
	316, -337, -337, -337, -337, -337, -337, -337, -337, -337,
	-337, -337, -337, -345, -355, -429, 82, 134, 132, 136,
	133, 116, -339, -339, -337, -337, -239, -314, 152, 83,
	156, -341, -510, -509, 118, -341, -341, -341, -341, -315,
	-507, -508, 503, 504, 505, 506, 507, 508, 509, 510,
	511, 512, 513, 363, 358, 364, 362, 352, 370, 365,
	366, 189, 520, 521, 514, 515, 516, 517, 518, 519,
	-347, -347, -341, -507, -347, -289, 33, 32, -349, -349,
	-349, 83, -341, -521, 342, 341, 343, -180, -315, -347,
	83, 83, 83, 98, -349, -349, -347, -337, -347, -347,
	-347, -347, -508, -289, -289, -289, -289, 143, -349, -349,
	-289, -289, -289, -289, 143, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, 83, 83, 83, 143, -349,
	-178, -119, -467, -466, -341, 41, -120, -179, -562, 617,
	82, -296, -550, 88, 88, 630, 479, 480, 165, 168,
	167, -315, 114, 35, 82, -191, -361, -361, -361, -527,
	-315, -382, -379, -376, -315, -315, -372, -315, -315, -214,
	-361, -361, -361, -361, -214, -248, 53, 54, 55, -376,
	-152, 56, 57, -525, -512, 35, -181, -315, -279, -339,
	-339, -341, -376, 269, -569, -326, -326, -307, -306, -328,
	-323, -328, -328, -279, -324, -326, -326, -341, -328, -324,
	-279, -315, 453, -279, -279, -416, -326, -325, -315, -325,
	-361, -306, -307, -307, -214, -214, -260, -265, -261, -266,
	261, 235, 356, 357, 233, 231, 11, 232, -273, 308,
	-362, 497, -243, -244, 77, 42, -246, 259, 398, 391,
	271, 275, 92, 276, 431, 277, 240, 279, 280, 281,
	296, 298, 251, 282, 283, 284, 422, 285, 160, 297,
	286, 287, 288, 374, -238, 6, 330, 41, 51, 52,
	445, 444, 542, 539, 272, -527, -527, 31, 31, -382,
	-315, -315, -170, -165, -169, -166, -171, -282, -284, -168,
	82, -214, -160, -315, 156, 477, 479, 480, -555, -394,
	-555, -394, 32, 421, -397, 421, 32, -372, -391, 473,
	475, -387, 88, 422, -377, -396, 79, 152, -466, -394,
	-394, -396, -396, 151, 156, -553, 478, 479, 227, -178,
	98, 98, 98, -216, -214, -527, -381, -372, -315, -447,
	-216, -216, -216, -315, -315, 82, 155, 36, -315, -315,
	-315, -278, 156, -277, 17, -316, -315, 35, 88, 155,
	-278, -128, -126, 120, -341, -6, 609, -341, -6, -6,
	-341, -6, -341, -445, 395, 98, 98, -298, 88, -298,
	98, 98, 98, 83, 88, -385, 79, -460, -350, -505,
	599, -185, 83, -180, -503, -504, -180, -184, -315, -458,
	630, 631, -460, -185, 83, -503, -178, 600, -120, -175,
	-174, -341, -315, 24, -107, -90, -515, 155, 156, -181,
	-400, -380, -377, -402, 143, -315, -388, 156, 539, 633,
	86, 242, -541, -540, 413, 83, 156, -470, 243, 496,
	88, 630, 429, 222, 223, 103, 344, 104, 105, -429,
	-349, -345, -339, -339, -337, -337, -343, 256, -343, 113,
	-341, 631, -340, -509, 120, -341, 35, 156, 35, 156,
	80, 155, 83, 83, 17, 17, 83, -341, 83, 83,
	83, 83, 17, 17, -341, 83, 155, 83, 83, 83,
	83, 80, 83, 156, 83, 83, 83, 83, 156, -349,
	-349, -341, -349, 83, 83, 83, -341, -341, -341, -349,
	83, -341, -341, -341, -341, -341, -341, -341, -341, -341,
	-341, -410, 448, -410, -410, 156, 156, 156, 83, -120,
	82, 98, 156, 627, -302, -301, 88, 166, 169, 169,
	168, 24, 36, -200, -202, -203, -204, -205, -206, 134,
	157, 158, 82, -214, -214, -214, -530, 399, -542, 156,
	41, -540, 489, -148, 319, -365, 80, -155, 17, 539,
	-214, -214, -214, -214, -227, 35, 17, -164, -215, -315,
	82, 83, 156, -373, 80, -315, -307, -279, -279, -328,
	-279, -279, 156, 23, -326, -328, -328, -324, 155, -306,
	-435, 35, -182, 156, 21, 261, -213, -312, -210, -212,
	246, -331, -211, 249, -499, 247, 245, 108, 250, 304,
	109, 240, -312, -312, 246, -247, 242, 35, -312, -263,
	240, 347, 304, 247, 21, 261, -262, 240, 109, -315,
	246, 250, 247, 245, -311, 124, -305, 151, 242, 43,
	374, -311, 543, 261, -311, -311, -311, -311, -311, -311,
	-311, 278, 278, -311, -311, -311, -311, -311, -311, -311,
	-311, -311, -311, -311, 161, -311, -311, -311, -311, -311,
	-311, 82, 273, 274, -531, 399, 31, 355, 355, -542,
	31, -156, 349, 31, -285, -286, -287, -288, 68, 72,
	74, 69, 70, 71, 75, 31, 156, -313, -317, 35,
	-315, 88, -313, -160, -165, -170, -313, 82, -554, -556,
	481, 478, 484, -396, -396, 242, 82, 124, -396, -396,
	41, -314, -551, 485, 479, -120, 156, 79, -216, -192,
	-193, -194, -195, -220, -296, 191, 194, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 207, 208, 205, 206,
	255, 186, 187, 188, 189, 209, 172, 192, 537, 173,
	174, 175, 176, 177, 178, 181, 182, 183, 184, 180,
	-315, -201, -279, -163, -165, -315, 88, -315, 143, -279,
	121, -6, 119, -132, -131, -130, 122, 607, 613, 121,
	121, 121, 83, 83, 83, 156, 83, 83, 83, 156,
	83, 156, -473, 458, 40, 156, 82, 83, 156, 61,
	156, 124, 83, 156, -341, 83, 61, -120, 88, 156,
	-172, 37, 38, 155, 431, -315, -484, 83, -402, 156,
	242, 155, 155, -378, 377, -314, -380, 21, 539, -296,
	39, -302, 124, 630, -315, 83, -343, -343, 113, -339,
	-336, 83, 121, -341, 119, -218, -220, 393, 394, -341,
	-218, -219, -225, 152, 190, 255, 189, 188, 186, 393,
	394, -237, -315, -341, -341, 83, -341, -341, 17, -315,
	-237, -337, -341, -177, -177, 83, 83, -409, -410, -409,
	-409, 83, 83, 83, 83, -409, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 82, 98, 100, 98,
	100, -466, -563, 63, 615, 62, 421, 103, 309, 156,
	98, 88, 631, 156, 124, 169, -543, 313, 349, 385,
	83, 156, -296, -192, -182, 82, -182, -533, 460, 401,
	411, -311, -333, -332, 351, 42, -452, 422, 407, 408,
	-379, 269, -315, -539, 95, 124, 79, 334, 338, 339,
	335, 336, 337, -359, -360, -358, -362, -527, 82, 82,
	-157, 35, 82, 82, 35, -430, 324, -220, -214, -164,
	-315, 17, 156, -526, 155, -1, -315, -372, -326, -279,
	-341, -341, -279, -326, -326, -328, -315, -430, -220, 35,
	-261, 235, 232, -406, 306, 307, -407, -420, 309, -422,
	82, -217, -296, -211, -498, -499, -361, -315, 109, -498,
	109, 82, -217, -296, -296, -264, -325, -296, -315, -315,
	-315, -315, -269, -268, -296, -271, 32, -272, -315, -315,
	-315, -315, 109, -315, 109, -242, 41, 48, 49, 50,
	-311, -311, 193, -245, 41, 421, 423, 424, -271, 98,
	98, 98, 98, 88, 88, 88, -311, -311, 98, 88,
	-317, 88, -500, 168, 45, 46, 98, 98, 98, 98,
	41, 88, -250, 41, 289, 293, 290, 291, 292, 88,
	98, 41, 98, 41, 98, 41, -315, 82, -501, -502,
	88, -533, -311, 355, -393, 124, -333, -538, 319, -149,
	92, 32, -186, 235, 232, -527, -384, -383, -296, -169,
	-169, -169, -169, 68, 68, 68, 73, 68, 73, 68,
	-287, -384, -171, -182, -317, 83, -548, -547, -546, -544,
	76, 243, 77, -347, 478, 482, 483, -380, -329, 88,
	-387, -190, 24, -214, -214, -451, 299, 300, 83, 156,
	-220, -281, 19, 155, -281, 117, -6, -128, -130, -341,
	-6, -341, 609, 367, 610, 88, 98, 98, -481, 442,
	437, 439, 109, -350, -468, -467, 61, -157, -180, -460,
	-504, -466, -315, 631, 61, -157, -460, -190, -473, -174,
	-173, 44, -315, 98, 17, -377, -372, 143, 143, -315,
	378, -388, 88, 400, 88, 238, 631, 88, -302, -336,
	-341, 83, -228, 177, 176, -228, 35, 83, 83, -437,
	-437, -436, -439, -436, -228, -228, 83, 83, 24, 83,
	83, 83, -341, 83, 83, 156, -456, 498, -457, 570,
	-409, -409, -409, -409, -409, -409, -409, -409, -409, -409,
	-409, -409, -409, -409, -409, -409, -352, -351, 261, 443,
	622, 622, 443, 622, 622, 83, 156, -507, 156, -301,
	88, -315, 88, 88, -204, -220, 83, 35, -207, -208,
	-209, -217, -210, -212, 35, -534, 92, -528, 88, -315,
	-535, 92, 402, 154, 353, 41, 403, 404, 419, 348,
	98, 98, 409, -529, -315, -156, -537, 52, 124, 88,
	-214, -358, -305, 151, 280, 327, -276, -275, -315, 88,
	-207, -157, -207, -207, -157, -431, 326, 21, 98, 142,
	-183, 80, 155, -165, -215, -315, 143, 83, -279, -279,
	-279, -326, -431, -157, -418, 310, 82, -416, 82, -416,
	109, 335, -423, -421, 261, -267, 45, 47, -220, -496,
	-315, -494, -496, -315, -494, -494, -361, -341, -267, -217,
	242, 31, 232, -270, 332, 333, 338, -389, 305, 114,
	-389, 156, -172, 156, -315, -237, -237, 31, 88, 88,
	-216, 83, 156, 124, -534, -528, 124, -394, 88, -535,
	-539, 124, 88, 156, -186, -186, -279, 156, 124, -188,
	-187, 79, 80, -189, 79, -187, 68, 68, -279, -546,
	-545, 24, -499, -499, -499, 83, 83, 15, -194, 41,
	-280, 20, 21, 143, -280, 121, 119, 121, 121, -315,
	83, 83, -443, 601, -477, -479, 437, 21, 21, 15,
	243, 83, -460, -460, -481, 45, 46, -372, -388, 422,
	-214, 156, 631, -218, -341, 83, -341, 83, 88, 83,
	88, -177, 21, 83, 156, 83, 83, 83, 156, 83,
	83, -341, 83, -507, 236, -157, 83, 156, -157, 88,
	-532, 413, 88, 88, 98, 41, 98, 154, 405, -453,
	-149, -536, 92, 124, 630, 82, -311, -311, -311, -315,
	83, 156, -311, -311, 83, 83, 83, -235, 539, -432,
	260, 98, 142, 98, 142, 98, -313, -165, -315, -279,
	-526, 155, -279, -432, -408, 311, 98, -337, 82, -337,
	82, -417, 308, 82, 83, 156, -315, -296, -232, -231,
	-229, 103, 114, 41, 391, -230, 92, 151, 294, 297,
	296, 272, 295, -259, -330, 79, 397, 332, 333, -362,
	601, 527, 245, 108, 109, 379, -331, 82, 82, 80,
	314, 82, 82, -496, 83, -267, -296, 41, -270, 41,
	345, 305, -268, -315, 151, -237, 83, -502, 88, -532,
	88, -396, -537, 88, -527, -177, -383, -466, -341, 82,
	-341, 82, 68, 11, 19, -334, -341, -349, 244, -6,
	610, 367, -252, 602, 88, 21, 88, -475, 88, -384,
	-443, -123, -249, -305, 277, 83, 83, 83, -409, -409,
	-412, -411, -415, 443, 306, 451, -349, 88, 88, 83,
	83, -196, -220, -153, 539, -235, -209, -153, 21, 539,
	352, 41, 98, 41, 406, 124, 104, 105, -303, -304,
	88, -367, -369, -296, 82, -237, -239, 88, -275, -334,
	-334, -233, -157, 35, -234, -273, -362, -122, -121, -233,
	82, -433, 160, 98, 142, 98, 98, -279, -279, -433,
	-422, 21, 83, -403, 83, -403, 82, 124, -337, -421,
	-424, 61, -229, 103, -337, 88, -239, -240, 41, 293,
	289, 124, 124, -241, 41, 273, 274, -251, 82, 304,
	15, 193, 82, 109, 109, -214, -367, -367, -497, 334,
	335, 336, 340, 338, 339, 337, -497, -367, -367, 82,
	-390, -389, -337, -311, -311, 151, -536, -178, -181, -495,
	-315, 245, 21, 21, -315, -315, -299, 603, 98, 88,
	439, -252, -444, 604, -471, -416, -237, 124, 83, -414,
	116, 405, 409, -335, -338, 98, 100, 185, 154, 83,
	83, 538, -154, 60, 485, 88, 400, 88, 352, 88,
	631, 156, 124, 83, 156, -436, -341, -404, 261, -157,
	156, -273, -305, -123, -404, -236, -274, -315, 88, -450,
	168, 325, 539, 98, 142, 98, -177, -434, 168, 325,
	-407, 83, 83, 83, -403, 98, 83, -428, -425, 82,
	-273, 263, 134, 88, 88, 98, 82, -461, 31, 88,
	-368, 82, 83, 83, 83, 83, -367, 98, -237, -311,
	83, 83, 156, 82, 21, -299, 88, -480, 442, -474,
	-472, 437, 438, 439, 440, 88, -413, -414, 409, -335,
	-338, 599, 449, 449, 449, -198, -315, 304, 422, -304,
	88, -370, -369, -172, 83, -405, 313, 21, -273, -311,
	-405, 83, 156, -311, -311, 325, 98, 142, 98, -178,
	325, -419, 312, 83, -428, -273, -427, -426, 311, 264,
	82, 83, -341, -353, -311, 83, -254, -253, 535, -367,
	-370, 80, -370, 80, -370, 80, -370, 80, 83, -237,
	-315, 245, -300, -315, -475, -482, 243, -478, -479, 441,
	-472, 21, 439, 21, 21, -124, 156, 113, 450, 450,
	450, -197, 35, 444, 378, -371, 251, 345, 346, 92,
	539, 332, 333, -172, 21, -406, -237, -274, -334, -334,
	98, 98, 83, 156, -315, 260, 82, -348, -342, -341,
	260, 83, -315, -258, -256, -257, 79, 456, 302, 303,
	83, -497, -497, -497, -497, -259, 83, 156, -489, 82,
	98, -477, -476, -478, 21, -475, 21, -475, -475, 446,
	-413, 88, -311, -311, 88, 88, 331, -296, 82, -418,
	-426, -425, -348, 83, 156, -389, -257, 79, -256, 79,
	16, 15, -370, -370, -370, -370, -315, -493, 31, 83,
	-488, -487, -297, -483, -315, 442, 443, 88, -475, 124,
	-566, -565, 621, 98, 98, -315, -403, -408, 83, -342,
	-255, 299, 300, 31, 168, -255, -492, -491, -490, 83,
	156, 155, 88, 88, 83, -422, 103, 41, 301, 156,
	124, -487, -315, -491, 41, -341, 155, -315,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 0,
	266, 267, 268, 865, 866, 867, 868, 869, 870, 871,
	0, 0, 0, 0, 623, 624, 0, 589, 0, 0,
	0, 0, 0, 0, 477, 478, 479, 480, 481, 482,
	483, 484, 485, 486, 487, 488, 489, 490, 491, 492,
	493, 494, 495, 496, 497, 498, 499, 500, 501, 502,
	503, 504, 505, 506, 507, 361, 362, 363, 364, 365,
	366, 367, 368, 0, 291, 287, 212, 213, 214, 215,
	216, 298, 299, 454, 0, 0, 0, 0, 706, -2,
	59, 0, 280, 0, 271, 271, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, -2,
	636, 0, 590, 591, 592, 593, 594, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 350, 351, 352,
	346, 347, 349, 348, -2, 0, 636, 0, 0, 0,
	714, 0, 0, 0, 0, 0, 757, 779, 23, 0,
	7, 9, 10, 11, 12, 13, 14, 15, 16, 17,
	18, 0, 0, 19, 0, 19, 0, 0, 0, 1268,
	1269, 1270, 1271, 2049, 2019, -2, 1792, 1769, 1944, 2078,
	2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088,
	2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098,
	2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
	2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118,
	2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 1726,
	1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736,
	1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
	1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756,
	1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766,
	1767, 1768, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777,
	1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787,
	1788, 1789, 1790, 1791, 1793, 1794, 1795, 1796, 1797, 1798,
	1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808,
	1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818,
	1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828,
	1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838,
	1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848,
	1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1859,
	1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
	1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879,
	1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889,
	1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899,
	1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909,
	1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919,
	1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929,
	1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939,
	1940, 1941, 1942, 1943, 1945, 1946, 1947, 1948, 1949, 1950,
	1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960,
	1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
	1971, 1972, 1973, 1974, 1975, -2, 1977, 1978, 1979, 1980,
	1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,
	1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
	2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
	2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2020, 2021,
	2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
	2032, 2033, 2034, -2, -2, -2, 2038, 2039, 2040, 2041,
	2042, 2043, 2044, 2045, 2046, 2047, 2048, 2050, 2051, 2052,
	2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062,
	2063, 2064, 2065, 2066, 2067, 0, 264, 262, 1739, 1769,
	1792, 1846, 1857, 1858, 1892, 1944, 1976, 2019, 2035, 2036,
	2037, 2049, 0, 889, 0, 684, 0, 0, 689, 1218,
	684, 292, 625, 626, 714, 740, 587, 0, 328, 0,
	1783, 332, 2026, 0, 0, 0, 584, 322, 323, 324,
	325, 326, 327, 0, 0, 864, 0, 0, 318, 0,
	286, 1848, 2048, 0, 0, 0, 0, 0, 156, 1000,
	158, 1002, 162, 169, 0, 0, 174, 175, 178, 179,
	180, 181, 182, 0, 186, 0, 188, 191, 0, 193,
	194, 0, 197, 198, 199, 0, 209, 210, 211, 1003,
	1004, 1005, -2, 87, 887, 1697, 1584, 0, 1591, 1604,
	1615, 1348, 1349, 1350, 1351, 0, 0, 0, 0, 0,
	0, 1359, 1360, 0, 1388, 2082, 2123, 2124, 0, 1368,
	1369, 1370, 1371, 1372, 1373, 96, 108, 109, 1637, 1638,
	1639, 1640, 1641, 1642, 1643, 0, 1645, 1646, 1647, 1555,
	1335, 1268, 0, 2091, 0, 2113, 2118, 2119, 2120, 2121,
	2112, 0, 0, 1540, 0, 1530, 0, 0, -2, -2,
	0, 0, 1917, -2, 2125, 2126, 2127, 2088, 2109, 2117,
	2092, 2093, 2116, 2084, 2085, 2086, 2079, 2080, 2081, 2083,
	2095, 2097, 2108, 0, 2104, 2114, 2115, 2024, 0, 0,
	0, 0, 0, 2065, 110, 111, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1551, -2, -2, 1554, -2, 1557, -2,
	-2, -2, -2, 1562, 1563, -2, 1565, -2, -2, -2,
	-2, -2, -2, -2, 1542, 1543, 1544, 1545, 1534, 1535,
	1536, 1537, 1538, 1539, -2, -2, -2, 740, 815, 0,
	740, 0, 715, 762, 765, 768, 771, 718, 0, 0,
	60, 61, 0, 281, 282, 270, 272, 0, 276, 0,
	269, 1036, 0, 0, 0, 0, 1036, 1036, 1036, 1036,
	1036, 0, 1036, 0, 0, 0, 0, 0, 1036, 0,
	922, 1007, 1008, 1009, 1034, 1035, 1106, 0, 0, 0,
	641, 637, 638, 639, 640, 728, 0, 730, 733, 564,
	564, 788, 511, 0, 0, 0, 564, 0, 525, 517,
	0, 0, 0, 564, 0, 0, 735, 735, 0, 567,
	574, 564, 564, -2, 564, 564, 564, 0, 0, 1048,
	531, 532, 533, 517, 517, 536, 537, 538, 548, 549,
	575, 1721, 0, 0, 454, 454, 0, 454, 0, 454,
	454, 454, 643, 1887, 1790, 1863, 1848, 2048, 0, 237,
	1917, 242, 0, 1791, 1810, 0, 0, 1828, 0, -2,
	0, 308, 740, 0, 0, 714, 0, 0, 0, 0,
	0, 454, 454, 454, 454, 454, 1105, 454, 454, 454,
	454, 454, 0, 0, 0, 454, 454, 454, 0, 0,
	780, 781, 776, 777, 778, 782, 783, 5, 6, 19,
	0, 0, 0, 0, 0, 0, 66, 65, 0, 1698,
	1716, 1650, 1651, 1652, 1703, 1654, 1707, 1707, 1707, 1707,
	1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1707,
	1707, 0, 0, 1696, 1674, 1705, 1705, 1705, 1703, 1700,
	1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664,
	1665, 1666, 1667, 1668, 1710, 1710, 1713, 1713, 1710, 0,
	1580, 0, 0, 0, 0, 684, 688, 0, 0, 0,
	740, -2, 0, 0, 588, 329, 1272, 0, 0, 333,
	0, 334, 0, 0, 0, 353, 0, 356, 341, 342,
	343, 337, 0, 136, 0, 320, 321, 0, 0, 288,
	0, 0, 0, 455, 0, 0, 0, 0, 0, 0,
	166, 163, 170, 173, 183, 190, 0, 202, 204, 207,
	164, 171, 176, 177, 184, 205, 165, 167, 168, 172,
	206, 208, 185, 189, 203, 187, 192, 195, 196, 201,
	0, 137, 0, 0, 0, 0, 0, 1590, 0, 0,
	1623, 1624, 1625, 1626, 1627, 1628, 1629, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 1584, 0, 0,
	1354, 1355, 1356, 1357, 0, 1361, 0, 1389, 0, 0,
	0, 0, 0, 1644, 1648, 0, 1580, 1580, 0, 1580,
	1576, 0, 0, 0, 0, 0, 0, 1580, 1513, 0,
	0, 1515, 1531, 0, 0, 1517, 1518, 0, 1521, 1522,
	1580, 0, 1580, 1526, 1580, 1580, 1580, 1509, 1510, 0,
	1576, 1576, 1576, 1576, 0, 0, 1576, 1576, 1576, 1576,
	1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
	0, 0, 0, 0, 735, 0, 741, 0, -2, 0,
	759, 761, 763, 764, 766, 767, 769, 770, 772, 773,
	720, 0, 0, 62, 0, 0, 0, 0, 274, 0,
	279, 0, 0, 0, 886, 0, 0, 1036, 1036, 1036,
	923, 0, 0, 0, 0, 0, 0, 0, 0, 1036,
	1036, 1036, 1036, 0, 1054, 0, 0, 0, 643, 642,
	0, 729, 0, 0, 788, 0, 0, 509, 510, 0,
	0, 517, 564, 564, 523, 524, 519, 518, 570, 571,
	567, 0, 567, 567, 788, 0, 542, 543, 544, 564,
	564, 550, 736, 0, 551, 552, 567, 0, 572, 573,
	788, 0, 0, 788, 788, 0, 560, 561, 562, 564,
	0, 0, 1036, 0, 580, 519, 519, 1722, 1723, 0,
	0, 1045, 0, 0, 0, 583, 0, 0, 0, 0,
	644, 217, 220, 0, 223, 0, 1887, 0, 1887, 0,
	230, 0, 0, 0, 0, 0, 0, 260, 261, 0,
	0, 0, 0, 251, 254, 1212, 1213, 997, 998, 255,
	256, 300, 301, 0, 735, 758, 760, 754, 755, 756,
	0, 0, 0, 0, 0, 0, 0, 0, 454, 0,
	0, 0, 0, 0, 619, 0, 902, 621, 0, 0,
	0, 0, 796, 790, 792, 859, 96, 796, 8, 83,
	80, 0, 19, 0, 0, 19, 19, 0, 19, 265,
	0, 1719, 1717, 1718, 1653, 1704, 0, 1679, 0, 1680,
	1681, 1682, 1692, 1693, 0, 0, 1675, 0, 1676, 1677,
	1678, 1669, 0, 1670, 1671, 0, 1672, 1673, 263, 0,
	1581, 890, 0, 662, 676, 657, 0, 665, 0, 0,
	1219, 0, 645, 676, 647, 0, 665, 735, 712, 0,
	690, 0, 0, 330, 0, 338, 335, 0, 339, 0,
	0, 355, 357, 358, 359, 344, 345, 585, 316, 317,
	309, 310, 311, 312, 313, 314, 315, 319, 106, 0,
	289, 290, 0, 0, 0, 150, 151, 152, 153, 154,
	155, 157, 141, 608, 610, 989, 1001, 0, 992, 0,
	160, 200, 133, 0, 0, 0, 1585, 1586, 1587, 1588,
	1589, 1594, 0, 1596, 1598, 1600, 1602, 0, 1620, -2,
	-2, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344,
	1345, 1346, 1347, 1605, 1618, 1619, 0, 0, 0, 0,
	0, 0, 1616, 1616, 1611, 0, 1374, 1214, 1215, 1352,
	0, 0, 1386, 1390, 0, 0, 0, 0, 0, 97,
	1575, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
	1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498,
	1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
	0, 0, 1584, 0, 0, 0, 1577, 1578, 0, 0,
	0, 1468, 0, 0, 1474, 1475, 1476, 0, 671, 0,
	1541, 1514, 1532, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	814, 816, 0, 680, 682, 683, 709, 690, 716, 0,
	0, 0, 58, 63, 0, 1073, 283, 284, 0, 0,
	278, 0, 0, 0, -2, 0, 0, 0, 0, 0,
	937, 452, 983, 0, 0, 0, 999, 1024, 1032, 0,
	0, 0, 0, 0, 1079, 924, 929, 930, 931, 925,
	926, 932, 933, 0, 731, 0, 0, 828, 508, 565,
	566, 789, 514, 1848, 519, 788, 788, 526, 520, 527,
	569, 528, 529, 530, 567, 788, 788, 737, 564, 567,
	553, 568, 567, 556, 557, 0, 563, 576, 581, 577,
	0, 579, 534, 535, 1081, 733, 371, 372, 373, 375,
	0, 423, 423, 423, 406, 423, 0, 0, 394, 1724,
	0, 0, 0, 0, 403, 1724, 0, 0, 1724, 1724,
	1724, 1724, 1724, 1724, 1724, 0, 0, 1724, 1724, 1724,
	1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 0, 1724,
	1724, 1724, 1724, 1724, 1198, 1724, 0, 1046, 413, 414,
	415, 416, 421, 422, 0, 449, 0, 0, 0, 452,
	0, 971, 801, 0, 802, 803, 799, 830, 854, 854,
	0, 854, 834, 1218, 0, 0, 228, 229, 218, 0,
	219, 0, 231, 232, 0, 234, 235, 236, 243, 1790,
	1863, 238, 240, 0, 0, 244, 257, 258, 259, 0,
	0, 249, 250, 0, 0, 303, 304, 306, 0, 690,
	1049, 1050, 1051, 605, 1216, 606, 607, 611, 0, 0,
	614, 615, 616, 617, 618, 904, 0, 0, 976, 977,
	978, 788, 0, 797, 0, 793, 860, 0, 862, 0,
	788, 0, 81, 19, 0, 74, 71, 0, 0, 0,
	0, 0, 1699, 1649, 1720, 0, 0, 0, 1701, 0,
	0, 0, 0, 64, 692, 652, 0, 656, 673, 0,
	677, 0, 0, 669, 661, 666, 0, 0, 686, 653,
	0, 1220, 646, 0, 0, 651, 690, 0, 713, 742,
	743, 746, 1273, 0, 340, 336, 354, 0, 0, 0,
	0, 144, 986, 0, 145, 149, 139, 0, 0, 0,
	991, 0, 988, 993, 0, 159, 0, 0, 134, 135,
	1064, 1073, 0, 0, 0, 1595, 1597, 1599, 1601, 1603,
	0, 1606, 1616, 1616, 1612, 0, 1607, 0, 1609, 0,
	1585, 1358, 0, 1391, 0, 0, 0, 0, 0, 0,
	0, 0, 1458, 1459, 0, 0, 1463, 0, 1465, 1466,
	1467, 1469, 0, 0, 0, 1473, 0, 1512, 1533, 1516,
	1519, 0, 1523, 0, 1525, 1527, 1528, 1529, 0, 740,
	740, 0, 0, 1430, 1430, 1430, 0, 0, 0, 0,
	1430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1375, 0, 1376, 1377, 0, 0, 0, 817, 710,
	0, 0, 0, 0, 0, 1071, 0, 285, 273, 275,
	0, 0, 1037, 0, 0, 892, 893, 895, 0, 898,
	899, 900, 904, 733, 0, 733, 944, 1724, 456, 0,
	0, 985, 0, 960, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 630, 634,
	23, 734, 0, 512, 0, 513, 564, 521, 522, 788,
	545, 546, 0, 0, 788, 564, 564, 567, 0, 578,
	1083, 0, 0, 1045, 1149, 1117, 384, 0, 1229, 1230,
	424, 0, 1236, 1245, 1036, 1305, 0, 1245, 0, 0,
	1247, 1248, 0, 0, 0, 0, 407, 408, 0, 393,
	0, 0, 0, 0, 0, 0, 392, 0, 0, 434,
	0, 0, 0, 0, 0, 1725, 1724, 1724, 0, 401,
	402, 0, 405, 0, 0, 0, 0, 0, 0, 0,
	0, 1724, 1724, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1189, 0, 0, 0, 0, 0,
	0, 0, 1204, 1205, 944, 1724, 0, 0, 0, 456,
	958, 967, 0, 0, 0, 0, 0, 0, 821, 0,
	0, 820, 0, 0, 0, 0, 0, 733, 855, 0,
	857, 858, 832, -2, 0, 801, 837, 1580, 221, 222,
	0, 0, 227, 245, 247, 0, 0, 0, 246, 248,
	252, 253, 302, 305, 307, 752, 0, 0, 1107, 0,
	905, 906, 908, 909, 0, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1774, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	903, 622, 786, 791, 798, 861, 863, 97, 794, 786,
	0, 84, 19, 83, 75, 76, 0, 19, 0, 0,
	0, 0, 1709, 1708, 1694, 0, 1695, 1706, 1711, 0,
	1714, 0, 696, 0, 0, 676, 678, 0, 0, 676,
	0, 0, 685, 0, 0, 0, 676, 752, 692, 0,
	749, 747, 748, 0, 0, 586, 107, 360, 0, 0,
	0, 0, 0, 609, 0, 990, 141, 0, 0, 161,
	0, 0, 0, 1073, 1068, 1579, 1608, 1610, 0, 1617,
	1613, 1353, 1362, 1387, 0, 0, 1393, 1405, 1405, 0,
	0, 0, 1396, 1707, 1707, 1399, 1703, 1705, 1703, 1405,
	1405, 0, 98, 0, 0, 1464, 0, 0, 0, 672,
	0, 0, 0, 1426, 1428, 1430, 1430, 1437, 1431, 1438,
	1439, 1430, 1430, 1430, 1430, 1444, 1430, 1430, 1430, 1430,
	1430, 1430, 1430, 1430, 1430, 1430, 1424, 0, 0, 1638,
	1639, 681, 0, 0, 723, 724, 725, 726, 727, 0,
	0, 53, 54, 1073, 0, 277, 55, 56, 0, 0,
	0, 897, 0, 0, 0, 1222, 0, 948, 945, 946,
	947, 0, 980, 457, 458, 459, 460, 0, 0, 0,
	984, 0, 971, 953, 0, 0, 0, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, -2, 1040, 0, 0, 0, 1222,
	1059, 0, 1222, 1222, 0, 1091, 0, 1080, 684, 0,
	-2, 0, 0, 632, 0, 0, 829, 515, 788, 539,
	738, 739, 554, 788, 788, 564, 582, 1091, 1082, 0,
	374, 423, 0, 1137, 0, 0, 1143, 0, 1150, 377,
	0, 425, 0, 1235, 1262, 1246, 1262, 1306, 1262, 1262,
	1036, 0, 425, 0, 0, 395, 431, 0, 0, 0,
	0, 0, 391, 428, 746, 378, 380, 381, 382, 432,
	433, 435, 0, 437, 438, 397, 409, 410, 411, 412,
	0, 0, 0, 404, 417, 418, 419, 420, 379, 1166,
	1167, 1168, 1171, 1172, 1173, 1174, 0, 0, 1177, 1178,
	1179, 1180, 1181, 1259, 1260, 1261, 1182, 1183, 1184, 1185,
	1186, 1187, 1188, 1206, 1207, 1208, 1209, 1210, 1211, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 0, 0, 1201,
	0, 948, 0, 0, 0, 0, 980, 960, 0, 970,
	0, 972, 973, 0, 0, 654, 788, 295, 0, 824,
	818, 0, 807, 822, 823, 810, 0, 812, 0, 808,
	809, 788, 800, 831, 856, 833, 836, 838, 839, 845,
	0, 0, 0, 0, 224, 225, 226, 233, 0, 476,
	239, 708, 0, 1217, 612, 613, 1108, 1109, 620, 0,
	910, 784, 0, 0, 784, 79, 82, 0, 77, 0,
	0, 0, 0, 69, 67, 1702, 0, 0, 698, 121,
	0, 0, 0, 674, 0, 679, 676, 660, 670, 659,
	667, 668, 687, 1221, 676, 650, 649, 711, 696, 744,
	745, 0, 1274, 331, 0, 987, 141, 146, 147, 148,
	142, 140, 994, 0, 996, 0, 1066, 0, 0, 1614,
	1392, 1363, 1394, 1406, 1407, 1395, 0, 1365, 1366, 1397,
	1398, 1400, 1401, 1402, 1403, 1404, 1367, 1460, 0, 1462,
	1470, 1471, 0, 1520, 1524, 0, 0, 0, 0, 0,
	1435, 1436, 1440, 1441, 1442, 1443, 1445, 1446, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 1454, 740, 1425, 0, 0,
	0, 0, 0, 0, 0, 721, 0, 0, 0, 1072,
	1074, 57, 885, 888, 894, 896, 0, 0, 0, 1223,
	1224, 1226, 1227, 1228, 0, 921, 0, 0, 939, 940,
	950, 0, 0, 0, 462, 463, 0, 0, 0, 475,
	471, 472, 473, 453, 979, 967, 956, 0, 0, 966,
	0, 1041, 1724, 1724, 1724, 0, 0, 1151, 1724, 1724,
	0, 1061, 0, 0, 1155, 1094, 0, 0, 1085, 0,
	854, 0, 0, 788, 631, 634, 635, 732, 516, 558,
	555, 788, 1094, 370, 1115, 0, 0, 0, 0, 0,
	1147, 0, 0, 1119, 0, 396, 426, 0, -2, 0,
	1263, 0, 1249, 1263, 0, 0, 1262, 0, 385, 425,
	0, 0, 0, 439, 443, 444, 0, 441, 1301, 0,
	442, 0, 430, 0, 436, 1169, 1170, 0, 1175, 1176,
	0, 1200, 0, 0, 445, 0, 0, 0, 446, 451,
	953, 0, 968, 0, 974, 975, 740, 0, 0, 804,
	825, 0, 0, 805, 0, 806, 811, 813, 294, 840,
	0, 0, 842, 843, 844, 835, 241, 753, 907, 0,
	774, 0, 0, 795, 775, 0, 19, 0, 0, 72,
	1712, 1715, 700, 0, 697, 122, 0, 0, 0, 0,
	664, 675, 658, 648, 698, 750, 751, 143, 138, 995,
	1076, 0, 1067, 0, 0, 1472, 0, 1430, 1427, 1430,
	1429, 1421, 0, 1378, 0, 1380, 1381, 1382, 0, 1384,
	1385, 0, 719, 0, 0, 927, 1155, 0, 927, 949,
	938, 0, 981, 982, 0, 464, 465, 0, 468, 474,
	951, 952, 0, 0, 964, 0, 0, 0, 0, 1033,
	1047, 0, 0, 0, -2, 0, -2, 1058, 0, 1100,
	0, 1092, 0, 1084, 0, 1087, 788, 788, -2, 628,
	633, 0, 559, 1100, 1117, 0, 1138, 0, 0, 0,
	0, 0, 0, 0, 1118, 0, 1131, 427, 1264, -2,
	1277, 1279, 0, 1046, 1282, 1283, 0, 0, 0, 0,
	0, 0, 1327, 1291, 0, 0, 1295, 1296, 1297, 0,
	0, 1300, 0, 1632, 1633, 0, 1304, 0, 0, 0,
	0, 0, 0, 0, 1243, 386, 387, 0, 389, 390,
	1724, 1302, 429, 383, 1724, 399, 1199, 1202, 1203, 450,
	447, 448, 956, 959, 655, 735, 296, 297, 826, 0,
	819, 849, 846, 0, 0, 911, 785, 787, 73, 78,
	0, 0, 702, 0, 699, 0, 693, 695, 132, 663,
	700, 94, 124, 0, 0, 1364, 1461, 1511, 1433, 1434,
	0, 1422, 0, 1416, 1417, 1418, 1423, 0, 0, 722,
	717, 0, 913, 920, 934, 1052, 1225, 919, 0, 0,
	461, 466, 0, 469, 470, 0, 954, 955, 0, 962,
	0, 0, 1020, 1703, 0, 1042, 1043, 1044, 1152, 1153,
	1154, 1110, 1060, 0, -2, 1163, 0, 1056, 1076, 1110,
	0, 1088, 0, 1095, 0, 1093, 1086, 740, 629, 1097,
	376, 1149, 1139, 0, 1141, 0, 0, 0, 0, 1120,
	-2, 0, 1278, 1280, 1281, 1284, 1285, 1286, 1332, 1333,
	1334, 0, 0, 1289, 1329, 1330, 1331, 1290, 0, 0,
	0, 0, 0, 1630, 1631, 1325, 0, 0, 1250, 1252,
	1253, 1254, 1255, 1256, 1257, 1258, 1251, 0, 0, 0,
	1242, 1244, 388, 0, 0, 1724, 969, 293, 0, 0,
	850, 852, 847, 848, 68, 70, 85, 0, 701, 123,
	0, 702, 86, 0, 115, 0, 1077, 0, 1432, 1419,
	0, 0, 0, 0, 0, 1634, 1635, 1636, 0, 1379,
	1383, 0, 0, 935, 936, 941, 0, 943, 467, 957,
	961, 964, 0, 1011, 0, 746, 0, 1112, 0, 1062,
	1045, 1165, 1724, 1063, 1112, 0, 1157, 1724, 1724, 1078,
	0, 1090, 0, 1102, 0, 1096, 735, 369, 0, 1099,
	1135, 1140, 1142, 1144, 0, 1148, 1146, 1121, -2, 0,
	1129, 0, 0, 1287, 1288, 0, 0, 1530, 1724, 0,
	1320, 0, 1011, 1011, 1011, 1011, 0, 440, 398, 0,
	827, 841, 0, 0, 0, 691, 95, 112, 0, 125,
	126, 0, 0, 0, 0, 1069, 0, 1408, 0, 0,
	0, 1412, 1413, 1414, 1415, 0, 912, 0, 942, 963,
	965, 1010, 1021, 1022, 746, 1055, 0, 1149, 1164, 0,
	1057, 1156, 0, 0, 0, 1089, 1101, 0, 1104, 627,
	1098, 1116, 0, 1145, 1122, 1130, 0, 1125, 0, 0,
	0, 1328, 0, 1294, 0, 1299, 1308, 1321, 0, 0,
	1231, 0, 1233, 0, 1237, 0, 1239, 0, 0, 400,
	851, 853, 0, 704, 694, 99, 0, 121, 118, 0,
	127, 0, 0, 0, 0, 1065, 0, 0, 1409, 1410,
	1411, 0, 914, 915, 928, 1012, 1724, 1724, 0, 0,
	0, 1018, 1019, 1023, 0, 1137, 1169, 1158, 1159, 1160,
	1103, 1136, 1124, 0, -2, 1132, 0, 0, 1582, 1592,
	1593, 1292, 1298, 1307, 1309, 1310, 0, 1322, 1323, 1324,
	1326, 1011, 1011, 1011, 1011, 1241, 703, 0, 88, 0,
	0, 116, 117, 119, 0, 128, 0, 130, 131, 0,
	1420, 916, 0, 0, 1015, 1016, 0, 1113, 0, 1115,
	1126, -2, 0, 1134, 0, 1293, 1311, 0, 1312, 0,
	0, 0, 1232, 1234, 1238, 1240, 705, 1075, 0, 100,
	0, 102, 104, 105, 1265, 113, 114, 120, 129, 0,
	901, 917, 0, 1013, 1014, 1017, 0, 1117, 1133, 1583,
	1313, 1315, 1316, 0, 0, 1314, 89, 90, 0, 101,
	0, 0, 1070, 918, 1114, 1111, 1317, 1319, 1318, 0,
	0, 103, 1266, 91, 92, 93, 0, 1267,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 115, 3, 3, 3, 146, 138, 3,
	82, 83, 143, 141, 156, 142, 155, 144, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 632, 629,
	125, 124, 126, 3, 633, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 148, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 630, 137, 631, 149,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 116, 117, 118, 119, 120, 121, 122, 123, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 139,
	140, 145, 147, 150, 151, 152, 153, 154, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:801
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:808
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:814
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:822
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:828
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:832
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:847
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:851
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:857
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:862
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:866
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:898
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:906
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option)
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:915
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option)
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:926
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Obeject:     yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:936
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:946
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:959
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:979
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:985
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:992
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1000
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1006
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1015
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1025
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1033
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1041
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1049
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1059
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1067
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1077
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1084
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1093
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1103
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1107
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1113
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1117
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1123
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1132
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1142
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1146
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1152
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1161
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1165
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1171
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1192
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1205
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1212
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1216
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1222
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1226
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1232
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1239
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1247
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1251
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1265
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1269
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1273
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1278
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1282
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1286
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1292
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1301
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1312
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1316
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1322
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1326
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1332
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1336
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1342
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1366
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1385
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1389
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1393
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1398
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1402
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1411
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1421
		{
			yyVAL.str = ""
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1428
		{
			yyVAL.str = yyDollar[3].str
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1433
		{
			yyVAL.str = "\n"
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1440
		{
			yyVAL.str = yyDollar[3].str
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1445
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1449
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1477
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1481
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1487
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1495
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1515
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1534
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1559
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1563
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1567
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1572
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1576
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1582
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1595
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1606
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1619
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1623
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1633
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1646
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1659
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1665
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1671
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1678
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1686
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1695
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1699
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1703
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1707
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1711
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1715
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1722
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1726
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1732
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1739
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1748
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1752
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1758
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1762
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1766
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1770
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1774
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1778
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1782
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1786
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1790
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1794
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1798
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1802
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1806
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1810
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1814
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1818
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1822
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1826
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1830
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1834
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1838
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1842
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1846
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1850
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1854
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1858
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1862
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1866
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1870
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1874
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1878
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1882
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1886
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1890
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1894
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1898
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1902
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1906
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1910
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1914
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1918
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1922
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1926
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1930
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1934
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1938
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1942
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1946
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1950
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1954
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1967
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1974
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1981
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1991
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1995
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2001
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2008
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2016
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2020
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2024
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2028
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2034
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2038
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2044
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2051
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2058
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2067
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2097
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2101
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2105
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2111
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2117
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2121
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2128
		{
			yyVAL.str = yyDollar[3].str
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2134
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2138
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2144
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2152
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2161
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2170
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2178
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2186
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2209
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2232
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2239
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2246
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2254
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2261
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2268
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2277
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2281
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2285
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2291
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2295
		{
			yyVAL.str = yyDollar[1].str
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2301
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2305
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2311
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2315
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2326
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2332
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2337
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2341
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2345
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2349
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2353
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2357
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2361
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2365
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2369
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2375
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2379
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2383
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2387
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2392
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2397
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2403
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2416
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2429
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2442
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2455
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2471
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2478
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2489
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2500
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2504
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2510
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2520
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2526
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2530
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2536
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2542
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2546
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2550
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2554
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2560
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2572
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2578
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2582
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2588
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2592
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2598
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2604
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2615
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2621
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2625
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2629
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2633
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2637
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2641
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2649
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2657
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2667
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2679
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2683
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2691
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2699
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2738
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2742
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2748
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2754
		{
			yyVAL.str = yyDollar[1].str
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2759
		{
			yyVAL.str = "true"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2760
		{
			yyVAL.str = "false"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2761
		{
			yyVAL.str = yyDollar[1].str
		}
	case 360:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2766
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2783
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2806
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2816
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2823
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2832
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2836
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2842
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2846
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2870
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2880
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2896
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2914
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2918
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2924
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2928
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2934
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2940
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2948
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2958
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2966
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2976
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2986
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2996
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3003
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3007
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3011
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3015
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3019
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3026
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3032
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3036
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3040
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3044
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3048
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3052
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3056
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3060
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3065
		{
			yyVAL.str = ""
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3096
		{
			yyVAL.str = ""
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3100
		{
			yyVAL.str = string("COLUMN")
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3105
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3111
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3117
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3125
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3129
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3135
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3143
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3150
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3156
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3162
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3168
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3174
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3181
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3188
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3196
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3202
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3214
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3220
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3228
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3232
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3239
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3257
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3271
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3285
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3298
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3304
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3315
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3328
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3332
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3340
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3344
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3349
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3353
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3369
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3373
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3377
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3381
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3388
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3392
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3396
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3400
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3407
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3411
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3418
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3422
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3426
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3430
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3437
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3444
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3450
		{
			yyVAL.item = nil
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3455
		{
			yyVAL.item = nil
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3497
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3506
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3514
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3522
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3526
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3530
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				&tree.Role{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3541
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3545
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3551
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3556
		{
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3560
		{
		}
	case 521:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3565
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3575
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3585
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3593
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3599
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3605
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3611
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3617
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3623
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3629
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3638
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3642
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3646
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3650
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3654
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3658
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3662
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3666
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3672
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3681
		{
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3683
		{
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3692
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3702
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3711
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3715
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3719
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3725
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3731
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3737
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3743
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3752
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3762
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3774
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3778
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3784
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3796
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3810
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3816
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3823
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3827
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3832
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3836
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3840
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3845
		{
			yyVAL.str = ""
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3849
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3855
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3868
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3872
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3878
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3883
		{
			yyLOCAL = &tree.ShowCreateView{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3887
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3891
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3897
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3903
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3907
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3913
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3919
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3923
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3927
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3933
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3937
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3963
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3971
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3979
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3987
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3991
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3997
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4010
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4018
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4027
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4033
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4041
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4049
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4057
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4063
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4071
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4077
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4085
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4091
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4101
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4106
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4113
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4129
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4142
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4153
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4157
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4163
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4168
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4175
		{
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4177
		{
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4180
		{
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4189
		{
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4193
		{
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4198
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4207
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4214
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4220
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4228
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4235
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4242
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4262
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4270
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4280
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4284
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4290
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4297
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4303
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4311
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4318
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4325
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4344
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4348
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4352
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4357
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4361
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4365
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4371
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4380
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4384
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4390
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4394
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4400
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4404
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4410
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4415
		{
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4419
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4426
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4430
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4437
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4442
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4446
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4452
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4456
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4462
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4466
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4471
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4475
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4488
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4499
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4510
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4532
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4555
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4563
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4572
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4576
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4589
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4593
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4598
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4602
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4609
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4614
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4621
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4627
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4631
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4635
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4639
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4643
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4647
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4652
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4656
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4662
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4672
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4687
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4691
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4705
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4709
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4715
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4724
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4728
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4732
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4736
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4740
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4746
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4753
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4762
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4766
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4772
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4780
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4784
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4789
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4793
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4799
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4803
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4807
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4812
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4816
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4822
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4828
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4832
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:4838
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4843
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4847
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4851
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4856
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4860
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4864
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4869
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4873
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4881
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4885
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4889
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4903
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4907
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4917
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4927
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4937
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4949
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4957
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4965
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4974
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4982
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4990
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4998
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5006
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5014
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5022
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5030
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5038
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5048
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5059
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5073
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5077
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5081
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5086
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5090
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5094
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5103
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5107
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5112
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5116
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5121
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5125
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5131
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5135
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5141
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5145
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5150
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5154
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5159
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5167
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5173
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5181
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5189
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5199
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5205
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5214
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5223
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5232
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5242
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5246
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5256
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5260
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5264
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5268
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 814:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5274
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5284
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5288
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5294
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5300
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5304
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5310
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5316
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5320
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5324
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5330
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5334
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5340
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5344
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5350
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5354
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5360
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5364
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5374
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5387
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5393
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5399
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:  tree.FuncName2ResolvableFunctionReference(name),
					Exprs: yyDollar[3].exprsUnion(),
					Type:  tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5412
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5423
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5430
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5434
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5440
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5450
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5454
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5458
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5463
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5467
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5471
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5475
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5480
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5484
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5488
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5492
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5496
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5501
		{
			yyVAL.str = ""
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5505
		{
			yyVAL.str = yyDollar[1].str
		}
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5509
		{
			yyVAL.str = yyDollar[2].str
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5515
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 859:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5521
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5525
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5529
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5533
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5537
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5543
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 885:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5583
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5596
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5602
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 888:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5608
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5621
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5626
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5632
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5639
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5643
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5649
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5655
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5660
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5664
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5668
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5672
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5679
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5712
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5717
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5723
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5730
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5734
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5740
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5746
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5750
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5754
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5760
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5766
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5772
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5776
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5782
		{
			yyVAL.str = ""
		}
	case 918:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5789
		{
			yyVAL.str = yyDollar[2].str
		}
	case 919:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5795
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5810
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5827
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].str
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5844
		{
			yyVAL.str = yyDollar[1].str
		}
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5848
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5854
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5858
		{
			yyVAL.str = "DEFINER = "
		}
	case 926:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5862
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 927:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5867
		{
			yyVAL.str = ""
		}
	case 928:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:5871
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 934:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5885
		{
			yyVAL.str = ""
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5893
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 938:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:5899
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].str
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5912
		{
			yyVAL.str = yyDollar[1].str
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5916
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 941:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5922
		{
			var Typ = tree.AccountIdentifiedByPassword
			var Str = yyDollar[3].str
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5931
		{
			var Typ = tree.AccountIdentifiedByRandomPassword
			var Str string
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5940
		{
			var Typ = tree.AccountIdentifiedWithSSL
			var Str = yyDollar[3].str
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5950
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5956
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5963
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5970
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5978
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5984
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5993
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6010
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6027
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6045
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6051
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6058
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6066
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6072
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6080
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6086
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6094
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6100
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6109
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6113
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6118
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6122
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6129
		{
			yyVAL.str = yyDollar[3].str
		}
	case 967:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6134
		{
			yyVAL.str = ""
		}
	case 968:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6138
		{
			yyVAL.str = yyDollar[2].str
		}
	case 969:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6144
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6157
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var comment = yyDollar[6].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, comment)
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6166
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6170
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6176
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6182
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6188
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6197
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6205
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6213
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6221
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 980:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6226
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6238
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6249
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6358
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6362
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6368
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6381
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6385
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6391
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6404
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6408
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6412
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6417
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6421
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6427
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6434
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6440
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6449
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 999:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6456
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6467
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6471
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6477
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6486
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6490
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6494
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6499
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6503
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6507
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6511
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6517
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6548
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6552
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6578
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6584
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6596
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6602
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6608
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6614
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6620
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6628
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6632
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6638
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6652
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6666
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6670
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6674
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6678
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6682
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6686
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6690
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6696
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6711
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6715
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6726
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6730
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6735
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6739
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6745
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6749
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6755
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6764
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6773
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6779
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6783
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6789
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6800
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6806
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6824
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6842
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6860
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6876
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6880
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6886
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6898
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6907
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6919
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6929
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6939
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6950
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6960
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6973
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6980
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6990
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7003
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7011
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7020
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7029
		{
			yyVAL.str = ""
		}
	case 1070:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7033
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7039
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7043
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7048
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7052
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7059
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7071
		{
			yyVAL.str = ""
		}
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7075
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1078:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7081
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7102
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7116
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7120
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7124
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7130
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7134
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7141
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7148
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7155
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7162
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7166
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7170
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7174
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7178
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7185
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7192
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7196
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7203
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7210
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7214
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7220
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7226
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7230
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7237
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7244
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7251
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7258
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7262
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7267
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7271
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7275
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7280
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7284
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7297
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7301
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7309
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7317
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7321
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7333
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7337
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7343
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7347
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7353
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7366
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7380
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7384
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7390
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7394
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7400
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7409
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7420
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7424
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7429
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7433
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7439
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7444
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7452
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7456
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7466
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7470
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7481
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7489
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7497
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7505
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7516
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7525
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7535
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7545
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7549
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7554
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7558
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7564
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7568
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7574
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7583
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7593
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7597
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7603
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7607
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7613
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7622
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7632
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7636
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7642
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7646
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7650
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7656
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7660
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7664
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7668
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7672
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7676
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7680
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7685
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7689
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7693
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7697
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7701
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7705
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7709
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7713
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7717
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7721
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7725
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7729
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7733
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7739
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7745
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7749
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7753
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7757
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7761
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7767
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7773
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7779
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7785
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7791
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7797
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7801
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7805
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7809
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7816
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7820
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:7826
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7837
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7841
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7847
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7851
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7855
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7859
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7863
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7867
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7881
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7885
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7894
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7899
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7904
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			atTs := &tree.AtTimeStamp{
				Expr: yyDollar[3].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7912
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			atTs := &tree.AtTimeStamp{
				Expr: yyDollar[5].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7921
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7928
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7932
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7938
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7942
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7946
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7952
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7956
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7962
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7975
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7988
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8027
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8067
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8081
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8087
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8100
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8113
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8126
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8139
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8154
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8164
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8170
		{
			yyVAL.str = ""
		}
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8174
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8184
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8190
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8196
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8217
		{
			yyVAL.str = ""
		}
	case 1263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8221
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8227
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8233
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8237
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8241
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8247
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8251
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8255
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8259
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8265
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8269
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8273
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8278
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8282
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8288
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8292
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8298
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8302
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8306
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8310
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8314
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8318
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8323
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8327
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8331
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8335
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8339
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8343
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8347
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8351
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8355
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8359
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8372
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8376
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8380
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8384
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8388
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8392
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8398
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8402
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8407
		{
			yyVAL.str = ""
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8411
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8417
		{
			yyVAL.str = ""
		}
	case 1306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8421
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1307:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8427
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8444
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8451
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8458
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8465
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8472
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8481
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8487
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8493
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8497
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8501
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8505
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8509
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8514
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8521
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8525
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8529
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8534
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8538
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8543
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8547
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8563
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8569
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8573
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8577
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8581
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8585
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8589
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8593
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8597
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8601
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8605
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8609
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8613
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8617
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8623
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8627
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8631
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8635
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8639
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8643
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8647
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8651
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8655
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8659
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8701
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8705
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8709
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8714
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8722
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8726
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8730
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8734
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8738
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8747
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8751
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8755
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8759
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8763
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8767
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8771
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8777
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8785
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8793
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8803
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8813
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8823
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8832
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8842
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8852
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8862
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8871
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8881
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8885
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8890
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8894
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8900
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8904
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:8910
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8919
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1394:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8931
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8948
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8965
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8978
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8991
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9003
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9017
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9032
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9047
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9064
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9079
		{
		}
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9086
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9090
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9094
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9100
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9104
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9108
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9112
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9118
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9122
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9126
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9132
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9140
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9150
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9154
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9161
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9166
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9170
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9175
		{
			yyVAL.str = ","
		}
	case 1427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9179
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9184
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9188
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1430:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9193
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9200
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9226
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9237
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9248
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9258
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9268
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9278
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9287
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9296
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9306
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9316
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9326
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9336
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9346
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9356
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9366
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9376
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9386
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9396
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9406
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9416
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9426
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9436
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9453
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9461
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9469
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9477
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9485
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9495
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9503
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9512
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9520
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9528
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9536
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9544
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9555
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9565
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9577
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9588
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9610
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9646
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9658
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9670
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9681
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9689
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9696
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9703
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9715
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9723
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9733
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9743
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9751
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9762
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9771
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9780
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9788
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9798
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9806
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9815
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9823
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9831
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9840
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9844
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9850
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9854
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9873
		{
		}
	case 1541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9875
		{
		}
	case 1575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9916
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9927
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9931
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9935
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:9941
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9946
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9950
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9956
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9960
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9966
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9970
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9977
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9981
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9985
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9993
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9997
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10001
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10006
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10010
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10016
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10020
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10024
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10028
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10032
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10036
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10040
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10044
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10048
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10052
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10060
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10064
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10068
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10072
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10076
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10080
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10084
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10088
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10092
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10096
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10102
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10106
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10112
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10116
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10123
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10127
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10131
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10137
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10141
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10145
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10149
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10153
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10157
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10161
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10167
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10171
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10175
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10179
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10185
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10198
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10203
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10209
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10213
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10226
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10231
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10235
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10239
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10243
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10247
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10254
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10258
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10262
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10266
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10273
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10284
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10289
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10295
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10307
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10319
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10331
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10344
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10357
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10370
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10383
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10396
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10409
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10422
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10435
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10448
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10461
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10476
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10503
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10545
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10581
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10617
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10634
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10646
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10666
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10686
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10706
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10722
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10735
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10748
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10761
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10774
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10786
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10798
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10810
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10822
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10834
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10846
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10858
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10870
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10882
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10895
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10908
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10921
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10934
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10949
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10957
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10966
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10976
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10999
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11004
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11010
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11017
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11021
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11026
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11030
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11036
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11042
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11049
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11056
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11065
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11072
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11079
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11088
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11092
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11096
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11102
		{
		}
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11104
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11114
		{
			yyVAL.str = ""
		}
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11118
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
