// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const DATALINK = 57526
const BLOB = 57527
const TINYBLOB = 57528
const MEDIUMBLOB = 57529
const LONGBLOB = 57530
const JSON = 57531
const ENUM = 57532
const UUID = 57533
const VECF32 = 57534
const VECF64 = 57535
const GEOMETRY = 57536
const POINT = 57537
const LINESTRING = 57538
const POLYGON = 57539
const GEOMETRYCOLLECTION = 57540
const MULTIPOINT = 57541
const MULTILINESTRING = 57542
const MULTIPOLYGON = 57543
const INT1 = 57544
const INT2 = 57545
const INT3 = 57546
const INT4 = 57547
const INT8 = 57548
const S3OPTION = 57549
const STAGEOPTION = 57550
const SQL_SMALL_RESULT = 57551
const SQL_BIG_RESULT = 57552
const SQL_BUFFER_RESULT = 57553
const LOW_PRIORITY = 57554
const HIGH_PRIORITY = 57555
const DELAYED = 57556
const CREATE = 57557
const ALTER = 57558
const DROP = 57559
const RENAME = 57560
const ANALYZE = 57561
const ADD = 57562
const RETURNS = 57563
const SCHEMA = 57564
const TABLE = 57565
const SEQUENCE = 57566
const INDEX = 57567
const VIEW = 57568
const TO = 57569
const IGNORE = 57570
const IF = 57571
const PRIMARY = 57572
const COLUMN = 57573
const CONSTRAINT = 57574
const SPATIAL = 57575
const FULLTEXT = 57576
const FOREIGN = 57577
const KEY_BLOCK_SIZE = 57578
const SHOW = 57579
const DESCRIBE = 57580
const EXPLAIN = 57581
const DATE = 57582
const ESCAPE = 57583
const REPAIR = 57584
const OPTIMIZE = 57585
const TRUNCATE = 57586
const MAXVALUE = 57587
const PARTITION = 57588
const REORGANIZE = 57589
const LESS = 57590
const THAN = 57591
const PROCEDURE = 57592
const TRIGGER = 57593
const STATUS = 57594
const VARIABLES = 57595
const ROLE = 57596
const PROXY = 57597
const AVG_ROW_LENGTH = 57598
const STORAGE = 57599
const DISK = 57600
const MEMORY = 57601
const CHECKSUM = 57602
const COMPRESSION = 57603
const DATA = 57604
const DIRECTORY = 57605
const DELAY_KEY_WRITE = 57606
const ENCRYPTION = 57607
const ENGINE = 57608
const MAX_ROWS = 57609
const MIN_ROWS = 57610
const PACK_KEYS = 57611
const ROW_FORMAT = 57612
const STATS_AUTO_RECALC = 57613
const STATS_PERSISTENT = 57614
const STATS_SAMPLE_PAGES = 57615
const DYNAMIC = 57616
const COMPRESSED = 57617
const REDUNDANT = 57618
const COMPACT = 57619
const FIXED = 57620
const COLUMN_FORMAT = 57621
const AUTO_RANDOM = 57622
const ENGINE_ATTRIBUTE = 57623
const SECONDARY_ENGINE_ATTRIBUTE = 57624
const INSERT_METHOD = 57625
const RESTRICT = 57626
const CASCADE = 57627
const ACTION = 57628
const PARTIAL = 57629
const SIMPLE = 57630
const CHECK = 57631
const ENFORCED = 57632
const RANGE = 57633
const LIST = 57634
const ALGORITHM = 57635
const LINEAR = 57636
const PARTITIONS = 57637
const SUBPARTITION = 57638
const SUBPARTITIONS = 57639
const CLUSTER = 57640
const TYPE = 57641
const ANY = 57642
const SOME = 57643
const EXTERNAL = 57644
const LOCALFILE = 57645
const URL = 57646
const PREPARE = 57647
const DEALLOCATE = 57648
const RESET = 57649
const EXTENSION = 57650
const INCREMENT = 57651
const CYCLE = 57652
const MINVALUE = 57653
const PUBLICATION = 57654
const SUBSCRIPTIONS = 57655
const PUBLICATIONS = 57656
const PROPERTIES = 57657
const PARSER = 57658
const VISIBLE = 57659
const INVISIBLE = 57660
const BTREE = 57661
const HASH = 57662
const RTREE = 57663
const BSI = 57664
const IVFFLAT = 57665
const MASTER = 57666
const ZONEMAP = 57667
const LEADING = 57668
const BOTH = 57669
const TRAILING = 57670
const UNKNOWN = 57671
const LISTS = 57672
const OP_TYPE = 57673
const REINDEX = 57674
const EXPIRE = 57675
const ACCOUNT = 57676
const ACCOUNTS = 57677
const UNLOCK = 57678
const DAY = 57679
const NEVER = 57680
const PUMP = 57681
const MYSQL_COMPATIBILITY_MODE = 57682
const UNIQUE_CHECK_ON_AUTOINCR = 57683
const MODIFY = 57684
const CHANGE = 57685
const SECOND = 57686
const ASCII = 57687
const COALESCE = 57688
const COLLATION = 57689
const HOUR = 57690
const MICROSECOND = 57691
const MINUTE = 57692
const MONTH = 57693
const QUARTER = 57694
const REPEAT = 57695
const REVERSE = 57696
const ROW_COUNT = 57697
const WEEK = 57698
const REVOKE = 57699
const FUNCTION = 57700
const PRIVILEGES = 57701
const TABLESPACE = 57702
const EXECUTE = 57703
const SUPER = 57704
const GRANT = 57705
const OPTION = 57706
const REFERENCES = 57707
const REPLICATION = 57708
const SLAVE = 57709
const CLIENT = 57710
const USAGE = 57711
const RELOAD = 57712
const FILE = 57713
const TEMPORARY = 57714
const ROUTINE = 57715
const EVENT = 57716
const SHUTDOWN = 57717
const NULLX = 57718
const AUTO_INCREMENT = 57719
const APPROXNUM = 57720
const SIGNED = 57721
const UNSIGNED = 57722
const ZEROFILL = 57723
const ENGINES = 57724
const LOW_CARDINALITY = 57725
const AUTOEXTEND_SIZE = 57726
const ADMIN_NAME = 57727
const RANDOM = 57728
const SUSPEND = 57729
const ATTRIBUTE = 57730
const HISTORY = 57731
const REUSE = 57732
const CURRENT = 57733
const OPTIONAL = 57734
const FAILED_LOGIN_ATTEMPTS = 57735
const PASSWORD_LOCK_TIME = 57736
const UNBOUNDED = 57737
const SECONDARY = 57738
const RESTRICTED = 57739
const USER = 57740
const IDENTIFIED = 57741
const CIPHER = 57742
const ISSUER = 57743
const X509 = 57744
const SUBJECT = 57745
const SAN = 57746
const REQUIRE = 57747
const SSL = 57748
const NONE = 57749
const PASSWORD = 57750
const SHARED = 57751
const EXCLUSIVE = 57752
const MAX_QUERIES_PER_HOUR = 57753
const MAX_UPDATES_PER_HOUR = 57754
const MAX_CONNECTIONS_PER_HOUR = 57755
const MAX_USER_CONNECTIONS = 57756
const FORMAT = 57757
const VERBOSE = 57758
const CONNECTION = 57759
const TRIGGERS = 57760
const PROFILES = 57761
const LOAD = 57762
const INLINE = 57763
const INFILE = 57764
const TERMINATED = 57765
const OPTIONALLY = 57766
const ENCLOSED = 57767
const ESCAPED = 57768
const STARTING = 57769
const LINES = 57770
const ROWS = 57771
const IMPORT = 57772
const DISCARD = 57773
const JSONTYPE = 57774
const MODUMP = 57775
const OVER = 57776
const PRECEDING = 57777
const FOLLOWING = 57778
const GROUPS = 57779
const DATABASES = 57780
const TABLES = 57781
const SEQUENCES = 57782
const EXTENDED = 57783
const FULL = 57784
const PROCESSLIST = 57785
const FIELDS = 57786
const COLUMNS = 57787
const OPEN = 57788
const ERRORS = 57789
const WARNINGS = 57790
const INDEXES = 57791
const SCHEMAS = 57792
const NODE = 57793
const LOCKS = 57794
const ROLES = 57795
const TABLE_NUMBER = 57796
const COLUMN_NUMBER = 57797
const TABLE_VALUES = 57798
const TABLE_SIZE = 57799
const NAMES = 57800
const GLOBAL = 57801
const PERSIST = 57802
const SESSION = 57803
const ISOLATION = 57804
const LEVEL = 57805
const READ = 57806
const WRITE = 57807
const ONLY = 57808
const REPEATABLE = 57809
const COMMITTED = 57810
const UNCOMMITTED = 57811
const SERIALIZABLE = 57812
const LOCAL = 57813
const EVENTS = 57814
const PLUGINS = 57815
const CURRENT_TIMESTAMP = 57816
const DATABASE = 57817
const CURRENT_TIME = 57818
const LOCALTIME = 57819
const LOCALTIMESTAMP = 57820
const UTC_DATE = 57821
const UTC_TIME = 57822
const UTC_TIMESTAMP = 57823
const REPLACE = 57824
const CONVERT = 57825
const SEPARATOR = 57826
const TIMESTAMPDIFF = 57827
const CURRENT_DATE = 57828
const CURRENT_USER = 57829
const CURRENT_ROLE = 57830
const SECOND_MICROSECOND = 57831
const MINUTE_MICROSECOND = 57832
const MINUTE_SECOND = 57833
const HOUR_MICROSECOND = 57834
const HOUR_SECOND = 57835
const HOUR_MINUTE = 57836
const DAY_MICROSECOND = 57837
const DAY_SECOND = 57838
const DAY_MINUTE = 57839
const DAY_HOUR = 57840
const YEAR_MONTH = 57841
const SQL_TSI_HOUR = 57842
const SQL_TSI_DAY = 57843
const SQL_TSI_WEEK = 57844
const SQL_TSI_MONTH = 57845
const SQL_TSI_QUARTER = 57846
const SQL_TSI_YEAR = 57847
const SQL_TSI_SECOND = 57848
const SQL_TSI_MINUTE = 57849
const RECURSIVE = 57850
const CONFIG = 57851
const DRAINER = 57852
const SOURCE = 57853
const STREAM = 57854
const HEADERS = 57855
const CONNECTOR = 57856
const CONNECTORS = 57857
const DAEMON = 57858
const PAUSE = 57859
const CANCEL = 57860
const TASK = 57861
const RESUME = 57862
const MATCH = 57863
const AGAINST = 57864
const BOOLEAN = 57865
const LANGUAGE = 57866
const WITH = 57867
const QUERY = 57868
const EXPANSION = 57869
const WITHOUT = 57870
const VALIDATION = 57871
const UPGRADE = 57872
const RETRY = 57873
const ADDDATE = 57874
const BIT_AND = 57875
const BIT_OR = 57876
const BIT_XOR = 57877
const CAST = 57878
const COUNT = 57879
const APPROX_COUNT = 57880
const APPROX_COUNT_DISTINCT = 57881
const SERIAL_EXTRACT = 57882
const APPROX_PERCENTILE = 57883
const CURDATE = 57884
const CURTIME = 57885
const DATE_ADD = 57886
const DATE_SUB = 57887
const EXTRACT = 57888
const GROUP_CONCAT = 57889
const MAX = 57890
const MID = 57891
const MIN = 57892
const NOW = 57893
const POSITION = 57894
const SESSION_USER = 57895
const STD = 57896
const STDDEV = 57897
const MEDIAN = 57898
const CLUSTER_CENTERS = 57899
const KMEANS = 57900
const STDDEV_POP = 57901
const STDDEV_SAMP = 57902
const SUBDATE = 57903
const SUBSTR = 57904
const SUBSTRING = 57905
const SUM = 57906
const SYSDATE = 57907
const SYSTEM_USER = 57908
const TRANSLATE = 57909
const TRIM = 57910
const VARIANCE = 57911
const VAR_POP = 57912
const VAR_SAMP = 57913
const AVG = 57914
const RANK = 57915
const ROW_NUMBER = 57916
const DENSE_RANK = 57917
const BIT_CAST = 57918
const BITMAP_BIT_POSITION = 57919
const BITMAP_BUCKET_NUMBER = 57920
const BITMAP_COUNT = 57921
const BITMAP_CONSTRUCT_AGG = 57922
const BITMAP_OR_AGG = 57923
const NEXTVAL = 57924
const SETVAL = 57925
const CURRVAL = 57926
const LASTVAL = 57927
const ARROW = 57928
const ROW = 57929
const OUTFILE = 57930
const HEADER = 57931
const MAX_FILE_SIZE = 57932
const FORCE_QUOTE = 57933
const PARALLEL = 57934
const STRICT = 57935
const UNUSED = 57936
const BINDINGS = 57937
const DO = 57938
const DECLARE = 57939
const LOOP = 57940
const WHILE = 57941
const LEAVE = 57942
const ITERATE = 57943
const UNTIL = 57944
const CALL = 57945
const PREV = 57946
const SLIDING = 57947
const FILL = 57948
const SPBEGIN = 57949
const BACKEND = 57950
const SERVERS = 57951
const HANDLER = 57952
const PERCENT = 57953
const SAMPLE = 57954
const MO_TS = 57955
const PITR = 57956
const CDC = 57957
const KILL = 57958
const BACKUP = 57959
const FILESYSTEM = 57960
const PARALLELISM = 57961
const RESTORE = 57962
const QUERY_RESULT = 57963

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12463

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 132,
	11, 773,
	22, 773,
	-2, 766,
	-1, 155,
	240, 1182,
	242, 1081,
	-2, 1128,
	-1, 182,
	43, 596,
	242, 596,
	269, 603,
	270, 603,
	466, 596,
	-2, 631,
	-1, 221,
	642, 1947,
	-2, 506,
	-1, 523,
	642, 2067,
	-2, 392,
	-1, 581,
	642, 2126,
	-2, 390,
	-1, 582,
	642, 2127,
	-2, 391,
	-1, 583,
	642, 2128,
	-2, 393,
	-1, 716,
	321, 178,
	438, 178,
	439, 178,
	-2, 1852,
	-1, 783,
	83, 1638,
	-2, 2003,
	-1, 784,
	83, 1656,
	-2, 1974,
	-1, 788,
	83, 1657,
	-2, 2002,
	-1, 821,
	83, 1565,
	-2, 2200,
	-1, 822,
	83, 1566,
	-2, 2199,
	-1, 823,
	83, 1567,
	-2, 2189,
	-1, 824,
	83, 2161,
	-2, 2182,
	-1, 825,
	83, 2162,
	-2, 2183,
	-1, 826,
	83, 2163,
	-2, 2191,
	-1, 827,
	83, 2164,
	-2, 2171,
	-1, 828,
	83, 2165,
	-2, 2180,
	-1, 829,
	83, 2166,
	-2, 2192,
	-1, 830,
	83, 2167,
	-2, 2193,
	-1, 831,
	83, 2168,
	-2, 2198,
	-1, 832,
	83, 2169,
	-2, 2203,
	-1, 833,
	83, 2170,
	-2, 2204,
	-1, 834,
	83, 1634,
	-2, 2041,
	-1, 835,
	83, 1635,
	-2, 1836,
	-1, 836,
	83, 1636,
	-2, 2050,
	-1, 837,
	83, 1637,
	-2, 1845,
	-1, 839,
	83, 1640,
	-2, 1853,
	-1, 840,
	83, 1641,
	-2, 2074,
	-1, 842,
	83, 1644,
	-2, 1872,
	-1, 844,
	83, 1646,
	-2, 2086,
	-1, 845,
	83, 1647,
	-2, 2085,
	-1, 846,
	83, 1648,
	-2, 1916,
	-1, 847,
	83, 1649,
	-2, 1998,
	-1, 850,
	83, 1652,
	-2, 2097,
	-1, 852,
	83, 1654,
	-2, 2100,
	-1, 853,
	83, 1655,
	-2, 2102,
	-1, 854,
	83, 1658,
	-2, 2110,
	-1, 855,
	83, 1659,
	-2, 1983,
	-1, 856,
	83, 1660,
	-2, 2028,
	-1, 857,
	83, 1661,
	-2, 1993,
	-1, 858,
	83, 1662,
	-2, 2018,
	-1, 869,
	83, 1543,
	-2, 2194,
	-1, 870,
	83, 1544,
	-2, 2195,
	-1, 871,
	83, 1545,
	-2, 2196,
	-1, 970,
	461, 631,
	462, 631,
	-2, 597,
	-1, 1018,
	125, 1836,
	136, 1836,
	156, 1836,
	-2, 1810,
	-1, 1135,
	22, 800,
	-2, 749,
	-1, 1241,
	11, 773,
	22, 773,
	-2, 1421,
	-1, 1324,
	22, 800,
	-2, 749,
	-1, 1666,
	83, 1709,
	-2, 2000,
	-1, 1667,
	83, 1710,
	-2, 2001,
	-1, 1840,
	84, 953,
	-2, 959,
	-1, 2288,
	108, 1120,
	152, 1120,
	191, 1120,
	194, 1120,
	282, 1120,
	-2, 1113,
	-1, 2440,
	11, 773,
	22, 773,
	-2, 894,
	-1, 2472,
	84, 1796,
	157, 1796,
	-2, 1985,
	-1, 2473,
	84, 1796,
	157, 1796,
	-2, 1984,
	-1, 2474,
	84, 1772,
	157, 1772,
	-2, 1971,
	-1, 2475,
	84, 1773,
	157, 1773,
	-2, 1976,
	-1, 2476,
	84, 1774,
	157, 1774,
	-2, 1904,
	-1, 2477,
	84, 1775,
	157, 1775,
	-2, 1898,
	-1, 2478,
	84, 1776,
	157, 1776,
	-2, 1826,
	-1, 2479,
	84, 1777,
	157, 1777,
	-2, 1973,
	-1, 2480,
	84, 1778,
	157, 1778,
	-2, 1902,
	-1, 2481,
	84, 1779,
	157, 1779,
	-2, 1897,
	-1, 2482,
	84, 1780,
	157, 1780,
	-2, 1886,
	-1, 2483,
	84, 1796,
	157, 1796,
	-2, 1887,
	-1, 2484,
	84, 1796,
	157, 1796,
	-2, 1888,
	-1, 2486,
	84, 1785,
	157, 1785,
	-2, 2018,
	-1, 2487,
	84, 1762,
	157, 1762,
	-2, 2003,
	-1, 2488,
	84, 1794,
	157, 1794,
	-2, 1974,
	-1, 2489,
	84, 1794,
	157, 1794,
	-2, 2002,
	-1, 2490,
	84, 1794,
	157, 1794,
	-2, 1854,
	-1, 2491,
	84, 1792,
	157, 1792,
	-2, 1993,
	-1, 2492,
	84, 1789,
	157, 1789,
	-2, 1877,
	-1, 2493,
	83, 1743,
	84, 1743,
	157, 1743,
	396, 1743,
	397, 1743,
	398, 1743,
	-2, 1825,
	-1, 2494,
	83, 1744,
	84, 1744,
	157, 1744,
	396, 1744,
	397, 1744,
	398, 1744,
	-2, 1827,
	-1, 2495,
	83, 1745,
	84, 1745,
	157, 1745,
	396, 1745,
	397, 1745,
	398, 1745,
	-2, 2046,
	-1, 2496,
	83, 1747,
	84, 1747,
	157, 1747,
	396, 1747,
	397, 1747,
	398, 1747,
	-2, 1975,
	-1, 2497,
	83, 1749,
	84, 1749,
	157, 1749,
	396, 1749,
	397, 1749,
	398, 1749,
	-2, 1956,
	-1, 2498,
	83, 1751,
	84, 1751,
	157, 1751,
	396, 1751,
	397, 1751,
	398, 1751,
	-2, 1903,
	-1, 2499,
	83, 1753,
	84, 1753,
	157, 1753,
	396, 1753,
	397, 1753,
	398, 1753,
	-2, 1882,
	-1, 2500,
	83, 1754,
	84, 1754,
	157, 1754,
	396, 1754,
	397, 1754,
	398, 1754,
	-2, 1883,
	-1, 2501,
	83, 1756,
	84, 1756,
	157, 1756,
	396, 1756,
	397, 1756,
	398, 1756,
	-2, 1824,
	-1, 2502,
	84, 1799,
	157, 1799,
	396, 1799,
	397, 1799,
	398, 1799,
	-2, 1859,
	-1, 2503,
	84, 1799,
	157, 1799,
	396, 1799,
	397, 1799,
	398, 1799,
	-2, 1873,
	-1, 2504,
	84, 1802,
	157, 1802,
	396, 1802,
	397, 1802,
	398, 1802,
	-2, 1855,
	-1, 2505,
	84, 1802,
	157, 1802,
	396, 1802,
	397, 1802,
	398, 1802,
	-2, 1919,
	-1, 2506,
	84, 1799,
	157, 1799,
	396, 1799,
	397, 1799,
	398, 1799,
	-2, 1940,
	-1, 2723,
	108, 1120,
	152, 1120,
	191, 1120,
	194, 1120,
	282, 1120,
	-2, 1114,
	-1, 2741,
	81, 693,
	157, 693,
	-2, 1297,
	-1, 3157,
	194, 1120,
	306, 1384,
	-2, 1356,
	-1, 3337,
	108, 1120,
	152, 1120,
	191, 1120,
	194, 1120,
	-2, 1238,
	-1, 3339,
	108, 1120,
	152, 1120,
	191, 1120,
	194, 1120,
	-2, 1238,
	-1, 3351,
	81, 693,
	157, 693,
	-2, 1297,
	-1, 3372,
	194, 1120,
	306, 1384,
	-2, 1357,
	-1, 3521,
	108, 1120,
	152, 1120,
	191, 1120,
	194, 1120,
	-2, 1239,
	-1, 3547,
	84, 1200,
	157, 1200,
	-2, 1120,
	-1, 3687,
	84, 1200,
	157, 1200,
	-2, 1120,
	-1, 3846,
	84, 1204,
	157, 1204,
	-2, 1120,
	-1, 3895,
	84, 1205,
	157, 1205,
	-2, 1120,
}

const yyPrivate = 57344

const yyLast = 50377

var yyAct = [...]int{
	750, 726, 3942, 3915, 3935, 752, 210, 2771, 3850, 1646,
	3357, 3856, 3176, 3452, 3751, 3849, 3857, 3774, 3687, 3143,
	1926, 735, 3730, 3805, 2368, 3247, 2765, 3575, 3386, 1482,
	3665, 3635, 1277, 3721, 1419, 3248, 3686, 1642, 3752, 728,
	3509, 3603, 780, 3656, 2768, 2683, 617, 3456, 1706, 3731,
	1136, 3319, 3733, 1425, 3447, 1873, 3324, 2335, 1693, 3373,
	635, 2744, 641, 641, 3152, 3528, 3100, 3518, 641, 658,
	667, 3491, 65, 667, 2470, 3074, 37, 1649, 1017, 3340,
	3114, 3245, 195, 2880, 2881, 2018, 2879, 2015, 3103, 2861,
	3309, 1130, 2795, 3172, 3342, 3161, 2032, 1983, 3154, 2876,
	2434, 3289, 2055, 2130, 2596, 2943, 3233, 2088, 3523, 2468,
	2338, 1711, 2903, 3213, 1886, 2712, 2561, 3085, 3077, 675,
	3081, 679, 3160, 3075, 3076, 3079, 3123, 2299, 1126, 718,
	1475, 2724, 131, 2267, 3049, 3072, 2242, 723, 2126, 2113,
	2243, 2990, 1548, 2540, 2097, 664, 1555, 36, 1559, 2916,
	2096, 1803, 2522, 2089, 1563, 2061, 2926, 2011, 943, 1984,
	2125, 2435, 2701, 1986, 2776, 2696, 2797, 2422, 2336, 765,
	132, 1916, 2736, 6, 1011, 132, 1905, 2288, 1560, 206,
	8, 2298, 1388, 1391, 2466, 1849, 617, 205, 7, 2127,
	1707, 1640, 727, 634, 2160, 1074, 1491, 1591, 1522, 1461,
	1885, 717, 2279, 1570, 2633, 2331, 1700, 1991, 1408, 1631,
	210, 2137, 210, 1149, 1065, 1066, 2095, 15, 1680, 736,
	616, 641, 1574, 2092, 2077, 653, 1529, 2051, 1845, 1010,
	27, 672, 16, 23, 1639, 647, 1848, 650, 132, 14,
	1513, 873, 1404, 725, 1824, 1458, 942, 1708, 33, 2442,
	682, 1420, 1460, 681, 108, 24, 17, 10, 1521, 1712,
	196, 979, 1026, 666, 919, 188, 192, 940, 1278, 640,
	640, 925, 1322, 678, 1044, 648, 3742, 965, 1209, 1210,
	1211, 1208, 875, 876, 2134, 3653, 662, 2444, 1428, 1062,
	2960, 2668, 1061, 2668, 1063, 2668, 3354, 3130, 2959, 663,
	1131, 659, 1209, 1210, 1211, 1208, 3484, 1645, 661, 1209,
	1210, 1211, 1208, 2144, 3327, 1132, 3240, 660, 2584, 2525,
	724, 2528, 1023, 2632, 2526, 1816, 1429, 193, 61, 184,
	156, 646, 637, 1536, 1058, 1532, 670, 1025, 2523, 1058,
	999, 1057, 194, 636, 2241, 185, 1045, 1341, 895, 893,
	2247, 1817, 177, 1058, 3059, 1583, 186, 2251, 1344, 1024,
	1131, 3042, 3039, 3044, 132, 3041, 3927, 1442, 1056, 1810,
	1337, 1534, 3445, 2939, 8, 130, 1582, 2937, 2066, 132,
	3716, 132, 7, 3610, 2660, 2658, 3604, 3448, 3246, 2110,
	118, 1272, 3735, 2091, 1571, 642, 874, 189, 1209, 1210,
	1211, 1208, 3019, 1209, 1210, 1211, 1208, 2083, 2376, 3948,
	3729, 1355, 3672, 3924, 933, 3618, 934, 193, 1039, 1034,
	1029, 1033, 1037, 885, 3496, 3882, 2662, 1171, 648, 3462,
	3492, 2570, 193, 2578, 193, 61, 184, 156, 2131, 193,
	61, 184, 156, 193, 3832, 1350, 1042, 894, 892, 3341,
	1032, 193, 2290, 914, 1569, 2289, 3673, 193, 193, 61,
	184, 156, 3727, 193, 193, 2962, 3640, 928, 2614, 924,
	3785, 1021, 1022, 2730, 138, 139, 3616, 140, 141, 1828,
	2951, 1578, 1589, 1499, 1825, 994, 992, 189, 993, 1349,
	1347, 130, 193, 61, 184, 156, 895, 193, 61, 184,
	156, 1040, 189, 1147, 189, 893, 1351, 1027, 1043, 189,
	1612, 1575, 1586, 189, 1363, 677, 193, 3017, 2142, 1380,
	2874, 2728, 1600, 2685, 719, 905, 1438, 189, 189, 1439,
	1030, 890, 886, 1577, 1588, 864, 1819, 863, 865, 866,
	2283, 867, 868, 3043, 3040, 3642, 155, 183, 191, 2448,
	116, 2460, 2447, 1206, 1041, 2449, 1144, 2910, 2911, 2686,
	1996, 1997, 189, 2461, 130, 1830, 1831, 189, 182, 176,
	175, 2731, 2909, 1995, 1000, 67, 2541, 1462, 1632, 1464,
	988, 1636, 1186, 1424, 1416, 1187, 189, 1423, 1426, 1427,
	2028, 3147, 3472, 2698, 1031, 3738, 996, 930, 1900, 923,
	1426, 1427, 1648, 2699, 3829, 1635, 3145, 1199, 927, 926,
	3860, 3861, 1204, 1189, 1020, 1441, 1535, 1533, 719, 1019,
	3738, 3819, 3737, 3818, 3737, 908, 3736, 3817, 3736, 915,
	3881, 2230, 3825, 2663, 3810, 3719, 178, 179, 180, 641,
	641, 3919, 3920, 3249, 1652, 2944, 1362, 3807, 3607, 922,
	641, 1140, 2697, 155, 1621, 191, 3722, 3723, 3724, 3725,
	998, 3807, 2945, 3249, 2946, 2565, 1141, 187, 932, 667,
	667, 1038, 641, 921, 2146, 182, 3748, 920, 1152, 2006,
	2816, 3262, 2002, 907, 1627, 3834, 3835, 913, 126, 1637,
	1068, 2012, 181, 1184, 127, 3310, 3094, 3317, 3830, 3831,
	2687, 2704, 3096, 2410, 2138, 3501, 2278, 1035, 2074, 911,
	1036, 3398, 3086, 1634, 3644, 3645, 2980, 1542, 1541, 931,
	2688, 1202, 1203, 3446, 3827, 2978, 1201, 2575, 181, 1026,
	3471, 664, 664, 713, 2374, 1249, 715, 997, 3473, 1152,
	2938, 714, 1174, 2413, 2414, 2866, 2661, 931, 2412, 3649,
	3498, 128, 3091, 3092, 2681, 2463, 1191, 1185, 1340, 1192,
	3741, 1651, 1650, 3413, 60, 3859, 3820, 3101, 3093, 3652,
	3149, 1133, 2143, 912, 1395, 3265, 3632, 2984, 1440, 2667,
	1132, 1132, 1140, 1414, 1132, 3293, 2418, 1194, 2121, 1023,
	2682, 1196, 633, 3090, 3175, 1452, 3173, 3174, 1166, 1364,
	3410, 3890, 1026, 3112, 1025, 3124, 3677, 3669, 2961, 3767,
	1046, 1028, 2132, 62, 2248, 1818, 2132, 3762, 1584, 1197,
	1198, 1281, 2737, 2132, 132, 132, 1024, 669, 668, 888,
	1633, 2872, 2958, 1058, 1188, 3753, 3463, 3403, 1058, 2165,
	2133, 1058, 2026, 2027, 1132, 2285, 640, 1129, 136, 190,
	929, 137, 1058, 3050, 1058, 3671, 157, 1138, 1058, 1146,
	3769, 58, 1023, 665, 2145, 889, 3358, 1190, 3775, 2149,
	2151, 2152, 662, 662, 1154, 1153, 995, 1025, 3102, 1162,
	1143, 1145, 665, 3144, 2770, 663, 663, 659, 659, 918,
	1343, 1155, 1345, 3833, 661, 661, 3365, 2263, 1139, 1241,
	2524, 676, 1403, 660, 660, 1537, 1195, 3088, 1360, 635,
	3747, 3178, 874, 3302, 2766, 2767, 665, 2770, 3639, 3300,
	1135, 665, 3063, 1320, 1163, 62, 1325, 129, 45, 1134,
	1022, 1193, 1159, 1160, 59, 1154, 1153, 2408, 5, 3414,
	3566, 3617, 943, 2659, 62, 3497, 157, 133, 134, 3102,
	1165, 135, 3954, 3459, 2579, 1622, 190, 1250, 1623, 2386,
	933, 157, 934, 157, 3678, 3670, 2385, 3938, 157, 1426,
	1427, 1128, 157, 3643, 1245, 1246, 1247, 1248, 62, 1179,
	157, 3301, 1181, 62, 1426, 1427, 157, 157, 1826, 906,
	904, 2463, 157, 157, 1157, 641, 2341, 3150, 1454, 1422,
	2845, 3626, 2710, 3627, 617, 617, 891, 1415, 2406, 2407,
	1182, 1820, 2703, 617, 617, 3097, 3555, 1486, 1486, 3621,
	641, 157, 1471, 3626, 3087, 3627, 157, 2013, 3646, 1282,
	2981, 2354, 1470, 3561, 1164, 1418, 1417, 2334, 2357, 1401,
	1400, 667, 1514, 635, 3826, 157, 1327, 1488, 1525, 1525,
	1399, 3776, 3343, 3691, 1484, 1484, 3657, 3629, 3153, 210,
	3848, 1293, 1294, 2817, 1127, 2818, 2819, 3038, 617, 2707,
	2708, 2005, 1493, 3502, 2003, 2377, 1628, 2334, 1240, 3629,
	1658, 1661, 1662, 3443, 2706, 3252, 2905, 2907, 3628, 989,
	1175, 1659, 2351, 3173, 3174, 2356, 2716, 2719, 2720, 2721,
	2717, 2718, 1361, 3177, 1356, 3939, 677, 3089, 3804, 1459,
	3628, 2150, 1453, 1171, 3740, 3481, 1177, 2344, 3169, 3054,
	1567, 2571, 2452, 2372, 1243, 1572, 2135, 1372, 1180, 1183,
	1394, 3204, 1581, 3110, 2340, 2921, 2922, 1402, 2355, 2342,
	2983, 1378, 2673, 1326, 1412, 1480, 1481, 1365, 1324, 1377,
	1376, 1375, 1431, 1432, 1176, 1434, 1435, 1610, 1436, 3576,
	3577, 3578, 3582, 3580, 3581, 3579, 3303, 1410, 1411, 1822,
	671, 1486, 991, 1486, 1140, 990, 2147, 2148, 1466, 1468,
	3568, 2262, 1366, 3690, 2161, 1590, 3290, 1478, 1479, 2814,
	3170, 989, 1495, 2343, 2992, 2991, 647, 935, 1385, 1026,
	1170, 2678, 1449, 1576, 2341, 2344, 1026, 2836, 2837, 1387,
	1587, 937, 938, 939, 932, 2258, 2257, 2256, 1546, 1354,
	1549, 1550, 1543, 664, 1443, 1444, 1834, 1492, 132, 1605,
	1606, 1178, 1551, 1552, 1833, 1620, 1515, 3936, 3937, 3847,
	3482, 1486, 1538, 1557, 1558, 1430, 1352, 1353, 1433, 2345,
	2846, 2848, 2849, 2850, 2847, 2906, 1469, 1580, 1140, 1710,
	3056, 2255, 1832, 3111, 896, 2398, 3557, 3562, 3563, 897,
	3556, 3529, 1565, 1759, 991, 3955, 2432, 990, 1694, 2742,
	3950, 1396, 3962, 1405, 1409, 1409, 1409, 3814, 1207, 1494,
	2199, 3129, 646, 2198, 1562, 3210, 132, 1566, 1396, 1506,
	2463, 2350, 3206, 132, 1512, 2348, 900, 1526, 1405, 1405,
	3622, 1644, 3944, 1171, 3623, 3253, 132, 1357, 1358, 1527,
	2281, 1609, 1660, 1367, 1368, 1369, 1370, 1371, 132, 1373,
	1608, 2835, 3622, 2543, 2054, 1379, 3732, 2345, 3933, 1140,
	1137, 3306, 2340, 2334, 2339, 1821, 2337, 2342, 1209, 1210,
	1211, 1208, 1663, 2140, 1625, 1801, 3264, 899, 1837, 1838,
	989, 902, 901, 1514, 662, 2674, 1207, 2743, 1846, 1486,
	1851, 1852, 1599, 1854, 1454, 641, 1744, 663, 1598, 659,
	641, 1601, 1001, 1486, 2270, 3945, 661, 943, 1593, 1618,
	1874, 1615, 1823, 3171, 3015, 660, 2235, 2604, 1614, 1486,
	1630, 2343, 2433, 3897, 2371, 1454, 3868, 2271, 2272, 1804,
	658, 3898, 2570, 1619, 1617, 1616, 1613, 1758, 3862, 2743,
	2433, 1647, 1643, 1638, 3182, 1118, 1114, 1115, 1116, 1117,
	1899, 2609, 3844, 2608, 2607, 2605, 2280, 3210, 3180, 1906,
	1906, 3795, 1454, 991, 1454, 1454, 990, 1629, 641, 641,
	3770, 1973, 1846, 1977, 1682, 3048, 1486, 1980, 1981, 1993,
	3758, 1209, 1210, 1211, 1208, 1137, 1741, 1742, 3710, 1745,
	3046, 2433, 2924, 617, 2052, 1486, 3898, 1760, 1641, 3869,
	1689, 1690, 2690, 2664, 3709, 2314, 1207, 1903, 1855, 3704,
	1767, 2175, 1769, 1853, 1770, 1771, 1772, 878, 879, 880,
	881, 2606, 641, 1846, 1486, 3845, 2037, 2171, 641, 641,
	641, 675, 675, 2560, 2175, 3703, 2548, 1168, 2047, 2048,
	2049, 2050, 1807, 2140, 1169, 2056, 2131, 3702, 2029, 1994,
	2327, 2240, 210, 3759, 3701, 210, 210, 2234, 210, 1975,
	1171, 3711, 3681, 1668, 1669, 1670, 1671, 1672, 1673, 1674,
	1675, 1676, 1677, 1678, 1679, 1773, 1909, 2303, 1928, 1691,
	1692, 720, 2175, 1802, 2233, 1049, 1054, 1055, 2021, 2022,
	3680, 2206, 2122, 1209, 1210, 1211, 1208, 1808, 1759, 1759,
	2099, 2024, 1856, 1386, 1883, 1884, 1812, 1861, 2175, 1759,
	1759, 1697, 3655, 2007, 1169, 1472, 2115, 1999, 3419, 2001,
	2175, 1893, 1894, 1841, 2039, 2040, 2041, 2175, 1768, 2019,
	2020, 1321, 3946, 2014, 2065, 2140, 1907, 2068, 2069, 2313,
	2071, 1904, 1892, 3354, 2928, 2109, 2036, 1874, 1992, 2745,
	1870, 1486, 2129, 1871, 1897, 1875, 1877, 1878, 3367, 3333,
	2610, 2611, 1882, 2140, 1910, 1911, 883, 1888, 2573, 2572,
	1026, 3282, 2564, 1026, 2174, 1912, 1913, 1576, 2321, 2341,
	2344, 1026, 1749, 1750, 1751, 2175, 878, 879, 880, 881,
	3316, 2463, 2194, 2101, 2179, 1765, 1850, 2120, 1766, 664,
	1974, 2059, 2123, 2045, 1209, 1210, 1211, 1208, 1595, 3278,
	1866, 3190, 1979, 2900, 2105, 1779, 1780, 1887, 2639, 1889,
	1890, 132, 2008, 1258, 132, 132, 1880, 132, 1982, 2033,
	1023, 3368, 3334, 1896, 1800, 2033, 2033, 2033, 1998, 1156,
	2000, 1023, 2094, 1397, 3283, 1025, 1405, 2631, 1124, 3592,
	2173, 2034, 2586, 2094, 2568, 2556, 1025, 2550, 2035, 1119,
	1409, 2545, 2042, 2043, 1497, 2031, 3417, 1024, 1240, 2537,
	132, 2023, 1409, 2535, 2060, 2062, 1026, 2533, 1024, 1051,
	1052, 1053, 3279, 1850, 3191, 2531, 2433, 1224, 2302, 1059,
	1060, 1207, 132, 2236, 1064, 1842, 1843, 1844, 3134, 2079,
	2975, 2213, 2212, 3956, 3923, 3763, 898, 1857, 1858, 1859,
	1860, 2111, 2345, 2197, 2188, 2187, 2186, 2340, 2334, 2339,
	1207, 2337, 2342, 2100, 3530, 1207, 2108, 2303, 2546, 3238,
	2551, 1641, 2106, 2329, 2546, 883, 1023, 2119, 2245, 2246,
	662, 2249, 2538, 2176, 2252, 2369, 2536, 3743, 2118, 3764,
	2532, 1025, 2139, 663, 2117, 659, 3346, 3344, 2532, 2124,
	718, 2303, 661, 641, 641, 641, 2235, 3125, 3531, 1602,
	3654, 660, 1908, 1241, 1207, 1207, 2343, 2177, 641, 641,
	641, 641, 753, 763, 2523, 3614, 1207, 1207, 1207, 1207,
	3559, 2300, 754, 2593, 755, 759, 762, 758, 756, 757,
	3347, 3345, 2306, 1454, 2153, 2162, 2589, 1227, 1228, 1229,
	1230, 1231, 1224, 1437, 1447, 1448, 2175, 1450, 1451, 1406,
	1455, 1456, 1457, 2155, 1682, 2140, 2167, 1748, 1747, 1454,
	1223, 1222, 1232, 1233, 1225, 1226, 1227, 1228, 1229, 1230,
	1231, 1224, 1603, 3558, 3544, 3126, 2363, 760, 903, 2156,
	2157, 1501, 1502, 1503, 1504, 1505, 3505, 1507, 1508, 1509,
	1510, 1511, 1748, 1747, 3326, 1517, 1518, 1519, 1520, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1224, 1476, 2375, 761,
	3211, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 1477, 3127,
	2387, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396,
	2397, 1474, 2399, 2400, 2401, 2402, 2403, 3202, 2404, 2437,
	2437, 1993, 2437, 2318, 1392, 3196, 1688, 2320, 1393, 2322,
	1392, 2229, 2231, 2232, 1393, 3192, 2237, 2370, 2158, 2159,
	617, 617, 1685, 1687, 1684, 3105, 1686, 1407, 1140, 1785,
	2869, 2868, 2714, 2323, 1486, 641, 1223, 1222, 1232, 1233,
	1225, 1226, 1227, 1228, 1229, 1230, 1231, 1224, 2333, 641,
	2669, 2264, 2583, 2549, 2332, 1140, 2507, 635, 2454, 2104,
	2274, 2275, 2276, 1525, 1778, 1993, 2103, 1281, 2512, 2102,
	2514, 2458, 2282, 1026, 210, 2291, 2292, 2293, 2294, 1215,
	1216, 1217, 1218, 1219, 1220, 1221, 1213, 1382, 2154, 1381,
	2315, 1142, 1473, 2307, 2517, 2063, 1701, 2450, 2441, 2451,
	2439, 1701, 2443, 2168, 1836, 1530, 2326, 2063, 1209, 1210,
	1211, 1208, 2930, 3816, 2553, 1211, 1208, 2455, 2456, 3241,
	1208, 3571, 2319, 1209, 1210, 1211, 1208, 1209, 1210, 1211,
	1208, 2566, 3570, 1023, 2527, 2129, 2346, 2347, 2947, 2352,
	2806, 2804, 1486, 2782, 1486, 2465, 1486, 2780, 1025, 2562,
	2563, 1140, 1209, 1210, 1211, 1208, 2518, 3550, 1260, 2585,
	3929, 3239, 2511, 1209, 1210, 1211, 1208, 3506, 3507, 1763,
	2440, 1259, 2595, 3953, 3928, 2994, 1876, 3499, 3872, 2207,
	2208, 2576, 2210, 3314, 1764, 1486, 1140, 2857, 2855, 2217,
	2617, 2310, 2415, 3843, 1466, 1468, 2316, 1891, 3842, 2317,
	1209, 1210, 1211, 1208, 2445, 2624, 2713, 3765, 2684, 2519,
	1486, 3320, 2853, 1898, 2612, 2842, 1901, 1902, 1209, 1210,
	1211, 1208, 1484, 1209, 1210, 1211, 1208, 1531, 2652, 3706,
	2653, 2459, 2190, 3694, 1992, 3500, 3952, 2462, 3684, 2625,
	1409, 3315, 1492, 132, 2623, 2856, 2854, 1484, 3674, 3853,
	2508, 1209, 1210, 1211, 1208, 2597, 2033, 2597, 2671, 2672,
	3605, 2510, 2675, 1209, 1210, 1211, 1208, 3533, 2628, 2629,
	2852, 1530, 3532, 2841, 3359, 1282, 1209, 1210, 1211, 1208,
	1140, 3348, 3313, 3095, 1140, 2971, 2942, 2601, 2941, 2840,
	2839, 1486, 2582, 1212, 1454, 3008, 2838, 2830, 2824, 2189,
	1977, 1242, 2471, 2823, 2615, 2822, 2577, 2182, 2741, 2821,
	1252, 2591, 2665, 2700, 2747, 2539, 3477, 2558, 2239, 2082,
	2081, 2080, 2076, 2075, 2569, 2567, 1209, 1210, 1211, 1208,
	2030, 2656, 2757, 2574, 1829, 1827, 1261, 1596, 1209, 1210,
	1211, 1208, 1140, 1209, 1210, 1211, 1208, 1339, 713, 3325,
	2779, 715, 3080, 3647, 3648, 3007, 714, 1140, 1140, 1140,
	1906, 2587, 2588, 1140, 3465, 2790, 2791, 2792, 2793, 1140,
	2800, 1122, 2801, 2802, 1026, 2803, 2613, 2805, 2729, 2603,
	3949, 2738, 1209, 1210, 1211, 1208, 2726, 3947, 2800, 3453,
	3921, 1209, 1210, 1211, 1208, 3889, 3888, 3885, 2580, 3823,
	2437, 1209, 1210, 1211, 1208, 2812, 2813, 2725, 2711, 3822,
	2760, 3464, 3636, 3802, 2858, 2590, 3782, 3750, 2038, 3510,
	2828, 2829, 3726, 617, 3407, 2758, 2172, 3717, 1121, 1977,
	1140, 1993, 1993, 1993, 1993, 3698, 3693, 2748, 1209, 1210,
	1211, 1208, 3692, 1140, 1993, 2865, 1928, 2437, 3651, 1641,
	3638, 1209, 1210, 1211, 1208, 3637, 3606, 3552, 2777, 3514,
	3503, 3485, 2777, 1486, 2863, 2773, 3270, 2693, 2692, 2695,
	3483, 132, 3479, 3476, 641, 641, 2709, 3475, 3451, 2732,
	2784, 132, 3449, 3426, 3423, 2746, 3421, 2862, 3312, 2740,
	3011, 8, 3311, 1209, 1210, 1211, 1208, 3308, 3298, 7,
	2170, 2749, 1209, 1210, 1211, 1208, 3291, 2759, 3275, 2762,
	2754, 2755, 3010, 3273, 2775, 2739, 2781, 1209, 1210, 1211,
	1208, 3009, 3268, 3199, 3198, 3193, 2896, 2691, 3188, 3187,
	210, 2471, 2626, 3106, 3067, 210, 2788, 3066, 3062, 1209,
	1210, 1211, 1208, 3060, 3058, 3055, 2634, 2635, 1209, 1210,
	1211, 1208, 2640, 3053, 2820, 2244, 2925, 1759, 2985, 1759,
	2982, 2832, 2957, 1223, 1222, 1232, 1233, 1225, 1226, 1227,
	1228, 1229, 1230, 1231, 1224, 2970, 1209, 1210, 1211, 1208,
	2940, 1486, 2201, 2914, 2977, 2864, 2851, 2843, 2870, 2774,
	2883, 2884, 2885, 2886, 2833, 2831, 2827, 2867, 1850, 2826,
	1992, 1992, 1992, 1992, 2774, 2785, 2786, 2897, 2899, 2895,
	2789, 2825, 2931, 1992, 2679, 2677, 2796, 2935, 2756, 1524,
	1524, 2670, 2915, 2912, 2666, 2559, 1550, 2898, 1026, 2259,
	1746, 2254, 2952, 2650, 820, 819, 1551, 1552, 3778, 1026,
	1804, 2253, 2250, 2963, 2649, 2956, 1557, 1558, 1232, 1233,
	1225, 1226, 1227, 1228, 1229, 1230, 1231, 1224, 2908, 2085,
	1209, 1210, 1211, 1208, 2078, 2954, 1835, 1815, 2308, 2309,
	1565, 1209, 1210, 1211, 1208, 2964, 1814, 2882, 2311, 2312,
	1597, 2918, 2919, 2929, 2933, 3057, 2932, 2648, 1500, 1390,
	2882, 2979, 1562, 3061, 1348, 1566, 1346, 3064, 3065, 132,
	2647, 2953, 1289, 2974, 132, 1140, 2950, 2948, 1285, 2955,
	2967, 3083, 1284, 2966, 1209, 1210, 1211, 1208, 2965, 2973,
	2646, 3099, 1125, 887, 3631, 132, 641, 1209, 1210, 1211,
	1208, 2986, 3630, 3619, 3615, 3478, 132, 2987, 3115, 1140,
	3460, 3339, 641, 3006, 1140, 1140, 3338, 1209, 1210, 1211,
	1208, 2993, 3337, 1993, 2300, 3305, 3133, 2997, 2998, 3287,
	2778, 3285, 3002, 3003, 3284, 3000, 2999, 3281, 3001, 3280,
	3274, 3272, 3254, 2163, 3244, 2363, 3069, 3243, 3229, 1653,
	1654, 1655, 1656, 1657, 3228, 3135, 3047, 3159, 3070, 3162,
	3045, 3162, 3162, 3013, 3004, 2996, 1140, 1223, 1222, 1232,
	1233, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1224, 2995,
	2645, 1026, 3051, 1026, 3109, 3183, 3179, 3118, 1026, 3052,
	2989, 1698, 3122, 1486, 1486, 1702, 1703, 1704, 1705, 2923,
	3146, 3148, 2689, 2534, 3068, 1743, 2509, 1209, 1210, 1211,
	1208, 2530, 2725, 1753, 1026, 2516, 2529, 2218, 3142, 2211,
	3131, 2205, 3184, 3185, 2204, 3137, 2203, 2202, 2200, 3157,
	1484, 1484, 2196, 2195, 193, 3108, 184, 156, 2193, 2184,
	641, 1023, 2644, 2181, 3117, 2180, 3083, 2643, 3128, 3120,
	3121, 3132, 3158, 2084, 1798, 1454, 1025, 1797, 1977, 1977,
	1796, 1762, 2333, 3167, 1761, 1805, 3141, 2642, 2332, 1209,
	1210, 1211, 1208, 1752, 1209, 1210, 1211, 1208, 1024, 1498,
	132, 1496, 2772, 3163, 3164, 132, 2641, 3871, 1279, 3168,
	193, 3777, 1992, 3181, 1209, 1210, 1211, 1208, 3712, 3220,
	2638, 3700, 3695, 3107, 189, 1140, 3586, 3569, 3565, 2617,
	3543, 132, 3527, 1209, 1210, 1211, 1208, 3436, 3242, 3119,
	3140, 3434, 2774, 3405, 3404, 3794, 3685, 1209, 1210, 1211,
	1208, 3401, 3400, 3366, 3020, 3021, 3189, 3363, 1879, 3361,
	3022, 3023, 3024, 3025, 2637, 3026, 3027, 3028, 3029, 3030,
	3031, 3032, 3033, 3034, 3035, 3328, 2774, 3207, 3208, 3005,
	189, 2774, 2774, 1895, 641, 1545, 3195, 3201, 3200, 3205,
	3194, 1209, 1210, 1211, 1208, 1556, 3792, 2636, 3197, 3218,
	1223, 1222, 1232, 1233, 1225, 1226, 1227, 1228, 1229, 1230,
	1231, 1224, 1547, 1561, 1564, 3222, 3225, 3226, 3227, 1553,
	1389, 2859, 2783, 1451, 1209, 1210, 1211, 1208, 2734, 2733,
	2727, 2694, 2651, 2774, 3231, 2630, 3237, 1805, 2544, 2453,
	2405, 2301, 1805, 1805, 1222, 1232, 1233, 1225, 1226, 1227,
	1228, 1229, 1230, 1231, 1224, 2273, 2056, 3295, 2238, 3255,
	3297, 3541, 1209, 1210, 1211, 1208, 1683, 2033, 189, 2597,
	3256, 2044, 3257, 1840, 1811, 1626, 3790, 2620, 3261, 1579,
	1554, 1338, 1323, 1319, 1318, 2750, 1317, 3276, 1316, 1315,
	2753, 1314, 2064, 1313, 3260, 2067, 1312, 1311, 2070, 3266,
	1310, 2072, 641, 1977, 1209, 1210, 1211, 1208, 1309, 3299,
	1308, 1307, 1306, 3332, 1305, 1223, 1222, 1232, 1233, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1224, 1304, 1303, 2437,
	1993, 3351, 1302, 1301, 3329, 3330, 3331, 1300, 1299, 1298,
	3335, 3336, 1732, 1297, 1026, 3903, 2616, 1296, 3304, 3788,
	2592, 1026, 1295, 3292, 3369, 3307, 2114, 1140, 3294, 1292,
	3288, 2424, 2428, 2429, 2430, 2425, 3159, 2426, 2431, 1291,
	1140, 2427, 2471, 1209, 1210, 1211, 1208, 1209, 1210, 1211,
	1208, 1140, 1290, 3416, 1288, 1287, 1286, 1486, 1283, 3402,
	1696, 3263, 1276, 1275, 3165, 3353, 1273, 1272, 3321, 1271,
	1270, 1269, 3323, 1268, 1267, 641, 1266, 1977, 1265, 1264,
	1263, 1140, 1262, 1257, 1256, 3399, 3418, 1209, 1210, 1211,
	1208, 1255, 1254, 1253, 1484, 1173, 1123, 3350, 2305, 3349,
	3214, 3215, 2287, 1161, 3901, 3858, 3356, 3217, 2715, 2464,
	210, 132, 2087, 1172, 2892, 2890, 3219, 2889, 132, 2893,
	2891, 2888, 2887, 1140, 2894, 3427, 2429, 2430, 117, 2164,
	3430, 3406, 64, 2169, 3411, 3815, 3392, 3408, 63, 3438,
	3728, 2178, 3440, 3415, 3548, 2557, 2547, 3439, 1383, 1868,
	1869, 3420, 1863, 1864, 1865, 3424, 3422, 3104, 2373, 3155,
	3425, 3156, 2969, 3429, 3480, 3431, 3412, 3432, 3232, 1992,
	2542, 3428, 1965, 3488, 3258, 3259, 1728, 1140, 2185, 2033,
	1539, 2562, 2563, 1725, 2581, 1592, 2192, 1727, 1724, 1726,
	1730, 1731, 3444, 1573, 643, 1729, 3437, 2260, 644, 1140,
	1486, 1486, 2046, 1167, 645, 3115, 3454, 3078, 2209, 3455,
	3071, 2761, 3458, 2214, 2215, 2216, 3486, 3487, 2219, 2220,
	2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 3522, 3512,
	3522, 2735, 1140, 2325, 1140, 3537, 2296, 1484, 1694, 1872,
	1839, 3540, 3912, 3542, 3697, 3516, 3517, 3511, 3490, 3495,
	3186, 1486, 3494, 2808, 2416, 3493, 1748, 1747, 3504, 3513,
	2809, 2810, 2811, 1334, 1335, 1332, 1333, 1330, 1331, 641,
	2411, 1140, 1140, 1978, 3370, 1140, 1140, 3526, 1446, 132,
	1026, 1445, 2033, 3353, 3519, 3515, 3525, 3409, 1694, 1200,
	3588, 3224, 3536, 1328, 1329, 2917, 2261, 2116, 2796, 1398,
	3399, 3583, 3549, 3546, 1374, 1874, 1421, 3597, 3590, 3553,
	3878, 3876, 3591, 2101, 3836, 3812, 3601, 3602, 3811, 3573,
	3574, 3809, 3754, 3584, 3585, 3713, 3600, 3599, 2882, 1486,
	3538, 3450, 3277, 3251, 3250, 3594, 3360, 3235, 3362, 1735,
	1736, 1737, 1738, 1739, 1740, 1733, 1734, 2358, 2419, 2328,
	1594, 3392, 3593, 3633, 3234, 2927, 1396, 3296, 3613, 2972,
	3595, 2676, 3625, 3905, 3904, 3904, 1484, 2289, 2183, 1342,
	2882, 1158, 3905, 3567, 3230, 1137, 1413, 132, 197, 3,
	3608, 3612, 72, 2, 3925, 2424, 2428, 2429, 2430, 2425,
	3620, 2426, 2431, 3624, 3136, 2427, 3926, 1, 3666, 3138,
	3139, 878, 879, 880, 881, 2657, 1137, 1809, 1336, 882,
	877, 1463, 3660, 2446, 1140, 2025, 1490, 1813, 884, 2901,
	2902, 3223, 2904, 3683, 2774, 2680, 3650, 2136, 2871, 2409,
	2277, 1805, 3098, 1805, 1384, 936, 1754, 1607, 3689, 1048,
	3663, 1151, 1604, 3662, 1150, 1148, 1699, 767, 2090, 2860,
	2834, 1805, 1805, 3679, 3596, 3675, 3911, 1140, 3941, 3870,
	3914, 1624, 1486, 1026, 751, 3803, 3466, 3658, 3467, 3718,
	3874, 3720, 3661, 3611, 3458, 2141, 3572, 1205, 2949, 1647,
	3696, 1647, 961, 808, 1524, 778, 1274, 3708, 1585, 3018,
	3016, 3707, 1050, 777, 3318, 2705, 2920, 3668, 1047, 1484,
	3442, 962, 2073, 3739, 3715, 3705, 3609, 1540, 1544, 2324,
	3676, 3746, 3773, 3734, 3547, 3151, 2769, 1568, 3768, 3364,
	3714, 3470, 3468, 3469, 683, 3209, 2004, 615, 1008, 3587,
	2086, 684, 2304, 3828, 2552, 3699, 2555, 916, 2286, 917,
	909, 3221, 3474, 2723, 2722, 1664, 1214, 1681, 3036, 3037,
	3755, 1251, 722, 2166, 2702, 3744, 3756, 3545, 3387, 2913,
	132, 3760, 3761, 71, 3749, 70, 69, 3551, 68, 218,
	769, 1140, 3757, 217, 3634, 3508, 3799, 3916, 3772, 1486,
	3766, 748, 3797, 3800, 747, 746, 3787, 3789, 3791, 3793,
	745, 744, 3781, 743, 3771, 2423, 2421, 3801, 2420, 3780,
	2594, 3589, 1988, 2600, 1987, 2053, 3376, 3113, 3796, 2799,
	2794, 1917, 1915, 2787, 2618, 2619, 1484, 2353, 2360, 3786,
	1914, 3855, 2621, 2622, 3808, 3806, 3267, 1486, 3461, 3783,
	3666, 3784, 3564, 2844, 3457, 1862, 2349, 1934, 2627, 2815,
	1931, 1930, 2807, 3560, 3821, 3388, 3846, 3554, 1962, 3664,
	3521, 3837, 3854, 3371, 3372, 3378, 3838, 2295, 3379, 1073,
	3839, 1647, 1069, 1071, 1484, 1072, 1653, 1805, 1070, 3374,
	3840, 3841, 2602, 3203, 3396, 3397, 2330, 3073, 2269, 2268,
	3375, 2266, 2265, 1359, 3745, 3824, 3863, 3489, 3864, 2469,
	3865, 3884, 3866, 3877, 3867, 3879, 3880, 2467, 1120, 3216,
	3875, 3873, 3212, 2098, 2112, 2968, 1989, 1140, 3734, 3883,
	1985, 949, 2873, 2417, 3641, 1867, 910, 3380, 2284, 41,
	115, 105, 173, 56, 3886, 3887, 172, 3893, 55, 113,
	170, 54, 100, 3894, 3896, 3895, 3899, 3689, 99, 3902,
	3910, 112, 3918, 3900, 168, 2751, 2752, 3917, 3906, 3907,
	3908, 3909, 53, 202, 201, 204, 203, 200, 2520, 2521,
	199, 3930, 3922, 1140, 1528, 198, 3813, 3524, 872, 44,
	43, 174, 3931, 42, 3932, 106, 3352, 3934, 57, 40,
	3940, 946, 947, 39, 3943, 3355, 3772, 1774, 1775, 1776,
	1777, 38, 989, 1781, 1782, 1783, 1784, 1786, 1787, 1788,
	1789, 1790, 1791, 1792, 1793, 1794, 1795, 34, 13, 12,
	3951, 35, 3395, 22, 2339, 21, 3918, 3958, 1235, 3957,
	1239, 3917, 1611, 20, 26, 32, 31, 3943, 3959, 125,
	124, 30, 123, 3963, 122, 121, 1236, 1238, 1234, 3384,
	1237, 1223, 1222, 1232, 1233, 1225, 1226, 1227, 1228, 1229,
	1230, 1231, 1224, 120, 119, 29, 19, 48, 47, 46,
	9, 3381, 3385, 3383, 3382, 111, 109, 695, 694, 701,
	691, 28, 110, 107, 103, 991, 101, 83, 990, 698,
	699, 82, 700, 704, 81, 96, 685, 95, 94, 93,
	193, 61, 184, 156, 92, 91, 709, 89, 90, 3390,
	3391, 960, 80, 79, 78, 77, 76, 98, 185, 104,
	102, 87, 97, 88, 86, 177, 975, 85, 84, 186,
	75, 74, 73, 154, 950, 153, 152, 151, 150, 148,
	149, 147, 146, 1209, 1210, 1211, 1208, 145, 130, 144,
	713, 143, 3539, 715, 142, 49, 50, 3398, 714, 51,
	52, 952, 164, 118, 3891, 2934, 163, 2936, 165, 3377,
	189, 167, 169, 166, 171, 3389, 161, 159, 162, 160,
	158, 66, 11, 114, 18, 25, 1805, 4, 0, 0,
	0, 1805, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2114, 0, 3534, 3535, 1223, 1222, 1232, 1233,
	1225, 1226, 1227, 1228, 1229, 1230, 1231, 1224, 3014, 0,
	1647, 0, 1732, 0, 974, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2988, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 138, 139, 0,
	140, 141, 0, 0, 0, 0, 0, 0, 945, 0,
	0, 0, 0, 0, 0, 3012, 0, 0, 0, 951,
	984, 0, 1223, 1222, 1232, 1233, 1225, 1226, 1227, 1228,
	1229, 1230, 1231, 1224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 980, 0, 0, 686, 688, 687, 0,
	0, 0, 0, 0, 0, 3394, 693, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 697, 155,
	183, 191, 0, 116, 0, 712, 0, 0, 0, 981,
	985, 0, 690, 0, 0, 0, 680, 0, 0, 0,
	0, 182, 176, 175, 0, 0, 0, 0, 67, 968,
	0, 966, 970, 988, 0, 0, 0, 967, 964, 963,
	0, 969, 954, 955, 953, 956, 957, 958, 959, 0,
	986, 0, 987, 0, 0, 0, 0, 0, 0, 0,
	0, 3393, 0, 982, 983, 0, 1728, 0, 0, 0,
	0, 0, 0, 1725, 0, 0, 0, 1727, 1724, 1726,
	1730, 1731, 0, 0, 0, 1729, 0, 0, 0, 178,
	179, 180, 0, 0, 0, 0, 1732, 0, 0, 0,
	978, 0, 0, 0, 0, 3166, 977, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 973, 692, 696, 702, 0, 703, 705, 0, 0,
	706, 707, 708, 0, 0, 710, 711, 0, 0, 0,
	0, 126, 0, 0, 0, 181, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 976,
	0, 0, 0, 0, 128, 948, 944, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 1713, 1714,
	1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1735,
	1736, 1737, 1738, 1739, 1740, 1733, 1734, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1728, 0, 0, 0, 0, 0, 62, 1725, 0, 0,
	0, 1727, 1724, 1726, 1730, 1731, 0, 0, 0, 1729,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 689, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 190, 0, 137, 0, 0, 0, 0, 157,
	0, 0, 0, 193, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 383, 0, 507, 540, 529, 613, 495,
	3269, 0, 0, 0, 0, 0, 0, 3271, 0, 0,
	323, 0, 0, 353, 544, 526, 536, 527, 512, 513,
	514, 521, 333, 515, 516, 517, 487, 518, 488, 519,
	520, 130, 543, 494, 412, 367, 561, 560, 3286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 45, 0, 189, 0, 0, 215, 59, 0, 0,
	0, 0, 0, 296, 216, 489, 609, 491, 490, 0,
	133, 134, 0, 0, 135, 0, 0, 0, 299, 2341,
	2344, 0, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720,
	1721, 1722, 1723, 1735, 1736, 1737, 1738, 1739, 1740, 1733,
	1734, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 418, 435, 297, 408, 448, 302, 415, 292, 382,
	405, 0, 0, 288, 433, 414, 364, 343, 344, 287,
	0, 400, 321, 335, 318, 380, 0, 432, 460, 317,
	451, 0, 443, 290, 0, 442, 379, 429, 434, 365,
	359, 0, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 1805,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 1805, 0, 0, 3433, 0, 602, 3435,
	0, 606, 2345, 445, 0, 0, 0, 2340, 0, 2339,
	417, 2337, 2342, 350, 0, 0, 3441, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 2343, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 157, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1261, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3779, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	785, 0, 0, 0, 0, 0, 0, 0, 0, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 737, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 776, 543, 494,
	412, 367, 561, 560, 0, 0, 843, 851, 0, 3851,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 729,
	0, 0, 766, 820, 819, 753, 763, 0, 0, 296,
	216, 489, 609, 491, 490, 754, 0, 755, 759, 762,
	758, 756, 757, 0, 835, 0, 0, 0, 0, 0,
	0, 721, 733, 0, 738, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 730, 731,
	3851, 0, 0, 0, 786, 0, 732, 0, 0, 781,
	760, 764, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 761, 784, 788, 317, 857, 782, 443, 290,
	3851, 442, 379, 429, 434, 365, 359, 0, 289, 431,
	363, 358, 347, 325, 858, 348, 349, 339, 391, 357,
	392, 340, 369, 368, 370, 0, 0, 0, 0, 0,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 602, 779, 0, 606, 0, 445,
	0, 0, 841, 0, 0, 0, 417, 0, 3961, 350,
	0, 0, 0, 783, 0, 403, 385, 854, 0, 0,
	401, 355, 430, 393, 436, 419, 444, 397, 394, 281,
	420, 320, 366, 293, 295, 315, 322, 324, 326, 327,
	375, 376, 388, 407, 421, 422, 423, 319, 303, 402,
	304, 337, 305, 282, 311, 309, 312, 409, 313, 284,
	389, 427, 0, 332, 398, 362, 285, 361, 390, 426,
	425, 294, 452, 458, 459, 548, 0, 464, 629, 630,
	631, 473, 478, 479, 480, 482, 483, 484, 485, 549,
	566, 533, 503, 466, 557, 500, 504, 505, 569, 1756,
	1755, 1757, 457, 351, 352, 0, 330, 278, 279, 624,
	839, 381, 571, 604, 605, 496, 0, 853, 834, 836,
	837, 840, 844, 845, 846, 847, 848, 850, 852, 856,
	623, 0, 550, 565, 627, 564, 620, 387, 0, 406,
	562, 509, 0, 554, 528, 0, 555, 524, 559, 0,
	498, 0, 413, 438, 450, 467, 470, 499, 584, 585,
	586, 283, 469, 588, 589, 590, 591, 592, 593, 594,
	587, 855, 531, 508, 534, 449, 511, 510, 0, 0,
	545, 787, 546, 547, 371, 372, 373, 374, 842, 572,
	301, 468, 396, 0, 532, 0, 0, 0, 0, 0,
	0, 0, 0, 537, 538, 535, 632, 0, 595, 596,
	0, 0, 462, 463, 329, 336, 481, 338, 300, 386,
	331, 447, 345, 0, 474, 539, 475, 598, 601, 599,
	600, 378, 341, 342, 410, 346, 356, 399, 446, 384,
	404, 298, 437, 411, 360, 525, 552, 864, 838, 863,
	865, 866, 862, 867, 868, 849, 742, 0, 794, 860,
	859, 861, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 580, 579, 578, 577, 576, 575, 574,
	573, 0, 0, 522, 424, 310, 272, 306, 307, 314,
	621, 618, 428, 622, 749, 280, 502, 354, 0, 395,
	328, 567, 568, 0, 0, 827, 801, 802, 803, 739,
	804, 798, 799, 740, 800, 828, 792, 824, 825, 768,
	795, 805, 823, 806, 826, 829, 830, 869, 870, 812,
	796, 244, 871, 809, 831, 822, 821, 807, 793, 832,
	833, 775, 770, 810, 811, 797, 815, 816, 817, 741,
	789, 790, 791, 813, 814, 771, 772, 773, 774, 0,
	0, 0, 453, 454, 455, 477, 0, 439, 501, 619,
	0, 0, 0, 0, 0, 0, 0, 551, 563, 597,
	0, 607, 608, 610, 612, 818, 614, 416, 785, 0,
	625, 492, 493, 626, 603, 0, 734, 383, 0, 507,
	540, 529, 613, 495, 0, 0, 0, 0, 0, 0,
	737, 0, 0, 0, 323, 1806, 0, 353, 544, 526,
	536, 527, 512, 513, 514, 521, 333, 515, 516, 517,
	487, 518, 488, 519, 520, 776, 543, 494, 412, 367,
	561, 560, 0, 0, 843, 851, 0, 0, 0, 0,
	0, 0, 0, 0, 2016, 0, 0, 729, 0, 0,
	766, 820, 819, 753, 763, 0, 0, 296, 216, 489,
	609, 491, 490, 754, 0, 755, 759, 762, 758, 756,
	757, 0, 835, 0, 0, 0, 0, 0, 0, 721,
	733, 0, 738, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 730, 731, 0, 0,
	0, 0, 786, 0, 732, 0, 0, 2017, 760, 764,
	0, 0, 0, 0, 286, 418, 435, 297, 408, 448,
	302, 415, 292, 382, 405, 0, 0, 288, 433, 414,
	364, 343, 344, 287, 0, 400, 321, 335, 318, 380,
	761, 784, 788, 317, 857, 782, 443, 290, 0, 442,
	379, 429, 434, 365, 359, 0, 289, 431, 363, 358,
	347, 325, 858, 348, 349, 339, 391, 357, 392, 340,
	369, 368, 370, 0, 0, 0, 0, 0, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 602, 779, 0, 606, 0, 445, 0, 0,
	841, 0, 0, 0, 417, 0, 0, 350, 0, 0,
	0, 783, 0, 403, 385, 854, 0, 0, 401, 355,
	430, 393, 436, 419, 444, 397, 394, 281, 420, 320,
	366, 293, 295, 315, 322, 324, 326, 327, 375, 376,
	388, 407, 421, 422, 423, 319, 303, 402, 304, 337,
	305, 282, 311, 309, 312, 409, 313, 284, 389, 427,
	0, 332, 398, 362, 285, 361, 390, 426, 425, 294,
	452, 458, 459, 548, 0, 464, 629, 630, 631, 473,
	478, 479, 480, 482, 483, 484, 485, 549, 566, 533,
	503, 466, 557, 500, 504, 505, 569, 0, 0, 0,
	457, 351, 352, 0, 330, 278, 279, 624, 839, 381,
	571, 604, 605, 496, 0, 853, 834, 836, 837, 840,
	844, 845, 846, 847, 848, 850, 852, 856, 623, 0,
	550, 565, 627, 564, 620, 387, 0, 406, 562, 509,
	0, 554, 528, 0, 555, 524, 559, 0, 498, 0,
	413, 438, 450, 467, 470, 499, 584, 585, 586, 283,
	469, 588, 589, 590, 591, 592, 593, 594, 587, 855,
	531, 508, 534, 449, 511, 510, 0, 0, 545, 787,
	546, 547, 371, 372, 373, 374, 842, 572, 301, 468,
	396, 0, 532, 0, 0, 0, 0, 0, 0, 0,
	0, 537, 538, 535, 632, 0, 595, 596, 0, 0,
	462, 463, 329, 336, 481, 338, 300, 386, 331, 447,
	345, 0, 474, 539, 475, 598, 601, 599, 600, 378,
	341, 342, 410, 346, 356, 399, 446, 384, 404, 298,
	437, 411, 360, 525, 552, 864, 838, 863, 865, 866,
	862, 867, 868, 849, 742, 0, 794, 860, 859, 861,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 579, 578, 577, 576, 575, 574, 573, 0,
	0, 522, 424, 310, 272, 306, 307, 314, 621, 618,
	428, 622, 749, 280, 502, 354, 0, 395, 328, 567,
	568, 0, 0, 827, 801, 802, 803, 739, 804, 798,
	799, 740, 800, 828, 792, 824, 825, 768, 795, 805,
	823, 806, 826, 829, 830, 869, 870, 812, 796, 244,
	871, 809, 831, 822, 821, 807, 793, 832, 833, 775,
	770, 810, 811, 797, 815, 816, 817, 741, 789, 790,
	791, 813, 814, 771, 772, 773, 774, 0, 0, 0,
	453, 454, 455, 477, 0, 439, 501, 619, 0, 0,
	0, 0, 0, 0, 0, 551, 563, 597, 0, 607,
	608, 610, 612, 818, 614, 416, 193, 785, 625, 492,
	493, 626, 603, 0, 734, 0, 383, 0, 507, 540,
	529, 613, 495, 0, 0, 0, 0, 0, 0, 737,
	0, 0, 0, 323, 0, 0, 353, 544, 526, 536,
	527, 512, 513, 514, 521, 333, 515, 516, 517, 487,
	518, 488, 519, 520, 1244, 543, 494, 412, 367, 561,
	560, 0, 0, 843, 851, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 729, 0, 0, 766,
	820, 819, 753, 763, 0, 0, 296, 216, 489, 609,
	491, 490, 754, 0, 755, 759, 762, 758, 756, 757,
	0, 835, 0, 0, 0, 0, 0, 0, 721, 733,
	0, 738, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 730, 731, 0, 0, 0,
	0, 786, 0, 732, 0, 0, 781, 760, 764, 0,
	0, 0, 0, 286, 418, 435, 297, 408, 448, 302,
	415, 292, 382, 405, 0, 0, 288, 433, 414, 364,
	343, 344, 287, 0, 400, 321, 335, 318, 380, 761,
	784, 788, 317, 857, 782, 443, 290, 0, 442, 379,
	429, 434, 365, 359, 0, 289, 431, 363, 358, 347,
	325, 858, 348, 349, 339, 391, 357, 392, 340, 369,
	368, 370, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 602, 779, 0, 606, 0, 445, 0, 0, 841,
	0, 0, 0, 417, 0, 0, 350, 0, 0, 0,
	783, 0, 403, 385, 854, 0, 0, 401, 355, 430,
	393, 436, 419, 444, 397, 394, 281, 420, 320, 366,
	293, 295, 315, 322, 324, 326, 327, 375, 376, 388,
	407, 421, 422, 423, 319, 303, 402, 304, 337, 305,
	282, 311, 309, 312, 409, 313, 284, 389, 427, 0,
	332, 398, 362, 285, 361, 390, 426, 425, 294, 452,
	458, 459, 548, 0, 464, 629, 630, 631, 473, 478,
	479, 480, 482, 483, 484, 485, 549, 566, 533, 503,
	466, 557, 500, 504, 505, 569, 0, 0, 0, 457,
	351, 352, 0, 330, 278, 279, 624, 839, 381, 571,
	604, 605, 496, 0, 853, 834, 836, 837, 840, 844,
	845, 846, 847, 848, 850, 852, 856, 623, 0, 550,
	565, 627, 564, 620, 387, 0, 406, 562, 509, 0,
	554, 528, 0, 555, 524, 559, 0, 498, 0, 413,
	438, 450, 467, 470, 499, 584, 585, 586, 283, 469,
	588, 589, 590, 591, 592, 593, 594, 587, 855, 531,
	508, 534, 449, 511, 510, 0, 0, 545, 787, 546,
	547, 371, 372, 373, 374, 842, 572, 301, 468, 396,
	0, 532, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 538, 535, 632, 0, 595, 596, 0, 0, 462,
	463, 329, 336, 481, 338, 300, 386, 331, 447, 345,
	0, 474, 539, 475, 598, 601, 599, 600, 378, 341,
	342, 410, 346, 356, 399, 446, 384, 404, 298, 437,
	411, 360, 525, 552, 864, 838, 863, 865, 866, 862,
	867, 868, 849, 742, 0, 794, 860, 859, 861, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	580, 579, 578, 577, 576, 575, 574, 573, 0, 0,
	522, 424, 310, 272, 306, 307, 314, 621, 618, 428,
	622, 749, 280, 502, 354, 157, 395, 328, 567, 568,
	0, 0, 827, 801, 802, 803, 739, 804, 798, 799,
	740, 800, 828, 792, 824, 825, 768, 795, 805, 823,
	806, 826, 829, 830, 869, 870, 812, 796, 244, 871,
	809, 831, 822, 821, 807, 793, 832, 833, 775, 770,
	810, 811, 797, 815, 816, 817, 741, 789, 790, 791,
	813, 814, 771, 772, 773, 774, 0, 0, 0, 453,
	454, 455, 477, 0, 439, 501, 619, 0, 0, 0,
	0, 0, 0, 0, 551, 563, 597, 0, 607, 608,
	610, 612, 818, 614, 416, 785, 0, 625, 492, 493,
	626, 603, 0, 734, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 737, 0, 0,
	0, 323, 3960, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 776, 543, 494, 412, 367, 561, 560, 0,
	0, 843, 851, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 729, 0, 0, 766, 820, 819,
	753, 763, 0, 0, 296, 216, 489, 609, 491, 490,
	754, 0, 755, 759, 762, 758, 756, 757, 0, 835,
	0, 0, 0, 0, 0, 0, 721, 733, 0, 738,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 730, 731, 0, 0, 0, 0, 786,
	0, 732, 0, 0, 781, 760, 764, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 761, 784, 788,
	317, 857, 782, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 0, 289, 431, 363, 358, 347, 325, 858,
	348, 349, 339, 391, 357, 392, 340, 369, 368, 370,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	779, 0, 606, 0, 445, 0, 0, 841, 0, 0,
	0, 417, 0, 0, 350, 0, 0, 0, 783, 0,
	403, 385, 854, 0, 0, 401, 355, 430, 393, 436,
	419, 444, 397, 394, 281, 420, 320, 366, 293, 295,
	315, 322, 324, 326, 327, 375, 376, 388, 407, 421,
	422, 423, 319, 303, 402, 304, 337, 305, 282, 311,
	309, 312, 409, 313, 284, 389, 427, 0, 332, 398,
	362, 285, 361, 390, 426, 425, 294, 452, 458, 459,
	548, 0, 464, 629, 630, 631, 473, 478, 479, 480,
	482, 483, 484, 485, 549, 566, 533, 503, 466, 557,
	500, 504, 505, 569, 0, 0, 0, 457, 351, 352,
	0, 330, 278, 279, 624, 839, 381, 571, 604, 605,
	496, 0, 853, 834, 836, 837, 840, 844, 845, 846,
	847, 848, 850, 852, 856, 623, 0, 550, 565, 627,
	564, 620, 387, 0, 406, 562, 509, 0, 554, 528,
	0, 555, 524, 559, 0, 498, 0, 413, 438, 450,
	467, 470, 499, 584, 585, 586, 283, 469, 588, 589,
	590, 591, 592, 593, 594, 587, 855, 531, 508, 534,
	449, 511, 510, 0, 0, 545, 787, 546, 547, 371,
	372, 373, 374, 842, 572, 301, 468, 396, 0, 532,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 538,
	535, 632, 0, 595, 596, 0, 0, 462, 463, 329,
	336, 481, 338, 300, 386, 331, 447, 345, 0, 474,
	539, 475, 598, 601, 599, 600, 378, 341, 342, 410,
	346, 356, 399, 446, 384, 404, 298, 437, 411, 360,
	525, 552, 864, 838, 863, 865, 866, 862, 867, 868,
	849, 742, 0, 794, 860, 859, 861, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 579,
	578, 577, 576, 575, 574, 573, 0, 0, 522, 424,
	310, 272, 306, 307, 314, 621, 618, 428, 622, 749,
	280, 502, 354, 0, 395, 328, 567, 568, 0, 0,
	827, 801, 802, 803, 739, 804, 798, 799, 740, 800,
	828, 792, 824, 825, 768, 795, 805, 823, 806, 826,
	829, 830, 869, 870, 812, 796, 244, 871, 809, 831,
	822, 821, 807, 793, 832, 833, 775, 770, 810, 811,
	797, 815, 816, 817, 741, 789, 790, 791, 813, 814,
	771, 772, 773, 774, 0, 0, 0, 453, 454, 455,
	477, 0, 439, 501, 619, 0, 0, 0, 0, 0,
	0, 0, 551, 563, 597, 0, 607, 608, 610, 612,
	818, 614, 416, 785, 0, 625, 492, 493, 626, 603,
	0, 734, 383, 0, 507, 540, 529, 613, 495, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 323,
	0, 0, 353, 544, 526, 536, 527, 512, 513, 514,
	521, 333, 515, 516, 517, 487, 518, 488, 519, 520,
	776, 543, 494, 412, 367, 561, 560, 0, 0, 843,
	851, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 729, 0, 0, 766, 820, 819, 753, 763,
	0, 0, 296, 216, 489, 609, 491, 490, 754, 0,
	755, 759, 762, 758, 756, 757, 0, 835, 0, 0,
	0, 0, 0, 0, 721, 733, 0, 738, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 730, 731, 0, 0, 0, 0, 786, 0, 732,
	0, 0, 781, 760, 764, 0, 0, 0, 0, 286,
	418, 435, 297, 408, 448, 302, 415, 292, 382, 405,
	0, 0, 288, 433, 414, 364, 343, 344, 287, 0,
	400, 321, 335, 318, 380, 761, 784, 788, 317, 857,
	782, 443, 290, 0, 442, 379, 429, 434, 365, 359,
	0, 289, 431, 363, 358, 347, 325, 858, 348, 349,
	339, 391, 357, 392, 340, 369, 368, 370, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 779, 0,
	606, 0, 445, 0, 0, 841, 0, 0, 0, 417,
	0, 0, 350, 0, 0, 0, 783, 0, 403, 385,
	854, 3852, 0, 401, 355, 430, 393, 436, 419, 444,
	397, 394, 281, 420, 320, 366, 293, 295, 315, 322,
	324, 326, 327, 375, 376, 388, 407, 421, 422, 423,
	319, 303, 402, 304, 337, 305, 282, 311, 309, 312,
	409, 313, 284, 389, 427, 0, 332, 398, 362, 285,
	361, 390, 426, 425, 294, 452, 458, 459, 548, 0,
	464, 629, 630, 631, 473, 478, 479, 480, 482, 483,
	484, 485, 549, 566, 533, 503, 466, 557, 500, 504,
	505, 569, 0, 0, 0, 457, 351, 352, 0, 330,
	278, 279, 624, 839, 381, 571, 604, 605, 496, 0,
	853, 834, 836, 837, 840, 844, 845, 846, 847, 848,
	850, 852, 856, 623, 0, 550, 565, 627, 564, 620,
	387, 0, 406, 562, 509, 0, 554, 528, 0, 555,
	524, 559, 0, 498, 0, 413, 438, 450, 467, 470,
	499, 584, 585, 586, 283, 469, 588, 589, 590, 591,
	592, 593, 594, 587, 855, 531, 508, 534, 449, 511,
	510, 0, 0, 545, 787, 546, 547, 371, 372, 373,
	374, 842, 572, 301, 468, 396, 0, 532, 0, 0,
	0, 0, 0, 0, 0, 0, 537, 538, 535, 632,
	0, 595, 596, 0, 0, 462, 463, 329, 336, 481,
	338, 300, 386, 331, 447, 345, 0, 474, 539, 475,
	598, 601, 599, 600, 378, 341, 342, 410, 346, 356,
	399, 446, 384, 404, 298, 437, 411, 360, 525, 552,
	864, 838, 863, 865, 866, 862, 867, 868, 849, 742,
	0, 794, 860, 859, 861, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 579, 578, 577,
	576, 575, 574, 573, 0, 0, 522, 424, 310, 272,
	306, 307, 314, 621, 618, 428, 622, 749, 280, 502,
	354, 0, 395, 328, 567, 568, 0, 0, 827, 801,
	802, 803, 739, 804, 798, 799, 740, 800, 828, 792,
	824, 825, 768, 795, 805, 823, 806, 826, 829, 830,
	869, 870, 812, 796, 244, 871, 809, 831, 822, 821,
	807, 793, 832, 833, 775, 770, 810, 811, 797, 815,
	816, 817, 741, 789, 790, 791, 813, 814, 771, 772,
	773, 774, 0, 0, 0, 453, 454, 455, 477, 0,
	439, 501, 619, 0, 0, 0, 0, 0, 0, 0,
	551, 563, 597, 0, 607, 608, 610, 612, 818, 614,
	416, 785, 0, 625, 492, 493, 626, 603, 0, 734,
	383, 0, 507, 540, 529, 613, 495, 0, 0, 0,
	0, 0, 0, 737, 0, 0, 0, 323, 1806, 0,
	353, 544, 526, 536, 527, 512, 513, 514, 521, 333,
	515, 516, 517, 487, 518, 488, 519, 520, 776, 543,
	494, 412, 367, 561, 560, 0, 0, 843, 851, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	729, 0, 0, 766, 820, 819, 753, 763, 0, 0,
	296, 216, 489, 609, 491, 490, 754, 0, 755, 759,
	762, 758, 756, 757, 0, 835, 0, 0, 0, 0,
	0, 0, 721, 733, 0, 738, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 730,
	731, 0, 0, 0, 0, 786, 0, 732, 0, 0,
	781, 760, 764, 0, 0, 0, 0, 286, 418, 435,
	297, 408, 448, 302, 415, 292, 382, 405, 0, 0,
	288, 433, 414, 364, 343, 344, 287, 0, 400, 321,
	335, 318, 380, 761, 784, 788, 317, 857, 782, 443,
	290, 0, 442, 379, 429, 434, 365, 359, 0, 289,
	431, 363, 358, 347, 325, 858, 348, 349, 339, 391,
	357, 392, 340, 369, 368, 370, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 779, 0, 606, 0,
	445, 0, 0, 841, 0, 0, 0, 417, 0, 0,
	350, 0, 0, 0, 783, 0, 403, 385, 854, 0,
	0, 401, 355, 430, 393, 436, 419, 444, 397, 394,
	281, 420, 320, 366, 293, 295, 315, 322, 324, 326,
	327, 375, 376, 388, 407, 421, 422, 423, 319, 303,
	402, 304, 337, 305, 282, 311, 309, 312, 409, 313,
	284, 389, 427, 0, 332, 398, 362, 285, 361, 390,
	426, 425, 294, 452, 458, 459, 548, 0, 464, 629,
	630, 631, 473, 478, 479, 480, 482, 483, 484, 485,
	549, 566, 533, 503, 466, 557, 500, 504, 505, 569,
	0, 0, 0, 457, 351, 352, 0, 330, 278, 279,
	624, 839, 381, 571, 604, 605, 496, 0, 853, 834,
	836, 837, 840, 844, 845, 846, 847, 848, 850, 852,
	856, 623, 0, 550, 565, 627, 564, 620, 387, 0,
	406, 562, 509, 0, 554, 528, 0, 555, 524, 559,
	0, 498, 0, 413, 438, 450, 467, 470, 499, 584,
	585, 586, 283, 469, 588, 589, 590, 591, 592, 593,
	594, 587, 855, 531, 508, 534, 449, 511, 510, 0,
	0, 545, 787, 546, 547, 371, 372, 373, 374, 842,
	572, 301, 468, 396, 0, 532, 0, 0, 0, 0,
	0, 0, 0, 0, 537, 538, 535, 632, 0, 595,
	596, 0, 0, 462, 463, 329, 336, 481, 338, 300,
	386, 331, 447, 345, 0, 474, 539, 475, 598, 601,
	599, 600, 378, 341, 342, 410, 346, 356, 399, 446,
	384, 404, 298, 437, 411, 360, 525, 552, 864, 838,
	863, 865, 866, 862, 867, 868, 849, 742, 0, 794,
	860, 859, 861, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 579, 578, 577, 576, 575,
	574, 573, 0, 0, 522, 424, 310, 272, 306, 307,
	314, 621, 618, 428, 622, 749, 280, 502, 354, 0,
	395, 328, 567, 568, 0, 0, 827, 801, 802, 803,
	739, 804, 798, 799, 740, 800, 828, 792, 824, 825,
	768, 795, 805, 823, 806, 826, 829, 830, 869, 870,
	812, 796, 244, 871, 809, 831, 822, 821, 807, 793,
	832, 833, 775, 770, 810, 811, 797, 815, 816, 817,
	741, 789, 790, 791, 813, 814, 771, 772, 773, 774,
	0, 0, 0, 453, 454, 455, 477, 0, 439, 501,
	619, 0, 0, 0, 0, 0, 0, 0, 551, 563,
	597, 0, 607, 608, 610, 612, 818, 614, 416, 785,
	0, 625, 492, 493, 626, 603, 0, 734, 383, 0,
	507, 540, 529, 613, 495, 0, 0, 0, 0, 0,
	0, 737, 0, 0, 0, 323, 0, 0, 353, 544,
	526, 536, 527, 512, 513, 514, 521, 333, 515, 516,
	517, 487, 518, 488, 519, 520, 776, 543, 494, 412,
	367, 561, 560, 0, 0, 843, 851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 729, 0,
	0, 766, 820, 819, 753, 763, 0, 0, 296, 216,
	489, 609, 491, 490, 754, 0, 755, 759, 762, 758,
	756, 757, 0, 835, 0, 0, 0, 0, 0, 0,
	721, 733, 0, 738, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 730, 731, 1523,
	0, 0, 0, 786, 0, 732, 0, 0, 781, 760,
	764, 0, 0, 0, 0, 286, 418, 435, 297, 408,
	448, 302, 415, 292, 382, 405, 0, 0, 288, 433,
	414, 364, 343, 344, 287, 0, 400, 321, 335, 318,
	380, 761, 784, 788, 317, 857, 782, 443, 290, 0,
	442, 379, 429, 434, 365, 359, 0, 289, 431, 363,
	358, 347, 325, 858, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 779, 0, 606, 0, 445, 0,
	0, 841, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 783, 0, 403, 385, 854, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 839,
	381, 571, 604, 605, 496, 0, 853, 834, 836, 837,
	840, 844, 845, 846, 847, 848, 850, 852, 856, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	855, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	787, 546, 547, 371, 372, 373, 374, 842, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 864, 838, 863, 865,
	866, 862, 867, 868, 849, 742, 0, 794, 860, 859,
	861, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 749, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 827, 801, 802, 803, 739, 804,
	798, 799, 740, 800, 828, 792, 824, 825, 768, 795,
	805, 823, 806, 826, 829, 830, 869, 870, 812, 796,
	244, 871, 809, 831, 822, 821, 807, 793, 832, 833,
	775, 770, 810, 811, 797, 815, 816, 817, 741, 789,
	790, 791, 813, 814, 771, 772, 773, 774, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 818, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 785, 734, 0, 2191, 0, 0,
	0, 0, 0, 383, 0, 507, 540, 529, 613, 495,
	0, 0, 0, 0, 0, 0, 737, 0, 0, 0,
	323, 0, 0, 353, 544, 526, 536, 527, 512, 513,
	514, 521, 333, 515, 516, 517, 487, 518, 488, 519,
	520, 776, 543, 494, 412, 367, 561, 560, 0, 0,
	843, 851, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 729, 0, 0, 766, 820, 819, 753,
	763, 0, 0, 296, 216, 489, 609, 491, 490, 754,
	0, 755, 759, 762, 758, 756, 757, 0, 835, 0,
	0, 0, 0, 0, 0, 721, 733, 0, 738, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 730, 731, 0, 0, 0, 0, 786, 0,
	732, 0, 0, 781, 760, 764, 0, 0, 0, 0,
	286, 418, 435, 297, 408, 448, 302, 415, 292, 382,
	405, 0, 0, 288, 433, 414, 364, 343, 344, 287,
	0, 400, 321, 335, 318, 380, 761, 784, 788, 317,
	857, 782, 443, 290, 0, 442, 379, 429, 434, 365,
	359, 0, 289, 431, 363, 358, 347, 325, 858, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 779,
	0, 606, 0, 445, 0, 0, 841, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 783, 0, 403,
	385, 854, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 839, 381, 571, 604, 605, 496,
	0, 853, 834, 836, 837, 840, 844, 845, 846, 847,
	848, 850, 852, 856, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 855, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 787, 546, 547, 371, 372,
	373, 374, 842, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 864, 838, 863, 865, 866, 862, 867, 868, 849,
	742, 0, 794, 860, 859, 861, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 749, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 827,
	801, 802, 803, 739, 804, 798, 799, 740, 800, 828,
	792, 824, 825, 768, 795, 805, 823, 806, 826, 829,
	830, 869, 870, 812, 796, 244, 871, 809, 831, 822,
	821, 807, 793, 832, 833, 775, 770, 810, 811, 797,
	815, 816, 817, 741, 789, 790, 791, 813, 814, 771,
	772, 773, 774, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 818,
	614, 416, 785, 0, 625, 492, 493, 626, 603, 0,
	734, 383, 0, 507, 540, 529, 613, 495, 0, 0,
	0, 0, 0, 0, 737, 0, 0, 0, 323, 0,
	0, 353, 544, 526, 536, 527, 512, 513, 514, 521,
	333, 515, 516, 517, 487, 518, 488, 519, 520, 776,
	543, 494, 412, 367, 561, 560, 0, 0, 843, 851,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 729, 0, 0, 766, 820, 819, 753, 763, 0,
	0, 296, 216, 489, 609, 491, 490, 754, 0, 755,
	759, 762, 758, 756, 757, 0, 835, 0, 0, 0,
	0, 0, 0, 721, 733, 0, 738, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	730, 731, 1799, 0, 0, 0, 786, 0, 732, 0,
	0, 781, 760, 764, 0, 0, 0, 0, 286, 418,
	435, 297, 408, 448, 302, 415, 292, 382, 405, 0,
	0, 288, 433, 414, 364, 343, 344, 287, 0, 400,
	321, 335, 318, 380, 761, 784, 788, 317, 857, 782,
	443, 290, 0, 442, 379, 429, 434, 365, 359, 0,
	289, 431, 363, 358, 347, 325, 858, 348, 349, 339,
	391, 357, 392, 340, 369, 368, 370, 0, 0, 0,
	0, 0, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 602, 779, 0, 606,
	0, 445, 0, 0, 841, 0, 0, 0, 417, 0,
	0, 350, 0, 0, 0, 783, 0, 403, 385, 854,
	0, 0, 401, 355, 430, 393, 436, 419, 444, 397,
	394, 281, 420, 320, 366, 293, 295, 315, 322, 324,
	326, 327, 375, 376, 388, 407, 421, 422, 423, 319,
	303, 402, 304, 337, 305, 282, 311, 309, 312, 409,
	313, 284, 389, 427, 0, 332, 398, 362, 285, 361,
	390, 426, 425, 294, 452, 458, 459, 548, 0, 464,
	629, 630, 631, 473, 478, 479, 480, 482, 483, 484,
	485, 549, 566, 533, 503, 466, 557, 500, 504, 505,
	569, 0, 0, 0, 457, 351, 352, 0, 330, 278,
	279, 624, 839, 381, 571, 604, 605, 496, 0, 853,
	834, 836, 837, 840, 844, 845, 846, 847, 848, 850,
	852, 856, 623, 0, 550, 565, 627, 564, 620, 387,
	0, 406, 562, 509, 0, 554, 528, 0, 555, 524,
	559, 0, 498, 0, 413, 438, 450, 467, 470, 499,
	584, 585, 586, 283, 469, 588, 589, 590, 591, 592,
	593, 594, 587, 855, 531, 508, 534, 449, 511, 510,
	0, 0, 545, 787, 546, 547, 371, 372, 373, 374,
	842, 572, 301, 468, 396, 0, 532, 0, 0, 0,
	0, 0, 0, 0, 0, 537, 538, 535, 632, 0,
	595, 596, 0, 0, 462, 463, 329, 336, 481, 338,
	300, 386, 331, 447, 345, 0, 474, 539, 475, 598,
	601, 599, 600, 378, 341, 342, 410, 346, 356, 399,
	446, 384, 404, 298, 437, 411, 360, 525, 552, 864,
	838, 863, 865, 866, 862, 867, 868, 849, 742, 0,
	794, 860, 859, 861, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 580, 579, 578, 577, 576,
	575, 574, 573, 0, 0, 522, 424, 310, 272, 306,
	307, 314, 621, 618, 428, 622, 749, 280, 502, 354,
	0, 395, 328, 567, 568, 0, 0, 827, 801, 802,
	803, 739, 804, 798, 799, 740, 800, 828, 792, 824,
	825, 768, 795, 805, 823, 806, 826, 829, 830, 869,
	870, 812, 796, 244, 871, 809, 831, 822, 821, 807,
	793, 832, 833, 775, 770, 810, 811, 797, 815, 816,
	817, 741, 789, 790, 791, 813, 814, 771, 772, 773,
	774, 0, 0, 0, 453, 454, 455, 477, 0, 439,
	501, 619, 0, 0, 0, 0, 0, 0, 0, 551,
	563, 597, 0, 607, 608, 610, 612, 818, 614, 416,
	785, 0, 625, 492, 493, 626, 603, 0, 734, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 737, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 776, 543, 494,
	412, 367, 561, 560, 0, 0, 843, 851, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 729,
	0, 0, 766, 820, 819, 753, 763, 0, 0, 296,
	216, 489, 609, 491, 490, 754, 0, 755, 759, 762,
	758, 756, 757, 0, 835, 0, 0, 0, 0, 0,
	0, 721, 733, 0, 738, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 730, 731,
	0, 0, 0, 0, 786, 0, 732, 0, 0, 781,
	760, 764, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 761, 784, 788, 317, 857, 782, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 0, 289, 431,
	363, 358, 347, 325, 858, 348, 349, 339, 391, 357,
	392, 340, 369, 368, 370, 0, 0, 0, 0, 0,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 602, 779, 0, 606, 0, 445,
	0, 0, 841, 0, 0, 0, 417, 0, 0, 350,
	0, 0, 0, 783, 0, 403, 385, 854, 0, 0,
	401, 355, 430, 393, 436, 419, 444, 397, 394, 281,
	420, 320, 366, 293, 295, 315, 322, 324, 326, 327,
	375, 376, 388, 407, 421, 422, 423, 319, 303, 402,
	304, 337, 305, 282, 311, 309, 312, 409, 313, 284,
	389, 427, 0, 332, 398, 362, 285, 361, 390, 426,
	425, 294, 452, 458, 459, 548, 0, 464, 629, 630,
	631, 473, 478, 479, 480, 482, 483, 484, 485, 549,
	566, 533, 503, 466, 557, 500, 504, 505, 569, 0,
	0, 0, 457, 351, 352, 0, 330, 278, 279, 624,
	839, 381, 571, 604, 605, 496, 0, 853, 834, 836,
	837, 840, 844, 845, 846, 847, 848, 850, 852, 856,
	623, 0, 550, 565, 627, 564, 620, 387, 0, 406,
	562, 509, 0, 554, 528, 0, 555, 524, 559, 0,
	498, 0, 413, 438, 450, 467, 470, 499, 584, 585,
	586, 283, 469, 588, 589, 590, 591, 592, 593, 594,
	587, 855, 531, 508, 534, 449, 511, 510, 0, 0,
	545, 787, 546, 547, 371, 372, 373, 374, 842, 572,
	301, 468, 396, 0, 532, 0, 0, 0, 0, 0,
	0, 0, 0, 537, 538, 535, 632, 0, 595, 596,
	0, 0, 462, 463, 329, 336, 481, 338, 300, 386,
	331, 447, 345, 0, 474, 539, 475, 598, 601, 599,
	600, 378, 341, 342, 410, 346, 356, 399, 446, 384,
	404, 298, 437, 411, 360, 525, 552, 864, 838, 863,
	865, 866, 862, 867, 868, 849, 742, 0, 794, 860,
	859, 861, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 580, 579, 578, 577, 576, 575, 574,
	573, 0, 0, 522, 424, 310, 272, 306, 307, 314,
	621, 618, 428, 622, 749, 280, 502, 354, 0, 395,
	328, 567, 568, 0, 0, 827, 801, 802, 803, 739,
	804, 798, 799, 740, 800, 828, 792, 824, 825, 768,
	795, 805, 823, 806, 826, 829, 830, 869, 870, 812,
	796, 244, 871, 809, 831, 822, 821, 807, 793, 832,
	833, 775, 770, 810, 811, 797, 815, 816, 817, 741,
	789, 790, 791, 813, 814, 771, 772, 773, 774, 0,
	0, 0, 453, 454, 455, 477, 0, 439, 501, 619,
	0, 0, 0, 0, 0, 0, 0, 551, 563, 597,
	0, 607, 608, 610, 612, 818, 614, 416, 785, 0,
	625, 492, 493, 626, 603, 0, 734, 383, 0, 507,
	540, 529, 613, 495, 0, 0, 0, 0, 0, 0,
	737, 0, 0, 0, 323, 0, 0, 353, 544, 526,
	536, 527, 512, 513, 514, 521, 333, 515, 516, 517,
	487, 518, 488, 519, 520, 776, 543, 494, 412, 367,
	561, 560, 0, 0, 843, 851, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 729, 0, 0,
	766, 820, 819, 753, 763, 0, 0, 296, 216, 489,
	609, 491, 490, 2654, 0, 2655, 759, 762, 758, 756,
	757, 0, 835, 0, 0, 0, 0, 0, 0, 721,
	733, 0, 738, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 730, 731, 0, 0,
	0, 0, 786, 0, 732, 0, 0, 781, 760, 764,
	0, 0, 0, 0, 286, 418, 435, 297, 408, 448,
	302, 415, 292, 382, 405, 0, 0, 288, 433, 414,
	364, 343, 344, 287, 0, 400, 321, 335, 318, 380,
	761, 784, 788, 317, 857, 782, 443, 290, 0, 442,
	379, 429, 434, 365, 359, 0, 289, 431, 363, 358,
	347, 325, 858, 348, 349, 339, 391, 357, 392, 340,
	369, 368, 370, 0, 0, 0, 0, 0, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 602, 779, 0, 606, 0, 445, 0, 0,
	841, 0, 0, 0, 417, 0, 0, 350, 0, 0,
	0, 783, 0, 403, 385, 854, 0, 0, 401, 355,
	430, 393, 436, 419, 444, 397, 394, 281, 420, 320,
	366, 293, 295, 315, 322, 324, 326, 327, 375, 376,
	388, 407, 421, 422, 423, 319, 303, 402, 304, 337,
	305, 282, 311, 309, 312, 409, 313, 284, 389, 427,
	0, 332, 398, 362, 285, 361, 390, 426, 425, 294,
	452, 458, 459, 548, 0, 464, 629, 630, 631, 473,
	478, 479, 480, 482, 483, 484, 485, 549, 566, 533,
	503, 466, 557, 500, 504, 505, 569, 0, 0, 0,
	457, 351, 352, 0, 330, 278, 279, 624, 839, 381,
	571, 604, 605, 496, 0, 853, 834, 836, 837, 840,
	844, 845, 846, 847, 848, 850, 852, 856, 623, 0,
	550, 565, 627, 564, 620, 387, 0, 406, 562, 509,
	0, 554, 528, 0, 555, 524, 559, 0, 498, 0,
	413, 438, 450, 467, 470, 499, 584, 585, 586, 283,
	469, 588, 589, 590, 591, 592, 593, 594, 587, 855,
	531, 508, 534, 449, 511, 510, 0, 0, 545, 787,
	546, 547, 371, 372, 373, 374, 842, 572, 301, 468,
	396, 0, 532, 0, 0, 0, 0, 0, 0, 0,
	0, 537, 538, 535, 632, 0, 595, 596, 0, 0,
	462, 463, 329, 336, 481, 338, 300, 386, 331, 447,
	345, 0, 474, 539, 475, 598, 601, 599, 600, 378,
	341, 342, 410, 346, 356, 399, 446, 384, 404, 298,
	437, 411, 360, 525, 552, 864, 838, 863, 865, 866,
	862, 867, 868, 849, 742, 0, 794, 860, 859, 861,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 579, 578, 577, 576, 575, 574, 573, 0,
	0, 522, 424, 310, 272, 306, 307, 314, 621, 618,
	428, 622, 749, 280, 502, 354, 0, 395, 328, 567,
	568, 0, 0, 827, 801, 802, 803, 739, 804, 798,
	799, 740, 800, 828, 792, 824, 825, 768, 795, 805,
	823, 806, 826, 829, 830, 869, 870, 812, 796, 244,
	871, 809, 831, 822, 821, 807, 793, 832, 833, 775,
	770, 810, 811, 797, 815, 816, 817, 741, 789, 790,
	791, 813, 814, 771, 772, 773, 774, 0, 0, 0,
	453, 454, 455, 477, 0, 439, 501, 619, 0, 0,
	0, 0, 0, 0, 0, 551, 563, 597, 0, 607,
	608, 610, 612, 818, 614, 416, 785, 0, 625, 492,
	493, 626, 603, 0, 734, 383, 0, 507, 540, 529,
	613, 495, 0, 0, 1665, 0, 0, 0, 737, 0,
	0, 0, 323, 0, 0, 353, 544, 526, 536, 527,
	512, 513, 514, 521, 333, 515, 516, 517, 487, 518,
	488, 519, 520, 776, 543, 494, 412, 367, 561, 560,
	0, 0, 843, 851, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 729, 0, 0, 766, 820,
	819, 753, 763, 0, 0, 296, 216, 489, 609, 491,
	490, 754, 0, 755, 759, 762, 758, 756, 757, 0,
	835, 0, 0, 0, 0, 0, 0, 0, 733, 0,
	738, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 730, 731, 0, 0, 0, 0,
	786, 0, 732, 0, 0, 781, 760, 764, 0, 0,
	0, 0, 286, 418, 435, 297, 408, 448, 302, 415,
	292, 382, 405, 0, 0, 288, 433, 414, 364, 343,
	344, 287, 0, 400, 321, 335, 318, 380, 761, 784,
	788, 317, 857, 782, 443, 290, 0, 442, 379, 429,
	434, 365, 359, 0, 289, 431, 363, 358, 347, 325,
	858, 348, 349, 339, 391, 357, 392, 340, 369, 368,
	370, 0, 0, 0, 0, 0, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	602, 779, 0, 606, 0, 445, 0, 0, 841, 0,
	0, 0, 417, 0, 0, 350, 0, 0, 0, 783,
	0, 403, 385, 854, 0, 0, 401, 355, 430, 393,
	436, 419, 444, 397, 394, 281, 420, 320, 366, 293,
	295, 315, 322, 324, 326, 327, 375, 376, 388, 407,
	421, 422, 423, 319, 303, 402, 304, 337, 305, 282,
	311, 309, 312, 409, 313, 284, 389, 427, 0, 332,
	398, 362, 285, 361, 390, 426, 425, 294, 452, 1666,
	1667, 548, 0, 464, 629, 630, 631, 473, 478, 479,
	480, 482, 483, 484, 485, 549, 566, 533, 503, 466,
	557, 500, 504, 505, 569, 0, 0, 0, 457, 351,
	352, 0, 330, 278, 279, 624, 839, 381, 571, 604,
	605, 496, 0, 853, 834, 836, 837, 840, 844, 845,
	846, 847, 848, 850, 852, 856, 623, 0, 550, 565,
	627, 564, 620, 387, 0, 406, 562, 509, 0, 554,
	528, 0, 555, 524, 559, 0, 498, 0, 413, 438,
	450, 467, 470, 499, 584, 585, 586, 283, 469, 588,
	589, 590, 591, 592, 593, 594, 587, 855, 531, 508,
	534, 449, 511, 510, 0, 0, 545, 787, 546, 547,
	371, 372, 373, 374, 842, 572, 301, 468, 396, 0,
	532, 0, 0, 0, 0, 0, 0, 0, 0, 537,
	538, 535, 632, 0, 595, 596, 0, 0, 462, 463,
	329, 336, 481, 338, 300, 386, 331, 447, 345, 0,
	474, 539, 475, 598, 601, 599, 600, 378, 341, 342,
	410, 346, 356, 399, 446, 384, 404, 298, 437, 411,
	360, 525, 552, 864, 838, 863, 865, 866, 862, 867,
	868, 849, 742, 0, 794, 860, 859, 861, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 580,
	579, 578, 577, 576, 575, 574, 573, 0, 0, 522,
	424, 310, 272, 306, 307, 314, 621, 618, 428, 622,
	749, 280, 502, 354, 0, 395, 328, 567, 568, 0,
	0, 827, 801, 802, 803, 739, 804, 798, 799, 740,
	800, 828, 792, 824, 825, 768, 795, 805, 823, 806,
	826, 829, 830, 869, 870, 812, 796, 244, 871, 809,
	831, 822, 821, 807, 793, 832, 833, 775, 770, 810,
	811, 797, 815, 816, 817, 741, 789, 790, 791, 813,
	814, 771, 772, 773, 774, 0, 0, 0, 453, 454,
	455, 477, 0, 439, 501, 619, 0, 0, 0, 0,
	0, 0, 0, 551, 563, 597, 0, 607, 608, 610,
	612, 818, 614, 416, 785, 0, 625, 492, 493, 626,
	603, 0, 734, 383, 0, 507, 540, 529, 613, 495,
	0, 0, 0, 0, 0, 0, 737, 0, 0, 0,
	323, 0, 0, 353, 544, 526, 536, 527, 512, 513,
	514, 521, 333, 515, 516, 517, 487, 518, 488, 519,
	520, 776, 543, 494, 412, 367, 561, 560, 0, 0,
	843, 851, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 729, 0, 0, 766, 820, 819, 753,
	763, 0, 0, 296, 216, 489, 609, 491, 490, 754,
	0, 755, 759, 762, 758, 756, 757, 0, 835, 0,
	0, 0, 0, 0, 0, 0, 733, 0, 738, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 730, 731, 0, 0, 0, 0, 786, 0,
	732, 0, 0, 781, 760, 764, 0, 0, 0, 0,
	286, 418, 435, 297, 408, 448, 302, 415, 292, 382,
	405, 0, 0, 288, 433, 414, 364, 343, 344, 287,
	0, 400, 321, 335, 318, 380, 761, 784, 788, 317,
	857, 782, 443, 290, 0, 442, 379, 429, 434, 365,
	359, 0, 289, 431, 363, 358, 347, 325, 858, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 779,
	0, 606, 0, 445, 0, 0, 841, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 783, 0, 403,
	385, 854, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 839, 381, 571, 604, 605, 496,
	0, 853, 834, 836, 837, 840, 844, 845, 846, 847,
	848, 850, 852, 856, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 855, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 787, 546, 547, 371, 372,
	373, 374, 842, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 864, 838, 863, 865, 866, 862, 867, 868, 849,
	742, 0, 794, 860, 859, 861, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 749, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 827,
	801, 802, 803, 739, 804, 798, 799, 740, 800, 828,
	792, 824, 825, 768, 795, 805, 823, 806, 826, 829,
	830, 869, 870, 812, 796, 244, 871, 809, 831, 822,
	821, 807, 793, 832, 833, 775, 770, 810, 811, 797,
	815, 816, 817, 741, 789, 790, 791, 813, 814, 771,
	772, 773, 774, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 818,
	614, 416, 785, 0, 625, 492, 493, 626, 603, 0,
	734, 383, 0, 507, 540, 529, 613, 495, 0, 0,
	0, 0, 0, 0, 737, 0, 0, 0, 323, 0,
	0, 353, 544, 526, 536, 527, 512, 513, 514, 521,
	333, 515, 516, 517, 487, 518, 488, 519, 520, 776,
	543, 494, 412, 367, 561, 560, 0, 0, 843, 851,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 766, 820, 819, 753, 763, 0,
	0, 296, 216, 489, 609, 491, 490, 754, 0, 755,
	759, 762, 758, 756, 757, 0, 835, 0, 0, 0,
	0, 0, 0, 721, 733, 0, 738, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	730, 731, 0, 0, 0, 0, 786, 0, 732, 0,
	0, 781, 760, 764, 0, 0, 0, 0, 286, 418,
	435, 297, 408, 448, 302, 415, 292, 382, 405, 0,
	0, 288, 433, 414, 364, 343, 344, 287, 0, 400,
	321, 335, 318, 380, 761, 784, 788, 317, 857, 782,
	443, 290, 0, 442, 379, 429, 434, 365, 359, 0,
	289, 431, 363, 358, 347, 325, 858, 348, 349, 339,
	391, 357, 392, 340, 369, 368, 370, 0, 0, 0,
	0, 0, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 602, 779, 0, 606,
	0, 445, 0, 0, 841, 0, 0, 0, 417, 0,
	0, 350, 0, 0, 0, 783, 0, 403, 385, 854,
	0, 0, 401, 355, 430, 393, 436, 419, 444, 397,
	394, 281, 420, 320, 366, 293, 295, 315, 322, 324,
	326, 327, 375, 376, 388, 407, 421, 422, 423, 319,
	303, 402, 304, 337, 305, 282, 311, 309, 312, 409,
	313, 284, 389, 427, 0, 332, 398, 362, 285, 361,
	390, 426, 425, 294, 452, 458, 459, 548, 0, 464,
	629, 630, 631, 473, 478, 479, 480, 482, 483, 484,
	485, 549, 566, 533, 503, 466, 557, 500, 504, 505,
	569, 0, 0, 0, 457, 351, 352, 0, 330, 278,
	279, 624, 839, 381, 571, 604, 605, 496, 0, 853,
	834, 836, 837, 840, 844, 845, 846, 847, 848, 850,
	852, 856, 623, 0, 550, 565, 627, 564, 620, 387,
	0, 406, 562, 509, 0, 554, 528, 0, 555, 524,
	559, 0, 498, 0, 413, 438, 450, 467, 470, 499,
	584, 585, 586, 283, 469, 588, 589, 590, 591, 592,
	593, 594, 587, 855, 531, 508, 534, 449, 511, 510,
	0, 0, 545, 787, 546, 547, 371, 372, 373, 374,
	842, 572, 301, 468, 396, 0, 532, 0, 0, 0,
	0, 0, 0, 0, 0, 537, 538, 535, 632, 0,
	595, 596, 0, 0, 462, 463, 329, 336, 481, 338,
	300, 386, 331, 447, 345, 0, 474, 539, 475, 598,
	601, 599, 600, 378, 341, 342, 410, 346, 356, 399,
	446, 384, 404, 298, 437, 411, 360, 525, 552, 864,
	838, 863, 865, 866, 862, 867, 868, 849, 742, 0,
	794, 860, 859, 861, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 580, 579, 578, 577, 576,
	575, 574, 573, 0, 0, 522, 424, 310, 272, 306,
	307, 314, 621, 618, 428, 622, 749, 280, 502, 354,
	0, 395, 328, 567, 568, 0, 0, 827, 801, 802,
	803, 739, 804, 798, 799, 740, 800, 828, 792, 824,
	825, 768, 795, 805, 823, 806, 826, 829, 830, 869,
	870, 812, 796, 244, 871, 809, 831, 822, 821, 807,
	793, 832, 833, 775, 770, 810, 811, 797, 815, 816,
	817, 741, 789, 790, 791, 813, 814, 771, 772, 773,
	774, 0, 0, 0, 453, 454, 455, 477, 0, 439,
	501, 619, 0, 0, 0, 0, 0, 0, 0, 551,
	563, 597, 0, 607, 608, 610, 612, 818, 614, 416,
	0, 0, 625, 492, 493, 626, 603, 0, 734, 193,
	61, 184, 156, 0, 0, 0, 0, 0, 0, 383,
	0, 507, 540, 529, 613, 495, 0, 185, 0, 0,
	0, 0, 0, 0, 177, 0, 323, 0, 186, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 130, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 0, 289, 431,
	363, 358, 347, 325, 476, 348, 349, 339, 391, 357,
	392, 340, 369, 368, 370, 0, 0, 0, 0, 0,
	471, 472, 0, 0, 0, 0, 0, 0, 155, 183,
	191, 0, 116, 0, 602, 0, 0, 606, 0, 445,
	0, 0, 208, 0, 0, 0, 417, 0, 0, 350,
	182, 176, 175, 461, 0, 403, 385, 220, 0, 0,
	401, 355, 430, 393, 436, 419, 444, 397, 394, 281,
	420, 320, 366, 293, 295, 315, 322, 324, 326, 327,
	375, 376, 388, 407, 421, 422, 423, 319, 303, 402,
	304, 337, 305, 282, 311, 309, 312, 409, 313, 284,
	389, 427, 0, 332, 398, 362, 285, 361, 390, 426,
	425, 294, 452, 458, 459, 548, 0, 464, 581, 582,
	583, 473, 478, 479, 480, 482, 483, 484, 485, 549,
	566, 533, 503, 466, 557, 500, 504, 505, 569, 0,
	0, 0, 457, 351, 352, 0, 330, 278, 279, 440,
	316, 381, 571, 604, 605, 496, 0, 558, 497, 506,
	308, 530, 542, 541, 377, 456, 211, 553, 556, 486,
	221, 0, 550, 565, 523, 564, 222, 387, 0, 406,
	562, 509, 0, 554, 528, 0, 555, 524, 559, 0,
	498, 0, 413, 438, 450, 467, 470, 499, 584, 585,
	586, 283, 469, 588, 589, 590, 591, 592, 593, 594,
	587, 441, 531, 508, 534, 449, 511, 510, 0, 0,
	545, 465, 546, 547, 371, 372, 373, 374, 334, 572,
	301, 468, 396, 128, 532, 0, 0, 0, 0, 0,
	0, 0, 0, 537, 538, 535, 219, 0, 595, 596,
	0, 0, 462, 463, 329, 336, 481, 338, 300, 386,
	331, 447, 345, 0, 474, 539, 475, 598, 601, 599,
	600, 378, 341, 342, 410, 346, 356, 399, 446, 384,
	404, 298, 437, 411, 360, 525, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 580, 579, 578, 577, 576, 575, 574,
	573, 0, 0, 522, 424, 310, 272, 306, 307, 314,
	226, 291, 428, 227, 0, 280, 502, 354, 157, 395,
	328, 567, 568, 58, 0, 228, 229, 230, 231, 232,
	233, 234, 235, 273, 236, 237, 238, 239, 240, 241,
	242, 245, 246, 247, 248, 249, 250, 251, 252, 570,
	243, 244, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 0, 0, 0, 274,
	275, 276, 277, 0, 0, 268, 269, 270, 271, 0,
	0, 0, 453, 454, 455, 477, 0, 439, 501, 223,
	45, 209, 212, 214, 213, 0, 59, 551, 563, 597,
	5, 607, 608, 610, 612, 611, 614, 416, 0, 133,
	224, 492, 493, 225, 603, 383, 0, 507, 540, 529,
	613, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 323, 0, 0, 353, 544, 526, 536, 527,
	512, 513, 514, 521, 333, 515, 516, 517, 487, 518,
	488, 519, 520, 0, 543, 494, 412, 367, 561, 560,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1280, 0, 0, 215, 0,
	0, 753, 763, 0, 0, 296, 216, 489, 609, 491,
	490, 754, 0, 755, 759, 762, 758, 756, 757, 0,
	299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 760, 0, 0, 0,
	0, 0, 286, 418, 435, 297, 408, 448, 302, 415,
	292, 382, 405, 0, 0, 288, 433, 414, 364, 343,
	344, 287, 0, 400, 321, 335, 318, 380, 761, 432,
	460, 317, 451, 0, 443, 290, 0, 442, 379, 429,
	434, 365, 359, 0, 289, 431, 363, 358, 347, 325,
	476, 348, 349, 339, 391, 357, 392, 340, 369, 368,
	370, 0, 0, 0, 0, 0, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	602, 0, 0, 606, 0, 445, 0, 0, 0, 0,
	0, 0, 417, 0, 0, 350, 0, 0, 0, 461,
	0, 403, 385, 628, 0, 0, 401, 355, 430, 393,
	436, 419, 444, 397, 394, 281, 420, 320, 366, 293,
	295, 315, 322, 324, 326, 327, 375, 376, 388, 407,
	421, 422, 423, 319, 303, 402, 304, 337, 305, 282,
	311, 309, 312, 409, 313, 284, 389, 427, 0, 332,
	398, 362, 285, 361, 390, 426, 425, 294, 452, 458,
	459, 548, 0, 464, 629, 630, 631, 473, 478, 479,
	480, 482, 483, 484, 485, 549, 566, 533, 503, 466,
	557, 500, 504, 505, 569, 0, 0, 0, 457, 351,
	352, 0, 330, 278, 279, 624, 316, 381, 571, 604,
	605, 496, 0, 558, 497, 506, 308, 530, 542, 541,
	377, 456, 0, 553, 556, 486, 623, 0, 550, 565,
	627, 564, 620, 387, 0, 406, 562, 509, 0, 554,
	528, 0, 555, 524, 559, 0, 498, 0, 413, 438,
	450, 467, 470, 499, 584, 585, 586, 283, 469, 588,
	589, 590, 591, 592, 593, 594, 587, 441, 531, 508,
	534, 449, 511, 510, 0, 0, 545, 465, 546, 547,
	371, 372, 373, 374, 334, 572, 301, 468, 396, 0,
	532, 0, 0, 0, 0, 0, 0, 0, 0, 537,
	538, 535, 632, 0, 595, 596, 0, 0, 462, 463,
	329, 336, 481, 338, 300, 386, 331, 447, 345, 0,
	474, 539, 475, 598, 601, 599, 600, 378, 341, 342,
	410, 346, 356, 399, 446, 384, 404, 298, 437, 411,
	360, 525, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 580,
	579, 578, 577, 576, 575, 574, 573, 0, 0, 522,
	424, 310, 272, 306, 307, 314, 621, 618, 428, 622,
	0, 280, 502, 354, 0, 395, 328, 567, 568, 0,
	0, 228, 229, 230, 231, 232, 233, 234, 235, 273,
	236, 237, 238, 239, 240, 241, 242, 245, 246, 247,
	248, 249, 250, 251, 252, 570, 243, 244, 253, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 0, 0, 0, 274, 275, 276, 277, 0,
	0, 268, 269, 270, 271, 0, 0, 0, 453, 454,
	455, 477, 0, 439, 501, 619, 0, 0, 0, 0,
	0, 0, 0, 551, 563, 597, 0, 607, 608, 610,
	612, 611, 614, 416, 0, 0, 625, 492, 493, 626,
	603, 193, 61, 184, 156, 0, 0, 0, 0, 0,
	0, 383, 651, 507, 540, 529, 613, 495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 323, 0,
	0, 353, 544, 526, 536, 527, 512, 513, 514, 521,
	333, 515, 516, 517, 487, 518, 488, 519, 520, 0,
	543, 494, 412, 367, 561, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 657, 0, 0, 0, 0,
	0, 656, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 296, 216, 489, 609, 491, 490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 418,
	435, 297, 408, 448, 302, 415, 292, 382, 405, 0,
	0, 288, 433, 414, 364, 343, 344, 287, 0, 400,
	321, 335, 318, 380, 0, 432, 460, 317, 451, 0,
	443, 290, 0, 442, 379, 429, 434, 365, 359, 0,
	289, 431, 363, 358, 347, 325, 476, 348, 349, 339,
	391, 357, 392, 340, 369, 368, 370, 0, 0, 0,
	0, 0, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 655, 0, 602, 0, 0, 606,
	0, 445, 0, 0, 0, 0, 0, 0, 417, 0,
	0, 350, 0, 0, 0, 461, 0, 403, 385, 628,
	0, 0, 401, 355, 430, 393, 436, 419, 444, 397,
	394, 281, 420, 320, 366, 293, 295, 315, 322, 324,
	326, 327, 375, 376, 388, 407, 421, 422, 423, 319,
	303, 402, 304, 337, 305, 282, 311, 309, 312, 409,
	313, 284, 389, 427, 0, 332, 398, 362, 285, 361,
	390, 426, 425, 294, 452, 458, 459, 548, 0, 464,
	629, 630, 631, 473, 478, 479, 480, 482, 483, 484,
	485, 549, 566, 533, 503, 466, 557, 500, 504, 505,
	569, 0, 0, 0, 457, 351, 352, 0, 330, 278,
	279, 624, 316, 381, 571, 604, 605, 496, 0, 558,
	497, 506, 308, 530, 542, 541, 377, 456, 0, 553,
	556, 486, 623, 0, 550, 565, 627, 564, 620, 387,
	0, 406, 562, 509, 0, 554, 528, 0, 555, 524,
	559, 0, 498, 0, 413, 438, 450, 467, 470, 499,
	584, 585, 586, 283, 469, 588, 589, 590, 591, 592,
	593, 594, 587, 441, 531, 508, 534, 449, 511, 510,
	0, 0, 545, 465, 546, 547, 371, 372, 373, 374,
	652, 654, 301, 468, 396, 665, 532, 0, 0, 0,
	0, 0, 0, 0, 0, 537, 538, 535, 632, 0,
	595, 596, 0, 0, 462, 463, 329, 336, 481, 338,
	300, 386, 331, 447, 345, 0, 474, 539, 475, 598,
	601, 599, 600, 378, 341, 342, 410, 346, 356, 399,
	446, 384, 404, 298, 437, 411, 360, 525, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 580, 579, 578, 577, 576,
	575, 574, 573, 0, 0, 522, 424, 310, 272, 306,
	307, 314, 621, 618, 428, 622, 0, 280, 502, 354,
	157, 395, 328, 567, 568, 0, 0, 228, 229, 230,
	231, 232, 233, 234, 235, 273, 236, 237, 238, 239,
	240, 241, 242, 245, 246, 247, 248, 249, 250, 251,
	252, 570, 243, 244, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 0, 0,
	0, 274, 275, 276, 277, 0, 0, 268, 269, 270,
	271, 0, 0, 0, 453, 454, 455, 477, 0, 439,
	501, 619, 0, 0, 0, 0, 0, 0, 0, 551,
	563, 597, 0, 607, 608, 610, 612, 611, 614, 416,
	0, 0, 625, 492, 493, 626, 603, 383, 0, 507,
	540, 529, 613, 495, 0, 1092, 0, 0, 0, 0,
	0, 0, 0, 0, 323, 0, 0, 353, 544, 526,
	536, 527, 512, 513, 514, 521, 333, 515, 516, 517,
	487, 518, 488, 519, 520, 0, 543, 494, 412, 367,
	561, 560, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 296, 216, 489,
	609, 491, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1077, 0, 0,
	0, 0, 0, 0, 286, 418, 435, 297, 408, 448,
	302, 415, 292, 382, 405, 0, 0, 2493, 2496, 2497,
	2498, 2499, 2500, 2501, 0, 2506, 2502, 2503, 2504, 2505,
	0, 2488, 2489, 2490, 2491, 1075, 2472, 2494, 0, 2473,
	379, 2474, 2475, 2476, 2477, 1079, 2478, 2479, 2480, 2481,
	2482, 2485, 2486, 2483, 2484, 2492, 391, 357, 392, 340,
	369, 368, 370, 1103, 1105, 1107, 1109, 1112, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 602, 0, 0, 606, 0, 445, 0, 0,
	0, 0, 0, 0, 417, 0, 0, 350, 0, 0,
	0, 2487, 0, 403, 385, 628, 0, 0, 401, 355,
	430, 393, 436, 419, 444, 397, 394, 281, 420, 320,
	366, 293, 295, 315, 322, 324, 326, 327, 375, 376,
	388, 407, 421, 422, 423, 319, 303, 402, 304, 337,
	305, 282, 311, 309, 312, 409, 313, 284, 389, 427,
	0, 332, 398, 362, 285, 361, 390, 426, 425, 294,
	452, 458, 459, 548, 0, 464, 629, 630, 631, 473,
	478, 479, 480, 482, 483, 484, 485, 549, 566, 533,
	503, 466, 557, 500, 504, 505, 569, 0, 0, 0,
	457, 351, 352, 0, 330, 278, 279, 624, 316, 381,
	571, 604, 605, 496, 0, 558, 497, 506, 308, 530,
	542, 541, 377, 456, 0, 553, 556, 486, 623, 0,
	550, 565, 627, 564, 620, 387, 0, 406, 562, 509,
	0, 554, 528, 0, 555, 524, 559, 0, 498, 0,
	413, 438, 450, 467, 470, 499, 584, 585, 586, 283,
	469, 588, 589, 590, 591, 592, 593, 594, 587, 441,
	531, 508, 534, 449, 511, 510, 0, 0, 545, 465,
	546, 547, 371, 372, 373, 374, 334, 572, 301, 468,
	396, 0, 532, 0, 0, 0, 0, 0, 0, 0,
	0, 537, 538, 535, 632, 0, 595, 596, 0, 0,
	462, 463, 329, 336, 481, 338, 300, 386, 331, 447,
	345, 0, 474, 539, 475, 598, 601, 599, 600, 378,
	341, 342, 410, 346, 356, 399, 446, 384, 404, 298,
	437, 411, 360, 525, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 579, 578, 577, 576, 575, 574, 573, 0,
	0, 522, 424, 310, 272, 306, 307, 314, 621, 618,
	428, 622, 0, 280, 2495, 354, 0, 395, 328, 567,
	568, 0, 0, 228, 229, 230, 231, 232, 233, 234,
	235, 273, 236, 237, 238, 239, 240, 241, 242, 245,
	246, 247, 248, 249, 250, 251, 252, 570, 243, 244,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 0, 0, 0, 274, 275, 276,
	277, 0, 0, 268, 269, 270, 271, 0, 0, 0,
	453, 454, 455, 477, 0, 439, 501, 619, 0, 0,
	0, 0, 0, 0, 0, 551, 563, 597, 0, 607,
	608, 610, 612, 611, 614, 416, 0, 0, 625, 492,
	493, 626, 603, 383, 0, 507, 540, 529, 613, 495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	323, 0, 0, 353, 544, 526, 536, 527, 512, 513,
	514, 521, 333, 515, 516, 517, 487, 518, 488, 519,
	520, 0, 543, 494, 412, 367, 561, 560, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 296, 216, 489, 609, 491, 490, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 2341,
	2344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 418, 435, 297, 408, 448, 302, 415, 292, 382,
	405, 0, 0, 288, 433, 414, 364, 343, 344, 287,
	0, 400, 321, 335, 318, 380, 0, 432, 460, 317,
	451, 0, 443, 290, 0, 442, 379, 429, 434, 365,
	359, 0, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 2345, 445, 0, 0, 0, 2340, 0, 2339,
	417, 2337, 2342, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 2343, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 2362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 0, 289, 431,
	363, 358, 347, 325, 476, 348, 349, 339, 391, 357,
	392, 340, 369, 368, 370, 0, 0, 0, 0, 0,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 602, 0, 0, 606, 2361, 445,
	0, 0, 0, 2367, 2364, 2366, 417, 0, 2365, 350,
	0, 0, 0, 461, 0, 403, 385, 628, 0, 2359,
	401, 355, 430, 393, 436, 419, 444, 397, 394, 281,
	420, 320, 366, 293, 295, 315, 322, 324, 326, 327,
	375, 376, 388, 407, 421, 422, 423, 319, 303, 402,
	304, 337, 305, 282, 311, 309, 312, 409, 313, 284,
	389, 427, 0, 332, 398, 362, 285, 361, 390, 426,
	425, 294, 452, 458, 459, 548, 0, 464, 629, 630,
	631, 473, 478, 479, 480, 482, 483, 484, 485, 549,
	566, 533, 503, 466, 557, 500, 504, 505, 569, 0,
	0, 0, 457, 351, 352, 0, 330, 278, 279, 624,
	316, 381, 571, 604, 605, 496, 0, 558, 497, 506,
	308, 530, 542, 541, 377, 456, 0, 553, 556, 486,
	623, 0, 550, 565, 627, 564, 620, 387, 0, 406,
	562, 509, 0, 554, 528, 0, 555, 524, 559, 0,
	498, 0, 413, 438, 450, 467, 470, 499, 584, 585,
	586, 283, 469, 588, 589, 590, 591, 592, 593, 594,
	587, 441, 531, 508, 534, 449, 511, 510, 0, 0,
	545, 465, 546, 547, 371, 372, 373, 374, 334, 572,
	301, 468, 396, 0, 532, 0, 0, 0, 0, 0,
	0, 0, 0, 537, 538, 535, 632, 0, 595, 596,
	0, 0, 462, 463, 329, 336, 481, 338, 300, 386,
	331, 447, 345, 0, 474, 539, 475, 598, 601, 599,
	600, 378, 341, 342, 410, 346, 356, 399, 446, 384,
	404, 298, 437, 411, 360, 525, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 580, 579, 578, 577, 576, 575, 574,
	573, 0, 0, 522, 424, 310, 272, 306, 307, 314,
	621, 618, 428, 622, 0, 280, 502, 354, 0, 395,
	328, 567, 568, 0, 0, 228, 229, 230, 231, 232,
	233, 234, 235, 273, 236, 237, 238, 239, 240, 241,
	242, 245, 246, 247, 248, 249, 250, 251, 252, 570,
	243, 244, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 0, 0, 0, 274,
	275, 276, 277, 0, 0, 268, 269, 270, 271, 0,
	0, 0, 453, 454, 455, 477, 0, 439, 501, 619,
	0, 0, 0, 0, 0, 0, 0, 551, 563, 597,
	0, 607, 608, 610, 612, 611, 614, 416, 0, 0,
	625, 492, 493, 626, 603, 383, 0, 507, 540, 529,
	613, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 323, 0, 0, 353, 544, 526, 536, 527,
	512, 513, 514, 521, 333, 515, 516, 517, 487, 518,
	488, 519, 520, 0, 543, 494, 412, 367, 561, 560,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 296, 216, 489, 609, 491,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 0, 2362, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 418, 435, 297, 408, 448, 302, 415,
	292, 382, 405, 0, 0, 288, 433, 414, 364, 343,
	344, 287, 0, 400, 321, 335, 318, 380, 0, 432,
	460, 317, 451, 0, 443, 290, 0, 442, 379, 429,
	434, 365, 359, 0, 289, 431, 363, 358, 347, 325,
	476, 348, 349, 339, 391, 357, 392, 340, 369, 368,
	370, 0, 0, 0, 0, 0, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	602, 0, 0, 606, 2361, 445, 0, 0, 0, 2367,
	2364, 2366, 417, 0, 2365, 350, 0, 0, 0, 461,
	0, 403, 385, 628, 0, 0, 401, 355, 430, 393,
	436, 419, 444, 397, 394, 281, 420, 320, 366, 293,
	295, 315, 322, 324, 326, 327, 375, 376, 388, 407,
	421, 422, 423, 319, 303, 402, 304, 337, 305, 282,
	311, 309, 312, 409, 313, 284, 389, 427, 0, 332,
	398, 362, 285, 361, 390, 426, 425, 294, 452, 458,
	459, 548, 0, 464, 629, 630, 631, 473, 478, 479,
	480, 482, 483, 484, 485, 549, 566, 533, 503, 466,
	557, 500, 504, 505, 569, 0, 0, 0, 457, 351,
	352, 0, 330, 278, 279, 624, 316, 381, 571, 604,
	605, 496, 0, 558, 497, 506, 308, 530, 542, 541,
	377, 456, 0, 553, 556, 486, 623, 0, 550, 565,
	627, 564, 620, 387, 0, 406, 562, 509, 0, 554,
	528, 0, 555, 524, 559, 0, 498, 0, 413, 438,
	450, 467, 470, 499, 584, 585, 586, 283, 469, 588,
	589, 590, 591, 592, 593, 594, 587, 441, 531, 508,
	534, 449, 511, 510, 0, 0, 545, 465, 546, 547,
	371, 372, 373, 374, 334, 572, 301, 468, 396, 0,
	532, 0, 0, 0, 0, 0, 0, 0, 0, 537,
	538, 535, 632, 0, 595, 596, 0, 0, 462, 463,
	329, 336, 481, 338, 300, 386, 331, 447, 345, 0,
	474, 539, 475, 598, 601, 599, 600, 378, 341, 342,
	410, 346, 356, 399, 446, 384, 404, 298, 437, 411,
	360, 525, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 580,
	579, 578, 577, 576, 575, 574, 573, 0, 0, 522,
	424, 310, 272, 306, 307, 314, 621, 618, 428, 622,
	0, 280, 502, 354, 0, 395, 328, 567, 568, 0,
	0, 228, 229, 230, 231, 232, 233, 234, 235, 273,
	236, 237, 238, 239, 240, 241, 242, 245, 246, 247,
	248, 249, 250, 251, 252, 570, 243, 244, 253, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 0, 0, 0, 274, 275, 276, 277, 0,
	0, 268, 269, 270, 271, 0, 0, 0, 453, 454,
	455, 477, 0, 439, 501, 619, 0, 0, 0, 0,
	0, 0, 0, 551, 563, 597, 0, 607, 608, 610,
	612, 611, 614, 416, 0, 0, 625, 492, 493, 626,
	603, 383, 0, 507, 540, 529, 613, 495, 0, 0,
	0, 0, 0, 2057, 0, 0, 0, 0, 323, 0,
	0, 353, 544, 526, 536, 527, 512, 513, 514, 521,
	333, 515, 516, 517, 487, 518, 488, 519, 520, 0,
	543, 494, 412, 367, 561, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 0, 0, 2058, 0, 0,
	0, 296, 216, 489, 609, 491, 490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 0, 0, 1209,
	1210, 1211, 1208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 418,
	435, 297, 408, 448, 302, 415, 292, 382, 405, 0,
	0, 288, 433, 414, 364, 343, 344, 287, 0, 400,
	321, 335, 318, 380, 0, 432, 460, 317, 451, 0,
	443, 290, 0, 442, 379, 429, 434, 365, 359, 0,
	289, 431, 363, 358, 347, 325, 476, 348, 349, 339,
	391, 357, 392, 340, 369, 368, 370, 0, 0, 0,
	0, 0, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 602, 0, 0, 606,
	0, 445, 0, 0, 0, 0, 0, 0, 417, 0,
	0, 350, 0, 0, 0, 461, 0, 403, 385, 628,
	0, 0, 401, 355, 430, 393, 436, 419, 444, 397,
	394, 281, 420, 320, 366, 293, 295, 315, 322, 324,
	326, 327, 375, 376, 388, 407, 421, 422, 423, 319,
	303, 402, 304, 337, 305, 282, 311, 309, 312, 409,
	313, 284, 389, 427, 0, 332, 398, 362, 285, 361,
	390, 426, 425, 294, 452, 458, 459, 548, 0, 464,
	629, 630, 631, 473, 478, 479, 480, 482, 483, 484,
	485, 549, 566, 533, 503, 466, 557, 500, 504, 505,
	569, 0, 0, 0, 457, 351, 352, 0, 330, 278,
	279, 624, 316, 381, 571, 604, 605, 496, 0, 558,
	497, 506, 308, 530, 542, 541, 377, 456, 0, 553,
	556, 486, 623, 0, 550, 565, 627, 564, 620, 387,
	0, 406, 562, 509, 0, 554, 528, 0, 555, 524,
	559, 0, 498, 0, 413, 438, 450, 467, 470, 499,
	584, 585, 586, 283, 469, 588, 589, 590, 591, 592,
	593, 594, 587, 441, 531, 508, 534, 449, 511, 510,
	0, 0, 545, 465, 546, 547, 371, 372, 373, 374,
	334, 572, 301, 468, 396, 0, 532, 0, 0, 0,
	0, 0, 0, 0, 0, 537, 538, 535, 632, 0,
	595, 596, 0, 0, 462, 463, 329, 336, 481, 338,
	300, 386, 331, 447, 345, 0, 474, 539, 475, 598,
	601, 599, 600, 378, 341, 342, 410, 346, 356, 399,
	446, 384, 404, 298, 437, 411, 360, 525, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 580, 579, 578, 577, 576,
	575, 574, 573, 0, 0, 522, 424, 310, 272, 306,
	307, 314, 621, 618, 428, 622, 0, 280, 502, 354,
	0, 395, 328, 567, 568, 0, 0, 228, 229, 230,
	231, 232, 233, 234, 235, 273, 236, 237, 238, 239,
	240, 241, 242, 245, 246, 247, 248, 249, 250, 251,
	252, 570, 243, 244, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 0, 0,
	0, 274, 275, 276, 277, 0, 0, 268, 269, 270,
	271, 0, 0, 0, 453, 454, 455, 477, 0, 439,
	501, 619, 0, 0, 0, 0, 0, 0, 0, 551,
	563, 597, 0, 607, 608, 610, 612, 611, 614, 416,
	193, 0, 625, 492, 493, 626, 603, 0, 0, 0,
	383, 0, 507, 540, 529, 613, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 323, 0, 0,
	353, 544, 526, 536, 527, 512, 513, 514, 521, 333,
	515, 516, 517, 487, 518, 488, 519, 520, 130, 543,
	494, 412, 367, 561, 560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 2107, 0, 215, 0, 0, 0, 0, 0, 0,
	296, 216, 489, 609, 491, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 418, 435,
	297, 408, 448, 302, 415, 292, 382, 405, 0, 0,
	288, 433, 414, 364, 343, 344, 287, 0, 400, 321,
	335, 318, 380, 0, 432, 460, 317, 451, 0, 443,
	290, 0, 442, 379, 429, 434, 365, 359, 0, 289,
	431, 363, 358, 347, 325, 476, 348, 349, 339, 391,
	357, 392, 340, 369, 368, 370, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 606, 0,
	445, 0, 0, 0, 0, 0, 0, 417, 0, 0,
	350, 0, 0, 0, 461, 0, 403, 385, 628, 0,
	0, 401, 355, 430, 393, 436, 419, 444, 397, 394,
	281, 420, 320, 366, 293, 295, 315, 322, 324, 326,
	327, 375, 376, 388, 407, 421, 422, 423, 319, 303,
	402, 304, 337, 305, 282, 311, 309, 312, 409, 313,
	284, 389, 427, 0, 332, 398, 362, 285, 361, 390,
	426, 425, 294, 452, 458, 459, 548, 0, 464, 629,
	630, 631, 473, 478, 479, 480, 482, 483, 484, 485,
	549, 566, 533, 503, 466, 557, 500, 504, 505, 569,
	0, 0, 0, 457, 351, 352, 0, 330, 278, 279,
	624, 316, 381, 571, 604, 605, 496, 0, 558, 497,
	506, 308, 530, 542, 541, 377, 456, 0, 553, 556,
	486, 623, 0, 550, 565, 627, 564, 620, 387, 0,
	406, 562, 509, 0, 554, 528, 0, 555, 524, 559,
	0, 498, 0, 413, 438, 450, 467, 470, 499, 584,
	585, 586, 283, 469, 588, 589, 590, 591, 592, 593,
	594, 587, 441, 531, 508, 534, 449, 511, 510, 0,
	0, 545, 465, 546, 547, 371, 372, 373, 374, 334,
	572, 301, 468, 396, 0, 532, 0, 0, 0, 0,
	0, 0, 0, 0, 537, 538, 535, 632, 0, 595,
	596, 0, 0, 462, 463, 329, 336, 481, 338, 300,
	386, 331, 447, 345, 0, 474, 539, 475, 598, 601,
	599, 600, 378, 341, 342, 410, 346, 356, 399, 446,
	384, 404, 298, 437, 411, 360, 525, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 579, 578, 577, 576, 575,
	574, 573, 0, 0, 522, 424, 310, 272, 306, 307,
	314, 621, 618, 428, 622, 0, 280, 502, 354, 157,
	395, 328, 567, 568, 0, 0, 228, 229, 230, 231,
	232, 233, 234, 235, 273, 236, 237, 238, 239, 240,
	241, 242, 245, 246, 247, 248, 249, 250, 251, 252,
	570, 243, 244, 253, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 0, 0, 0,
	274, 275, 276, 277, 0, 0, 268, 269, 270, 271,
	0, 0, 0, 453, 454, 455, 477, 0, 439, 501,
	619, 0, 0, 0, 0, 0, 0, 0, 551, 563,
	597, 0, 607, 608, 610, 612, 611, 614, 416, 193,
	0, 625, 492, 493, 626, 603, 0, 0, 0, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 130, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	2093, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 0, 289, 431,
	363, 358, 347, 325, 476, 348, 349, 339, 391, 357,
	392, 340, 369, 368, 370, 0, 0, 0, 0, 0,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 602, 0, 0, 606, 0, 445,
	0, 0, 0, 0, 0, 0, 417, 0, 0, 350,
	0, 0, 0, 461, 0, 403, 385, 628, 0, 0,
	401, 355, 430, 393, 436, 419, 444, 397, 394, 281,
	420, 320, 366, 293, 295, 315, 322, 324, 326, 327,
	375, 376, 388, 407, 421, 422, 423, 319, 303, 402,
	304, 337, 305, 282, 311, 309, 312, 409, 313, 284,
	389, 427, 0, 332, 398, 362, 285, 361, 390, 426,
	425, 294, 452, 458, 459, 548, 0, 464, 629, 630,
	631, 473, 478, 479, 480, 482, 483, 484, 485, 549,
	566, 533, 503, 466, 557, 500, 504, 505, 569, 0,
	0, 0, 457, 351, 352, 0, 330, 278, 279, 624,
	316, 381, 571, 604, 605, 496, 0, 558, 497, 506,
	308, 530, 542, 541, 377, 456, 0, 553, 556, 486,
	623, 0, 550, 565, 627, 564, 620, 387, 0, 406,
	562, 509, 0, 554, 528, 0, 555, 524, 559, 0,
	498, 0, 413, 438, 450, 467, 470, 499, 584, 585,
	586, 283, 469, 588, 589, 590, 591, 592, 593, 594,
	587, 441, 531, 508, 534, 449, 511, 510, 0, 0,
	545, 465, 546, 547, 371, 372, 373, 374, 334, 572,
	301, 468, 396, 0, 532, 0, 0, 0, 0, 0,
	0, 0, 0, 537, 538, 535, 632, 0, 595, 596,
	0, 0, 462, 463, 329, 336, 481, 338, 300, 386,
	331, 447, 345, 0, 474, 539, 475, 598, 601, 599,
	600, 378, 341, 342, 410, 346, 356, 399, 446, 384,
	404, 298, 437, 411, 360, 525, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 580, 579, 578, 577, 576, 575, 574,
	573, 0, 0, 522, 424, 310, 272, 306, 307, 314,
	621, 618, 428, 622, 0, 280, 502, 354, 157, 395,
	328, 567, 568, 0, 0, 228, 229, 230, 231, 232,
	233, 234, 235, 273, 236, 237, 238, 239, 240, 241,
	242, 245, 246, 247, 248, 249, 250, 251, 252, 570,
	243, 244, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 0, 0, 0, 274,
	275, 276, 277, 0, 0, 268, 269, 270, 271, 0,
	0, 0, 453, 454, 455, 477, 0, 439, 501, 619,
	0, 0, 0, 0, 0, 0, 0, 551, 563, 597,
	0, 607, 608, 610, 612, 611, 614, 416, 0, 0,
	625, 492, 493, 626, 603, 383, 0, 507, 540, 529,
	613, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 323, 1007, 0, 353, 544, 526, 536, 527,
	512, 513, 514, 521, 333, 515, 516, 517, 487, 518,
	488, 519, 520, 0, 543, 494, 412, 367, 561, 560,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 1014,
	1015, 0, 0, 0, 0, 296, 216, 489, 609, 491,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1018, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 418, 1002, 297, 408, 448, 302, 415,
	292, 382, 405, 0, 0, 288, 433, 414, 364, 343,
	344, 287, 0, 400, 321, 335, 318, 380, 0, 432,
	460, 317, 451, 991, 443, 290, 990, 442, 379, 429,
	434, 365, 359, 0, 289, 431, 363, 358, 347, 325,
	476, 348, 349, 339, 391, 357, 392, 340, 369, 368,
	370, 0, 0, 0, 0, 0, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	602, 0, 0, 606, 0, 445, 0, 0, 0, 0,
	0, 0, 417, 0, 0, 350, 0, 0, 0, 461,
	0, 403, 385, 628, 0, 0, 401, 355, 430, 393,
	436, 419, 444, 1005, 394, 281, 420, 320, 366, 293,
	295, 315, 322, 324, 326, 327, 375, 376, 388, 407,
	421, 422, 423, 319, 303, 402, 304, 337, 305, 282,
	311, 309, 312, 409, 313, 284, 389, 427, 0, 332,
	398, 362, 285, 361, 390, 426, 425, 294, 452, 458,
	459, 548, 0, 464, 629, 630, 631, 473, 478, 479,
	480, 482, 483, 484, 485, 549, 566, 533, 503, 466,
	557, 500, 504, 505, 569, 0, 0, 0, 457, 351,
	352, 0, 330, 278, 279, 624, 316, 381, 571, 604,
	605, 496, 0, 558, 497, 506, 308, 530, 542, 541,
	377, 456, 0, 553, 556, 486, 623, 0, 550, 565,
	627, 564, 620, 387, 0, 406, 562, 509, 0, 554,
	528, 0, 555, 524, 559, 0, 498, 0, 413, 438,
	450, 467, 470, 499, 584, 585, 586, 283, 469, 588,
	589, 590, 591, 592, 593, 1006, 587, 441, 531, 508,
	534, 449, 511, 510, 0, 0, 545, 1009, 546, 547,
	371, 372, 373, 374, 334, 572, 301, 468, 396, 0,
	532, 0, 0, 0, 0, 0, 0, 0, 0, 537,
	538, 535, 632, 0, 595, 596, 0, 0, 462, 463,
	329, 336, 481, 338, 300, 386, 331, 447, 345, 0,
	474, 539, 475, 598, 601, 599, 600, 1016, 1003, 1012,
	1004, 346, 356, 399, 446, 384, 404, 298, 437, 411,
	1013, 525, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 580,
	579, 578, 577, 576, 575, 574, 573, 0, 0, 522,
	424, 310, 272, 306, 307, 314, 621, 618, 428, 622,
	0, 280, 502, 354, 0, 395, 328, 567, 568, 0,
	0, 228, 229, 230, 231, 232, 233, 234, 235, 273,
	236, 237, 238, 239, 240, 241, 242, 245, 246, 247,
	248, 249, 250, 251, 252, 570, 243, 244, 253, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 0, 0, 0, 274, 275, 276, 277, 0,
	0, 268, 269, 270, 271, 0, 0, 0, 453, 454,
	455, 477, 0, 439, 501, 619, 0, 0, 0, 0,
	0, 0, 0, 551, 563, 597, 0, 607, 608, 610,
	612, 611, 614, 416, 193, 0, 625, 492, 493, 626,
	603, 0, 0, 0, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 130, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1990, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 0, 289, 431, 363, 358, 347, 325, 476,
	348, 349, 339, 391, 357, 392, 340, 369, 368, 370,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	0, 0, 606, 0, 445, 0, 0, 0, 0, 0,
	0, 417, 0, 0, 350, 0, 0, 0, 461, 0,
	403, 385, 628, 0, 0, 401, 355, 430, 393, 436,
	419, 444, 397, 394, 281, 420, 320, 366, 293, 295,
	315, 322, 324, 326, 327, 375, 376, 388, 407, 421,
	422, 423, 319, 303, 402, 304, 337, 305, 282, 311,
	309, 312, 409, 313, 284, 389, 427, 0, 332, 398,
	362, 285, 361, 390, 426, 425, 294, 452, 458, 459,
	548, 0, 464, 629, 630, 631, 473, 478, 479, 480,
	482, 483, 484, 485, 549, 566, 533, 503, 466, 557,
	500, 504, 505, 569, 0, 0, 0, 457, 351, 352,
	0, 330, 278, 279, 624, 316, 381, 571, 604, 605,
	496, 0, 558, 497, 506, 308, 530, 542, 541, 377,
	456, 0, 553, 556, 486, 623, 0, 550, 565, 627,
	564, 620, 387, 0, 406, 562, 509, 0, 554, 528,
	0, 555, 524, 559, 0, 498, 0, 413, 438, 450,
	467, 470, 499, 584, 585, 586, 283, 469, 588, 589,
	590, 591, 592, 593, 594, 587, 441, 531, 508, 534,
	449, 511, 510, 0, 0, 545, 465, 546, 547, 371,
	372, 373, 374, 334, 572, 301, 468, 396, 0, 532,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 538,
	535, 632, 0, 595, 596, 0, 0, 462, 463, 329,
	336, 481, 338, 300, 386, 331, 447, 345, 0, 474,
	539, 475, 598, 601, 599, 600, 378, 341, 342, 410,
	346, 356, 399, 446, 384, 404, 298, 437, 411, 360,
	525, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 579,
	578, 577, 576, 575, 574, 573, 0, 0, 522, 424,
	310, 272, 306, 307, 314, 621, 618, 428, 622, 0,
	280, 502, 354, 157, 395, 328, 567, 568, 0, 0,
	228, 229, 230, 231, 232, 233, 234, 235, 273, 236,
	237, 238, 239, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 251, 252, 570, 243, 244, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 0, 0, 0, 274, 275, 276, 277, 0, 0,
	268, 269, 270, 271, 0, 0, 0, 453, 454, 455,
	477, 0, 439, 501, 619, 0, 0, 0, 0, 0,
	0, 0, 551, 563, 597, 0, 607, 608, 610, 612,
	611, 614, 416, 0, 0, 625, 492, 493, 626, 603,
	383, 0, 507, 540, 529, 613, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 323, 0, 0,
	353, 544, 526, 536, 527, 512, 513, 514, 521, 333,
	515, 516, 517, 487, 518, 488, 519, 520, 0, 543,
	494, 412, 367, 561, 560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 1014, 1015, 0, 0, 0, 0,
	296, 216, 489, 609, 491, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1018, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 418, 435,
	297, 408, 448, 302, 415, 292, 382, 405, 0, 0,
	288, 433, 414, 364, 343, 344, 287, 0, 400, 321,
	335, 318, 380, 0, 432, 460, 317, 451, 991, 443,
	290, 990, 442, 379, 429, 434, 365, 359, 0, 289,
	431, 363, 358, 347, 325, 476, 348, 349, 339, 391,
	357, 392, 340, 369, 368, 370, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 606, 0,
	445, 0, 0, 0, 0, 0, 0, 417, 0, 0,
	350, 0, 0, 0, 461, 0, 403, 385, 628, 0,
	0, 401, 355, 430, 393, 436, 419, 444, 397, 394,
	281, 420, 320, 366, 293, 295, 315, 322, 324, 326,
	327, 375, 376, 388, 407, 421, 422, 423, 319, 303,
	402, 304, 337, 305, 282, 311, 309, 312, 409, 313,
	284, 389, 427, 0, 332, 398, 362, 285, 361, 390,
	426, 425, 294, 452, 458, 459, 548, 0, 464, 629,
	630, 631, 473, 478, 479, 480, 482, 483, 484, 485,
	549, 566, 533, 503, 466, 557, 500, 504, 505, 569,
	0, 0, 0, 457, 351, 352, 0, 330, 278, 279,
	624, 316, 381, 571, 604, 605, 496, 0, 558, 497,
	506, 308, 530, 542, 541, 377, 456, 0, 553, 556,
	486, 623, 0, 550, 565, 627, 564, 620, 387, 0,
	406, 562, 509, 0, 554, 528, 0, 555, 524, 559,
	0, 498, 0, 413, 438, 450, 467, 470, 499, 584,
	585, 586, 283, 469, 588, 589, 590, 591, 592, 593,
	594, 587, 441, 531, 508, 534, 449, 511, 510, 0,
	0, 545, 465, 546, 547, 371, 372, 373, 374, 334,
	572, 301, 468, 396, 0, 532, 0, 0, 0, 0,
	0, 0, 0, 0, 537, 538, 535, 632, 0, 595,
	596, 0, 0, 462, 463, 329, 336, 481, 338, 300,
	386, 331, 447, 345, 0, 474, 539, 475, 598, 601,
	599, 600, 1016, 2009, 1012, 2010, 346, 356, 399, 446,
	384, 404, 298, 437, 411, 1013, 525, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 579, 578, 577, 576, 575,
	574, 573, 0, 0, 522, 424, 310, 272, 306, 307,
	314, 621, 618, 428, 622, 0, 280, 502, 354, 0,
	395, 328, 567, 568, 0, 0, 228, 229, 230, 231,
	232, 233, 234, 235, 273, 236, 237, 238, 239, 240,
	241, 242, 245, 246, 247, 248, 249, 250, 251, 252,
	570, 243, 244, 253, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 0, 0, 0,
	274, 275, 276, 277, 0, 0, 268, 269, 270, 271,
	0, 0, 0, 453, 454, 455, 477, 0, 439, 501,
	619, 0, 0, 0, 0, 0, 0, 0, 551, 563,
	597, 0, 607, 608, 610, 612, 611, 614, 416, 0,
	0, 625, 492, 493, 626, 603, 383, 0, 507, 540,
	529, 613, 495, 0, 0, 2875, 0, 0, 0, 0,
	0, 0, 0, 323, 0, 0, 353, 544, 526, 536,
	527, 512, 513, 514, 521, 333, 515, 516, 517, 487,
	518, 488, 519, 520, 0, 543, 494, 412, 367, 561,
	560, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 296, 216, 489, 609,
	491, 490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 418, 435, 297, 408, 448, 302,
	415, 292, 382, 405, 0, 0, 288, 433, 414, 364,
	343, 344, 287, 0, 400, 321, 335, 318, 380, 0,
	432, 460, 317, 451, 0, 443, 290, 0, 442, 379,
	429, 434, 365, 359, 0, 289, 431, 363, 358, 347,
	325, 476, 348, 349, 339, 391, 357, 392, 340, 369,
	368, 370, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 2878, 0, 0,
	2877, 602, 0, 0, 606, 0, 445, 0, 0, 0,
	0, 0, 0, 417, 0, 0, 350, 0, 0, 0,
	461, 0, 403, 385, 628, 0, 0, 401, 355, 430,
	393, 436, 419, 444, 397, 394, 281, 420, 320, 366,
	293, 295, 315, 322, 324, 326, 327, 375, 376, 388,
	407, 421, 422, 423, 319, 303, 402, 304, 337, 305,
	282, 311, 309, 312, 409, 313, 284, 389, 427, 0,
	332, 398, 362, 285, 361, 390, 426, 425, 294, 452,
	458, 459, 548, 0, 464, 629, 630, 631, 473, 478,
	479, 480, 482, 483, 484, 485, 549, 566, 533, 503,
	466, 557, 500, 504, 505, 569, 0, 0, 0, 457,
	351, 352, 0, 330, 278, 279, 624, 316, 381, 571,
	604, 605, 496, 0, 558, 497, 506, 308, 530, 542,
	541, 377, 456, 0, 553, 556, 486, 623, 0, 550,
	565, 627, 564, 620, 387, 0, 406, 562, 509, 0,
	554, 528, 0, 555, 524, 559, 0, 498, 0, 413,
	438, 450, 467, 470, 499, 584, 585, 586, 283, 469,
	588, 589, 590, 591, 592, 593, 594, 587, 441, 531,
	508, 534, 449, 511, 510, 0, 0, 545, 465, 546,
	547, 371, 372, 373, 374, 334, 572, 301, 468, 396,
	0, 532, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 538, 535, 632, 0, 595, 596, 0, 0, 462,
	463, 329, 336, 481, 338, 300, 386, 331, 447, 345,
	0, 474, 539, 475, 598, 601, 599, 600, 378, 341,
	342, 410, 346, 356, 399, 446, 384, 404, 298, 437,
	411, 360, 525, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	580, 579, 578, 577, 576, 575, 574, 573, 0, 0,
	522, 424, 310, 272, 306, 307, 314, 621, 618, 428,
	622, 0, 280, 502, 354, 0, 395, 328, 567, 568,
	0, 0, 228, 229, 230, 231, 232, 233, 234, 235,
	273, 236, 237, 238, 239, 240, 241, 242, 245, 246,
	247, 248, 249, 250, 251, 252, 570, 243, 244, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 0, 0, 0, 274, 275, 276, 277,
	0, 0, 268, 269, 270, 271, 0, 0, 0, 453,
	454, 455, 477, 0, 439, 501, 619, 0, 0, 0,
	0, 0, 0, 0, 551, 563, 597, 0, 607, 608,
	610, 612, 611, 614, 416, 0, 0, 625, 492, 493,
	626, 603, 383, 0, 507, 540, 529, 613, 495, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 323,
	1489, 0, 353, 544, 526, 536, 527, 512, 513, 514,
	521, 333, 515, 516, 517, 487, 518, 488, 519, 520,
	0, 543, 494, 412, 367, 561, 560, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 1487, 0,
	0, 0, 296, 216, 489, 609, 491, 490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1485, 0, 0, 0, 0, 0, 0, 286,
	418, 435, 297, 408, 448, 302, 415, 292, 382, 405,
	0, 0, 288, 433, 414, 364, 343, 344, 287, 0,
	400, 321, 335, 318, 380, 0, 432, 460, 317, 451,
	0, 443, 290, 0, 442, 379, 429, 434, 365, 359,
	0, 289, 431, 363, 358, 347, 325, 476, 348, 349,
	339, 391, 357, 392, 340, 369, 368, 370, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 0, 0,
	606, 0, 445, 0, 0, 0, 0, 0, 0, 417,
	0, 0, 350, 0, 0, 0, 461, 0, 403, 385,
	628, 0, 0, 401, 355, 430, 393, 436, 419, 444,
	397, 394, 281, 420, 320, 366, 293, 295, 315, 322,
	324, 326, 327, 375, 376, 388, 407, 421, 422, 423,
	319, 303, 402, 304, 337, 305, 282, 311, 309, 312,
	409, 313, 284, 389, 427, 0, 332, 398, 362, 285,
	361, 390, 426, 425, 294, 452, 458, 459, 548, 0,
	464, 629, 630, 631, 473, 478, 479, 480, 482, 483,
	484, 485, 549, 566, 533, 503, 466, 557, 500, 504,
	505, 569, 0, 0, 0, 457, 351, 352, 0, 330,
	278, 279, 624, 316, 381, 571, 604, 605, 496, 0,
	558, 497, 506, 308, 530, 542, 541, 377, 456, 0,
	553, 556, 486, 623, 0, 550, 565, 627, 564, 620,
	387, 0, 406, 562, 509, 0, 554, 528, 0, 555,
	524, 559, 0, 498, 0, 413, 438, 450, 467, 470,
	499, 584, 585, 586, 283, 469, 588, 589, 590, 591,
	592, 593, 594, 587, 441, 531, 508, 534, 449, 511,
	510, 0, 0, 545, 465, 546, 547, 371, 372, 373,
	374, 334, 572, 301, 468, 396, 0, 532, 0, 0,
	0, 0, 0, 0, 0, 0, 537, 538, 535, 632,
	0, 595, 596, 0, 0, 462, 463, 329, 336, 481,
	338, 300, 386, 331, 447, 345, 0, 474, 539, 475,
	598, 601, 599, 600, 378, 341, 342, 410, 346, 356,
	399, 446, 384, 404, 298, 437, 411, 360, 525, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 579, 578, 577,
	576, 575, 574, 573, 0, 0, 522, 424, 310, 272,
	306, 307, 314, 621, 618, 428, 622, 0, 280, 502,
	354, 0, 395, 328, 567, 568, 0, 0, 228, 229,
	230, 231, 232, 233, 234, 235, 273, 236, 237, 238,
	239, 240, 241, 242, 245, 246, 247, 248, 249, 250,
	251, 252, 570, 243, 244, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 0,
	0, 0, 274, 275, 276, 277, 0, 0, 268, 269,
	270, 271, 0, 0, 0, 453, 454, 455, 477, 0,
	439, 501, 619, 0, 0, 0, 0, 0, 0, 0,
	551, 563, 597, 0, 607, 608, 610, 612, 611, 614,
	416, 0, 0, 625, 492, 493, 626, 603, 383, 0,
	507, 540, 529, 613, 495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 323, 1483, 0, 353, 544,
	526, 536, 527, 512, 513, 514, 521, 333, 515, 516,
	517, 487, 518, 488, 519, 520, 0, 543, 494, 412,
	367, 561, 560, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 1487, 0, 0, 0, 296, 216,
	489, 609, 491, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1485, 0,
	0, 0, 0, 0, 0, 286, 418, 435, 297, 408,
	448, 302, 415, 292, 382, 405, 0, 0, 288, 433,
	414, 364, 343, 344, 287, 0, 400, 321, 335, 318,
	380, 0, 432, 460, 317, 451, 0, 443, 290, 0,
	442, 379, 429, 434, 365, 359, 0, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3913, 0, 215, 820, 0,
	0, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 0, 289, 431, 363, 358, 347, 325, 476,
	348, 349, 339, 391, 357, 392, 340, 369, 368, 370,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	0, 0, 606, 0, 445, 0, 0, 0, 0, 0,
	0, 417, 0, 0, 350, 0, 0, 0, 461, 0,
	403, 385, 628, 0, 0, 401, 355, 430, 393, 436,
	419, 444, 397, 394, 281, 420, 320, 366, 293, 295,
	315, 322, 324, 326, 327, 375, 376, 388, 407, 421,
	422, 423, 319, 303, 402, 304, 337, 305, 282, 311,
	309, 312, 409, 313, 284, 389, 427, 0, 332, 398,
	362, 285, 361, 390, 426, 425, 294, 452, 458, 459,
	548, 0, 464, 629, 630, 631, 473, 478, 479, 480,
	482, 483, 484, 485, 549, 566, 533, 503, 466, 557,
	500, 504, 505, 569, 0, 0, 0, 457, 351, 352,
	0, 330, 278, 279, 624, 316, 381, 571, 604, 605,
	496, 0, 558, 497, 506, 308, 530, 542, 541, 377,
	456, 0, 553, 556, 486, 623, 0, 550, 565, 627,
	564, 620, 387, 0, 406, 562, 509, 0, 554, 528,
	0, 555, 524, 559, 0, 498, 0, 413, 438, 450,
	467, 470, 499, 584, 585, 586, 283, 469, 588, 589,
	590, 591, 592, 593, 594, 587, 441, 531, 508, 534,
	449, 511, 510, 0, 0, 545, 465, 546, 547, 371,
	372, 373, 374, 334, 572, 301, 468, 396, 0, 532,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 538,
	535, 632, 0, 595, 596, 0, 0, 462, 463, 329,
	336, 481, 338, 300, 386, 331, 447, 345, 0, 474,
	539, 475, 598, 601, 599, 600, 378, 341, 342, 410,
	346, 356, 399, 446, 384, 404, 298, 437, 411, 360,
	525, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 579,
	578, 577, 576, 575, 574, 573, 0, 0, 522, 424,
	310, 272, 306, 307, 314, 621, 618, 428, 622, 0,
	280, 502, 354, 0, 395, 328, 567, 568, 0, 0,
	228, 229, 230, 231, 232, 233, 234, 235, 273, 236,
	237, 238, 239, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 251, 252, 570, 243, 244, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 0, 0, 0, 274, 275, 276, 277, 0, 0,
	268, 269, 270, 271, 0, 0, 0, 453, 454, 455,
	477, 0, 439, 501, 619, 0, 0, 0, 0, 0,
	0, 0, 551, 563, 597, 0, 607, 608, 610, 612,
	611, 614, 416, 0, 0, 625, 492, 493, 626, 603,
	383, 0, 507, 540, 529, 613, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 323, 0, 0,
	353, 544, 526, 536, 527, 512, 513, 514, 521, 333,
	515, 516, 517, 487, 518, 488, 519, 520, 0, 543,
	494, 412, 367, 561, 560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 1487, 0, 0, 0,
	296, 216, 489, 609, 491, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1485, 0, 0, 0, 0, 0, 0, 286, 418, 435,
	297, 408, 448, 302, 415, 292, 382, 405, 0, 0,
	288, 433, 414, 364, 343, 344, 287, 0, 400, 321,
	335, 318, 380, 0, 432, 460, 317, 451, 0, 443,
	290, 0, 442, 379, 429, 434, 365, 359, 0, 289,
	431, 363, 358, 347, 325, 476, 348, 349, 339, 391,
	357, 392, 340, 369, 368, 370, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 606, 0,
	445, 0, 0, 0, 0, 0, 0, 417, 0, 0,
	350, 0, 0, 0, 461, 0, 403, 385, 628, 0,
	0, 401, 355, 430, 393, 436, 419, 444, 397, 394,
	281, 420, 320, 366, 293, 295, 315, 322, 324, 326,
	327, 375, 376, 388, 407, 421, 422, 423, 319, 303,
	402, 304, 337, 305, 282, 311, 309, 312, 409, 313,
	284, 389, 427, 0, 332, 398, 362, 285, 361, 390,
	426, 425, 294, 452, 458, 459, 548, 0, 464, 629,
	630, 631, 473, 478, 479, 480, 482, 483, 484, 485,
	549, 566, 533, 503, 466, 557, 500, 504, 505, 569,
	0, 0, 0, 457, 351, 352, 0, 330, 278, 279,
	624, 316, 381, 571, 604, 605, 496, 0, 558, 497,
	506, 308, 530, 542, 541, 377, 456, 0, 553, 556,
	486, 623, 0, 550, 565, 627, 564, 620, 387, 0,
	406, 562, 509, 0, 554, 528, 0, 555, 524, 559,
	0, 498, 0, 413, 438, 450, 467, 470, 499, 584,
	585, 586, 283, 469, 588, 589, 590, 591, 592, 593,
	594, 587, 441, 531, 508, 534, 449, 511, 510, 0,
	0, 545, 465, 546, 547, 371, 372, 373, 374, 334,
	572, 301, 468, 396, 0, 532, 0, 0, 0, 0,
	0, 0, 0, 0, 537, 538, 535, 632, 0, 595,
	596, 0, 0, 462, 463, 329, 336, 481, 338, 300,
	386, 331, 447, 345, 0, 474, 539, 475, 598, 601,
	599, 600, 378, 341, 342, 410, 346, 356, 399, 446,
	384, 404, 298, 437, 411, 360, 525, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 579, 578, 577, 576, 575,
	574, 573, 0, 0, 522, 424, 310, 272, 306, 307,
	314, 621, 618, 428, 622, 0, 280, 502, 354, 0,
	395, 328, 567, 568, 0, 0, 228, 229, 230, 231,
	232, 233, 234, 235, 273, 236, 237, 238, 239, 240,
	241, 242, 245, 246, 247, 248, 249, 250, 251, 252,
	570, 243, 244, 253, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 0, 0, 0,
	274, 275, 276, 277, 0, 0, 268, 269, 270, 271,
	0, 0, 0, 453, 454, 455, 477, 0, 439, 501,
	619, 0, 0, 0, 0, 0, 0, 0, 551, 563,
	597, 0, 607, 608, 610, 612, 611, 614, 416, 0,
	0, 625, 492, 493, 626, 603, 383, 0, 507, 540,
	529, 613, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 323, 0, 0, 353, 544, 526, 536,
	527, 512, 513, 514, 521, 333, 515, 516, 517, 487,
	518, 488, 519, 520, 0, 543, 494, 412, 367, 561,
	560, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 1487, 0, 0, 0, 296, 216, 489, 609,
	491, 490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1695, 0, 0, 0,
	0, 0, 0, 286, 418, 435, 297, 408, 448, 302,
	415, 292, 382, 405, 0, 0, 288, 433, 414, 364,
	343, 344, 287, 0, 400, 321, 335, 318, 380, 0,
	432, 460, 317, 451, 0, 443, 290, 0, 442, 379,
	429, 434, 365, 359, 0, 289, 431, 363, 358, 347,
	325, 476, 348, 349, 339, 391, 357, 392, 340, 369,
	368, 370, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 602, 0, 0, 606, 0, 445, 0, 0, 0,
	0, 0, 0, 417, 0, 0, 350, 0, 0, 0,
	461, 0, 403, 385, 628, 0, 0, 401, 355, 430,
	393, 436, 419, 444, 397, 394, 281, 420, 320, 366,
	293, 295, 315, 322, 324, 326, 327, 375, 376, 388,
	407, 421, 422, 423, 319, 303, 402, 304, 337, 305,
	282, 311, 309, 312, 409, 313, 284, 389, 427, 0,
	332, 398, 362, 285, 361, 390, 426, 425, 294, 452,
	458, 459, 548, 0, 464, 629, 630, 631, 473, 478,
	479, 480, 482, 483, 484, 485, 549, 566, 533, 503,
	466, 557, 500, 504, 505, 569, 0, 0, 0, 457,
	351, 352, 0, 330, 278, 279, 624, 316, 381, 571,
	604, 605, 496, 0, 558, 497, 506, 308, 530, 542,
	541, 377, 456, 0, 553, 556, 486, 623, 0, 550,
	565, 627, 564, 620, 387, 0, 406, 562, 509, 0,
	554, 528, 0, 555, 524, 559, 0, 498, 0, 413,
	438, 450, 467, 470, 499, 584, 585, 586, 283, 469,
	588, 589, 590, 591, 592, 593, 594, 587, 441, 531,
	508, 534, 449, 511, 510, 0, 0, 545, 465, 546,
	547, 371, 372, 373, 374, 334, 572, 301, 468, 396,
	0, 532, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 538, 535, 632, 0, 595, 596, 0, 0, 462,
	463, 329, 336, 481, 338, 300, 386, 331, 447, 345,
	0, 474, 539, 475, 598, 601, 599, 600, 378, 341,
	342, 410, 346, 356, 399, 446, 384, 404, 298, 437,
	411, 360, 525, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	580, 579, 578, 577, 576, 575, 574, 573, 0, 0,
	522, 424, 310, 272, 306, 307, 314, 621, 618, 428,
	622, 0, 280, 502, 354, 0, 395, 328, 567, 568,
	0, 0, 228, 229, 230, 231, 232, 233, 234, 235,
	273, 236, 237, 238, 239, 240, 241, 242, 245, 246,
	247, 248, 249, 250, 251, 252, 570, 243, 244, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 0, 0, 0, 274, 275, 276, 277,
	0, 0, 268, 269, 270, 271, 0, 0, 0, 453,
	454, 455, 477, 0, 439, 501, 619, 0, 0, 0,
	0, 0, 0, 0, 551, 563, 597, 0, 607, 608,
	610, 612, 611, 614, 416, 0, 0, 625, 492, 493,
	626, 603, 383, 0, 507, 540, 529, 613, 495, 0,
	0, 0, 0, 0, 2436, 0, 0, 0, 0, 323,
	0, 0, 353, 544, 526, 536, 527, 512, 513, 514,
	521, 333, 515, 516, 517, 487, 518, 488, 519, 520,
	0, 543, 494, 412, 367, 561, 560, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 2438, 0,
	0, 0, 296, 216, 489, 609, 491, 490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	418, 435, 297, 408, 448, 302, 415, 292, 382, 405,
	0, 0, 288, 433, 414, 364, 343, 344, 287, 0,
	400, 321, 335, 318, 380, 0, 432, 460, 317, 451,
	0, 443, 290, 0, 442, 379, 429, 434, 365, 359,
	0, 289, 431, 363, 358, 347, 325, 476, 348, 349,
	339, 391, 357, 392, 340, 369, 368, 370, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 0, 0,
	606, 0, 445, 0, 0, 0, 0, 0, 0, 417,
	0, 0, 350, 0, 0, 0, 461, 0, 403, 385,
	628, 0, 0, 401, 355, 430, 393, 436, 419, 444,
	397, 394, 281, 420, 320, 366, 293, 295, 315, 322,
	324, 326, 327, 375, 376, 388, 407, 421, 422, 423,
	319, 303, 402, 304, 337, 305, 282, 311, 309, 312,
	409, 313, 284, 389, 427, 0, 332, 398, 362, 285,
	361, 390, 426, 425, 294, 452, 458, 459, 548, 0,
	464, 629, 630, 631, 473, 478, 479, 480, 482, 483,
	484, 485, 549, 566, 533, 503, 466, 557, 500, 504,
	505, 569, 0, 0, 0, 457, 351, 352, 0, 330,
	278, 279, 624, 316, 381, 571, 604, 605, 496, 0,
	558, 497, 506, 308, 530, 542, 541, 377, 456, 0,
	553, 556, 486, 623, 0, 550, 565, 627, 564, 620,
	387, 0, 406, 562, 509, 0, 554, 528, 0, 555,
	524, 559, 0, 498, 0, 413, 438, 450, 467, 470,
	499, 584, 585, 586, 283, 469, 588, 589, 590, 591,
	592, 593, 594, 587, 441, 531, 508, 534, 449, 511,
	510, 0, 0, 545, 465, 546, 547, 371, 372, 373,
	374, 334, 572, 301, 468, 396, 0, 532, 0, 0,
	0, 0, 0, 0, 0, 0, 537, 538, 535, 632,
	0, 595, 596, 0, 0, 462, 463, 329, 336, 481,
	338, 300, 386, 331, 447, 345, 0, 474, 539, 475,
	598, 601, 599, 600, 378, 341, 342, 410, 346, 356,
	399, 446, 384, 404, 298, 437, 411, 360, 525, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 579, 578, 577,
	576, 575, 574, 573, 0, 0, 522, 424, 310, 272,
	306, 307, 314, 621, 618, 428, 622, 0, 280, 502,
	354, 0, 395, 328, 567, 568, 0, 0, 228, 229,
	230, 231, 232, 233, 234, 235, 273, 236, 237, 238,
	239, 240, 241, 242, 245, 246, 247, 248, 249, 250,
	251, 252, 570, 243, 244, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 0,
	0, 0, 274, 275, 276, 277, 0, 0, 268, 269,
	270, 271, 0, 0, 0, 453, 454, 455, 477, 0,
	439, 501, 619, 0, 0, 0, 0, 0, 0, 0,
	551, 563, 597, 0, 607, 608, 610, 612, 611, 614,
	416, 0, 0, 625, 492, 493, 626, 603, 383, 0,
	507, 540, 529, 613, 495, 0, 0, 0, 0, 0,
	2057, 0, 0, 0, 0, 323, 0, 0, 353, 544,
	526, 536, 527, 512, 513, 514, 521, 333, 515, 516,
	517, 487, 518, 488, 519, 520, 0, 543, 494, 412,
	367, 561, 560, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 2058, 0, 0, 0, 296, 216,
	489, 609, 491, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 418, 435, 297, 408,
	448, 302, 415, 292, 382, 405, 0, 0, 288, 433,
	414, 364, 343, 344, 287, 0, 400, 321, 335, 318,
	380, 0, 432, 460, 317, 451, 0, 443, 290, 0,
	442, 379, 429, 434, 365, 359, 0, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	3082, 3084, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 0, 289, 431, 363, 358, 347, 325, 476,
	348, 349, 339, 391, 357, 392, 340, 369, 368, 370,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	0, 0, 606, 0, 445, 0, 0, 0, 0, 0,
	0, 417, 0, 0, 350, 0, 0, 0, 461, 0,
	403, 385, 628, 0, 0, 401, 355, 430, 393, 436,
	419, 444, 397, 394, 281, 420, 320, 366, 293, 295,
	315, 322, 324, 326, 327, 375, 376, 388, 407, 421,
	422, 423, 319, 303, 402, 304, 337, 305, 282, 311,
	309, 312, 409, 313, 284, 389, 427, 0, 332, 398,
	362, 285, 361, 390, 426, 425, 294, 452, 458, 459,
	548, 0, 464, 629, 630, 631, 473, 478, 479, 480,
	482, 483, 484, 485, 549, 566, 533, 503, 466, 557,
	500, 504, 505, 569, 0, 0, 0, 457, 351, 352,
	0, 330, 278, 279, 624, 316, 381, 571, 604, 605,
	496, 0, 558, 497, 506, 308, 530, 542, 541, 377,
	456, 0, 553, 556, 486, 623, 0, 550, 565, 627,
	564, 620, 387, 0, 406, 562, 509, 0, 554, 528,
	0, 555, 524, 559, 0, 498, 0, 413, 438, 450,
	467, 470, 499, 584, 585, 586, 283, 469, 588, 589,
	590, 591, 592, 593, 594, 587, 441, 531, 508, 534,
	449, 511, 510, 0, 0, 545, 465, 546, 547, 371,
	372, 373, 374, 334, 572, 301, 468, 396, 0, 532,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 538,
	535, 632, 0, 595, 596, 0, 0, 462, 463, 329,
	336, 481, 338, 300, 386, 331, 447, 345, 0, 474,
	539, 475, 598, 601, 599, 600, 378, 341, 342, 410,
	346, 356, 399, 446, 384, 404, 298, 437, 411, 360,
	525, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 579,
	578, 577, 576, 575, 574, 573, 0, 0, 522, 424,
	310, 272, 306, 307, 314, 621, 618, 428, 622, 0,
	280, 502, 354, 0, 395, 328, 567, 568, 0, 0,
	228, 229, 230, 231, 232, 233, 234, 235, 273, 236,
	237, 238, 239, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 251, 252, 570, 243, 244, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 0, 0, 0, 274, 275, 276, 277, 0, 0,
	268, 269, 270, 271, 0, 0, 0, 453, 454, 455,
	477, 0, 439, 501, 619, 0, 0, 0, 0, 0,
	0, 0, 551, 563, 597, 0, 607, 608, 610, 612,
	611, 614, 416, 0, 0, 625, 492, 493, 626, 603,
	383, 0, 507, 540, 529, 613, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 323, 2457, 0,
	353, 544, 526, 536, 527, 512, 513, 514, 521, 333,
	515, 516, 517, 487, 518, 488, 519, 520, 0, 543,
	494, 412, 367, 561, 560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 1487, 0, 0, 0,
	296, 216, 489, 609, 491, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 418, 435,
	297, 408, 448, 302, 415, 292, 382, 405, 0, 0,
	288, 433, 414, 364, 343, 344, 287, 0, 400, 321,
	335, 318, 380, 0, 432, 460, 317, 451, 0, 443,
	290, 0, 442, 379, 429, 434, 365, 359, 0, 289,
	431, 363, 358, 347, 325, 476, 348, 349, 339, 391,
	357, 392, 340, 369, 368, 370, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 606, 0,
	445, 0, 0, 0, 0, 0, 0, 417, 0, 0,
	350, 0, 0, 0, 461, 0, 403, 385, 628, 0,
	0, 401, 355, 430, 393, 436, 419, 444, 397, 394,
	281, 420, 320, 366, 293, 295, 315, 322, 324, 326,
	327, 375, 376, 388, 407, 421, 422, 423, 319, 303,
	402, 304, 337, 305, 282, 311, 309, 312, 409, 313,
	284, 389, 427, 0, 332, 398, 362, 285, 361, 390,
	426, 425, 294, 452, 458, 459, 548, 0, 464, 629,
	630, 631, 473, 478, 479, 480, 482, 483, 484, 485,
	549, 566, 533, 503, 466, 557, 500, 504, 505, 569,
	0, 0, 0, 457, 351, 352, 0, 330, 278, 279,
	624, 316, 381, 571, 604, 605, 496, 0, 558, 497,
	506, 308, 530, 542, 541, 377, 456, 0, 553, 556,
	486, 623, 0, 550, 565, 627, 564, 620, 387, 0,
	406, 562, 509, 0, 554, 528, 0, 555, 524, 559,
	0, 498, 0, 413, 438, 450, 467, 470, 499, 584,
	585, 586, 283, 469, 588, 589, 590, 591, 592, 593,
	594, 587, 441, 531, 508, 534, 449, 511, 510, 0,
	0, 545, 465, 546, 547, 371, 372, 373, 374, 334,
	572, 301, 468, 396, 0, 532, 0, 0, 0, 0,
	0, 0, 0, 0, 537, 538, 535, 632, 0, 595,
	596, 0, 0, 462, 463, 329, 336, 481, 338, 300,
	386, 331, 447, 345, 0, 474, 539, 475, 598, 601,
	599, 600, 378, 341, 342, 410, 346, 356, 399, 446,
	384, 404, 298, 437, 411, 360, 525, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 579, 578, 577, 576, 575,
	574, 573, 0, 0, 522, 424, 310, 272, 306, 307,
	314, 621, 618, 428, 622, 0, 280, 502, 354, 0,
	395, 328, 567, 568, 0, 0, 228, 229, 230, 231,
	232, 233, 234, 235, 273, 236, 237, 238, 239, 240,
	241, 242, 245, 246, 247, 248, 249, 250, 251, 252,
	570, 243, 244, 253, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 0, 0, 0,
	274, 275, 276, 277, 0, 0, 268, 269, 270, 271,
	0, 0, 0, 453, 454, 455, 477, 0, 439, 501,
	619, 0, 0, 0, 0, 0, 0, 0, 551, 563,
	597, 0, 607, 608, 610, 612, 611, 614, 416, 0,
	0, 625, 492, 493, 626, 603, 383, 0, 507, 540,
	529, 613, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 639, 323, 0, 0, 353, 544, 526, 536,
	527, 512, 513, 514, 521, 333, 515, 516, 517, 487,
	518, 488, 519, 520, 0, 543, 494, 412, 367, 561,
	560, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 296, 216, 489, 609,
	491, 490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 418, 435, 297, 408, 448, 302,
	415, 292, 382, 405, 0, 0, 288, 433, 414, 364,
	343, 344, 287, 0, 400, 321, 335, 318, 380, 0,
	432, 460, 317, 451, 0, 443, 290, 0, 442, 379,
	429, 434, 365, 359, 0, 289, 431, 363, 358, 347,
	325, 476, 348, 349, 339, 391, 357, 392, 340, 369,
	368, 370, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 602, 0, 0, 606, 0, 445, 0, 638, 0,
	0, 0, 0, 417, 0, 0, 350, 0, 0, 0,
	461, 0, 403, 385, 628, 0, 0, 401, 355, 430,
	393, 436, 419, 444, 397, 394, 281, 420, 320, 366,
	293, 295, 315, 322, 324, 326, 327, 375, 376, 388,
	407, 421, 422, 423, 319, 303, 402, 304, 337, 305,
	282, 311, 309, 312, 409, 313, 284, 389, 427, 0,
	332, 398, 362, 285, 361, 390, 426, 425, 294, 452,
	458, 459, 548, 0, 464, 629, 630, 631, 473, 478,
	479, 480, 482, 483, 484, 485, 549, 566, 533, 503,
	466, 557, 500, 504, 505, 569, 0, 0, 0, 457,
	351, 352, 0, 330, 278, 279, 624, 316, 381, 571,
	604, 605, 496, 0, 558, 497, 506, 308, 530, 542,
	541, 377, 456, 0, 553, 556, 486, 623, 0, 550,
	565, 627, 564, 620, 387, 0, 406, 562, 509, 0,
	554, 528, 0, 555, 524, 559, 0, 498, 0, 413,
	438, 450, 467, 470, 499, 584, 585, 586, 283, 469,
	588, 589, 590, 591, 592, 593, 594, 587, 441, 531,
	508, 534, 449, 511, 510, 0, 0, 545, 465, 546,
	547, 371, 372, 373, 374, 334, 572, 301, 468, 396,
	0, 532, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 538, 535, 632, 0, 595, 596, 0, 0, 462,
	463, 329, 336, 481, 338, 300, 386, 331, 447, 345,
	0, 474, 539, 475, 598, 601, 599, 600, 378, 341,
	342, 410, 346, 356, 399, 446, 384, 404, 298, 437,
	411, 360, 525, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	580, 579, 578, 577, 576, 575, 574, 573, 0, 0,
	522, 424, 310, 272, 306, 307, 314, 621, 618, 428,
	622, 0, 280, 502, 354, 0, 395, 328, 567, 568,
	0, 0, 228, 229, 230, 231, 232, 233, 234, 235,
	273, 236, 237, 238, 239, 240, 241, 242, 245, 246,
	247, 248, 249, 250, 251, 252, 570, 243, 244, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 0, 0, 0, 274, 275, 276, 277,
	0, 0, 268, 269, 270, 271, 0, 0, 0, 453,
	454, 455, 477, 0, 439, 501, 619, 0, 0, 0,
	0, 0, 0, 0, 551, 563, 597, 0, 607, 608,
	610, 612, 611, 614, 416, 0, 0, 625, 492, 493,
	626, 603, 383, 0, 507, 540, 529, 613, 495, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 323,
	0, 0, 353, 544, 526, 536, 527, 512, 513, 514,
	521, 333, 515, 516, 517, 487, 518, 488, 519, 520,
	0, 543, 494, 412, 367, 561, 560, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 820, 0, 0, 0,
	0, 0, 296, 216, 489, 609, 491, 490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	418, 435, 297, 408, 448, 302, 415, 292, 382, 405,
	0, 0, 288, 433, 414, 364, 343, 344, 287, 0,
	400, 321, 335, 318, 380, 0, 432, 460, 317, 451,
	0, 443, 290, 0, 442, 379, 429, 434, 365, 359,
	0, 289, 431, 363, 358, 347, 325, 476, 348, 349,
	339, 391, 357, 392, 340, 369, 368, 370, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 0, 0,
	606, 0, 445, 0, 0, 0, 0, 0, 0, 417,
	0, 0, 350, 0, 0, 0, 461, 0, 403, 385,
	628, 0, 0, 401, 355, 430, 393, 436, 419, 444,
	397, 394, 281, 420, 320, 366, 293, 295, 315, 322,
	324, 326, 327, 375, 376, 388, 407, 421, 422, 423,
	319, 303, 402, 304, 337, 305, 282, 311, 309, 312,
	409, 313, 284, 389, 427, 0, 332, 398, 362, 285,
	361, 390, 426, 425, 294, 452, 458, 459, 548, 0,
	464, 629, 630, 631, 473, 478, 479, 480, 482, 483,
	484, 485, 549, 566, 533, 503, 466, 557, 500, 504,
	505, 569, 0, 0, 0, 457, 351, 352, 0, 330,
	278, 279, 624, 316, 381, 571, 604, 605, 496, 0,
	558, 497, 506, 308, 530, 542, 541, 377, 456, 0,
	553, 556, 486, 623, 0, 550, 565, 627, 564, 620,
	387, 0, 406, 562, 509, 0, 554, 528, 0, 555,
	524, 559, 0, 498, 0, 413, 438, 450, 467, 470,
	499, 584, 585, 586, 283, 469, 588, 589, 590, 591,
	592, 593, 594, 587, 441, 531, 508, 534, 449, 511,
	510, 0, 0, 545, 465, 546, 547, 371, 372, 373,
	374, 334, 572, 301, 468, 396, 0, 532, 0, 0,
	0, 0, 0, 0, 0, 0, 537, 538, 535, 632,
	0, 595, 596, 0, 0, 462, 463, 329, 336, 481,
	338, 300, 386, 331, 447, 345, 0, 474, 539, 475,
	598, 601, 599, 600, 378, 341, 342, 410, 346, 356,
	399, 446, 384, 404, 298, 437, 411, 360, 525, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 579, 578, 577,
	576, 575, 574, 573, 0, 0, 522, 424, 310, 272,
	306, 307, 314, 621, 618, 428, 622, 0, 280, 502,
	354, 0, 395, 328, 567, 568, 0, 0, 228, 229,
	230, 231, 232, 233, 234, 235, 273, 236, 237, 238,
	239, 240, 241, 242, 245, 246, 247, 248, 249, 250,
	251, 252, 570, 243, 244, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 0,
	0, 0, 274, 275, 276, 277, 0, 0, 268, 269,
	270, 271, 0, 0, 0, 453, 454, 455, 477, 0,
	439, 501, 619, 0, 0, 0, 0, 0, 0, 0,
	551, 563, 597, 0, 607, 608, 610, 612, 611, 614,
	416, 0, 0, 625, 492, 493, 626, 603, 383, 0,
	507, 540, 529, 613, 495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 323, 0, 0, 353, 544,
	526, 536, 527, 512, 513, 514, 521, 333, 515, 516,
	517, 487, 518, 488, 519, 520, 0, 543, 494, 412,
	367, 561, 560, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3892, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 296, 216,
	489, 609, 491, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 418, 435, 297, 408,
	448, 302, 415, 292, 382, 405, 0, 0, 288, 433,
	414, 364, 343, 344, 287, 0, 400, 321, 335, 318,
	380, 0, 432, 460, 317, 451, 0, 443, 290, 0,
	442, 379, 429, 434, 365, 359, 0, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	3667, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 0, 289, 431, 363, 358, 347, 325, 476,
	348, 349, 339, 391, 357, 392, 340, 369, 368, 370,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	0, 0, 606, 0, 445, 0, 0, 0, 0, 0,
	0, 417, 0, 0, 350, 0, 0, 0, 461, 0,
	403, 385, 628, 0, 0, 401, 355, 430, 393, 436,
	419, 444, 397, 394, 281, 420, 320, 366, 293, 295,
	315, 322, 324, 326, 327, 375, 376, 388, 407, 421,
	422, 423, 319, 303, 402, 304, 337, 305, 282, 311,
	309, 312, 409, 313, 284, 389, 427, 0, 332, 398,
	362, 285, 361, 390, 426, 425, 294, 452, 458, 459,
	548, 0, 464, 629, 630, 631, 473, 478, 479, 480,
	482, 483, 484, 485, 549, 566, 533, 503, 466, 557,
	500, 504, 505, 569, 0, 0, 0, 457, 351, 352,
	0, 330, 278, 279, 624, 316, 381, 571, 604, 605,
	496, 0, 558, 497, 506, 308, 530, 542, 541, 377,
	456, 0, 553, 556, 486, 623, 0, 550, 565, 627,
	564, 620, 387, 0, 406, 562, 509, 0, 554, 528,
	0, 555, 524, 559, 0, 498, 0, 413, 438, 450,
	467, 470, 499, 584, 585, 586, 283, 469, 588, 589,
	590, 591, 592, 593, 594, 587, 441, 531, 508, 534,
	449, 511, 510, 0, 0, 545, 465, 546, 547, 371,
	372, 373, 374, 334, 572, 301, 468, 396, 0, 532,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 538,
	535, 632, 0, 595, 596, 0, 0, 462, 463, 329,
	336, 481, 338, 300, 386, 331, 447, 345, 0, 474,
	539, 475, 598, 601, 599, 600, 378, 341, 342, 410,
	346, 356, 399, 446, 384, 404, 298, 437, 411, 360,
	525, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 579,
	578, 577, 576, 575, 574, 573, 0, 0, 522, 424,
	310, 272, 306, 307, 314, 621, 618, 428, 622, 0,
	280, 502, 354, 0, 395, 328, 567, 568, 0, 0,
	228, 229, 230, 231, 232, 233, 234, 235, 273, 236,
	237, 238, 239, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 251, 252, 570, 243, 244, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 0, 0, 0, 274, 275, 276, 277, 0, 0,
	268, 269, 270, 271, 0, 0, 0, 453, 454, 455,
	477, 0, 439, 501, 619, 0, 0, 0, 0, 0,
	0, 0, 551, 563, 597, 0, 607, 608, 610, 612,
	611, 614, 416, 0, 0, 625, 492, 493, 626, 603,
	383, 0, 507, 540, 529, 613, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 323, 0, 0,
	353, 544, 526, 536, 527, 512, 513, 514, 521, 333,
	515, 516, 517, 487, 518, 488, 519, 520, 0, 543,
	494, 412, 367, 561, 560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	296, 216, 489, 609, 491, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 418, 435,
	297, 408, 448, 302, 415, 292, 382, 405, 0, 0,
	288, 433, 414, 364, 343, 344, 287, 0, 400, 321,
	335, 318, 380, 0, 432, 460, 317, 451, 0, 443,
	290, 0, 442, 379, 429, 434, 365, 359, 0, 289,
	431, 363, 358, 347, 325, 476, 348, 349, 339, 391,
	357, 392, 340, 369, 368, 370, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 606, 0,
	445, 0, 0, 0, 3798, 0, 0, 417, 0, 0,
	350, 0, 0, 0, 461, 0, 403, 385, 628, 0,
	0, 401, 355, 430, 393, 436, 419, 444, 397, 394,
	281, 420, 320, 366, 293, 295, 315, 322, 324, 326,
	327, 375, 376, 388, 407, 421, 422, 423, 319, 303,
	402, 304, 337, 305, 282, 311, 309, 312, 409, 313,
	284, 389, 427, 0, 332, 398, 362, 285, 361, 390,
	426, 425, 294, 452, 458, 459, 548, 0, 464, 629,
	630, 631, 473, 478, 479, 480, 482, 483, 484, 485,
	549, 566, 533, 503, 466, 557, 500, 504, 505, 569,
	0, 0, 0, 457, 351, 352, 0, 330, 278, 279,
	624, 316, 381, 571, 604, 605, 496, 0, 558, 497,
	506, 308, 530, 542, 541, 377, 456, 0, 553, 556,
	486, 623, 0, 550, 565, 627, 564, 620, 387, 0,
	406, 562, 509, 0, 554, 528, 0, 555, 524, 559,
	0, 498, 0, 413, 438, 450, 467, 470, 499, 584,
	585, 586, 283, 469, 588, 589, 590, 591, 592, 593,
	594, 587, 441, 531, 508, 534, 449, 511, 510, 0,
	0, 545, 465, 546, 547, 371, 372, 373, 374, 334,
	572, 301, 468, 396, 0, 532, 0, 0, 0, 0,
	0, 0, 0, 0, 537, 538, 535, 632, 0, 595,
	596, 0, 0, 462, 463, 329, 336, 481, 338, 300,
	386, 331, 447, 345, 0, 474, 539, 475, 598, 601,
	599, 600, 378, 341, 342, 410, 346, 356, 399, 446,
	384, 404, 298, 437, 411, 360, 525, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 579, 578, 577, 576, 575,
	574, 573, 0, 0, 522, 424, 310, 272, 306, 307,
	314, 621, 618, 428, 622, 0, 280, 502, 354, 0,
	395, 328, 567, 568, 0, 0, 228, 229, 230, 231,
	232, 233, 234, 235, 273, 236, 237, 238, 239, 240,
	241, 242, 245, 246, 247, 248, 249, 250, 251, 252,
	570, 243, 244, 253, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 0, 0, 0,
	274, 275, 276, 277, 0, 0, 268, 269, 270, 271,
	0, 0, 0, 453, 454, 455, 477, 0, 439, 501,
	619, 0, 0, 0, 0, 0, 0, 0, 551, 563,
	597, 0, 607, 608, 610, 612, 611, 614, 416, 0,
	0, 625, 492, 493, 626, 603, 383, 0, 507, 540,
	529, 613, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 323, 0, 0, 353, 544, 526, 536,
	527, 512, 513, 514, 521, 333, 515, 516, 517, 487,
	518, 488, 519, 520, 0, 543, 494, 412, 367, 561,
	560, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1709, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 296, 216, 489, 609,
	491, 490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 418, 435, 297, 408, 448, 302,
	415, 292, 382, 405, 0, 0, 288, 433, 414, 364,
	343, 344, 287, 0, 400, 321, 335, 318, 380, 0,
	432, 460, 317, 451, 0, 443, 290, 0, 442, 379,
	429, 434, 365, 359, 0, 289, 431, 363, 358, 347,
	325, 476, 348, 349, 339, 391, 357, 392, 340, 369,
	368, 370, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 602, 0, 0, 606, 0, 445, 0, 0, 0,
	0, 0, 0, 417, 0, 0, 350, 0, 0, 0,
	461, 0, 403, 385, 628, 0, 0, 401, 355, 430,
	393, 436, 419, 444, 397, 394, 281, 420, 320, 366,
	293, 295, 315, 322, 324, 326, 327, 375, 376, 388,
	407, 421, 422, 423, 319, 303, 402, 304, 337, 305,
	282, 311, 309, 312, 409, 313, 284, 389, 427, 0,
	332, 398, 362, 285, 361, 390, 426, 425, 294, 452,
	458, 459, 548, 0, 464, 629, 630, 631, 473, 478,
	479, 480, 482, 483, 484, 485, 549, 566, 533, 503,
	466, 557, 500, 504, 505, 569, 0, 0, 0, 457,
	351, 352, 0, 330, 278, 279, 624, 316, 381, 571,
	604, 605, 496, 0, 558, 497, 506, 308, 530, 542,
	541, 377, 456, 0, 553, 556, 486, 623, 0, 550,
	565, 627, 564, 620, 387, 0, 406, 562, 509, 0,
	554, 528, 0, 555, 524, 559, 0, 498, 0, 413,
	438, 450, 467, 470, 499, 584, 585, 586, 283, 469,
	588, 589, 590, 591, 592, 593, 594, 587, 441, 531,
	508, 534, 449, 511, 510, 0, 0, 545, 465, 546,
	547, 371, 372, 373, 374, 334, 572, 301, 468, 396,
	0, 532, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 538, 535, 632, 0, 595, 596, 0, 0, 462,
	463, 329, 336, 481, 338, 300, 386, 331, 447, 345,
	0, 474, 539, 475, 598, 601, 599, 600, 378, 341,
	342, 410, 346, 356, 399, 446, 384, 404, 298, 437,
	411, 360, 525, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	580, 579, 578, 577, 576, 575, 574, 573, 0, 0,
	522, 424, 310, 272, 306, 307, 314, 621, 618, 428,
	622, 0, 280, 502, 354, 0, 395, 328, 567, 568,
	0, 0, 228, 229, 230, 231, 232, 233, 234, 235,
	273, 236, 237, 238, 239, 240, 241, 242, 245, 246,
	247, 248, 249, 250, 251, 252, 570, 243, 244, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 0, 0, 0, 274, 275, 276, 277,
	0, 0, 268, 269, 270, 271, 0, 0, 0, 453,
	454, 455, 477, 0, 439, 501, 619, 0, 0, 0,
	0, 0, 0, 0, 551, 563, 597, 0, 607, 608,
	610, 612, 611, 614, 416, 0, 0, 625, 492, 493,
	626, 603, 383, 0, 507, 540, 529, 613, 495, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 323,
	0, 0, 353, 544, 526, 536, 527, 512, 513, 514,
	521, 333, 515, 516, 517, 487, 518, 488, 519, 520,
	0, 543, 494, 412, 367, 561, 560, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3682, 0, 215, 0, 0, 0, 0,
	0, 0, 296, 216, 489, 609, 491, 490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	418, 435, 297, 408, 448, 302, 415, 292, 382, 405,
	0, 0, 288, 433, 414, 364, 343, 344, 287, 0,
	400, 321, 335, 318, 380, 0, 432, 460, 317, 451,
	0, 443, 290, 0, 442, 379, 429, 434, 365, 359,
	0, 289, 431, 363, 358, 347, 325, 476, 348, 349,
	339, 391, 357, 392, 340, 369, 368, 370, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 0, 0,
	606, 0, 445, 0, 0, 0, 0, 0, 0, 417,
	0, 0, 350, 0, 0, 0, 461, 0, 403, 385,
	628, 0, 0, 401, 355, 430, 393, 436, 419, 444,
	397, 394, 281, 420, 320, 366, 293, 295, 315, 322,
	324, 326, 327, 375, 376, 388, 407, 421, 422, 423,
	319, 303, 402, 304, 337, 305, 282, 311, 309, 312,
	409, 313, 284, 389, 427, 0, 332, 398, 362, 285,
	361, 390, 426, 425, 294, 452, 458, 459, 548, 0,
	464, 629, 630, 631, 473, 478, 479, 480, 482, 483,
	484, 485, 549, 566, 533, 503, 466, 557, 500, 504,
	505, 569, 0, 0, 0, 457, 351, 352, 0, 330,
	278, 279, 624, 316, 381, 571, 604, 605, 496, 0,
	558, 497, 506, 308, 530, 542, 541, 377, 456, 0,
	553, 556, 486, 623, 0, 550, 565, 627, 564, 620,
	387, 0, 406, 562, 509, 0, 554, 528, 0, 555,
	524, 559, 0, 498, 0, 413, 438, 450, 467, 470,
	499, 584, 585, 586, 283, 469, 588, 589, 590, 591,
	592, 593, 594, 587, 441, 531, 508, 534, 449, 511,
	510, 0, 0, 545, 465, 546, 547, 371, 372, 373,
	374, 334, 572, 301, 468, 396, 0, 532, 0, 0,
	0, 0, 0, 0, 0, 0, 537, 538, 535, 632,
	0, 595, 596, 0, 0, 462, 463, 329, 336, 481,
	338, 300, 386, 331, 447, 345, 0, 474, 539, 475,
	598, 601, 599, 600, 378, 341, 342, 410, 346, 356,
	399, 446, 384, 404, 298, 437, 411, 360, 525, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 579, 578, 577,
	576, 575, 574, 573, 0, 0, 522, 424, 310, 272,
	306, 307, 314, 621, 618, 428, 622, 0, 280, 502,
	354, 0, 395, 328, 567, 568, 0, 0, 228, 229,
	230, 231, 232, 233, 234, 235, 273, 236, 237, 238,
	239, 240, 241, 242, 245, 246, 247, 248, 249, 250,
	251, 252, 570, 243, 244, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 0,
	0, 0, 274, 275, 276, 277, 0, 0, 268, 269,
	270, 271, 0, 0, 0, 453, 454, 455, 477, 0,
	439, 501, 619, 0, 0, 0, 0, 0, 0, 0,
	551, 563, 597, 0, 607, 608, 610, 612, 611, 614,
	416, 0, 0, 625, 492, 493, 626, 603, 383, 0,
	507, 540, 529, 613, 495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 323, 0, 0, 353, 544,
	526, 536, 527, 512, 513, 514, 521, 333, 515, 516,
	517, 487, 518, 488, 519, 520, 0, 543, 494, 412,
	367, 561, 560, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 296, 216,
	489, 609, 491, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 418, 435, 297, 408,
	448, 302, 415, 292, 382, 405, 0, 0, 288, 433,
	414, 364, 343, 344, 287, 0, 400, 321, 335, 318,
	380, 0, 432, 460, 317, 451, 0, 443, 290, 0,
	442, 379, 429, 434, 365, 359, 0, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 3598, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	3116, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 0, 289, 431, 363, 358, 347, 325, 476,
	348, 349, 339, 391, 357, 392, 340, 369, 368, 370,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	0, 0, 606, 0, 445, 0, 0, 0, 0, 0,
	0, 417, 0, 0, 350, 0, 0, 0, 461, 0,
	403, 385, 628, 0, 0, 401, 355, 430, 393, 436,
	419, 444, 397, 394, 281, 420, 320, 366, 293, 295,
	315, 322, 324, 326, 327, 375, 376, 388, 407, 421,
	422, 423, 319, 303, 402, 304, 337, 305, 282, 311,
	309, 312, 409, 313, 284, 389, 427, 0, 332, 398,
	362, 285, 361, 390, 426, 425, 294, 452, 458, 459,
	548, 0, 464, 629, 630, 631, 473, 478, 479, 480,
	482, 483, 484, 485, 549, 566, 533, 503, 466, 557,
	500, 504, 505, 569, 0, 0, 0, 457, 351, 352,
	0, 330, 278, 279, 624, 316, 381, 571, 604, 605,
	496, 0, 558, 497, 506, 308, 530, 542, 541, 377,
	456, 0, 553, 556, 486, 623, 0, 550, 565, 627,
	564, 620, 387, 0, 406, 562, 509, 0, 554, 528,
	0, 555, 524, 559, 0, 498, 0, 413, 438, 450,
	467, 470, 499, 584, 585, 586, 283, 469, 588, 589,
	590, 591, 592, 593, 594, 587, 441, 531, 508, 534,
	449, 511, 510, 0, 0, 545, 465, 546, 547, 371,
	372, 373, 374, 334, 572, 301, 468, 396, 0, 532,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 538,
	535, 632, 0, 595, 596, 0, 0, 462, 463, 329,
	336, 481, 338, 300, 386, 331, 447, 345, 0, 474,
	539, 475, 598, 601, 599, 600, 378, 341, 342, 410,
	346, 356, 399, 446, 384, 404, 298, 437, 411, 360,
	525, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 579,
	578, 577, 576, 575, 574, 573, 0, 0, 522, 424,
	310, 272, 306, 307, 314, 621, 618, 428, 622, 0,
	280, 502, 354, 0, 395, 328, 567, 568, 0, 0,
	228, 229, 230, 231, 232, 233, 234, 235, 273, 236,
	237, 238, 239, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 251, 252, 570, 243, 244, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 0, 0, 0, 274, 275, 276, 277, 0, 0,
	268, 269, 270, 271, 0, 0, 0, 453, 454, 455,
	477, 0, 439, 501, 619, 0, 0, 0, 0, 0,
	0, 0, 551, 563, 597, 0, 607, 608, 610, 612,
	611, 614, 416, 0, 0, 625, 492, 493, 626, 603,
	383, 0, 507, 540, 529, 613, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 323, 0, 0,
	353, 544, 526, 536, 527, 512, 513, 514, 521, 333,
	515, 516, 517, 487, 518, 488, 519, 520, 0, 543,
	494, 412, 367, 561, 560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	296, 216, 489, 609, 491, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 418, 435,
	297, 408, 448, 302, 415, 292, 382, 405, 0, 0,
	288, 433, 414, 364, 343, 344, 287, 0, 400, 321,
	335, 318, 380, 0, 432, 460, 317, 451, 0, 443,
	290, 0, 442, 379, 429, 434, 365, 359, 0, 289,
	431, 363, 358, 347, 325, 476, 348, 349, 339, 391,
	357, 392, 340, 369, 368, 370, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 606, 0,
	445, 0, 0, 0, 0, 0, 0, 417, 0, 0,
	350, 0, 0, 0, 461, 0, 403, 385, 628, 0,
	0, 401, 355, 430, 393, 436, 419, 444, 397, 394,
	281, 420, 320, 366, 293, 295, 315, 322, 324, 326,
	327, 375, 376, 388, 407, 421, 422, 423, 319, 303,
	402, 304, 337, 305, 282, 311, 309, 312, 409, 313,
	284, 389, 427, 0, 332, 398, 362, 285, 361, 390,
	426, 425, 294, 452, 458, 459, 548, 0, 464, 629,
	630, 631, 473, 478, 479, 480, 482, 483, 484, 485,
	549, 566, 533, 503, 466, 557, 500, 504, 505, 569,
	0, 0, 0, 457, 351, 352, 0, 330, 278, 279,
	624, 316, 381, 571, 604, 605, 496, 0, 558, 497,
	506, 308, 530, 542, 541, 377, 456, 0, 553, 556,
	486, 623, 0, 550, 565, 627, 564, 620, 387, 0,
	406, 562, 509, 0, 554, 528, 0, 555, 524, 559,
	0, 498, 0, 413, 438, 450, 467, 470, 499, 584,
	585, 586, 283, 469, 588, 589, 590, 591, 592, 593,
	594, 587, 441, 531, 508, 534, 449, 511, 510, 0,
	0, 545, 465, 546, 547, 371, 372, 373, 374, 334,
	572, 301, 468, 396, 0, 532, 0, 0, 0, 0,
	0, 0, 0, 0, 537, 538, 535, 632, 0, 595,
	596, 0, 0, 462, 463, 329, 336, 481, 338, 300,
	386, 331, 447, 345, 0, 474, 539, 475, 598, 601,
	599, 600, 378, 341, 342, 410, 346, 356, 399, 446,
	384, 404, 298, 437, 411, 360, 525, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 579, 578, 577, 576, 575,
	574, 573, 0, 0, 522, 424, 310, 272, 306, 307,
	314, 621, 618, 428, 622, 0, 280, 502, 354, 0,
	395, 328, 567, 568, 0, 0, 228, 229, 230, 231,
	232, 233, 234, 235, 273, 236, 237, 238, 239, 240,
	241, 242, 245, 246, 247, 248, 249, 250, 251, 252,
	570, 243, 244, 253, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 0, 0, 0,
	274, 275, 276, 277, 0, 0, 268, 269, 270, 271,
	0, 0, 0, 453, 454, 455, 477, 0, 439, 501,
	619, 0, 0, 0, 0, 0, 0, 0, 551, 563,
	597, 0, 607, 608, 610, 612, 611, 614, 416, 0,
	0, 625, 492, 493, 626, 603, 383, 0, 507, 540,
	529, 613, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 323, 0, 0, 353, 544, 526, 536,
	527, 512, 513, 514, 521, 333, 515, 516, 517, 487,
	518, 488, 519, 520, 0, 543, 494, 412, 367, 561,
	560, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1990, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 296, 216, 489, 609,
	491, 490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 418, 435, 297, 408, 448, 302,
	415, 292, 382, 405, 0, 0, 288, 433, 414, 364,
	343, 344, 287, 0, 400, 321, 335, 318, 380, 0,
	432, 460, 317, 451, 0, 443, 290, 0, 442, 379,
	429, 434, 365, 359, 0, 289, 431, 363, 358, 347,
	325, 476, 348, 349, 339, 391, 357, 392, 340, 369,
	368, 370, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 602, 0, 0, 606, 0, 445, 0, 0, 0,
	0, 0, 0, 417, 0, 0, 350, 0, 0, 0,
	461, 0, 403, 385, 628, 0, 0, 401, 355, 430,
	393, 436, 419, 444, 397, 394, 281, 420, 320, 366,
	293, 295, 315, 322, 324, 326, 327, 375, 376, 388,
	407, 421, 422, 423, 319, 303, 402, 304, 337, 305,
	282, 311, 309, 312, 409, 313, 284, 389, 427, 0,
	332, 398, 362, 285, 361, 390, 426, 425, 294, 452,
	458, 459, 548, 0, 464, 629, 630, 631, 473, 478,
	479, 480, 482, 483, 484, 485, 549, 566, 533, 503,
	466, 557, 500, 504, 505, 569, 0, 0, 0, 457,
	351, 352, 0, 330, 278, 279, 624, 316, 381, 571,
	604, 605, 496, 0, 558, 497, 506, 308, 530, 542,
	541, 377, 456, 0, 553, 556, 486, 623, 0, 550,
	565, 627, 564, 620, 387, 0, 406, 562, 509, 0,
	554, 528, 0, 555, 524, 559, 0, 498, 0, 413,
	438, 450, 467, 470, 499, 584, 585, 586, 283, 469,
	588, 589, 590, 591, 592, 593, 594, 587, 441, 531,
	508, 534, 449, 511, 510, 0, 0, 545, 465, 546,
	547, 371, 372, 373, 374, 334, 572, 301, 468, 396,
	0, 532, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 538, 535, 632, 0, 595, 596, 0, 0, 462,
	463, 329, 336, 481, 338, 300, 386, 331, 447, 345,
	0, 474, 539, 475, 598, 601, 599, 600, 378, 341,
	342, 410, 346, 356, 399, 446, 384, 404, 298, 437,
	411, 360, 525, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	580, 579, 578, 577, 576, 575, 574, 573, 0, 0,
	522, 424, 310, 272, 306, 307, 314, 621, 618, 428,
	622, 0, 280, 502, 354, 0, 395, 328, 567, 568,
	0, 0, 228, 229, 230, 231, 232, 233, 234, 235,
	273, 236, 237, 238, 239, 240, 241, 242, 245, 246,
	247, 248, 249, 250, 251, 252, 570, 243, 244, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 0, 0, 0, 274, 275, 276, 277,
	0, 0, 268, 269, 270, 271, 0, 0, 0, 453,
	454, 455, 477, 0, 439, 501, 619, 0, 0, 0,
	0, 0, 0, 0, 551, 563, 597, 0, 607, 608,
	610, 612, 611, 614, 416, 0, 0, 625, 492, 493,
	626, 603, 383, 0, 507, 540, 529, 613, 495, 0,
	0, 3322, 0, 0, 0, 0, 0, 0, 0, 323,
	0, 0, 353, 544, 526, 536, 527, 512, 513, 514,
	521, 333, 515, 516, 517, 487, 518, 488, 519, 520,
	0, 543, 494, 412, 367, 561, 560, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 296, 216, 489, 609, 491, 490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	418, 435, 297, 408, 448, 302, 415, 292, 382, 405,
	0, 0, 288, 433, 414, 364, 343, 344, 287, 0,
	400, 321, 335, 318, 380, 0, 432, 460, 317, 451,
	0, 443, 290, 0, 442, 379, 429, 434, 365, 359,
	0, 289, 431, 363, 358, 347, 325, 476, 348, 349,
	339, 391, 357, 392, 340, 369, 368, 370, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 0, 0,
	606, 0, 445, 0, 0, 0, 0, 0, 0, 417,
	0, 0, 350, 0, 0, 0, 461, 0, 403, 385,
	628, 0, 0, 401, 355, 430, 393, 436, 419, 444,
	397, 394, 281, 420, 320, 366, 293, 295, 315, 322,
	324, 326, 327, 375, 376, 388, 407, 421, 422, 423,
	319, 303, 402, 304, 337, 305, 282, 311, 309, 312,
	409, 313, 284, 389, 427, 0, 332, 398, 362, 285,
	361, 390, 426, 425, 294, 452, 458, 459, 548, 0,
	464, 629, 630, 631, 473, 478, 479, 480, 482, 483,
	484, 485, 549, 566, 533, 503, 466, 557, 500, 504,
	505, 569, 0, 0, 0, 457, 351, 352, 0, 330,
	278, 279, 624, 316, 381, 571, 604, 605, 496, 0,
	558, 497, 506, 308, 530, 542, 541, 377, 456, 0,
	553, 556, 486, 623, 0, 550, 565, 627, 564, 620,
	387, 0, 406, 562, 509, 0, 554, 528, 0, 555,
	524, 559, 0, 498, 0, 413, 438, 450, 467, 470,
	499, 584, 585, 586, 283, 469, 588, 589, 590, 591,
	592, 593, 594, 587, 441, 531, 508, 534, 449, 511,
	510, 0, 0, 545, 465, 546, 547, 371, 372, 373,
	374, 334, 572, 301, 468, 396, 0, 532, 0, 0,
	0, 0, 0, 0, 0, 0, 537, 538, 535, 632,
	0, 595, 596, 0, 0, 462, 463, 329, 336, 481,
	338, 300, 386, 331, 447, 345, 0, 474, 539, 475,
	598, 601, 599, 600, 378, 341, 342, 410, 346, 356,
	399, 446, 384, 404, 298, 437, 411, 360, 525, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 579, 578, 577,
	576, 575, 574, 573, 0, 0, 522, 424, 310, 272,
	306, 307, 314, 621, 618, 428, 622, 0, 280, 502,
	354, 0, 395, 328, 567, 568, 0, 0, 228, 229,
	230, 231, 232, 233, 234, 235, 273, 236, 237, 238,
	239, 240, 241, 242, 245, 246, 247, 248, 249, 250,
	251, 252, 570, 243, 244, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 0,
	0, 0, 274, 275, 276, 277, 0, 0, 268, 269,
	270, 271, 0, 0, 0, 453, 454, 455, 477, 0,
	439, 501, 619, 0, 0, 0, 0, 0, 0, 0,
	551, 563, 597, 0, 607, 608, 610, 612, 611, 614,
	416, 0, 0, 625, 492, 493, 626, 603, 383, 0,
	507, 540, 529, 613, 495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 323, 0, 0, 353, 544,
	526, 536, 527, 512, 513, 514, 521, 333, 515, 516,
	517, 487, 518, 488, 519, 520, 0, 543, 494, 412,
	367, 561, 560, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 296, 216,
	489, 609, 491, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3236,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 418, 435, 297, 408,
	448, 302, 415, 292, 382, 405, 0, 0, 288, 433,
	414, 364, 343, 344, 287, 0, 400, 321, 335, 318,
	380, 0, 432, 460, 317, 451, 0, 443, 290, 0,
	442, 379, 429, 434, 365, 359, 0, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2976, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 0, 289, 431, 363, 358, 347, 325, 476,
	348, 349, 339, 391, 357, 392, 340, 369, 368, 370,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	0, 0, 606, 0, 445, 0, 0, 0, 0, 0,
	0, 417, 0, 0, 350, 0, 0, 0, 461, 0,
	403, 385, 628, 0, 0, 401, 355, 430, 393, 436,
	419, 444, 397, 394, 281, 420, 320, 366, 293, 295,
	315, 322, 324, 326, 327, 375, 376, 388, 407, 421,
	422, 423, 319, 303, 402, 304, 337, 305, 282, 311,
	309, 312, 409, 313, 284, 389, 427, 0, 332, 398,
	362, 285, 361, 390, 426, 425, 294, 452, 458, 459,
	548, 0, 464, 629, 630, 631, 473, 478, 479, 480,
	482, 483, 484, 485, 549, 566, 533, 503, 466, 557,
	500, 504, 505, 569, 0, 0, 0, 457, 351, 352,
	0, 330, 278, 279, 624, 316, 381, 571, 604, 605,
	496, 0, 558, 497, 506, 308, 530, 542, 541, 377,
	456, 0, 553, 556, 486, 623, 0, 550, 565, 627,
	564, 620, 387, 0, 406, 562, 509, 0, 554, 528,
	0, 555, 524, 559, 0, 498, 0, 413, 438, 450,
	467, 470, 499, 584, 585, 586, 283, 469, 588, 589,
	590, 591, 592, 593, 594, 587, 441, 531, 508, 534,
	449, 511, 510, 0, 0, 545, 465, 546, 547, 371,
	372, 373, 374, 334, 572, 301, 468, 396, 0, 532,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 538,
	535, 632, 0, 595, 596, 0, 0, 462, 463, 329,
	336, 481, 338, 300, 386, 331, 447, 345, 0, 474,
	539, 475, 598, 601, 599, 600, 378, 341, 342, 410,
	346, 356, 399, 446, 384, 404, 298, 437, 411, 360,
	525, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 579,
	578, 577, 576, 575, 574, 573, 0, 0, 522, 424,
	310, 272, 306, 307, 314, 621, 618, 428, 622, 0,
	280, 502, 354, 0, 395, 328, 567, 568, 0, 0,
	228, 229, 230, 231, 232, 233, 234, 235, 273, 236,
	237, 238, 239, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 251, 252, 570, 243, 244, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 0, 0, 0, 274, 275, 276, 277, 0, 0,
	268, 269, 270, 271, 0, 0, 0, 453, 454, 455,
	477, 0, 439, 501, 619, 0, 0, 0, 0, 0,
	0, 0, 551, 563, 597, 0, 607, 608, 610, 612,
	611, 614, 416, 0, 0, 625, 492, 493, 626, 603,
	383, 0, 507, 540, 529, 613, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 323, 0, 0,
	353, 544, 526, 536, 527, 512, 513, 514, 521, 333,
	515, 516, 517, 487, 518, 488, 519, 520, 0, 543,
	494, 412, 367, 561, 560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 1487, 0, 0, 0,
	296, 216, 489, 609, 491, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 418, 435,
	297, 408, 448, 302, 415, 292, 382, 405, 0, 0,
	288, 433, 414, 364, 343, 344, 287, 0, 400, 321,
	335, 318, 380, 0, 432, 460, 317, 451, 0, 443,
	290, 0, 442, 379, 429, 434, 365, 359, 0, 289,
	431, 363, 358, 347, 325, 476, 348, 349, 339, 391,
	357, 392, 340, 369, 368, 370, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 606, 0,
	445, 0, 0, 0, 0, 0, 0, 417, 0, 0,
	350, 0, 0, 0, 461, 0, 403, 385, 628, 0,
	0, 401, 355, 430, 393, 436, 419, 444, 397, 394,
	281, 420, 320, 366, 293, 295, 315, 322, 324, 326,
	327, 375, 376, 388, 407, 421, 422, 423, 319, 303,
	402, 304, 337, 305, 282, 311, 309, 312, 409, 313,
	284, 389, 427, 0, 332, 398, 362, 285, 361, 390,
	426, 425, 294, 452, 458, 459, 548, 0, 464, 629,
	630, 631, 473, 478, 479, 480, 482, 483, 484, 485,
	549, 566, 533, 503, 466, 557, 500, 504, 505, 569,
	0, 0, 0, 457, 351, 352, 0, 330, 278, 279,
	624, 316, 381, 571, 604, 605, 496, 0, 558, 497,
	506, 308, 530, 542, 541, 377, 456, 0, 553, 556,
	486, 623, 0, 550, 565, 627, 564, 620, 387, 0,
	406, 562, 509, 0, 554, 528, 0, 555, 524, 559,
	0, 498, 0, 413, 438, 450, 467, 470, 499, 584,
	585, 586, 283, 469, 588, 589, 590, 591, 592, 593,
	594, 587, 441, 531, 508, 534, 449, 511, 510, 0,
	0, 545, 465, 546, 547, 371, 372, 373, 374, 334,
	572, 301, 468, 396, 0, 532, 0, 0, 0, 0,
	0, 0, 0, 0, 537, 538, 535, 632, 0, 595,
	596, 0, 0, 462, 463, 329, 336, 481, 338, 300,
	386, 331, 447, 345, 0, 474, 539, 475, 598, 601,
	599, 600, 378, 341, 342, 410, 346, 356, 399, 446,
	384, 404, 298, 437, 411, 360, 525, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 579, 578, 577, 576, 575,
	574, 573, 0, 0, 522, 424, 310, 272, 306, 307,
	314, 621, 618, 428, 622, 0, 280, 502, 354, 0,
	395, 328, 567, 568, 0, 0, 228, 229, 230, 231,
	232, 233, 234, 235, 273, 236, 237, 238, 239, 240,
	241, 242, 245, 246, 247, 248, 249, 250, 251, 252,
	570, 243, 244, 253, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 0, 0, 0,
	274, 275, 276, 277, 0, 0, 268, 269, 270, 271,
	0, 0, 0, 453, 454, 455, 477, 0, 439, 501,
	619, 0, 0, 0, 0, 0, 0, 0, 551, 563,
	597, 0, 607, 608, 610, 612, 611, 614, 416, 0,
	0, 625, 492, 493, 626, 603, 383, 0, 507, 540,
	529, 613, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 323, 0, 0, 353, 544, 526, 536,
	527, 512, 513, 514, 521, 333, 515, 516, 517, 487,
	518, 488, 519, 520, 0, 543, 494, 412, 367, 561,
	560, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 2438, 0, 0, 0, 296, 216, 489, 609,
	491, 490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 418, 435, 297, 408, 448, 302,
	415, 292, 382, 405, 0, 0, 288, 433, 414, 364,
	343, 344, 287, 0, 400, 321, 335, 318, 380, 0,
	432, 460, 317, 451, 0, 443, 290, 0, 442, 379,
	429, 434, 365, 359, 0, 289, 431, 363, 358, 347,
	325, 476, 348, 349, 339, 391, 357, 392, 340, 369,
	368, 370, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 602, 0, 0, 606, 0, 445, 0, 0, 0,
	0, 0, 0, 417, 0, 0, 350, 0, 0, 0,
	461, 0, 403, 385, 628, 0, 0, 401, 355, 430,
	393, 436, 419, 444, 397, 394, 281, 420, 320, 366,
	293, 295, 315, 322, 324, 326, 327, 375, 376, 388,
	407, 421, 422, 423, 319, 303, 402, 304, 337, 305,
	282, 311, 309, 312, 409, 313, 284, 389, 427, 0,
	332, 398, 362, 285, 361, 390, 426, 425, 294, 452,
	458, 459, 548, 0, 464, 629, 630, 631, 473, 478,
	479, 480, 482, 483, 484, 485, 549, 566, 533, 503,
	466, 557, 500, 504, 505, 569, 0, 0, 0, 457,
	351, 352, 0, 330, 278, 279, 624, 316, 381, 571,
	604, 605, 496, 0, 558, 497, 506, 308, 530, 542,
	541, 377, 456, 0, 553, 556, 486, 623, 0, 550,
	565, 627, 564, 620, 387, 0, 406, 562, 509, 0,
	554, 528, 0, 555, 524, 559, 0, 498, 0, 413,
	438, 450, 467, 470, 499, 584, 585, 586, 283, 469,
	588, 589, 590, 591, 592, 593, 594, 587, 441, 531,
	508, 534, 449, 511, 510, 0, 0, 545, 465, 546,
	547, 371, 372, 373, 374, 334, 572, 301, 468, 396,
	0, 532, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 538, 535, 632, 0, 595, 596, 0, 0, 462,
	463, 329, 336, 481, 338, 300, 386, 331, 447, 345,
	0, 474, 539, 475, 598, 601, 599, 600, 378, 341,
	342, 410, 346, 356, 399, 446, 384, 404, 298, 437,
	411, 360, 525, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	580, 579, 578, 577, 576, 575, 574, 573, 0, 0,
	522, 424, 310, 272, 306, 307, 314, 621, 618, 428,
	622, 0, 280, 502, 354, 0, 395, 328, 567, 568,
	0, 0, 228, 229, 230, 231, 232, 233, 234, 235,
	273, 236, 237, 238, 239, 240, 241, 242, 245, 246,
	247, 248, 249, 250, 251, 252, 570, 243, 244, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 0, 0, 0, 274, 275, 276, 277,
	0, 0, 268, 269, 270, 271, 0, 0, 0, 453,
	454, 455, 477, 0, 439, 501, 619, 0, 0, 0,
	0, 0, 0, 0, 551, 563, 597, 0, 607, 608,
	610, 612, 611, 614, 416, 0, 0, 625, 492, 493,
	626, 603, 383, 0, 507, 540, 529, 613, 495, 0,
	0, 2798, 0, 0, 0, 0, 0, 0, 0, 323,
	0, 0, 353, 544, 526, 536, 527, 512, 513, 514,
	521, 333, 515, 516, 517, 487, 518, 488, 519, 520,
	0, 543, 494, 412, 367, 561, 560, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 296, 216, 489, 609, 491, 490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	418, 435, 297, 408, 448, 302, 415, 292, 382, 405,
	0, 0, 288, 433, 414, 364, 343, 344, 287, 0,
	400, 321, 335, 318, 380, 0, 432, 460, 317, 451,
	0, 443, 290, 0, 442, 379, 429, 434, 365, 359,
	0, 289, 431, 363, 358, 347, 325, 476, 348, 349,
	339, 391, 357, 392, 340, 369, 368, 370, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 0, 0,
	606, 0, 445, 0, 0, 0, 0, 0, 0, 417,
	0, 0, 350, 0, 0, 0, 461, 0, 403, 385,
	628, 0, 0, 401, 355, 430, 393, 436, 419, 444,
	397, 394, 281, 420, 320, 366, 293, 295, 315, 322,
	324, 326, 327, 375, 376, 388, 407, 421, 422, 423,
	319, 303, 402, 304, 337, 305, 282, 311, 309, 312,
	409, 313, 284, 389, 427, 0, 332, 398, 362, 285,
	361, 390, 426, 425, 294, 452, 458, 459, 548, 0,
	464, 629, 630, 631, 473, 478, 479, 480, 482, 483,
	484, 485, 549, 566, 533, 503, 466, 557, 500, 504,
	505, 569, 0, 0, 0, 457, 351, 352, 0, 330,
	278, 279, 624, 316, 381, 571, 604, 605, 496, 0,
	558, 497, 506, 308, 530, 542, 541, 377, 456, 0,
	553, 556, 486, 623, 0, 550, 565, 627, 564, 620,
	387, 0, 406, 562, 509, 0, 554, 528, 0, 555,
	524, 559, 0, 498, 0, 413, 438, 450, 467, 470,
	499, 584, 585, 586, 283, 469, 588, 589, 590, 591,
	592, 593, 594, 587, 441, 531, 508, 534, 449, 511,
	510, 0, 0, 545, 465, 546, 547, 371, 372, 373,
	374, 334, 572, 301, 468, 396, 0, 532, 0, 0,
	0, 0, 0, 0, 0, 0, 537, 538, 535, 632,
	0, 595, 596, 0, 0, 462, 463, 329, 336, 481,
	338, 300, 386, 331, 447, 345, 0, 474, 539, 475,
	598, 601, 599, 600, 378, 341, 342, 410, 346, 356,
	399, 446, 384, 404, 298, 437, 411, 360, 525, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 579, 578, 577,
	576, 575, 574, 573, 0, 0, 522, 424, 310, 272,
	306, 307, 314, 621, 618, 428, 622, 0, 280, 502,
	354, 0, 395, 328, 567, 568, 0, 0, 228, 229,
	230, 231, 232, 233, 234, 235, 273, 236, 237, 238,
	239, 240, 241, 242, 245, 246, 247, 248, 249, 250,
	251, 252, 570, 243, 244, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 0,
	0, 0, 274, 275, 276, 277, 0, 0, 268, 269,
	270, 271, 0, 0, 0, 453, 454, 455, 477, 0,
	439, 501, 619, 0, 0, 0, 0, 0, 0, 0,
	551, 563, 597, 0, 607, 608, 610, 612, 611, 614,
	416, 0, 0, 625, 492, 493, 626, 603, 383, 0,
	507, 540, 529, 613, 495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 323, 0, 0, 353, 544,
	526, 536, 527, 512, 513, 514, 521, 333, 515, 516,
	517, 487, 518, 488, 519, 520, 0, 543, 494, 412,
	367, 561, 560, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 296, 216,
	489, 609, 491, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 418, 435, 297, 408,
	448, 302, 415, 292, 382, 405, 0, 0, 288, 433,
	414, 364, 343, 344, 287, 0, 400, 321, 335, 318,
	380, 0, 432, 460, 317, 451, 0, 443, 290, 0,
	442, 379, 429, 434, 365, 359, 0, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	2554, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 0, 289, 431, 363, 358, 347, 325, 476,
	348, 349, 339, 391, 357, 392, 340, 369, 368, 370,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	0, 0, 606, 0, 445, 0, 0, 0, 0, 0,
	0, 417, 0, 0, 350, 0, 0, 0, 461, 0,
	403, 385, 628, 0, 0, 401, 355, 430, 393, 436,
	419, 444, 397, 394, 281, 420, 320, 366, 293, 295,
	315, 322, 324, 326, 327, 375, 376, 388, 407, 421,
	422, 423, 319, 303, 402, 304, 337, 305, 282, 311,
	309, 312, 409, 313, 284, 389, 427, 0, 332, 398,
	362, 285, 361, 390, 426, 425, 294, 452, 458, 459,
	548, 0, 464, 629, 630, 631, 473, 478, 479, 480,
	482, 483, 484, 485, 549, 566, 533, 503, 466, 557,
	500, 504, 505, 569, 0, 0, 0, 457, 351, 352,
	0, 330, 278, 279, 624, 316, 381, 571, 604, 605,
	496, 0, 558, 497, 506, 308, 530, 542, 541, 377,
	456, 0, 553, 556, 486, 623, 0, 550, 565, 627,
	564, 620, 387, 0, 406, 562, 509, 0, 554, 528,
	0, 555, 524, 559, 0, 498, 0, 413, 438, 450,
	467, 470, 499, 584, 585, 586, 283, 469, 588, 589,
	590, 591, 592, 593, 594, 587, 441, 531, 508, 534,
	449, 511, 510, 0, 0, 545, 465, 546, 547, 371,
	372, 373, 374, 334, 572, 301, 468, 396, 0, 532,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 538,
	535, 632, 0, 595, 596, 0, 0, 462, 463, 329,
	336, 481, 338, 300, 386, 331, 447, 345, 0, 474,
	539, 475, 598, 601, 599, 600, 378, 341, 342, 410,
	346, 356, 399, 446, 384, 404, 298, 437, 411, 360,
	525, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 579,
	578, 577, 576, 575, 574, 573, 0, 0, 522, 424,
	310, 272, 306, 307, 314, 621, 618, 428, 622, 0,
	280, 502, 354, 0, 395, 328, 567, 568, 0, 0,
	228, 229, 230, 231, 232, 233, 234, 235, 273, 236,
	237, 238, 239, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 251, 252, 570, 243, 244, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 0, 0, 0, 274, 275, 276, 277, 0, 0,
	268, 269, 270, 271, 0, 0, 0, 453, 454, 455,
	477, 0, 439, 501, 619, 0, 0, 0, 0, 0,
	0, 0, 551, 563, 597, 0, 607, 608, 610, 612,
	611, 614, 416, 0, 0, 625, 492, 493, 626, 603,
	383, 0, 507, 540, 529, 613, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 323, 0, 0,
	353, 544, 526, 536, 527, 512, 513, 514, 521, 333,
	515, 516, 517, 487, 518, 488, 519, 520, 0, 543,
	494, 412, 367, 561, 560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	296, 216, 489, 609, 491, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 418, 435,
	297, 408, 448, 302, 415, 292, 382, 405, 0, 0,
	288, 433, 414, 364, 343, 344, 287, 0, 400, 321,
	335, 318, 380, 0, 432, 460, 317, 451, 0, 443,
	290, 0, 442, 379, 429, 434, 365, 359, 0, 289,
	431, 363, 358, 347, 325, 476, 348, 349, 339, 391,
	357, 392, 340, 369, 368, 370, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 606, 0,
	445, 0, 0, 0, 0, 0, 0, 417, 0, 0,
	350, 0, 0, 0, 461, 0, 403, 385, 628, 0,
	0, 401, 355, 430, 393, 436, 419, 444, 397, 394,
	281, 420, 320, 366, 293, 295, 315, 322, 324, 326,
	327, 375, 376, 388, 407, 421, 422, 423, 319, 303,
	402, 304, 337, 305, 282, 311, 309, 312, 409, 313,
	284, 389, 427, 0, 332, 398, 362, 285, 361, 390,
	426, 425, 294, 452, 458, 459, 548, 0, 464, 629,
	630, 631, 473, 478, 479, 480, 482, 483, 484, 485,
	549, 566, 533, 503, 466, 557, 500, 504, 505, 569,
	0, 0, 0, 457, 351, 352, 0, 330, 278, 279,
	624, 316, 381, 571, 604, 605, 496, 0, 558, 497,
	506, 308, 530, 542, 541, 377, 456, 0, 553, 556,
	486, 623, 0, 550, 565, 627, 564, 620, 387, 0,
	406, 562, 509, 0, 554, 528, 0, 555, 524, 559,
	0, 498, 0, 413, 438, 450, 467, 470, 499, 584,
	585, 586, 283, 469, 588, 589, 590, 591, 592, 593,
	594, 587, 441, 531, 508, 534, 449, 511, 510, 0,
	0, 545, 465, 546, 547, 371, 372, 373, 374, 334,
	572, 301, 468, 396, 0, 532, 0, 0, 0, 0,
	0, 0, 0, 0, 537, 538, 535, 632, 0, 595,
	596, 0, 0, 462, 463, 329, 336, 481, 338, 300,
	386, 331, 447, 345, 0, 474, 539, 475, 598, 601,
	599, 600, 378, 341, 342, 410, 346, 356, 399, 446,
	384, 404, 298, 437, 411, 360, 525, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 579, 578, 577, 576, 575,
	574, 573, 0, 0, 522, 424, 310, 272, 306, 307,
	314, 621, 618, 428, 622, 0, 280, 502, 354, 0,
	395, 328, 567, 568, 0, 0, 228, 229, 230, 231,
	232, 233, 234, 235, 273, 236, 237, 238, 239, 240,
	241, 242, 245, 246, 247, 248, 249, 250, 251, 252,
	570, 243, 244, 253, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 0, 0, 0,
	274, 275, 276, 277, 0, 0, 268, 269, 270, 271,
	0, 0, 0, 453, 454, 455, 477, 0, 439, 501,
	619, 0, 0, 0, 0, 0, 0, 0, 551, 563,
	597, 0, 607, 608, 610, 612, 611, 614, 416, 0,
	0, 625, 492, 493, 626, 603, 383, 0, 507, 540,
	529, 613, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 323, 0, 0, 353, 544, 526, 536,
	527, 512, 513, 514, 521, 333, 515, 516, 517, 487,
	518, 488, 519, 520, 0, 543, 494, 412, 367, 561,
	560, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 2513, 0, 0, 0, 296, 216, 489, 609,
	491, 490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 418, 435, 297, 408, 448, 302,
	415, 292, 382, 405, 0, 0, 288, 433, 414, 364,
	343, 344, 287, 0, 400, 321, 335, 318, 380, 0,
	432, 460, 317, 451, 0, 443, 290, 0, 442, 379,
	429, 434, 365, 359, 0, 289, 431, 363, 358, 347,
	325, 476, 348, 349, 339, 391, 357, 392, 340, 369,
	368, 370, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 602, 0, 0, 606, 0, 445, 0, 0, 0,
	0, 0, 0, 417, 0, 0, 350, 0, 0, 0,
	461, 0, 403, 385, 628, 0, 0, 401, 355, 430,
	393, 436, 419, 444, 397, 394, 281, 420, 320, 366,
	293, 295, 315, 322, 324, 326, 327, 375, 376, 388,
	407, 421, 422, 423, 319, 303, 402, 304, 337, 305,
	282, 311, 309, 312, 409, 313, 284, 389, 427, 0,
	332, 398, 362, 285, 361, 390, 426, 425, 294, 452,
	458, 459, 548, 0, 464, 629, 630, 631, 473, 478,
	479, 480, 482, 483, 484, 485, 549, 566, 533, 503,
	466, 557, 500, 504, 505, 569, 0, 0, 0, 457,
	351, 352, 0, 330, 278, 279, 624, 316, 381, 571,
	604, 605, 496, 0, 558, 497, 506, 308, 530, 542,
	541, 377, 456, 0, 553, 556, 486, 623, 0, 550,
	565, 627, 564, 620, 387, 0, 406, 562, 509, 0,
	554, 528, 0, 555, 524, 559, 0, 498, 0, 413,
	438, 450, 467, 470, 499, 584, 585, 586, 283, 469,
	588, 589, 590, 591, 592, 593, 594, 587, 441, 531,
	508, 534, 449, 511, 510, 0, 0, 545, 465, 546,
	547, 371, 372, 373, 374, 334, 572, 301, 468, 396,
	0, 532, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 538, 535, 632, 0, 595, 596, 0, 0, 462,
	463, 329, 336, 481, 338, 300, 386, 331, 447, 345,
	0, 474, 539, 475, 598, 601, 599, 600, 378, 341,
	342, 410, 346, 356, 399, 446, 384, 404, 298, 437,
	411, 360, 525, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	580, 579, 578, 577, 576, 575, 574, 573, 0, 0,
	522, 424, 310, 272, 306, 307, 314, 621, 618, 428,
	622, 0, 280, 502, 354, 0, 395, 328, 567, 568,
	0, 0, 228, 229, 230, 231, 232, 233, 234, 235,
	273, 236, 237, 238, 239, 240, 241, 242, 245, 246,
	247, 248, 249, 250, 251, 252, 570, 243, 244, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 0, 0, 0, 274, 275, 276, 277,
	0, 0, 268, 269, 270, 271, 0, 0, 0, 453,
	454, 455, 477, 0, 439, 501, 619, 0, 0, 0,
	0, 0, 0, 0, 551, 563, 597, 0, 607, 608,
	610, 612, 611, 614, 416, 0, 2297, 625, 492, 493,
	626, 603, 383, 0, 507, 540, 529, 613, 495, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 323,
	0, 0, 353, 544, 526, 536, 527, 512, 513, 514,
	521, 333, 515, 516, 517, 487, 518, 488, 519, 520,
	0, 543, 494, 412, 367, 561, 560, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 296, 216, 489, 609, 491, 490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	418, 435, 297, 408, 448, 302, 415, 292, 382, 405,
	0, 0, 288, 433, 414, 364, 343, 344, 287, 0,
	400, 321, 335, 318, 380, 0, 432, 460, 317, 451,
	0, 443, 290, 0, 442, 379, 429, 434, 365, 359,
	0, 289, 431, 363, 358, 347, 325, 476, 348, 349,
	339, 391, 357, 392, 340, 369, 368, 370, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 0, 0,
	606, 0, 445, 0, 0, 0, 0, 0, 0, 417,
	0, 0, 350, 0, 0, 0, 461, 0, 403, 385,
	628, 0, 0, 401, 355, 430, 393, 436, 419, 444,
	397, 394, 281, 420, 320, 366, 293, 295, 315, 322,
	324, 326, 327, 375, 376, 388, 407, 421, 422, 423,
	319, 303, 402, 304, 337, 305, 282, 311, 309, 312,
	409, 313, 284, 389, 427, 0, 332, 398, 362, 285,
	361, 390, 426, 425, 294, 452, 458, 459, 548, 0,
	464, 629, 630, 631, 473, 478, 479, 480, 482, 483,
	484, 485, 549, 566, 533, 503, 466, 557, 500, 504,
	505, 569, 0, 0, 0, 457, 351, 352, 0, 330,
	278, 279, 624, 316, 381, 571, 604, 605, 496, 0,
	558, 497, 506, 308, 530, 542, 541, 377, 456, 0,
	553, 556, 486, 623, 0, 550, 565, 627, 564, 620,
	387, 0, 406, 562, 509, 0, 554, 528, 0, 555,
	524, 559, 0, 498, 0, 413, 438, 450, 467, 470,
	499, 584, 585, 586, 283, 469, 588, 589, 590, 591,
	592, 593, 594, 587, 441, 531, 508, 534, 449, 511,
	510, 0, 0, 545, 465, 546, 547, 371, 372, 373,
	374, 334, 572, 301, 468, 396, 0, 532, 0, 0,
	0, 0, 0, 0, 0, 0, 537, 538, 535, 632,
	0, 595, 596, 0, 0, 462, 463, 329, 336, 481,
	338, 300, 386, 331, 447, 345, 0, 474, 539, 475,
	598, 601, 599, 600, 378, 341, 342, 410, 346, 356,
	399, 446, 384, 404, 298, 437, 411, 360, 525, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 579, 578, 577,
	576, 575, 574, 573, 0, 0, 522, 424, 310, 272,
	306, 307, 314, 621, 618, 428, 622, 0, 280, 502,
	354, 0, 395, 328, 567, 568, 0, 0, 228, 229,
	230, 231, 232, 233, 234, 235, 273, 236, 237, 238,
	239, 240, 241, 242, 245, 246, 247, 248, 249, 250,
	251, 252, 570, 243, 244, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 0,
	0, 0, 274, 275, 276, 277, 0, 0, 268, 269,
	270, 271, 0, 0, 0, 453, 454, 455, 477, 0,
	439, 501, 619, 0, 0, 0, 0, 0, 0, 0,
	551, 563, 597, 0, 607, 608, 610, 612, 611, 614,
	416, 0, 0, 625, 492, 493, 626, 603, 383, 0,
	507, 540, 529, 613, 495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 323, 0, 0, 353, 544,
	526, 536, 527, 512, 513, 514, 521, 333, 515, 516,
	517, 487, 518, 488, 519, 520, 0, 543, 494, 412,
	367, 561, 560, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 1847, 0, 0, 296, 216,
	489, 609, 491, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 418, 435, 297, 408,
	448, 302, 415, 292, 382, 405, 0, 0, 288, 433,
	414, 364, 343, 344, 287, 0, 400, 321, 335, 318,
	380, 0, 432, 460, 317, 451, 0, 443, 290, 0,
	442, 379, 429, 434, 365, 359, 0, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 1976, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 0, 289, 431, 363, 358, 347, 325, 476,
	348, 349, 339, 391, 357, 392, 340, 369, 368, 370,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	0, 0, 606, 0, 445, 0, 0, 0, 0, 0,
	0, 417, 0, 0, 350, 0, 0, 0, 461, 0,
	403, 385, 628, 0, 0, 401, 355, 430, 393, 436,
	419, 444, 397, 394, 281, 420, 320, 366, 293, 295,
	315, 322, 324, 326, 327, 375, 376, 388, 407, 421,
	422, 423, 319, 303, 402, 304, 337, 305, 282, 311,
	309, 312, 409, 313, 284, 389, 427, 0, 332, 398,
	362, 285, 361, 390, 426, 425, 294, 452, 458, 459,
	548, 0, 464, 629, 630, 631, 473, 478, 479, 480,
	482, 483, 484, 485, 549, 566, 533, 503, 466, 557,
	500, 504, 505, 569, 0, 0, 0, 457, 351, 352,
	0, 330, 278, 279, 624, 316, 381, 571, 604, 605,
	496, 0, 558, 497, 506, 308, 530, 542, 541, 377,
	456, 0, 553, 556, 486, 623, 0, 550, 565, 627,
	564, 620, 387, 0, 406, 562, 509, 0, 554, 528,
	0, 555, 524, 559, 0, 498, 0, 413, 438, 450,
	467, 470, 499, 584, 585, 586, 283, 469, 588, 589,
	590, 591, 592, 593, 594, 587, 441, 531, 508, 534,
	449, 511, 510, 0, 0, 545, 465, 546, 547, 371,
	372, 373, 374, 334, 572, 301, 468, 396, 0, 532,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 538,
	535, 632, 0, 595, 596, 0, 0, 462, 463, 329,
	336, 481, 338, 300, 386, 331, 447, 345, 0, 474,
	539, 475, 598, 601, 599, 600, 378, 341, 342, 410,
	346, 356, 399, 446, 384, 404, 298, 437, 411, 360,
	525, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 579,
	578, 577, 576, 575, 574, 573, 0, 0, 522, 424,
	310, 272, 306, 307, 314, 621, 618, 428, 622, 0,
	280, 502, 354, 0, 395, 328, 567, 568, 0, 0,
	228, 229, 230, 231, 232, 233, 234, 235, 273, 236,
	237, 238, 239, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 251, 252, 570, 243, 244, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 0, 0, 0, 274, 275, 276, 277, 0, 0,
	268, 269, 270, 271, 0, 0, 0, 453, 454, 455,
	477, 0, 439, 501, 619, 0, 0, 0, 0, 0,
	0, 0, 551, 563, 597, 0, 607, 608, 610, 612,
	611, 614, 416, 0, 0, 625, 492, 493, 626, 603,
	383, 0, 507, 540, 529, 613, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 323, 0, 0,
	353, 544, 526, 536, 527, 512, 513, 514, 521, 333,
	515, 516, 517, 487, 518, 488, 519, 520, 0, 543,
	494, 412, 367, 561, 560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 1487, 0, 0, 0,
	296, 216, 489, 609, 491, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 418, 435,
	297, 408, 448, 302, 415, 292, 382, 405, 0, 0,
	288, 433, 414, 364, 343, 344, 287, 0, 400, 321,
	335, 318, 380, 0, 432, 460, 317, 451, 0, 443,
	290, 0, 442, 379, 429, 434, 365, 359, 0, 289,
	431, 363, 358, 347, 325, 476, 348, 349, 339, 391,
	357, 392, 340, 369, 368, 370, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 606, 0,
	445, 0, 0, 0, 0, 0, 0, 417, 0, 0,
	350, 0, 0, 0, 461, 0, 403, 385, 628, 0,
	0, 401, 355, 430, 393, 436, 419, 444, 1881, 394,
	281, 420, 320, 366, 293, 295, 315, 322, 324, 326,
	327, 375, 376, 388, 407, 421, 422, 423, 319, 303,
	402, 304, 337, 305, 282, 311, 309, 312, 409, 313,
	284, 389, 427, 0, 332, 398, 362, 285, 361, 390,
	426, 425, 294, 452, 458, 459, 548, 0, 464, 629,
	630, 631, 473, 478, 479, 480, 482, 483, 484, 485,
	549, 566, 533, 503, 466, 557, 500, 504, 505, 569,
	0, 0, 0, 457, 351, 352, 0, 330, 278, 279,
	624, 316, 381, 571, 604, 605, 496, 0, 558, 497,
	506, 308, 530, 542, 541, 377, 456, 0, 553, 556,
	486, 623, 0, 550, 565, 627, 564, 620, 387, 0,
	406, 562, 509, 0, 554, 528, 0, 555, 524, 559,
	0, 498, 0, 413, 438, 450, 467, 470, 499, 584,
	585, 586, 283, 469, 588, 589, 590, 591, 592, 593,
	594, 587, 441, 531, 508, 534, 449, 511, 510, 0,
	0, 545, 465, 546, 547, 371, 372, 373, 374, 334,
	572, 301, 468, 396, 0, 532, 0, 0, 0, 0,
	0, 0, 0, 0, 537, 538, 535, 632, 0, 595,
	596, 0, 0, 462, 463, 329, 336, 481, 338, 300,
	386, 331, 447, 345, 0, 474, 539, 475, 598, 601,
	599, 600, 378, 341, 342, 410, 346, 356, 399, 446,
	384, 404, 298, 437, 411, 360, 525, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 579, 578, 577, 576, 575,
	574, 573, 0, 0, 522, 424, 310, 272, 306, 307,
	314, 621, 618, 428, 622, 0, 280, 502, 354, 0,
	395, 328, 567, 568, 0, 0, 228, 229, 230, 231,
	232, 233, 234, 235, 273, 236, 237, 238, 239, 240,
	241, 242, 245, 246, 247, 248, 249, 250, 251, 252,
	570, 243, 244, 253, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 0, 0, 0,
	274, 275, 276, 277, 0, 0, 268, 269, 270, 271,
	0, 0, 0, 453, 454, 455, 477, 0, 439, 501,
	619, 0, 0, 0, 0, 0, 0, 0, 551, 563,
	597, 0, 607, 608, 610, 612, 611, 614, 416, 0,
	0, 625, 492, 493, 626, 603, 383, 0, 507, 540,
	529, 613, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 323, 0, 0, 353, 544, 526, 536,
	527, 512, 513, 514, 521, 333, 515, 516, 517, 487,
	518, 488, 519, 520, 0, 543, 494, 412, 367, 561,
	560, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 296, 216, 489, 609,
	491, 490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 418, 435, 297, 408, 448, 302,
	415, 292, 382, 405, 0, 0, 288, 433, 414, 364,
	343, 344, 287, 0, 400, 321, 335, 318, 380, 0,
	432, 460, 317, 451, 0, 443, 290, 0, 442, 379,
	429, 434, 365, 359, 0, 289, 431, 363, 358, 347,
	325, 476, 348, 349, 339, 391, 357, 392, 340, 369,
	368, 370, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 602, 0, 0, 606, 0, 445, 0, 0, 1516,
	0, 0, 0, 417, 0, 0, 350, 0, 0, 0,
	461, 0, 403, 385, 628, 0, 0, 401, 355, 430,
	393, 436, 419, 444, 397, 394, 281, 420, 320, 366,
	293, 295, 315, 322, 324, 326, 327, 375, 376, 388,
	407, 421, 422, 423, 319, 303, 402, 304, 337, 305,
	282, 311, 309, 312, 409, 313, 284, 389, 427, 0,
	332, 398, 362, 285, 361, 390, 426, 425, 294, 452,
	458, 459, 548, 0, 464, 629, 630, 631, 473, 478,
	479, 480, 482, 483, 484, 485, 549, 566, 533, 503,
	466, 557, 500, 504, 505, 569, 0, 0, 0, 457,
	351, 352, 0, 330, 278, 279, 624, 316, 381, 571,
	604, 605, 496, 0, 558, 497, 506, 308, 530, 542,
	541, 377, 456, 0, 553, 556, 486, 623, 0, 550,
	565, 627, 564, 620, 387, 0, 406, 562, 509, 0,
	554, 528, 0, 555, 524, 559, 0, 498, 0, 413,
	438, 450, 467, 470, 499, 584, 585, 586, 283, 469,
	588, 589, 590, 591, 592, 593, 594, 587, 441, 531,
	508, 534, 449, 511, 510, 0, 0, 545, 465, 546,
	547, 371, 372, 373, 374, 334, 572, 301, 468, 396,
	0, 532, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 538, 535, 632, 0, 595, 596, 0, 0, 462,
	463, 329, 336, 481, 338, 300, 386, 331, 447, 345,
	0, 474, 539, 475, 598, 601, 599, 600, 378, 341,
	342, 410, 346, 356, 399, 446, 384, 404, 298, 437,
	411, 360, 525, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	580, 579, 578, 577, 576, 575, 574, 573, 0, 0,
	522, 424, 310, 272, 306, 307, 314, 621, 618, 428,
	622, 0, 280, 502, 354, 0, 395, 328, 567, 568,
	0, 0, 228, 229, 230, 231, 232, 233, 234, 235,
	273, 236, 237, 238, 239, 240, 241, 242, 245, 246,
	247, 248, 249, 250, 251, 252, 570, 243, 244, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 0, 0, 0, 274, 275, 276, 277,
	0, 0, 268, 269, 270, 271, 0, 0, 0, 453,
	454, 455, 477, 0, 439, 501, 619, 0, 0, 0,
	0, 0, 0, 0, 551, 563, 597, 0, 607, 608,
	610, 612, 611, 614, 416, 0, 0, 625, 492, 493,
	626, 603, 383, 0, 507, 540, 529, 613, 495, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 639, 323,
	0, 0, 353, 544, 526, 536, 527, 512, 513, 514,
	521, 333, 515, 516, 517, 487, 518, 488, 519, 520,
	0, 543, 494, 412, 367, 561, 560, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 296, 216, 489, 609, 491, 490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	418, 435, 297, 408, 448, 302, 415, 292, 382, 405,
	0, 0, 288, 433, 414, 364, 343, 344, 287, 0,
	400, 321, 335, 318, 380, 0, 432, 460, 317, 451,
	0, 443, 290, 0, 442, 379, 429, 434, 365, 359,
	0, 289, 431, 363, 358, 347, 325, 476, 348, 349,
	339, 391, 357, 392, 340, 369, 368, 370, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 0, 0,
	606, 0, 445, 0, 0, 0, 0, 0, 0, 417,
	0, 0, 350, 0, 0, 0, 461, 0, 403, 385,
	628, 0, 0, 401, 355, 430, 393, 436, 419, 444,
	397, 394, 281, 420, 320, 366, 293, 295, 315, 322,
	324, 326, 327, 375, 376, 388, 407, 421, 422, 423,
	319, 303, 402, 304, 337, 305, 282, 311, 309, 312,
	409, 313, 284, 389, 427, 0, 332, 398, 362, 285,
	361, 390, 426, 425, 294, 452, 458, 459, 548, 0,
	464, 629, 630, 631, 473, 478, 479, 480, 482, 483,
	484, 485, 549, 566, 533, 503, 466, 557, 500, 504,
	505, 569, 0, 0, 0, 457, 351, 352, 0, 330,
	278, 279, 624, 316, 381, 571, 604, 605, 496, 0,
	558, 497, 506, 308, 530, 542, 541, 377, 456, 0,
	553, 556, 486, 623, 0, 550, 565, 627, 564, 620,
	387, 0, 406, 562, 509, 0, 554, 528, 0, 555,
	524, 559, 0, 498, 0, 413, 438, 450, 467, 470,
	499, 584, 585, 586, 283, 469, 588, 589, 590, 591,
	592, 593, 594, 587, 441, 531, 508, 534, 449, 511,
	510, 0, 0, 545, 465, 546, 547, 371, 372, 373,
	374, 334, 572, 301, 468, 396, 0, 532, 0, 0,
	0, 0, 0, 0, 0, 0, 537, 538, 535, 632,
	0, 595, 596, 0, 0, 462, 463, 329, 336, 481,
	338, 300, 386, 331, 447, 345, 0, 474, 539, 475,
	598, 601, 599, 600, 378, 341, 342, 410, 346, 356,
	399, 446, 384, 404, 298, 437, 411, 360, 525, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 579, 578, 577,
	576, 575, 574, 573, 0, 0, 522, 424, 310, 272,
	306, 307, 314, 621, 618, 428, 622, 0, 280, 502,
	354, 0, 395, 328, 567, 568, 0, 0, 228, 229,
	230, 231, 232, 233, 234, 235, 273, 236, 237, 238,
	239, 240, 241, 242, 245, 246, 247, 248, 249, 250,
	251, 252, 570, 243, 244, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 0,
	0, 0, 274, 275, 276, 277, 0, 0, 268, 269,
	270, 271, 0, 0, 0, 453, 454, 455, 477, 0,
	439, 501, 619, 0, 0, 0, 0, 0, 0, 0,
	551, 563, 597, 0, 607, 608, 610, 612, 611, 614,
	416, 0, 0, 625, 492, 493, 626, 603, 383, 0,
	507, 540, 529, 613, 495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 323, 0, 0, 353, 544,
	526, 536, 527, 512, 513, 514, 521, 333, 515, 516,
	517, 487, 518, 488, 519, 520, 0, 543, 494, 412,
	367, 561, 560, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 296, 216,
	489, 609, 491, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 418, 435, 297, 408,
	448, 302, 415, 292, 382, 405, 0, 0, 288, 433,
	414, 364, 343, 344, 287, 0, 400, 321, 335, 318,
	380, 0, 432, 460, 317, 451, 0, 443, 290, 0,
	442, 379, 429, 434, 365, 359, 0, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 649, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 0, 289, 431, 363, 358, 347, 325, 476,
	348, 349, 339, 391, 357, 392, 340, 369, 368, 370,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	0, 0, 606, 0, 445, 0, 0, 0, 0, 0,
	0, 417, 0, 0, 350, 0, 0, 0, 461, 0,
	403, 385, 628, 0, 0, 401, 355, 430, 393, 436,
	419, 444, 397, 394, 281, 420, 320, 366, 293, 295,
	315, 322, 324, 326, 327, 375, 376, 388, 407, 421,
	422, 423, 319, 303, 402, 304, 337, 305, 282, 311,
	309, 312, 409, 313, 284, 389, 427, 0, 332, 398,
	362, 285, 361, 390, 426, 425, 294, 452, 458, 459,
	548, 0, 464, 629, 630, 631, 473, 478, 479, 480,
	482, 483, 484, 485, 549, 566, 533, 503, 466, 557,
	500, 504, 505, 569, 0, 0, 0, 457, 351, 352,
	0, 330, 278, 279, 624, 316, 381, 571, 604, 605,
	496, 0, 558, 497, 506, 308, 530, 542, 541, 377,
	456, 0, 553, 556, 486, 623, 0, 550, 565, 627,
	564, 620, 387, 0, 406, 562, 509, 0, 554, 528,
	0, 555, 524, 559, 0, 498, 0, 413, 438, 450,
	467, 470, 499, 584, 585, 586, 283, 469, 588, 589,
	590, 591, 592, 593, 594, 587, 441, 531, 508, 534,
	449, 511, 510, 0, 0, 545, 465, 546, 547, 371,
	372, 373, 374, 334, 572, 301, 468, 396, 0, 532,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 538,
	535, 632, 0, 595, 596, 0, 0, 462, 463, 329,
	336, 481, 338, 300, 386, 331, 447, 345, 0, 474,
	539, 475, 598, 601, 599, 600, 378, 341, 342, 410,
	346, 356, 399, 446, 384, 404, 298, 437, 411, 360,
	525, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 579,
	578, 577, 576, 575, 574, 573, 941, 0, 522, 424,
	310, 272, 306, 307, 314, 621, 618, 428, 622, 0,
	280, 502, 354, 0, 395, 328, 567, 568, 0, 0,
	228, 229, 230, 231, 232, 233, 234, 235, 273, 236,
	237, 238, 239, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 251, 252, 570, 243, 244, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 0, 0, 0, 274, 275, 276, 277, 0, 0,
	268, 269, 270, 271, 0, 0, 0, 453, 454, 455,
	477, 0, 439, 501, 619, 0, 0, 0, 0, 0,
	0, 0, 551, 563, 597, 0, 607, 608, 610, 612,
	611, 614, 416, 0, 0, 625, 492, 493, 626, 603,
	383, 0, 507, 540, 529, 613, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 323, 0, 0,
	353, 544, 526, 536, 527, 512, 513, 514, 521, 333,
	515, 516, 517, 487, 518, 488, 519, 520, 0, 543,
	494, 412, 367, 561, 560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	296, 216, 489, 609, 491, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 418, 435,
	297, 408, 448, 302, 415, 292, 382, 405, 0, 0,
	288, 433, 414, 364, 343, 344, 287, 0, 400, 321,
	335, 318, 380, 0, 432, 460, 317, 451, 0, 443,
	290, 0, 442, 379, 429, 434, 365, 359, 0, 289,
	431, 363, 358, 347, 325, 476, 348, 349, 339, 391,
	357, 392, 340, 369, 368, 370, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 606, 0,
	445, 0, 0, 0, 0, 0, 0, 417, 0, 0,
	350, 0, 0, 0, 461, 0, 403, 385, 628, 0,
	0, 401, 355, 430, 393, 436, 419, 444, 397, 394,
	281, 420, 320, 366, 293, 295, 315, 322, 324, 326,
	327, 375, 376, 388, 407, 421, 422, 423, 319, 303,
	402, 304, 337, 305, 282, 311, 309, 312, 409, 313,
	284, 389, 427, 0, 332, 398, 362, 285, 361, 390,
	426, 425, 294, 452, 458, 459, 548, 0, 464, 629,
	630, 631, 473, 478, 479, 480, 482, 483, 484, 485,
	549, 566, 533, 503, 466, 557, 500, 504, 505, 569,
	0, 0, 0, 457, 351, 352, 0, 330, 278, 279,
	624, 316, 381, 571, 604, 605, 496, 0, 558, 497,
	506, 308, 530, 542, 541, 377, 456, 0, 553, 556,
	486, 623, 0, 550, 565, 627, 564, 620, 387, 0,
	406, 562, 509, 0, 554, 528, 0, 555, 524, 559,
	0, 498, 0, 413, 438, 450, 467, 470, 499, 584,
	585, 586, 283, 469, 588, 589, 590, 591, 592, 593,
	594, 587, 441, 531, 508, 534, 449, 511, 510, 0,
	0, 545, 465, 546, 547, 371, 372, 373, 374, 334,
	572, 301, 468, 396, 0, 532, 0, 0, 0, 0,
	0, 0, 0, 0, 537, 538, 535, 632, 0, 595,
	596, 0, 0, 462, 463, 329, 336, 481, 338, 300,
	386, 331, 447, 345, 0, 474, 539, 475, 598, 601,
	599, 600, 378, 341, 342, 410, 346, 356, 399, 446,
	384, 404, 298, 437, 411, 360, 525, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 579, 578, 577, 576, 575,
	574, 573, 0, 0, 522, 424, 310, 272, 306, 307,
	314, 621, 618, 428, 622, 0, 280, 502, 354, 0,
	395, 328, 567, 568, 0, 0, 228, 229, 230, 231,
	232, 233, 234, 235, 273, 236, 237, 238, 239, 240,
	241, 242, 245, 246, 247, 248, 249, 250, 251, 252,
	570, 243, 244, 253, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 0, 0, 0,
	274, 275, 276, 277, 0, 0, 268, 269, 270, 271,
	0, 0, 0, 453, 454, 455, 477, 0, 439, 501,
	619, 0, 0, 0, 0, 0, 0, 0, 551, 563,
	597, 0, 607, 608, 610, 612, 611, 614, 416, 0,
	0, 625, 492, 493, 626, 603, 383, 0, 507, 540,
	529, 613, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 323, 0, 0, 353, 544, 526, 536,
	527, 512, 513, 514, 521, 333, 515, 516, 517, 487,
	518, 488, 519, 520, 0, 543, 494, 412, 367, 561,
	560, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 296, 216, 489, 609,
	491, 490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 418, 1467, 297, 408, 448, 302,
	415, 292, 382, 405, 0, 0, 288, 433, 414, 364,
	343, 344, 287, 0, 400, 321, 335, 318, 380, 0,
	432, 460, 317, 451, 0, 443, 290, 0, 442, 379,
	429, 434, 365, 359, 0, 289, 431, 363, 358, 347,
	325, 476, 348, 349, 339, 391, 357, 392, 340, 369,
	368, 370, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 602, 0, 0, 606, 0, 445, 0, 0, 0,
	0, 0, 0, 417, 0, 0, 350, 0, 0, 0,
	461, 0, 403, 385, 628, 0, 0, 401, 355, 430,
	393, 436, 419, 444, 397, 394, 281, 420, 320, 366,
	293, 295, 315, 322, 324, 326, 327, 375, 376, 388,
	407, 421, 422, 423, 319, 303, 402, 304, 337, 305,
	282, 311, 309, 312, 409, 313, 284, 389, 427, 0,
	332, 398, 362, 285, 361, 390, 426, 425, 294, 452,
	458, 459, 548, 0, 464, 629, 630, 631, 473, 478,
	479, 480, 482, 483, 484, 485, 549, 566, 533, 503,
	466, 557, 500, 504, 505, 569, 0, 0, 0, 457,
	351, 352, 0, 330, 278, 279, 624, 316, 381, 571,
	604, 605, 496, 0, 558, 497, 506, 308, 530, 542,
	541, 377, 456, 0, 553, 556, 486, 623, 0, 550,
	565, 627, 564, 620, 387, 0, 406, 562, 509, 0,
	554, 528, 0, 555, 524, 559, 0, 498, 0, 413,
	438, 450, 467, 470, 499, 584, 585, 586, 283, 469,
	588, 589, 590, 591, 592, 593, 594, 587, 441, 531,
	508, 534, 449, 511, 510, 0, 0, 545, 465, 546,
	547, 371, 372, 373, 374, 334, 572, 301, 468, 396,
	0, 532, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 538, 535, 632, 0, 595, 596, 0, 0, 462,
	463, 329, 336, 481, 338, 300, 386, 331, 447, 345,
	0, 474, 539, 475, 598, 601, 599, 600, 378, 341,
	342, 410, 346, 356, 399, 446, 384, 404, 298, 437,
	411, 360, 525, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	580, 579, 578, 577, 576, 575, 574, 573, 0, 0,
	522, 424, 310, 272, 306, 307, 314, 621, 618, 428,
	622, 0, 280, 502, 354, 0, 395, 328, 567, 568,
	0, 0, 228, 229, 230, 231, 232, 233, 234, 235,
	273, 236, 237, 238, 239, 240, 241, 242, 245, 246,
	247, 248, 249, 250, 251, 252, 570, 243, 244, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 0, 0, 0, 274, 275, 276, 277,
	0, 0, 268, 269, 270, 271, 0, 0, 0, 453,
	454, 455, 477, 0, 439, 501, 619, 0, 0, 0,
	0, 0, 0, 0, 551, 563, 597, 0, 607, 608,
	610, 612, 611, 614, 416, 0, 0, 625, 492, 493,
	626, 603, 383, 0, 507, 540, 529, 613, 495, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 323,
	0, 0, 353, 544, 526, 536, 527, 512, 513, 514,
	521, 333, 515, 516, 517, 487, 518, 488, 519, 520,
	0, 543, 494, 412, 367, 561, 560, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 296, 216, 489, 609, 491, 490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	418, 1465, 297, 408, 448, 302, 415, 292, 382, 405,
	0, 0, 288, 433, 414, 364, 343, 344, 287, 0,
	400, 321, 335, 318, 380, 0, 432, 460, 317, 451,
	0, 443, 290, 0, 442, 379, 429, 434, 365, 359,
	0, 289, 431, 363, 358, 347, 325, 476, 348, 349,
	339, 391, 357, 392, 340, 369, 368, 370, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 0, 0,
	606, 0, 445, 0, 0, 0, 0, 0, 0, 417,
	0, 0, 350, 0, 0, 0, 461, 0, 403, 385,
	628, 0, 0, 401, 355, 430, 393, 436, 419, 444,
	397, 394, 281, 420, 320, 366, 293, 295, 315, 322,
	324, 326, 327, 375, 376, 388, 407, 421, 422, 423,
	319, 303, 402, 304, 337, 305, 282, 311, 309, 312,
	409, 313, 284, 389, 427, 0, 332, 398, 362, 285,
	361, 390, 426, 425, 294, 452, 458, 459, 548, 0,
	464, 629, 630, 631, 473, 478, 479, 480, 482, 483,
	484, 485, 549, 566, 533, 503, 466, 557, 500, 504,
	505, 569, 0, 0, 0, 457, 351, 352, 0, 330,
	278, 279, 624, 316, 381, 571, 604, 605, 496, 0,
	558, 497, 506, 308, 530, 542, 541, 377, 456, 0,
	553, 556, 486, 623, 0, 550, 565, 627, 564, 620,
	387, 0, 406, 562, 509, 0, 554, 528, 0, 555,
	524, 559, 0, 498, 0, 413, 438, 450, 467, 470,
	499, 584, 585, 586, 283, 469, 588, 589, 590, 591,
	592, 593, 594, 587, 441, 531, 508, 534, 449, 511,
	510, 0, 0, 545, 465, 546, 547, 371, 372, 373,
	374, 334, 572, 301, 468, 396, 0, 532, 0, 0,
	0, 0, 0, 0, 0, 0, 537, 538, 535, 632,
	0, 595, 596, 0, 0, 462, 463, 329, 336, 481,
	338, 300, 386, 331, 447, 345, 0, 474, 539, 475,
	598, 601, 599, 600, 378, 341, 342, 410, 346, 356,
	399, 446, 384, 404, 298, 437, 411, 360, 525, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 579, 578, 577,
	576, 575, 574, 573, 0, 0, 522, 424, 310, 272,
	306, 307, 314, 621, 618, 428, 622, 0, 280, 502,
	354, 0, 395, 328, 567, 568, 0, 0, 228, 229,
	230, 231, 232, 233, 234, 235, 273, 236, 237, 238,
	239, 240, 241, 242, 245, 246, 247, 248, 249, 250,
	251, 252, 570, 243, 244, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 0,
	0, 0, 274, 275, 276, 277, 0, 0, 268, 269,
	270, 271, 0, 0, 0, 453, 454, 455, 477, 0,
	439, 501, 619, 0, 0, 0, 0, 0, 0, 0,
	551, 563, 597, 0, 607, 608, 610, 612, 611, 614,
	416, 0, 0, 625, 492, 493, 626, 603, 383, 0,
	507, 540, 529, 613, 495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 323, 0, 0, 353, 544,
	526, 536, 527, 512, 513, 514, 521, 333, 515, 516,
	517, 487, 518, 488, 519, 520, 0, 543, 494, 412,
	367, 561, 560, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 296, 216,
	489, 609, 491, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 418, 435, 297, 408,
	448, 302, 415, 292, 382, 405, 0, 0, 288, 433,
	414, 364, 343, 344, 287, 0, 400, 321, 335, 318,
	380, 0, 432, 460, 317, 451, 0, 443, 290, 0,
	442, 379, 429, 434, 365, 359, 0, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 716, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 0, 289, 431, 363, 358, 347, 325, 476,
	348, 349, 339, 391, 357, 392, 340, 369, 368, 370,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	0, 0, 606, 0, 445, 0, 0, 0, 0, 0,
	0, 417, 0, 0, 350, 0, 0, 0, 461, 0,
	403, 385, 628, 0, 0, 401, 355, 430, 393, 436,
	419, 444, 673, 394, 281, 420, 320, 366, 293, 295,
	315, 322, 324, 326, 327, 375, 376, 388, 407, 421,
	422, 423, 319, 303, 402, 304, 337, 305, 282, 311,
	309, 312, 409, 313, 284, 389, 427, 0, 332, 398,
	362, 285, 361, 390, 426, 425, 294, 452, 458, 459,
	548, 0, 464, 629, 630, 631, 473, 478, 479, 480,
	482, 483, 484, 485, 549, 566, 533, 503, 466, 557,
	500, 504, 505, 569, 0, 0, 0, 457, 351, 352,
	0, 330, 278, 279, 624, 316, 381, 571, 604, 605,
	496, 0, 558, 497, 506, 308, 530, 542, 541, 377,
	456, 0, 553, 556, 486, 623, 0, 550, 565, 627,
	564, 620, 387, 0, 406, 562, 509, 0, 554, 528,
	0, 555, 524, 559, 0, 498, 0, 413, 438, 450,
	467, 470, 499, 584, 585, 586, 283, 469, 588, 589,
	590, 591, 592, 593, 674, 587, 441, 531, 508, 534,
	449, 511, 510, 0, 0, 545, 465, 546, 547, 371,
	372, 373, 374, 334, 572, 301, 468, 396, 0, 532,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 538,
	535, 632, 0, 595, 596, 0, 0, 462, 463, 329,
	336, 481, 338, 300, 386, 331, 447, 345, 0, 474,
	539, 475, 598, 601, 599, 600, 378, 341, 342, 410,
	346, 356, 399, 446, 384, 404, 298, 437, 411, 360,
	525, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 1092, 0, 0, 0, 0, 0, 580, 579,
	578, 577, 576, 575, 574, 573, 0, 0, 522, 424,
	310, 272, 306, 307, 314, 621, 618, 428, 622, 0,
	280, 502, 354, 0, 395, 328, 567, 568, 0, 0,
	228, 229, 230, 231, 232, 233, 234, 235, 273, 236,
	237, 238, 239, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 251, 252, 570, 243, 244, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 0, 0, 0, 274, 275, 276, 277, 0, 0,
	268, 269, 270, 271, 0, 0, 1963, 453, 454, 455,
	477, 1924, 439, 501, 619, 0, 0, 0, 0, 0,
	0, 0, 551, 563, 597, 0, 607, 608, 610, 612,
	611, 614, 416, 0, 1077, 625, 492, 493, 626, 603,
	0, 1965, 1933, 0, 0, 0, 0, 0, 0, 0,
	0, 1966, 1967, 0, 1100, 1104, 1106, 1108, 1110, 1111,
	1113, 0, 1118, 1114, 1115, 1116, 1117, 0, 1095, 1096,
	1097, 1098, 1075, 1076, 1101, 0, 1078, 1932, 1080, 1081,
	1082, 1083, 1079, 1084, 1085, 1086, 1087, 1088, 1091, 1093,
	1089, 1090, 1099, 1940, 0, 0, 0, 0, 0, 0,
	1103, 1105, 1107, 1109, 1112, 0, 695, 694, 701, 691,
	0, 0, 0, 0, 0, 0, 0, 0, 698, 699,
	0, 700, 704, 0, 0, 685, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 709, 1963, 0, 1094, 0,
	0, 1924, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1956, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1965, 1933, 0, 0, 0, 0, 0, 0, 0,
	0, 1966, 1967, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1932, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1940, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1923, 1925, 1922, 0, 1919, 0, 0,
	0, 0, 1944, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1950, 0, 0, 0, 0, 0, 0,
	0, 1935, 0, 1918, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1938, 1972, 0, 0, 1939, 1941, 1943,
	0, 1945, 1946, 1947, 1951, 1952, 1953, 1955, 1958, 1959,
	1960, 1956, 0, 0, 0, 0, 0, 0, 1948, 1957,
	1949, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1927, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 686, 688, 687, 0, 0,
	0, 0, 1964, 0, 0, 693, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 697, 0, 0,
	0, 0, 0, 0, 712, 0, 0, 0, 0, 1920,
	1921, 690, 0, 1923, 2764, 1922, 0, 2763, 0, 0,
	0, 0, 1944, 0, 0, 0, 0, 1961, 0, 0,
	0, 0, 0, 1950, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1937, 0, 0, 0, 0, 0,
	0, 1936, 0, 1938, 1972, 0, 0, 1939, 1941, 1943,
	0, 1945, 1946, 1947, 1951, 1952, 1953, 1955, 1958, 1959,
	1960, 1102, 0, 0, 0, 1954, 0, 0, 1948, 1957,
	1949, 0, 0, 0, 1942, 0, 0, 1092, 0, 0,
	1927, 0, 0, 0, 0, 0, 0, 1969, 1968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1964, 0, 0, 0, 0, 0, 0, 0,
	0, 692, 696, 702, 0, 703, 705, 0, 0, 706,
	707, 708, 0, 0, 710, 711, 0, 0, 0, 1920,
	1921, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1929, 0, 0, 0, 0, 0, 0, 1961, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1937, 0, 0, 0, 0, 0,
	0, 1936, 0, 0, 1092, 0, 0, 0, 0, 0,
	0, 0, 1971, 0, 0, 1970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1954, 0, 0, 0, 1077,
	0, 0, 0, 0, 1942, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1969, 1968, 1100,
	1104, 1106, 1108, 1110, 1111, 1113, 0, 1118, 1114, 1115,
	1116, 1117, 0, 1095, 1096, 1097, 1098, 1075, 1076, 1101,
	0, 1078, 0, 1080, 1081, 1082, 1083, 1079, 1084, 1085,
	1086, 1087, 1088, 1091, 1093, 1089, 1090, 1099, 0, 0,
	0, 0, 0, 0, 0, 1103, 1105, 1107, 1109, 1112,
	1929, 0, 1963, 0, 0, 0, 0, 0, 0, 0,
	689, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1077, 0, 0, 0,
	1067, 0, 0, 1094, 0, 0, 0, 1965, 0, 0,
	0, 0, 1971, 0, 0, 1970, 1100, 1104, 1106, 1108,
	1110, 1111, 1113, 0, 1118, 1114, 1115, 1116, 1117, 0,
	1095, 1096, 1097, 1098, 1075, 1076, 1101, 0, 1078, 0,
	1080, 1081, 1082, 1083, 1079, 1084, 1085, 1086, 1087, 1088,
	1091, 1093, 1089, 1090, 1099, 695, 694, 701, 691, 1940,
	0, 0, 1103, 1105, 1107, 1109, 1112, 698, 699, 1963,
	700, 704, 0, 0, 685, 0, 193, 0, 0, 0,
	0, 0, 0, 0, 709, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3520, 0,
	1094, 0, 0, 0, 1965, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3659, 0, 0, 0, 1956, 713, 0,
	0, 715, 0, 0, 0, 0, 714, 0, 0, 0,
	0, 0, 2598, 2599, 0, 0, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1940, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1963, 0, 0, 0, 0, 0, 0, 0, 1944, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1950,
	0, 0, 0, 0, 1956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1965, 0, 0, 1963, 1938,
	1972, 0, 0, 1939, 1941, 1943, 0, 1945, 1946, 1947,
	1951, 1952, 1953, 1955, 1958, 1959, 1960, 0, 0, 0,
	0, 0, 0, 0, 1948, 1957, 1949, 0, 0, 0,
	0, 0, 0, 1965, 686, 688, 687, 3688, 0, 0,
	0, 0, 0, 0, 693, 0, 1102, 1940, 0, 0,
	0, 0, 0, 0, 0, 0, 697, 0, 1964, 0,
	0, 0, 0, 712, 0, 1944, 0, 0, 0, 0,
	690, 0, 0, 0, 0, 0, 1950, 0, 0, 0,
	0, 0, 0, 0, 0, 1940, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1938, 1972, 0, 0,
	1939, 1941, 1943, 1961, 1945, 1946, 1947, 1951, 1952, 1953,
	1955, 1958, 1959, 1960, 0, 1956, 0, 0, 0, 0,
	1937, 1948, 1957, 1949, 0, 0, 0, 1936, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	0, 1954, 0, 1956, 0, 1964, 0, 0, 0, 0,
	1942, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	692, 696, 702, 0, 703, 705, 0, 0, 706, 707,
	708, 0, 0, 710, 711, 0, 1944, 0, 0, 0,
	1961, 0, 0, 0, 0, 0, 0, 1950, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1937, 0, 0,
	0, 0, 0, 0, 1936, 0, 0, 1938, 1972, 0,
	0, 1939, 1941, 1943, 1944, 1945, 1946, 1947, 1951, 1952,
	1953, 1955, 1958, 1959, 1960, 1950, 0, 0, 1954, 0,
	0, 0, 1948, 1957, 1949, 0, 0, 1942, 0, 0,
	0, 0, 0, 0, 0, 1938, 1972, 0, 0, 1939,
	1941, 1943, 0, 1945, 1946, 1947, 1951, 1952, 1953, 1955,
	1958, 1959, 1960, 0, 0, 0, 1964, 0, 0, 0,
	1948, 1957, 1949, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1964, 0, 0, 0, 0, 0,
	0, 1961, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1937, 689,
	0, 0, 0, 0, 0, 1936, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 157, 0, 0, 0, 1961,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1954,
	0, 0, 0, 0, 0, 0, 1937, 0, 1942, 0,
	0, 0, 0, 1936, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1954, 0, 0,
	0, 0, 0, 0, 0, 0, 1942,
}

var yyPact = [...]int{
	314, -1000, -1000, -1000, -297, 13936, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 45987, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 441, 45987,
	-295, 28123, 44139, -1000, -1000, 2841, -1000, 44755, 15178, 45987,
	506, 505, 45987, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 930, -1000, 48451, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 860, 3984, 47835, 10836,
	-208, -1000, 1491, -11, 2624, 514, -184, -185, 1099, 1107,
	1192, 1192, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 358, 982, 45371, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3814, 245, 982, 20112, 163, 158, 1491, 430,
	-26, 179, -1000, 1533, 4007, 219, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10836, 10836, 13936,
	-353, 13936, 10836, 45987, 45987, -1000, -1000, -1000, -1000, -295,
	44755, 860, 3984, 10836, 2624, 514, -184, -185, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -26, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	158, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 49553, -1000, 1583, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2329, 3143, 1572, 2623, 801, 44139, 45987,
	-1000, 144, 801, -1000, -1000, -1000, 1491, 3525, -1000, 45987,
	45987, 232, 1956, -1000, 479, 426, 503, 350, 1563, -1000,
	-1000, -1000, -1000, -1000, -1000, 715, 3484, -1000, 45987, 45987,
	3152, 45987, -1000, 2252, 763, -1000, 49752, 3297, 1437, 956,
	3163, -1000, -1000, 3142, -1000, 366, 739, 342, 516, 440,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 364, -1000, 3392,
	-1000, -1000, 345, -1000, -1000, 337, -1000, -1000, -1000, 156,
	-1000, -1000, -1000, -1000, -1000, -1000, 65, -1000, -1000, 1131,
	2006, 10836, 1944, -1000, 3833, 1596, -1000, -1000, -1000, 6503,
	12690, 12690, 12690, 12690, 45987, -1000, -1000, 2985, 10836, 3140,
	3139, 3138, 3131, -1000, -1000, -1000, -1000, -1000, -1000, 3130,
	1547, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2059, -1000, -1000, -1000, 13308, -1000, 3129, 3127, 3126, 3125,
	3123, 3121, 3120, 3118, 3117, 3116, 3114, 3113, 3110, 3109,
	2825, 14552, 3105, 2613, 2609, 3103, 3102, 3101, 2603, 3099,
	3086, 3076, 2825, 2825, 3069, 3064, 3060, 3056, 3055, 3054,
	3050, 3049, 3045, 3044, 3031, 3029, 3028, 3027, 3025, 3017,
	3014, 3013, 3010, 3008, 3006, 3005, 3003, 3001, 3000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1454, -1000, 2999, 3494, 2897, -1000, 3391, 3365,
	3363, 3361, -252, 2998, 2238, -1000, -1000, 123, 3482, 45987,
	-273, 45987, 2597, -46, 2595, -47, -1000, -36, -1000, -1000,
	1078, -1000, 1049, -1000, 858, 858, 858, 45987, 45987, 271,
	904, 858, 858, 858, 858, 858, 885, 858, 3410, 911,
	910, 909, 901, 858, 20, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1954, 1952, 3219, 1026, -1000, -1000, -1000, -1000,
	1426, 45987, -1000, 2937, 2590, 1867, 1867, 3468, 3468, 3405,
	781, 771, 770, 1867, 593, -1000, 1882, 1882, 1882, 1882,
	1867, 541, 766, 3414, 3414, 127, 1882, 121, 1867, 1867,
	121, 1867, 1867, -1000, 1861, 286, -259, -1000, -1000, -1000,
	-1000, 1882, 1882, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3380, 3377, 860, 860, 45987, 860, 269, 45987, 860, 860,
	860, 864, 98, 47219, 46603, 2252, 761, 751, 1438, 1957,
	-1000, 1832, 45987, 45987, 1832, 1832, 23195, 22579, -1000, 45987,
	-1000, 3494, 2897, 2817, 1660, 2815, 2897, -53, 2589, 860,
	860, 860, 860, 860, 330, 860, 860, 860, 860, 860,
	45987, 45987, 43523, 860, 860, 860, 860, 8975, 8975, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13936, 2142,
	2097, 213, 1, -286, 292, -1000, -1000, 45987, 3269, 321,
	-1000, -1000, -1000, 2902, -1000, 2929, 2929, 2929, 2929, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2929,
	2929, 2936, 2997, -1000, -1000, 2912, 2912, 2912, 2902, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2930, 2930, 2931, 2931, 2930, 45987,
	-88, -1000, -1000, 10836, 45987, 3284, 450, 2996, 801, -1000,
	-1000, 45987, 188, 451, 3494, 3276, 3414, 3459, -1000, -1000,
	1532, 2228, 2581, -1000, 350, -1000, 445, 350, 1765, -1000,
	1124, -1000, -1000, -1000, -1000, -1000, 45987, 65, 421, -1000,
	-1000, 2537, 2992, -1000, 652, 1367, 1383, -1000, 338, 49143,
	36747, 2252, 36747, 45987, -1000, -1000, -1000, -1000, -1000, -1000,
	146, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 323, -1000, 10836, 10836, 10836,
	10836, 10836, -1000, 976, 12072, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 12690, 12690, 12690, 12690, 12690, 12690, 12690, 12690,
	12690, 12690, 12690, 12690, 2983, 1879, 12690, 12690, 12690, 12690,
	25043, 1660, 3106, 1434, 308, 1596, 1596, 1596, 1596, 10836,
	-1000, 1967, 2006, 10836, 10836, 10836, 10836, 31203, 45987, -1000,
	-1000, 3952, 10836, 10836, 4146, 10836, 3354, 10836, 10836, 10836,
	2809, 5266, 45987, 10836, -1000, 2800, 2797, -1000, -1000, 2075,
	10836, -1000, -1000, 10836, -1000, -1000, 10836, 12690, 10836, -1000,
	10836, 10836, 10836, -1000, -1000, 2952, 3354, 3354, 3354, 1910,
	10836, 10836, 3354, 3354, 3354, 1875, 3354, 3354, 3354, 3354,
	3354, 3354, 3354, 3354, 3354, 3354, 2796, 2793, 2790, 10218,
	3414, -208, -1000, 8357, 3276, 3414, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -254, 2991, 45987, 2577,
	2568, -315, 184, 519, 45987, 1152, 452, 2226, -57, 2225,
	83, 1096, 1065, 1058, -1000, 2567, 1979, 45987, 45987, 3335,
	-1000, 2990, 45987, 858, 858, 858, -1000, 41675, 36747, 45987,
	45987, 2252, 45987, 45987, 45987, 858, 858, 858, 858, 45987,
	-1000, 3229, 36747, 3223, 864, -1000, 45987, 1426, 3334, 45987,
	452, 3468, 12690, 12690, -1000, -1000, 10836, -1000, 42907, 1882,
	1867, 1867, -1000, -1000, 45987, -1000, -1000, -1000, 1882, 45987,
	1882, 1882, 3468, 1882, -1000, -1000, -1000, 1867, 1867, -1000,
	-1000, 10836, -1000, -1000, 1882, 1882, -1000, -1000, 3468, 45987,
	142, 3468, 3468, 139, -1000, -1000, -1000, 1867, 45987, 45987,
	858, 45987, -1000, 45987, 45987, -1000, -1000, 45987, 45987, 49050,
	45987, 41675, 42291, 3372, -1000, 36747, 45987, 45987, 34283, -1000,
	1372, -1000, 93, -1000, 78, 98, 1832, 98, 1832, -1000,
	650, 647, 21347, 602, 36747, 5884, -1000, -1000, 1832, 1832,
	5884, 5884, 1599, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1424, -1000, 361, 3414, -1000, -1000, -1000, -1000, -1000, 2221,
	452, 45987, 41675, 36747, 2252, 45987, 860, 45987, 45987, 45987,
	45987, 45987, -1000, 2988, 1527, -1000, 3296, 45987, 45987, 45987,
	45987, 1317, -1000, -1000, 18258, 1525, 1317, -1000, 1976, -1000,
	10836, 13936, -237, 10836, 13936, 13936, 10836, 13936, -1000, 10836,
	310, -1000, -1000, -1000, -1000, 2214, -1000, 2213, -1000, -1000,
	-1000, -1000, -1000, 2565, 2565, -1000, 2212, -1000, -1000, -1000,
	-1000, 2211, -1000, -1000, 2210, -1000, -1000, -1000, -1000, -141,
	2789, 1131, -1000, 2560, 3162, -211, -1000, 19496, 45987, 45987,
	450, -325, 1934, 1931, 1924, -1000, -211, -1000, 18877, 45987,
	3414, -1000, -216, 3276, 10836, 45987, -1000, 3403, -1000, -1000,
	350, -1000, 484, 442, -1000, -1000, -1000, -1000, -1000, -1000,
	1521, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 437, -28, -37, 1415, -1000, 45987, -1000, -1000, 338,
	36747, 38595, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 281,
	-1000, -1000, 197, -1000, 882, 288, 1748, -1000, -1000, 273,
	224, 242, 952, 2006, -1000, 1992, 1992, 1996, -1000, 765,
	-1000, -1000, -1000, -1000, 2985, -1000, -1000, -1000, 2498, 2905,
	-1000, 1743, 1743, 1618, 1618, 1618, 1618, 1618, 1807, 1807,
	-1000, -1000, -1000, 6503, 2983, 12690, 12690, 12690, 12690, 926,
	926, 1888, 2649, -1000, -1000, -1000, -1000, 10836, 198, 1972,
	-1000, 10836, 2455, 1350, 2381, 1573, 1739, -1000, 2902, 10836,
	1518, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2781, 2779, 2280, 3481, 2775, 10836, -1000, -1000, 1712,
	1711, 1710, -1000, 2205, 9600, -1000, -1000, -1000, 2774, 1516,
	2769, -1000, -1000, -1000, 2768, 1709, 1209, 2764, 2415, 2763,
	2762, 2760, 2757, 1414, 10836, 10836, 10836, 10836, 2755, 1698,
	1697, 10836, 10836, 10836, 10836, 2753, 10836, 10836, 10836, 10836,
	10836, 10836, 10836, 10836, 10836, 10836, 180, 180, 180, 1407,
	1380, -1000, -1000, 1689, -1000, 2006, -1000, -1000, 3276, -1000,
	2975, 2209, 1374, -1000, -1000, -292, 2456, 45987, 45987, 183,
	45987, 2543, -274, 45987, -1000, -1000, 2542, -1000, 2532, -1000,
	-1000, -1000, 1094, 1047, 1046, 2530, 3291, 3402, 873, 45987,
	1249, 2972, 45987, 45987, 45987, 304, -1000, -1000, 1279, -1000,
	288, 48, 524, 1156, 3151, 3480, -90, 45987, 45987, 45987,
	45987, 3331, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	41059, -1000, 2958, 1684, -1000, -1000, -1000, 1596, 1596, 2006,
	3147, 45987, 45987, 3468, 3468, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1882, 3468, 3468, 1462, 1867, 1882, -1000, -1000,
	1882, -325, -1000, 1882, -1000, -325, 1502, -325, 45987, -1000,
	-1000, -1000, 3328, 2937, 1373, -1000, -1000, -1000, 3458, 1550,
	829, 829, 1057, 789, 3456, 17026, -1000, 1700, 1252, 879,
	3245, 357, -1000, 1700, -138, 812, 1700, 1700, 1700, 1700,
	1700, 1700, 1700, 686, 679, 1700, 1700, 1700, 1700, 1700,
	1700, 1700, 1700, 1700, 1700, 1700, 1103, 1700, 1700, 1700,
	1700, 1700, -1000, 1700, 2957, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 733, 629, 301, 3369, 391, -1000, 386, 1279,
	3353, 435, 3447, 1245, -1000, -1000, -1000, -1000, 25659, 25659,
	20731, 25659, -1000, 204, 98, 68, -1000, -1000, 1372, 5884,
	1372, 5884, -1000, -1000, 878, -1000, -1000, 1156, -1000, 45987,
	45987, -1000, -1000, 2956, 1923, -1000, -1000, 14552, -1000, 5884,
	5884, -1000, -1000, 27507, 45987, -1000, 63, -1000, 81, 3276,
	-1000, -1000, 1143, -1000, -1000, 1369, 1156, 3159, 45987, 1143,
	1143, 1143, -1000, -1000, 15794, 45987, 45987, -1000, -1000, -1000,
	-1000, 3468, 8975, -1000, 34283, -1000, -1000, 40443, -1000, 39827,
	3468, 1962, -1000, 13936, 2079, 215, -1000, 287, -300, 202,
	2002, 199, 2006, -1000, -1000, 2752, 2747, 1681, -1000, 1673,
	2739, 1669, 1665, 2206, -1000, 115, -1000, 3260, 1176, -1000,
	2955, -1000, 1657, 3215, -1000, 1359, -1000, 1918, 1653, -1000,
	-1000, -1000, 10836, 39211, 10836, 1176, 1651, 3214, 1359, 3276,
	2526, -1000, 1356, -1000, 2102, 1496, 231, -1000, -1000, -1000,
	45987, 860, 2537, 1650, 38595, 1255, -1000, 877, 1493, 1492,
	-1000, 36747, 347, 36747, -1000, 36747, -1000, -1000, 412, -1000,
	45987, 3275, -1000, -1000, -1000, 2456, 1917, -322, 45987, -1000,
	-1000, -1000, -1000, -1000, 1648, -1000, 926, 926, 1888, 1772,
	-1000, 12690, -1000, 12690, 3066, -1000, 1751, -1000, 10836, 2042,
	49456, 10836, 49456, 1244, 24427, 31203, -71, 3274, 3062, 45987,
	-1000, -1000, 10836, 10836, -1000, 2993, -1000, -1000, -1000, -1000,
	10836, 10836, 2217, -1000, 45987, -1000, -1000, -1000, -1000, 24427,
	-1000, 12690, -1000, -1000, -1000, -1000, 10836, 1329, 1329, 2951,
	1643, 180, 180, 180, 2913, 2880, 2836, 1614, 180, 2822,
	2803, 2783, 2778, 2716, 2626, 2606, 2593, 2550, 2539, -1000,
	2949, -1000, -1000, 2119, 11454, 8357, -1000, -1000, 322, 1326,
	2203, 2525, 138, -1000, 1915, -1000, 2522, 45987, 45987, 1125,
	-1000, 45987, 3474, -1000, 2516, -1000, -1000, -1000, 1031, 2515,
	-1000, 439, 2099, 208, 332, 2738, 1325, -1000, -1000, 45987,
	-1000, -1000, -1000, 15794, 2937, 2948, 2937, 189, 1700, 659,
	36747, 731, -1000, 45987, 2100, 1897, 3158, 760, 3261, 45987,
	2947, 438, 2946, 2945, 3326, 496, 48931, 45987, 1262, -1000,
	1473, 4007, -1000, 45987, -1000, 2252, -1000, 1867, -1000, -1000,
	3468, -1000, -1000, 10836, 10836, 3468, 1867, 1867, -1000, 1882,
	-1000, 45987, -1000, -325, 496, 48931, 3306, 49180, 606, 2819,
	-1000, 45987, -1000, -1000, -1000, 887, -1000, 1007, 858, 45987,
	2027, 1007, 2023, 2939, -1000, -1000, 45987, 45987, 45987, 45987,
	-1000, -1000, 45987, -1000, 45987, 45987, 45987, 45987, 45987, 37979,
	-1000, 45987, 45987, -1000, 45987, 2021, 45987, 2020, 3342, -1000,
	1700, 1700, 995, -1000, -1000, 639, -1000, 37979, 2200, 2196,
	2194, 2189, 2512, 2500, 2497, 1700, 1700, 2188, 2496, 37363,
	2495, 1162, 2187, 2181, 2180, 2164, 2488, 959, -1000, 2487,
	2161, 2137, 2136, 45987, 2938, 2388, -1000, -1000, 2099, 189,
	1700, 388, 45987, 1896, 1895, 659, 510, 28, 21963, 45987,
	34283, 34283, 34283, 34283, -1000, 3184, 3183, 3179, -1000, 3177,
	3176, 3186, 45987, 34283, 2937, -1000, 37363, -1000, -1000, -1000,
	1660, 1609, 3093, 1010, 10836, -1000, -1000, 91, 72, -1000,
	-1000, -1000, 36747, 2484, 602, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3401, 45987, 45987, 834, 2735, 1315, -1000, -1000,
	-1000, 48931, 2929, 2929, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2929, 2929, 2936, -1000, -1000, 2912, 2912,
	2912, 2902, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2930, 2930, 2931, 2931, 2930, -1000, -1000, 3466,
	-1000, 1314, -1000, -1000, 1468, -1000, 3466, 1984, -305, 13936,
	1964, 1741, -1000, 10836, 13936, 10836, -238, 370, -243, -1000,
	-1000, -1000, 2481, -1000, -1000, -1000, 2179, -1000, 2177, -1000,
	200, 222, 2018, -211, 8357, 419, 45987, -211, 45987, 8357,
	-1000, 45987, 191, -343, -351, 167, 404, -211, 3401, 115,
	10836, 3248, -1000, -1000, 45987, 2176, -1000, -1000, -1000, 3472,
	36747, 2252, 1636, 36131, -1000, 344, -1000, 274, 627, 2461,
	-1000, 900, 136, 2459, 2456, -1000, -1000, -1000, -1000, 12690,
	1596, -1000, -1000, -1000, 2006, 10836, 2726, -1000, 1017, 1017,
	2130, 2715, 2701, -1000, 2929, 2929, -1000, 2902, 2912, 2902,
	1017, 1017, 2700, -1000, 2896, -1000, 3274, -1000, 2261, 2427,
	-1000, 2418, 2396, 10836, -1000, 2699, 4054, 1237, 16, -173,
	180, 180, -1000, -1000, -1000, -1000, 180, 180, 180, 180,
	-1000, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 804, -84, -263, -85, -265, -1000, 2696, 1313, -1000,
	-1000, -1000, -1000, -1000, 4146, 1298, 537, 537, 2456, 2454,
	-1000, 875, 2446, 1093, 45987, 2445, -277, -1000, -1000, 2444,
	-1000, -1000, 45987, 2439, -1000, 614, 45987, 45987, 2438, 2435,
	1249, 48931, 2694, 3305, 16410, 3302, 2249, -1000, -1000, -1000,
	26891, 619, -1000, -1000, -1000, 752, 346, 2174, 603, -1000,
	45987, 527, 3235, 1890, 2434, 45987, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3261, -1000, 981, 474, 33051, 4540, -1000,
	444, 45987, -1000, 16410, 16410, 444, 477, 1826, -1000, 801,
	1210, 141, 34283, 45987, -1000, 33667, 2691, -1000, 1156, 3468,
	-1000, 2006, 2006, -325, 3468, 3468, 1867, -1000, -1000, 477,
	-1000, 444, -1000, 1095, 17642, 571, 523, 508, -1000, 660,
	-1000, -1000, 795, 3244, 48931, -1000, 45987, -1000, 45987, -1000,
	45987, 45987, 858, 10836, 3244, 45987, 874, -1000, -1000, 1159,
	462, 454, 796, 796, 1281, -1000, 3274, -1000, -1000, 1267,
	-1000, -1000, -1000, -1000, 45987, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 24427, 24427, 3349, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2430, 2429,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 45987,
	1607, -1000, 1880, 2426, 2249, 26891, 1870, 1832, 2425, 2424,
	619, 2100, 1862, 891, 45987, -1000, 1145, 45987, 45987, -1000,
	1280, -1000, 1835, 3150, 3157, 3150, -1000, -1000, -1000, -1000,
	-1000, 3178, -1000, 2851, -1000, -1000, 1280, -1000, -1000, -1000,
	-1000, -1000, 1010, -1000, 3397, 1007, 1007, 1007, 2690, -1000,
	-1000, -1000, 1255, 2684, -1000, -1000, -1000, 3489, -1000, -1000,
	-1000, -1000, -1000, -1000, 15794, 3257, 3464, 3446, 35515, 3464,
	-1000, -305, 1687, -1000, 2031, 194, 1987, 45987, -1000, -1000,
	-1000, 2683, 2680, -218, 223, 3443, 3442, 1070, -1000, 2678,
	1239, -211, -1000, -1000, 1176, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -211, -1000, 1176, -1000, 200, -1000, -1000, 3259,
	-1000, -1000, 2252, -1000, 270, -1000, -1000, -1000, -1000, -1000,
	-1000, 256, -1000, 45987, -1000, 1199, 134, -1000, 2006, -1000,
	-1000, -1000, -1000, -1000, 49456, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2423, -1000, -1000, 10836, -1000,
	-1000, -1000, 2372, -1000, -1000, 10836, 2677, 2414, 2676, 2409,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3494, -1000, 3441, 1605,
	2675, 2673, 1567, 2670, 2667, -1000, 10836, 2665, 4146, 998,
	2407, 998, -1000, -1000, 434, 26275, 45987, 3470, -1000, 45987,
	2399, -1000, -1000, 2099, 611, 673, -1000, -1000, -1000, -1000,
	928, 444, 2661, 1184, -1000, -1000, -1000, -1000, 444, -1000,
	2398, 279, -1000, -1000, -1000, -1000, 2393, 2389, 2173, -1000,
	-1000, 2132, 1515, 289, -1000, -1000, -1000, -1000, -1000, -1000,
	2108, 45987, 34899, 2246, 1819, -326, -1000, 2892, -1000, 1700,
	1700, 1700, 45987, 1555, -1000, 1700, 1700, 2658, -1000, -1000,
	2652, 2647, -93, 790, 1738, 1737, -1000, 2172, 25659, 34283,
	33667, 1263, -1000, 1467, -1000, -1000, -1000, -1000, -1000, -1000,
	3468, 790, -1000, 553, 2165, 12690, 2876, 12690, 2874, 586,
	2870, 1554, -1000, 45987, -1000, -1000, 45987, 3695, 2869, -1000,
	2868, 3108, 521, 2861, 2860, 45987, 2330, -1000, 3244, 45987,
	759, 3255, -1000, -1000, -1000, 416, -1000, -1000, 632, -1000,
	45987, -1000, 45987, -1000, 1594, -1000, 24427, -1000, -1000, 1514,
	-1000, 2388, 2387, -1000, -1000, 279, 2385, 5884, -1000, -1000,
	-1000, 3235, 2384, 2108, 45987, -1000, 45987, 1145, 1145, 3494,
	45987, 8357, -1000, -1000, 10836, 2858, -1000, 10836, -1000, -1000,
	-1000, -1000, -1000, 2854, 3258, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1773, -1000, 10836, 10836, -1000, -1000, 837, 13936,
	-244, 353, -1000, -1000, -1000, -220, 2383, -1000, -1000, 3440,
	2379, 2290, 45987, -1000, -1000, 1176, 1176, -218, -1000, -1000,
	1156, -1000, -1000, 1083, 674, -1000, 2646, 294, -1000, 2317,
	-1000, 2270, 180, -1000, 180, -1000, 284, 10836, -1000, 2378,
	-1000, -1000, -1000, 2374, -1000, -1000, 2222, -1000, 2641, -1000,
	2373, -1000, -1000, 45987, -1000, 871, 1073, 2371, -334, 2362,
	2099, 2099, 45987, 48931, -112, -93, 16410, -112, -1000, -1000,
	403, -1000, -1000, 396, -1000, -1000, 2126, 664, -1000, -1000,
	2361, 598, -1000, 1145, -1000, 1811, 2052, 2320, 31203, 24427,
	25043, 2360, -1000, -1000, 33051, 1773, 1773, 49773, 323, 49942,
	-1000, 2849, 1110, 1705, -1000, 2163, -1000, 2158, -1000, 3468,
	1263, 140, -1000, -1000, 1634, -1000, 1110, 2819, 3439, -1000,
	3988, 45987, 2977, 45987, 2847, 1799, 12690, -1000, 795, 3213,
	-1000, -1000, 3695, -1000, -1000, 2043, 12690, -1000, -1000, 2358,
	25043, 975, 1798, 1745, 992, 2845, -1000, 634, 3488, -1000,
	-1000, -1000, 986, 2844, -1000, 2012, 2001, -1000, 45987, -1000,
	31203, 31203, 823, 823, 31203, 31203, 2843, 796, -1000, -1000,
	12690, -1000, -1000, 1700, -1000, -1000, -1000, 1700, 1577, -1000,
	-1000, -1000, -1000, -1000, -1000, 2246, -1000, -1000, 1143, -1000,
	3414, -1000, -1000, 2006, 45987, 2006, 32435, -1000, 3436, 3435,
	-1000, 2006, 1131, -1000, -305, 45987, 45987, -222, 2151, -1000,
	2357, 206, -1000, -1000, 1138, -220, -226, 139, 24427, 1740,
	-1000, 2640, 401, -128, -1000, -1000, -1000, -1000, 2639, -1000,
	902, -1000, -1000, -1000, 1131, 2638, 2630, -1000, -1000, -1000,
	-1000, 425, 45987, -1000, 2313, -1000, 2356, 2351, 610, -75,
	-1000, -1000, 485, -1000, -1000, -1000, 625, 2254, -1000, -1000,
	395, -1000, -1000, -1000, 2108, 2349, -1000, -1000, 128, -1000,
	1725, 1508, -1000, -1000, -1000, -1000, -1000, -1000, 793, -1000,
	444, 49676, -1000, 1252, -1000, 1083, 793, 29971, 638, 313,
	-1000, 2139, -1000, -1000, 3494, -1000, 637, -1000, 573, -1000,
	1486, -1000, 1458, 31819, 2129, 2862, -1000, 49904, 918, -1000,
	-1000, 1888, -1000, -1000, -1000, -1000, -1000, -1000, 2343, 2337,
	-1000, -1000, -1000, -1000, -1000, 2124, 2839, 44, 3343, 2336,
	-1000, -1000, 2838, 1450, 1443, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1431, 1405, 31203, -1000, -1000, 1888,
	2120, 24427, 1700, -1000, -1000, 1400, 1384, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2835, -1000, -1000, 3434, -222, -230,
	2328, 190, 216, -1000, 2323, -1000, -79, 3205, -134, -1000,
	-1000, 924, -212, 176, 172, 143, -1000, -1000, -1000, 10836,
	-1000, -1000, 45987, 870, 119, -1000, 1702, -1000, -1000, 2099,
	45987, 604, -1000, -1000, -1000, -1000, 251, -1000, -1000, -1000,
	-1000, -1000, -1000, 2320, 2318, -1000, 520, 3431, -1000, 49942,
	-1000, 1700, -1000, 520, 1376, -1000, 1700, 1700, -1000, 490,
	-1000, 1686, -1000, 2098, -1000, 3414, -1000, 482, -1000, 546,
	-1000, -1000, -1000, 1366, -1000, -1000, -1000, 49904, 555, -1000,
	785, 2828, -1000, -1000, 2544, 10836, 2825, 1700, 2322, -68,
	31203, 3068, 2995, 2915, 2864, 1357, -1000, -1000, 24427, -1000,
	-1000, 30587, 45987, 2290, -1000, -1000, 2314, -1000, 863, 203,
	216, -1000, 3430, 192, 3427, 3424, 1130, 3200, -1000, -1000,
	1989, -1000, 174, 170, 168, -1000, -1000, -1000, -1000, -1000,
	415, -1000, 2313, 2310, 2300, 597, -1000, 343, -1000, -1000,
	-1000, 351, -1000, 3423, 606, -1000, 24427, -1000, -1000, 29971,
	1773, 1773, -1000, -1000, 2089, -1000, -1000, -1000, -1000, 2084,
	-1000, -1000, -1000, 1348, -1000, 45987, 977, 7739, -1000, 2155,
	-1000, 45987, -1000, 3155, -1000, 306, 1334, 351, 823, 351,
	823, 351, 823, 351, 823, 329, -1000, -1000, -1000, 1322,
	-1000, -1000, -1000, 2824, 2069, 223, 217, 3420, -1000, 2290,
	3419, 2290, 2290, -1000, 181, -117, 924, -1000, -1000, -1000,
	45987, -1000, -1000, -1000, 2298, -1000, -1000, -1000, -1000, 1700,
	1700, 2297, 2296, 468, -1000, -1000, 29355, 571, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 555, 49942, -1000, 7739, 1319,
	-1000, 2006, -1000, 796, -1000, -1000, 3154, 3065, 3478, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 45987,
	3341, 23811, 196, -1000, -1000, -1000, 2291, -1000, 2290, -1000,
	-1000, 1659, -130, -1000, -1000, -261, 2065, 2051, -1000, -1000,
	45987, -1000, 45987, 553, -1000, 49942, 1254, -1000, 7739, -1000,
	-1000, 3487, -1000, 3479, 936, 936, 351, 351, 351, 351,
	-1000, -1000, 45987, -1000, 1228, -1000, -1000, -1000, 1456, -1000,
	-1000, -1000, -1000, 2288, -135, -1000, -1000, 2281, -1000, -1000,
	-1000, 1196, 2819, -1000, -1000, -1000, -1000, -1000, 2122, 649,
	-1000, 1118, -1000, 1658, -1000, 28739, 45987, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 45987, 7121, -1000, 1126, -1000,
	-1000, 2006, 45987, -1000,
}

var yyPgo = [...]int{
	0, 173, 3508, 260, 187, 4107, 82, 257, 239, 232,
	256, 4105, 4104, 4103, 4102, 3268, 3262, 4101, 4100, 4099,
	4098, 4097, 4096, 4094, 4093, 4092, 4091, 4088, 4086, 4082,
	4080, 4079, 4076, 4075, 4074, 4071, 4069, 4067, 4062, 4061,
	4060, 4059, 4058, 4057, 4056, 4055, 4053, 255, 4052, 4051,
	4050, 4048, 4047, 4044, 4043, 4042, 4041, 4040, 4039, 4037,
	4036, 4035, 4034, 4033, 4032, 4031, 4028, 4027, 4025, 4024,
	4019, 4018, 4017, 4015, 4014, 4011, 4007, 4006, 4004, 254,
	4003, 4002, 230, 4001, 3258, 3996, 3995, 3990, 3989, 3988,
	3987, 3986, 225, 3985, 3984, 3983, 3965, 3964, 3962, 3961,
	3960, 3959, 3956, 3955, 248, 3954, 3953, 3952, 3945, 233,
	3943, 217, 3941, 179, 147, 3939, 3938, 3937, 3921, 3913,
	3909, 3908, 3905, 3903, 3901, 3900, 3899, 3898, 241, 197,
	77, 3897, 47, 3896, 3895, 226, 3894, 155, 3890, 152,
	3889, 3888, 3887, 3886, 3885, 3884, 3883, 3882, 3874, 3871,
	3868, 3862, 3861, 3860, 3859, 3858, 3856, 3853, 3852, 3851,
	3850, 3849, 3848, 51, 3846, 271, 3845, 71, 3844, 177,
	3843, 66, 3842, 76, 132, 265, 169, 266, 258, 198,
	181, 97, 3840, 332, 3836, 159, 249, 163, 116, 3835,
	139, 3834, 272, 50, 34, 251, 144, 55, 182, 128,
	3833, 223, 99, 113, 3832, 3829, 149, 3828, 240, 184,
	3827, 109, 3819, 3817, 3815, 3814, 3813, 201, 193, 3812,
	3811, 133, 3809, 3808, 91, 135, 3807, 75, 124, 168,
	118, 3806, 207, 127, 96, 3803, 123, 104, 3802, 74,
	3798, 3795, 3793, 3792, 195, 3789, 3787, 141, 59, 3785,
	3784, 3783, 67, 3780, 79, 3779, 29, 3778, 58, 3777,
	3773, 3772, 3771, 3770, 3769, 3767, 3766, 3765, 3764, 3763,
	3762, 54, 3761, 3759, 3758, 3756, 4, 11, 16, 3751,
	28, 3750, 171, 3748, 3747, 3743, 3742, 3741, 98, 92,
	3740, 93, 166, 3739, 20, 30, 80, 3737, 3735, 227,
	774, 106, 156, 3734, 283, 3732, 3728, 3726, 167, 3725,
	2620, 3723, 3721, 3720, 3715, 3714, 3711, 247, 3707, 1,
	224, 41, 3706, 140, 136, 3705, 40, 31, 3704, 78,
	114, 200, 134, 101, 3703, 3700, 3699, 24, 205, 100,
	37, 0, 102, 231, 161, 3698, 3696, 3695, 263, 3693,
	237, 208, 176, 183, 277, 288, 3689, 3688, 57, 3684,
	162, 39, 52, 137, 320, 21, 243, 3683, 1561, 8,
	194, 3682, 218, 3681, 203, 15, 394, 153, 3679, 3678,
	32, 268, 3677, 3676, 3675, 131, 3674, 3673, 411, 108,
	3670, 3669, 3668, 3667, 48, 3665, 190, 14, 3663, 121,
	3662, 250, 3661, 307, 138, 191, 185, 160, 234, 236,
	84, 83, 3660, 1786, 157, 103, 12, 3659, 229, 3658,
	174, 130, 3657, 87, 3656, 253, 273, 209, 3654, 189,
	9, 43, 38, 26, 44, 10, 323, 204, 3653, 3652,
	22, 49, 3651, 53, 3649, 19, 3648, 3647, 45, 3646,
	64, 7, 3645, 3644, 18, 17, 3642, 36, 219, 172,
	126, 94, 65, 3640, 3639, 148, 142, 3638, 146, 178,
	154, 3637, 81, 3636, 3634, 3632, 3631, 901, 3628, 264,
	3627, 3626, 3625, 3624, 3623, 3622, 3620, 3619, 222, 3618,
	107, 42, 3616, 3615, 3613, 3612, 85, 151, 3608, 3607,
	3605, 3603, 33, 143, 3601, 13, 3600, 25, 23, 35,
	3599, 105, 3595, 5, 192, 3594, 3591, 3, 3590, 3589,
	2, 3588, 3586, 122, 3584, 95, 27, 164, 110, 3580,
	3579, 89, 216, 150, 3578, 3577, 111, 259, 206, 3576,
	72, 246, 267, 3575, 213, 3574, 3572, 3571, 3569, 3567,
	3566, 1197, 3565, 3564, 245, 61, 86, 3562, 228, 120,
	3560, 3559, 90, 165, 125, 117, 56, 88, 3558, 115,
	211, 3557, 202, 3555, 244, 3552, 3551, 112, 3550, 3549,
	3548, 3547, 196, 3546, 3545, 199, 252, 3543, 3541, 282,
	3540, 3539, 3538, 3537, 3535, 3527, 3526, 3514, 3513, 3512,
	242, 326, 3506,
}

//line mysql_sql.y:12463
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 595, 598, 598, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 119,
	119, 332, 332, 333, 333, 121, 328, 328, 327, 327,
	122, 123, 124, 574, 574, 125, 126, 155, 573, 573,
	157, 157, 157, 157, 157, 448, 120, 120, 120, 120,
	120, 120, 120, 161, 161, 161, 161, 161, 118, 580,
	580, 580, 581, 581, 115, 144, 143, 146, 146, 145,
	145, 142, 142, 138, 141, 141, 140, 140, 139, 134,
	136, 136, 135, 137, 137, 116, 104, 117, 522, 522,
	521, 521, 520, 520, 473, 473, 474, 474, 319, 319,
	319, 519, 519, 519, 518, 518, 517, 517, 516, 516,
	514, 514, 515, 513, 512, 512, 512, 510, 510, 510,
	506, 506, 508, 507, 507, 509, 501, 501, 504, 504,
	502, 502, 502, 502, 505, 500, 500, 500, 499, 499,
	103, 103, 103, 415, 415, 102, 102, 429, 429, 429,
	429, 429, 427, 427, 427, 427, 427, 427, 426, 426,
	425, 425, 430, 430, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 93, 93, 93, 93, 93,
	98, 98, 98, 586, 586, 585, 585, 587, 587, 587,
	587, 588, 588, 96, 96, 96, 97, 424, 424, 424,
	94, 95, 95, 414, 414, 419, 419, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	423, 423, 423, 421, 421, 420, 420, 422, 422, 87,
	87, 87, 90, 89, 413, 413, 413, 413, 413, 413,
	413, 413, 413, 88, 88, 88, 88, 88, 88, 83,
	83, 83, 83, 83, 82, 82, 84, 84, 411, 411,
	410, 99, 99, 100, 583, 583, 582, 584, 584, 584,
	584, 101, 107, 107, 107, 107, 107, 107, 107, 107,
	106, 106, 109, 109, 108, 110, 92, 92, 92, 92,
	92, 92, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 547, 547, 547, 549, 549,
	346, 347, 599, 349, 345, 345, 345, 543, 543, 544,
	545, 546, 546, 546, 105, 14, 207, 207, 447, 447,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 13,
	81, 86, 86, 281, 281, 286, 286, 160, 287, 287,
	287, 292, 292, 293, 293, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 266, 266, 266,
	261, 261, 261, 261, 262, 262, 263, 263, 264, 264,
	264, 264, 265, 265, 338, 338, 288, 288, 288, 290,
	290, 289, 285, 283, 283, 283, 283, 283, 283, 283,
	284, 284, 284, 284, 291, 291, 79, 85, 85, 85,
	85, 561, 561, 80, 572, 572, 477, 477, 360, 360,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 482, 483, 356, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 54, 57, 58, 159, 53, 53, 53,
	400, 400, 52, 600, 600, 331, 331, 67, 66, 56,
	68, 69, 70, 71, 72, 73, 51, 65, 65, 65,
	65, 65, 65, 65, 65, 76, 495, 495, 602, 602,
	602, 74, 75, 476, 476, 476, 64, 63, 62, 61,
	60, 60, 50, 50, 49, 49, 55, 150, 59, 151,
	151, 353, 353, 353, 355, 355, 351, 601, 601, 443,
	443, 354, 354, 48, 48, 48, 48, 77, 352, 352,
	330, 350, 350, 350, 12, 12, 10, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 26, 27, 29, 408, 408, 405,
	28, 20, 19, 19, 23, 22, 18, 18, 21, 24,
	25, 25, 9, 9, 9, 9, 15, 15, 16, 180,
	180, 233, 233, 555, 555, 551, 551, 552, 552, 552,
	553, 553, 554, 554, 111, 489, 489, 489, 489, 489,
	489, 8, 8, 202, 202, 488, 488, 488, 488, 488,
	488, 412, 412, 412, 532, 532, 532, 533, 201, 201,
	196, 196, 490, 490, 377, 534, 534, 498, 498, 497,
	497, 496, 496, 199, 199, 200, 200, 183, 183, 129,
	129, 503, 503, 503, 503, 511, 511, 472, 472, 271,
	271, 321, 321, 322, 322, 173, 173, 174, 174, 174,
	174, 174, 174, 589, 589, 590, 591, 592, 592, 593,
	593, 593, 594, 594, 594, 594, 594, 540, 540, 542,
	542, 541, 198, 198, 194, 194, 195, 195, 195, 193,
	193, 192, 191, 191, 190, 188, 188, 188, 189, 189,
	189, 206, 206, 176, 176, 176, 175, 175, 175, 175,
	175, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 177, 177, 548, 548, 548, 478, 478,
	478, 485, 485, 301, 301, 302, 302, 300, 300, 178,
	178, 179, 179, 179, 179, 299, 299, 298, 181, 181,
	187, 186, 186, 182, 182, 182, 182, 309, 309, 308,
	308, 308, 308, 114, 127, 127, 128, 205, 205, 307,
	306, 306, 306, 306, 204, 204, 203, 203, 197, 197,
	185, 185, 185, 185, 305, 184, 303, 579, 579, 578,
	578, 577, 575, 575, 575, 576, 576, 576, 576, 524,
	524, 524, 524, 524, 339, 339, 339, 344, 344, 342,
	342, 342, 342, 342, 348, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 39, 216, 217,
	40, 218, 218, 219, 219, 220, 220, 221, 222, 223,
	223, 223, 223, 38, 208, 208, 209, 209, 210, 210,
	211, 212, 212, 212, 215, 213, 214, 214, 597, 597,
	596, 37, 37, 30, 164, 164, 165, 165, 165, 167,
	167, 267, 267, 267, 166, 166, 168, 168, 168, 556,
	558, 558, 560, 559, 559, 559, 562, 562, 562, 562,
	562, 563, 563, 563, 563, 564, 564, 31, 147, 147,
	171, 171, 152, 567, 567, 567, 566, 566, 568, 568,
	569, 569, 325, 325, 326, 326, 162, 163, 163, 154,
	149, 170, 170, 170, 170, 170, 172, 172, 235, 235,
	148, 153, 156, 158, 557, 565, 565, 565, 409, 409,
	406, 407, 407, 404, 403, 403, 403, 571, 571, 570,
	570, 570, 340, 340, 32, 399, 399, 401, 402, 402,
	402, 393, 393, 393, 393, 36, 397, 397, 398, 398,
	398, 398, 398, 398, 398, 394, 394, 396, 396, 392,
	392, 392, 392, 392, 392, 392, 35, 169, 169, 391,
	391, 388, 388, 386, 386, 387, 387, 385, 385, 385,
	389, 389, 43, 78, 44, 45, 46, 42, 390, 390,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	131, 130, 130, 130, 130, 130, 133, 133, 324, 324,
	323, 323, 132, 268, 268, 41, 246, 246, 464, 464,
	459, 459, 459, 459, 459, 480, 480, 480, 460, 460,
	460, 461, 461, 461, 463, 463, 463, 462, 462, 462,
	462, 462, 479, 479, 481, 481, 481, 431, 431, 432,
	432, 432, 435, 435, 451, 451, 452, 452, 450, 450,
	457, 457, 456, 456, 455, 455, 454, 454, 453, 453,
	453, 453, 446, 446, 445, 445, 433, 433, 433, 433,
	433, 434, 434, 434, 444, 444, 449, 449, 297, 297,
	296, 296, 254, 254, 255, 255, 295, 295, 252, 252,
	253, 253, 253, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 530, 530,
	531, 257, 257, 269, 269, 269, 269, 269, 269, 256,
	256, 258, 258, 234, 234, 232, 232, 224, 224, 224,
	224, 224, 225, 225, 226, 226, 227, 227, 227, 231,
	231, 230, 230, 230, 230, 228, 228, 229, 229, 229,
	229, 229, 229, 417, 417, 527, 527, 528, 528, 523,
	523, 523, 526, 526, 526, 526, 526, 526, 526, 529,
	529, 529, 525, 525, 236, 318, 318, 318, 341, 341,
	341, 341, 343, 317, 317, 317, 251, 251, 250, 250,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 416, 416, 357, 357, 358, 358, 280, 279,
	279, 279, 279, 279, 277, 278, 276, 276, 276, 276,
	276, 273, 273, 272, 272, 272, 274, 274, 274, 274,
	274, 395, 395, 270, 270, 260, 260, 260, 259, 259,
	259, 458, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 275, 315, 315, 315, 316, 316, 316, 316,
	316, 316, 316, 316, 367, 367, 373, 373, 539, 539,
	538, 237, 237, 237, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 247, 247, 247, 440, 440, 440, 440,
	441, 441, 441, 441, 442, 442, 442, 438, 438, 439,
	439, 378, 379, 379, 486, 486, 487, 487, 436, 436,
	437, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 494, 494, 494, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 550, 550, 550, 535, 535, 535, 536, 536,
	536, 536, 536, 536, 536, 536, 536, 536, 536, 536,
	537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
	537, 537, 537, 537, 537, 537, 537, 313, 313, 313,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 380, 380,
	381, 381, 491, 491, 491, 491, 491, 491, 492, 492,
	493, 493, 493, 493, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 365, 310, 310, 310, 382, 374, 374,
	375, 375, 376, 376, 368, 368, 368, 368, 368, 368,
	369, 369, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 370, 370, 372, 372, 384, 384,
	384, 383, 383, 383, 383, 383, 383, 383, 249, 249,
	249, 249, 362, 362, 362, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 239, 239, 239,
	239, 243, 243, 245, 245, 245, 245, 245, 245, 245,
	245, 245, 245, 245, 245, 245, 245, 244, 244, 244,
	244, 244, 242, 242, 242, 242, 242, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 112, 113, 113, 241,
	320, 320, 465, 465, 468, 468, 466, 466, 467, 469,
	469, 469, 470, 470, 470, 471, 471, 471, 475, 475,
	329, 329, 329, 337, 337, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	4, 4, 4, 1, 2, 5, 6, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 11, 13, 5, 7, 9, 8, 6, 4, 0,
	1, 1, 0, 1, 5, 2, 2, 6, 9, 6,
	9, 4, 7, 8, 0, 1, 1, 2, 4, 6,
	1, 2, 4, 0, 2, 10, 11, 2, 0, 2,
	1, 3, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 2, 3, 1, 3, 1, 1, 1, 3,
	1, 1, 1, 1, 0, 3, 3, 0, 3, 3,
	0, 1, 3, 0, 1, 3, 0, 2, 1, 2,
	3, 4, 3, 3, 1, 0, 1, 1, 0, 1,
	8, 5, 7, 0, 3, 8, 5, 1, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 4, 1, 3, 1, 2, 2, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 2, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 2, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 1, 1, 2, 2,
	1, 1, 1, 3, 2, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 4, 4, 1, 3, 3, 1, 2, 2, 2,
	1, 2, 2, 3, 4, 4, 6, 1, 1, 1,
	2, 4, 6, 1, 4, 1, 3, 3, 4, 4,
	4, 4, 3, 3, 2, 4, 4, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 2, 2, 0, 1, 4, 2, 4, 1,
	5, 3, 2, 1, 2, 2, 4, 4, 5, 2,
	1, 3, 4, 4, 1, 2, 9, 7, 1, 3,
	3, 1, 1, 3, 1, 3, 2, 1, 2, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 2, 4, 3, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 4, 7, 2, 3, 3, 4,
	5, 3, 4, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	1, 1, 1, 1, 6, 4, 1, 1, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 10,
	7, 4, 4, 1, 3, 1, 6, 7, 3, 3,
	3, 1, 1, 1, 3, 2, 4, 5, 5, 6,
	5, 5, 3, 2, 2, 1, 3, 4, 3, 7,
	5, 8, 2, 2, 1, 3, 2, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 0, 1, 2, 1,
	3, 2, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 6, 3, 3, 1, 1, 7, 7, 7, 8,
	8, 0, 4, 7, 0, 3, 0, 2, 0, 1,
	1, 1, 1, 4, 2, 2, 3, 3, 4, 5,
	3, 4, 4, 2, 2, 2, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 3, 3, 2, 5, 5,
	0, 2, 7, 0, 1, 0, 1, 5, 5, 3,
	3, 2, 4, 4, 4, 4, 4, 1, 1, 1,
	3, 3, 1, 1, 1, 6, 0, 1, 1, 1,
	1, 5, 5, 0, 1, 1, 3, 3, 3, 4,
	7, 7, 5, 4, 7, 8, 3, 3, 2, 3,
	4, 0, 2, 2, 0, 2, 2, 1, 1, 1,
	1, 0, 1, 5, 5, 6, 4, 3, 1, 3,
	1, 1, 3, 5, 2, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 4, 4, 1, 3, 1,
	4, 6, 6, 4, 4, 4, 4, 4, 3, 6,
	3, 5, 1, 1, 2, 2, 11, 8, 9, 1,
	3, 2, 4, 0, 2, 0, 1, 1, 1, 1,
	0, 1, 0, 1, 4, 2, 1, 5, 4, 4,
	2, 5, 5, 1, 3, 2, 1, 5, 4, 4,
	2, 0, 5, 4, 0, 1, 3, 3, 1, 3,
	1, 3, 1, 3, 4, 0, 1, 0, 1, 1,
	3, 1, 1, 0, 4, 1, 3, 2, 1, 0,
	8, 0, 4, 7, 4, 0, 2, 0, 2, 0,
	2, 0, 4, 1, 3, 1, 1, 6, 4, 5,
	7, 4, 5, 0, 1, 3, 8, 0, 6, 0,
	4, 6, 1, 1, 1, 1, 1, 2, 3, 1,
	3, 6, 0, 3, 0, 1, 2, 4, 4, 0,
	1, 3, 1, 3, 3, 0, 1, 1, 0, 2,
	2, 0, 2, 3, 3, 3, 1, 3, 3, 3,
	3, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 7, 7, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 2, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 3,
	1, 1, 1, 4, 4, 4, 3, 2, 2, 2,
	3, 2, 3, 4, 1, 3, 4, 0, 2, 1,
	1, 2, 2, 2, 0, 1, 2, 4, 1, 3,
	1, 3, 2, 3, 1, 4, 3, 0, 1, 1,
	2, 5, 2, 2, 2, 0, 2, 3, 3, 0,
	1, 3, 1, 3, 0, 1, 2, 1, 1, 0,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 1,
	7, 1, 3, 0, 1, 1, 3, 1, 3, 0,
	1, 1, 1, 14, 1, 3, 0, 1, 1, 3,
	1, 1, 2, 4, 1, 1, 1, 1, 0, 1,
	2, 9, 9, 7, 1, 2, 3, 3, 3, 0,
	4, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 4, 1, 1, 1, 3, 3, 4, 3,
	3, 0, 1, 1, 1, 0, 2, 7, 8, 10,
	2, 2, 8, 0, 3, 3, 0, 3, 0, 3,
	0, 5, 1, 3, 0, 3, 3, 0, 2, 9,
	8, 0, 2, 2, 3, 3, 0, 2, 0, 2,
	4, 4, 4, 4, 1, 0, 2, 2, 1, 3,
	2, 1, 3, 2, 1, 3, 2, 0, 1, 3,
	4, 3, 1, 1, 4, 1, 3, 1, 1, 1,
	1, 0, 1, 1, 1, 11, 0, 2, 3, 3,
	2, 2, 3, 1, 1, 1, 3, 3, 4, 0,
	2, 2, 2, 2, 2, 2, 6, 0, 4, 1,
	1, 0, 3, 0, 1, 1, 2, 4, 4, 4,
	0, 1, 8, 2, 4, 4, 4, 9, 0, 2,
	11, 9, 11, 8, 6, 9, 7, 10, 7, 6,
	2, 2, 9, 4, 5, 3, 0, 4, 1, 3,
	0, 3, 6, 0, 2, 10, 0, 2, 0, 2,
	0, 3, 2, 4, 3, 0, 2, 1, 0, 2,
	3, 0, 2, 3, 0, 2, 1, 0, 3, 2,
	4, 3, 0, 1, 0, 1, 1, 0, 6, 0,
	3, 5, 0, 4, 0, 3, 1, 3, 4, 5,
	0, 3, 1, 3, 2, 3, 1, 2, 0, 4,
	6, 5, 0, 2, 0, 2, 4, 5, 4, 5,
	1, 5, 6, 5, 0, 3, 0, 1, 1, 3,
	3, 3, 0, 4, 1, 3, 3, 3, 0, 1,
	1, 3, 2, 3, 3, 3, 4, 4, 3, 3,
	3, 3, 4, 4, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 5, 4, 1, 3,
	3, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 4, 0, 5, 5,
	5, 5, 0, 1, 1, 3, 1, 1, 1, 1,
	1, 7, 9, 7, 9, 2, 1, 7, 9, 7,
	9, 8, 5, 0, 1, 0, 1, 1, 1, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 3, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 2,
	1, 2, 2, 1, 1, 2, 2, 2, 3, 3,
	2, 2, 1, 5, 6, 4, 1, 1, 1, 5,
	4, 1, 1, 2, 0, 1, 1, 2, 5, 0,
	1, 1, 2, 2, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 2, 2, 2, 0, 4, 7, 3,
	3, 0, 3, 0, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 3, 5,
	2, 2, 2, 2, 4, 1, 1, 2, 5, 6,
	8, 6, 6, 6, 1, 1, 1, 1, 1, 1,
	3, 9, 1, 4, 4, 4, 7, 9, 7, 7,
	7, 9, 7, 7, 0, 2, 0, 1, 1, 2,
	4, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	2, 2, 2, 0, 1, 1, 1, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 5, 0,
	1, 3, 0, 1, 0, 2, 0, 2, 0, 1,
	6, 8, 8, 6, 6, 5, 5, 5, 6, 6,
	6, 6, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 1, 1, 1, 4, 4, 6, 8,
	6, 4, 5, 4, 4, 4, 3, 4, 6, 6,
	7, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 8,
	4, 2, 3, 2, 4, 2, 2, 4, 6, 2,
	2, 4, 6, 4, 2, 4, 4, 4, 0, 1,
	2, 3, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 3, 0, 1,
	1, 3, 1, 3, 3, 3, 3, 3, 2, 1,
	1, 1, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 1, 3, 4, 4, 5, 4, 5, 3,
	4, 5, 6, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 2, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 4, 4, 1, 2, 3, 5, 1,
	1, 3, 0, 1, 0, 3, 0, 3, 3, 0,
	3, 5, 0, 3, 5, 0, 1, 1, 0, 1,
	1, 2, 2, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}

var yyChk = [...]int{
	-1000, -595, -598, -2, -5, 624, -1, -4, -113, -87,
	-7, -14, -115, -116, -8, -111, -9, -10, -12, -91,
	-106, -108, -110, -109, -47, -11, -105, -82, -83, -93,
	-99, -102, -103, -104, -117, -112, -114, -173, -118, -119,
	-120, -161, -123, -125, -126, 614, -88, -89, -90, -33,
	-32, -31, -30, -147, -152, -155, -157, -121, 547, 620,
	450, 14, 499, -15, -16, -540, -17, 261, -345, -346,
	-347, -349, -599, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -150,
	-151, -77, -57, -78, -58, -159, -122, -80, -79, -85,
	-81, -86, -149, -154, -13, -160, 236, -84, 76, -94,
	-95, -96, -97, -98, -100, -101, 374, 380, 437, 613,
	61, -174, -176, 633, 634, 637, 534, 537, 160, 161,
	163, 164, -34, -35, -36, -37, -38, -39, -41, -40,
	-42, -43, -44, -45, -46, 232, 16, 542, -18, -21,
	-19, -22, -20, -28, -29, -27, -24, -26, -148, -25,
	-153, -23, -156, -158, -124, 256, 255, 38, 322, 323,
	324, 378, 254, 233, 15, 31, 42, 353, -175, 83,
	535, 234, -177, 13, 639, -6, -3, -2, -134, -138,
	-142, -145, -146, -143, -144, -4, -113, 118, 246, 615,
	-341, 370, 616, 618, 617, 86, 94, -334, -336, 450,
	261, 374, 380, 613, 634, 637, 534, 537, 549, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 561,
	562, 563, 564, 574, 575, 565, 566, 567, 568, 569,
	570, 571, 572, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 502, 599, 600,
	601, 602, 530, 557, 593, 594, 595, 596, 351, 352,
	539, 273, 297, 405, 303, 310, 160, 179, 173, 202,
	193, 535, 168, 277, 315, 278, 93, 163, 485, 108,
	462, 434, 166, 292, 294, 296, 531, 532, 364, 299,
	529, 298, 300, 302, 533, 279, 354, 189, 184, 291,
	275, 182, 280, 40, 281, 207, 282, 283, 544, 458,
	350, 464, 307, 52, 432, 183, 459, 295, 461, 211,
	215, 476, 477, 177, 178, 466, 479, 206, 209, 210,
	253, 347, 348, 43, 541, 265, 480, 213, 205, 200,
	488, 311, 309, 204, 176, 199, 276, 65, 217, 216,
	218, 428, 429, 430, 431, 284, 285, 368, 475, 196,
	185, 355, 169, 23, 483, 260, 463, 381, 286, 304,
	312, 212, 214, 267, 272, 543, 436, 271, 308, 481,
	181, 264, 293, 259, 484, 170, 383, 287, 164, 301,
	478, 487, 64, 396, 175, 167, 631, 250, 161, 269,
	274, 288, 289, 290, 528, 314, 313, 305, 536, 197,
	266, 203, 187, 174, 198, 162, 268, 486, 397, 611,
	353, 415, 195, 192, 270, 243, 482, 465, 165, 419,
	398, 190, 316, 606, 607, 608, 369, 346, 317, 318,
	188, 257, 456, 457, 321, 425, 337, 399, 435, 406,
	400, 224, 225, 325, 468, 470, 208, 609, 326, 327,
	328, 460, 329, 330, 331, 332, 373, 56, 58, 95,
	98, 97, 635, 636, 63, 29, 359, 362, 394, 401,
	339, 612, 540, 336, 340, 341, 363, 25, 417, 385,
	421, 420, 48, 49, 50, 53, 54, 55, 57, 59,
	60, 51, 527, 378, 391, 489, 45, 47, 388, 27,
	365, 416, 438, 335, 418, 449, 46, 447, 448, 469,
	26, 367, 366, 62, 44, 424, 426, 427, 319, 333,
	376, 621, 490, 371, 387, 390, 372, 338, 361, 392,
	67, 66, 384, 622, 379, 377, 334, 545, 546, 342,
	573, 356, 433, 524, 523, 522, 521, 520, 519, 518,
	517, 322, 323, 324, 402, 403, 404, 414, 407, 408,
	409, 410, 411, 412, 413, 452, 453, 623, 471, 473,
	474, 472, 238, 638, 357, 358, 241, 625, 626, 96,
	627, 629, 628, 28, 630, -422, -420, -341, 535, 613,
	380, 534, 537, 374, 353, 634, 637, 378, 261, 322,
	323, 324, 450, 351, -218, -341, 638, -183, 245, 39,
	-232, -341, -183, -84, -16, -15, -175, -176, -232, 240,
	-350, 24, 432, -92, 433, 236, 83, 77, -341, -9,
	-104, -8, -111, -82, -173, 437, -348, -341, 322, 322,
	-348, 240, -343, 271, 413, -341, -477, 246, -426, -399,
	272, -425, -401, -428, -402, 32, 232, 234, 233, 547,
	268, 16, 378, 242, 14, 13, 379, 254, 25, 26,
	28, 15, 380, 382, 29, 383, 386, 387, 388, 42,
	391, 392, 261, 86, 94, 89, 279, -217, -341, -376,
	-368, 115, -371, -363, -364, -366, -319, -514, -361, 83,
	142, 143, 150, 116, 640, -365, -458, 36, 118, 553,
	557, 593, 500, -311, -312, -313, -314, -315, -316, 538,
	-341, -515, -513, 89, 99, 101, 105, 106, 104, 102,
	154, 186, 103, 90, 155, -176, 86, -535, 563, -335,
	586, 599, 600, 601, 602, 585, 61, -484, -493, 239,
	-491, 153, 191, 257, 187, 14, 148, 425, 188, 594,
	595, 596, 560, 582, 502, 564, 574, 589, 555, 556,
	558, 550, 551, 552, 554, 565, 567, 581, -494, 577,
	587, 588, 573, 597, 598, 590, 591, 592, 629, 88,
	87, 580, 579, 566, 561, 562, 568, 549, 559, 569,
	570, 578, 583, 584, 362, 108, 363, 364, 492, 354,
	365, 246, 432, 70, 366, 367, 368, 369, 370, 499,
	371, 71, 372, 361, 261, 415, 373, 190, 208, 504,
	503, 505, 496, 493, 491, 494, 495, 497, 498, 571,
	572, 576, -127, -128, 604, -589, -304, -590, 6, 7,
	8, 9, -591, 155, -580, 434, 543, 89, 315, 351,
	17, 492, 632, 533, 632, 533, 165, 162, -413, 165,
	114, 170, 169, -413, 632, 167, 631, 325, 267, -390,
	-164, 351, 415, 329, 95, 271, -393, -391, 531, -479,
	319, 315, 291, 241, 111, -165, 251, 250, 109, 492,
	239, 389, 310, 56, 58, -551, -552, 229, 230, 231,
	-542, 525, -541, -341, 632, 364, 97, 98, 631, 27,
	240, 375, 267, 470, 468, 469, 471, 472, 473, 474,
	-65, -495, -476, 465, 464, -354, 457, 463, 455, 467,
	458, 352, 331, 547, 330, 232, 625, 532, 526, -329,
	399, 435, 489, 490, 376, 436, 476, 478, 459, 108,
	194, 191, 241, 243, 240, 631, 351, 492, 415, 95,
	329, -551, 162, 476, 478, 271, 413, 41, -419, 425,
	-418, -420, 477, 488, 87, 88, 475, -329, 108, 456,
	456, -589, -304, -174, -176, -114, -540, 533, 632, 241,
	351, 415, 271, 242, 240, 528, 531, 243, 492, 239,
	322, 375, 267, 329, 95, 167, 631, -478, -548, 32,
	-485, 226, 227, 228, 33, 34, -1, 122, 639, -368,
	-368, -6, 642, -6, -368, -341, -341, 157, -239, -243,
	-240, -242, -241, -245, -244, 191, 192, 153, 195, 201,
	197, 198, 199, 200, 202, 203, 204, 205, 206, 209,
	210, 207, 31, 208, 257, 187, 188, 189, 190, 211,
	173, 193, 540, 219, 174, 220, 175, 221, 176, 222,
	177, 178, 223, 179, 182, 183, 184, 185, 181, 156,
	-207, 89, 32, 83, 156, 89, -199, 263, -183, -232,
	-224, 156, 640, -199, -589, -192, -193, 11, -232, -317,
	-341, 434, 125, -92, 77, -92, 433, 77, -543, -544,
	-545, -547, 236, 433, 432, -109, 156, 279, 17, -348,
	-348, 81, -232, -401, 271, -426, -399, 36, 80, 157,
	244, 157, 80, 83, 376, 351, 415, 377, 492, 240,
	389, 243, 271, 390, 351, 415, 240, 243, 492, 271,
	351, 240, 243, 415, 271, 390, 351, 455, 456, 243,
	27, 381, 384, 385, 456, -499, 488, 157, 114, 111,
	112, 113, -368, 132, -383, 125, 126, 127, 128, 129,
	130, 131, 139, 138, 149, 142, 143, 144, 145, 146,
	147, 148, 140, 141, 135, 115, 133, 137, 134, 117,
	152, -176, -368, -376, 61, -366, -366, -366, -366, -341,
	-458, -373, -368, 83, 83, 83, 83, 83, 156, 102,
	89, -368, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, -492, 83, 83, -380, -381, 83,
	83, -361, -317, 83, 89, 89, 83, 83, 83, 89,
	83, 83, 83, -381, -381, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	-193, 157, -192, 83, -192, -193, -177, -176, 32, 33,
	32, 33, 32, 33, 32, 33, -592, 622, 83, 99,
	635, 224, 17, -341, 631, -341, 89, 536, 89, 536,
	481, 542, 168, 169, 170, -388, 246, -388, -388, -216,
	-341, -218, 375, 243, 528, 243, -165, -388, -388, -388,
	-388, -388, 242, -388, 24, 240, 240, 240, 240, -388,
	499, 125, 125, 59, -553, 172, 157, -542, -198, 83,
	89, -353, 133, 137, -353, -300, 18, -300, 24, 269,
	269, 269, -353, 309, -600, -601, 17, 135, -351, -601,
	-351, -351, -353, -602, 242, 466, 43, 270, 269, -194,
	-195, 22, -194, 460, 456, -443, 461, 462, -355, -601,
	-354, -353, -353, -354, -353, -353, -353, 32, 240, 243,
	492, 329, 626, -600, -600, 31, 31, -477, -477, -232,
	-477, -477, 526, -330, -341, -477, -477, -477, -554, 245,
	-586, -585, 479, -588, 481, 162, -420, 162, -420, -401,
	271, 271, 157, 125, 24, -421, 125, 136, -420, -420,
	-421, -421, -256, 41, -340, 153, -341, 89, -256, 41,
	-583, -582, -232, -193, -177, -176, 84, 84, 84, 536,
	89, -477, -477, -477, -477, -477, -479, -477, -477, -477,
	-477, -477, -348, -208, -341, -218, 246, -477, -477, -477,
	-477, -178, -179, 144, -368, -341, -178, -3, -136, -135,
	119, 120, 122, 616, 370, 615, 619, 613, -420, 41,
	-471, 397, 396, -465, -467, 83, -466, 83, -466, -466,
	-466, -466, -466, 83, 83, -468, 83, -468, -468, -465,
	-469, 83, -469, -470, 83, -470, -469, -341, -447, 542,
	-374, -376, -341, 39, -488, 61, -173, 83, 31, 83,
	-199, -341, 188, 167, 630, -489, 61, -173, 83, 31,
	-193, -129, 39, -195, 21, 156, 99, 89, -109, -92,
	77, -109, 84, 157, -546, 105, 106, -549, 206, 197,
	-341, -107, 89, -7, -8, -9, -10, -47, -82, -79,
	-173, 233, 534, 537, -516, -514, 83, 32, 424, 80,
	17, -427, 240, 492, 375, 267, 243, 351, -425, -408,
	-405, -403, -340, -401, -404, -403, -430, -317, 456, -130,
	439, 438, 321, -368, -368, -368, -368, -368, 104, 115,
	346, 105, 106, -363, -384, 32, 317, 318, -364, -364,
	-364, -364, -364, -364, -364, -364, -364, -364, -364, -364,
	-372, -382, -458, 83, 135, 133, 137, 134, 117, -366,
	-366, -364, -364, -258, -340, 153, 84, 157, -368, -539,
	-538, 119, -368, -368, -368, -368, -394, -396, -317, 83,
	-341, -536, -537, 506, 507, 508, 509, 510, 511, 512,
	513, 514, 515, 516, 366, 361, 367, 365, 354, 373,
	368, 369, 190, 523, 524, 517, 518, 519, 520, 521,
	522, -374, -374, -368, -536, -374, -310, 33, 32, -376,
	-376, -376, 84, -368, -550, 344, 343, 345, -196, -341,
	-374, 84, 84, 84, 99, -376, -376, -374, -364, -374,
	-374, -374, -374, -537, -310, -310, -310, -310, 144, -376,
	-376, -310, -310, -310, -310, 144, -310, -310, -310, -310,
	-310, -310, -310, -310, -310, -310, 84, 84, 84, 144,
	-376, -194, -128, -497, -496, -368, 41, -129, -195, -593,
	623, 83, -317, -581, 89, 89, 640, 167, 631, 17,
	492, -341, 17, 240, -574, 32, 536, 99, 536, 99,
	482, 483, 166, 169, 168, 89, 115, -341, -341, 35,
	83, -208, -388, -388, -388, -558, -341, 90, -409, -406,
	-403, -341, -341, -399, -341, -330, -232, -388, -388, -388,
	-388, -232, -267, 53, 54, 55, -403, -166, 56, 57,
	-554, -541, 35, -197, -341, -574, -300, -366, -366, -368,
	-403, 271, -600, -353, -353, -331, -330, -355, -350, -355,
	-355, -300, -351, -353, -353, -368, -355, -351, -300, -341,
	456, -300, -300, -443, -353, -352, -341, -352, -388, -330,
	-331, -331, -232, -232, -281, -286, -282, -287, 263, 237,
	359, 360, 235, 233, 11, 234, -294, 310, -389, 500,
	-262, -263, 77, 42, -265, 261, 401, 394, 273, 277,
	93, 278, 434, 279, 242, 281, 282, 283, 298, 300,
	253, 284, 285, 286, 425, 287, 161, 299, 288, 289,
	290, 377, -257, 6, 332, 41, 51, 52, 448, 447,
	545, 542, 274, -341, -558, -556, 31, -341, 31, -409,
	-341, -341, -186, -181, -185, -182, -187, -303, -305, -184,
	83, -232, -176, -341, 157, 480, 482, 483, -586, -421,
	-586, -421, 32, 424, -424, 424, 32, -399, -418, 476,
	478, -414, 89, 425, -404, -423, 80, 153, -496, -421,
	-421, -423, -423, 152, 157, -584, 481, 482, 229, -194,
	99, -574, -234, -232, -558, -408, -399, -341, -477, -234,
	-234, -234, -343, -343, 83, 156, 36, -341, -341, -341,
	-341, -299, 157, -298, 17, -342, -341, 35, 89, 156,
	-299, -137, -135, 121, -368, -6, 615, -368, -6, -6,
	-368, -6, -368, -475, 398, 99, 99, -320, 89, -320,
	99, 99, 99, 548, 84, 89, -412, 80, -490, -377,
	-534, 604, -201, 84, -196, -532, -533, -196, -200, -341,
	-488, -224, 125, 125, 125, -490, -201, 84, -532, -194,
	605, -129, -191, -190, -368, -341, 24, -109, -92, -544,
	156, 351, 157, -197, -427, -407, -404, -429, 144, -341,
	-415, 157, 542, 643, 87, 244, -571, -570, 416, 84,
	157, -500, 245, 499, 89, 640, 432, 224, 225, 104,
	346, 105, 106, -458, -376, -372, -366, -366, -364, -364,
	-370, 258, -370, 114, -368, 641, -367, -538, 121, -368,
	35, 157, 35, 157, 81, 157, 84, -465, -368, 156,
	84, 84, 17, 17, 84, -368, 84, 84, 84, 84,
	17, 17, -368, 84, 156, 84, 84, 84, 84, 81,
	84, 157, 84, 84, 84, 84, 157, -376, -376, -368,
	-376, 84, 84, 84, -368, -368, -368, -376, 84, -368,
	-368, -368, -368, -368, -368, -368, -368, -368, -368, -437,
	451, -437, -437, 157, 157, 157, 84, -129, 83, 99,
	157, 636, -324, -323, 89, -341, -341, 167, 631, -341,
	89, 631, -341, 89, 89, 167, 170, 170, 169, 89,
	36, 24, 308, 24, -217, -219, -220, -221, -222, -223,
	135, 158, 159, 83, -232, -232, -232, -560, 402, -572,
	157, 41, -570, 492, -162, 321, -392, 81, -169, 17,
	542, -232, -232, -232, -232, -246, 35, 17, -180, -233,
	-341, 83, 84, 157, -400, 81, -341, -331, -300, -300,
	-355, -300, -300, 157, 23, -353, -355, -355, -224, -351,
	-224, 156, -224, -330, -464, 35, -198, 157, 21, 263,
	-231, -338, -228, -230, 248, -358, -229, 251, -528, 249,
	247, 109, 252, 306, 110, 242, -338, -338, 248, -266,
	244, 35, -338, -284, 242, 349, 306, 249, 21, 263,
	-283, 242, 110, -341, 248, 252, 249, 247, -337, 125,
	-329, 152, 244, 43, 377, -337, 546, 263, -337, -337,
	-337, -337, -337, -337, -337, 280, 280, -337, -337, -337,
	-337, -337, -337, -337, -337, -337, -337, -337, 162, -337,
	-337, -337, -337, -337, -337, 83, 275, 276, 308, -561,
	402, 31, 357, 357, 358, -572, 31, -170, 351, 31,
	-306, -307, -308, -309, 68, 72, 74, 78, 69, 70,
	71, 75, 31, 157, -339, -344, 35, -341, 89, -339,
	-176, -181, -186, -339, 83, -585, -587, 484, 481, 487,
	-423, -423, 244, 83, 125, -423, -423, 41, -340, -582,
	488, 482, -129, 157, 80, -234, -209, -210, -211, -212,
	-239, -317, 192, 195, 197, 198, 199, 200, 202, 203,
	204, 205, 206, 209, 210, 207, 208, 257, 187, 188,
	189, 190, 211, 173, 193, 540, 174, 175, 176, 177,
	178, 179, 182, 183, 184, 185, 181, -341, -218, -300,
	-179, -181, -341, 89, -341, 144, -300, 122, -6, 120,
	-141, -140, -139, 123, 613, 619, 122, 122, 122, 84,
	84, 84, 157, 84, 84, 84, 157, 84, 157, 99,
	-503, 461, 40, 157, 83, 84, 157, 61, 157, 125,
	84, 157, -368, -341, 89, -368, 84, 61, -129, 89,
	157, -188, 37, 38, 156, 434, -341, -514, 84, -429,
	157, 244, 156, 156, -405, 380, -340, -407, 21, 542,
	-317, 39, -324, 125, 640, -341, 84, -370, -370, 114,
	-366, -363, 84, 122, -368, 120, -237, -239, 396, 397,
	-368, -237, -238, -244, 153, 191, 257, 190, 189, 187,
	396, 397, -256, -396, 539, -188, 84, -341, -368, -368,
	84, -368, -368, 17, -341, -256, -364, -368, -193, -193,
	84, 84, -436, -437, -436, -436, 84, 84, 84, 84,
	-436, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 83, 99, 101, 99, 101, -496, -594, 63, 621,
	62, 424, 104, 311, 157, 99, 89, 641, 157, 125,
	89, -341, -341, 17, 240, -341, 17, 89, 170, 89,
	-573, 315, 351, -448, 99, 315, 351, 492, 388, 84,
	157, -317, -209, -198, 83, -198, -563, 463, 404, 414,
	-337, -360, -359, 353, 42, -482, 425, 410, 411, -406,
	271, -330, -569, 96, 125, 80, 336, 340, 341, 337,
	338, 339, -386, -387, -385, -389, -556, 83, 83, -173,
	35, 133, -169, 83, 83, 35, -459, 326, -239, -232,
	-180, -341, 17, 157, -555, 156, -1, -341, -399, -353,
	-300, -368, -368, -300, -353, -353, -355, -341, -224, -459,
	-239, 35, -282, 237, 234, -433, 308, 309, -434, -449,
	311, -451, 83, -236, -317, -229, -527, -528, -388, -341,
	110, -527, 110, 83, -236, -317, -317, -285, -352, -317,
	-341, -341, -341, -341, -290, -289, -317, -292, 32, -293,
	-341, -341, -341, -341, 110, -341, 110, -261, 41, 48,
	49, 50, -337, -337, 194, -264, 41, 424, 426, 427,
	-292, 99, 99, 99, 99, 89, 89, 89, -337, -337,
	99, 89, -344, 89, -529, 169, 45, 46, 99, 99,
	99, 99, 41, 89, -269, 41, 291, 295, 292, 293,
	294, 89, 99, 41, 99, 41, 99, 41, -341, 83,
	-530, -531, 89, -448, -563, -337, 357, -420, 125, 125,
	-360, -568, 321, -172, 492, 32, -202, 237, 234, -556,
	-411, -410, -317, -185, -185, -185, -185, 68, 68, 68,
	68, 73, 68, 73, 68, -308, -411, -187, -198, -344,
	84, -579, -578, -577, -575, 76, 245, 77, -374, 481,
	485, 486, -407, -356, 89, -414, -206, 24, -232, -232,
	-481, 301, 302, 84, 157, -239, -302, 19, 156, -302,
	118, -6, -137, -139, -368, -6, -368, 615, 370, 616,
	89, 99, 99, -511, 445, 440, 442, 110, -377, -498,
	-497, 61, -173, -196, -490, -533, -496, -341, 641, 641,
	641, 641, 61, -173, -490, -206, -503, -190, -189, 44,
	-341, 99, 17, -404, -399, 144, 144, -341, 381, -415,
	89, 403, 89, 240, 641, 89, -324, -363, -368, 84,
	-247, 178, 177, -247, 35, 84, 84, -466, -466, -465,
	-468, -465, -247, -247, 84, 83, -188, 84, 24, 84,
	84, 84, -368, 84, 84, 157, -486, 501, -487, 575,
	-436, -436, -436, -436, -436, -436, -436, -436, -436, -436,
	-436, -436, -436, -436, -436, -436, -379, -378, 263, 446,
	628, 628, 446, 628, 628, 84, 157, -536, 157, -332,
	316, -332, -323, 89, 244, 89, 167, -341, 89, 631,
	89, -341, 89, 308, -341, -341, 89, 89, -221, -239,
	84, 35, -225, -226, -227, -236, -228, -230, 35, -564,
	93, -559, 89, -341, 90, -565, 93, 405, 155, 355,
	41, 406, 407, 422, 350, 99, 99, 412, -557, -341,
	-171, 240, 351, -567, 52, 125, 89, -232, -385, -329,
	152, 282, 329, -297, -296, -341, 89, -225, -173, -232,
	-225, -225, -173, -460, 328, 21, 99, 143, -199, 81,
	156, -181, -233, -341, 144, 84, -300, -224, -300, -300,
	-353, -460, -173, -445, 312, 83, -443, 83, -443, 110,
	337, -452, -450, 263, -288, 45, 47, -239, -525, -341,
	-523, -525, -341, -523, -523, -388, -368, -288, -236, 244,
	31, 234, -291, 334, 335, 340, -416, 307, 115, -416,
	157, -188, 157, -341, -256, -256, 31, 89, 89, -234,
	84, 157, 125, 89, -564, -559, 125, -421, 89, 89,
	-565, -569, 125, -235, 240, -330, 157, -202, -202, -300,
	157, 125, -204, -203, 80, 81, -205, 80, -203, 68,
	68, -300, -577, -576, 24, -528, -528, -528, 84, 84,
	15, -211, 41, -301, 20, 21, 144, -301, 122, 120,
	122, 122, -341, 84, 84, -472, 606, -507, -509, 440,
	21, 21, 15, 245, 84, -490, -490, -511, 45, 46,
	-399, -415, 425, -232, 157, 641, -237, -275, 89, -368,
	84, -368, 84, 89, 84, 89, -193, 21, 84, 157,
	84, 84, 84, 157, 84, 84, -368, 84, -536, -333,
	188, 89, -333, 351, -342, -341, 17, -341, 89, -448,
	308, 308, 240, 238, -173, 84, 157, -173, 89, -562,
	416, 89, 89, 99, 41, 99, 155, 408, -483, -163,
	93, -234, 32, -202, -566, 93, 125, 640, 83, -337,
	-337, -337, -341, 84, 157, -337, -337, 84, 84, 84,
	-254, 542, -461, 262, 99, 143, 99, 143, 99, -339,
	-181, -341, -300, -555, 156, -300, -461, -435, 313, 99,
	-364, 83, -364, 83, -444, 310, 83, 84, 157, -341,
	-317, -251, -250, -248, 104, 115, 41, 394, -249, 93,
	152, 296, 299, 298, 274, 297, -280, -357, 80, 400,
	334, 335, -389, 606, 530, 247, 109, 110, 382, -358,
	83, 83, 81, 316, 83, 83, -525, 84, -288, -317,
	41, -291, 41, 347, 307, -289, -341, 152, -256, 84,
	-531, 89, -562, 89, -423, -567, 89, -163, -234, -556,
	-193, -410, -496, -368, 83, -368, 83, 68, 11, 19,
	-361, -368, -376, 246, -6, 616, 370, -271, 607, 89,
	21, 89, -505, 89, -411, -472, -132, -268, -329, 279,
	84, -274, 135, 542, 84, 84, -436, -436, -439, -438,
	-442, 446, 308, 454, -376, 89, 89, 84, 84, 89,
	-341, 244, 167, 89, 640, 89, -448, -448, -341, -213,
	-239, -167, 542, -254, -227, -167, 21, 542, 354, 41,
	99, 41, 409, 89, -171, 125, 105, 106, -325, -326,
	89, -394, -256, -258, 89, -296, -361, -361, -252, -173,
	35, -253, -294, -389, -131, -130, -252, 83, -462, 161,
	99, 143, 99, 99, -300, -300, -462, -451, 21, 84,
	-430, 84, -430, 83, 125, -364, -450, -453, 61, -248,
	104, -364, 89, -258, -259, 41, 295, 291, 125, 125,
	-260, 41, 275, 276, -270, 83, 306, 15, 194, 83,
	110, 110, -232, -394, -394, -526, 336, 337, 338, 342,
	340, 341, 339, -526, -394, -394, 83, -417, -416, -364,
	-337, -337, 152, -566, -194, -197, -524, -341, 247, 21,
	21, -341, -341, -321, 608, 99, 89, 442, -271, -473,
	609, -501, -443, -256, 125, 84, 75, 540, 543, 84,
	-441, 117, 408, 412, -362, -365, 99, 101, 186, 155,
	84, 84, 351, -341, -328, -327, 89, 89, 89, 308,
	541, -168, 60, 488, 89, 90, 403, 89, 90, 354,
	-163, 89, 641, 157, 125, 84, -431, 263, -173, 157,
	-294, -329, -132, -431, -255, -295, -341, 89, -480, 169,
	327, 542, 99, 143, 99, -193, -463, 169, 327, -434,
	84, 84, 84, -430, 99, 84, -457, -454, 83, -294,
	265, 135, 89, 89, 99, 83, -491, 31, 89, -395,
	83, 84, 84, 84, 84, -394, 99, -256, -337, 84,
	84, 157, 83, 21, -321, -474, 610, 89, -510, 445,
	-504, -502, 440, 441, 442, 443, 89, 541, 65, 544,
	-440, -441, 412, -362, -365, 604, 452, 452, 452, -341,
	244, 641, 157, 125, -448, -215, -341, 306, 425, -326,
	89, -397, -432, 315, 21, -294, -337, -432, 84, 157,
	-337, -337, 327, 99, 143, 99, -194, 327, -446, 314,
	84, -457, -294, -456, -455, 313, 266, 83, 84, -368,
	-380, -337, 84, -273, -272, 538, -394, -397, 81, -397,
	81, -397, 81, -397, 81, 84, -256, -341, 247, -322,
	-341, -505, 89, -512, 245, -508, -509, 444, -502, 21,
	442, 21, 21, -133, 157, 65, 114, 453, 453, 453,
	351, -327, 89, 89, -214, 35, 447, 381, -398, 253,
	347, 348, 93, 542, 334, 335, 21, -433, -256, -295,
	-361, -361, 99, 99, 84, 157, -341, 262, 83, -375,
	-369, -368, 262, 84, -341, -279, -277, -278, 80, 459,
	304, 305, 84, -526, -526, -526, -526, -280, 84, 157,
	-519, 83, 99, -507, -506, -508, 21, -505, 21, -505,
	-505, 449, 542, -440, -341, 89, -337, -337, 89, 89,
	333, -317, 83, -445, -455, -454, -375, 84, 157, -416,
	-278, 80, -277, 80, 16, 15, -397, -397, -397, -397,
	-341, -522, 31, 84, -518, -517, -318, -513, -341, 445,
	446, 89, -505, 125, 543, -597, -596, 627, 99, 99,
	-341, -430, -435, 84, -369, -276, 301, 302, 31, 169,
	-276, -521, -520, -319, 84, 157, 156, 89, 544, 89,
	84, -451, 104, 41, 303, 157, 125, -517, -341, -520,
	41, -368, 156, -341,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 309, 310, 311, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 0, 0,
	0, 0, 0, 682, 683, 0, 646, 0, 0, 0,
	0, 0, 0, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 0, 334, 330, 255,
	256, 257, 258, 259, 341, 342, 506, 0, 0, 0,
	0, 765, -2, 99, 0, 0, 0, 0, 323, 0,
	314, 314, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, -2, 695, 0, 647, 648,
	649, 650, 651, 652, 653, 654, 655, 656, 657, 658,
	659, 660, 661, 662, 663, 394, 395, 396, 390, 391,
	393, 392, -2, 0, 695, 0, 0, 0, 773, 0,
	0, 0, 816, 838, 23, 0, 7, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 0, 0, 19,
	0, 19, 0, 0, 0, 1348, 1349, 1350, 1351, 2140,
	2110, -2, 1881, 1858, 2034, 2035, 1935, 1946, 2171, 2172,
	2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182,
	2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192,
	2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202,
	2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212,
	2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 1815, 1816,
	1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826,
	1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
	1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
	1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
	1857, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
	1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877,
	1878, 1879, 1880, 1882, 1883, 1884, 1885, 1886, 1887, 1888,
	1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898,
	1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
	1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918,
	1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928,
	1929, 1930, 1931, 1932, 1933, 1934, 1936, 1937, 1938, 1939,
	1940, 1941, 1942, 1943, 1944, 1945, 1948, 1949, 1950, 1951,
	1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961,
	1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971,
	1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981,
	1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991,
	1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
	2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
	2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,
	2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
	2032, 2033, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043,
	2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053,
	2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063,
	2064, 2065, 2066, -2, 2068, 2069, 2070, 2071, 2072, 2073,
	2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083,
	2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093,
	2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103,
	2104, 2105, 2106, 2107, 2108, 2109, 2111, 2112, 2113, 2114,
	2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124,
	2125, -2, -2, -2, 2129, 2130, 2131, 2132, 2133, 2134,
	2135, 2136, 2137, 2138, 2139, 2141, 2142, 2143, 2144, 2145,
	2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155,
	2156, 2157, 2158, 2159, 2160, 0, 307, 305, 1828, 1858,
	1881, 1935, 1946, 1947, 1982, 2034, 2035, 2067, 2110, 2126,
	2127, 2128, 2140, 0, 0, 951, 0, 743, 0, 0,
	748, 1297, 743, 335, 684, 685, 773, 799, 644, 0,
	372, 0, 1872, 376, 2117, 0, 0, 0, 641, 366,
	367, 368, 369, 370, 371, 0, 0, 924, 0, 0,
	362, 0, 329, 1937, 2139, 1352, 0, 0, 0, 0,
	0, 198, 1075, 200, 1077, 204, 212, 0, 0, 0,
	217, 218, 221, 222, 223, 224, 225, 0, 229, 0,
	231, 234, 0, 236, 237, 0, 240, 241, 242, 0,
	252, 253, 254, 1078, 1079, 1080, -2, 127, 949, 1786,
	1672, 0, 1679, 1692, 1703, 1434, 1435, 1436, 1437, 0,
	0, 0, 0, 0, 0, 1445, 1446, 0, 1476, 2175,
	2216, 2217, 0, 1454, 1455, 1456, 1457, 1458, 1459, 0,
	138, 150, 151, 1725, 1726, 1727, 1728, 1729, 1730, 1731,
	0, 1733, 1734, 1735, 1643, 1421, 1348, 0, 2184, 0,
	2206, 2211, 2212, 2213, 2214, 2205, 0, 0, 1628, 0,
	1618, 0, 0, -2, -2, 0, 0, 2007, -2, 2218,
	2219, 2220, 2181, 2202, 2210, 2185, 2186, 2209, 2177, 2178,
	2179, 2172, 2173, 2174, 2176, 2188, 2190, 2201, 0, 2197,
	2207, 2208, 2115, 0, 0, 0, 0, 0, 2157, 152,
	153, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1639, -2,
	-2, 1642, -2, 1645, -2, -2, -2, -2, 1650, 1651,
	-2, 1653, -2, -2, -2, -2, -2, -2, -2, 1630,
	1631, 1632, 1633, 1622, 1623, 1624, 1625, 1626, 1627, -2,
	-2, -2, 799, 874, 0, 799, 0, 774, 821, 824,
	827, 830, 777, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 325, 313, 315,
	0, 319, 0, 312, 1111, 1111, 1111, 0, 0, 0,
	0, 1111, 1111, 1111, 1111, 1111, 0, 1111, 0, 0,
	0, 0, 0, 1111, 0, 984, 1082, 1083, 1084, 1109,
	1110, 1183, 0, 0, 0, 700, 696, 697, 698, 699,
	787, 0, 789, 792, 0, 621, 621, 847, 847, 567,
	0, 0, 0, 621, 0, 581, 573, 0, 0, 0,
	621, 0, 0, 794, 794, 0, 624, 631, 621, 621,
	-2, 621, 621, 618, 621, 0, 0, 1123, 587, 588,
	589, 573, 573, 592, 593, 594, 604, 605, 632, 1810,
	0, 0, 506, 506, 0, 506, 506, 0, 506, 506,
	506, 702, 1977, 1879, 1952, 1937, 2139, 0, 280, 2007,
	285, 0, 1880, 1899, 0, 0, 1917, 0, -2, 0,
	351, 799, 0, 0, 773, 0, 0, 0, 0, 506,
	506, 506, 506, 506, 1182, 506, 506, 506, 506, 506,
	0, 0, 0, 506, 506, 506, 506, 0, 0, 839,
	840, 835, 836, 837, 841, 842, 5, 6, 19, 0,
	0, 0, 0, 0, 0, 106, 105, 0, 1787, 1805,
	1738, 1739, 1740, 1792, 1742, 1796, 1796, 1796, 1796, 1771,
	1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1796,
	1796, 0, 0, 1785, 1762, 1794, 1794, 1794, 1792, 1789,
	1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752,
	1753, 1754, 1755, 1756, 1799, 1799, 1802, 1802, 1799, 0,
	408, 406, 407, 1668, 0, 0, 0, 0, 743, 747,
	1295, 0, 0, 0, 799, -2, 0, 0, 645, 373,
	1353, 0, 0, 377, 0, 378, 0, 0, 0, 397,
	0, 400, 385, 386, 387, 381, 0, 178, 0, 364,
	365, 0, 0, 331, 0, 0, 0, 507, 0, 0,
	0, 0, 0, 0, 209, 205, 213, 216, 226, 233,
	0, 245, 247, 250, 206, 214, 219, 220, 227, 248,
	207, 210, 211, 215, 249, 251, 208, 228, 232, 246,
	230, 235, 238, 239, 244, 0, 179, 0, 0, 0,
	0, 0, 1678, 0, 0, 1711, 1712, 1713, 1714, 1715,
	1716, 1717, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, -2, 1672, 0, 0, 1440, 1441, 1442, 1443, 0,
	1447, 0, 1477, 0, 0, 0, 0, 0, 0, 1732,
	1736, 0, 1668, 1668, 0, 1668, 1664, 0, 0, 0,
	0, 0, 0, 1668, 1601, 0, 0, 1603, 1619, 0,
	0, 1605, 1606, 0, 1609, 1610, 1668, 0, 1668, 1614,
	1668, 1668, 1668, 1597, 1598, 0, 1664, 1664, 1664, 1664,
	0, 0, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
	1664, 1664, 1664, 1664, 1664, 1664, 0, 0, 0, 0,
	794, 0, 800, 0, -2, 0, 818, 820, 822, 823,
	825, 826, 828, 829, 831, 832, 779, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 322, 0, 0, 0, 0, 0,
	948, 0, 0, 1111, 1111, 1111, 985, 0, 0, 0,
	0, 0, 0, 0, 0, 1111, 1111, 1111, 1111, 0,
	1129, 0, 0, 0, 702, 701, 0, 788, 0, 0,
	0, 847, 0, 0, 564, 565, 0, 566, 0, 573,
	621, 621, 579, 580, 575, 574, 627, 628, 624, 0,
	624, 624, 847, 0, 598, 599, 600, 621, 621, 606,
	795, 0, 607, 608, 624, 0, 629, 630, 847, 0,
	0, 847, 847, 0, 616, 617, 619, 621, 0, 0,
	1111, 0, 637, 575, 575, 1811, 1812, 0, 0, 1120,
	0, 0, 0, 0, 640, 0, 0, 0, 0, 703,
	260, 263, 0, 266, 0, 1977, 0, 1977, 0, 273,
	0, 0, 0, 0, 0, 0, 303, 304, 0, 0,
	0, 0, 294, 297, 1289, 1290, 1072, 1073, 298, 299,
	343, 344, 0, 794, 817, 819, 813, 814, 815, 0,
	0, 0, 0, 0, 0, 0, 506, 0, 0, 0,
	0, 0, 678, 0, 964, 680, 0, 0, 0, 0,
	0, 855, 849, 851, 919, 138, 855, 8, 123, 120,
	0, 19, 0, 0, 19, 19, 0, 19, 308, 0,
	1808, 1806, 1807, 1741, 1793, 0, 1767, 0, 1768, 1769,
	1770, 1781, 1782, 0, 0, 1763, 0, 1764, 1765, 1766,
	1757, 0, 1758, 1759, 0, 1760, 1761, 306, 405, 0,
	0, 1669, 952, 0, 721, 735, 716, 0, 724, 0,
	0, 1297, 0, 0, 0, 704, 735, 706, 0, 724,
	794, 771, 0, 749, 0, 0, 374, 0, 382, 379,
	0, 383, 0, 0, 399, 401, 402, 403, 388, 389,
	642, 360, 361, 352, 353, 354, 355, 356, 357, 358,
	359, 0, 0, 0, 363, 148, 0, 332, 333, 0,
	0, 0, 192, 193, 194, 195, 196, 197, 199, 183,
	667, 669, 1064, 1076, 0, 1067, 0, 202, 243, 175,
	0, 0, 0, 1673, 1674, 1675, 1676, 1677, 1682, 0,
	1684, 1686, 1688, 1690, 0, 1708, -2, -2, 1422, 1423,
	1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
	1693, 1706, 1707, 0, 0, 0, 0, 0, 0, 1704,
	1704, 1699, 0, 1460, 1291, 1292, 1438, 0, 0, 1474,
	1478, 0, 0, 0, 0, 0, 0, 1095, 1792, 0,
	139, 1663, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575,
	1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585,
	1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
	1596, 0, 0, 1672, 0, 0, 0, 1665, 1666, 0,
	0, 0, 1556, 0, 0, 1562, 1563, 1564, 0, 730,
	0, 1629, 1602, 1620, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 875, 0, 739, 741, 742, 768, 749, 775,
	0, 0, 0, 98, 103, 0, 1150, 0, 0, 0,
	0, 0, 0, 0, 71, 73, 0, 1124, 0, 1126,
	326, 327, 0, 0, 321, 0, 0, 0, 0, 0,
	-2, 0, 0, 0, 0, 0, 1000, 1001, 504, 1058,
	0, 0, 0, 1074, 1099, 1107, 0, 0, 0, 0,
	0, 1156, 986, 991, 992, 993, 987, 988, 994, 995,
	0, 790, 0, 0, 888, 70, 563, 622, 623, 848,
	570, 1937, 575, 847, 847, 582, 576, 583, 626, 584,
	585, 586, 624, 847, 847, 796, 621, 624, 609, 625,
	624, 1297, 613, 0, 620, 1297, 638, 1297, 0, 636,
	590, 591, 1158, 792, 421, 422, 423, 425, 0, 474,
	474, 474, 457, 474, 0, 0, 445, 1813, 0, 0,
	0, 0, 454, 1813, 0, 0, 1813, 1813, 1813, 1813,
	1813, 1813, 1813, 0, 0, 1813, 1813, 1813, 1813, 1813,
	1813, 1813, 1813, 1813, 1813, 1813, 0, 1813, 1813, 1813,
	1813, 1813, 1275, 1813, 0, 1121, 464, 465, 466, 467,
	472, 473, 0, 0, 501, 0, 0, 999, 0, 504,
	0, 1041, 860, 0, 861, 862, 858, 890, 914, 914,
	0, 914, 894, 1297, 0, 0, 271, 272, 261, 0,
	262, 0, 274, 275, 0, 277, 278, 279, 286, 1879,
	1952, 281, 283, 0, 0, 287, 300, 301, 302, 0,
	0, 292, 293, 0, 0, 346, 347, 349, 0, 749,
	1125, 72, 664, 1293, 665, 666, 670, 0, 0, 673,
	674, 675, 676, 677, 966, 0, 0, 1050, 1051, 1052,
	1053, 847, 0, 856, 0, 852, 920, 0, 922, 0,
	847, 0, 121, 19, 0, 114, 111, 0, 0, 0,
	0, 0, 1788, 1737, 1809, 0, 0, 0, 1790, 0,
	0, 0, 0, 0, 104, 751, 711, 0, 715, 732,
	0, 736, 0, 0, 728, 720, 725, 0, 0, 745,
	712, 1296, 0, 0, 0, 705, 0, 0, 710, 749,
	0, 772, 801, 802, 805, 1354, 0, 384, 380, 398,
	0, 506, 0, 0, 0, 186, 1061, 0, 187, 191,
	181, 0, 0, 0, 1066, 0, 1063, 1068, 0, 201,
	0, 0, 176, 177, 1141, 1150, 0, 0, 0, 1683,
	1685, 1687, 1689, 1691, 0, 1694, 1704, 1704, 1700, 0,
	1695, 0, 1697, 0, 1673, 1444, 0, 1479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 805, 0, 0,
	1546, 1547, 0, 0, 1551, 0, 1553, 1554, 1555, 1557,
	0, 0, 0, 1561, 0, 1600, 1621, 1604, 1607, 0,
	1611, 0, 1613, 1615, 1616, 1617, 0, 799, 799, 0,
	0, 1518, 1518, 1518, 0, 0, 0, 0, 1518, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1463,
	0, 1464, 1465, 0, 0, 0, 876, 769, 0, 0,
	0, 0, 0, 1148, 0, 86, 0, 0, 0, 0,
	93, 0, 0, 74, 75, 328, 316, 318, 0, 0,
	1112, 0, 0, 0, 0, 0, 954, 955, 957, 0,
	960, 961, 962, 966, 792, 0, 792, 1011, 1813, 508,
	0, 0, 1060, 0, 1030, 0, 0, 0, -2, 0,
	0, 1107, 0, 0, 0, 1160, 0, 0, 0, 689,
	693, 23, 793, 0, 568, 0, 569, 621, 577, 578,
	847, 601, 602, 0, 0, 847, 621, 621, 612, 624,
	633, 0, 634, 1297, 1160, 0, 0, 1120, 1226, 1194,
	435, 0, 1309, 1310, 475, 0, 1316, 1325, 1111, 1386,
	0, 1325, 0, 0, 1327, 1328, 0, 0, 0, 0,
	458, 459, 0, 444, 0, 0, 0, 0, 0, 0,
	443, 0, 0, 485, 0, 0, 0, 0, 0, 1814,
	1813, 1813, 0, 452, 453, 0, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 1813, 1813, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1266, 0,
	0, 0, 0, 0, 0, 0, 1281, 1282, 0, 1011,
	1813, 0, 0, 0, 0, 508, 1028, 1046, 0, 0,
	0, 0, 0, 0, 880, 0, 0, 0, 879, 0,
	0, 0, 0, 0, 792, 915, 0, 917, 918, 892,
	-2, 0, 860, 897, 1668, 264, 265, 0, 0, 270,
	288, 290, 0, 0, 0, 289, 291, 295, 296, 345,
	348, 350, 811, 0, 0, 1184, 0, 967, 968, 970,
	971, 0, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1863, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 965, 681, 845,
	850, 857, 921, 923, 139, 853, 845, 0, 124, 19,
	123, 115, 116, 0, 19, 0, 0, 0, 0, 1798,
	1797, 1783, 0, 1784, 1795, 1800, 0, 1803, 0, 409,
	755, 0, 0, 735, 737, 0, 0, 735, 0, 0,
	744, 0, 0, 0, 0, 0, 0, 735, 811, 751,
	0, 808, 806, 807, 0, 0, 643, 149, 404, 0,
	0, 0, 0, 0, 668, 0, 1065, 183, 0, 0,
	203, 0, 0, 0, 1150, 1145, 1667, 1696, 1698, 0,
	1705, 1701, 1439, 1448, 1475, 0, 0, 1481, 1493, 1493,
	0, 0, 0, 1484, 1796, 1796, 1487, 1792, 1794, 1792,
	1493, 1493, 0, 1096, 0, 1097, 805, 140, 0, 0,
	1552, 0, 0, 0, 731, 0, 0, 0, 1514, 1516,
	1518, 1518, 1525, 1519, 1526, 1527, 1518, 1518, 1518, 1518,
	1532, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518,
	1518, 1512, 0, 0, 1726, 1727, 740, 0, 0, 782,
	783, 784, 785, 786, 0, 0, 61, 61, 1150, 0,
	97, 87, 0, 0, 0, 0, 0, 76, 320, 0,
	77, 78, 0, 0, 85, 0, 0, 0, 0, 0,
	959, 0, 0, 0, 1302, 0, 1015, 1012, 1013, 1014,
	0, 1055, 509, 510, 511, 512, 0, 0, 0, 1059,
	0, 0, 1023, 0, 0, 0, 1100, 1101, 1102, 1103,
	1104, 1105, 1106, -2, 1115, 0, 0, 0, 1302, 1134,
	0, 0, 1139, 1302, 1302, 0, 1168, 0, 1157, 743,
	0, -2, 0, 0, 691, 0, 0, 889, 571, 847,
	595, 797, 798, 1297, 847, 847, 621, 639, 635, 1168,
	1159, 0, 424, 474, 0, 1214, 0, 0, 1220, 0,
	1227, 428, 0, 476, 0, 1315, 1342, 1326, 1342, 1387,
	1342, 1342, 1111, 0, 476, 0, 0, 446, 482, 0,
	0, 0, 0, 0, 442, 479, 805, 429, 431, 432,
	433, 483, 484, 486, 0, 488, 489, 448, 460, 461,
	462, 463, 0, 0, 0, 455, 468, 469, 470, 471,
	430, 1243, 1244, 1245, 1248, 1249, 1250, 1251, 0, 0,
	1254, 1255, 1256, 1257, 1258, 1339, 1340, 1341, 1259, 1260,
	1261, 1262, 1263, 1264, 1265, 1283, 1284, 1285, 1286, 1287,
	1288, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 0,
	0, 1278, 0, 0, 1015, 0, 0, 0, 0, 0,
	1055, 1030, 0, 1048, 0, 1042, 1043, 0, 0, 713,
	847, 338, 0, 884, 877, 0, 866, 881, 882, 883,
	869, 0, 871, 0, 867, 868, 847, 859, 891, 916,
	893, 896, 898, 899, 905, 0, 0, 0, 0, 267,
	268, 269, 276, 0, 528, 282, 767, 0, 1294, 671,
	672, 1185, 1186, 679, 0, 972, 843, 0, 0, 843,
	119, 122, 0, 117, 0, 0, 0, 0, 109, 107,
	1791, 0, 0, 757, 163, 0, 0, 0, 733, 0,
	738, 735, 719, 729, 718, 726, 727, 746, 1298, 1299,
	1300, 1301, 735, 709, 708, 770, 755, 803, 804, 0,
	1355, 375, 0, 1062, 183, 188, 189, 190, 184, 182,
	1069, 0, 1071, 0, 1143, 0, 0, 1702, 1480, 1449,
	1482, 1494, 1495, 1483, 0, 1451, 1452, 1485, 1486, 1488,
	1489, 1490, 1491, 1492, 1453, 0, 1098, 1548, 0, 1550,
	1558, 1559, 0, 1608, 1612, 0, 0, 0, 0, 0,
	1523, 1524, 1528, 1529, 1530, 1531, 1533, 1534, 1535, 1536,
	1537, 1538, 1539, 1540, 1541, 1542, 799, 1513, 0, 0,
	0, 0, 0, 0, 0, 780, 0, 0, 0, 63,
	0, 63, 1149, 1151, 0, 919, 0, 0, 94, 0,
	0, 79, 80, 0, 0, 0, 947, 950, 956, 958,
	0, 0, 0, 1303, 1304, 1306, 1307, 1308, 0, 983,
	0, 0, 1003, 1004, 1005, 1017, 0, 0, 0, 514,
	515, 0, 0, 0, 527, 523, 524, 525, 505, 1054,
	1037, 0, 0, 1026, 0, 0, 1036, 0, 1116, 1813,
	1813, 1813, 0, 0, 1228, 1813, 1813, 0, 1136, 1138,
	0, 0, 1232, 1171, 0, 0, 1162, 0, 914, 0,
	0, 847, 690, 693, 694, 791, 572, 610, 614, 611,
	847, 1171, 420, 1192, 0, 0, 0, 0, 0, 1224,
	0, 0, 1196, 0, 447, 477, 0, -2, 0, 1343,
	0, 1329, 1343, 0, 0, 1342, 0, 436, 476, 0,
	0, 0, 490, 494, 495, 0, 492, 1382, 0, 493,
	0, 481, 0, 487, 1246, 1247, 0, 1252, 1253, 0,
	1277, 0, 0, 427, 496, 0, 0, 0, 497, 498,
	503, 1023, 0, 1037, 0, 1047, 0, 1044, 1045, 799,
	0, 0, 863, 885, 0, 0, 864, 0, 865, 870,
	872, 337, 900, 0, 0, 902, 903, 904, 895, 284,
	812, 969, 0, 833, 0, 0, 854, 834, 0, 19,
	0, 0, 112, 1801, 1804, 759, 0, 756, 164, 0,
	0, 0, 0, 723, 734, 717, 707, 757, 809, 810,
	185, 180, 1070, 1153, 0, 1144, 0, 1406, 1462, 0,
	1560, 0, 1518, 1515, 1518, 1517, 1509, 0, 1466, 0,
	1468, 1469, 1470, 0, 1472, 1473, 0, 778, 0, 59,
	0, 62, 60, 0, 96, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 989, 1232, 0, 989, 1016, 1002,
	0, 1056, 1057, 0, 516, 517, 0, 520, 526, 1018,
	0, 0, 1020, 1021, 1022, 0, 0, 1034, 0, 0,
	0, 0, 1108, 1122, 0, 0, 0, -2, 0, -2,
	1133, 0, 1177, 0, 1169, 0, 1161, 0, 1164, 847,
	847, -2, 687, 692, 0, 615, 1177, 1194, 0, 1215,
	0, 0, 0, 0, 0, 0, 0, 1195, 0, 1208,
	478, 1344, -2, 1358, 1360, 0, 1121, 1363, 1364, 0,
	0, 0, 0, 0, 0, 1413, 1372, 0, 0, 1376,
	1377, 1378, 0, 0, 1381, 0, 1720, 1721, 0, 1385,
	0, 0, 0, 0, 0, 0, 0, 1323, 437, 438,
	0, 440, 441, 1813, 1383, 480, 434, 1813, 450, 1276,
	1279, 1280, 502, 499, 500, 1026, 1029, 1040, 1049, 714,
	794, 339, 340, 886, 0, 878, 909, 906, 0, 0,
	973, 844, 846, 113, 118, 0, 0, 761, 0, 758,
	0, 752, 754, 174, 722, 759, 134, 166, 0, 0,
	1450, 0, 0, 0, 1549, 1599, 1521, 1522, 0, 1510,
	0, 1504, 1505, 1506, 1511, 0, 0, 781, 776, 64,
	90, 0, 0, 95, 68, 81, 0, 0, 0, 0,
	975, 982, 996, 1127, 1305, 981, 0, 0, 513, 518,
	0, 521, 522, 1038, 1037, 0, 1024, 1025, 0, 1032,
	0, 0, 1117, 1118, 1119, 1229, 1230, 1231, 1187, 1135,
	0, -2, 1240, 0, 1131, 1153, 1187, 0, 1165, 0,
	1172, 0, 1170, 1163, 799, 688, 1174, 426, 1226, 1216,
	0, 1218, 0, 0, 0, 0, 1197, -2, 0, 1359,
	1361, 1362, 1365, 1366, 1367, 1418, 1419, 1420, 0, 0,
	1370, 1415, 1416, 1417, 1371, 0, 0, 0, 0, 0,
	1718, 1719, 1411, 0, 0, 1330, 1332, 1333, 1334, 1335,
	1336, 1337, 1338, 1331, 0, 0, 0, 1322, 1324, 439,
	0, 0, 1813, 1039, 336, 0, 0, 910, 912, 907,
	908, 108, 110, 125, 0, 760, 165, 0, 761, 136,
	0, 157, 0, 1154, 0, 1461, 0, 0, 0, 1520,
	1507, 0, 0, 0, 0, 0, 1722, 1723, 1724, 0,
	1467, 1471, 0, 89, 0, 66, 0, 82, 83, 0,
	0, 0, 997, 998, 1006, 1007, 0, 1009, 1010, 519,
	1019, 1027, 1031, 1034, 0, 1086, 1189, 0, 1137, 1120,
	1242, 1813, 1140, 1189, 0, 1234, 1813, 1813, 1155, 0,
	1167, 0, 1179, 0, 1173, 794, 419, 0, 1176, 1212,
	1217, 1219, 1221, 0, 1225, 1223, 1198, -2, 0, 1206,
	0, 0, 1368, 1369, 0, 0, 1618, 1813, 0, 1401,
	0, 1086, 1086, 1086, 1086, 0, 491, 449, 0, 887,
	901, 0, 0, 0, 750, 126, 0, 135, 154, 0,
	167, 168, 0, 0, 0, 0, 1146, 0, 1409, 1410,
	0, 1496, 0, 0, 0, 1500, 1501, 1502, 1503, 91,
	0, 65, 68, 0, 0, 0, 974, 0, 1008, 1033,
	1035, 1085, 1130, 0, 1226, 1241, 0, 1132, 1233, 0,
	0, 0, 1166, 1178, 0, 1181, 686, 1175, 1193, 0,
	1222, 1199, 1207, 0, 1202, 0, 0, 0, 1414, 0,
	1375, 0, 1380, 1389, 1402, 0, 0, 1311, 0, 1313,
	0, 1317, 0, 1319, 0, 0, 451, 911, 913, 0,
	763, 753, 137, 141, 0, 163, 160, 0, 169, 0,
	0, 0, 0, 1142, 0, 1407, 0, 1497, 1498, 1499,
	0, 67, 69, 84, 0, 976, 977, 990, 1087, 1813,
	1813, 0, 0, 0, 1093, 1094, 0, 1214, 1246, 1235,
	1236, 1237, 1180, 1213, 1201, 0, -2, 1209, 0, 0,
	1670, 1680, 1681, 1373, 1379, 1388, 1390, 1391, 0, 1403,
	1404, 1405, 1412, 1086, 1086, 1086, 1086, 1321, 762, 0,
	128, 0, 0, 158, 159, 161, 0, 170, 0, 172,
	173, 0, 0, 1508, 92, 978, 0, 0, 1090, 1091,
	0, 1190, 0, 1192, 1203, -2, 0, 1211, 0, 1374,
	1392, 0, 1393, 0, 0, 0, 1312, 1314, 1318, 1320,
	764, 1152, 0, 142, 0, 144, 146, 147, 1345, 155,
	156, 162, 171, 0, 0, 963, 979, 0, 1088, 1089,
	1092, 0, 1194, 1210, 1671, 1394, 1396, 1397, 0, 0,
	1395, 129, 130, 0, 143, 0, 0, 1147, 1408, 980,
	1191, 1188, 1398, 1400, 1399, 0, 0, 145, 1346, 131,
	132, 133, 0, 1347,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 642, 639,
	126, 125, 127, 3, 643, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 640, 138, 641, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:827
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:834
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:840
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:848
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:854
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:858
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:873
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:877
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:883
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:888
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:892
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:925
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:939
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:950
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:962
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:966
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:971
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:975
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:981
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    yyDollar[4].str,
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:995
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:999
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1003
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1007
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1014
		{
			yyLOCAL = &tree.ShowCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1023
		{
			yyLOCAL = &tree.PauseCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1032
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].str, yyDollar[4].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1038
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1045
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1054
		{
			yyLOCAL = &tree.ResumeCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1063
		{
			yyLOCAL = &tree.RestartCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1072
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1082
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1092
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1104
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1114
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1124
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1135
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1146
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1160
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1168
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1176
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1184
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1193
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1203
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1212
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELDATABASE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[11].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1222
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELTABLE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:     tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[10].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[13].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1235
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1243
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1252
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1262
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1272
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1282
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1302
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1308
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1315
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1323
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1329
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1338
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1348
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1356
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1364
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1372
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1382
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1390
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1400
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1407
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1416
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1426
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1430
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1436
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1440
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1446
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1455
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1465
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1469
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1475
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1484
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1488
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1494
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1515
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1529
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1536
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1540
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1546
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1550
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1556
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1563
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1571
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1575
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1587
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1591
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1605
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1609
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1614
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1621
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1625
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1629
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1635
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1644
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1655
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1659
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1665
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1669
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1675
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1679
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1685
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1709
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1728
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1732
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1736
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1741
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1745
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1754
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1764
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1771
		{
			yyVAL.str = yyDollar[3].str
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1776
		{
			yyVAL.str = "\n"
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1783
		{
			yyVAL.str = yyDollar[3].str
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1788
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1792
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1820
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1824
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1830
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1838
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1858
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1877
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1902
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1906
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1910
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1915
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1919
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1925
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1938
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1949
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1962
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1966
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1976
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1989
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2002
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2008
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2014
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2022
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2032
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2042
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2046
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2050
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2054
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2058
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2062
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2069
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2073
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2079
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2086
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2095
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2099
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2105
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2109
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2113
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2117
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2121
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2125
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2129
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2133
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2137
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2141
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2145
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2149
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2153
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2157
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2161
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2165
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2169
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2173
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2177
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2181
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2185
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2189
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2193
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2197
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2201
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2205
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2209
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2213
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2217
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2221
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2225
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2229
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2233
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2237
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2241
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2245
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2249
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2253
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2257
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2261
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2265
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2269
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2273
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2277
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2281
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2285
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2289
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2293
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2297
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2301
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2305
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2318
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2325
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2332
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2342
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2346
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2352
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2359
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2367
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2371
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2375
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2379
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2385
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2389
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2395
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2402
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2409
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2418
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2448
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2452
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2456
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2462
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2468
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2472
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2479
		{
			yyVAL.str = yyDollar[3].str
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2485
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2489
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2495
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2503
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2512
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2521
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2529
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2537
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2560
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2583
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2590
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2597
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2605
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2612
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2619
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2628
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2632
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2636
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2642
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2646
		{
			yyVAL.str = yyDollar[1].str
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2652
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2656
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2662
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2666
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2677
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2683
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2688
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2692
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2696
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2700
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2704
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2708
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2712
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2716
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2720
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2726
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2730
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2734
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2738
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2743
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2748
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2754
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2767
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2780
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2793
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2806
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2822
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2829
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2840
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2851
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2855
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2861
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2871
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2877
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2881
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2887
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2893
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2897
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2901
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2905
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2911
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2924
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2930
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2934
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2940
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2944
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2950
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2956
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2967
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2973
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2977
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2981
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2985
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2989
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2993
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3001
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3009
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3019
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3031
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3035
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3043
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3051
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3090
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3094
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3100
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3106
		{
			yyVAL.str = yyDollar[1].str
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3111
		{
			yyVAL.str = "true"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3112
		{
			yyVAL.str = "false"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3113
		{
			yyVAL.str = yyDollar[1].str
		}
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3118
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3124
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3133
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3140
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3148
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3152
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3176
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3199
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3209
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3216
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3225
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3229
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3235
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3239
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3263
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3273
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3283
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3299
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3317
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3321
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3327
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3331
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3337
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3343
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3351
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3361
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3369
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3379
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3389
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3399
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3406
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3410
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3414
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3418
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3422
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3429
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3435
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3439
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3443
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3447
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3451
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3455
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3459
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3463
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3468
		{
			yyVAL.str = ""
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3499
		{
			yyVAL.str = ""
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3503
		{
			yyVAL.str = string("COLUMN")
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3508
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3514
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3520
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3528
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3532
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3538
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3546
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3553
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3559
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3565
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3571
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3577
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3584
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3591
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3599
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3605
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3617
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3623
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3631
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3635
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3642
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3660
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3675
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3690
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3705
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3718
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3724
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3735
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3748
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3752
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3760
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3764
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3769
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3773
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3789
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3793
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3797
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3801
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3808
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3812
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3816
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3820
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3827
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3831
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3838
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3842
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3846
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3850
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3857
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3864
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3870
		{
			yyVAL.item = nil
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3875
		{
			yyVAL.item = nil
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3920
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3929
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3937
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3945
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3953
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3957
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3961
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				&tree.Role{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3972
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3976
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3982
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3987
		{
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3991
		{
		}
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3996
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4006
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4016
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4024
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4030
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4036
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4042
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4048
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4054
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4060
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4069
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4073
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4077
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4081
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4085
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4089
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4093
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4097
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4103
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4112
		{
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4114
		{
		}
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4123
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4133
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4142
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4146
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4150
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4156
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4162
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4168
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4174
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4183
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4194
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4206
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4214
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4220
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4232
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4246
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4252
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4258
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4265
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4269
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4274
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4278
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4282
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4287
		{
			yyVAL.str = ""
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4291
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4297
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4312
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4316
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4322
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4330
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4337
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4345
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4351
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4357
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4362
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4370
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4376
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4381
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4387
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4393
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4397
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4425
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4433
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4441
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4449
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4453
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4459
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4472
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4480
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4489
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4495
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4503
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4511
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4519
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4525
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4533
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4539
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4547
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4553
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4563
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4568
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4575
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4591
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4604
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4615
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4619
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4625
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4631
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4640
		{
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4642
		{
		}
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4645
		{
		}
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4654
		{
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4658
		{
		}
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4663
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4672
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4679
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4685
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4693
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4700
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4707
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4727
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4735
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4745
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4749
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4755
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4762
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4768
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4776
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4783
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4790
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4809
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4813
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4817
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4822
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4826
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4830
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4836
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4845
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4849
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4855
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4859
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4865
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4869
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4875
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4880
		{
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4884
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4891
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4895
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4902
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4907
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4911
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4917
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4921
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4927
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4931
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4936
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4940
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4953
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4964
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4975
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4997
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5020
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5028
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5037
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5041
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5054
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5058
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5063
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5067
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5074
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5079
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5086
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5092
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5096
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5100
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5104
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5108
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5112
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5117
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5121
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5127
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5137
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5152
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5156
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5170
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5174
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5180
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5189
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5193
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5197
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5201
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5205
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5211
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5218
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5227
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5231
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5237
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5245
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5249
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5254
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5258
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5264
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5268
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5272
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5277
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5281
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5287
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5293
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5297
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5303
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5308
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5312
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5316
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5321
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5325
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5329
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5334
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5338
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5346
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5350
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5354
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5368
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5372
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5382
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5392
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5402
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5414
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5422
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5430
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5439
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5447
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5455
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5463
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5471
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5479
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5487
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5495
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5503
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5513
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5524
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5538
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5542
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5546
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5551
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5555
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5559
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5568
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5572
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5577
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5581
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5586
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5590
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5596
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5600
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5606
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5610
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5614
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5618
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5623
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5631
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5637
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5645
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5653
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5663
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5669
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5678
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5687
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5696
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5706
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5710
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5720
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5724
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5728
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 872:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5732
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 873:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5738
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5748
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5752
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5758
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5764
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5768
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5774
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5780
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5784
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5788
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5792
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 884:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5798
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5802
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5808
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5812
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5818
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5822
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5828
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5832
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5842
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5855
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5861
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5867
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5881
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5892
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5899
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5903
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5909
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5919
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5923
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5927
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5932
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5936
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5940
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5944
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5949
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5953
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5957
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5961
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5965
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5970
		{
			yyVAL.str = ""
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5974
		{
			yyVAL.str = yyDollar[1].str
		}
	case 916:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5978
		{
			yyVAL.str = yyDollar[2].str
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5984
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5988
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 919:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5993
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5997
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6001
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6005
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6009
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6015
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 947:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6057
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6070
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6076
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 950:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6082
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6095
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6100
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6107
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6114
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6118
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6124
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6130
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6135
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6139
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6143
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6147
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6154
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6187
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6192
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6199
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6206
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6210
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6216
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6222
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6226
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6230
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6236
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6242
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6248
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6252
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6258
		{
			yyVAL.str = ""
		}
	case 980:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6265
		{
			yyVAL.str = yyDollar[2].str
		}
	case 981:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6271
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6286
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6303
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6320
		{
			yyVAL.str = yyDollar[1].str
		}
	case 985:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6324
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 986:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6330
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 987:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6334
		{
			yyVAL.str = "DEFINER = "
		}
	case 988:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6338
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 989:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6343
		{
			yyVAL.str = ""
		}
	case 990:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6347
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 996:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6361
		{
			yyVAL.str = ""
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6369
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6375
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6380
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6386
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6399
		{
			var Str = yyDollar[1].str
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6404
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6409
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6415
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6422
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6429
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6436
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6443
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6451
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6457
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6464
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6471
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6479
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6485
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6494
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6511
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6527
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6546
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6552
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6561
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6579
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6585
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6592
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6600
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6606
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6614
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6620
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6628
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6634
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6643
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6647
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6652
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6656
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6663
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6668
		{
			yyVAL.str = ""
		}
	case 1038:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6672
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1039:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6678
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6691
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6702
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6706
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6712
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6718
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6724
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6731
		{
			yyVAL.str = ""
		}
	case 1047:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6735
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1048:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6740
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6744
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6750
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6758
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6766
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6774
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6782
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1055:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6787
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6799
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6810
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6919
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6923
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6929
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6942
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6946
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6952
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6965
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6969
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6973
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6978
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6982
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6988
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6995
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7001
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7010
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1074:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7017
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7028
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7032
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7038
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7047
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7051
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7055
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7060
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7064
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7068
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7072
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7078
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7109
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7113
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7139
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7145
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7157
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7163
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7169
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7175
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7181
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7189
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7193
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7199
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7213
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7227
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7231
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7235
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7239
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7243
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7247
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7251
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7257
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7272
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7276
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7287
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7291
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7296
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7300
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7306
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7310
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7316
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7325
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7334
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7340
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7344
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7350
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7361
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7367
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7385
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7403
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7421
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7437
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7441
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7450
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7462
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7471
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7483
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7493
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7503
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7514
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7524
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7535
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7543
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7554
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7561
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7571
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7584
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7592
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7601
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7610
		{
			yyVAL.str = ""
		}
	case 1147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7614
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7620
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7624
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7629
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7633
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7640
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7652
		{
			yyVAL.str = ""
		}
	case 1154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7656
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1155:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7662
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7683
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7697
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7701
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7705
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7711
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7715
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7722
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7729
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7736
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7743
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7747
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7751
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7755
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7759
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7766
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7773
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7777
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7784
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7791
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7795
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7801
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7807
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7811
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7818
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7825
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7832
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7839
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7843
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7848
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7852
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7856
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7861
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7865
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7878
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7882
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7890
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7898
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7902
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7914
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7918
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7924
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7928
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7934
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7947
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7961
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7965
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7971
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7975
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7981
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7990
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8001
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8005
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8010
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8014
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8020
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8025
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8033
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8037
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8047
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8051
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8062
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8070
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8078
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8086
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8097
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8106
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8116
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8126
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8130
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8135
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8139
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8145
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8149
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8155
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8164
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8174
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8178
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8184
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8188
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8194
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8203
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8213
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8217
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8223
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8227
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8231
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8237
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8241
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8245
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8249
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8253
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8257
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8261
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8266
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8270
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8274
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8278
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8282
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8286
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8290
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8294
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8298
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8302
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8306
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8310
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8314
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8320
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8326
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8330
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8334
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8338
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8342
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8348
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8354
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8360
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8366
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8372
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8378
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8382
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8386
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8390
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8397
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8401
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8407
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8418
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8422
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1283:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8428
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8432
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8436
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8440
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8444
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8448
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8462
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8466
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8475
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8481
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8489
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8493
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8500
		{
			var Str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8509
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8517
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8525
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8532
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8536
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8542
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8546
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8550
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8556
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8560
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8566
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8579
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8592
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8631
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8671
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8685
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8691
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8704
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8717
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8730
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8743
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8758
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8768
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8774
		{
			yyVAL.str = ""
		}
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8778
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1329:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8788
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8794
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8800
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8821
		{
			yyVAL.str = ""
		}
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8825
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8831
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8837
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8841
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8846
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8854
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8858
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8862
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8866
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8872
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8878
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8882
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8887
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8894
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8898
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8904
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8908
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8914
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8918
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8922
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8926
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8930
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8934
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8939
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8943
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8947
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8951
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8955
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8959
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8963
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8967
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8971
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8975
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8989
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8993
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8997
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9001
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9005
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9009
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9015
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9019
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9024
		{
			yyVAL.str = ""
		}
	case 1385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9028
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9034
		{
			yyVAL.str = ""
		}
	case 1387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9038
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1388:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9044
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9061
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9068
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9075
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9082
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9089
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9098
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9104
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9110
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9114
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9118
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9122
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9126
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9131
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9138
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9142
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9146
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9151
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9155
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9159
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9163
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9167
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9172
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9176
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9181
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9185
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9201
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9207
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9211
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9215
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9219
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9223
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9227
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9231
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9235
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9239
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9243
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9247
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9251
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9255
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9261
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9265
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9269
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9273
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9277
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9281
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9285
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9289
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9293
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9297
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9339
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9343
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9347
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9352
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9360
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9364
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9368
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9372
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9376
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9386
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9390
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9394
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9398
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9402
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9406
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9410
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9414
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9427
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9433
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9442
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9451
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9462
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9472
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9482
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9491
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9501
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9511
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9521
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9530
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9540
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9544
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9549
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9553
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9559
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9563
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9569
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9578
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9590
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9607
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9624
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9637
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9650
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9662
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9676
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9691
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9706
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9723
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9738
		{
		}
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9745
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9749
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9753
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9759
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9763
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9767
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9771
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9777
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9781
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9785
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9791
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9799
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9809
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9813
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9820
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9825
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9829
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9834
		{
			yyVAL.str = ","
		}
	case 1515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9838
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9843
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9847
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1518:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9852
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9859
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9885
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9897
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9909
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9920
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9931
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9942
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9952
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9962
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9973
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9984
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9995
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10006
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10017
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10028
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10039
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10050
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10061
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10072
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10083
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10094
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10105
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10116
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10134
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10143
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10152
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10161
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10170
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10181
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10190
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10200
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10209
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10218
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10227
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10236
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10248
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10259
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10272
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10284
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10307
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1597:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10343
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10356
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10369
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10381
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10390
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10398
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10406
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10419
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10428
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10439
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10450
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10459
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10471
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10481
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10491
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10500
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10511
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10520
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10530
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10539
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10548
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10558
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10562
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10568
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10572
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10591
		{
		}
	case 1629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10593
		{
		}
	case 1663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10634
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10646
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10650
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10654
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10660
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10665
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10669
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10675
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10679
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10685
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10689
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10696
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10700
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10704
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10713
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10717
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10721
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10726
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10730
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10736
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10740
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10744
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10748
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10752
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10756
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10760
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10764
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10768
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10772
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10780
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10784
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10788
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10792
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10796
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10800
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10804
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10808
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10812
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10816
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10822
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10826
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10832
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10836
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10843
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10847
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10851
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10857
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10861
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10865
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10869
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10873
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10877
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10881
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10887
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10891
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10895
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10899
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10905
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10918
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10923
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10929
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10933
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10946
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10951
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10955
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10959
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10963
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10967
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10974
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10978
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10982
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10986
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10993
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11004
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11009
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11015
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11027
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11039
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11051
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11064
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11077
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11090
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11103
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11116
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11129
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11142
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11155
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11168
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11181
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11196
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11223
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11265
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11301
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11337
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11354
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11366
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11386
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11406
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11426
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11442
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11455
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11468
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11481
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11494
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11506
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11518
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11530
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11542
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11554
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11566
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11578
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11590
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11602
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11614
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11627
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11640
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11653
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11666
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11681
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11689
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11698
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11708
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11731
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11736
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11742
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11749
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11753
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11758
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11762
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11768
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11774
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11781
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11788
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11797
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11804
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11811
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11820
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11824
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11828
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11834
		{
		}
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11836
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11846
		{
			yyVAL.str = ""
		}
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11850
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
