// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const SNAPSHOTS = 57437
const INTEGRAL = 57438
const HEX = 57439
const FLOAT = 57440
const HEXNUM = 57441
const BIT_LITERAL = 57442
const NULL = 57443
const TRUE = 57444
const FALSE = 57445
const LOWER_THAN_CHARSET = 57446
const CHARSET = 57447
const UNIQUE = 57448
const KEY = 57449
const OR = 57450
const PIPE_CONCAT = 57451
const XOR = 57452
const AND = 57453
const NOT = 57454
const BETWEEN = 57455
const CASE = 57456
const WHEN = 57457
const THEN = 57458
const ELSE = 57459
const END = 57460
const ELSEIF = 57461
const LOWER_THAN_EQ = 57462
const LE = 57463
const GE = 57464
const NE = 57465
const NULL_SAFE_EQUAL = 57466
const IS = 57467
const LIKE = 57468
const REGEXP = 57469
const IN = 57470
const ASSIGNMENT = 57471
const ILIKE = 57472
const SHIFT_LEFT = 57473
const SHIFT_RIGHT = 57474
const DIV = 57475
const MOD = 57476
const UNARY = 57477
const COLLATE = 57478
const BINARY = 57479
const UNDERSCORE_BINARY = 57480
const INTERVAL = 57481
const OUT = 57482
const INOUT = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const WORK = 57489
const CONSISTENT = 57490
const SNAPSHOT = 57491
const CHAIN = 57492
const NO = 57493
const RELEASE = 57494
const PRIORITY = 57495
const QUICK = 57496
const BIT = 57497
const TINYINT = 57498
const SMALLINT = 57499
const MEDIUMINT = 57500
const INT = 57501
const INTEGER = 57502
const BIGINT = 57503
const INTNUM = 57504
const REAL = 57505
const DOUBLE = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const DECIMAL_VALUE = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const UUID = 57531
const VECF32 = 57532
const VECF64 = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const INT1 = 57542
const INT2 = 57543
const INT3 = 57544
const INT4 = 57545
const INT8 = 57546
const S3OPTION = 57547
const STAGEOPTION = 57548
const SQL_SMALL_RESULT = 57549
const SQL_BIG_RESULT = 57550
const SQL_BUFFER_RESULT = 57551
const LOW_PRIORITY = 57552
const HIGH_PRIORITY = 57553
const DELAYED = 57554
const CREATE = 57555
const ALTER = 57556
const DROP = 57557
const RENAME = 57558
const ANALYZE = 57559
const ADD = 57560
const RETURNS = 57561
const SCHEMA = 57562
const TABLE = 57563
const SEQUENCE = 57564
const INDEX = 57565
const VIEW = 57566
const TO = 57567
const IGNORE = 57568
const IF = 57569
const PRIMARY = 57570
const COLUMN = 57571
const CONSTRAINT = 57572
const SPATIAL = 57573
const FULLTEXT = 57574
const FOREIGN = 57575
const KEY_BLOCK_SIZE = 57576
const SHOW = 57577
const DESCRIBE = 57578
const EXPLAIN = 57579
const DATE = 57580
const ESCAPE = 57581
const REPAIR = 57582
const OPTIMIZE = 57583
const TRUNCATE = 57584
const MAXVALUE = 57585
const PARTITION = 57586
const REORGANIZE = 57587
const LESS = 57588
const THAN = 57589
const PROCEDURE = 57590
const TRIGGER = 57591
const STATUS = 57592
const VARIABLES = 57593
const ROLE = 57594
const PROXY = 57595
const AVG_ROW_LENGTH = 57596
const STORAGE = 57597
const DISK = 57598
const MEMORY = 57599
const CHECKSUM = 57600
const COMPRESSION = 57601
const DATA = 57602
const DIRECTORY = 57603
const DELAY_KEY_WRITE = 57604
const ENCRYPTION = 57605
const ENGINE = 57606
const MAX_ROWS = 57607
const MIN_ROWS = 57608
const PACK_KEYS = 57609
const ROW_FORMAT = 57610
const STATS_AUTO_RECALC = 57611
const STATS_PERSISTENT = 57612
const STATS_SAMPLE_PAGES = 57613
const DYNAMIC = 57614
const COMPRESSED = 57615
const REDUNDANT = 57616
const COMPACT = 57617
const FIXED = 57618
const COLUMN_FORMAT = 57619
const AUTO_RANDOM = 57620
const ENGINE_ATTRIBUTE = 57621
const SECONDARY_ENGINE_ATTRIBUTE = 57622
const INSERT_METHOD = 57623
const RESTRICT = 57624
const CASCADE = 57625
const ACTION = 57626
const PARTIAL = 57627
const SIMPLE = 57628
const CHECK = 57629
const ENFORCED = 57630
const RANGE = 57631
const LIST = 57632
const ALGORITHM = 57633
const LINEAR = 57634
const PARTITIONS = 57635
const SUBPARTITION = 57636
const SUBPARTITIONS = 57637
const CLUSTER = 57638
const TYPE = 57639
const ANY = 57640
const SOME = 57641
const EXTERNAL = 57642
const LOCALFILE = 57643
const URL = 57644
const PREPARE = 57645
const DEALLOCATE = 57646
const RESET = 57647
const EXTENSION = 57648
const INCREMENT = 57649
const CYCLE = 57650
const MINVALUE = 57651
const PUBLICATION = 57652
const SUBSCRIPTIONS = 57653
const PUBLICATIONS = 57654
const PROPERTIES = 57655
const PARSER = 57656
const VISIBLE = 57657
const INVISIBLE = 57658
const BTREE = 57659
const HASH = 57660
const RTREE = 57661
const BSI = 57662
const IVFFLAT = 57663
const MASTER = 57664
const ZONEMAP = 57665
const LEADING = 57666
const BOTH = 57667
const TRAILING = 57668
const UNKNOWN = 57669
const LISTS = 57670
const OP_TYPE = 57671
const REINDEX = 57672
const EXPIRE = 57673
const ACCOUNT = 57674
const ACCOUNTS = 57675
const UNLOCK = 57676
const DAY = 57677
const NEVER = 57678
const PUMP = 57679
const MYSQL_COMPATIBILITY_MODE = 57680
const MODIFY = 57681
const CHANGE = 57682
const SECOND = 57683
const ASCII = 57684
const COALESCE = 57685
const COLLATION = 57686
const HOUR = 57687
const MICROSECOND = 57688
const MINUTE = 57689
const MONTH = 57690
const QUARTER = 57691
const REPEAT = 57692
const REVERSE = 57693
const ROW_COUNT = 57694
const WEEK = 57695
const REVOKE = 57696
const FUNCTION = 57697
const PRIVILEGES = 57698
const TABLESPACE = 57699
const EXECUTE = 57700
const SUPER = 57701
const GRANT = 57702
const OPTION = 57703
const REFERENCES = 57704
const REPLICATION = 57705
const SLAVE = 57706
const CLIENT = 57707
const USAGE = 57708
const RELOAD = 57709
const FILE = 57710
const TEMPORARY = 57711
const ROUTINE = 57712
const EVENT = 57713
const SHUTDOWN = 57714
const NULLX = 57715
const AUTO_INCREMENT = 57716
const APPROXNUM = 57717
const SIGNED = 57718
const UNSIGNED = 57719
const ZEROFILL = 57720
const ENGINES = 57721
const LOW_CARDINALITY = 57722
const AUTOEXTEND_SIZE = 57723
const ADMIN_NAME = 57724
const RANDOM = 57725
const SUSPEND = 57726
const ATTRIBUTE = 57727
const HISTORY = 57728
const REUSE = 57729
const CURRENT = 57730
const OPTIONAL = 57731
const FAILED_LOGIN_ATTEMPTS = 57732
const PASSWORD_LOCK_TIME = 57733
const UNBOUNDED = 57734
const SECONDARY = 57735
const RESTRICTED = 57736
const USER = 57737
const IDENTIFIED = 57738
const CIPHER = 57739
const ISSUER = 57740
const X509 = 57741
const SUBJECT = 57742
const SAN = 57743
const REQUIRE = 57744
const SSL = 57745
const NONE = 57746
const PASSWORD = 57747
const SHARED = 57748
const EXCLUSIVE = 57749
const MAX_QUERIES_PER_HOUR = 57750
const MAX_UPDATES_PER_HOUR = 57751
const MAX_CONNECTIONS_PER_HOUR = 57752
const MAX_USER_CONNECTIONS = 57753
const FORMAT = 57754
const VERBOSE = 57755
const CONNECTION = 57756
const TRIGGERS = 57757
const PROFILES = 57758
const LOAD = 57759
const INLINE = 57760
const INFILE = 57761
const TERMINATED = 57762
const OPTIONALLY = 57763
const ENCLOSED = 57764
const ESCAPED = 57765
const STARTING = 57766
const LINES = 57767
const ROWS = 57768
const IMPORT = 57769
const DISCARD = 57770
const JSONTYPE = 57771
const MODUMP = 57772
const OVER = 57773
const PRECEDING = 57774
const FOLLOWING = 57775
const GROUPS = 57776
const DATABASES = 57777
const TABLES = 57778
const SEQUENCES = 57779
const EXTENDED = 57780
const FULL = 57781
const PROCESSLIST = 57782
const FIELDS = 57783
const COLUMNS = 57784
const OPEN = 57785
const ERRORS = 57786
const WARNINGS = 57787
const INDEXES = 57788
const SCHEMAS = 57789
const NODE = 57790
const LOCKS = 57791
const ROLES = 57792
const TABLE_NUMBER = 57793
const COLUMN_NUMBER = 57794
const TABLE_VALUES = 57795
const TABLE_SIZE = 57796
const NAMES = 57797
const GLOBAL = 57798
const PERSIST = 57799
const SESSION = 57800
const ISOLATION = 57801
const LEVEL = 57802
const READ = 57803
const WRITE = 57804
const ONLY = 57805
const REPEATABLE = 57806
const COMMITTED = 57807
const UNCOMMITTED = 57808
const SERIALIZABLE = 57809
const LOCAL = 57810
const EVENTS = 57811
const PLUGINS = 57812
const CURRENT_TIMESTAMP = 57813
const DATABASE = 57814
const CURRENT_TIME = 57815
const LOCALTIME = 57816
const LOCALTIMESTAMP = 57817
const UTC_DATE = 57818
const UTC_TIME = 57819
const UTC_TIMESTAMP = 57820
const REPLACE = 57821
const CONVERT = 57822
const SEPARATOR = 57823
const TIMESTAMPDIFF = 57824
const CURRENT_DATE = 57825
const CURRENT_USER = 57826
const CURRENT_ROLE = 57827
const SECOND_MICROSECOND = 57828
const MINUTE_MICROSECOND = 57829
const MINUTE_SECOND = 57830
const HOUR_MICROSECOND = 57831
const HOUR_SECOND = 57832
const HOUR_MINUTE = 57833
const DAY_MICROSECOND = 57834
const DAY_SECOND = 57835
const DAY_MINUTE = 57836
const DAY_HOUR = 57837
const YEAR_MONTH = 57838
const SQL_TSI_HOUR = 57839
const SQL_TSI_DAY = 57840
const SQL_TSI_WEEK = 57841
const SQL_TSI_MONTH = 57842
const SQL_TSI_QUARTER = 57843
const SQL_TSI_YEAR = 57844
const SQL_TSI_SECOND = 57845
const SQL_TSI_MINUTE = 57846
const RECURSIVE = 57847
const CONFIG = 57848
const DRAINER = 57849
const SOURCE = 57850
const STREAM = 57851
const HEADERS = 57852
const CONNECTOR = 57853
const CONNECTORS = 57854
const DAEMON = 57855
const PAUSE = 57856
const CANCEL = 57857
const TASK = 57858
const RESUME = 57859
const MATCH = 57860
const AGAINST = 57861
const BOOLEAN = 57862
const LANGUAGE = 57863
const WITH = 57864
const QUERY = 57865
const EXPANSION = 57866
const WITHOUT = 57867
const VALIDATION = 57868
const UPGRADE = 57869
const RETRY = 57870
const ADDDATE = 57871
const BIT_AND = 57872
const BIT_OR = 57873
const BIT_XOR = 57874
const CAST = 57875
const COUNT = 57876
const APPROX_COUNT = 57877
const APPROX_COUNT_DISTINCT = 57878
const SERIAL_EXTRACT = 57879
const APPROX_PERCENTILE = 57880
const CURDATE = 57881
const CURTIME = 57882
const DATE_ADD = 57883
const DATE_SUB = 57884
const EXTRACT = 57885
const GROUP_CONCAT = 57886
const MAX = 57887
const MID = 57888
const MIN = 57889
const NOW = 57890
const POSITION = 57891
const SESSION_USER = 57892
const STD = 57893
const STDDEV = 57894
const MEDIAN = 57895
const CLUSTER_CENTERS = 57896
const KMEANS = 57897
const STDDEV_POP = 57898
const STDDEV_SAMP = 57899
const SUBDATE = 57900
const SUBSTR = 57901
const SUBSTRING = 57902
const SUM = 57903
const SYSDATE = 57904
const SYSTEM_USER = 57905
const TRANSLATE = 57906
const TRIM = 57907
const VARIANCE = 57908
const VAR_POP = 57909
const VAR_SAMP = 57910
const AVG = 57911
const RANK = 57912
const ROW_NUMBER = 57913
const DENSE_RANK = 57914
const BIT_CAST = 57915
const BITMAP_BIT_POSITION = 57916
const BITMAP_BUCKET_NUMBER = 57917
const BITMAP_COUNT = 57918
const BITMAP_CONSTRUCT_AGG = 57919
const BITMAP_OR_AGG = 57920
const NEXTVAL = 57921
const SETVAL = 57922
const CURRVAL = 57923
const LASTVAL = 57924
const ARROW = 57925
const ROW = 57926
const OUTFILE = 57927
const HEADER = 57928
const MAX_FILE_SIZE = 57929
const FORCE_QUOTE = 57930
const PARALLEL = 57931
const UNUSED = 57932
const BINDINGS = 57933
const DO = 57934
const DECLARE = 57935
const LOOP = 57936
const WHILE = 57937
const LEAVE = 57938
const ITERATE = 57939
const UNTIL = 57940
const CALL = 57941
const PREV = 57942
const SLIDING = 57943
const FILL = 57944
const SPBEGIN = 57945
const BACKEND = 57946
const SERVERS = 57947
const HANDLER = 57948
const PERCENT = 57949
const SAMPLE = 57950
const MO_TS = 57951
const KILL = 57952
const BACKUP = 57953
const FILESYSTEM = 57954
const PARALLELISM = 57955
const QUERY_RESULT = 57956

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:11961

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 122,
	11, 724,
	22, 724,
	-2, 717,
	-1, 142,
	238, 1123,
	240, 1023,
	-2, 1070,
	-1, 167,
	43, 549,
	240, 549,
	267, 556,
	268, 556,
	463, 549,
	-2, 584,
	-1, 208,
	635, 1880,
	-2, 462,
	-1, 508,
	635, 1998,
	-2, 351,
	-1, 566,
	635, 2057,
	-2, 349,
	-1, 567,
	635, 2058,
	-2, 350,
	-1, 568,
	635, 2059,
	-2, 352,
	-1, 698,
	319, 137,
	435, 137,
	436, 137,
	-2, 1785,
	-1, 764,
	82, 1572,
	-2, 1935,
	-1, 765,
	82, 1590,
	-2, 1906,
	-1, 769,
	82, 1591,
	-2, 1934,
	-1, 802,
	82, 1499,
	-2, 2130,
	-1, 803,
	82, 1500,
	-2, 2129,
	-1, 804,
	82, 1501,
	-2, 2119,
	-1, 805,
	82, 2091,
	-2, 2112,
	-1, 806,
	82, 2092,
	-2, 2113,
	-1, 807,
	82, 2093,
	-2, 2121,
	-1, 808,
	82, 2094,
	-2, 2101,
	-1, 809,
	82, 2095,
	-2, 2110,
	-1, 810,
	82, 2096,
	-2, 2122,
	-1, 811,
	82, 2097,
	-2, 2123,
	-1, 812,
	82, 2098,
	-2, 2128,
	-1, 813,
	82, 2099,
	-2, 2133,
	-1, 814,
	82, 2100,
	-2, 2134,
	-1, 815,
	82, 1568,
	-2, 1972,
	-1, 816,
	82, 1569,
	-2, 1769,
	-1, 817,
	82, 1570,
	-2, 1981,
	-1, 818,
	82, 1571,
	-2, 1778,
	-1, 820,
	82, 1574,
	-2, 1786,
	-1, 821,
	82, 1575,
	-2, 2005,
	-1, 823,
	82, 1578,
	-2, 1805,
	-1, 825,
	82, 1580,
	-2, 2017,
	-1, 826,
	82, 1581,
	-2, 2016,
	-1, 827,
	82, 1582,
	-2, 1849,
	-1, 828,
	82, 1583,
	-2, 1930,
	-1, 831,
	82, 1586,
	-2, 2028,
	-1, 833,
	82, 1588,
	-2, 2031,
	-1, 834,
	82, 1589,
	-2, 2033,
	-1, 835,
	82, 1592,
	-2, 2041,
	-1, 836,
	82, 1593,
	-2, 1915,
	-1, 837,
	82, 1594,
	-2, 1960,
	-1, 838,
	82, 1595,
	-2, 1925,
	-1, 839,
	82, 1596,
	-2, 1950,
	-1, 850,
	82, 1477,
	-2, 2124,
	-1, 851,
	82, 1478,
	-2, 2125,
	-1, 852,
	82, 1479,
	-2, 2126,
	-1, 939,
	458, 584,
	459, 584,
	-2, 550,
	-1, 986,
	124, 1769,
	135, 1769,
	155, 1769,
	-2, 1743,
	-1, 1101,
	22, 751,
	-2, 700,
	-1, 1207,
	11, 724,
	22, 724,
	-2, 1357,
	-1, 1289,
	22, 751,
	-2, 700,
	-1, 1616,
	82, 1643,
	-2, 1932,
	-1, 1617,
	82, 1644,
	-2, 1933,
	-1, 1771,
	83, 901,
	-2, 907,
	-1, 2200,
	107, 1062,
	151, 1062,
	190, 1062,
	193, 1062,
	280, 1062,
	-2, 1055,
	-1, 2346,
	11, 724,
	22, 724,
	-2, 844,
	-1, 2378,
	83, 1729,
	156, 1729,
	-2, 1917,
	-1, 2379,
	83, 1729,
	156, 1729,
	-2, 1916,
	-1, 2380,
	83, 1705,
	156, 1705,
	-2, 1903,
	-1, 2381,
	83, 1706,
	156, 1706,
	-2, 1908,
	-1, 2382,
	83, 1707,
	156, 1707,
	-2, 1837,
	-1, 2383,
	83, 1708,
	156, 1708,
	-2, 1831,
	-1, 2384,
	83, 1709,
	156, 1709,
	-2, 1759,
	-1, 2385,
	83, 1710,
	156, 1710,
	-2, 1905,
	-1, 2386,
	83, 1711,
	156, 1711,
	-2, 1835,
	-1, 2387,
	83, 1712,
	156, 1712,
	-2, 1830,
	-1, 2388,
	83, 1713,
	156, 1713,
	-2, 1819,
	-1, 2389,
	83, 1729,
	156, 1729,
	-2, 1820,
	-1, 2390,
	83, 1729,
	156, 1729,
	-2, 1821,
	-1, 2392,
	83, 1718,
	156, 1718,
	-2, 1950,
	-1, 2393,
	83, 1696,
	156, 1696,
	-2, 1935,
	-1, 2394,
	83, 1727,
	156, 1727,
	-2, 1906,
	-1, 2395,
	83, 1727,
	156, 1727,
	-2, 1934,
	-1, 2396,
	83, 1727,
	156, 1727,
	-2, 1787,
	-1, 2397,
	83, 1725,
	156, 1725,
	-2, 1925,
	-1, 2398,
	83, 1722,
	156, 1722,
	-2, 1810,
	-1, 2399,
	82, 1677,
	83, 1677,
	156, 1677,
	393, 1677,
	394, 1677,
	395, 1677,
	-2, 1758,
	-1, 2400,
	82, 1678,
	83, 1678,
	156, 1678,
	393, 1678,
	394, 1678,
	395, 1678,
	-2, 1760,
	-1, 2401,
	82, 1679,
	83, 1679,
	156, 1679,
	393, 1679,
	394, 1679,
	395, 1679,
	-2, 1977,
	-1, 2402,
	82, 1681,
	83, 1681,
	156, 1681,
	393, 1681,
	394, 1681,
	395, 1681,
	-2, 1907,
	-1, 2403,
	82, 1683,
	83, 1683,
	156, 1683,
	393, 1683,
	394, 1683,
	395, 1683,
	-2, 1889,
	-1, 2404,
	82, 1685,
	83, 1685,
	156, 1685,
	393, 1685,
	394, 1685,
	395, 1685,
	-2, 1836,
	-1, 2405,
	82, 1687,
	83, 1687,
	156, 1687,
	393, 1687,
	394, 1687,
	395, 1687,
	-2, 1815,
	-1, 2406,
	82, 1688,
	83, 1688,
	156, 1688,
	393, 1688,
	394, 1688,
	395, 1688,
	-2, 1816,
	-1, 2407,
	82, 1690,
	83, 1690,
	156, 1690,
	393, 1690,
	394, 1690,
	395, 1690,
	-2, 1757,
	-1, 2408,
	83, 1732,
	156, 1732,
	393, 1732,
	394, 1732,
	395, 1732,
	-2, 1792,
	-1, 2409,
	83, 1732,
	156, 1732,
	393, 1732,
	394, 1732,
	395, 1732,
	-2, 1806,
	-1, 2410,
	83, 1735,
	156, 1735,
	393, 1735,
	394, 1735,
	395, 1735,
	-2, 1788,
	-1, 2411,
	83, 1735,
	156, 1735,
	393, 1735,
	394, 1735,
	395, 1735,
	-2, 1852,
	-1, 2412,
	83, 1732,
	156, 1732,
	393, 1732,
	394, 1732,
	395, 1732,
	-2, 1873,
	-1, 2613,
	107, 1062,
	151, 1062,
	190, 1062,
	193, 1062,
	280, 1062,
	-2, 1056,
	-1, 2630,
	80, 644,
	156, 644,
	-2, 1236,
	-1, 3025,
	193, 1062,
	304, 1325,
	-2, 1297,
	-1, 3186,
	107, 1062,
	151, 1062,
	190, 1062,
	193, 1062,
	-2, 1179,
	-1, 3188,
	107, 1062,
	151, 1062,
	190, 1062,
	193, 1062,
	-2, 1179,
	-1, 3200,
	80, 644,
	156, 644,
	-2, 1237,
	-1, 3221,
	193, 1062,
	304, 1325,
	-2, 1298,
	-1, 3360,
	107, 1062,
	151, 1062,
	190, 1062,
	193, 1062,
	-2, 1180,
	-1, 3386,
	83, 1141,
	156, 1141,
	-2, 1062,
	-1, 3516,
	83, 1141,
	156, 1141,
	-2, 1062,
	-1, 3662,
	83, 1145,
	156, 1145,
	-2, 1062,
	-1, 3709,
	83, 1146,
	156, 1146,
	-2, 1062,
}

const yyPrivate = 57344

const yyLast = 48172

var yyAct = [...]int{
	731, 708, 3755, 733, 3729, 2659, 197, 3748, 1856, 3666,
	1596, 3206, 3569, 3300, 3044, 3672, 3665, 3673, 3595, 3516,
	3011, 717, 3554, 2662, 3625, 3235, 3113, 3494, 1592, 2653,
	3515, 710, 3548, 1242, 2469, 3114, 3573, 3348, 3347, 1434,
	3442, 601, 3345, 761, 2656, 1372, 3485, 1102, 985, 3307,
	3414, 1511, 3555, 618, 3557, 624, 624, 3295, 1804, 1378,
	1643, 624, 641, 650, 3173, 3222, 650, 3357, 3020, 2983,
	3329, 2633, 2945, 1599, 3367, 2244, 3189, 3362, 3111, 2766,
	2767, 2765, 2972, 3162, 1947, 2749, 2683, 3022, 706, 2376,
	3040, 3029, 37, 3069, 661, 3191, 182, 2504, 2059, 2017,
	3099, 2828, 2374, 1657, 3079, 2762, 1816, 1427, 2602, 655,
	1944, 2956, 2952, 1962, 1912, 2788, 3028, 2340, 2247, 700,
	2950, 2211, 1093, 2948, 1345, 121, 2943, 2946, 2992, 2947,
	2324, 2179, 2168, 2614, 2042, 2877, 705, 2167, 36, 2446,
	2025, 2277, 2801, 2026, 2018, 914, 1749, 2428, 58, 1990,
	2811, 1507, 2055, 1512, 647, 1940, 1515, 2341, 2054, 1915,
	1343, 1913, 979, 2591, 2685, 1500, 2586, 2329, 1920, 1835,
	2245, 601, 2664, 1846, 2625, 193, 8, 192, 7, 6,
	2210, 1780, 1523, 1595, 2056, 1042, 2372, 1590, 709, 1474,
	617, 1543, 1443, 1413, 2191, 2240, 699, 197, 2066, 197,
	1650, 1033, 1034, 600, 1581, 2537, 2089, 1630, 624, 707,
	1115, 2021, 2006, 718, 2024, 1980, 948, 1526, 1361, 1589,
	1481, 978, 2348, 623, 623, 1412, 27, 633, 1779, 631,
	1815, 636, 23, 1410, 1373, 1776, 1357, 1466, 1658, 664,
	854, 1381, 663, 16, 99, 913, 24, 183, 1473, 14,
	17, 10, 890, 15, 1522, 1287, 649, 173, 179, 33,
	934, 911, 660, 896, 1243, 1175, 1176, 1177, 1174, 1175,
	1176, 1177, 1174, 1175, 1176, 1177, 1174, 2063, 1030, 3479,
	2572, 1312, 1175, 1176, 1177, 1174, 2572, 2073, 646, 1175,
	1176, 1177, 1174, 1029, 2536, 1031, 1175, 1176, 1177, 1174,
	991, 2572, 701, 3203, 2350, 642, 1175, 1176, 1177, 1174,
	3176, 644, 2492, 993, 1349, 645, 629, 2999, 1382, 2429,
	1097, 643, 653, 994, 3106, 2434, 2431, 2432, 2030, 1762,
	1488, 1484, 1025, 1026, 181, 180, 54, 169, 143, 619,
	856, 857, 2166, 1026, 1306, 2927, 2924, 1026, 2459, 1535,
	2929, 2926, 3740, 170, 3225, 620, 1395, 8, 1756, 7,
	162, 1024, 1302, 3293, 171, 2564, 2562, 2824, 2822, 2458,
	1534, 1486, 1175, 1176, 1177, 1174, 631, 1097, 1175, 1176,
	1177, 1174, 1995, 120, 3449, 3443, 3296, 3112, 2039, 3559,
	2020, 1237, 3237, 701, 855, 2904, 2012, 2285, 108, 866,
	3334, 1137, 2478, 3501, 174, 3228, 2566, 3330, 180, 2486,
	3647, 625, 3190, 2060, 180, 1307, 3223, 180, 180, 180,
	2202, 3245, 3246, 1521, 3467, 3606, 1453, 3224, 180, 54,
	169, 143, 180, 1452, 1451, 997, 2620, 1530, 995, 996,
	2902, 180, 54, 169, 143, 1335, 659, 3502, 180, 1318,
	1541, 2760, 180, 967, 180, 54, 169, 143, 2071, 2195,
	3469, 2366, 1172, 1957, 3229, 120, 2849, 1527, 180, 54,
	169, 143, 180, 54, 169, 143, 1308, 174, 2795, 2796,
	1538, 125, 126, 2618, 127, 128, 174, 174, 1529, 2367,
	1391, 1145, 1113, 1392, 1147, 2794, 2836, 174, 957, 2354,
	120, 1540, 2353, 1582, 1924, 2355, 1586, 1414, 867, 1416,
	174, 1925, 1926, 2447, 989, 990, 1564, 174, 1552, 1763,
	1764, 174, 1148, 174, 1379, 1380, 2928, 2925, 1830, 3015,
	1585, 3320, 1110, 2621, 2588, 1165, 845, 174, 844, 846,
	847, 174, 848, 849, 2589, 1377, 3676, 3677, 1369, 1376,
	1379, 1380, 142, 168, 178, 1598, 106, 1170, 3244, 3013,
	2248, 1152, 988, 987, 1153, 3562, 3638, 3561, 3637, 3644,
	3560, 3636, 3697, 2155, 167, 161, 160, 3562, 3561, 1394,
	1317, 60, 3640, 3560, 3546, 3233, 3733, 3734, 3549, 3550,
	3551, 3552, 1155, 2587, 2829, 3115, 3630, 963, 961, 3627,
	962, 3627, 1141, 2830, 1602, 2831, 3446, 3230, 3234, 3232,
	3231, 3115, 2567, 1692, 1587, 1487, 1485, 2075, 2473, 1118,
	1107, 2704, 624, 624, 3170, 1157, 1935, 1143, 1158, 3566,
	3163, 1941, 1931, 624, 1106, 3131, 2067, 1584, 1118, 1146,
	1149, 1577, 163, 164, 165, 3239, 3240, 2965, 2318, 2867,
	3649, 3650, 650, 650, 2594, 624, 1160, 1105, 142, 1573,
	178, 3339, 2190, 3645, 3646, 1142, 2957, 2003, 3319, 1494,
	1493, 2578, 1150, 172, 902, 3247, 3321, 3471, 3472, 695,
	167, 2967, 697, 1168, 1169, 3642, 968, 696, 3461, 1036,
	3462, 2483, 3247, 116, 2865, 1167, 166, 166, 2283, 117,
	3675, 1140, 2962, 2963, 3226, 3294, 3456, 2823, 964, 2753,
	3238, 2072, 2961, 2321, 1955, 1956, 2320, 1215, 2964, 3476,
	1601, 1600, 3336, 2576, 2565, 1404, 2325, 2050, 3043, 1162,
	647, 647, 616, 1319, 3262, 1151, 1156, 3259, 3704, 2981,
	658, 1393, 1144, 3017, 3464, 1367, 1163, 1164, 1099, 3041,
	3042, 1305, 2993, 1132, 1583, 3506, 118, 3478, 3134, 2577,
	3461, 3588, 3462, 1106, 2871, 991, 652, 3583, 2626, 53,
	651, 966, 2758, 2197, 1161, 3463, 3252, 3574, 993, 2571,
	3590, 2030, 3207, 3596, 2061, 2061, 1247, 2658, 994, 3305,
	623, 1096, 3012, 3304, 1246, 1098, 2061, 3303, 1098, 1159,
	3498, 1104, 2078, 2080, 2081, 3214, 2848, 1356, 2460, 1536,
	3766, 3263, 1154, 2847, 1120, 1119, 3464, 904, 55, 905,
	2846, 2654, 2655, 1128, 2658, 2959, 3565, 2062, 3405, 1026,
	2094, 3046, 2074, 1120, 1119, 1026, 1026, 991, 1026, 3310,
	3243, 2295, 1026, 1026, 3500, 1112, 2294, 3463, 965, 648,
	993, 2600, 1123, 175, 176, 1098, 177, 3648, 3394, 3751,
	994, 144, 3400, 1354, 646, 646, 51, 1423, 1422, 1109,
	1111, 2430, 1130, 1121, 1353, 648, 3520, 1489, 1352, 1315,
	618, 642, 642, 2315, 2316, 3470, 1101, 644, 644, 648,
	3597, 645, 645, 648, 1209, 3664, 1129, 643, 643, 3486,
	3021, 1285, 2369, 1094, 1290, 1379, 1380, 2923, 1125, 1126,
	855, 55, 3507, 914, 1371, 1370, 3242, 2286, 3335, 3192,
	2563, 1131, 1211, 1212, 1213, 1214, 2243, 2487, 1608, 1611,
	1612, 119, 40, 1216, 144, 1379, 1380, 55, 52, 1609,
	144, 3291, 5, 144, 144, 144, 2250, 1206, 1313, 123,
	124, 55, 2790, 2792, 144, 55, 3118, 3499, 144, 175,
	176, 2868, 177, 2593, 624, 1942, 1406, 144, 1368, 3018,
	1100, 990, 601, 601, 144, 659, 2958, 1095, 144, 1375,
	144, 601, 601, 2250, 2253, 1438, 1438, 3624, 624, 3473,
	1411, 3641, 2968, 3037, 144, 3457, 3752, 2479, 144, 3458,
	2263, 2705, 1320, 2706, 2707, 3519, 2243, 2266, 2358, 2733,
	650, 1467, 618, 1436, 1436, 1934, 1477, 1477, 2260, 2597,
	2598, 1932, 3045, 1137, 2960, 1440, 3340, 197, 3041, 3042,
	1578, 958, 2281, 2064, 2596, 1327, 601, 1445, 1258, 1259,
	2253, 1348, 2870, 2079, 1333, 2806, 2807, 1355, 2512, 1332,
	1331, 3407, 2090, 1330, 1365, 3415, 3416, 3417, 3421, 3419,
	3420, 3418, 1384, 1385, 2265, 1387, 1388, 3457, 1389, 903,
	1316, 3556, 1405, 3663, 654, 2979, 1085, 1081, 1082, 1083,
	1084, 3156, 2517, 2249, 2516, 2515, 2513, 1519, 2251, 1340,
	1432, 1433, 1524, 1495, 3401, 3402, 3038, 958, 1533, 2606,
	2609, 2610, 2611, 2607, 2608, 2702, 3396, 2264, 2574, 1136,
	3395, 2171, 1289, 958, 960, 2254, 1291, 959, 1311, 2791,
	2249, 2243, 2248, 1562, 2246, 2251, 873, 3749, 3750, 908,
	909, 910, 1402, 906, 1418, 1420, 2238, 1438, 1766, 1438,
	1106, 2280, 2252, 1430, 1431, 1321, 1363, 1364, 1542, 2076,
	2077, 2514, 2879, 2878, 2173, 2172, 1444, 1765, 1767, 702,
	1309, 1310, 2170, 1597, 1322, 1323, 1324, 1325, 1326, 1610,
	1328, 2254, 1557, 1558, 1342, 869, 1334, 872, 2307, 2252,
	960, 875, 874, 959, 3119, 870, 1528, 1396, 1397, 2724,
	2725, 3368, 1539, 1017, 1022, 1023, 960, 1383, 1490, 959,
	1386, 3767, 1468, 2182, 2980, 647, 3634, 1438, 1173, 1498,
	3076, 1501, 1502, 1421, 1137, 1509, 1510, 1572, 1532, 3762,
	2226, 3774, 1503, 1504, 1656, 2259, 2183, 2184, 3757, 2257,
	1175, 1176, 1177, 1174, 2449, 1644, 1514, 1103, 1705, 1518,
	3072, 1517, 994, 2998, 1358, 1362, 1362, 1362, 994, 1446,
	3159, 3133, 629, 2160, 2478, 2338, 1459, 2734, 2736, 2737,
	2738, 2735, 1350, 3746, 1561, 1478, 1465, 3711, 1350, 1358,
	1358, 3050, 1560, 1103, 1479, 3684, 2900, 1618, 1619, 1620,
	1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 2518,
	2519, 1594, 2069, 1641, 1642, 3048, 2933, 3039, 2250, 2253,
	3431, 3758, 2931, 969, 1106, 2193, 3678, 1175, 1176, 1177,
	1174, 3660, 2723, 1768, 2339, 2631, 1575, 1613, 1467, 2632,
	1591, 3616, 1579, 1777, 1438, 1782, 1783, 1758, 1785, 1786,
	624, 1747, 2809, 1690, 3591, 624, 3712, 1545, 1438, 646,
	3712, 1714, 914, 1550, 1551, 1805, 1553, 2124, 3685, 3579,
	2123, 1570, 1438, 2225, 1027, 1028, 642, 2580, 1406, 1032,
	3539, 1983, 644, 641, 2568, 3538, 645, 2468, 1567, 1571,
	3533, 1569, 643, 1750, 1566, 1568, 1565, 1593, 1588, 3482,
	2339, 1704, 1173, 1829, 3661, 1019, 1020, 1021, 1175, 1176,
	1177, 1174, 1836, 1836, 3482, 1406, 3532, 1406, 1406, 1135,
	2339, 624, 624, 3531, 1777, 1906, 3076, 2069, 1438, 1909,
	1910, 1922, 1639, 1640, 1632, 1695, 1696, 1697, 1286, 3530,
	2192, 1784, 3580, 1173, 3510, 601, 2454, 1438, 1711, 3509,
	2254, 1712, 3481, 3540, 2100, 2249, 2243, 2248, 2215, 2246,
	2251, 3268, 2369, 3482, 3216, 2060, 1833, 3182, 1725, 1726,
	859, 860, 861, 862, 2632, 624, 1777, 1438, 1923, 1967,
	2236, 624, 624, 624, 1972, 1973, 2165, 1746, 2159, 3482,
	2158, 1977, 1978, 1979, 3149, 2131, 3482, 1985, 1813, 1814,
	1858, 1753, 1687, 1688, 197, 1691, 1904, 197, 197, 2051,
	197, 1958, 3482, 1706, 2252, 1823, 1824, 2069, 1787, 1719,
	1981, 1839, 2069, 1792, 1953, 3482, 1713, 1781, 1715, 1341,
	1716, 1717, 1718, 1580, 2369, 1834, 1134, 3217, 1936, 3145,
	3183, 1797, 3058, 2785, 1647, 1754, 1928, 1748, 1930, 1424,
	1705, 1705, 2028, 2103, 2543, 1810, 3759, 2535, 1948, 1949,
	3203, 1705, 1705, 1950, 1951, 2494, 3169, 3150, 2044, 2476,
	2813, 2464, 1966, 2456, 2634, 1772, 1807, 1808, 2481, 2451,
	2480, 2443, 1837, 1175, 1176, 1177, 1174, 2472, 2441, 1842,
	1843, 2439, 2231, 1801, 1969, 1970, 1971, 1805, 2119, 1943,
	1994, 1438, 2058, 1997, 1998, 1822, 2000, 1802, 2038, 1812,
	1818, 1781, 3146, 1135, 2437, 3059, 2339, 1827, 864, 2214,
	1773, 1774, 1775, 1817, 2161, 1819, 1820, 1173, 3266, 2102,
	1173, 2104, 1788, 1789, 1790, 1791, 2049, 2138, 1173, 1826,
	2137, 1190, 2215, 1963, 2452, 1528, 2457, 1840, 1841, 1963,
	1963, 1963, 2452, 1911, 2444, 2052, 1908, 2122, 2034, 1903,
	1591, 2442, 2113, 1927, 2438, 1929, 1937, 647, 859, 860,
	861, 862, 1137, 1988, 1975, 991, 2112, 2111, 2068, 1554,
	1806, 1547, 1223, 1122, 1091, 1086, 991, 2438, 993, 1206,
	1952, 1358, 2215, 2023, 2994, 1838, 1965, 2160, 994, 993,
	1821, 994, 1694, 1693, 2023, 1362, 1694, 1693, 3003, 994,
	1173, 1964, 3584, 1173, 1989, 2862, 1828, 1362, 871, 1831,
	1832, 1991, 1400, 1401, 1638, 1403, 1428, 1407, 1408, 1409,
	1173, 1426, 1346, 3369, 3195, 1173, 1347, 1429, 2429, 2008,
	1635, 1637, 1634, 3193, 1636, 1449, 2087, 2088, 3768, 1173,
	1173, 2069, 1555, 3737, 2278, 1359, 3585, 2040, 3480, 1454,
	1455, 1456, 1457, 1458, 3453, 1460, 1461, 1462, 1463, 1464,
	2029, 2995, 2035, 1470, 1471, 1472, 2037, 3370, 3196, 991,
	1193, 1194, 1195, 1196, 1197, 1190, 2048, 3194, 1390, 3398,
	3397, 700, 993, 3383, 624, 624, 624, 1175, 1176, 1177,
	1174, 646, 994, 3341, 2053, 2046, 2047, 3175, 3107, 624,
	624, 624, 624, 1731, 3077, 2996, 864, 1724, 642, 3068,
	3063, 3060, 2212, 2974, 644, 734, 744, 2845, 645, 2844,
	2843, 1425, 2218, 1406, 643, 735, 2083, 736, 740, 743,
	739, 737, 738, 2755, 2604, 2573, 2491, 876, 2082, 1198,
	1199, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1190, 1406,
	2455, 1992, 2084, 2360, 2033, 2085, 2086, 2091, 1632, 2032,
	2096, 2031, 1360, 1337, 1336, 1108, 2272, 1651, 1175, 1176,
	1177, 1174, 3104, 1178, 1175, 1176, 1177, 1174, 1346, 2433,
	741, 1208, 1347, 3105, 2501, 1720, 1721, 1722, 1723, 2423,
	1218, 1727, 1728, 1729, 1730, 1732, 1733, 1734, 1735, 1736,
	1737, 1738, 1739, 1740, 1741, 1651, 1482, 2097, 1992, 2815,
	1177, 1174, 742, 2132, 2133, 1226, 2135, 2279, 1175, 1176,
	1177, 1174, 3635, 2142, 1769, 1174, 3410, 2503, 2343, 2343,
	1922, 2343, 1189, 1188, 1198, 1199, 1191, 1192, 1193, 1194,
	1195, 1196, 1197, 1190, 1175, 1176, 1177, 1174, 3409, 601,
	601, 2126, 2186, 2187, 2188, 2232, 2162, 1106, 2154, 2156,
	2157, 2227, 2832, 1438, 624, 2694, 2692, 2203, 2204, 2205,
	2206, 3389, 1175, 1176, 1177, 1174, 2670, 2176, 2668, 624,
	1247, 2425, 2556, 2242, 2557, 1106, 2413, 618, 1246, 2241,
	2194, 2364, 1477, 3742, 1922, 3342, 3343, 2418, 3741, 2420,
	2115, 3765, 3688, 197, 1175, 1176, 1177, 1174, 2377, 1175,
	1176, 1177, 1174, 1483, 2235, 2284, 3659, 1482, 2287, 2288,
	2289, 2290, 2291, 2292, 2293, 1225, 3337, 2296, 2297, 2298,
	2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 1224, 2308,
	2309, 2310, 2311, 2312, 2347, 2313, 2345, 3658, 2349, 2356,
	2527, 2357, 3167, 2219, 3586, 991, 2255, 2256, 3174, 2261,
	2474, 3535, 2230, 3764, 2058, 3523, 2114, 3513, 993, 2361,
	2362, 1438, 2745, 1438, 2222, 1438, 2743, 3669, 994, 2228,
	1106, 3603, 2229, 3338, 3503, 1709, 3444, 3372, 2493, 3371,
	3208, 3197, 2371, 1175, 1176, 1177, 1174, 2741, 2730, 2424,
	1710, 2484, 3166, 2488, 1175, 1176, 1177, 1174, 2417, 3168,
	2966, 1418, 1420, 2322, 1438, 2521, 1188, 1198, 1199, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1190, 2351, 2858, 2744,
	2528, 3761, 1444, 2742, 2827, 1438, 2826, 2728, 2220, 2221,
	2727, 2893, 1436, 1175, 1176, 1177, 1174, 1963, 2223, 2224,
	2726, 2718, 2712, 2520, 2740, 2729, 2365, 2711, 2710, 2709,
	2368, 2569, 1362, 1436, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1190, 2445, 2164, 2529, 2011, 2010, 2414, 2009, 2005,
	2004, 2416, 1961, 1960, 1959, 1476, 1476, 2470, 2471, 1548,
	2532, 2533, 1106, 1304, 695, 2603, 1106, 697, 3070, 2505,
	2892, 2505, 696, 1438, 2951, 3599, 2601, 3572, 1089, 2509,
	1968, 3760, 1906, 3474, 3475, 2581, 3325, 3301, 3735, 2377,
	2630, 3466, 2490, 3703, 2107, 2530, 2636, 1175, 1176, 1177,
	1174, 3702, 3699, 2485, 1175, 1176, 1177, 1174, 3465, 2499,
	2466, 3568, 2646, 1175, 1176, 1177, 1174, 3346, 2477, 3553,
	2475, 1106, 3544, 3527, 1591, 2560, 3522, 3521, 2482, 2667,
	1175, 1176, 1177, 1174, 1088, 3477, 1106, 1106, 1106, 1836,
	3445, 3391, 1106, 3353, 2678, 2679, 2680, 2681, 1106, 2688,
	3324, 2689, 2690, 3323, 2691, 3299, 2693, 3297, 2615, 3276,
	2673, 2674, 3275, 2616, 3272, 2677, 3270, 2688, 2511, 3313,
	2750, 2684, 2495, 2496, 3454, 2415, 2619, 3165, 2627, 2343,
	2498, 3164, 3161, 3142, 2422, 746, 122, 1175, 1176, 1177,
	1174, 122, 2637, 2746, 1858, 3140, 1175, 1176, 1177, 1174,
	3065, 601, 3056, 3055, 2648, 2975, 1906, 1106, 1922, 1922,
	1922, 1922, 2590, 1603, 1604, 1605, 1606, 1607, 2938, 1106,
	1922, 2937, 2935, 2343, 2638, 2169, 2872, 2583, 2869, 2585,
	2768, 2825, 994, 2643, 2644, 2799, 2739, 3312, 2731, 1438,
	2721, 2660, 2768, 2719, 630, 2665, 2715, 122, 2661, 2665,
	624, 624, 2582, 2714, 2599, 1648, 1781, 2713, 2628, 1652,
	1653, 1654, 1655, 2672, 1175, 1176, 1177, 1174, 1689, 8,
	2629, 7, 2570, 2635, 801, 800, 1699, 1181, 1182, 1183,
	1184, 1185, 1186, 1187, 1179, 2467, 2014, 2007, 2647, 1761,
	2650, 1760, 3256, 1549, 1254, 2663, 3137, 3326, 2781, 1250,
	1249, 2700, 2701, 2669, 1092, 868, 197, 3311, 2676, 3188,
	3187, 197, 2538, 2539, 2896, 3186, 2716, 2717, 2544, 1175,
	1176, 1177, 1174, 1175, 1176, 1177, 1174, 2895, 1751, 3158,
	3154, 2708, 3152, 1705, 3151, 1705, 2720, 3148, 2842, 3147,
	2752, 1175, 1176, 1177, 1174, 3141, 2894, 2810, 3139, 3120,
	3110, 3109, 2645, 2857, 1175, 1176, 1177, 1174, 3095, 1438,
	992, 3094, 2864, 2754, 2751, 2554, 2756, 122, 3004, 2769,
	2770, 2771, 2772, 1175, 1176, 1177, 1174, 2941, 2930, 2782,
	2784, 2783, 122, 2553, 122, 2780, 2898, 2891, 2883, 2882,
	1809, 2876, 1175, 1176, 1177, 1174, 2800, 2797, 2808, 2579,
	2440, 180, 2816, 169, 143, 2436, 2435, 2820, 2143, 2666,
	1175, 1176, 1177, 1174, 1825, 1750, 2136, 2639, 2803, 2804,
	2841, 2130, 2642, 2129, 2837, 1502, 2128, 1509, 1510, 2127,
	2881, 2125, 2552, 2839, 2121, 1503, 1504, 2850, 2120, 2118,
	2109, 2106, 2105, 1514, 2013, 2851, 1518, 2886, 1517, 2888,
	1744, 1743, 1742, 2814, 2861, 2818, 2817, 1708, 2936, 1175,
	1176, 1177, 1174, 1707, 2866, 1106, 1698, 1751, 1450, 1448,
	174, 2954, 1751, 1751, 2833, 2840, 2838, 2835, 3687, 1244,
	994, 2970, 3598, 2854, 180, 2793, 624, 2853, 2101, 2852,
	2551, 3541, 3529, 994, 3524, 1497, 3425, 3408, 2984, 1106,
	3404, 3382, 624, 1106, 1106, 1175, 1176, 1177, 1174, 2550,
	2873, 2860, 1922, 2212, 2874, 3002, 3366, 1175, 1176, 1177,
	1174, 3284, 1993, 2880, 3282, 1996, 3254, 3253, 1999, 3250,
	3249, 2001, 3215, 2272, 2889, 2890, 1175, 1176, 1177, 1174,
	2549, 2099, 3212, 3210, 2978, 3027, 3177, 3030, 2887, 3030,
	3030, 2940, 2932, 174, 1106, 1508, 1499, 1513, 2884, 2885,
	2548, 1516, 1505, 1175, 1176, 1177, 1174, 1175, 1176, 1177,
	1174, 2615, 1344, 3051, 2547, 2747, 3047, 2973, 2546, 2671,
	2623, 1438, 1438, 2622, 2617, 2934, 2043, 1175, 1176, 1177,
	1174, 2584, 2939, 2987, 3014, 3016, 2555, 2991, 2450, 3049,
	2359, 1175, 1176, 1177, 1174, 1175, 1176, 1177, 1174, 1436,
	1436, 2314, 2971, 2213, 2185, 2163, 1175, 1176, 1177, 1174,
	3052, 3053, 3010, 1633, 991, 2986, 3000, 2977, 624, 2989,
	2990, 2997, 3025, 2954, 3001, 174, 3026, 993, 1974, 1771,
	3035, 1406, 1757, 1576, 1906, 1906, 2545, 994, 1531, 994,
	3008, 1506, 1303, 994, 2976, 2242, 3009, 1288, 1284, 1283,
	1282, 2241, 1281, 1280, 1279, 3031, 3032, 3717, 2542, 1278,
	2988, 1403, 2541, 1175, 1176, 1177, 1174, 2540, 994, 1277,
	1276, 3036, 1275, 1274, 1273, 1272, 1271, 2093, 1270, 1269,
	1106, 2098, 1268, 1267, 2521, 1175, 1176, 1177, 1174, 1175,
	1176, 1177, 1174, 3108, 1175, 1176, 1177, 1174, 2534, 2905,
	2906, 1266, 1265, 2377, 1264, 2907, 2908, 2909, 2910, 1678,
	2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920,
	2524, 1263, 2110, 1262, 1261, 1175, 1176, 1177, 1174, 1260,
	2117, 3057, 3064, 3514, 1257, 3062, 3067, 3071, 3066, 3073,
	3074, 624, 3061, 1256, 1255, 1253, 3084, 1175, 1176, 1177,
	1174, 1252, 2134, 1251, 1248, 1241, 1240, 2139, 2140, 2141,
	1238, 1237, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151,
	2152, 2153, 1236, 3088, 2500, 1235, 1234, 1233, 1232, 3091,
	3092, 3093, 3097, 1231, 1230, 3103, 1963, 1189, 1188, 1198,
	1199, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1190, 3380,
	1229, 1175, 1176, 1177, 1174, 1646, 3121, 2326, 1228, 1227,
	1222, 1221, 1220, 122, 122, 992, 1219, 1139, 1090, 3125,
	3080, 3081, 3033, 3005, 3129, 3126, 3615, 3613, 3006, 3007,
	3130, 3611, 1175, 1176, 1177, 1174, 3609, 3251, 2217, 3143,
	2199, 2505, 1127, 3715, 2331, 2334, 2335, 2336, 2332, 3135,
	2333, 2337, 3181, 1189, 1188, 1198, 1199, 1191, 1192, 1193,
	1194, 1195, 1196, 1197, 1190, 3674, 3083, 2605, 2343, 1922,
	3200, 2370, 1674, 2331, 2334, 2335, 2336, 2332, 1671, 2333,
	2337, 2016, 1673, 1670, 1672, 1676, 1677, 1207, 1138, 2777,
	1675, 2775, 3218, 3286, 2778, 1106, 2776, 2779, 3086, 2335,
	2336, 3287, 3085, 2774, 3027, 3157, 2773, 3155, 1106, 3132,
	3387, 2465, 3160, 2453, 1338, 1799, 1800, 2856, 3219, 1106,
	2282, 3265, 107, 57, 3023, 1438, 3024, 56, 1794, 1795,
	1796, 3258, 2696, 3127, 3128, 3172, 3261, 3098, 1895, 2697,
	2698, 2699, 2684, 1906, 3202, 1491, 2448, 1106, 2470, 2471,
	3285, 3075, 2489, 1436, 1544, 1525, 2175, 1976, 1751, 1133,
	1751, 994, 2949, 2942, 3267, 2649, 3087, 2624, 994, 2234,
	2768, 3248, 3209, 3241, 3211, 3205, 197, 2208, 1751, 1751,
	1803, 626, 627, 3199, 1770, 3198, 628, 1694, 1693, 1106,
	3178, 3179, 3180, 3278, 3257, 3255, 3184, 3185, 3726, 3260,
	3288, 1299, 1300, 1297, 1298, 3264, 1295, 1296, 1293, 1294,
	3526, 1476, 2768, 3054, 2323, 3269, 3271, 2319, 1907, 1399,
	3274, 1398, 1166, 3090, 3277, 2802, 2174, 3279, 2045, 1351,
	1106, 1329, 3280, 1292, 1681, 1682, 1683, 1684, 1685, 1686,
	1679, 1680, 1374, 3694, 3692, 3273, 3652, 3632, 1106, 1438,
	1438, 3309, 3631, 3629, 2984, 3575, 3542, 3439, 3438, 3377,
	3298, 2461, 2462, 2463, 3144, 3361, 3117, 3361, 3302, 3116,
	3101, 3349, 3292, 2267, 2237, 3306, 1546, 1436, 1644, 3100,
	2812, 1106, 3376, 1106, 1350, 2859, 3355, 3356, 3351, 3719,
	3718, 3379, 2201, 3381, 2108, 1124, 3718, 3719, 3406, 3096,
	1438, 3333, 3332, 1103, 1597, 3331, 1597, 184, 3, 1366,
	3352, 65, 859, 860, 861, 862, 3328, 1103, 624, 2,
	1106, 1106, 3738, 3354, 1106, 1106, 3365, 2502, 1644, 3739,
	2508, 3364, 1, 2561, 1755, 1301, 863, 2522, 2523, 858,
	1415, 3427, 3202, 3349, 3349, 2525, 2526, 3349, 3349, 3358,
	3375, 2352, 1954, 1805, 3290, 3436, 3385, 3388, 3412, 3413,
	3392, 2531, 3423, 3424, 3440, 3441, 1447, 3248, 1442, 3241,
	630, 1759, 865, 3422, 3384, 2786, 2787, 3089, 2789, 2575,
	1438, 2065, 2757, 2317, 3390, 3201, 2189, 2969, 1339, 1603,
	1751, 907, 1700, 3204, 3433, 1559, 1016, 3322, 1117, 1556,
	1116, 1114, 122, 1649, 748, 994, 2019, 2748, 1436, 3432,
	3460, 3434, 2722, 3435, 3725, 3754, 3686, 3728, 3428, 3452,
	1574, 732, 3623, 3545, 3690, 3547, 3450, 1013, 2070, 1171,
	2834, 930, 789, 759, 3447, 1239, 1537, 3495, 3451, 3489,
	2903, 3455, 2901, 3459, 1018, 758, 3171, 2595, 2805, 3497,
	1015, 931, 2002, 1106, 3448, 2640, 2641, 1492, 1496, 2233,
	3505, 3594, 3386, 3512, 3019, 3518, 2657, 1520, 3589, 122,
	3213, 3483, 3318, 3316, 3429, 122, 1597, 3317, 3430, 665,
	1933, 3490, 3492, 3309, 3491, 599, 3411, 976, 122, 3426,
	2015, 3504, 3508, 666, 2216, 3643, 1106, 3528, 887, 1014,
	122, 1438, 2198, 888, 3314, 880, 3315, 1189, 1188, 1198,
	1199, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1190, 3349,
	3525, 2613, 3487, 2612, 1614, 1180, 1631, 2921, 2922, 1436,
	1217, 704, 2095, 2592, 3534, 3236, 2798, 64, 3564, 63,
	3536, 62, 61, 1984, 205, 750, 204, 3344, 3558, 3620,
	3730, 730, 729, 1106, 728, 727, 726, 725, 3543, 2330,
	2328, 2327, 1917, 1916, 1982, 2982, 2687, 3576, 2682, 1847,
	1008, 1003, 998, 1002, 1006, 1845, 3349, 2675, 994, 2262,
	2269, 1844, 3671, 3373, 3374, 3604, 3605, 3403, 3571, 2732,
	3570, 3308, 3567, 1793, 2258, 3593, 1864, 2703, 1011, 3578,
	1106, 1861, 1001, 1860, 2695, 3399, 3393, 1892, 1438, 3493,
	3360, 3618, 3621, 3608, 3610, 3612, 3614, 3592, 3220, 3221,
	3587, 3227, 2207, 3349, 1041, 1037, 3622, 1039, 1040, 3601,
	1038, 2510, 2239, 2944, 2181, 2180, 1436, 2178, 3607, 2177,
	1314, 3563, 3639, 3537, 3327, 2375, 2373, 3617, 1438, 1087,
	3628, 3495, 3626, 1009, 3082, 3078, 2027, 2041, 2855, 2819,
	1012, 2821, 1918, 1914, 2759, 2200, 3468, 3662, 1798, 881,
	2196, 159, 50, 3670, 1678, 3653, 1436, 3651, 3655, 104,
	1751, 157, 999, 3656, 3657, 1751, 49, 3654, 93, 92,
	103, 155, 48, 189, 188, 191, 190, 187, 2043, 2426,
	2427, 186, 3577, 1480, 185, 1010, 3633, 3581, 3582, 3363,
	853, 39, 3683, 3693, 38, 3695, 3696, 34, 13, 12,
	35, 3691, 3689, 1106, 22, 21, 1563, 3558, 3698, 20,
	3679, 26, 3680, 2875, 3681, 32, 3682, 31, 3602, 115,
	114, 3518, 30, 113, 3707, 1000, 3705, 918, 112, 111,
	3708, 3710, 3709, 110, 3713, 109, 3724, 2897, 3732, 3716,
	3714, 3731, 3720, 3721, 3722, 3723, 29, 19, 43, 42,
	41, 9, 102, 100, 28, 3743, 101, 1106, 3736, 98,
	96, 94, 76, 75, 74, 89, 1921, 3744, 3593, 3745,
	88, 87, 3747, 86, 85, 84, 82, 3753, 3756, 83,
	1597, 929, 73, 72, 71, 70, 180, 54, 169, 143,
	69, 91, 97, 95, 80, 90, 916, 917, 81, 79,
	78, 3763, 1007, 77, 170, 68, 67, 958, 66, 3732,
	3770, 162, 3731, 3769, 141, 171, 140, 1674, 139, 3756,
	3771, 138, 137, 1671, 135, 3775, 136, 1673, 1670, 1672,
	1676, 1677, 134, 133, 120, 1675, 3700, 3701, 1004, 122,
	132, 1005, 122, 122, 1201, 122, 1205, 131, 130, 108,
	129, 44, 45, 46, 47, 174, 151, 3378, 150, 152,
	154, 156, 1202, 1204, 1200, 153, 1203, 1189, 1188, 1198,
	1199, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1190, 158,
	148, 3034, 146, 149, 147, 992, 2899, 145, 122, 59,
	960, 11, 105, 959, 18, 25, 992, 4, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 1189, 1188, 1198, 1199, 1191, 1192, 1193, 1194, 1195,
	1196, 1197, 1190, 0, 0, 0, 0, 0, 2497, 0,
	944, 0, 125, 126, 0, 127, 128, 0, 919, 0,
	1189, 1188, 1198, 1199, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1190, 1189, 1188, 1198, 1199, 1191, 1192, 1193, 1194,
	1195, 1196, 1197, 1190, 0, 921, 2092, 0, 1659, 1660,
	1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1681,
	1682, 1683, 1684, 1685, 1686, 1679, 1680, 0, 0, 1207,
	1189, 1188, 1198, 1199, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1190, 0, 142, 168, 178, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 167, 161, 160, 943, 941,
	0, 0, 60, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	940, 0, 0, 3122, 3123, 3124, 0, 0, 0, 0,
	0, 915, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 920, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 163, 164, 165, 949, 0, 0, 0,
	0, 0, 0, 3136, 0, 0, 0, 0, 0, 0,
	3138, 0, 0, 1175, 1176, 1177, 1174, 0, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 950, 954, 0, 0, 0, 0, 0, 0,
	0, 3153, 0, 0, 116, 0, 0, 0, 166, 0,
	117, 0, 937, 0, 935, 939, 957, 0, 0, 0,
	936, 933, 932, 0, 938, 923, 924, 922, 925, 926,
	927, 928, 0, 955, 0, 956, 0, 0, 0, 1893,
	0, 0, 0, 0, 1854, 0, 951, 952, 0, 0,
	0, 0, 1678, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 1895, 1863, 0, 0, 0, 0,
	53, 0, 0, 947, 1896, 1897, 0, 0, 0, 946,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 942, 0, 0, 0, 0, 0,
	1862, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1870, 0, 0, 0, 55,
	0, 0, 0, 0, 1751, 2346, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1751, 0, 0,
	3281, 0, 0, 3283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 1893, 0,
	3289, 0, 144, 1854, 0, 0, 0, 51, 0, 0,
	0, 945, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1886, 0, 0, 0, 0, 0, 1921,
	0, 0, 0, 1895, 1863, 0, 0, 0, 122, 0,
	0, 0, 0, 1896, 1897, 1674, 0, 0, 0, 0,
	0, 1671, 0, 0, 0, 1673, 1670, 1672, 1676, 1677,
	0, 0, 0, 1675, 0, 0, 0, 0, 0, 1862,
	0, 0, 119, 40, 0, 0, 0, 0, 0, 52,
	0, 0, 0, 0, 1870, 0, 0, 0, 0, 0,
	123, 124, 0, 0, 1853, 1855, 1852, 0, 1849, 0,
	0, 0, 0, 1874, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1880, 0, 0, 0, 0, 0,
	0, 0, 1865, 0, 1848, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1868, 1902, 0, 0, 1869, 1871,
	1873, 0, 1875, 1876, 1877, 1881, 1882, 1883, 1885, 1888,
	1889, 1890, 1886, 677, 676, 683, 673, 0, 0, 1878,
	1887, 1879, 0, 0, 0, 680, 681, 0, 682, 686,
	0, 1857, 667, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 691, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1894, 0, 0, 1659, 1660, 1661, 1662,
	1663, 1664, 1665, 1666, 1667, 1668, 1669, 1681, 1682, 1683,
	1684, 1685, 1686, 1679, 1680, 0, 0, 0, 0, 1850,
	1851, 0, 0, 1853, 2652, 1852, 0, 2651, 0, 0,
	0, 0, 1874, 0, 0, 0, 0, 1891, 0, 0,
	0, 0, 0, 1880, 0, 0, 0, 0, 0, 122,
	3484, 0, 0, 0, 1867, 0, 0, 0, 0, 122,
	0, 1866, 0, 1868, 1902, 0, 0, 1869, 1871, 1873,
	0, 1875, 1876, 1877, 1881, 1882, 1883, 1885, 1888, 1889,
	1890, 0, 0, 0, 0, 1884, 0, 0, 1878, 1887,
	1879, 0, 0, 0, 1872, 0, 0, 0, 0, 0,
	1857, 0, 0, 0, 0, 0, 0, 1899, 1898, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1894, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1850, 1851,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1859, 0, 0, 0, 1226, 0, 1891, 0, 0, 0,
	668, 670, 669, 1921, 1921, 1921, 1921, 0, 0, 0,
	675, 0, 0, 1867, 0, 1921, 0, 0, 0, 0,
	1866, 0, 679, 0, 0, 0, 0, 0, 0, 694,
	1059, 0, 1901, 0, 0, 1900, 672, 0, 0, 0,
	0, 0, 0, 0, 1884, 0, 0, 0, 0, 0,
	0, 0, 0, 1872, 3600, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1899, 1898, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 122, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 1059, 0, 0, 0, 1859,
	0, 0, 0, 0, 0, 0, 0, 122, 3667, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 674, 678, 684, 0, 685,
	687, 1045, 0, 688, 689, 690, 0, 0, 692, 693,
	0, 1901, 0, 0, 1900, 0, 0, 0, 0, 0,
	0, 1067, 1071, 1073, 1075, 1077, 1078, 1080, 0, 1085,
	1081, 1082, 1083, 1084, 0, 1062, 1063, 1064, 1065, 1043,
	1044, 1068, 0, 1046, 3667, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1058, 1060, 1056, 1057, 1066, 1059,
	0, 0, 0, 0, 0, 0, 1070, 1072, 1074, 1076,
	1079, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1893, 0, 1045, 0, 0, 0,
	1035, 180, 3667, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1061, 0, 1067, 1071, 1073, 1075,
	1077, 1078, 1080, 3359, 1085, 1081, 1082, 1083, 1084, 1895,
	1062, 1063, 1064, 1065, 1043, 1044, 1068, 0, 1046, 0,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058,
	1060, 1056, 1057, 1066, 992, 0, 122, 0, 3773, 0,
	122, 1070, 1072, 1074, 1076, 1079, 0, 1921, 0, 0,
	174, 0, 0, 0, 671, 0, 0, 0, 0, 0,
	1870, 0, 0, 0, 0, 122, 0, 0, 0, 0,
	1045, 0, 0, 0, 0, 0, 0, 0, 0, 1061,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1067, 1071, 1073, 1075, 1077, 1078, 1080, 0, 1085, 1081,
	1082, 1083, 1084, 0, 1062, 1063, 1064, 1065, 1043, 1044,
	1068, 0, 1046, 0, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1058, 1060, 1056, 1057, 1066, 1886, 0,
	0, 0, 2506, 2507, 0, 1070, 1072, 1074, 1076, 1079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1061, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1880,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1868,
	1902, 0, 0, 1869, 1871, 1873, 0, 1875, 1876, 1877,
	1881, 1882, 1883, 1885, 1888, 1889, 1890, 0, 0, 0,
	0, 0, 0, 0, 1878, 1887, 1879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1069, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1891, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 1867,
	0, 1069, 0, 0, 0, 122, 1866, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1884, 0, 0, 0, 0, 0, 0, 766, 0, 1872,
	0, 0, 0, 0, 0, 0, 367, 0, 492, 525,
	514, 597, 480, 0, 1921, 0, 0, 0, 0, 719,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 757, 528, 479, 398, 351, 546,
	545, 0, 0, 824, 832, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 711, 0, 0, 747, 801,
	800, 734, 744, 0, 0, 280, 203, 474, 593, 476,
	475, 735, 0, 736, 740, 743, 739, 737, 738, 0,
	816, 0, 0, 0, 0, 0, 0, 703, 715, 0,
	720, 0, 0, 0, 0, 0, 0, 144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 122, 0, 0, 712, 713, 0, 0, 0, 0,
	767, 0, 714, 0, 0, 762, 741, 745, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 742, 765,
	769, 301, 838, 763, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 839,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 122, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	760, 0, 590, 0, 430, 0, 0, 822, 0, 0,
	0, 402, 0, 0, 334, 0, 0, 0, 764, 0,
	388, 369, 835, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 612, 613, 614, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 1702, 1701, 1703, 442, 335, 336,
	0, 314, 262, 263, 608, 820, 365, 556, 589, 481,
	0, 834, 815, 817, 818, 821, 825, 826, 827, 828,
	829, 831, 833, 837, 607, 0, 535, 550, 610, 549,
	604, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 122, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 836, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 768, 531, 532, 355, 356,
	357, 358, 823, 557, 285, 453, 381, 0, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	615, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 845, 819, 844, 846, 847, 843, 848, 849, 830,
	724, 0, 775, 841, 840, 842, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 605, 602, 413, 606, 0, 264,
	487, 338, 0, 379, 312, 552, 553, 0, 0, 808,
	782, 783, 784, 721, 785, 779, 780, 722, 781, 809,
	773, 805, 806, 749, 776, 786, 804, 787, 807, 810,
	811, 850, 851, 793, 777, 228, 852, 790, 812, 803,
	802, 788, 774, 813, 814, 756, 751, 791, 792, 778,
	796, 797, 798, 723, 770, 771, 772, 794, 795, 752,
	753, 754, 755, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 603, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 799, 598,
	766, 609, 477, 478, 588, 0, 716, 0, 0, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 719, 0, 0, 0, 307, 1752, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 757, 528, 479,
	398, 351, 546, 545, 0, 0, 824, 832, 0, 0,
	0, 0, 0, 0, 0, 1945, 0, 0, 711, 0,
	0, 747, 801, 800, 734, 744, 0, 0, 280, 203,
	474, 593, 476, 475, 735, 0, 736, 740, 743, 739,
	737, 738, 0, 816, 0, 0, 0, 0, 0, 0,
	703, 715, 0, 720, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 712, 713, 0,
	0, 0, 0, 767, 0, 714, 0, 0, 1946, 741,
	745, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 742, 765, 769, 301, 838, 763, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 839, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 760, 0, 590, 0, 430, 0, 0,
	822, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 764, 0, 388, 369, 835, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 612, 613, 614, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 608, 820, 365,
	556, 589, 481, 0, 834, 815, 817, 818, 821, 825,
	826, 827, 828, 829, 831, 833, 837, 607, 0, 535,
	550, 610, 549, 604, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 836, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 768, 531,
	532, 355, 356, 357, 358, 823, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 615, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 845, 819, 844, 846, 847, 843,
	848, 849, 830, 724, 0, 775, 841, 840, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 605, 602, 413,
	606, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 808, 782, 783, 784, 721, 785, 779, 780,
	722, 781, 809, 773, 805, 806, 749, 776, 786, 804,
	787, 807, 810, 811, 850, 851, 793, 777, 228, 852,
	790, 812, 803, 802, 788, 774, 813, 814, 756, 751,
	791, 792, 778, 796, 797, 798, 723, 770, 771, 772,
	794, 795, 752, 753, 754, 755, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 603, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 799, 598, 0, 609, 477, 478, 588, 0, 716,
	180, 766, 0, 0, 0, 0, 0, 0, 0, 0,
	367, 0, 492, 525, 514, 597, 480, 0, 0, 0,
	0, 0, 0, 719, 0, 0, 0, 307, 0, 0,
	337, 529, 511, 521, 512, 497, 498, 499, 506, 317,
	500, 501, 502, 472, 503, 473, 504, 505, 1210, 528,
	479, 398, 351, 546, 545, 0, 0, 824, 832, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 711,
	0, 0, 747, 801, 800, 734, 744, 0, 0, 280,
	203, 474, 593, 476, 475, 735, 0, 736, 740, 743,
	739, 737, 738, 0, 816, 0, 0, 0, 0, 0,
	0, 703, 715, 0, 720, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 712, 713,
	0, 0, 0, 0, 767, 0, 714, 0, 0, 762,
	741, 745, 0, 0, 0, 0, 270, 403, 420, 281,
	394, 433, 286, 401, 276, 366, 390, 0, 0, 272,
	418, 400, 348, 327, 328, 271, 0, 385, 305, 319,
	302, 364, 742, 765, 769, 301, 838, 763, 428, 274,
	0, 427, 363, 414, 419, 349, 343, 273, 416, 347,
	342, 331, 309, 839, 332, 333, 323, 375, 341, 376,
	324, 353, 352, 354, 0, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 587, 760, 0, 590, 0, 430, 0,
	0, 822, 0, 0, 0, 402, 0, 0, 334, 0,
	0, 0, 764, 0, 388, 369, 835, 0, 0, 386,
	339, 415, 377, 421, 404, 429, 382, 378, 265, 405,
	304, 350, 277, 279, 299, 306, 308, 310, 311, 359,
	360, 372, 393, 406, 407, 408, 303, 287, 387, 288,
	321, 289, 266, 295, 293, 296, 395, 297, 268, 373,
	412, 0, 316, 383, 346, 269, 345, 374, 411, 410,
	278, 437, 443, 444, 533, 0, 449, 612, 613, 614,
	458, 463, 464, 465, 467, 468, 469, 470, 534, 551,
	518, 488, 451, 542, 485, 489, 490, 554, 0, 0,
	0, 442, 335, 336, 0, 314, 262, 263, 608, 820,
	365, 556, 589, 481, 0, 834, 815, 817, 818, 821,
	825, 826, 827, 828, 829, 831, 833, 837, 607, 0,
	535, 550, 610, 549, 604, 371, 0, 392, 547, 494,
	0, 539, 513, 0, 540, 509, 544, 0, 483, 0,
	399, 423, 435, 452, 455, 484, 569, 570, 571, 267,
	454, 573, 574, 575, 576, 577, 578, 579, 572, 836,
	516, 493, 519, 434, 496, 495, 0, 0, 530, 768,
	531, 532, 355, 356, 357, 358, 823, 557, 285, 453,
	381, 0, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 523, 520, 615, 0, 580, 581, 0, 0,
	447, 448, 313, 320, 466, 322, 284, 370, 315, 432,
	329, 0, 459, 524, 460, 583, 586, 584, 585, 362,
	325, 326, 396, 330, 340, 384, 431, 368, 389, 282,
	422, 397, 344, 510, 537, 845, 819, 844, 846, 847,
	843, 848, 849, 830, 724, 0, 775, 841, 840, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 564, 563, 562, 561, 560, 559, 558, 0,
	0, 507, 409, 294, 256, 290, 291, 298, 605, 602,
	413, 606, 0, 264, 487, 338, 144, 379, 312, 552,
	553, 0, 0, 808, 782, 783, 784, 721, 785, 779,
	780, 722, 781, 809, 773, 805, 806, 749, 776, 786,
	804, 787, 807, 810, 811, 850, 851, 793, 777, 228,
	852, 790, 812, 803, 802, 788, 774, 813, 814, 756,
	751, 791, 792, 778, 796, 797, 798, 723, 770, 771,
	772, 794, 795, 752, 753, 754, 755, 0, 0, 0,
	438, 439, 440, 462, 424, 486, 603, 0, 0, 0,
	0, 0, 0, 0, 536, 548, 582, 0, 591, 592,
	594, 596, 799, 598, 766, 609, 477, 478, 588, 0,
	716, 0, 0, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 719, 0, 0, 0,
	307, 3772, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 757, 528, 479, 398, 351, 546, 545, 0, 0,
	824, 832, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 711, 0, 0, 747, 801, 800, 734, 744,
	0, 0, 280, 203, 474, 593, 476, 475, 735, 0,
	736, 740, 743, 739, 737, 738, 0, 816, 0, 0,
	0, 0, 0, 0, 703, 715, 0, 720, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 712, 713, 0, 0, 0, 0, 767, 0, 714,
	0, 0, 762, 741, 745, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 742, 765, 769, 301, 838,
	763, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 839, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 760, 0, 590,
	0, 430, 0, 0, 822, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 764, 0, 388, 369, 835,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	612, 613, 614, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 608, 820, 365, 556, 589, 481, 0, 834, 815,
	817, 818, 821, 825, 826, 827, 828, 829, 831, 833,
	837, 607, 0, 535, 550, 610, 549, 604, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 836, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 768, 531, 532, 355, 356, 357, 358, 823,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 615, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 845, 819,
	844, 846, 847, 843, 848, 849, 830, 724, 0, 775,
	841, 840, 842, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 605, 602, 413, 606, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 808, 782, 783, 784,
	721, 785, 779, 780, 722, 781, 809, 773, 805, 806,
	749, 776, 786, 804, 787, 807, 810, 811, 850, 851,
	793, 777, 228, 852, 790, 812, 803, 802, 788, 774,
	813, 814, 756, 751, 791, 792, 778, 796, 797, 798,
	723, 770, 771, 772, 794, 795, 752, 753, 754, 755,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 603,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 799, 598, 766, 609, 477,
	478, 588, 0, 716, 0, 0, 367, 0, 492, 525,
	514, 597, 480, 0, 0, 0, 0, 0, 0, 719,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 757, 528, 479, 398, 351, 546,
	545, 0, 0, 824, 832, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 711, 0, 0, 747, 801,
	800, 734, 744, 0, 0, 280, 203, 474, 593, 476,
	475, 735, 0, 736, 740, 743, 739, 737, 738, 0,
	816, 0, 0, 0, 0, 0, 0, 703, 715, 0,
	720, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 712, 713, 0, 0, 0, 0,
	767, 0, 714, 0, 0, 762, 741, 745, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 742, 765,
	769, 301, 838, 763, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 839,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	760, 0, 590, 0, 430, 0, 0, 822, 0, 0,
	0, 402, 0, 0, 334, 0, 0, 0, 764, 0,
	388, 369, 835, 3668, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 612, 613, 614, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 608, 820, 365, 556, 589, 481,
	0, 834, 815, 817, 818, 821, 825, 826, 827, 828,
	829, 831, 833, 837, 607, 0, 535, 550, 610, 549,
	604, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 836, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 768, 531, 532, 355, 356,
	357, 358, 823, 557, 285, 453, 381, 0, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	615, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 845, 819, 844, 846, 847, 843, 848, 849, 830,
	724, 0, 775, 841, 840, 842, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 605, 602, 413, 606, 0, 264,
	487, 338, 0, 379, 312, 552, 553, 0, 0, 808,
	782, 783, 784, 721, 785, 779, 780, 722, 781, 809,
	773, 805, 806, 749, 776, 786, 804, 787, 807, 810,
	811, 850, 851, 793, 777, 228, 852, 790, 812, 803,
	802, 788, 774, 813, 814, 756, 751, 791, 792, 778,
	796, 797, 798, 723, 770, 771, 772, 794, 795, 752,
	753, 754, 755, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 603, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 799, 598,
	766, 609, 477, 478, 588, 0, 716, 0, 0, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 719, 0, 0, 0, 307, 1752, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 757, 528, 479,
	398, 351, 546, 545, 0, 0, 824, 832, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 711, 0,
	0, 747, 801, 800, 734, 744, 0, 0, 280, 203,
	474, 593, 476, 475, 735, 0, 736, 740, 743, 739,
	737, 738, 0, 816, 0, 0, 0, 0, 0, 0,
	703, 715, 0, 720, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 712, 713, 0,
	0, 0, 0, 767, 0, 714, 0, 0, 762, 741,
	745, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 742, 765, 769, 301, 838, 763, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 839, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 760, 0, 590, 0, 430, 0, 0,
	822, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 764, 0, 388, 369, 835, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 612, 613, 614, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 608, 820, 365,
	556, 589, 481, 0, 834, 815, 817, 818, 821, 825,
	826, 827, 828, 829, 831, 833, 837, 607, 0, 535,
	550, 610, 549, 604, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 836, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 768, 531,
	532, 355, 356, 357, 358, 823, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 615, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 845, 819, 844, 846, 847, 843,
	848, 849, 830, 724, 0, 775, 841, 840, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 605, 602, 413,
	606, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 808, 782, 783, 784, 721, 785, 779, 780,
	722, 781, 809, 773, 805, 806, 749, 776, 786, 804,
	787, 807, 810, 811, 850, 851, 793, 777, 228, 852,
	790, 812, 803, 802, 788, 774, 813, 814, 756, 751,
	791, 792, 778, 796, 797, 798, 723, 770, 771, 772,
	794, 795, 752, 753, 754, 755, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 603, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 799, 598, 766, 609, 477, 478, 588, 0, 716,
	0, 0, 367, 0, 492, 525, 514, 597, 480, 0,
	0, 0, 0, 0, 0, 719, 0, 0, 0, 307,
	0, 0, 337, 529, 511, 521, 512, 497, 498, 499,
	506, 317, 500, 501, 502, 472, 503, 473, 504, 505,
	757, 528, 479, 398, 351, 546, 545, 0, 0, 824,
	832, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 711, 0, 0, 747, 801, 800, 734, 744, 0,
	0, 280, 203, 474, 593, 476, 475, 735, 0, 736,
	740, 743, 739, 737, 738, 0, 816, 0, 0, 0,
	0, 0, 0, 703, 715, 0, 720, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	712, 713, 1475, 0, 0, 0, 767, 0, 714, 0,
	0, 762, 741, 745, 0, 0, 0, 0, 270, 403,
	420, 281, 394, 433, 286, 401, 276, 366, 390, 0,
	0, 272, 418, 400, 348, 327, 328, 271, 0, 385,
	305, 319, 302, 364, 742, 765, 769, 301, 838, 763,
	428, 274, 0, 427, 363, 414, 419, 349, 343, 273,
	416, 347, 342, 331, 309, 839, 332, 333, 323, 375,
	341, 376, 324, 353, 352, 354, 0, 0, 0, 0,
	0, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 760, 0, 590, 0,
	430, 0, 0, 822, 0, 0, 0, 402, 0, 0,
	334, 0, 0, 0, 764, 0, 388, 369, 835, 0,
	0, 386, 339, 415, 377, 421, 404, 429, 382, 378,
	265, 405, 304, 350, 277, 279, 299, 306, 308, 310,
	311, 359, 360, 372, 393, 406, 407, 408, 303, 287,
	387, 288, 321, 289, 266, 295, 293, 296, 395, 297,
	268, 373, 412, 0, 316, 383, 346, 269, 345, 374,
	411, 410, 278, 437, 443, 444, 533, 0, 449, 612,
	613, 614, 458, 463, 464, 465, 467, 468, 469, 470,
	534, 551, 518, 488, 451, 542, 485, 489, 490, 554,
	0, 0, 0, 442, 335, 336, 0, 314, 262, 263,
	608, 820, 365, 556, 589, 481, 0, 834, 815, 817,
	818, 821, 825, 826, 827, 828, 829, 831, 833, 837,
	607, 0, 535, 550, 610, 549, 604, 371, 0, 392,
	547, 494, 0, 539, 513, 0, 540, 509, 544, 0,
	483, 0, 399, 423, 435, 452, 455, 484, 569, 570,
	571, 267, 454, 573, 574, 575, 576, 577, 578, 579,
	572, 836, 516, 493, 519, 434, 496, 495, 0, 0,
	530, 768, 531, 532, 355, 356, 357, 358, 823, 557,
	285, 453, 381, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 522, 523, 520, 615, 0, 580, 581,
	0, 0, 447, 448, 313, 320, 466, 322, 284, 370,
	315, 432, 329, 0, 459, 524, 460, 583, 586, 584,
	585, 362, 325, 326, 396, 330, 340, 384, 431, 368,
	389, 282, 422, 397, 344, 510, 537, 845, 819, 844,
	846, 847, 843, 848, 849, 830, 724, 0, 775, 841,
	840, 842, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 564, 563, 562, 561, 560, 559,
	558, 0, 0, 507, 409, 294, 256, 290, 291, 298,
	605, 602, 413, 606, 0, 264, 487, 338, 0, 379,
	312, 552, 553, 0, 0, 808, 782, 783, 784, 721,
	785, 779, 780, 722, 781, 809, 773, 805, 806, 749,
	776, 786, 804, 787, 807, 810, 811, 850, 851, 793,
	777, 228, 852, 790, 812, 803, 802, 788, 774, 813,
	814, 756, 751, 791, 792, 778, 796, 797, 798, 723,
	770, 771, 772, 794, 795, 752, 753, 754, 755, 0,
	0, 0, 438, 439, 440, 462, 424, 486, 603, 0,
	0, 0, 0, 0, 0, 0, 536, 548, 582, 0,
	591, 592, 594, 596, 799, 598, 0, 609, 477, 478,
	588, 766, 716, 0, 2116, 0, 0, 0, 0, 0,
	367, 0, 492, 525, 514, 597, 480, 0, 0, 0,
	0, 0, 0, 719, 0, 0, 0, 307, 0, 0,
	337, 529, 511, 521, 512, 497, 498, 499, 506, 317,
	500, 501, 502, 472, 503, 473, 504, 505, 757, 528,
	479, 398, 351, 546, 545, 0, 0, 824, 832, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 711,
	0, 0, 747, 801, 800, 734, 744, 0, 0, 280,
	203, 474, 593, 476, 475, 735, 0, 736, 740, 743,
	739, 737, 738, 0, 816, 0, 0, 0, 0, 0,
	0, 703, 715, 0, 720, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 712, 713,
	0, 0, 0, 0, 767, 0, 714, 0, 0, 762,
	741, 745, 0, 0, 0, 0, 270, 403, 420, 281,
	394, 433, 286, 401, 276, 366, 390, 0, 0, 272,
	418, 400, 348, 327, 328, 271, 0, 385, 305, 319,
	302, 364, 742, 765, 769, 301, 838, 763, 428, 274,
	0, 427, 363, 414, 419, 349, 343, 273, 416, 347,
	342, 331, 309, 839, 332, 333, 323, 375, 341, 376,
	324, 353, 352, 354, 0, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 587, 760, 0, 590, 0, 430, 0,
	0, 822, 0, 0, 0, 402, 0, 0, 334, 0,
	0, 0, 764, 0, 388, 369, 835, 0, 0, 386,
	339, 415, 377, 421, 404, 429, 382, 378, 265, 405,
	304, 350, 277, 279, 299, 306, 308, 310, 311, 359,
	360, 372, 393, 406, 407, 408, 303, 287, 387, 288,
	321, 289, 266, 295, 293, 296, 395, 297, 268, 373,
	412, 0, 316, 383, 346, 269, 345, 374, 411, 410,
	278, 437, 443, 444, 533, 0, 449, 612, 613, 614,
	458, 463, 464, 465, 467, 468, 469, 470, 534, 551,
	518, 488, 451, 542, 485, 489, 490, 554, 0, 0,
	0, 442, 335, 336, 0, 314, 262, 263, 608, 820,
	365, 556, 589, 481, 0, 834, 815, 817, 818, 821,
	825, 826, 827, 828, 829, 831, 833, 837, 607, 0,
	535, 550, 610, 549, 604, 371, 0, 392, 547, 494,
	0, 539, 513, 0, 540, 509, 544, 0, 483, 0,
	399, 423, 435, 452, 455, 484, 569, 570, 571, 267,
	454, 573, 574, 575, 576, 577, 578, 579, 572, 836,
	516, 493, 519, 434, 496, 495, 0, 0, 530, 768,
	531, 532, 355, 356, 357, 358, 823, 557, 285, 453,
	381, 0, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 523, 520, 615, 0, 580, 581, 0, 0,
	447, 448, 313, 320, 466, 322, 284, 370, 315, 432,
	329, 0, 459, 524, 460, 583, 586, 584, 585, 362,
	325, 326, 396, 330, 340, 384, 431, 368, 389, 282,
	422, 397, 344, 510, 537, 845, 819, 844, 846, 847,
	843, 848, 849, 830, 724, 0, 775, 841, 840, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 564, 563, 562, 561, 560, 559, 558, 0,
	0, 507, 409, 294, 256, 290, 291, 298, 605, 602,
	413, 606, 0, 264, 487, 338, 0, 379, 312, 552,
	553, 0, 0, 808, 782, 783, 784, 721, 785, 779,
	780, 722, 781, 809, 773, 805, 806, 749, 776, 786,
	804, 787, 807, 810, 811, 850, 851, 793, 777, 228,
	852, 790, 812, 803, 802, 788, 774, 813, 814, 756,
	751, 791, 792, 778, 796, 797, 798, 723, 770, 771,
	772, 794, 795, 752, 753, 754, 755, 0, 0, 0,
	438, 439, 440, 462, 424, 486, 603, 0, 0, 0,
	0, 0, 0, 0, 536, 548, 582, 0, 591, 592,
	594, 596, 799, 598, 766, 609, 477, 478, 588, 0,
	716, 0, 0, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 719, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 757, 528, 479, 398, 351, 546, 545, 0, 0,
	824, 832, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 711, 0, 0, 747, 801, 800, 734, 744,
	0, 0, 280, 203, 474, 593, 476, 475, 735, 0,
	736, 740, 743, 739, 737, 738, 0, 816, 0, 0,
	0, 0, 0, 0, 703, 715, 0, 720, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 712, 713, 1745, 0, 0, 0, 767, 0, 714,
	0, 0, 762, 741, 745, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 742, 765, 769, 301, 838,
	763, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 839, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 760, 0, 590,
	0, 430, 0, 0, 822, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 764, 0, 388, 369, 835,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	612, 613, 614, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 608, 820, 365, 556, 589, 481, 0, 834, 815,
	817, 818, 821, 825, 826, 827, 828, 829, 831, 833,
	837, 607, 0, 535, 550, 610, 549, 604, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 836, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 768, 531, 532, 355, 356, 357, 358, 823,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 615, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 845, 819,
	844, 846, 847, 843, 848, 849, 830, 724, 0, 775,
	841, 840, 842, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 605, 602, 413, 606, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 808, 782, 783, 784,
	721, 785, 779, 780, 722, 781, 809, 773, 805, 806,
	749, 776, 786, 804, 787, 807, 810, 811, 850, 851,
	793, 777, 228, 852, 790, 812, 803, 802, 788, 774,
	813, 814, 756, 751, 791, 792, 778, 796, 797, 798,
	723, 770, 771, 772, 794, 795, 752, 753, 754, 755,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 603,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 799, 598, 766, 609, 477,
	478, 588, 0, 716, 0, 0, 367, 0, 492, 525,
	514, 597, 480, 0, 0, 0, 0, 0, 0, 719,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 757, 528, 479, 398, 351, 546,
	545, 0, 0, 824, 832, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 711, 0, 0, 747, 801,
	800, 734, 744, 0, 0, 280, 203, 474, 593, 476,
	475, 735, 0, 736, 740, 743, 739, 737, 738, 0,
	816, 0, 0, 0, 0, 0, 0, 703, 715, 0,
	720, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 712, 713, 0, 0, 0, 0,
	767, 0, 714, 0, 0, 762, 741, 745, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 742, 765,
	769, 301, 838, 763, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 839,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	760, 0, 590, 0, 430, 0, 0, 822, 0, 0,
	0, 402, 0, 0, 334, 0, 0, 0, 764, 0,
	388, 369, 835, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 612, 613, 614, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 608, 820, 365, 556, 589, 481,
	0, 834, 815, 817, 818, 821, 825, 826, 827, 828,
	829, 831, 833, 837, 607, 0, 535, 550, 610, 549,
	604, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 836, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 768, 531, 532, 355, 356,
	357, 358, 823, 557, 285, 453, 381, 0, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	615, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 845, 819, 844, 846, 847, 843, 848, 849, 830,
	724, 0, 775, 841, 840, 842, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 605, 602, 413, 606, 0, 264,
	487, 338, 0, 379, 312, 552, 553, 0, 0, 808,
	782, 783, 784, 721, 785, 779, 780, 722, 781, 809,
	773, 805, 806, 749, 776, 786, 804, 787, 807, 810,
	811, 850, 851, 793, 777, 228, 852, 790, 812, 803,
	802, 788, 774, 813, 814, 756, 751, 791, 792, 778,
	796, 797, 798, 723, 770, 771, 772, 794, 795, 752,
	753, 754, 755, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 603, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 799, 598,
	766, 609, 477, 478, 588, 0, 716, 0, 0, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 719, 0, 0, 0, 307, 0, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 757, 528, 479,
	398, 351, 546, 545, 0, 0, 824, 832, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 711, 0,
	0, 747, 801, 800, 734, 744, 0, 0, 280, 203,
	474, 593, 476, 475, 2558, 0, 2559, 740, 743, 739,
	737, 738, 0, 816, 0, 0, 0, 0, 0, 0,
	703, 715, 0, 720, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 712, 713, 0,
	0, 0, 0, 767, 0, 714, 0, 0, 762, 741,
	745, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 742, 765, 769, 301, 838, 763, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 839, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 760, 0, 590, 0, 430, 0, 0,
	822, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 764, 0, 388, 369, 835, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 612, 613, 614, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 608, 820, 365,
	556, 589, 481, 0, 834, 815, 817, 818, 821, 825,
	826, 827, 828, 829, 831, 833, 837, 607, 0, 535,
	550, 610, 549, 604, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 836, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 768, 531,
	532, 355, 356, 357, 358, 823, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 615, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 845, 819, 844, 846, 847, 843,
	848, 849, 830, 724, 0, 775, 841, 840, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 605, 602, 413,
	606, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 808, 782, 783, 784, 721, 785, 779, 780,
	722, 781, 809, 773, 805, 806, 749, 776, 786, 804,
	787, 807, 810, 811, 850, 851, 793, 777, 228, 852,
	790, 812, 803, 802, 788, 774, 813, 814, 756, 751,
	791, 792, 778, 796, 797, 798, 723, 770, 771, 772,
	794, 795, 752, 753, 754, 755, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 603, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 799, 598, 766, 609, 477, 478, 588, 0, 716,
	0, 0, 367, 0, 492, 525, 514, 597, 480, 0,
	0, 1615, 0, 0, 0, 719, 0, 0, 0, 307,
	0, 0, 337, 529, 511, 521, 512, 497, 498, 499,
	506, 317, 500, 501, 502, 472, 503, 473, 504, 505,
	757, 528, 479, 398, 351, 546, 545, 0, 0, 824,
	832, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 711, 0, 0, 747, 801, 800, 734, 744, 0,
	0, 280, 203, 474, 593, 476, 475, 735, 0, 736,
	740, 743, 739, 737, 738, 0, 816, 0, 0, 0,
	0, 0, 0, 0, 715, 0, 720, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	712, 713, 0, 0, 0, 0, 767, 0, 714, 0,
	0, 762, 741, 745, 0, 0, 0, 0, 270, 403,
	420, 281, 394, 433, 286, 401, 276, 366, 390, 0,
	0, 272, 418, 400, 348, 327, 328, 271, 0, 385,
	305, 319, 302, 364, 742, 765, 769, 301, 838, 763,
	428, 274, 0, 427, 363, 414, 419, 349, 343, 273,
	416, 347, 342, 331, 309, 839, 332, 333, 323, 375,
	341, 376, 324, 353, 352, 354, 0, 0, 0, 0,
	0, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 760, 0, 590, 0,
	430, 0, 0, 822, 0, 0, 0, 402, 0, 0,
	334, 0, 0, 0, 764, 0, 388, 369, 835, 0,
	0, 386, 339, 415, 377, 421, 404, 429, 382, 378,
	265, 405, 304, 350, 277, 279, 299, 306, 308, 310,
	311, 359, 360, 372, 393, 406, 407, 408, 303, 287,
	387, 288, 321, 289, 266, 295, 293, 296, 395, 297,
	268, 373, 412, 0, 316, 383, 346, 269, 345, 374,
	411, 410, 278, 437, 1616, 1617, 533, 0, 449, 612,
	613, 614, 458, 463, 464, 465, 467, 468, 469, 470,
	534, 551, 518, 488, 451, 542, 485, 489, 490, 554,
	0, 0, 0, 442, 335, 336, 0, 314, 262, 263,
	608, 820, 365, 556, 589, 481, 0, 834, 815, 817,
	818, 821, 825, 826, 827, 828, 829, 831, 833, 837,
	607, 0, 535, 550, 610, 549, 604, 371, 0, 392,
	547, 494, 0, 539, 513, 0, 540, 509, 544, 0,
	483, 0, 399, 423, 435, 452, 455, 484, 569, 570,
	571, 267, 454, 573, 574, 575, 576, 577, 578, 579,
	572, 836, 516, 493, 519, 434, 496, 495, 0, 0,
	530, 768, 531, 532, 355, 356, 357, 358, 823, 557,
	285, 453, 381, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 522, 523, 520, 615, 0, 580, 581,
	0, 0, 447, 448, 313, 320, 466, 322, 284, 370,
	315, 432, 329, 0, 459, 524, 460, 583, 586, 584,
	585, 362, 325, 326, 396, 330, 340, 384, 431, 368,
	389, 282, 422, 397, 344, 510, 537, 845, 819, 844,
	846, 847, 843, 848, 849, 830, 724, 0, 775, 841,
	840, 842, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 564, 563, 562, 561, 560, 559,
	558, 0, 0, 507, 409, 294, 256, 290, 291, 298,
	605, 602, 413, 606, 0, 264, 487, 338, 0, 379,
	312, 552, 553, 0, 0, 808, 782, 783, 784, 721,
	785, 779, 780, 722, 781, 809, 773, 805, 806, 749,
	776, 786, 804, 787, 807, 810, 811, 850, 851, 793,
	777, 228, 852, 790, 812, 803, 802, 788, 774, 813,
	814, 756, 751, 791, 792, 778, 796, 797, 798, 723,
	770, 771, 772, 794, 795, 752, 753, 754, 755, 0,
	0, 0, 438, 439, 440, 462, 424, 486, 603, 0,
	0, 0, 0, 0, 0, 0, 536, 548, 582, 0,
	591, 592, 594, 596, 799, 598, 766, 609, 477, 478,
	588, 0, 716, 0, 0, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 0, 719, 0,
	0, 0, 307, 0, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 757, 528, 479, 398, 351, 546, 545,
	0, 0, 824, 832, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 711, 0, 0, 747, 801, 800,
	734, 744, 0, 0, 280, 203, 474, 593, 476, 475,
	735, 0, 736, 740, 743, 739, 737, 738, 0, 816,
	0, 0, 0, 0, 0, 0, 0, 715, 0, 720,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 712, 713, 0, 0, 0, 0, 767,
	0, 714, 0, 0, 762, 741, 745, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 742, 765, 769,
	301, 838, 763, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 839, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 760,
	0, 590, 0, 430, 0, 0, 822, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 764, 0, 388,
	369, 835, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 612, 613, 614, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 608, 820, 365, 556, 589, 481, 0,
	834, 815, 817, 818, 821, 825, 826, 827, 828, 829,
	831, 833, 837, 607, 0, 535, 550, 610, 549, 604,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 836, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 768, 531, 532, 355, 356, 357,
	358, 823, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 615,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	845, 819, 844, 846, 847, 843, 848, 849, 830, 724,
	0, 775, 841, 840, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 605, 602, 413, 606, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 808, 782,
	783, 784, 721, 785, 779, 780, 722, 781, 809, 773,
	805, 806, 749, 776, 786, 804, 787, 807, 810, 811,
	850, 851, 793, 777, 228, 852, 790, 812, 803, 802,
	788, 774, 813, 814, 756, 751, 791, 792, 778, 796,
	797, 798, 723, 770, 771, 772, 794, 795, 752, 753,
	754, 755, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 603, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 799, 598, 766,
	609, 477, 478, 588, 0, 716, 0, 0, 367, 0,
	492, 525, 514, 597, 480, 0, 0, 0, 0, 0,
	0, 719, 0, 0, 0, 307, 0, 0, 337, 529,
	511, 521, 512, 497, 498, 499, 506, 317, 500, 501,
	502, 472, 503, 473, 504, 505, 757, 528, 479, 398,
	351, 546, 545, 0, 0, 824, 832, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	747, 801, 800, 734, 744, 0, 0, 280, 203, 474,
	593, 476, 475, 735, 0, 736, 740, 743, 739, 737,
	738, 0, 816, 0, 0, 0, 0, 0, 0, 703,
	715, 0, 720, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 712, 713, 0, 0,
	0, 0, 767, 0, 714, 0, 0, 762, 741, 745,
	0, 0, 0, 0, 270, 403, 420, 281, 394, 433,
	286, 401, 276, 366, 390, 0, 0, 272, 418, 400,
	348, 327, 328, 271, 0, 385, 305, 319, 302, 364,
	742, 765, 769, 301, 838, 763, 428, 274, 0, 427,
	363, 414, 419, 349, 343, 273, 416, 347, 342, 331,
	309, 839, 332, 333, 323, 375, 341, 376, 324, 353,
	352, 354, 0, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 760, 0, 590, 0, 430, 0, 0, 822,
	0, 0, 0, 402, 0, 0, 334, 0, 0, 0,
	764, 0, 388, 369, 835, 0, 0, 386, 339, 415,
	377, 421, 404, 429, 382, 378, 265, 405, 304, 350,
	277, 279, 299, 306, 308, 310, 311, 359, 360, 372,
	393, 406, 407, 408, 303, 287, 387, 288, 321, 289,
	266, 295, 293, 296, 395, 297, 268, 373, 412, 0,
	316, 383, 346, 269, 345, 374, 411, 410, 278, 437,
	443, 444, 533, 0, 449, 612, 613, 614, 458, 463,
	464, 465, 467, 468, 469, 470, 534, 551, 518, 488,
	451, 542, 485, 489, 490, 554, 0, 0, 0, 442,
	335, 336, 0, 314, 262, 263, 608, 820, 365, 556,
	589, 481, 0, 834, 815, 817, 818, 821, 825, 826,
	827, 828, 829, 831, 833, 837, 607, 0, 535, 550,
	610, 549, 604, 371, 0, 392, 547, 494, 0, 539,
	513, 0, 540, 509, 544, 0, 483, 0, 399, 423,
	435, 452, 455, 484, 569, 570, 571, 267, 454, 573,
	574, 575, 576, 577, 578, 579, 572, 836, 516, 493,
	519, 434, 496, 495, 0, 0, 530, 768, 531, 532,
	355, 356, 357, 358, 823, 557, 285, 453, 381, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 520, 615, 0, 580, 581, 0, 0, 447, 448,
	313, 320, 466, 322, 284, 370, 315, 432, 329, 0,
	459, 524, 460, 583, 586, 584, 585, 362, 325, 326,
	396, 330, 340, 384, 431, 368, 389, 282, 422, 397,
	344, 510, 537, 845, 819, 844, 846, 847, 843, 848,
	849, 830, 724, 0, 775, 841, 840, 842, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	564, 563, 562, 561, 560, 559, 558, 0, 0, 507,
	409, 294, 256, 290, 291, 298, 605, 602, 413, 606,
	0, 264, 487, 338, 0, 379, 312, 552, 553, 0,
	0, 808, 782, 783, 784, 721, 785, 779, 780, 722,
	781, 809, 773, 805, 806, 749, 776, 786, 804, 787,
	807, 810, 811, 850, 851, 793, 777, 228, 852, 790,
	812, 803, 802, 788, 774, 813, 814, 756, 751, 791,
	792, 778, 796, 797, 798, 723, 770, 771, 772, 794,
	795, 752, 753, 754, 755, 0, 0, 0, 438, 439,
	440, 462, 424, 486, 603, 0, 0, 0, 0, 0,
	0, 0, 536, 548, 582, 0, 591, 592, 594, 596,
	799, 598, 0, 609, 477, 478, 588, 0, 716, 180,
	54, 169, 143, 0, 0, 0, 0, 0, 0, 367,
	0, 492, 525, 514, 597, 480, 0, 170, 0, 0,
	0, 0, 0, 0, 162, 0, 307, 0, 171, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 120, 528, 479,
	398, 351, 546, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 174, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 280, 203,
	474, 593, 476, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 0, 417, 445, 301, 436, 0, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 461, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 142, 168, 178, 0,
	106, 0, 587, 0, 0, 590, 0, 430, 0, 0,
	195, 0, 0, 0, 402, 0, 0, 334, 167, 161,
	160, 446, 0, 388, 369, 207, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 566, 567, 568, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 425, 300, 365,
	556, 589, 481, 0, 543, 482, 491, 292, 515, 527,
	526, 361, 441, 198, 538, 541, 471, 208, 0, 535,
	550, 508, 549, 209, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 426, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 450, 531,
	532, 355, 356, 357, 358, 318, 557, 285, 453, 381,
	118, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 206, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 380, 275, 413,
	391, 0, 264, 487, 338, 144, 379, 312, 552, 553,
	51, 0, 212, 213, 214, 215, 216, 217, 218, 219,
	257, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 233, 234, 235, 236, 555, 227, 228, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 0, 0, 0, 258, 259, 260, 261,
	0, 0, 252, 253, 254, 255, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 210, 40, 196, 199, 201,
	200, 0, 52, 536, 548, 582, 5, 591, 592, 594,
	596, 595, 598, 123, 211, 477, 478, 588, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 367, 0,
	492, 525, 514, 597, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 307, 0, 0, 337, 529,
	511, 521, 512, 497, 498, 499, 506, 317, 500, 501,
	502, 472, 503, 473, 504, 505, 120, 528, 479, 398,
	351, 546, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 280, 203, 474,
	593, 476, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 2250, 2253, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 403, 420, 281, 394, 433,
	286, 401, 276, 366, 390, 0, 0, 272, 418, 400,
	348, 327, 328, 271, 0, 385, 305, 319, 302, 364,
	0, 417, 445, 301, 436, 0, 428, 274, 0, 427,
	363, 414, 419, 349, 343, 273, 416, 347, 342, 331,
	309, 461, 332, 333, 323, 375, 341, 376, 324, 353,
	352, 354, 0, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 0, 0, 590, 2254, 430, 0, 0, 0,
	2249, 0, 2248, 402, 2246, 2251, 334, 0, 0, 0,
	446, 0, 388, 369, 611, 0, 0, 386, 339, 415,
	377, 421, 404, 429, 382, 378, 265, 405, 304, 350,
	277, 279, 299, 306, 308, 310, 311, 359, 360, 372,
	393, 406, 407, 408, 303, 287, 387, 288, 321, 289,
	266, 295, 293, 296, 395, 297, 268, 373, 412, 2252,
	316, 383, 346, 269, 345, 374, 411, 410, 278, 437,
	443, 444, 533, 0, 449, 612, 613, 614, 458, 463,
	464, 465, 467, 468, 469, 470, 534, 551, 518, 488,
	451, 542, 485, 489, 490, 554, 0, 0, 0, 442,
	335, 336, 0, 314, 262, 263, 608, 300, 365, 556,
	589, 481, 0, 543, 482, 491, 292, 515, 527, 526,
	361, 441, 0, 538, 541, 471, 607, 0, 535, 550,
	610, 549, 604, 371, 0, 392, 547, 494, 0, 539,
	513, 0, 540, 509, 544, 0, 483, 0, 399, 423,
	435, 452, 455, 484, 569, 570, 571, 267, 454, 573,
	574, 575, 576, 577, 578, 579, 572, 426, 516, 493,
	519, 434, 496, 495, 0, 0, 530, 450, 531, 532,
	355, 356, 357, 358, 318, 557, 285, 453, 381, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 520, 615, 0, 580, 581, 0, 0, 447, 448,
	313, 320, 466, 322, 284, 370, 315, 432, 329, 0,
	459, 524, 460, 583, 586, 584, 585, 362, 325, 326,
	396, 330, 340, 384, 431, 368, 389, 282, 422, 397,
	344, 510, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	564, 563, 562, 561, 560, 559, 558, 0, 0, 507,
	409, 294, 256, 290, 291, 298, 605, 602, 413, 606,
	0, 264, 487, 338, 144, 379, 312, 552, 553, 0,
	0, 212, 213, 214, 215, 216, 217, 218, 219, 257,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 233, 234, 235, 236, 555, 227, 228, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 0, 0, 0, 258, 259, 260, 261, 0,
	0, 252, 253, 254, 255, 0, 0, 0, 438, 439,
	440, 462, 424, 486, 603, 0, 0, 0, 0, 0,
	0, 0, 536, 548, 582, 0, 591, 592, 594, 596,
	595, 598, 0, 609, 477, 478, 588, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 0, 528, 479, 398, 351,
	546, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1245, 0, 0, 202,
	0, 0, 734, 744, 0, 0, 280, 203, 474, 593,
	476, 475, 735, 0, 736, 740, 743, 739, 737, 738,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 741, 0, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 742,
	417, 445, 301, 436, 0, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	461, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 590, 0, 430, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 446,
	0, 388, 369, 611, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 612, 613, 614, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 608, 300, 365, 556, 589,
	481, 0, 543, 482, 491, 292, 515, 527, 526, 361,
	441, 0, 538, 541, 471, 607, 0, 535, 550, 610,
	549, 604, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 426, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 450, 531, 532, 355,
	356, 357, 358, 318, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 615, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 605, 602, 413, 606, 0,
	264, 487, 338, 0, 379, 312, 552, 553, 0, 0,
	212, 213, 214, 215, 216, 217, 218, 219, 257, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	233, 234, 235, 236, 555, 227, 228, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 0, 0, 0, 258, 259, 260, 261, 0, 0,
	252, 253, 254, 255, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 603, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 595,
	598, 0, 609, 477, 478, 588, 180, 54, 169, 143,
	0, 0, 0, 0, 0, 0, 367, 634, 492, 525,
	514, 597, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 0, 528, 479, 398, 351, 546,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	640, 0, 0, 0, 0, 639, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 280, 203, 474, 593, 476,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 0, 417,
	445, 301, 436, 0, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 461,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 638, 0, 587,
	0, 0, 590, 0, 430, 0, 0, 0, 0, 0,
	0, 402, 0, 0, 334, 0, 0, 0, 446, 0,
	388, 369, 611, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 612, 613, 614, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 608, 300, 365, 556, 589, 481,
	0, 543, 482, 491, 292, 515, 527, 526, 361, 441,
	0, 538, 541, 471, 607, 0, 535, 550, 610, 549,
	604, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 426, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 450, 531, 532, 355, 356,
	357, 358, 635, 637, 285, 453, 381, 648, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	615, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 605, 602, 413, 606, 0, 264,
	487, 338, 144, 379, 312, 552, 553, 0, 0, 212,
	213, 214, 215, 216, 217, 218, 219, 257, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 233,
	234, 235, 236, 555, 227, 228, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	0, 0, 0, 258, 259, 260, 261, 0, 0, 252,
	253, 254, 255, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 603, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 595, 598,
	0, 609, 477, 478, 588, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 0, 528, 479, 398, 351, 546, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 280, 203, 474, 593, 476, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	2250, 2253, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 0, 417, 445,
	301, 436, 0, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 461, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 590, 2254, 430, 0, 0, 0, 2249, 0, 2248,
	402, 2246, 2251, 334, 0, 0, 0, 446, 0, 388,
	369, 611, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 2252, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 612, 613, 614, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 608, 300, 365, 556, 589, 481, 0,
	543, 482, 491, 292, 515, 527, 526, 361, 441, 0,
	538, 541, 471, 607, 0, 535, 550, 610, 549, 604,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 426, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 450, 531, 532, 355, 356, 357,
	358, 318, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 615,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 605, 602, 413, 606, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 212, 213,
	214, 215, 216, 217, 218, 219, 257, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 233, 234,
	235, 236, 555, 227, 228, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 0,
	0, 0, 258, 259, 260, 261, 0, 0, 252, 253,
	254, 255, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 603, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 595, 598, 0,
	609, 477, 478, 588, 367, 0, 492, 525, 514, 597,
	480, 0, 1059, 0, 0, 0, 0, 0, 0, 0,
	0, 307, 0, 0, 337, 529, 511, 521, 512, 497,
	498, 499, 506, 317, 500, 501, 502, 472, 503, 473,
	504, 505, 0, 528, 479, 398, 351, 546, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 280, 203, 474, 593, 476, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1045, 0, 0, 0, 0, 0, 0,
	270, 403, 420, 281, 394, 433, 286, 401, 276, 366,
	390, 0, 0, 2399, 2402, 2403, 2404, 2405, 2406, 2407,
	0, 2412, 2408, 2409, 2410, 2411, 0, 2394, 2395, 2396,
	2397, 1043, 2378, 2400, 0, 2379, 363, 2380, 2381, 2382,
	2383, 2384, 2385, 2386, 2387, 2388, 2391, 2392, 2389, 2390,
	2398, 375, 341, 376, 324, 353, 352, 354, 1070, 1072,
	1074, 1076, 1079, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 587, 0, 0,
	590, 0, 430, 0, 0, 0, 0, 0, 0, 402,
	0, 0, 334, 0, 0, 0, 2393, 0, 388, 369,
	611, 0, 0, 386, 339, 415, 377, 421, 404, 429,
	382, 378, 265, 405, 304, 350, 277, 279, 299, 306,
	308, 310, 311, 359, 360, 372, 393, 406, 407, 408,
	303, 287, 387, 288, 321, 289, 266, 295, 293, 296,
	395, 297, 268, 373, 412, 0, 316, 383, 346, 269,
	345, 374, 411, 410, 278, 437, 443, 444, 533, 0,
	449, 612, 613, 614, 458, 463, 464, 465, 467, 468,
	469, 470, 534, 551, 518, 488, 451, 542, 485, 489,
	490, 554, 0, 0, 0, 442, 335, 336, 0, 314,
	262, 263, 608, 300, 365, 556, 589, 481, 0, 543,
	482, 491, 292, 515, 527, 526, 361, 441, 0, 538,
	541, 471, 607, 0, 535, 550, 610, 549, 604, 371,
	0, 392, 547, 494, 0, 539, 513, 0, 540, 509,
	544, 0, 483, 0, 399, 423, 435, 452, 455, 484,
	569, 570, 571, 267, 454, 573, 574, 575, 576, 577,
	578, 579, 572, 426, 516, 493, 519, 434, 496, 495,
	0, 0, 530, 450, 531, 532, 355, 356, 357, 358,
	318, 557, 285, 453, 381, 0, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 522, 523, 520, 615, 0,
	580, 581, 0, 0, 447, 448, 313, 320, 466, 322,
	284, 370, 315, 432, 329, 0, 459, 524, 460, 583,
	586, 584, 585, 362, 325, 326, 396, 330, 340, 384,
	431, 368, 389, 282, 422, 397, 344, 510, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 564, 563, 562, 561,
	560, 559, 558, 0, 0, 507, 409, 294, 256, 290,
	291, 298, 605, 602, 413, 606, 0, 264, 2401, 338,
	0, 379, 312, 552, 553, 0, 0, 212, 213, 214,
	215, 216, 217, 218, 219, 257, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 233, 234, 235,
	236, 555, 227, 228, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 0, 0,
	0, 258, 259, 260, 261, 0, 0, 252, 253, 254,
	255, 0, 0, 0, 438, 439, 440, 462, 424, 486,
	603, 0, 0, 0, 0, 0, 0, 0, 536, 548,
	582, 0, 591, 592, 594, 596, 595, 598, 0, 609,
	477, 478, 588, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 0, 528, 479, 398, 351, 546, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 280, 203, 474, 593, 476, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 2271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 0, 417, 445, 301, 436,
	0, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 461, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 590,
	2270, 430, 0, 0, 0, 2276, 2273, 2275, 402, 0,
	2274, 334, 0, 0, 0, 446, 0, 388, 369, 611,
	0, 2268, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	612, 613, 614, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 608, 300, 365, 556, 589, 481, 0, 543, 482,
	491, 292, 515, 527, 526, 361, 441, 0, 538, 541,
	471, 607, 0, 535, 550, 610, 549, 604, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 426, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 450, 531, 532, 355, 356, 357, 358, 318,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 615, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 605, 602, 413, 606, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 257, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 233, 234, 235, 236,
	555, 227, 228, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 0, 0, 0,
	258, 259, 260, 261, 0, 0, 252, 253, 254, 255,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 603,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 595, 598, 0, 609, 477,
	478, 588, 367, 0, 492, 525, 514, 597, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	0, 0, 337, 529, 511, 521, 512, 497, 498, 499,
	506, 317, 500, 501, 502, 472, 503, 473, 504, 505,
	0, 528, 479, 398, 351, 546, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 280, 203, 474, 593, 476, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 2271, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 403,
	420, 281, 394, 433, 286, 401, 276, 366, 390, 0,
	0, 272, 418, 400, 348, 327, 328, 271, 0, 385,
	305, 319, 302, 364, 0, 417, 445, 301, 436, 0,
	428, 274, 0, 427, 363, 414, 419, 349, 343, 273,
	416, 347, 342, 331, 309, 461, 332, 333, 323, 375,
	341, 376, 324, 353, 352, 354, 0, 0, 0, 0,
	0, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 0, 0, 590, 2270,
	430, 0, 0, 0, 2276, 2273, 2275, 402, 0, 2274,
	334, 0, 0, 0, 446, 0, 388, 369, 611, 0,
	0, 386, 339, 415, 377, 421, 404, 429, 382, 378,
	265, 405, 304, 350, 277, 279, 299, 306, 308, 310,
	311, 359, 360, 372, 393, 406, 407, 408, 303, 287,
	387, 288, 321, 289, 266, 295, 293, 296, 395, 297,
	268, 373, 412, 0, 316, 383, 346, 269, 345, 374,
	411, 410, 278, 437, 443, 444, 533, 0, 449, 612,
	613, 614, 458, 463, 464, 465, 467, 468, 469, 470,
	534, 551, 518, 488, 451, 542, 485, 489, 490, 554,
	0, 0, 0, 442, 335, 336, 0, 314, 262, 263,
	608, 300, 365, 556, 589, 481, 0, 543, 482, 491,
	292, 515, 527, 526, 361, 441, 0, 538, 541, 471,
	607, 0, 535, 550, 610, 549, 604, 371, 0, 392,
	547, 494, 0, 539, 513, 0, 540, 509, 544, 0,
	483, 0, 399, 423, 435, 452, 455, 484, 569, 570,
	571, 267, 454, 573, 574, 575, 576, 577, 578, 579,
	572, 426, 516, 493, 519, 434, 496, 495, 0, 0,
	530, 450, 531, 532, 355, 356, 357, 358, 318, 557,
	285, 453, 381, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 522, 523, 520, 615, 0, 580, 581,
	0, 0, 447, 448, 313, 320, 466, 322, 284, 370,
	315, 432, 329, 0, 459, 524, 460, 583, 586, 584,
	585, 362, 325, 326, 396, 330, 340, 384, 431, 368,
	389, 282, 422, 397, 344, 510, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 564, 563, 562, 561, 560, 559,
	558, 0, 0, 507, 409, 294, 256, 290, 291, 298,
	605, 602, 413, 606, 0, 264, 487, 338, 0, 379,
	312, 552, 553, 0, 0, 212, 213, 214, 215, 216,
	217, 218, 219, 257, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 233, 234, 235, 236, 555,
	227, 228, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 0, 0, 0, 258,
	259, 260, 261, 0, 0, 252, 253, 254, 255, 0,
	0, 0, 438, 439, 440, 462, 424, 486, 603, 0,
	0, 0, 0, 0, 0, 0, 536, 548, 582, 0,
	591, 592, 594, 596, 595, 598, 0, 609, 477, 478,
	588, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 0, 1986, 0, 0, 0, 0, 307, 0,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 0,
	528, 479, 398, 351, 546, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 1987, 0, 0, 0,
	280, 203, 474, 593, 476, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 1175, 1176,
	1177, 1174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 0, 417, 445, 301, 436, 0, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 461, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 0, 0, 590, 0, 430,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 446, 0, 388, 369, 611, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 612, 613,
	614, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 608,
	300, 365, 556, 589, 481, 0, 543, 482, 491, 292,
	515, 527, 526, 361, 441, 0, 538, 541, 471, 607,
	0, 535, 550, 610, 549, 604, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	426, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	450, 531, 532, 355, 356, 357, 358, 318, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 615, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 605,
	602, 413, 606, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 257, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 233, 234, 235, 236, 555, 227,
	228, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 0, 0, 0, 258, 259,
	260, 261, 0, 0, 252, 253, 254, 255, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 603, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 595, 598, 180, 609, 477, 478, 588,
	0, 0, 0, 0, 0, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 120, 528, 479, 398, 351, 546, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 2036, 0, 202, 0, 0,
	0, 0, 0, 0, 280, 203, 474, 593, 476, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 0, 417, 445,
	301, 436, 0, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 461, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 590, 0, 430, 0, 0, 0, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 446, 0, 388,
	369, 611, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 612, 613, 614, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 608, 300, 365, 556, 589, 481, 0,
	543, 482, 491, 292, 515, 527, 526, 361, 441, 0,
	538, 541, 471, 607, 0, 535, 550, 610, 549, 604,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 426, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 450, 531, 532, 355, 356, 357,
	358, 318, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 615,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 605, 602, 413, 606, 0, 264, 487,
	338, 144, 379, 312, 552, 553, 0, 0, 212, 213,
	214, 215, 216, 217, 218, 219, 257, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 233, 234,
	235, 236, 555, 227, 228, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 0,
	0, 0, 258, 259, 260, 261, 0, 0, 252, 253,
	254, 255, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 603, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 595, 598, 180,
	609, 477, 478, 588, 0, 0, 0, 0, 0, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 120, 528, 479,
	398, 351, 546, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 2022,
	0, 202, 0, 0, 0, 0, 0, 0, 280, 203,
	474, 593, 476, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 0, 417, 445, 301, 436, 0, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 461, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 0, 0, 590, 0, 430, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 446, 0, 388, 369, 611, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 612, 613, 614, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 608, 300, 365,
	556, 589, 481, 0, 543, 482, 491, 292, 515, 527,
	526, 361, 441, 0, 538, 541, 471, 607, 0, 535,
	550, 610, 549, 604, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 426, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 450, 531,
	532, 355, 356, 357, 358, 318, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 615, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 605, 602, 413,
	606, 0, 264, 487, 338, 144, 379, 312, 552, 553,
	0, 0, 212, 213, 214, 215, 216, 217, 218, 219,
	257, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 233, 234, 235, 236, 555, 227, 228, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 0, 0, 0, 258, 259, 260, 261,
	0, 0, 252, 253, 254, 255, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 603, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 595, 598, 0, 609, 477, 478, 588, 367, 0,
	492, 525, 514, 597, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 307, 975, 0, 337, 529,
	511, 521, 512, 497, 498, 499, 506, 317, 500, 501,
	502, 472, 503, 473, 504, 505, 0, 528, 479, 398,
	351, 546, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 982, 983, 0, 0, 0, 0, 280, 203, 474,
	593, 476, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 986, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 403, 970, 281, 394, 433,
	286, 401, 276, 366, 390, 0, 0, 272, 418, 400,
	348, 327, 328, 271, 0, 385, 305, 319, 302, 364,
	0, 417, 445, 301, 436, 960, 428, 274, 959, 427,
	363, 414, 419, 349, 343, 273, 416, 347, 342, 331,
	309, 461, 332, 333, 323, 375, 341, 376, 324, 353,
	352, 354, 0, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 0, 0, 590, 0, 430, 0, 0, 0,
	0, 0, 0, 402, 0, 0, 334, 0, 0, 0,
	446, 0, 388, 369, 611, 0, 0, 386, 339, 415,
	377, 421, 404, 429, 973, 378, 265, 405, 304, 350,
	277, 279, 299, 306, 308, 310, 311, 359, 360, 372,
	393, 406, 407, 408, 303, 287, 387, 288, 321, 289,
	266, 295, 293, 296, 395, 297, 268, 373, 412, 0,
	316, 383, 346, 269, 345, 374, 411, 410, 278, 437,
	443, 444, 533, 0, 449, 612, 613, 614, 458, 463,
	464, 465, 467, 468, 469, 470, 534, 551, 518, 488,
	451, 542, 485, 489, 490, 554, 0, 0, 0, 442,
	335, 336, 0, 314, 262, 263, 608, 300, 365, 556,
	589, 481, 0, 543, 482, 491, 292, 515, 527, 526,
	361, 441, 0, 538, 541, 471, 607, 0, 535, 550,
	610, 549, 604, 371, 0, 392, 547, 494, 0, 539,
	513, 0, 540, 509, 544, 0, 483, 0, 399, 423,
	435, 452, 455, 484, 569, 570, 571, 267, 454, 573,
	574, 575, 576, 577, 578, 974, 572, 426, 516, 493,
	519, 434, 496, 495, 0, 0, 530, 977, 531, 532,
	355, 356, 357, 358, 318, 557, 285, 453, 381, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 520, 615, 0, 580, 581, 0, 0, 447, 448,
	313, 320, 466, 322, 284, 370, 315, 432, 329, 0,
	459, 524, 460, 583, 586, 584, 585, 984, 971, 980,
	972, 330, 340, 384, 431, 368, 389, 282, 422, 397,
	981, 510, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	564, 563, 562, 561, 560, 559, 558, 0, 0, 507,
	409, 294, 256, 290, 291, 298, 605, 602, 413, 606,
	0, 264, 487, 338, 0, 379, 312, 552, 553, 0,
	0, 212, 213, 214, 215, 216, 217, 218, 219, 257,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 233, 234, 235, 236, 555, 227, 228, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 0, 0, 0, 258, 259, 260, 261, 0,
	0, 252, 253, 254, 255, 0, 0, 0, 438, 439,
	440, 462, 424, 486, 603, 0, 0, 0, 0, 0,
	0, 0, 536, 548, 582, 0, 591, 592, 594, 596,
	595, 598, 180, 609, 477, 478, 588, 0, 0, 0,
	0, 0, 367, 0, 492, 525, 514, 597, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	0, 0, 337, 529, 511, 521, 512, 497, 498, 499,
	506, 317, 500, 501, 502, 472, 503, 473, 504, 505,
	120, 528, 479, 398, 351, 546, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1919, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 280, 203, 474, 593, 476, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 403,
	420, 281, 394, 433, 286, 401, 276, 366, 390, 0,
	0, 272, 418, 400, 348, 327, 328, 271, 0, 385,
	305, 319, 302, 364, 0, 417, 445, 301, 436, 0,
	428, 274, 0, 427, 363, 414, 419, 349, 343, 273,
	416, 347, 342, 331, 309, 461, 332, 333, 323, 375,
	341, 376, 324, 353, 352, 354, 0, 0, 0, 0,
	0, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 0, 0, 590, 0,
	430, 0, 0, 0, 0, 0, 0, 402, 0, 0,
	334, 0, 0, 0, 446, 0, 388, 369, 611, 0,
	0, 386, 339, 415, 377, 421, 404, 429, 382, 378,
	265, 405, 304, 350, 277, 279, 299, 306, 308, 310,
	311, 359, 360, 372, 393, 406, 407, 408, 303, 287,
	387, 288, 321, 289, 266, 295, 293, 296, 395, 297,
	268, 373, 412, 0, 316, 383, 346, 269, 345, 374,
	411, 410, 278, 437, 443, 444, 533, 0, 449, 612,
	613, 614, 458, 463, 464, 465, 467, 468, 469, 470,
	534, 551, 518, 488, 451, 542, 485, 489, 490, 554,
	0, 0, 0, 442, 335, 336, 0, 314, 262, 263,
	608, 300, 365, 556, 589, 481, 0, 543, 482, 491,
	292, 515, 527, 526, 361, 441, 0, 538, 541, 471,
	607, 0, 535, 550, 610, 549, 604, 371, 0, 392,
	547, 494, 0, 539, 513, 0, 540, 509, 544, 0,
	483, 0, 399, 423, 435, 452, 455, 484, 569, 570,
	571, 267, 454, 573, 574, 575, 576, 577, 578, 579,
	572, 426, 516, 493, 519, 434, 496, 495, 0, 0,
	530, 450, 531, 532, 355, 356, 357, 358, 318, 557,
	285, 453, 381, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 522, 523, 520, 615, 0, 580, 581,
	0, 0, 447, 448, 313, 320, 466, 322, 284, 370,
	315, 432, 329, 0, 459, 524, 460, 583, 586, 584,
	585, 362, 325, 326, 396, 330, 340, 384, 431, 368,
	389, 282, 422, 397, 344, 510, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 564, 563, 562, 561, 560, 559,
	558, 0, 0, 507, 409, 294, 256, 290, 291, 298,
	605, 602, 413, 606, 0, 264, 487, 338, 144, 379,
	312, 552, 553, 0, 0, 212, 213, 214, 215, 216,
	217, 218, 219, 257, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 233, 234, 235, 236, 555,
	227, 228, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 0, 0, 0, 258,
	259, 260, 261, 0, 0, 252, 253, 254, 255, 0,
	0, 0, 438, 439, 440, 462, 424, 486, 603, 0,
	0, 0, 0, 0, 0, 0, 536, 548, 582, 0,
	591, 592, 594, 596, 595, 598, 0, 609, 477, 478,
	588, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 307, 0,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 0,
	528, 479, 398, 351, 546, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 982, 983, 0, 0, 0, 0,
	280, 203, 474, 593, 476, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 986, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 0, 417, 445, 301, 436, 960, 428,
	274, 959, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 461, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 0, 0, 590, 0, 430,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 446, 0, 388, 369, 611, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 612, 613,
	614, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 608,
	300, 365, 556, 589, 481, 0, 543, 482, 491, 292,
	515, 527, 526, 361, 441, 0, 538, 541, 471, 607,
	0, 535, 550, 610, 549, 604, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	426, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	450, 531, 532, 355, 356, 357, 358, 318, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 615, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	984, 1938, 980, 1939, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 981, 510, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 605,
	602, 413, 606, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 257, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 233, 234, 235, 236, 555, 227,
	228, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 0, 0, 0, 258, 259,
	260, 261, 0, 0, 252, 253, 254, 255, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 603, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 595, 598, 0, 609, 477, 478, 588,
	367, 0, 492, 525, 514, 597, 480, 0, 0, 2761,
	0, 0, 0, 0, 0, 0, 0, 307, 0, 0,
	337, 529, 511, 521, 512, 497, 498, 499, 506, 317,
	500, 501, 502, 472, 503, 473, 504, 505, 0, 528,
	479, 398, 351, 546, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 280,
	203, 474, 593, 476, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 403, 420, 281,
	394, 433, 286, 401, 276, 366, 390, 0, 0, 272,
	418, 400, 348, 327, 328, 271, 0, 385, 305, 319,
	302, 364, 0, 417, 445, 301, 436, 0, 428, 274,
	0, 427, 363, 414, 419, 349, 343, 273, 416, 347,
	342, 331, 309, 461, 332, 333, 323, 375, 341, 376,
	324, 353, 352, 354, 0, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 2764,
	0, 0, 2763, 587, 0, 0, 590, 0, 430, 0,
	0, 0, 0, 0, 0, 402, 0, 0, 334, 0,
	0, 0, 446, 0, 388, 369, 611, 0, 0, 386,
	339, 415, 377, 421, 404, 429, 382, 378, 265, 405,
	304, 350, 277, 279, 299, 306, 308, 310, 311, 359,
	360, 372, 393, 406, 407, 408, 303, 287, 387, 288,
	321, 289, 266, 295, 293, 296, 395, 297, 268, 373,
	412, 0, 316, 383, 346, 269, 345, 374, 411, 410,
	278, 437, 443, 444, 533, 0, 449, 612, 613, 614,
	458, 463, 464, 465, 467, 468, 469, 470, 534, 551,
	518, 488, 451, 542, 485, 489, 490, 554, 0, 0,
	0, 442, 335, 336, 0, 314, 262, 263, 608, 300,
	365, 556, 589, 481, 0, 543, 482, 491, 292, 515,
	527, 526, 361, 441, 0, 538, 541, 471, 607, 0,
	535, 550, 610, 549, 604, 371, 0, 392, 547, 494,
	0, 539, 513, 0, 540, 509, 544, 0, 483, 0,
	399, 423, 435, 452, 455, 484, 569, 570, 571, 267,
	454, 573, 574, 575, 576, 577, 578, 579, 572, 426,
	516, 493, 519, 434, 496, 495, 0, 0, 530, 450,
	531, 532, 355, 356, 357, 358, 318, 557, 285, 453,
	381, 0, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 523, 520, 615, 0, 580, 581, 0, 0,
	447, 448, 313, 320, 466, 322, 284, 370, 315, 432,
	329, 0, 459, 524, 460, 583, 586, 584, 585, 362,
	325, 326, 396, 330, 340, 384, 431, 368, 389, 282,
	422, 397, 344, 510, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 564, 563, 562, 561, 560, 559, 558, 0,
	0, 507, 409, 294, 256, 290, 291, 298, 605, 602,
	413, 606, 0, 264, 487, 338, 0, 379, 312, 552,
	553, 0, 0, 212, 213, 214, 215, 216, 217, 218,
	219, 257, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 233, 234, 235, 236, 555, 227, 228,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 0, 0, 0, 258, 259, 260,
	261, 0, 0, 252, 253, 254, 255, 0, 0, 0,
	438, 439, 440, 462, 424, 486, 603, 0, 0, 0,
	0, 0, 0, 0, 536, 548, 582, 0, 591, 592,
	594, 596, 595, 598, 0, 609, 477, 478, 588, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 1441, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 0, 528, 479,
	398, 351, 546, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 1439, 0, 0, 0, 280, 203,
	474, 593, 476, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 0, 417, 445, 301, 436, 0, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 461, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 0, 0, 590, 0, 430, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 446, 0, 388, 369, 611, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 612, 613, 614, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 608, 300, 365,
	556, 589, 481, 0, 543, 482, 491, 292, 515, 527,
	526, 361, 441, 0, 538, 541, 471, 607, 0, 535,
	550, 610, 549, 604, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 426, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 450, 531,
	532, 355, 356, 357, 358, 318, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 615, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 605, 602, 413,
	606, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 212, 213, 214, 215, 216, 217, 218, 219,
	257, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 233, 234, 235, 236, 555, 227, 228, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 0, 0, 0, 258, 259, 260, 261,
	0, 0, 252, 253, 254, 255, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 603, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 595, 598, 0, 609, 477, 478, 588, 367, 0,
	492, 525, 514, 597, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 307, 1435, 0, 337, 529,
	511, 521, 512, 497, 498, 499, 506, 317, 500, 501,
	502, 472, 503, 473, 504, 505, 0, 528, 479, 398,
	351, 546, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 1439, 0, 0, 0, 280, 203, 474,
	593, 476, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1437, 0, 0,
	0, 0, 0, 0, 270, 403, 420, 281, 394, 433,
	286, 401, 276, 366, 390, 0, 0, 272, 418, 400,
	348, 327, 328, 271, 0, 385, 305, 319, 302, 364,
	0, 417, 445, 301, 436, 0, 428, 274, 0, 427,
	363, 414, 419, 349, 343, 273, 416, 347, 342, 331,
	309, 461, 332, 333, 323, 375, 341, 376, 324, 353,
	352, 354, 0, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 0, 0, 590, 0, 430, 0, 0, 0,
	0, 0, 0, 402, 0, 0, 334, 0, 0, 0,
	446, 0, 388, 369, 611, 0, 0, 386, 339, 415,
	377, 421, 404, 429, 382, 378, 265, 405, 304, 350,
	277, 279, 299, 306, 308, 310, 311, 359, 360, 372,
	393, 406, 407, 408, 303, 287, 387, 288, 321, 289,
	266, 295, 293, 296, 395, 297, 268, 373, 412, 0,
	316, 383, 346, 269, 345, 374, 411, 410, 278, 437,
	443, 444, 533, 0, 449, 612, 613, 614, 458, 463,
	464, 465, 467, 468, 469, 470, 534, 551, 518, 488,
	451, 542, 485, 489, 490, 554, 0, 0, 0, 442,
	335, 336, 0, 314, 262, 263, 608, 300, 365, 556,
	589, 481, 0, 543, 482, 491, 292, 515, 527, 526,
	361, 441, 0, 538, 541, 471, 607, 0, 535, 550,
	610, 549, 604, 371, 0, 392, 547, 494, 0, 539,
	513, 0, 540, 509, 544, 0, 483, 0, 399, 423,
	435, 452, 455, 484, 569, 570, 571, 267, 454, 573,
	574, 575, 576, 577, 578, 579, 572, 426, 516, 493,
	519, 434, 496, 495, 0, 0, 530, 450, 531, 532,
	355, 356, 357, 358, 318, 557, 285, 453, 381, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 520, 615, 0, 580, 581, 0, 0, 447, 448,
	313, 320, 466, 322, 284, 370, 315, 432, 329, 0,
	459, 524, 460, 583, 586, 584, 585, 362, 325, 326,
	396, 330, 340, 384, 431, 368, 389, 282, 422, 397,
	344, 510, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	564, 563, 562, 561, 560, 559, 558, 0, 0, 507,
	409, 294, 256, 290, 291, 298, 605, 602, 413, 606,
	0, 264, 487, 338, 0, 379, 312, 552, 553, 0,
	0, 212, 213, 214, 215, 216, 217, 218, 219, 257,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 233, 234, 235, 236, 555, 227, 228, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 0, 0, 0, 258, 259, 260, 261, 0,
	0, 252, 253, 254, 255, 0, 0, 0, 438, 439,
	440, 462, 424, 486, 603, 0, 0, 0, 0, 0,
	0, 0, 536, 548, 582, 0, 591, 592, 594, 596,
	595, 598, 0, 609, 477, 478, 588, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 0, 528, 479, 398, 351,
	546, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3727, 0, 202,
	801, 0, 0, 0, 0, 0, 280, 203, 474, 593,
	476, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 0,
	417, 445, 301, 436, 0, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	461, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 590, 0, 430, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 446,
	0, 388, 369, 611, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 612, 613, 614, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 608, 300, 365, 556, 589,
	481, 0, 543, 482, 491, 292, 515, 527, 526, 361,
	441, 0, 538, 541, 471, 607, 0, 535, 550, 610,
	549, 604, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 426, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 450, 531, 532, 355,
	356, 357, 358, 318, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 615, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 605, 602, 413, 606, 0,
	264, 487, 338, 0, 379, 312, 552, 553, 0, 0,
	212, 213, 214, 215, 216, 217, 218, 219, 257, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	233, 234, 235, 236, 555, 227, 228, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 0, 0, 0, 258, 259, 260, 261, 0, 0,
	252, 253, 254, 255, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 603, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 595,
	598, 0, 609, 477, 478, 588, 367, 0, 492, 525,
	514, 597, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 0, 528, 479, 398, 351, 546,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 1439, 0, 0, 0, 280, 203, 474, 593, 476,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1437, 0, 0, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 0, 417,
	445, 301, 436, 0, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 461,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	0, 0, 590, 0, 430, 0, 0, 0, 0, 0,
	0, 402, 0, 0, 334, 0, 0, 0, 446, 0,
	388, 369, 611, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 612, 613, 614, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 608, 300, 365, 556, 589, 481,
	0, 543, 482, 491, 292, 515, 527, 526, 361, 441,
	0, 538, 541, 471, 607, 0, 535, 550, 610, 549,
	604, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 426, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 450, 531, 532, 355, 356,
	357, 358, 318, 557, 285, 453, 381, 0, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	615, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 605, 602, 413, 606, 0, 264,
	487, 338, 0, 379, 312, 552, 553, 0, 0, 212,
	213, 214, 215, 216, 217, 218, 219, 257, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 233,
	234, 235, 236, 555, 227, 228, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	0, 0, 0, 258, 259, 260, 261, 0, 0, 252,
	253, 254, 255, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 603, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 595, 598,
	0, 609, 477, 478, 588, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 0, 528, 479, 398, 351, 546, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	1439, 0, 0, 0, 280, 203, 474, 593, 476, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1645, 0, 0, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 0, 417, 445,
	301, 436, 0, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 461, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 590, 0, 430, 0, 0, 0, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 446, 0, 388,
	369, 611, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 612, 613, 614, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 608, 300, 365, 556, 589, 481, 0,
	543, 482, 491, 292, 515, 527, 526, 361, 441, 0,
	538, 541, 471, 607, 0, 535, 550, 610, 549, 604,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 426, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 450, 531, 532, 355, 356, 357,
	358, 318, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 615,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 605, 602, 413, 606, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 212, 213,
	214, 215, 216, 217, 218, 219, 257, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 233, 234,
	235, 236, 555, 227, 228, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 0,
	0, 0, 258, 259, 260, 261, 0, 0, 252, 253,
	254, 255, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 603, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 595, 598, 0,
	609, 477, 478, 588, 367, 0, 492, 525, 514, 597,
	480, 0, 0, 0, 0, 0, 2342, 0, 0, 0,
	0, 307, 0, 0, 337, 529, 511, 521, 512, 497,
	498, 499, 506, 317, 500, 501, 502, 472, 503, 473,
	504, 505, 0, 528, 479, 398, 351, 546, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 2344,
	0, 0, 0, 280, 203, 474, 593, 476, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 403, 420, 281, 394, 433, 286, 401, 276, 366,
	390, 0, 0, 272, 418, 400, 348, 327, 328, 271,
	0, 385, 305, 319, 302, 364, 0, 417, 445, 301,
	436, 0, 428, 274, 0, 427, 363, 414, 419, 349,
	343, 273, 416, 347, 342, 331, 309, 461, 332, 333,
	323, 375, 341, 376, 324, 353, 352, 354, 0, 0,
	0, 0, 0, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 587, 0, 0,
	590, 0, 430, 0, 0, 0, 0, 0, 0, 402,
	0, 0, 334, 0, 0, 0, 446, 0, 388, 369,
	611, 0, 0, 386, 339, 415, 377, 421, 404, 429,
	382, 378, 265, 405, 304, 350, 277, 279, 299, 306,
	308, 310, 311, 359, 360, 372, 393, 406, 407, 408,
	303, 287, 387, 288, 321, 289, 266, 295, 293, 296,
	395, 297, 268, 373, 412, 0, 316, 383, 346, 269,
	345, 374, 411, 410, 278, 437, 443, 444, 533, 0,
	449, 612, 613, 614, 458, 463, 464, 465, 467, 468,
	469, 470, 534, 551, 518, 488, 451, 542, 485, 489,
	490, 554, 0, 0, 0, 442, 335, 336, 0, 314,
	262, 263, 608, 300, 365, 556, 589, 481, 0, 543,
	482, 491, 292, 515, 527, 526, 361, 441, 0, 538,
	541, 471, 607, 0, 535, 550, 610, 549, 604, 371,
	0, 392, 547, 494, 0, 539, 513, 0, 540, 509,
	544, 0, 483, 0, 399, 423, 435, 452, 455, 484,
	569, 570, 571, 267, 454, 573, 574, 575, 576, 577,
	578, 579, 572, 426, 516, 493, 519, 434, 496, 495,
	0, 0, 530, 450, 531, 532, 355, 356, 357, 358,
	318, 557, 285, 453, 381, 0, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 522, 523, 520, 615, 0,
	580, 581, 0, 0, 447, 448, 313, 320, 466, 322,
	284, 370, 315, 432, 329, 0, 459, 524, 460, 583,
	586, 584, 585, 362, 325, 326, 396, 330, 340, 384,
	431, 368, 389, 282, 422, 397, 344, 510, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 564, 563, 562, 561,
	560, 559, 558, 0, 0, 507, 409, 294, 256, 290,
	291, 298, 605, 602, 413, 606, 0, 264, 487, 338,
	0, 379, 312, 552, 553, 0, 0, 212, 213, 214,
	215, 216, 217, 218, 219, 257, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 233, 234, 235,
	236, 555, 227, 228, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 0, 0,
	0, 258, 259, 260, 261, 0, 0, 252, 253, 254,
	255, 0, 0, 0, 438, 439, 440, 462, 424, 486,
	603, 0, 0, 0, 0, 0, 0, 0, 536, 548,
	582, 0, 591, 592, 594, 596, 595, 598, 0, 609,
	477, 478, 588, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 0, 528, 479, 398, 351, 546, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 2953, 2955,
	0, 0, 280, 203, 474, 593, 476, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 0, 417, 445, 301, 436,
	0, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 461, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 590,
	0, 430, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 446, 0, 388, 369, 611,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	612, 613, 614, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 608, 300, 365, 556, 589, 481, 0, 543, 482,
	491, 292, 515, 527, 526, 361, 441, 0, 538, 541,
	471, 607, 0, 535, 550, 610, 549, 604, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 426, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 450, 531, 532, 355, 356, 357, 358, 318,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 615, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 605, 602, 413, 606, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 257, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 233, 234, 235, 236,
	555, 227, 228, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 0, 0, 0,
	258, 259, 260, 261, 0, 0, 252, 253, 254, 255,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 603,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 595, 598, 0, 609, 477,
	478, 588, 367, 0, 492, 525, 514, 597, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	2363, 0, 337, 529, 511, 521, 512, 497, 498, 499,
	506, 317, 500, 501, 502, 472, 503, 473, 504, 505,
	0, 528, 479, 398, 351, 546, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 1439, 0, 0,
	0, 280, 203, 474, 593, 476, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 403,
	420, 281, 394, 433, 286, 401, 276, 366, 390, 0,
	0, 272, 418, 400, 348, 327, 328, 271, 0, 385,
	305, 319, 302, 364, 0, 417, 445, 301, 436, 0,
	428, 274, 0, 427, 363, 414, 419, 349, 343, 273,
	416, 347, 342, 331, 309, 461, 332, 333, 323, 375,
	341, 376, 324, 353, 352, 354, 0, 0, 0, 0,
	0, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 0, 0, 590, 0,
	430, 0, 0, 0, 0, 0, 0, 402, 0, 0,
	334, 0, 0, 0, 446, 0, 388, 369, 611, 0,
	0, 386, 339, 415, 377, 421, 404, 429, 382, 378,
	265, 405, 304, 350, 277, 279, 299, 306, 308, 310,
	311, 359, 360, 372, 393, 406, 407, 408, 303, 287,
	387, 288, 321, 289, 266, 295, 293, 296, 395, 297,
	268, 373, 412, 0, 316, 383, 346, 269, 345, 374,
	411, 410, 278, 437, 443, 444, 533, 0, 449, 612,
	613, 614, 458, 463, 464, 465, 467, 468, 469, 470,
	534, 551, 518, 488, 451, 542, 485, 489, 490, 554,
	0, 0, 0, 442, 335, 336, 0, 314, 262, 263,
	608, 300, 365, 556, 589, 481, 0, 543, 482, 491,
	292, 515, 527, 526, 361, 441, 0, 538, 541, 471,
	607, 0, 535, 550, 610, 549, 604, 371, 0, 392,
	547, 494, 0, 539, 513, 0, 540, 509, 544, 0,
	483, 0, 399, 423, 435, 452, 455, 484, 569, 570,
	571, 267, 454, 573, 574, 575, 576, 577, 578, 579,
	572, 426, 516, 493, 519, 434, 496, 495, 0, 0,
	530, 450, 531, 532, 355, 356, 357, 358, 318, 557,
	285, 453, 381, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 522, 523, 520, 615, 0, 580, 581,
	0, 0, 447, 448, 313, 320, 466, 322, 284, 370,
	315, 432, 329, 0, 459, 524, 460, 583, 586, 584,
	585, 362, 325, 326, 396, 330, 340, 384, 431, 368,
	389, 282, 422, 397, 344, 510, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 564, 563, 562, 561, 560, 559,
	558, 0, 0, 507, 409, 294, 256, 290, 291, 298,
	605, 602, 413, 606, 0, 264, 487, 338, 0, 379,
	312, 552, 553, 0, 0, 212, 213, 214, 215, 216,
	217, 218, 219, 257, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 233, 234, 235, 236, 555,
	227, 228, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 0, 0, 0, 258,
	259, 260, 261, 0, 0, 252, 253, 254, 255, 0,
	0, 0, 438, 439, 440, 462, 424, 486, 603, 0,
	0, 0, 0, 0, 0, 0, 536, 548, 582, 0,
	591, 592, 594, 596, 595, 598, 0, 609, 477, 478,
	588, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 622, 307, 0,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 0,
	528, 479, 398, 351, 546, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	280, 203, 474, 593, 476, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 0, 417, 445, 301, 436, 0, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 461, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 0, 0, 590, 0, 430,
	0, 621, 0, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 446, 0, 388, 369, 611, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 612, 613,
	614, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 608,
	300, 365, 556, 589, 481, 0, 543, 482, 491, 292,
	515, 527, 526, 361, 441, 0, 538, 541, 471, 607,
	0, 535, 550, 610, 549, 604, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	426, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	450, 531, 532, 355, 356, 357, 358, 318, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 615, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 605,
	602, 413, 606, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 257, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 233, 234, 235, 236, 555, 227,
	228, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 0, 0, 0, 258, 259,
	260, 261, 0, 0, 252, 253, 254, 255, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 603, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 595, 598, 0, 609, 477, 478, 588,
	367, 0, 492, 525, 514, 597, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 0, 0,
	337, 529, 511, 521, 512, 497, 498, 499, 506, 317,
	500, 501, 502, 472, 503, 473, 504, 505, 0, 528,
	479, 398, 351, 546, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 801, 0, 0, 0, 0, 0, 280,
	203, 474, 593, 476, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 403, 420, 281,
	394, 433, 286, 401, 276, 366, 390, 0, 0, 272,
	418, 400, 348, 327, 328, 271, 0, 385, 305, 319,
	302, 364, 0, 417, 445, 301, 436, 0, 428, 274,
	0, 427, 363, 414, 419, 349, 343, 273, 416, 347,
	342, 331, 309, 461, 332, 333, 323, 375, 341, 376,
	324, 353, 352, 354, 0, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 587, 0, 0, 590, 0, 430, 0,
	0, 0, 0, 0, 0, 402, 0, 0, 334, 0,
	0, 0, 446, 0, 388, 369, 611, 0, 0, 386,
	339, 415, 377, 421, 404, 429, 382, 378, 265, 405,
	304, 350, 277, 279, 299, 306, 308, 310, 311, 359,
	360, 372, 393, 406, 407, 408, 303, 287, 387, 288,
	321, 289, 266, 295, 293, 296, 395, 297, 268, 373,
	412, 0, 316, 383, 346, 269, 345, 374, 411, 410,
	278, 437, 443, 444, 533, 0, 449, 612, 613, 614,
	458, 463, 464, 465, 467, 468, 469, 470, 534, 551,
	518, 488, 451, 542, 485, 489, 490, 554, 0, 0,
	0, 442, 335, 336, 0, 314, 262, 263, 608, 300,
	365, 556, 589, 481, 0, 543, 482, 491, 292, 515,
	527, 526, 361, 441, 0, 538, 541, 471, 607, 0,
	535, 550, 610, 549, 604, 371, 0, 392, 547, 494,
	0, 539, 513, 0, 540, 509, 544, 0, 483, 0,
	399, 423, 435, 452, 455, 484, 569, 570, 571, 267,
	454, 573, 574, 575, 576, 577, 578, 579, 572, 426,
	516, 493, 519, 434, 496, 495, 0, 0, 530, 450,
	531, 532, 355, 356, 357, 358, 318, 557, 285, 453,
	381, 0, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 523, 520, 615, 0, 580, 581, 0, 0,
	447, 448, 313, 320, 466, 322, 284, 370, 315, 432,
	329, 0, 459, 524, 460, 583, 586, 584, 585, 362,
	325, 326, 396, 330, 340, 384, 431, 368, 389, 282,
	422, 397, 344, 510, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 564, 563, 562, 561, 560, 559, 558, 0,
	0, 507, 409, 294, 256, 290, 291, 298, 605, 602,
	413, 606, 0, 264, 487, 338, 0, 379, 312, 552,
	553, 0, 0, 212, 213, 214, 215, 216, 217, 218,
	219, 257, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 233, 234, 235, 236, 555, 227, 228,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 0, 0, 0, 258, 259, 260,
	261, 0, 0, 252, 253, 254, 255, 0, 0, 0,
	438, 439, 440, 462, 424, 486, 603, 0, 0, 0,
	0, 0, 0, 0, 536, 548, 582, 0, 591, 592,
	594, 596, 595, 598, 0, 609, 477, 478, 588, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 0, 528, 479,
	398, 351, 546, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3706, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 280, 203,
	474, 593, 476, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 0, 417, 445, 301, 436, 0, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 461, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 0, 0, 590, 0, 430, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 446, 0, 388, 369, 611, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 612, 613, 614, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 608, 300, 365,
	556, 589, 481, 0, 543, 482, 491, 292, 515, 527,
	526, 361, 441, 0, 538, 541, 471, 607, 0, 535,
	550, 610, 549, 604, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 426, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 450, 531,
	532, 355, 356, 357, 358, 318, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 615, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 605, 602, 413,
	606, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 212, 213, 214, 215, 216, 217, 218, 219,
	257, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 233, 234, 235, 236, 555, 227, 228, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 0, 0, 0, 258, 259, 260, 261,
	0, 0, 252, 253, 254, 255, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 603, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 595, 598, 0, 609, 477, 478, 588, 367, 0,
	492, 525, 514, 597, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 307, 0, 0, 337, 529,
	511, 521, 512, 497, 498, 499, 506, 317, 500, 501,
	502, 472, 503, 473, 504, 505, 0, 528, 479, 398,
	351, 546, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 3496, 0, 0, 0, 280, 203, 474,
	593, 476, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 403, 420, 281, 394, 433,
	286, 401, 276, 366, 390, 0, 0, 272, 418, 400,
	348, 327, 328, 271, 0, 385, 305, 319, 302, 364,
	0, 417, 445, 301, 436, 0, 428, 274, 0, 427,
	363, 414, 419, 349, 343, 273, 416, 347, 342, 331,
	309, 461, 332, 333, 323, 375, 341, 376, 324, 353,
	352, 354, 0, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 0, 0, 590, 0, 430, 0, 0, 0,
	0, 0, 0, 402, 0, 0, 334, 0, 0, 0,
	446, 0, 388, 369, 611, 0, 0, 386, 339, 415,
	377, 421, 404, 429, 382, 378, 265, 405, 304, 350,
	277, 279, 299, 306, 308, 310, 311, 359, 360, 372,
	393, 406, 407, 408, 303, 287, 387, 288, 321, 289,
	266, 295, 293, 296, 395, 297, 268, 373, 412, 0,
	316, 383, 346, 269, 345, 374, 411, 410, 278, 437,
	443, 444, 533, 0, 449, 612, 613, 614, 458, 463,
	464, 465, 467, 468, 469, 470, 534, 551, 518, 488,
	451, 542, 485, 489, 490, 554, 0, 0, 0, 442,
	335, 336, 0, 314, 262, 263, 608, 300, 365, 556,
	589, 481, 0, 543, 482, 491, 292, 515, 527, 526,
	361, 441, 0, 538, 541, 471, 607, 0, 535, 550,
	610, 549, 604, 371, 0, 392, 547, 494, 0, 539,
	513, 0, 540, 509, 544, 0, 483, 0, 399, 423,
	435, 452, 455, 484, 569, 570, 571, 267, 454, 573,
	574, 575, 576, 577, 578, 579, 572, 426, 516, 493,
	519, 434, 496, 495, 0, 0, 530, 450, 531, 532,
	355, 356, 357, 358, 318, 557, 285, 453, 381, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 520, 615, 0, 580, 581, 0, 0, 447, 448,
	313, 320, 466, 322, 284, 370, 315, 432, 329, 0,
	459, 524, 460, 583, 586, 584, 585, 362, 325, 326,
	396, 330, 340, 384, 431, 368, 389, 282, 422, 397,
	344, 510, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	564, 563, 562, 561, 560, 559, 558, 0, 0, 507,
	409, 294, 256, 290, 291, 298, 605, 602, 413, 606,
	0, 264, 487, 338, 0, 379, 312, 552, 553, 0,
	0, 212, 213, 214, 215, 216, 217, 218, 219, 257,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 233, 234, 235, 236, 555, 227, 228, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 0, 0, 0, 258, 259, 260, 261, 0,
	0, 252, 253, 254, 255, 0, 0, 0, 438, 439,
	440, 462, 424, 486, 603, 0, 0, 0, 0, 0,
	0, 0, 536, 548, 582, 0, 591, 592, 594, 596,
	595, 598, 0, 609, 477, 478, 588, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 0, 528, 479, 398, 351,
	546, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 280, 203, 474, 593,
	476, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 0,
	417, 445, 301, 436, 0, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	461, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 590, 0, 430, 0, 0, 0, 3619,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 446,
	0, 388, 369, 611, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 612, 613, 614, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 608, 300, 365, 556, 589,
	481, 0, 543, 482, 491, 292, 515, 527, 526, 361,
	441, 0, 538, 541, 471, 607, 0, 535, 550, 610,
	549, 604, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 426, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 450, 531, 532, 355,
	356, 357, 358, 318, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 615, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 605, 602, 413, 606, 0,
	264, 487, 338, 0, 379, 312, 552, 553, 0, 0,
	212, 213, 214, 215, 216, 217, 218, 219, 257, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	233, 234, 235, 236, 555, 227, 228, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 0, 0, 0, 258, 259, 260, 261, 0, 0,
	252, 253, 254, 255, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 603, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 595,
	598, 0, 609, 477, 478, 588, 367, 0, 492, 525,
	514, 597, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 0, 528, 479, 398, 351, 546,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3350, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 280, 203, 474, 593, 476,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 0, 417,
	445, 301, 436, 0, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 461,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	0, 0, 590, 0, 430, 0, 0, 0, 0, 0,
	0, 402, 0, 0, 334, 0, 0, 0, 446, 0,
	388, 369, 611, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 612, 613, 614, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 608, 300, 365, 556, 589, 481,
	0, 543, 482, 491, 292, 515, 527, 526, 361, 441,
	0, 538, 541, 471, 607, 0, 535, 550, 610, 549,
	604, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 426, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 450, 531, 532, 355, 356,
	357, 358, 318, 557, 285, 453, 381, 0, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	615, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 605, 602, 413, 606, 0, 264,
	487, 338, 0, 379, 312, 552, 553, 0, 0, 212,
	213, 214, 215, 216, 217, 218, 219, 257, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 233,
	234, 235, 236, 555, 227, 228, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	0, 0, 0, 258, 259, 260, 261, 0, 0, 252,
	253, 254, 255, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 603, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 595, 598,
	0, 609, 477, 478, 588, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 0, 528, 479, 398, 351, 546, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3511, 0, 202, 0, 0,
	0, 0, 0, 0, 280, 203, 474, 593, 476, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 0, 417, 445,
	301, 436, 0, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 461, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 590, 0, 430, 0, 0, 0, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 446, 0, 388,
	369, 611, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 612, 613, 614, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 608, 300, 365, 556, 589, 481, 0,
	543, 482, 491, 292, 515, 527, 526, 361, 441, 0,
	538, 541, 471, 607, 0, 535, 550, 610, 549, 604,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 426, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 450, 531, 532, 355, 356, 357,
	358, 318, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 615,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 605, 602, 413, 606, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 212, 213,
	214, 215, 216, 217, 218, 219, 257, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 233, 234,
	235, 236, 555, 227, 228, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 0,
	0, 0, 258, 259, 260, 261, 0, 0, 252, 253,
	254, 255, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 603, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 595, 598, 0,
	609, 477, 478, 588, 367, 0, 492, 525, 514, 597,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 307, 0, 0, 337, 529, 511, 521, 512, 497,
	498, 499, 506, 317, 500, 501, 502, 472, 503, 473,
	504, 505, 0, 528, 479, 398, 351, 546, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 280, 203, 474, 593, 476, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 403, 420, 281, 394, 433, 286, 401, 276, 366,
	390, 0, 0, 272, 418, 400, 348, 327, 328, 271,
	0, 385, 305, 319, 302, 364, 0, 417, 445, 301,
	436, 0, 428, 274, 0, 427, 363, 414, 419, 349,
	343, 273, 416, 347, 342, 331, 309, 461, 332, 333,
	323, 375, 341, 376, 324, 353, 352, 354, 0, 0,
	0, 0, 0, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 587, 0, 0,
	590, 0, 430, 0, 0, 0, 3437, 0, 0, 402,
	0, 0, 334, 0, 0, 0, 446, 0, 388, 369,
	611, 0, 0, 386, 339, 415, 377, 421, 404, 429,
	382, 378, 265, 405, 304, 350, 277, 279, 299, 306,
	308, 310, 311, 359, 360, 372, 393, 406, 407, 408,
	303, 287, 387, 288, 321, 289, 266, 295, 293, 296,
	395, 297, 268, 373, 412, 0, 316, 383, 346, 269,
	345, 374, 411, 410, 278, 437, 443, 444, 533, 0,
	449, 612, 613, 614, 458, 463, 464, 465, 467, 468,
	469, 470, 534, 551, 518, 488, 451, 542, 485, 489,
	490, 554, 0, 0, 0, 442, 335, 336, 0, 314,
	262, 263, 608, 300, 365, 556, 589, 481, 0, 543,
	482, 491, 292, 515, 527, 526, 361, 441, 0, 538,
	541, 471, 607, 0, 535, 550, 610, 549, 604, 371,
	0, 392, 547, 494, 0, 539, 513, 0, 540, 509,
	544, 0, 483, 0, 399, 423, 435, 452, 455, 484,
	569, 570, 571, 267, 454, 573, 574, 575, 576, 577,
	578, 579, 572, 426, 516, 493, 519, 434, 496, 495,
	0, 0, 530, 450, 531, 532, 355, 356, 357, 358,
	318, 557, 285, 453, 381, 0, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 522, 523, 520, 615, 0,
	580, 581, 0, 0, 447, 448, 313, 320, 466, 322,
	284, 370, 315, 432, 329, 0, 459, 524, 460, 583,
	586, 584, 585, 362, 325, 326, 396, 330, 340, 384,
	431, 368, 389, 282, 422, 397, 344, 510, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 564, 563, 562, 561,
	560, 559, 558, 0, 0, 507, 409, 294, 256, 290,
	291, 298, 605, 602, 413, 606, 0, 264, 487, 338,
	0, 379, 312, 552, 553, 0, 0, 212, 213, 214,
	215, 216, 217, 218, 219, 257, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 233, 234, 235,
	236, 555, 227, 228, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 0, 0,
	0, 258, 259, 260, 261, 0, 0, 252, 253, 254,
	255, 0, 0, 0, 438, 439, 440, 462, 424, 486,
	603, 0, 0, 0, 0, 0, 0, 0, 536, 548,
	582, 0, 591, 592, 594, 596, 595, 598, 0, 609,
	477, 478, 588, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 0, 528, 479, 398, 351, 546, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 2985, 0,
	0, 0, 280, 203, 474, 593, 476, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 0, 417, 445, 301, 436,
	0, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 461, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 590,
	0, 430, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 446, 0, 388, 369, 611,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	612, 613, 614, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 608, 300, 365, 556, 589, 481, 0, 543, 482,
	491, 292, 515, 527, 526, 361, 441, 0, 538, 541,
	471, 607, 0, 535, 550, 610, 549, 604, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 426, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 450, 531, 532, 355, 356, 357, 358, 318,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 615, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 605, 602, 413, 606, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 257, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 233, 234, 235, 236,
	555, 227, 228, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 0, 0, 0,
	258, 259, 260, 261, 0, 0, 252, 253, 254, 255,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 603,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 595, 598, 0, 609, 477,
	478, 588, 367, 0, 492, 525, 514, 597, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	0, 0, 337, 529, 511, 521, 512, 497, 498, 499,
	506, 317, 500, 501, 502, 472, 503, 473, 504, 505,
	0, 528, 479, 398, 351, 546, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 280, 203, 474, 593, 476, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3003, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 403,
	420, 281, 394, 433, 286, 401, 276, 366, 390, 0,
	0, 272, 418, 400, 348, 327, 328, 271, 0, 385,
	305, 319, 302, 364, 0, 417, 445, 301, 436, 0,
	428, 274, 0, 427, 363, 414, 419, 349, 343, 273,
	416, 347, 342, 331, 309, 461, 332, 333, 323, 375,
	341, 376, 324, 353, 352, 354, 0, 0, 0, 0,
	0, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 0, 0, 590, 0,
	430, 0, 0, 0, 0, 0, 0, 402, 0, 0,
	334, 0, 0, 0, 446, 0, 388, 369, 611, 0,
	0, 386, 339, 415, 377, 421, 404, 429, 382, 378,
	265, 405, 304, 350, 277, 279, 299, 306, 308, 310,
	311, 359, 360, 372, 393, 406, 407, 408, 303, 287,
	387, 288, 321, 289, 266, 295, 293, 296, 395, 297,
	268, 373, 412, 0, 316, 383, 346, 269, 345, 374,
	411, 410, 278, 437, 443, 444, 533, 0, 449, 612,
	613, 614, 458, 463, 464, 465, 467, 468, 469, 470,
	534, 551, 518, 488, 451, 542, 485, 489, 490, 554,
	0, 0, 0, 442, 335, 336, 0, 314, 262, 263,
	608, 300, 365, 556, 589, 481, 0, 543, 482, 491,
	292, 515, 527, 526, 361, 441, 0, 538, 541, 471,
	607, 0, 535, 550, 610, 549, 604, 371, 0, 392,
	547, 494, 0, 539, 513, 0, 540, 509, 544, 0,
	483, 0, 399, 423, 435, 452, 455, 484, 569, 570,
	571, 267, 454, 573, 574, 575, 576, 577, 578, 579,
	572, 426, 516, 493, 519, 434, 496, 495, 0, 0,
	530, 450, 531, 532, 355, 356, 357, 358, 318, 557,
	285, 453, 381, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 522, 523, 520, 615, 0, 580, 581,
	0, 0, 447, 448, 313, 320, 466, 322, 284, 370,
	315, 432, 329, 0, 459, 524, 460, 583, 586, 584,
	585, 362, 325, 326, 396, 330, 340, 384, 431, 368,
	389, 282, 422, 397, 344, 510, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 564, 563, 562, 561, 560, 559,
	558, 0, 0, 507, 409, 294, 256, 290, 291, 298,
	605, 602, 413, 606, 0, 264, 487, 338, 0, 379,
	312, 552, 553, 0, 0, 212, 213, 214, 215, 216,
	217, 218, 219, 257, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 233, 234, 235, 236, 555,
	227, 228, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 0, 0, 0, 258,
	259, 260, 261, 0, 0, 252, 253, 254, 255, 0,
	0, 0, 438, 439, 440, 462, 424, 486, 603, 0,
	0, 0, 0, 0, 0, 0, 536, 548, 582, 0,
	591, 592, 594, 596, 595, 598, 0, 609, 477, 478,
	588, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 307, 0,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 0,
	528, 479, 398, 351, 546, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1919, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	280, 203, 474, 593, 476, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 0, 417, 445, 301, 436, 0, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 461, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 0, 0, 590, 0, 430,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 446, 0, 388, 369, 611, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 612, 613,
	614, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 608,
	300, 365, 556, 589, 481, 0, 543, 482, 491, 292,
	515, 527, 526, 361, 441, 0, 538, 541, 471, 607,
	0, 535, 550, 610, 549, 604, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	426, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	450, 531, 532, 355, 356, 357, 358, 318, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 615, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 605,
	602, 413, 606, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 257, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 233, 234, 235, 236, 555, 227,
	228, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 0, 0, 0, 258, 259,
	260, 261, 0, 0, 252, 253, 254, 255, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 603, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 595, 598, 0, 609, 477, 478, 588,
	367, 0, 492, 525, 514, 597, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 0, 0,
	337, 529, 511, 521, 512, 497, 498, 499, 506, 317,
	500, 501, 502, 472, 503, 473, 504, 505, 0, 528,
	479, 398, 351, 546, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 280,
	203, 474, 593, 476, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 403, 420, 281,
	394, 433, 286, 401, 276, 366, 390, 0, 0, 272,
	418, 400, 348, 327, 328, 271, 0, 385, 305, 319,
	302, 364, 0, 417, 445, 301, 436, 0, 428, 274,
	0, 427, 363, 414, 419, 349, 343, 273, 416, 347,
	342, 331, 309, 461, 332, 333, 323, 375, 341, 376,
	324, 353, 352, 354, 0, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 587, 0, 0, 590, 0, 430, 0,
	0, 0, 0, 0, 0, 402, 0, 0, 334, 0,
	0, 0, 446, 0, 388, 369, 611, 0, 0, 386,
	339, 415, 377, 421, 404, 429, 382, 378, 265, 405,
	304, 350, 277, 279, 299, 306, 308, 310, 311, 359,
	360, 372, 393, 406, 407, 408, 303, 287, 387, 288,
	321, 289, 266, 295, 293, 296, 395, 297, 268, 373,
	412, 0, 316, 383, 346, 269, 345, 374, 411, 410,
	278, 437, 443, 444, 533, 0, 449, 612, 613, 614,
	458, 463, 464, 465, 467, 468, 469, 470, 534, 551,
	518, 488, 451, 542, 485, 489, 490, 554, 0, 0,
	0, 442, 335, 336, 0, 314, 262, 263, 608, 300,
	365, 556, 589, 481, 0, 543, 482, 491, 292, 515,
	527, 526, 361, 441, 0, 538, 541, 471, 607, 0,
	535, 550, 610, 549, 604, 371, 0, 392, 547, 494,
	0, 539, 513, 0, 540, 509, 544, 0, 483, 0,
	399, 423, 435, 452, 455, 484, 569, 570, 571, 267,
	454, 573, 574, 575, 576, 577, 578, 579, 572, 426,
	516, 493, 519, 434, 496, 495, 0, 0, 530, 450,
	531, 532, 355, 356, 357, 358, 318, 557, 285, 453,
	381, 0, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 523, 520, 615, 0, 580, 581, 0, 0,
	447, 448, 313, 320, 466, 322, 284, 370, 315, 432,
	329, 0, 459, 524, 460, 583, 586, 584, 585, 362,
	325, 326, 396, 330, 340, 384, 431, 368, 389, 282,
	422, 397, 344, 510, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 564, 563, 562, 561, 560, 559, 558, 0,
	0, 507, 409, 294, 256, 290, 291, 298, 605, 602,
	413, 606, 0, 264, 487, 338, 0, 379, 312, 552,
	553, 0, 0, 212, 213, 214, 215, 216, 217, 218,
	219, 257, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 233, 234, 235, 236, 555, 227, 228,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 0, 0, 0, 258, 259, 260,
	261, 0, 0, 252, 253, 254, 255, 0, 0, 0,
	438, 439, 440, 462, 424, 486, 603, 0, 0, 0,
	0, 0, 0, 0, 536, 548, 582, 0, 591, 592,
	594, 596, 595, 598, 0, 609, 477, 478, 588, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 0, 528, 479,
	398, 351, 546, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 280, 203,
	474, 593, 476, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2863,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 0, 417, 445, 301, 436, 0, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 461, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 0, 0, 590, 0, 430, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 446, 0, 388, 369, 611, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 612, 613, 614, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 608, 300, 365,
	556, 589, 481, 0, 543, 482, 491, 292, 515, 527,
	526, 361, 441, 0, 538, 541, 471, 607, 0, 535,
	550, 610, 549, 604, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 426, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 450, 531,
	532, 355, 356, 357, 358, 318, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 615, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 605, 602, 413,
	606, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 212, 213, 214, 215, 216, 217, 218, 219,
	257, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 233, 234, 235, 236, 555, 227, 228, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 0, 0, 0, 258, 259, 260, 261,
	0, 0, 252, 253, 254, 255, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 603, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 595, 598, 0, 609, 477, 478, 588, 367, 0,
	492, 525, 514, 597, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 307, 0, 0, 337, 529,
	511, 521, 512, 497, 498, 499, 506, 317, 500, 501,
	502, 472, 503, 473, 504, 505, 0, 528, 479, 398,
	351, 546, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 1439, 0, 0, 0, 280, 203, 474,
	593, 476, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 403, 420, 281, 394, 433,
	286, 401, 276, 366, 390, 0, 0, 272, 418, 400,
	348, 327, 328, 271, 0, 385, 305, 319, 302, 364,
	0, 417, 445, 301, 436, 0, 428, 274, 0, 427,
	363, 414, 419, 349, 343, 273, 416, 347, 342, 331,
	309, 461, 332, 333, 323, 375, 341, 376, 324, 353,
	352, 354, 0, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 0, 0, 590, 0, 430, 0, 0, 0,
	0, 0, 0, 402, 0, 0, 334, 0, 0, 0,
	446, 0, 388, 369, 611, 0, 0, 386, 339, 415,
	377, 421, 404, 429, 382, 378, 265, 405, 304, 350,
	277, 279, 299, 306, 308, 310, 311, 359, 360, 372,
	393, 406, 407, 408, 303, 287, 387, 288, 321, 289,
	266, 295, 293, 296, 395, 297, 268, 373, 412, 0,
	316, 383, 346, 269, 345, 374, 411, 410, 278, 437,
	443, 444, 533, 0, 449, 612, 613, 614, 458, 463,
	464, 465, 467, 468, 469, 470, 534, 551, 518, 488,
	451, 542, 485, 489, 490, 554, 0, 0, 0, 442,
	335, 336, 0, 314, 262, 263, 608, 300, 365, 556,
	589, 481, 0, 543, 482, 491, 292, 515, 527, 526,
	361, 441, 0, 538, 541, 471, 607, 0, 535, 550,
	610, 549, 604, 371, 0, 392, 547, 494, 0, 539,
	513, 0, 540, 509, 544, 0, 483, 0, 399, 423,
	435, 452, 455, 484, 569, 570, 571, 267, 454, 573,
	574, 575, 576, 577, 578, 579, 572, 426, 516, 493,
	519, 434, 496, 495, 0, 0, 530, 450, 531, 532,
	355, 356, 357, 358, 318, 557, 285, 453, 381, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 520, 615, 0, 580, 581, 0, 0, 447, 448,
	313, 320, 466, 322, 284, 370, 315, 432, 329, 0,
	459, 524, 460, 583, 586, 584, 585, 362, 325, 326,
	396, 330, 340, 384, 431, 368, 389, 282, 422, 397,
	344, 510, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	564, 563, 562, 561, 560, 559, 558, 0, 0, 507,
	409, 294, 256, 290, 291, 298, 605, 602, 413, 606,
	0, 264, 487, 338, 0, 379, 312, 552, 553, 0,
	0, 212, 213, 214, 215, 216, 217, 218, 219, 257,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 233, 234, 235, 236, 555, 227, 228, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 0, 0, 0, 258, 259, 260, 261, 0,
	0, 252, 253, 254, 255, 0, 0, 0, 438, 439,
	440, 462, 424, 486, 603, 0, 0, 0, 0, 0,
	0, 0, 536, 548, 582, 0, 591, 592, 594, 596,
	595, 598, 0, 609, 477, 478, 588, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 0, 528, 479, 398, 351,
	546, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 2344, 0, 0, 0, 280, 203, 474, 593,
	476, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 0,
	417, 445, 301, 436, 0, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	461, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 590, 0, 430, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 446,
	0, 388, 369, 611, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 612, 613, 614, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 608, 300, 365, 556, 589,
	481, 0, 543, 482, 491, 292, 515, 527, 526, 361,
	441, 0, 538, 541, 471, 607, 0, 535, 550, 610,
	549, 604, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 426, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 450, 531, 532, 355,
	356, 357, 358, 318, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 615, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 605, 602, 413, 606, 0,
	264, 487, 338, 0, 379, 312, 552, 553, 0, 0,
	212, 213, 214, 215, 216, 217, 218, 219, 257, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	233, 234, 235, 236, 555, 227, 228, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 0, 0, 0, 258, 259, 260, 261, 0, 0,
	252, 253, 254, 255, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 603, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 595,
	598, 0, 609, 477, 478, 588, 367, 0, 492, 525,
	514, 597, 480, 0, 0, 2686, 0, 0, 0, 0,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 0, 528, 479, 398, 351, 546,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 280, 203, 474, 593, 476,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 0, 417,
	445, 301, 436, 0, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 461,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	0, 0, 590, 0, 430, 0, 0, 0, 0, 0,
	0, 402, 0, 0, 334, 0, 0, 0, 446, 0,
	388, 369, 611, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 612, 613, 614, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 608, 300, 365, 556, 589, 481,
	0, 543, 482, 491, 292, 515, 527, 526, 361, 441,
	0, 538, 541, 471, 607, 0, 535, 550, 610, 549,
	604, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 426, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 450, 531, 532, 355, 356,
	357, 358, 318, 557, 285, 453, 381, 0, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	615, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 605, 602, 413, 606, 0, 264,
	487, 338, 0, 379, 312, 552, 553, 0, 0, 212,
	213, 214, 215, 216, 217, 218, 219, 257, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 233,
	234, 235, 236, 555, 227, 228, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	0, 0, 0, 258, 259, 260, 261, 0, 0, 252,
	253, 254, 255, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 603, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 595, 598,
	0, 609, 477, 478, 588, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 0, 528, 479, 398, 351, 546, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 280, 203, 474, 593, 476, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2057, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 0, 417, 445,
	301, 436, 0, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 461, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 590, 0, 430, 0, 0, 0, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 446, 0, 388,
	369, 611, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 612, 613, 614, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 608, 300, 365, 556, 589, 481, 0,
	543, 482, 491, 292, 515, 527, 526, 361, 441, 0,
	538, 541, 471, 607, 0, 535, 550, 610, 549, 604,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 426, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 450, 531, 532, 355, 356, 357,
	358, 318, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 615,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 605, 602, 413, 606, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 212, 213,
	214, 215, 216, 217, 218, 219, 257, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 233, 234,
	235, 236, 555, 227, 228, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 0,
	0, 0, 258, 259, 260, 261, 0, 0, 252, 253,
	254, 255, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 603, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 595, 598, 0,
	609, 477, 478, 588, 367, 0, 492, 525, 514, 597,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 307, 0, 0, 337, 529, 511, 521, 512, 497,
	498, 499, 506, 317, 500, 501, 502, 472, 503, 473,
	504, 505, 0, 528, 479, 398, 351, 546, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 280, 203, 474, 593, 476, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2421, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 403, 420, 281, 394, 433, 286, 401, 276, 366,
	390, 0, 0, 272, 418, 400, 348, 327, 328, 271,
	0, 385, 305, 319, 302, 364, 0, 417, 445, 301,
	436, 0, 428, 274, 0, 427, 363, 414, 419, 349,
	343, 273, 416, 347, 342, 331, 309, 461, 332, 333,
	323, 375, 341, 376, 324, 353, 352, 354, 0, 0,
	0, 0, 0, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 587, 0, 0,
	590, 0, 430, 0, 0, 0, 0, 0, 0, 402,
	0, 0, 334, 0, 0, 0, 446, 0, 388, 369,
	611, 0, 0, 386, 339, 415, 377, 421, 404, 429,
	382, 378, 265, 405, 304, 350, 277, 279, 299, 306,
	308, 310, 311, 359, 360, 372, 393, 406, 407, 408,
	303, 287, 387, 288, 321, 289, 266, 295, 293, 296,
	395, 297, 268, 373, 412, 0, 316, 383, 346, 269,
	345, 374, 411, 410, 278, 437, 443, 444, 533, 0,
	449, 612, 613, 614, 458, 463, 464, 465, 467, 468,
	469, 470, 534, 551, 518, 488, 451, 542, 485, 489,
	490, 554, 0, 0, 0, 442, 335, 336, 0, 314,
	262, 263, 608, 300, 365, 556, 589, 481, 0, 543,
	482, 491, 292, 515, 527, 526, 361, 441, 0, 538,
	541, 471, 607, 0, 535, 550, 610, 549, 604, 371,
	0, 392, 547, 494, 0, 539, 513, 0, 540, 509,
	544, 0, 483, 0, 399, 423, 435, 452, 455, 484,
	569, 570, 571, 267, 454, 573, 574, 575, 576, 577,
	578, 579, 572, 426, 516, 493, 519, 434, 496, 495,
	0, 0, 530, 450, 531, 532, 355, 356, 357, 358,
	318, 557, 285, 453, 381, 0, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 522, 523, 520, 615, 0,
	580, 581, 0, 0, 447, 448, 313, 320, 466, 322,
	284, 370, 315, 432, 329, 0, 459, 524, 460, 583,
	586, 584, 585, 362, 325, 326, 396, 330, 340, 384,
	431, 368, 389, 282, 422, 397, 344, 510, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 564, 563, 562, 561,
	560, 559, 558, 0, 0, 507, 409, 294, 256, 290,
	291, 298, 605, 602, 413, 606, 0, 264, 487, 338,
	0, 379, 312, 552, 553, 0, 0, 212, 213, 214,
	215, 216, 217, 218, 219, 257, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 233, 234, 235,
	236, 555, 227, 228, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 0, 0,
	0, 258, 259, 260, 261, 0, 0, 252, 253, 254,
	255, 0, 0, 0, 438, 439, 440, 462, 424, 486,
	603, 0, 0, 0, 0, 0, 0, 0, 536, 548,
	582, 0, 591, 592, 594, 596, 595, 598, 0, 609,
	477, 478, 588, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 0, 528, 479, 398, 351, 546, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 2419, 0,
	0, 0, 280, 203, 474, 593, 476, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 0, 417, 445, 301, 436,
	0, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 461, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 590,
	0, 430, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 446, 0, 388, 369, 611,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	612, 613, 614, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 608, 300, 365, 556, 589, 481, 0, 543, 482,
	491, 292, 515, 527, 526, 361, 441, 0, 538, 541,
	471, 607, 0, 535, 550, 610, 549, 604, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 426, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 450, 531, 532, 355, 356, 357, 358, 318,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 615, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 605, 602, 413, 606, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 257, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 233, 234, 235, 236,
	555, 227, 228, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 0, 0, 0,
	258, 259, 260, 261, 0, 0, 252, 253, 254, 255,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 603,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 595, 598, 2209, 609, 477,
	478, 588, 0, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 0, 528, 479, 398, 351, 546, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 280, 203, 474, 593, 476, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 0, 417, 445, 301, 436,
	0, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 461, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 590,
	0, 430, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 446, 0, 388, 369, 611,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	612, 613, 614, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 608, 300, 365, 556, 589, 481, 0, 543, 482,
	491, 292, 515, 527, 526, 361, 441, 0, 538, 541,
	471, 607, 0, 535, 550, 610, 549, 604, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 426, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 450, 531, 532, 355, 356, 357, 358, 318,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 615, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 605, 602, 413, 606, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 257, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 233, 234, 235, 236,
	555, 227, 228, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 0, 0, 0,
	258, 259, 260, 261, 0, 0, 252, 253, 254, 255,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 603,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 595, 598, 0, 609, 477,
	478, 588, 367, 0, 492, 525, 514, 597, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	0, 0, 337, 529, 511, 521, 512, 497, 498, 499,
	506, 317, 500, 501, 502, 472, 503, 473, 504, 505,
	0, 528, 479, 398, 351, 546, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 1778, 0,
	0, 280, 203, 474, 593, 476, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 403,
	420, 281, 394, 433, 286, 401, 276, 366, 390, 0,
	0, 272, 418, 400, 348, 327, 328, 271, 0, 385,
	305, 319, 302, 364, 0, 417, 445, 301, 436, 0,
	428, 274, 0, 427, 363, 414, 419, 349, 343, 273,
	416, 347, 342, 331, 309, 461, 332, 333, 323, 375,
	341, 376, 324, 353, 352, 354, 0, 0, 0, 0,
	0, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 0, 0, 590, 0,
	430, 0, 0, 0, 0, 0, 0, 402, 0, 0,
	334, 0, 0, 0, 446, 0, 388, 369, 611, 0,
	0, 386, 339, 415, 377, 421, 404, 429, 382, 378,
	265, 405, 304, 350, 277, 279, 299, 306, 308, 310,
	311, 359, 360, 372, 393, 406, 407, 408, 303, 287,
	387, 288, 321, 289, 266, 295, 293, 296, 395, 297,
	268, 373, 412, 0, 316, 383, 346, 269, 345, 374,
	411, 410, 278, 437, 443, 444, 533, 0, 449, 612,
	613, 614, 458, 463, 464, 465, 467, 468, 469, 470,
	534, 551, 518, 488, 451, 542, 485, 489, 490, 554,
	0, 0, 0, 442, 335, 336, 0, 314, 262, 263,
	608, 300, 365, 556, 589, 481, 0, 543, 482, 491,
	292, 515, 527, 526, 361, 441, 0, 538, 541, 471,
	607, 0, 535, 550, 610, 549, 604, 371, 0, 392,
	547, 494, 0, 539, 513, 0, 540, 509, 544, 0,
	483, 0, 399, 423, 435, 452, 455, 484, 569, 570,
	571, 267, 454, 573, 574, 575, 576, 577, 578, 579,
	572, 426, 516, 493, 519, 434, 496, 495, 0, 0,
	530, 450, 531, 532, 355, 356, 357, 358, 318, 557,
	285, 453, 381, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 522, 523, 520, 615, 0, 580, 581,
	0, 0, 447, 448, 313, 320, 466, 322, 284, 370,
	315, 432, 329, 0, 459, 524, 460, 583, 586, 584,
	585, 362, 325, 326, 396, 330, 340, 384, 431, 368,
	389, 282, 422, 397, 344, 510, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 564, 563, 562, 561, 560, 559,
	558, 0, 0, 507, 409, 294, 256, 290, 291, 298,
	605, 602, 413, 606, 0, 264, 487, 338, 0, 379,
	312, 552, 553, 0, 0, 212, 213, 214, 215, 216,
	217, 218, 219, 257, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 233, 234, 235, 236, 555,
	227, 228, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 0, 0, 0, 258,
	259, 260, 261, 0, 0, 252, 253, 254, 255, 0,
	0, 0, 438, 439, 440, 462, 424, 486, 603, 0,
	0, 0, 0, 0, 0, 0, 536, 548, 582, 0,
	591, 592, 594, 596, 595, 598, 0, 609, 477, 478,
	588, 367, 0, 492, 525, 514, 597, 480, 0, 1905,
	0, 0, 0, 0, 0, 0, 0, 0, 307, 0,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 0,
	528, 479, 398, 351, 546, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	280, 203, 474, 593, 476, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 0, 417, 445, 301, 436, 0, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 461, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 0, 0, 590, 0, 430,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 446, 0, 388, 369, 611, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 612, 613,
	614, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 608,
	300, 365, 556, 589, 481, 0, 543, 482, 491, 292,
	515, 527, 526, 361, 441, 0, 538, 541, 471, 607,
	0, 535, 550, 610, 549, 604, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	426, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	450, 531, 532, 355, 356, 357, 358, 318, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 615, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 605,
	602, 413, 606, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 257, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 233, 234, 235, 236, 555, 227,
	228, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 0, 0, 0, 258, 259,
	260, 261, 0, 0, 252, 253, 254, 255, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 603, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 595, 598, 0, 609, 477, 478, 588,
	367, 0, 492, 525, 514, 597, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 0, 0,
	337, 529, 511, 521, 512, 497, 498, 499, 506, 317,
	500, 501, 502, 472, 503, 473, 504, 505, 0, 528,
	479, 398, 351, 546, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 1439, 0, 0, 0, 280,
	203, 474, 593, 476, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 403, 420, 281,
	394, 433, 286, 401, 276, 366, 390, 0, 0, 272,
	418, 400, 348, 327, 328, 271, 0, 385, 305, 319,
	302, 364, 0, 417, 445, 301, 436, 0, 428, 274,
	0, 427, 363, 414, 419, 349, 343, 273, 416, 347,
	342, 331, 309, 461, 332, 333, 323, 375, 341, 376,
	324, 353, 352, 354, 0, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 587, 0, 0, 590, 0, 430, 0,
	0, 0, 0, 0, 0, 402, 0, 0, 334, 0,
	0, 0, 446, 0, 388, 369, 611, 0, 0, 386,
	339, 415, 377, 421, 404, 429, 1811, 378, 265, 405,
	304, 350, 277, 279, 299, 306, 308, 310, 311, 359,
	360, 372, 393, 406, 407, 408, 303, 287, 387, 288,
	321, 289, 266, 295, 293, 296, 395, 297, 268, 373,
	412, 0, 316, 383, 346, 269, 345, 374, 411, 410,
	278, 437, 443, 444, 533, 0, 449, 612, 613, 614,
	458, 463, 464, 465, 467, 468, 469, 470, 534, 551,
	518, 488, 451, 542, 485, 489, 490, 554, 0, 0,
	0, 442, 335, 336, 0, 314, 262, 263, 608, 300,
	365, 556, 589, 481, 0, 543, 482, 491, 292, 515,
	527, 526, 361, 441, 0, 538, 541, 471, 607, 0,
	535, 550, 610, 549, 604, 371, 0, 392, 547, 494,
	0, 539, 513, 0, 540, 509, 544, 0, 483, 0,
	399, 423, 435, 452, 455, 484, 569, 570, 571, 267,
	454, 573, 574, 575, 576, 577, 578, 579, 572, 426,
	516, 493, 519, 434, 496, 495, 0, 0, 530, 450,
	531, 532, 355, 356, 357, 358, 318, 557, 285, 453,
	381, 0, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 523, 520, 615, 0, 580, 581, 0, 0,
	447, 448, 313, 320, 466, 322, 284, 370, 315, 432,
	329, 0, 459, 524, 460, 583, 586, 584, 585, 362,
	325, 326, 396, 330, 340, 384, 431, 368, 389, 282,
	422, 397, 344, 510, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 564, 563, 562, 561, 560, 559, 558, 0,
	0, 507, 409, 294, 256, 290, 291, 298, 605, 602,
	413, 606, 0, 264, 487, 338, 0, 379, 312, 552,
	553, 0, 0, 212, 213, 214, 215, 216, 217, 218,
	219, 257, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 233, 234, 235, 236, 555, 227, 228,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 0, 0, 0, 258, 259, 260,
	261, 0, 0, 252, 253, 254, 255, 0, 0, 0,
	438, 439, 440, 462, 424, 486, 603, 0, 0, 0,
	0, 0, 0, 0, 536, 548, 582, 0, 591, 592,
	594, 596, 595, 598, 0, 609, 477, 478, 588, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 0, 528, 479,
	398, 351, 546, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 280, 203,
	474, 593, 476, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 0, 417, 445, 301, 436, 0, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 461, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 0, 0, 590, 0, 430, 0, 0,
	1469, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 446, 0, 388, 369, 611, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 612, 613, 614, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 608, 300, 365,
	556, 589, 481, 0, 543, 482, 491, 292, 515, 527,
	526, 361, 441, 0, 538, 541, 471, 607, 0, 535,
	550, 610, 549, 604, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 426, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 450, 531,
	532, 355, 356, 357, 358, 318, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 615, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 605, 602, 413,
	606, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 212, 213, 214, 215, 216, 217, 218, 219,
	257, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 233, 234, 235, 236, 555, 227, 228, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 0, 0, 0, 258, 259, 260, 261,
	0, 0, 252, 253, 254, 255, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 603, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 595, 598, 0, 609, 477, 478, 588, 367, 0,
	492, 525, 514, 597, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 307, 0, 0, 337, 529,
	511, 521, 512, 497, 498, 499, 506, 317, 500, 501,
	502, 472, 503, 473, 504, 505, 0, 528, 479, 398,
	351, 546, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 280, 203, 474,
	593, 476, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 403, 420, 281, 394, 433,
	286, 401, 276, 366, 390, 0, 0, 272, 418, 400,
	348, 327, 328, 271, 0, 385, 305, 319, 302, 364,
	0, 417, 445, 301, 436, 0, 428, 274, 0, 427,
	363, 414, 419, 349, 343, 273, 416, 347, 342, 331,
	309, 461, 332, 333, 323, 375, 341, 376, 324, 353,
	352, 354, 0, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 0, 0, 590, 0, 430, 0, 0, 0,
	0, 0, 0, 402, 0, 0, 334, 0, 0, 0,
	446, 0, 388, 369, 611, 0, 0, 386, 339, 415,
	377, 421, 404, 429, 382, 378, 265, 405, 304, 350,
	277, 279, 299, 306, 308, 310, 311, 359, 360, 372,
	393, 406, 407, 408, 303, 287, 387, 288, 321, 289,
	266, 295, 293, 296, 395, 297, 268, 373, 412, 0,
	316, 383, 346, 269, 345, 374, 411, 410, 278, 437,
	443, 444, 533, 0, 449, 612, 613, 614, 458, 463,
	464, 465, 467, 468, 469, 470, 534, 551, 518, 488,
	451, 542, 485, 489, 490, 554, 0, 0, 0, 442,
	335, 336, 0, 314, 262, 263, 608, 300, 365, 556,
	589, 481, 0, 543, 482, 491, 292, 515, 527, 526,
	361, 441, 0, 538, 541, 471, 607, 0, 535, 550,
	610, 549, 604, 371, 0, 392, 547, 494, 0, 539,
	513, 0, 540, 509, 544, 0, 483, 0, 399, 423,
	435, 452, 455, 484, 569, 570, 571, 267, 454, 573,
	574, 575, 576, 577, 578, 579, 572, 426, 516, 493,
	519, 434, 496, 495, 0, 0, 530, 450, 531, 532,
	355, 356, 357, 358, 318, 557, 285, 453, 381, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 520, 615, 0, 580, 581, 0, 0, 447, 448,
	313, 320, 466, 322, 284, 370, 315, 432, 329, 0,
	459, 524, 460, 583, 586, 584, 585, 362, 325, 326,
	396, 330, 340, 384, 431, 368, 389, 282, 422, 397,
	344, 510, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	564, 563, 562, 561, 560, 559, 558, 0, 0, 507,
	409, 294, 256, 290, 291, 298, 605, 602, 413, 606,
	0, 264, 487, 338, 0, 379, 312, 552, 553, 0,
	0, 212, 213, 214, 215, 216, 217, 218, 219, 257,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 233, 234, 235, 236, 555, 227, 228, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 0, 0, 0, 258, 259, 260, 261, 0,
	0, 252, 253, 254, 255, 0, 0, 0, 438, 439,
	440, 462, 424, 486, 603, 0, 0, 0, 0, 0,
	0, 0, 536, 548, 582, 0, 591, 592, 594, 596,
	595, 598, 0, 609, 477, 478, 588, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 0, 528, 479, 398, 351,
	546, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 280, 203, 474, 593,
	476, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 0,
	417, 445, 301, 436, 0, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	461, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 632, 590, 0, 430, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 446,
	0, 388, 369, 611, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 612, 613, 614, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 608, 300, 365, 556, 589,
	481, 0, 543, 482, 491, 292, 515, 527, 526, 361,
	441, 0, 538, 541, 471, 607, 0, 535, 550, 610,
	549, 604, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 426, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 450, 531, 532, 355,
	356, 357, 358, 318, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 615, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 605, 602, 413, 606, 0,
	264, 487, 338, 0, 379, 312, 552, 553, 0, 0,
	212, 213, 214, 215, 216, 217, 218, 219, 257, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	233, 234, 235, 236, 555, 227, 228, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 0, 0, 0, 258, 259, 260, 261, 0, 0,
	252, 253, 254, 255, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 603, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 595,
	598, 0, 609, 477, 478, 588, 367, 0, 492, 525,
	514, 597, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 0, 528, 479, 398, 351, 546,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 280, 203, 474, 593, 476,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 0, 417,
	445, 301, 436, 0, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 461,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	0, 0, 590, 0, 430, 0, 0, 0, 0, 0,
	0, 402, 0, 0, 334, 0, 0, 0, 446, 0,
	388, 369, 611, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 612, 613, 614, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 608, 300, 365, 556, 589, 481,
	0, 543, 482, 491, 292, 515, 527, 526, 361, 441,
	0, 538, 541, 471, 607, 0, 535, 550, 610, 549,
	604, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 426, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 450, 531, 532, 355, 356,
	357, 358, 318, 557, 285, 453, 381, 0, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	615, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 912, 0, 507, 409, 294,
	256, 290, 291, 298, 605, 602, 413, 606, 0, 264,
	487, 338, 0, 379, 312, 552, 553, 0, 0, 212,
	213, 214, 215, 216, 217, 218, 219, 257, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 233,
	234, 235, 236, 555, 227, 228, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	0, 0, 0, 258, 259, 260, 261, 0, 0, 252,
	253, 254, 255, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 603, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 595, 598,
	0, 609, 477, 478, 588, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 0, 528, 479, 398, 351, 546, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 280, 203, 474, 593, 476, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 0, 417, 445,
	301, 436, 0, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 461, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 590, 0, 430, 0, 0, 0, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 446, 0, 388,
	369, 611, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 612, 613, 614, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 608, 300, 365, 556, 589, 481, 0,
	543, 482, 491, 292, 515, 527, 526, 361, 441, 0,
	538, 541, 471, 607, 0, 535, 550, 610, 549, 604,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 426, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 450, 531, 532, 355, 356, 357,
	358, 318, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 615,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 605, 602, 413, 606, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 212, 213,
	214, 215, 216, 217, 218, 219, 257, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 233, 234,
	235, 236, 555, 227, 228, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 0,
	0, 0, 258, 259, 260, 261, 0, 0, 252, 253,
	254, 255, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 603, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 595, 598, 0,
	609, 477, 478, 588, 367, 0, 492, 525, 514, 597,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 307, 0, 0, 337, 529, 511, 521, 512, 497,
	498, 499, 506, 317, 500, 501, 502, 472, 503, 473,
	504, 505, 0, 528, 479, 398, 351, 546, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 280, 203, 474, 593, 476, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 403, 1419, 281, 394, 433, 286, 401, 276, 366,
	390, 0, 0, 272, 418, 400, 348, 327, 328, 271,
	0, 385, 305, 319, 302, 364, 0, 417, 445, 301,
	436, 0, 428, 274, 0, 427, 363, 414, 419, 349,
	343, 273, 416, 347, 342, 331, 309, 461, 332, 333,
	323, 375, 341, 376, 324, 353, 352, 354, 0, 0,
	0, 0, 0, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 587, 0, 0,
	590, 0, 430, 0, 0, 0, 0, 0, 0, 402,
	0, 0, 334, 0, 0, 0, 446, 0, 388, 369,
	611, 0, 0, 386, 339, 415, 377, 421, 404, 429,
	382, 378, 265, 405, 304, 350, 277, 279, 299, 306,
	308, 310, 311, 359, 360, 372, 393, 406, 407, 408,
	303, 287, 387, 288, 321, 289, 266, 295, 293, 296,
	395, 297, 268, 373, 412, 0, 316, 383, 346, 269,
	345, 374, 411, 410, 278, 437, 443, 444, 533, 0,
	449, 612, 613, 614, 458, 463, 464, 465, 467, 468,
	469, 470, 534, 551, 518, 488, 451, 542, 485, 489,
	490, 554, 0, 0, 0, 442, 335, 336, 0, 314,
	262, 263, 608, 300, 365, 556, 589, 481, 0, 543,
	482, 491, 292, 515, 527, 526, 361, 441, 0, 538,
	541, 471, 607, 0, 535, 550, 610, 549, 604, 371,
	0, 392, 547, 494, 0, 539, 513, 0, 540, 509,
	544, 0, 483, 0, 399, 423, 435, 452, 455, 484,
	569, 570, 571, 267, 454, 573, 574, 575, 576, 577,
	578, 579, 572, 426, 516, 493, 519, 434, 496, 495,
	0, 0, 530, 450, 531, 532, 355, 356, 357, 358,
	318, 557, 285, 453, 381, 0, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 522, 523, 520, 615, 0,
	580, 581, 0, 0, 447, 448, 313, 320, 466, 322,
	284, 370, 315, 432, 329, 0, 459, 524, 460, 583,
	586, 584, 585, 362, 325, 326, 396, 330, 340, 384,
	431, 368, 389, 282, 422, 397, 344, 510, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 564, 563, 562, 561,
	560, 559, 558, 0, 0, 507, 409, 294, 256, 290,
	291, 298, 605, 602, 413, 606, 0, 264, 487, 338,
	0, 379, 312, 552, 553, 0, 0, 212, 213, 214,
	215, 216, 217, 218, 219, 257, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 233, 234, 235,
	236, 555, 227, 228, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 0, 0,
	0, 258, 259, 260, 261, 0, 0, 252, 253, 254,
	255, 0, 0, 0, 438, 439, 440, 462, 424, 486,
	603, 0, 0, 0, 0, 0, 0, 0, 536, 548,
	582, 0, 591, 592, 594, 596, 595, 598, 0, 609,
	477, 478, 588, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 0, 528, 479, 398, 351, 546, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 280, 203, 474, 593, 476, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	403, 1417, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 0, 417, 445, 301, 436,
	0, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 461, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 590,
	0, 430, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 446, 0, 388, 369, 611,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	612, 613, 614, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 608, 300, 365, 556, 589, 481, 0, 543, 482,
	491, 292, 515, 527, 526, 361, 441, 0, 538, 541,
	471, 607, 0, 535, 550, 610, 549, 604, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 426, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 450, 531, 532, 355, 356, 357, 358, 318,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 615, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 605, 602, 413, 606, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 257, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 233, 234, 235, 236,
	555, 227, 228, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 0, 0, 0,
	258, 259, 260, 261, 0, 0, 252, 253, 254, 255,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 603,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 595, 598, 0, 609, 477,
	478, 588, 367, 0, 492, 525, 514, 597, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	0, 0, 337, 529, 511, 521, 512, 497, 498, 499,
	506, 317, 500, 501, 502, 472, 503, 473, 504, 505,
	0, 528, 479, 398, 351, 546, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 280, 203, 474, 593, 476, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 403,
	420, 281, 394, 433, 286, 401, 276, 366, 390, 0,
	0, 272, 418, 400, 348, 327, 328, 271, 0, 385,
	305, 319, 302, 364, 0, 417, 445, 301, 436, 0,
	428, 274, 0, 427, 363, 414, 419, 349, 343, 273,
	416, 347, 342, 331, 309, 461, 332, 333, 323, 375,
	341, 376, 324, 353, 352, 354, 0, 0, 0, 0,
	0, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 0, 0, 590, 0,
	430, 0, 0, 0, 0, 0, 0, 402, 0, 0,
	334, 0, 0, 0, 446, 0, 388, 369, 611, 0,
	0, 386, 339, 415, 377, 421, 404, 429, 382, 378,
	265, 405, 304, 350, 277, 279, 698, 306, 308, 310,
	311, 359, 360, 372, 393, 406, 407, 408, 303, 287,
	387, 288, 321, 289, 266, 295, 293, 296, 395, 297,
	268, 373, 412, 0, 316, 383, 346, 269, 345, 374,
	411, 410, 278, 437, 443, 444, 533, 0, 449, 612,
	613, 614, 458, 463, 464, 465, 467, 468, 469, 470,
	534, 551, 518, 488, 451, 542, 485, 489, 490, 554,
	0, 0, 0, 442, 335, 336, 0, 314, 262, 263,
	608, 300, 365, 556, 589, 481, 0, 543, 482, 491,
	292, 515, 527, 526, 361, 441, 0, 538, 541, 471,
	607, 0, 535, 550, 610, 549, 604, 371, 0, 392,
	547, 494, 0, 539, 513, 0, 540, 509, 544, 0,
	483, 0, 399, 423, 435, 452, 455, 484, 569, 570,
	571, 267, 454, 573, 574, 575, 576, 577, 578, 579,
	572, 426, 516, 493, 519, 434, 496, 495, 0, 0,
	530, 450, 531, 532, 355, 356, 357, 358, 318, 557,
	285, 453, 381, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 522, 523, 520, 615, 0, 580, 581,
	0, 0, 447, 448, 313, 320, 466, 322, 284, 370,
	315, 432, 329, 0, 459, 524, 460, 583, 586, 584,
	585, 362, 325, 326, 396, 330, 340, 384, 431, 368,
	389, 282, 422, 397, 344, 510, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 564, 563, 562, 561, 560, 559,
	558, 0, 0, 507, 409, 294, 256, 290, 291, 298,
	605, 602, 413, 606, 0, 264, 487, 338, 0, 379,
	312, 552, 553, 0, 0, 212, 213, 214, 215, 216,
	217, 218, 219, 257, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 233, 234, 235, 236, 555,
	227, 228, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 0, 0, 0, 258,
	259, 260, 261, 0, 0, 252, 253, 254, 255, 0,
	0, 0, 438, 439, 440, 462, 424, 486, 603, 0,
	0, 0, 0, 0, 0, 0, 536, 548, 582, 0,
	591, 592, 594, 596, 595, 598, 0, 609, 477, 478,
	588, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 307, 0,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 0,
	528, 479, 398, 351, 546, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	280, 203, 474, 593, 476, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 0, 417, 445, 301, 436, 0, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 461, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 0, 0, 590, 0, 430,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 446, 0, 388, 369, 611, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 656, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 612, 613,
	614, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 608,
	300, 365, 556, 589, 481, 0, 543, 482, 491, 292,
	515, 527, 526, 361, 441, 0, 538, 541, 471, 607,
	0, 535, 550, 610, 549, 604, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 657, 572,
	426, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	450, 531, 532, 355, 356, 357, 358, 318, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 615, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 605,
	602, 413, 606, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 257, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 233, 234, 235, 236, 555, 227,
	228, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 0, 0, 0, 258, 259,
	260, 261, 0, 0, 252, 253, 254, 255, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 603, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 595, 598, 0, 609, 477, 478, 588,
	677, 676, 683, 673, 0, 0, 0, 0, 0, 0,
	0, 0, 680, 681, 0, 682, 686, 0, 0, 667,
	0, 0, 0, 677, 676, 683, 673, 0, 0, 691,
	0, 0, 0, 0, 0, 680, 681, 0, 682, 686,
	0, 0, 667, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 691, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 904, 0, 905, 0, 0, 0, 0, 0,
	0, 0, 695, 0, 0, 697, 0, 0, 0, 0,
	696, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 695, 0, 0, 697, 0,
	885, 0, 0, 696, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 895, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1893, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1895, 0, 877, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1893, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3517, 0, 0, 0, 0, 0, 668, 670, 669,
	0, 1870, 1895, 0, 0, 0, 0, 675, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 679,
	668, 670, 669, 901, 0, 894, 694, 0, 0, 0,
	675, 0, 0, 672, 898, 897, 0, 662, 0, 0,
	0, 0, 679, 0, 0, 0, 0, 0, 0, 694,
	0, 879, 0, 1870, 0, 886, 672, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1886,
	0, 0, 0, 0, 0, 893, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 903, 0, 1893, 0, 0, 892,
	0, 0, 0, 891, 0, 0, 0, 0, 0, 878,
	0, 0, 0, 884, 0, 0, 0, 3488, 0, 0,
	0, 1886, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1895, 0, 0, 0, 882, 0, 0, 0, 0,
	0, 0, 674, 678, 684, 0, 685, 687, 0, 1874,
	688, 689, 690, 0, 0, 692, 693, 0, 0, 0,
	1880, 0, 0, 0, 0, 674, 678, 684, 0, 685,
	687, 0, 902, 688, 689, 690, 0, 0, 692, 693,
	1868, 1902, 1870, 0, 1869, 1871, 1873, 0, 1875, 1876,
	1877, 1881, 1882, 1883, 1885, 1888, 1889, 1890, 883, 0,
	0, 1874, 0, 0, 0, 1878, 1887, 1879, 0, 0,
	0, 0, 1880, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1868, 1902, 0, 0, 1869, 1871, 1873, 1894,
	1875, 1876, 1877, 1881, 1882, 1883, 1885, 1888, 1889, 1890,
	1886, 0, 0, 0, 0, 0, 0, 1878, 1887, 1879,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 900, 0, 0, 0, 0,
	0, 0, 0, 1891, 0, 0, 0, 0, 0, 0,
	0, 1894, 0, 0, 0, 0, 0, 0, 0, 0,
	1867, 0, 0, 0, 0, 0, 0, 1866, 0, 0,
	0, 671, 0, 0, 889, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1874, 1884, 0, 0, 671, 1891, 0, 0, 0, 0,
	1872, 1880, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1867, 0, 0, 0, 0, 0, 0, 1866,
	0, 1868, 1902, 0, 0, 1869, 1871, 1873, 0, 1875,
	1876, 1877, 1881, 1882, 1883, 1885, 1888, 1889, 1890, 0,
	0, 0, 0, 1884, 0, 0, 1878, 1887, 1879, 0,
	0, 0, 1872, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1894, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1891, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1867, 0, 0, 0, 0, 0, 0, 1866, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1884, 0, 0, 0, 0, 0, 0, 0,
	0, 1872,
}

var yyPact = [...]int{
	322, -1000, -1000, -1000, -298, 13876, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	44362, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 383, 44362, -292, 27918, 42535, -1000, -1000, 2508, -1000,
	43144, 15723, 44362, 450, 446, 44362, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 836, -1000, 46798, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 731, 47417, 46189, 10803,
	-207, -1000, 1444, -32, 2337, 1011, 1024, 1013, 1013, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 47436, 902, 43753, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3650, 359, 902,
	20605, 110, 109, 1444, 439, -92, -91, -95, 3263, -1000,
	1161, 3723, 211, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10803, 10803, 13876, -357, 13876, 10803,
	44362, 44362, -1000, -1000, -1000, -1000, -292, 43144, 731, 47417,
	10803, 2337, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -91, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-92, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -95, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 109, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4714,
	-1000, 1510, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2166, 2866, 1509, 2336,
	642, 42535, 44362, -1000, 165, 642, -1000, -1000, -1000, 1444,
	3236, -1000, 44362, 44362, 189, 1731, -1000, 455, 415, 404,
	321, 1508, -1000, -1000, -1000, -1000, -1000, -1000, 575, 3208,
	-1000, 44362, 44362, 2892, 44362, -1000, 2099, 603, 47440, 3053,
	1437, 867, 2939, -1000, -1000, 2865, -1000, 328, 253, 323,
	387, 380, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 294,
	-1000, 3125, -1000, -1000, 317, -1000, -1000, 302, -1000, -1000,
	-1000, 104, -1000, -1000, -1000, -1000, -1000, -1000, -23, -1000,
	-1000, 1052, 1824, 10803, 2273, -1000, 3680, 1518, -1000, -1000,
	-1000, 6507, 12642, 12642, 12642, 12642, 44362, -1000, -1000, 2673,
	10803, 2864, 2860, 2859, 2858, -1000, -1000, -1000, -1000, -1000,
	-1000, 1507, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1927, -1000, -1000, -1000, 13255, -1000, 2857, 2856, 2848,
	2832, 2831, 2826, 2825, 2824, 2823, 2820, 2809, 2808, 2804,
	2803, 2517, 15104, 2802, 2332, 2331, 2801, 2799, 2793, 2326,
	2792, 2791, 2782, 2517, 2517, 2777, 2772, 2771, 2769, 2752,
	2750, 2749, 2731, 2730, 2727, 2726, 2724, 2723, 2722, 2721,
	2720, 2718, 2717, 2707, 2702, 2701, 2700, 2698, 2697, 2696,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1262, -1000, 2695, 3222, 2591, -1000, 3106,
	3104, 3101, 3099, -256, 2690, 2085, -1000, -1000, 122, -1000,
	-63, -1000, -1000, 993, -1000, 949, -1000, 704, 44362, 44362,
	208, 761, 704, 704, 704, 704, 704, 795, 704, 3137,
	815, 812, 811, 806, 704, -51, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1730, 1729, 2985, 918, -1000, -1000, -1000,
	-1000, 1353, 44362, -1000, 2610, 1580, 1580, 3196, 3135, 611,
	607, 596, 1580, 500, -1000, 1718, 1718, 1718, 1718, 1580,
	505, 647, 3150, 3150, 92, 1718, 42, 1580, 1580, 42,
	1580, 1580, -1000, 1736, 252, -266, -1000, -1000, -1000, -1000,
	1718, 1718, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3120,
	3118, 731, 731, 44362, 202, 44362, 731, 731, 731, 747,
	31, 45580, 44971, 2099, 599, 598, 1373, 1687, -1000, 1582,
	44362, 44362, 1582, 1582, 23655, 23046, -1000, 44362, -1000, 3222,
	2591, 2506, 1642, 2505, 2591, -99, -100, -107, 731, 731,
	731, 731, 731, 288, 731, 731, 731, 731, 731, 44362,
	44362, 41926, 731, 731, 731, 8959, 8959, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 13876, 1889, 1884, 210,
	4, -285, 268, -1000, -1000, 44362, 3034, 276, -1000, -1000,
	-1000, 2533, -1000, 2594, 2594, 2594, 2594, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2594, 2594, 2600, 2689,
	-1000, -1000, 2593, 2593, 2593, 2533, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2595, 2595, 2599, 2599, 2595, 44362, -116, -1000, -1000,
	10803, 44362, 3046, 406, 2686, 642, -1000, 44362, 183, 419,
	3222, 3045, 3150, 3185, -1000, -1000, 1506, 2081, 2325, -1000,
	321, -1000, 441, 321, 1576, -1000, 1068, -1000, -1000, -1000,
	-1000, -1000, 44362, -23, 428, -1000, -1000, 2308, 2681, -1000,
	609, 1243, 1496, -1000, 265, 4400, 35835, 2099, 35835, 44362,
	-1000, -1000, -1000, -1000, -1000, -1000, 102, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 285, -1000, 10803, 10803, 10803, 10803, 10803, -1000, 825,
	12029, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12642, 12642,
	12642, 12642, 12642, 12642, 12642, 12642, 12642, 12642, 12642, 12642,
	2661, 1588, 12642, 12642, 12642, 12642, 25482, 1642, 2852, 1368,
	309, 1518, 1518, 1518, 1518, 10803, -1000, 1739, 1824, 10803,
	10803, 10803, 10803, 44362, -1000, -1000, 3953, 10803, 10803, 3415,
	10803, 3085, 10803, 10803, 10803, 2503, 5273, 44362, 10803, -1000,
	2500, 2494, -1000, -1000, 1992, 10803, -1000, -1000, 10803, -1000,
	-1000, 10803, 12642, 10803, -1000, 10803, 10803, 10803, -1000, -1000,
	2650, 3085, 3085, 3085, 1654, 10803, 10803, 3085, 3085, 3085,
	1650, 3085, 3085, 3085, 3085, 3085, 3085, 3085, 3085, 3085,
	3085, 2489, 2488, 2487, 10190, 3150, -207, -1000, 8346, 3045,
	3150, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -261, 2680, 44362, 2323, 2321, -304, 40, 992, 970,
	991, -1000, 44362, 1800, 3079, -1000, 2677, 44362, 704, 704,
	704, -1000, 40099, 35835, 44362, 44362, 2099, 44362, 44362, 44362,
	704, 704, 704, 704, 44362, -1000, 3005, 35835, 2989, 747,
	-1000, 44362, 1353, 3075, 44362, 3196, 12642, 12642, -1000, -1000,
	10803, 41317, 1718, 1580, 1580, -1000, -1000, 44362, -1000, -1000,
	-1000, 1718, 44362, 1718, 1718, 3196, 1718, -1000, -1000, -1000,
	1580, 1580, -1000, -1000, 10803, -1000, -1000, 1718, 1718, -1000,
	-1000, 3196, 44362, 75, 3196, 3196, 66, -1000, -1000, -1000,
	1580, 44362, 44362, 704, 44362, -1000, 44362, 44362, -1000, -1000,
	44362, 44362, 4123, 40099, 40708, 3117, -1000, 35835, 44362, 44362,
	34008, -1000, 1302, -1000, 27, -1000, 32, 31, 1582, 31,
	1582, -1000, 600, 594, 21828, 543, 35835, 5886, -1000, -1000,
	1582, 1582, 5886, 5886, 1519, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1348, -1000, 236, 3150, -1000, -1000, -1000, -1000,
	-1000, 2076, 2075, 2074, 44362, 40099, 35835, 2099, 44362, 731,
	44362, 44362, 44362, 44362, 44362, -1000, 2676, 1499, -1000, 3051,
	44362, 44362, 44362, 1344, -1000, -1000, 18768, 1498, 1344, -1000,
	1778, -1000, 10803, 13876, -229, 10803, 13876, 13876, 10803, 13876,
	-1000, 10803, 272, -1000, -1000, -1000, -1000, 2072, -1000, 2071,
	-1000, -1000, -1000, -1000, -1000, 2319, 2319, -1000, 2070, -1000,
	-1000, -1000, -1000, 2068, -1000, -1000, 2067, -1000, -1000, -1000,
	-1000, -149, 2481, 1052, -1000, 2318, 2932, -211, -1000, 19996,
	44362, 44362, 406, -305, 1727, 1725, 1720, -1000, -211, -1000,
	19382, 44362, 3150, -1000, -214, 3045, 10803, 44362, -1000, 3134,
	-1000, -1000, 321, -1000, 459, 385, -1000, -1000, -1000, -1000,
	-1000, -1000, 1461, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 378, 1333, -1000, 44362, -1000, -1000, 265,
	35835, 37662, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 257,
	-1000, -1000, 191, -1000, 791, 223, 1575, -1000, -1000, 215,
	199, 188, 927, 1824, -1000, 1788, 1788, 1802, -1000, 699,
	-1000, -1000, -1000, -1000, 2673, -1000, -1000, -1000, 1690, 1968,
	-1000, 1617, 1617, 1473, 1473, 1473, 1473, 1473, 2013, 2013,
	-1000, -1000, -1000, 6507, 2661, 12642, 12642, 12642, 12642, 796,
	796, 3300, 3803, -1000, -1000, -1000, -1000, 10803, 196, 1777,
	-1000, 10803, 2626, 1278, 2573, 1453, 1456, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2479, 2478, 2197,
	3207, 2477, 10803, -1000, -1000, 1574, 1573, 1559, -1000, 1973,
	9577, -1000, -1000, -1000, 2476, 1423, 2475, -1000, -1000, -1000,
	2471, 1554, 1267, 2468, 1785, 2466, 2463, 2460, 2458, 1319,
	10803, 10803, 10803, 10803, 2453, 1537, 1534, 10803, 10803, 10803,
	10803, 2445, 10803, 10803, 10803, 10803, 10803, 10803, 10803, 10803,
	10803, 10803, 125, 125, 125, 1314, 1312, -1000, -1000, 1521,
	-1000, 1824, -1000, -1000, 3045, -1000, 2653, 2065, 1310, -1000,
	-1000, -288, 2257, -1000, -1000, 996, 942, 986, 3132, 3050,
	44362, 1069, 2652, 44362, 44362, 44362, 263, -1000, -1000, 1264,
	-1000, 223, -30, 454, 1058, 2890, 3205, -119, 44362, 44362,
	44362, 44362, 3072, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 39490, -1000, 2651, 1516, -1000, -1000, 1518, 1518, 1824,
	2888, 44362, 44362, 3196, 3196, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1718, 3196, 3196, 1197, 1580, 1718, -1000, -1000,
	1718, -1000, -1000, 1718, -1000, -1000, 1417, -1000, 44362, -1000,
	-1000, -1000, 3064, 2610, 1304, -1000, -1000, -1000, 3183, 875,
	680, 680, 983, 760, 3182, 17550, -1000, 1610, 990, 790,
	3007, 324, -1000, 1610, -146, 656, 1610, 1610, 1610, 1610,
	1610, 1610, 1610, 568, 563, 1610, 1610, 1610, 1610, 1610,
	1610, 1610, 1610, 1610, 1610, 1610, 1017, 1610, 1610, 1610,
	1610, 1610, -1000, 1610, 2649, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 610, 249, 3116, 361, -1000, 358, 1264, 3113,
	377, 2906, 1224, -1000, -1000, -1000, -1000, 26091, 26091, 21219,
	26091, -1000, 222, 31, 21, -1000, -1000, 1302, 5886, 1302,
	5886, -1000, -1000, 766, -1000, -1000, 1058, -1000, 44362, 44362,
	-1000, -1000, 2638, 1719, -1000, -1000, 15104, -1000, 5886, 5886,
	-1000, -1000, 27309, 44362, -1000, -24, -1000, 10, 3045, -1000,
	-1000, -1000, 1286, -1000, -1000, 1289, 1058, 2922, 44362, 1286,
	1286, 1286, -1000, -1000, 16941, 44362, 44362, -1000, -1000, -1000,
	3196, 8959, -1000, 34008, -1000, -1000, 38880, -1000, 38271, 3196,
	1758, -1000, 13876, 1852, 197, -1000, 262, -289, 206, 1748,
	204, 1824, -1000, -1000, 2443, 2442, 1511, -1000, 1488, 2437,
	1485, 1478, 2064, -1000, 55, -1000, 3036, 1078, -1000, 2636,
	-1000, 1476, 2982, -1000, 1270, -1000, 1716, 1470, -1000, -1000,
	182, 10803, 10803, 10803, 1078, 1468, 2980, 1270, 3045, 2317,
	-1000, 1211, -1000, 2140, 1412, 187, -1000, -1000, -1000, 44362,
	731, 2308, 1466, 37662, 1098, -1000, 755, 1405, 1403, -1000,
	35835, 314, 35835, -1000, 35835, -1000, -1000, 388, -1000, 44362,
	3043, -1000, -1000, -1000, 2257, 1702, -321, 44362, -1000, -1000,
	-1000, -1000, -1000, 1462, -1000, 796, 796, 3300, 3765, -1000,
	12642, -1000, 12642, 2821, -1000, 1753, -1000, 10803, 1798, 4629,
	10803, 4629, 896, 24873, 44362, -1000, -1000, 10803, 10803, -1000,
	2767, -1000, -1000, -1000, -1000, 10803, 10803, 2023, -1000, 44362,
	-1000, -1000, -1000, -1000, 24873, -1000, 12642, -1000, -1000, -1000,
	-1000, 10803, 1226, 1226, 2745, 1454, 125, 125, 125, 2714,
	2709, 2705, 1451, 125, 2683, 2615, 2611, 2597, 2577, 2546,
	2527, 2469, 2420, 2402, -1000, 2634, -1000, -1000, 1874, 11416,
	8346, -1000, -1000, 303, 1208, 2053, 2304, 145, -1000, 1701,
	-1000, -1000, -1000, 939, 410, -1000, 286, 2436, 1201, -1000,
	-1000, 44362, -1000, -1000, -1000, 16941, 2610, 2629, 2610, 133,
	1610, 612, 35835, 582, -1000, 44362, 2090, 1700, 2918, 765,
	3027, 44362, 2622, 401, 2621, 2618, 3062, 444, 4808, 44362,
	1298, -1000, 1399, 3723, -1000, 44362, -1000, 2099, -1000, 1580,
	-1000, -1000, 3196, -1000, -1000, 10803, 10803, 3196, 1580, 1580,
	1718, 44362, -1000, 444, 4808, 3060, 4252, 515, 2279, -1000,
	44362, -1000, -1000, -1000, 838, -1000, 931, 704, 44362, 1859,
	931, 1857, 2617, -1000, -1000, 44362, 44362, 44362, 44362, -1000,
	-1000, 44362, -1000, 44362, 44362, 44362, 44362, 44362, 37053, -1000,
	44362, 44362, -1000, 44362, 1847, 44362, 1846, 3021, -1000, 1610,
	1610, 912, -1000, -1000, 580, -1000, 37053, 2051, 2050, 2049,
	2044, 2289, 2285, 2278, 1610, 1610, 2043, 2275, 36444, 2272,
	1144, 2042, 2032, 2029, 2047, 2270, 968, -1000, 2268, 2046,
	2025, 2021, 44362, 2613, 2202, -1000, -1000, 133, 1610, 354,
	44362, 1699, 612, 453, -38, 22437, 44362, 34008, 34008, 34008,
	34008, -1000, 2968, 2965, -1000, 2953, 2951, 2959, 44362, 34008,
	2610, -1000, 36444, -1000, -1000, -1000, 1642, 1440, 2935, 876,
	10803, -1000, -1000, 17, -4, -1000, -1000, -1000, 35835, 2267,
	543, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3131, 44362,
	44362, 746, 2435, 1176, -1000, -1000, -1000, 4808, 2594, 2594,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2594,
	2594, 2600, -1000, -1000, 2593, 2593, 2593, 2533, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2595, 2595,
	2599, 2599, 2595, -1000, -1000, 3191, -1000, 1158, -1000, -1000,
	1395, -1000, 3191, 1782, -299, 13876, 1721, 1596, -1000, 10803,
	13876, 10803, -243, 340, -245, -1000, -1000, -1000, 2263, -1000,
	-1000, -1000, 2028, -1000, 2026, -1000, 152, 166, 1843, -211,
	8346, 435, 44362, -211, 44362, 8346, -1000, 44362, 1686, 1685,
	1683, 186, 179, 172, 405, -211, 3131, 55, 10803, 3003,
	-1000, -1000, 44362, 2020, -1000, -1000, -1000, 3198, 35835, 2099,
	1552, 35226, -1000, 316, -1000, 246, 561, 2260, -1000, 804,
	130, 2258, 2257, -1000, -1000, -1000, -1000, 12642, 1518, -1000,
	-1000, -1000, 1824, 10803, 2428, -1000, 976, 976, 2515, 2426,
	2425, -1000, 2594, 2594, -1000, 2533, 2593, 2533, 976, 976,
	2424, -1000, 2107, 2383, -1000, 2364, 2351, 10803, -1000, 2423,
	3753, 1120, -58, -177, 125, 125, -1000, -1000, -1000, -1000,
	125, 125, 125, 125, -1000, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 646, -97, -273, -98, -274,
	-1000, 2415, 1146, -1000, -1000, -1000, -1000, -1000, 3415, 1140,
	-1000, -1000, 2257, 2254, -1000, -1000, -1000, 44362, 2253, 2250,
	1069, 4808, 2414, 3058, 16332, 3057, 2102, -1000, -1000, -1000,
	26700, 574, -1000, -1000, -1000, 671, 299, 2002, 583, -1000,
	44362, 377, 2645, 1679, 2237, 44362, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3027, -1000, 924, 412, 32790, 14495, -1000,
	395, 44362, 16332, 16332, 395, 426, 1653, -1000, 642, 1163,
	162, 34008, 44362, -1000, 33399, 2405, -1000, 1058, 3196, -1000,
	1824, 1824, -1000, 3196, 3196, 1580, -1000, 426, -1000, 395,
	-1000, 1190, 18159, 482, 477, 447, -1000, 634, -1000, -1000,
	639, 3009, 4808, -1000, 44362, -1000, 44362, -1000, 44362, 44362,
	704, 10803, 3009, 44362, 751, -1000, -1000, 1065, 417, 390,
	717, 717, 1139, -1000, 3041, -1000, -1000, 1115, -1000, -1000,
	-1000, -1000, 44362, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	24873, 24873, 3112, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2235, 2234, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 44362, 1439, -1000,
	1677, 2102, 26700, 1676, 1582, 2232, 574, 2090, 1675, 2096,
	44362, -1000, 1084, 44362, 44362, -1000, 1250, -1000, 1670, 2871,
	2917, 2871, -1000, -1000, -1000, -1000, 2964, -1000, 2960, -1000,
	-1000, 1250, -1000, -1000, -1000, -1000, -1000, 876, -1000, 3129,
	931, 931, 931, 2398, -1000, -1000, -1000, 1098, 2395, -1000,
	-1000, -1000, 3214, -1000, -1000, -1000, -1000, -1000, -1000, 16941,
	3026, 3189, 3179, 34617, 3189, -1000, -299, 1741, -1000, 1754,
	203, 1667, 44362, -1000, -1000, -1000, 2388, 2387, -216, 174,
	3178, 3175, 941, -1000, 2386, 1097, -211, -1000, -1000, 1078,
	-1000, -1000, -1000, 10803, 10803, 10803, -1000, -1000, -1000, -211,
	-1000, 1078, -1000, 152, -1000, -1000, 3018, -1000, -1000, 2099,
	-1000, 245, -1000, -1000, -1000, -1000, -1000, -1000, 213, -1000,
	44362, -1000, 1095, 124, -1000, 1824, -1000, -1000, -1000, -1000,
	-1000, 4629, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 10803, -1000, -1000, -1000, 2333, -1000, -1000,
	10803, 2385, 2227, 2382, 2215, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3222, -1000, 3173, 1436, 2376, 2374, 1391, 2371, 2369,
	-1000, 10803, 2367, 3415, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 845, 395, 2366, 1094, -1000, -1000, -1000, -1000, 395,
	-1000, 2214, 217, -1000, -1000, -1000, -1000, 2213, 2209, 1994,
	-1000, -1000, 2001, 1392, 219, -1000, -1000, -1000, -1000, -1000,
	-1000, 2096, 1956, 1663, -323, -1000, 2584, -1000, 1610, 1610,
	1610, 44362, 1364, -1000, 1610, 1610, 2352, -1000, -1000, 2347,
	2346, -127, 659, 1625, 1616, -1000, 1983, 26091, 34008, 33399,
	1244, -1000, 1385, -1000, -1000, -1000, -1000, -1000, 3196, 659,
	-1000, 471, 1982, 12642, 2581, 12642, 2580, 497, 2570, 1361,
	-1000, 44362, -1000, -1000, 44362, 313, 2568, -1000, 2567, 2887,
	462, 2565, 2564, 44362, 2329, -1000, 3009, 44362, 696, 3025,
	-1000, -1000, -1000, 389, -1000, -1000, 506, -1000, 44362, -1000,
	44362, -1000, 1457, -1000, 24873, -1000, -1000, 1358, -1000, 2202,
	2198, -1000, 217, 2196, 5886, -1000, -1000, 2645, 2194, -1000,
	2191, -1000, 44362, 1084, 1084, 3222, 44362, 8346, -1000, -1000,
	10803, 2562, -1000, 10803, -1000, -1000, -1000, -1000, -1000, 2559,
	3012, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1717, -1000,
	10803, 10803, -1000, -1000, 697, 13876, -249, 338, -1000, -1000,
	-1000, -218, 2189, -1000, -1000, 3169, 2187, 2119, 44362, -1000,
	-1000, 1078, 163, 159, 155, 1078, -216, -1000, -1000, 1058,
	-1000, -1000, 1006, 562, -1000, 2344, 2274, -1000, 2206, 125,
	-1000, 125, -1000, 225, 10803, -1000, 2185, -1000, -1000, -1000,
	2182, -1000, -1000, 2123, -1000, 2334, 4808, -132, -127, 16332,
	-132, -1000, -1000, 379, -1000, -1000, 370, -1000, -1000, 1975,
	620, -1000, -1000, -1000, 1659, 1881, 2149, 30963, 24873, 25482,
	2175, -1000, -1000, 32790, 1717, 1717, 4858, 285, 47740, -1000,
	2554, 1031, 1615, -1000, 1981, -1000, 1979, -1000, 3196, 1244,
	148, -1000, -1000, 1545, -1000, 1031, 2279, 3168, -1000, 3724,
	44362, 2846, 44362, 2539, 1649, 12642, -1000, 639, 2979, -1000,
	-1000, 313, -1000, -1000, 1858, 12642, -1000, -1000, 2173, 25482,
	817, 1646, 1645, 821, 2538, -1000, 524, 3213, -1000, -1000,
	-1000, 858, 2535, -1000, 1829, 1807, -1000, 44362, -1000, 30963,
	30963, 721, 721, 30963, 30963, 2534, 717, -1000, -1000, 12642,
	-1000, -1000, 1610, -1000, -1000, -1000, 1610, 1149, -1000, -1000,
	-1000, -1000, -1000, -1000, 1956, -1000, -1000, -1000, 3150, -1000,
	-1000, 1824, 44362, 1824, 32181, -1000, 3167, 3166, -1000, 1824,
	1052, -1000, -299, 44362, 44362, -220, 1978, -1000, 2172, 167,
	-1000, -1000, 1054, -1000, -1000, -1000, -218, -222, 66, 24873,
	1620, -1000, -1000, -1000, -1000, -1000, 2211, -1000, 590, -1000,
	-1000, -1000, 1052, 2145, 2128, -1000, -1000, -114, -1000, -1000,
	400, -1000, -1000, -1000, 589, 2115, -1000, -1000, 367, -1000,
	-1000, 2167, -1000, -1000, 123, -1000, 1614, 1349, -1000, 2533,
	10803, -1000, -1000, -1000, -1000, -1000, -1000, 638, -1000, 395,
	47611, -1000, 990, -1000, 1006, 638, 29745, 632, 305, -1000,
	1976, -1000, -1000, 3222, -1000, 587, -1000, 478, -1000, 1346,
	-1000, 1341, 31572, 1959, 2780, -1000, 47559, 742, -1000, -1000,
	3300, -1000, -1000, -1000, -1000, -1000, -1000, 2159, 2158, -1000,
	-1000, -1000, -1000, -1000, 1957, 2532, 48, 3109, 2155, -1000,
	-1000, 2530, 1336, 1320, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1313, 1287, 30963, -1000, -1000, 3300, 1953,
	24873, 1610, -1000, -1000, 1282, 1277, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2529, -1000, -1000, 3165, -220, -1000, 2154,
	142, 151, -1000, 2151, -1000, -1000, 662, -212, 134, 129,
	128, -1000, -1000, -1000, 10803, -1000, -1000, 44362, 522, -1000,
	-1000, -1000, -1000, 207, -1000, -1000, -1000, -1000, -1000, 2149,
	2143, -1000, 30963, 3041, 2114, 464, 3164, -1000, 47740, -1000,
	1610, -1000, 464, 1266, -1000, 1610, 1610, -1000, 442, -1000,
	1594, -1000, 1946, -1000, 3150, -1000, 436, -1000, 468, -1000,
	-1000, -1000, 1251, -1000, -1000, -1000, 47559, 472, -1000, 626,
	2520, -1000, -1000, 2112, 10803, 2517, 1610, 1988, -110, 30963,
	2886, 2881, 2877, 2876, 1238, -1000, -1000, 24873, -1000, -1000,
	30354, 44362, 2119, -1000, -1000, 744, 158, 151, -1000, 3162,
	157, 3161, 3156, 1050, 1799, -1000, 121, 118, 116, -1000,
	-1000, -1000, -1000, 547, -1000, 307, -1000, -1000, -1000, 318,
	-1000, -1000, 3041, -1000, 3155, 515, -1000, 24873, -1000, -1000,
	29745, 1717, 1717, -1000, -1000, 1939, -1000, -1000, -1000, -1000,
	1908, -1000, -1000, -1000, 1228, -1000, 44362, 813, 7733, -1000,
	1984, -1000, 44362, -1000, 2916, -1000, 244, 1223, 318, 721,
	318, 721, 318, 721, 318, 721, 296, -1000, -1000, -1000,
	1192, -1000, -1000, 2516, 1894, 174, 160, 3153, -1000, 2119,
	3152, 2119, 2119, -1000, 126, 662, -1000, -1000, -1000, 2134,
	-1000, -1000, -1000, -1000, 1610, 1610, 2133, 2125, 407, -1000,
	-1000, -1000, 29136, 482, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 472, 47740, -1000, 7733, 1184, -1000, 1824, -1000, 717,
	-1000, -1000, 2894, 2708, 3204, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 44362, 3097, 24264, 144, -1000,
	-1000, -1000, 2120, -1000, 2119, -1000, -1000, 1609, -1000, -271,
	1890, 1885, -1000, -1000, 44362, -1000, 44362, 471, -1000, 47740,
	1180, -1000, 7733, -1000, -1000, 3212, -1000, 3210, 828, 828,
	318, 318, 318, 318, -1000, -1000, 44362, -1000, 1145, -1000,
	-1000, -1000, 1381, -1000, -1000, -1000, -1000, 2113, -1000, -1000,
	2033, -1000, -1000, -1000, 1136, 2279, -1000, -1000, -1000, -1000,
	-1000, 1950, 509, -1000, 1045, -1000, 1604, -1000, 28527, 44362,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 44362, 7120, -1000,
	1066, -1000, -1000, 1824, 44362, -1000,
}

var yyPgo = [...]int{
	0, 179, 3237, 247, 177, 3847, 96, 251, 249, 243,
	250, 3845, 3844, 3842, 3841, 3057, 3053, 3839, 3837, 3834,
	3833, 3832, 3830, 3829, 3815, 3811, 3810, 3809, 3808, 3806,
	3804, 3803, 3802, 3801, 3800, 3798, 3797, 3790, 3783, 3782,
	3776, 3774, 3772, 3771, 3768, 3766, 3764, 246, 3758, 3756,
	3755, 3753, 3750, 3749, 3748, 3745, 3744, 3743, 3742, 3741,
	3740, 3735, 3734, 3733, 3732, 3731, 3729, 3726, 3725, 3724,
	3723, 3721, 3720, 3715, 3714, 3713, 3712, 3711, 3710, 244,
	3709, 3706, 226, 3704, 3052, 3703, 3702, 3701, 3700, 3699,
	3698, 3697, 231, 3696, 3685, 3683, 3679, 3678, 3673, 3672,
	3670, 3669, 3667, 3665, 259, 3661, 3659, 3656, 3655, 232,
	3654, 253, 3650, 175, 138, 3649, 3648, 3647, 3644, 3641,
	3640, 240, 191, 73, 3639, 49, 3636, 3634, 220, 3633,
	149, 3631, 147, 3630, 3629, 3627, 3626, 3625, 3624, 3623,
	3622, 3621, 3620, 3619, 3618, 3616, 3611, 3609, 3602, 3601,
	3600, 93, 3599, 263, 3598, 70, 3596, 3595, 130, 3594,
	92, 125, 257, 2305, 258, 248, 189, 180, 114, 3593,
	355, 3592, 161, 222, 159, 34, 3588, 134, 3587, 255,
	47, 45, 234, 143, 58, 160, 122, 3586, 211, 105,
	104, 3585, 3584, 142, 3579, 237, 186, 3576, 102, 3575,
	3574, 3572, 3571, 3570, 196, 190, 3569, 3567, 131, 3565,
	3564, 126, 3563, 72, 129, 170, 123, 3562, 168, 121,
	113, 127, 97, 3561, 89, 3560, 3558, 3557, 3555, 185,
	3554, 3552, 135, 65, 3551, 3549, 3548, 67, 3540, 76,
	3539, 39, 3537, 60, 3536, 3535, 3534, 3533, 3531, 3527,
	3526, 3524, 3523, 3521, 3519, 3517, 57, 3516, 3515, 7,
	15, 17, 3512, 25, 3511, 173, 3510, 3509, 3507, 3505,
	3499, 87, 86, 3498, 90, 164, 3496, 8, 27, 69,
	3495, 3494, 215, 314, 100, 150, 3493, 341, 3492, 3491,
	3490, 167, 3489, 613, 3487, 3486, 3485, 3484, 3482, 3481,
	23, 3480, 212, 40, 3479, 132, 137, 3477, 42, 48,
	106, 230, 3476, 3475, 3474, 141, 195, 117, 28, 0,
	3473, 157, 3472, 3471, 3469, 256, 3467, 227, 218, 169,
	124, 260, 241, 3466, 3465, 75, 3463, 163, 31, 54,
	136, 88, 21, 209, 3462, 1159, 9, 206, 3461, 207,
	3460, 254, 16, 182, 144, 3458, 3457, 33, 264, 3456,
	3455, 3454, 133, 3453, 3451, 281, 77, 3435, 3433, 3432,
	3428, 38, 3427, 37, 12, 3425, 94, 3424, 239, 3423,
	183, 152, 187, 181, 158, 219, 228, 80, 79, 3420,
	1698, 155, 98, 14, 3419, 221, 3417, 162, 107, 3415,
	110, 3410, 242, 262, 204, 3409, 184, 10, 46, 36,
	29, 44, 11, 294, 205, 3407, 3403, 22, 52, 3402,
	59, 3400, 20, 3398, 3397, 3396, 68, 5, 3394, 3392,
	19, 18, 3391, 30, 213, 174, 128, 95, 74, 3390,
	3389, 51, 165, 3388, 151, 153, 156, 3387, 78, 3384,
	3382, 3381, 740, 3380, 252, 3379, 3378, 3377, 3376, 3375,
	3374, 3372, 3370, 217, 3366, 99, 43, 3365, 3363, 3362,
	3361, 84, 146, 3360, 3359, 3358, 3356, 32, 139, 3355,
	13, 3354, 26, 24, 35, 3353, 101, 3352, 3, 188,
	3351, 3350, 4, 3347, 3346, 1, 2, 3345, 3344, 116,
	3343, 91, 50, 172, 118, 3342, 3337, 85, 214, 140,
	3336, 3334, 103, 238, 200, 3333, 148, 245, 261, 3331,
	210, 3330, 3329, 3328, 3326, 3325, 3322, 1133, 3321, 3318,
	233, 71, 81, 3317, 235, 112, 3316, 3313, 83, 166,
	120, 111, 64, 82, 3312, 108, 198, 3311, 194, 3309,
	3308, 3307, 115, 3306, 3305, 3302, 3301, 192, 3298, 3282,
	193, 225, 3281, 3270, 340, 3269, 3266, 3265, 3264, 3263,
	3262, 3259, 3252, 3249, 3241, 236, 318, 3239,
}

//line mysql_sql.y:11961
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObejectInfo {
	v, _ := st.union.(tree.ObejectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 570, 573, 573, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 119, 119, 148, 549, 549, 118,
	555, 555, 555, 556, 556, 115, 137, 136, 139, 139,
	138, 138, 135, 135, 131, 134, 134, 133, 133, 132,
	127, 129, 129, 128, 130, 130, 116, 104, 117, 498,
	498, 497, 497, 496, 496, 449, 449, 495, 495, 495,
	494, 494, 494, 493, 493, 492, 492, 491, 491, 489,
	489, 490, 488, 487, 487, 487, 485, 485, 485, 481,
	481, 483, 482, 482, 484, 476, 476, 479, 479, 477,
	477, 477, 477, 480, 475, 475, 475, 474, 474, 103,
	103, 103, 392, 392, 102, 102, 406, 406, 406, 406,
	406, 404, 404, 404, 404, 404, 404, 403, 403, 402,
	402, 407, 407, 405, 405, 405, 405, 405, 405, 405,
	405, 405, 405, 405, 405, 405, 405, 405, 405, 405,
	405, 405, 405, 405, 405, 405, 405, 405, 405, 405,
	405, 405, 405, 405, 405, 405, 405, 405, 405, 405,
	405, 405, 405, 405, 405, 405, 405, 405, 405, 405,
	405, 405, 405, 405, 93, 93, 93, 93, 93, 98,
	98, 98, 561, 561, 560, 560, 562, 562, 562, 562,
	563, 563, 96, 96, 96, 97, 401, 401, 401, 94,
	95, 95, 391, 391, 396, 396, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 400,
	400, 400, 398, 398, 397, 397, 399, 399, 87, 87,
	87, 90, 89, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 88, 88, 88, 88, 88, 88, 83, 83,
	83, 83, 83, 82, 82, 84, 84, 388, 388, 387,
	99, 99, 100, 558, 558, 557, 559, 559, 559, 559,
	101, 107, 107, 107, 107, 107, 107, 107, 107, 106,
	106, 109, 109, 108, 110, 92, 92, 92, 92, 92,
	92, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 523, 523, 523, 525, 525, 323,
	324, 574, 326, 322, 322, 322, 519, 519, 520, 521,
	522, 522, 522, 105, 14, 194, 194, 424, 424, 11,
	11, 11, 11, 11, 11, 11, 11, 13, 81, 86,
	86, 264, 264, 269, 269, 270, 270, 270, 275, 275,
	276, 276, 265, 265, 265, 265, 265, 265, 265, 265,
	265, 265, 265, 265, 265, 265, 265, 265, 265, 265,
	265, 265, 265, 265, 251, 251, 251, 246, 246, 246,
	246, 247, 247, 248, 248, 249, 249, 249, 249, 250,
	250, 316, 316, 271, 271, 271, 273, 273, 272, 268,
	266, 266, 266, 266, 266, 266, 266, 267, 267, 267,
	267, 274, 274, 79, 85, 85, 85, 537, 537, 80,
	548, 548, 452, 452, 337, 337, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 457, 458, 333, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 54, 57, 58,
	53, 53, 53, 377, 377, 52, 575, 575, 311, 311,
	67, 66, 56, 68, 69, 70, 71, 72, 73, 51,
	65, 65, 65, 65, 65, 65, 65, 65, 76, 470,
	470, 577, 577, 577, 74, 75, 451, 451, 451, 64,
	63, 62, 61, 60, 60, 50, 50, 49, 49, 55,
	143, 59, 144, 144, 330, 330, 330, 332, 332, 328,
	576, 576, 420, 420, 331, 331, 48, 48, 48, 48,
	77, 329, 329, 310, 327, 327, 327, 12, 12, 10,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 26, 27, 29, 385, 385,
	382, 28, 20, 19, 19, 23, 22, 18, 18, 21,
	24, 25, 25, 9, 9, 9, 9, 15, 15, 16,
	167, 167, 219, 219, 531, 531, 527, 527, 528, 528,
	528, 529, 529, 530, 530, 111, 464, 464, 464, 464,
	464, 464, 8, 8, 189, 189, 463, 463, 463, 463,
	463, 463, 389, 389, 389, 508, 508, 508, 509, 188,
	188, 183, 183, 465, 465, 354, 510, 510, 473, 473,
	472, 472, 471, 471, 186, 186, 187, 187, 170, 170,
	122, 122, 478, 478, 478, 478, 486, 486, 448, 448,
	256, 256, 303, 303, 304, 304, 160, 160, 161, 161,
	161, 161, 161, 161, 564, 564, 565, 566, 567, 567,
	568, 568, 568, 569, 569, 569, 569, 569, 516, 516,
	518, 518, 517, 185, 185, 181, 181, 182, 182, 182,
	180, 180, 179, 178, 178, 177, 175, 175, 175, 176,
	176, 176, 193, 193, 163, 163, 163, 162, 162, 162,
	162, 162, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 164, 164, 524, 524, 524, 453,
	453, 453, 460, 460, 284, 284, 285, 285, 283, 283,
	165, 165, 166, 166, 166, 166, 282, 282, 281, 168,
	168, 174, 173, 173, 169, 169, 169, 169, 292, 292,
	291, 291, 291, 291, 114, 120, 120, 121, 192, 192,
	290, 289, 289, 289, 191, 191, 190, 190, 184, 184,
	172, 172, 172, 172, 288, 171, 286, 554, 554, 553,
	553, 552, 550, 550, 550, 551, 551, 551, 551, 500,
	500, 500, 500, 500, 317, 317, 317, 321, 321, 320,
	320, 320, 320, 320, 325, 7, 7, 7, 7, 7,
	7, 7, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 39, 203, 204, 40, 205,
	205, 206, 206, 207, 207, 208, 209, 210, 210, 210,
	210, 38, 195, 195, 196, 196, 197, 197, 198, 199,
	199, 199, 202, 200, 201, 201, 572, 572, 571, 37,
	37, 30, 152, 152, 153, 153, 153, 155, 155, 252,
	252, 252, 154, 154, 156, 156, 156, 532, 534, 534,
	536, 535, 535, 535, 538, 538, 538, 538, 538, 539,
	539, 539, 539, 540, 540, 31, 140, 145, 543, 543,
	543, 542, 542, 544, 544, 545, 545, 307, 307, 308,
	308, 150, 151, 151, 147, 142, 158, 158, 158, 158,
	158, 159, 159, 141, 146, 149, 533, 541, 541, 541,
	386, 386, 383, 384, 384, 381, 380, 380, 380, 547,
	547, 546, 546, 546, 318, 318, 32, 376, 376, 378,
	379, 379, 379, 370, 370, 370, 370, 36, 374, 374,
	375, 375, 375, 375, 375, 375, 375, 371, 371, 373,
	373, 369, 369, 369, 369, 369, 369, 369, 35, 157,
	157, 368, 368, 365, 365, 363, 363, 364, 364, 362,
	362, 362, 366, 366, 43, 78, 44, 45, 46, 42,
	367, 367, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 124, 123, 123, 123, 123, 123, 126, 126, 306,
	306, 305, 305, 125, 253, 253, 41, 231, 231, 440,
	440, 435, 435, 435, 435, 435, 455, 455, 455, 436,
	436, 436, 437, 437, 437, 439, 439, 439, 438, 438,
	438, 438, 438, 454, 454, 456, 456, 456, 408, 408,
	409, 409, 409, 412, 412, 427, 427, 428, 428, 426,
	426, 433, 433, 432, 432, 431, 431, 430, 430, 429,
	429, 429, 429, 423, 423, 422, 422, 410, 410, 410,
	410, 410, 411, 411, 411, 421, 421, 425, 425, 280,
	280, 279, 279, 239, 239, 240, 240, 278, 278, 237,
	237, 238, 238, 238, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 506,
	506, 507, 242, 242, 254, 254, 254, 254, 254, 254,
	241, 241, 243, 243, 220, 220, 218, 218, 218, 218,
	218, 218, 218, 218, 211, 211, 212, 212, 213, 213,
	213, 217, 217, 216, 216, 216, 216, 214, 214, 215,
	215, 215, 215, 215, 215, 394, 394, 503, 503, 504,
	504, 499, 499, 499, 502, 502, 502, 502, 502, 502,
	502, 505, 505, 505, 501, 501, 221, 301, 301, 301,
	319, 319, 319, 319, 300, 300, 300, 236, 236, 235,
	235, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 393, 393, 334, 334, 335, 335, 263,
	262, 262, 262, 262, 262, 260, 261, 259, 259, 259,
	259, 259, 258, 258, 257, 257, 257, 372, 372, 255,
	255, 245, 245, 245, 244, 244, 244, 434, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 343, 343, 343, 343, 343, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 343, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 343, 343, 298, 298, 298,
	299, 299, 299, 299, 299, 299, 299, 299, 344, 344,
	350, 350, 515, 515, 514, 222, 222, 222, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 232, 232, 232,
	417, 417, 417, 417, 418, 418, 418, 418, 419, 419,
	419, 415, 415, 416, 416, 355, 356, 356, 461, 461,
	462, 462, 413, 413, 414, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 469, 469, 469,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 526, 526, 526, 511,
	511, 511, 512, 512, 512, 512, 512, 512, 512, 512,
	512, 512, 512, 512, 513, 513, 513, 513, 513, 513,
	513, 513, 513, 513, 513, 513, 513, 513, 513, 513,
	513, 296, 296, 296, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 357, 357, 358, 358, 466, 466, 466, 466,
	466, 466, 467, 467, 468, 468, 468, 468, 459, 459,
	459, 459, 459, 459, 459, 459, 459, 459, 459, 459,
	459, 459, 459, 459, 459, 459, 459, 459, 459, 459,
	459, 459, 459, 459, 459, 459, 459, 342, 293, 293,
	293, 359, 351, 351, 352, 352, 353, 353, 345, 345,
	345, 345, 345, 345, 346, 346, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 347, 347,
	349, 349, 361, 361, 361, 360, 360, 360, 360, 360,
	360, 360, 234, 234, 234, 234, 339, 339, 339, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 224, 224, 224, 224, 228, 228, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 229, 229, 229, 229, 229, 227, 227, 227, 227,
	227, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 112,
	113, 113, 226, 302, 302, 441, 441, 444, 444, 442,
	442, 443, 445, 445, 445, 446, 446, 446, 447, 447,
	447, 450, 450, 309, 309, 309, 315, 315, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 6, 1, 2, 4,
	0, 1, 1, 0, 1, 5, 2, 2, 6, 9,
	6, 9, 4, 7, 8, 0, 1, 1, 2, 4,
	6, 1, 2, 4, 0, 2, 10, 10, 2, 0,
	2, 1, 3, 3, 3, 0, 2, 1, 3, 5,
	0, 2, 3, 1, 3, 1, 1, 1, 3, 1,
	1, 1, 1, 0, 3, 3, 0, 3, 3, 0,
	1, 3, 0, 1, 3, 0, 2, 1, 2, 3,
	4, 3, 3, 1, 0, 1, 1, 0, 1, 8,
	5, 7, 0, 3, 8, 5, 1, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	4, 1, 3, 1, 2, 2, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 2, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 2, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 1, 1, 2, 2, 1,
	1, 1, 3, 2, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 1, 3, 3, 1, 2, 2, 2, 1,
	2, 2, 3, 4, 4, 6, 1, 1, 1, 2,
	4, 6, 1, 4, 1, 3, 3, 4, 4, 4,
	4, 3, 3, 2, 4, 4, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 2, 2, 0, 1, 4, 2, 4, 1, 5,
	3, 2, 1, 2, 2, 4, 4, 5, 2, 1,
	3, 4, 4, 1, 2, 9, 7, 1, 3, 3,
	1, 1, 3, 1, 3, 2, 1, 2, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 2, 4, 3, 3, 1, 1, 1, 1, 1,
	1, 2, 3, 4, 7, 2, 3, 3, 4, 5,
	3, 4, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 1,
	1, 1, 1, 6, 4, 1, 1, 0, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 10, 7, 4,
	4, 1, 3, 1, 6, 3, 3, 3, 1, 1,
	1, 3, 2, 4, 5, 5, 6, 5, 5, 3,
	2, 2, 1, 3, 4, 3, 7, 5, 8, 2,
	2, 1, 3, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 1, 2, 1, 3, 2, 1,
	2, 2, 1, 2, 3, 2, 2, 3, 6, 3,
	3, 1, 1, 7, 7, 8, 8, 0, 4, 7,
	0, 3, 0, 2, 0, 1, 1, 1, 1, 4,
	2, 2, 3, 3, 4, 5, 3, 4, 4, 2,
	2, 2, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 3,
	2, 5, 5, 0, 2, 7, 0, 1, 0, 1,
	5, 5, 3, 3, 2, 4, 4, 4, 4, 4,
	1, 1, 1, 3, 3, 1, 1, 1, 6, 0,
	1, 1, 1, 1, 5, 5, 0, 1, 1, 3,
	3, 3, 4, 6, 7, 4, 4, 7, 8, 3,
	3, 2, 3, 4, 0, 2, 2, 0, 2, 2,
	1, 1, 1, 1, 0, 1, 4, 4, 5, 4,
	3, 1, 3, 1, 1, 3, 5, 2, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 4, 1, 3,
	1, 4, 6, 6, 4, 4, 4, 4, 4, 3,
	6, 3, 5, 1, 1, 2, 2, 11, 8, 9,
	1, 3, 2, 4, 0, 2, 0, 1, 1, 1,
	1, 0, 1, 0, 1, 4, 2, 1, 5, 4,
	4, 2, 5, 5, 1, 3, 2, 1, 5, 4,
	4, 2, 0, 5, 4, 0, 1, 3, 3, 1,
	3, 1, 3, 1, 3, 4, 0, 1, 0, 1,
	1, 3, 1, 1, 0, 4, 1, 3, 2, 1,
	0, 8, 0, 4, 7, 4, 0, 2, 0, 2,
	0, 2, 0, 4, 1, 3, 1, 1, 6, 4,
	5, 7, 4, 5, 0, 1, 3, 8, 0, 6,
	0, 4, 6, 1, 1, 1, 1, 1, 2, 3,
	1, 3, 6, 0, 3, 0, 1, 2, 4, 4,
	0, 1, 3, 1, 3, 3, 0, 1, 1, 0,
	2, 2, 0, 2, 3, 3, 3, 1, 3, 3,
	3, 3, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 7, 7, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 2,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	3, 1, 1, 1, 4, 4, 4, 3, 2, 2,
	2, 3, 2, 3, 4, 1, 3, 4, 0, 2,
	1, 1, 2, 2, 0, 1, 2, 4, 1, 3,
	1, 3, 2, 3, 1, 4, 3, 0, 1, 1,
	2, 5, 2, 2, 2, 0, 2, 3, 3, 0,
	1, 3, 1, 3, 0, 1, 2, 1, 1, 0,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 1, 7, 1,
	3, 0, 1, 1, 3, 1, 3, 0, 1, 1,
	1, 14, 1, 3, 0, 1, 1, 3, 1, 1,
	2, 4, 1, 1, 1, 1, 0, 1, 2, 9,
	9, 7, 1, 2, 3, 3, 3, 0, 4, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	4, 1, 1, 1, 3, 3, 4, 3, 3, 0,
	1, 1, 1, 0, 2, 7, 8, 8, 0, 3,
	3, 0, 3, 0, 3, 0, 5, 1, 3, 0,
	3, 3, 0, 2, 9, 7, 0, 2, 2, 3,
	3, 0, 2, 4, 4, 4, 1, 0, 2, 2,
	1, 3, 2, 1, 3, 2, 1, 3, 2, 0,
	1, 3, 4, 3, 1, 1, 4, 1, 3, 1,
	1, 1, 1, 0, 1, 1, 1, 11, 0, 2,
	3, 3, 2, 2, 3, 1, 1, 1, 3, 3,
	4, 0, 2, 2, 2, 2, 2, 2, 6, 0,
	4, 1, 1, 0, 3, 0, 1, 1, 2, 4,
	4, 4, 0, 1, 8, 2, 4, 4, 4, 9,
	0, 2, 11, 9, 11, 8, 6, 9, 7, 10,
	7, 2, 2, 9, 4, 5, 3, 0, 4, 1,
	3, 0, 3, 6, 0, 2, 10, 0, 2, 0,
	2, 0, 3, 2, 4, 3, 0, 2, 1, 0,
	2, 3, 0, 2, 3, 0, 2, 1, 0, 3,
	2, 4, 3, 0, 1, 0, 1, 1, 0, 6,
	0, 3, 5, 0, 4, 0, 3, 1, 3, 4,
	5, 0, 3, 1, 3, 2, 3, 1, 2, 0,
	4, 6, 5, 0, 2, 0, 2, 4, 5, 4,
	5, 1, 5, 6, 5, 0, 3, 0, 1, 1,
	3, 3, 3, 0, 4, 1, 3, 3, 3, 0,
	1, 1, 3, 2, 3, 3, 3, 4, 4, 3,
	3, 3, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 5, 4, 1,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 3, 6, 6,
	6, 8, 8, 8, 0, 1, 1, 3, 1, 1,
	1, 1, 1, 7, 9, 7, 9, 2, 1, 7,
	9, 7, 9, 8, 5, 0, 1, 0, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 3, 1, 3, 5,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	2, 1, 2, 2, 1, 1, 2, 2, 2, 3,
	3, 2, 2, 1, 5, 6, 4, 1, 1, 1,
	5, 4, 1, 1, 2, 0, 1, 1, 2, 5,
	0, 1, 1, 2, 2, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 2, 2, 2, 0, 3, 0,
	3, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 3, 5, 2, 2, 2, 2,
	4, 1, 1, 2, 5, 6, 8, 6, 6, 6,
	1, 1, 1, 1, 1, 1, 3, 4, 4, 4,
	7, 9, 7, 7, 7, 9, 7, 7, 0, 2,
	0, 1, 1, 2, 4, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 2, 2, 2, 0, 1, 1,
	1, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 5, 0, 1, 3, 0, 1, 0, 2,
	0, 2, 0, 1, 6, 8, 8, 6, 6, 5,
	5, 5, 6, 6, 6, 6, 5, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 1, 1, 1,
	4, 4, 6, 8, 6, 4, 5, 4, 4, 4,
	3, 4, 6, 6, 7, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 8, 4, 2, 3, 2, 4, 2,
	2, 4, 6, 2, 2, 4, 6, 4, 2, 4,
	4, 4, 0, 1, 2, 3, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 3, 0, 1, 1, 3, 1, 3, 3, 3,
	3, 3, 2, 1, 1, 1, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 1, 3, 4, 4,
	5, 4, 5, 3, 4, 5, 6, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	2, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 4, 4, 1, 2,
	3, 5, 1, 1, 3, 0, 1, 0, 3, 0,
	3, 3, 0, 3, 5, 0, 3, 5, 0, 1,
	1, 0, 1, 1, 2, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}

var yyChk = [...]int{
	-1000, -570, -573, -2, -5, 620, -1, -4, -113, -87,
	-7, -14, -115, -116, -8, -111, -9, -10, -12, -91,
	-106, -108, -110, -109, -47, -11, -105, -82, -83, -93,
	-99, -102, -103, -104, -117, -112, -114, -160, -118, -119,
	610, -88, -89, -90, -33, -32, -31, -30, -140, -145,
	-148, 544, 616, 447, 14, 496, -15, -16, -516, -17,
	259, -322, -323, -324, -326, -574, -48, -49, -50, -60,
	-61, -62, -63, -64, -74, -75, -76, -51, -52, -53,
	-56, -54, -67, -66, -68, -69, -70, -71, -72, -73,
	-55, -59, -143, -144, -77, -57, -78, -58, -80, -79,
	-85, -81, -86, -142, -147, -13, 234, -84, 76, -94,
	-95, -96, -97, -98, -100, -101, 371, 377, 434, 609,
	61, -161, -163, 627, 628, 159, 160, 162, 163, -34,
	-35, -36, -37, -38, -39, -41, -40, -42, -43, -44,
	-45, -46, 230, 16, 539, -18, -21, -19, -22, -20,
	-28, -29, -27, -24, -26, -141, -25, -146, -23, -149,
	254, 253, 38, 320, 321, 322, 375, 252, 231, 15,
	31, 42, 351, -162, 82, 531, 532, 534, 232, -164,
	13, 632, -6, -3, -2, -127, -131, -135, -138, -139,
	-136, -137, -4, -113, 117, 244, 611, -319, 367, 612,
	614, 613, 85, 93, -312, -314, 447, 259, 371, 377,
	609, 628, 546, 547, 548, 549, 550, 551, 552, 553,
	555, 556, 557, 558, 559, 560, 561, 571, 572, 562,
	563, 564, 565, 566, 567, 568, 569, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 499, 596, 597, 598, 599, 527, 554, 590, 591,
	592, 593, 349, 350, 536, 271, 295, 402, 301, 308,
	159, 178, 172, 200, 192, 532, 167, 275, 313, 276,
	92, 162, 482, 107, 459, 431, 165, 290, 292, 294,
	528, 529, 361, 297, 526, 296, 298, 300, 530, 277,
	352, 188, 183, 289, 273, 181, 278, 40, 279, 205,
	280, 281, 541, 455, 348, 461, 305, 52, 429, 182,
	456, 293, 458, 209, 213, 473, 474, 176, 177, 463,
	476, 204, 207, 208, 251, 345, 346, 43, 538, 263,
	477, 211, 203, 199, 485, 309, 307, 202, 175, 198,
	274, 65, 215, 214, 216, 425, 426, 427, 428, 282,
	283, 365, 472, 195, 184, 353, 168, 23, 480, 258,
	460, 378, 284, 302, 310, 210, 212, 265, 270, 540,
	531, 433, 269, 306, 478, 180, 262, 291, 257, 481,
	169, 534, 380, 285, 163, 299, 475, 484, 64, 393,
	174, 166, 248, 160, 267, 272, 286, 287, 288, 525,
	312, 311, 303, 533, 196, 264, 201, 186, 173, 197,
	161, 266, 483, 394, 607, 351, 412, 194, 191, 268,
	241, 479, 462, 164, 416, 395, 189, 314, 603, 604,
	605, 366, 344, 315, 316, 187, 255, 453, 454, 319,
	422, 335, 396, 432, 403, 397, 222, 223, 323, 465,
	467, 206, 606, 324, 325, 326, 457, 327, 328, 329,
	330, 370, 56, 58, 94, 97, 96, 629, 630, 63,
	29, 356, 359, 391, 398, 337, 608, 537, 334, 338,
	339, 360, 25, 414, 382, 418, 417, 48, 49, 50,
	53, 54, 55, 57, 59, 60, 51, 524, 375, 388,
	486, 45, 47, 385, 27, 362, 413, 435, 333, 415,
	446, 46, 444, 445, 466, 26, 364, 363, 62, 44,
	421, 423, 424, 317, 331, 373, 617, 487, 368, 384,
	387, 369, 336, 358, 389, 67, 66, 381, 618, 376,
	374, 332, 542, 543, 340, 570, 354, 430, 521, 520,
	519, 518, 517, 516, 515, 514, 320, 321, 322, 399,
	400, 401, 411, 404, 405, 406, 407, 408, 409, 410,
	449, 450, 619, 468, 470, 471, 469, 236, 631, 355,
	239, 621, 622, 95, 623, 625, 624, 28, 626, -399,
	-397, -319, 532, 609, 377, 531, 534, 371, 351, 628,
	375, 259, 320, 321, 322, 447, 349, -205, -319, 631,
	-170, 243, 39, -218, -319, -170, -84, -16, -15, -162,
	-163, -218, 238, -327, 24, 429, -92, 430, 234, 82,
	77, -319, -9, -104, -8, -111, -82, -160, 434, -325,
	-319, 320, 320, -325, 238, -319, 269, 410, -452, 244,
	-403, -376, 270, -402, -378, -405, -379, 32, 230, 232,
	231, 544, 266, 16, 375, 240, 14, 13, 376, 252,
	25, 26, 28, 15, 377, 379, 29, 380, 383, 384,
	385, 42, 388, 389, 259, 85, 93, 88, 277, -204,
	-319, -353, -345, 114, -348, -340, -341, -343, -495, -489,
	-338, 82, 141, 142, 149, 115, 633, -342, -434, 36,
	117, 550, 554, 590, 497, -294, -295, -296, -297, -298,
	-299, -319, -490, -488, 88, 98, 100, 104, 105, 103,
	101, 153, 185, 102, 89, 154, -163, 85, -511, 560,
	-313, 583, 596, 597, 598, 599, 582, 61, -459, -468,
	237, -466, 152, 190, 255, 186, 14, 147, 422, 187,
	591, 592, 593, 557, 579, 499, 561, 571, 586, 552,
	553, 555, 547, 548, 549, 551, 562, 564, 578, -469,
	574, 584, 585, 570, 594, 595, 587, 588, 589, 625,
	87, 86, 577, 576, 563, 558, 559, 565, 546, 556,
	566, 567, 575, 580, 581, 359, 107, 360, 361, 489,
	352, 362, 244, 429, 70, 363, 364, 365, 366, 367,
	496, 368, 71, 369, 358, 259, 412, 370, 189, 206,
	501, 500, 502, 493, 490, 488, 491, 492, 494, 495,
	568, 569, 573, -120, -121, 601, -564, -287, -565, 6,
	7, 8, 9, -566, 154, -555, 431, 540, 88, 164,
	161, -390, 164, 113, 169, 168, -390, 166, 323, 265,
	-367, -152, 349, 412, 327, 94, 269, -370, -368, 528,
	-454, 317, 313, 289, 239, 110, -153, 249, 248, 108,
	489, 237, 386, 308, 56, 58, -527, -528, 227, 228,
	229, -518, 522, -517, -319, 361, 96, 97, 27, 238,
	372, 265, 467, 465, 466, 468, 469, 470, 471, -65,
	-470, -451, 462, 461, -331, 454, 460, 452, 464, 455,
	350, 329, 544, 328, 230, 621, 529, 523, -309, 396,
	432, 486, 487, 373, 433, 473, 475, 456, 107, 193,
	190, 239, 241, 238, 349, 489, 412, 94, 327, -527,
	161, 473, 475, 269, 410, 41, -396, 422, -395, -397,
	474, 485, 86, 87, 472, -309, 107, 453, 453, -564,
	-287, -161, -163, -114, -516, 530, 530, 530, 239, 349,
	412, 269, 240, 238, 525, 528, 241, 489, 237, 320,
	372, 265, 327, 94, 166, -453, -524, 32, -460, 224,
	225, 226, 33, 34, -1, 121, 632, -345, -345, -6,
	635, -6, -345, -319, -319, 156, -224, -228, -225, -227,
	-226, -230, -229, 190, 191, 152, 194, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 207, 208, 205, 31,
	206, 255, 186, 187, 188, 189, 209, 172, 192, 537,
	217, 173, 218, 174, 219, 175, 220, 176, 177, 221,
	178, 181, 182, 183, 184, 180, 155, -194, 88, 32,
	82, 155, 88, -186, 261, -170, -218, 155, 633, -186,
	-564, -179, -180, 11, -218, -300, -319, 431, 124, -92,
	77, -92, 430, 77, -519, -520, -521, -523, 234, 430,
	429, -109, 155, 277, 17, -325, -325, 80, -218, -378,
	269, -403, -376, 36, 79, 156, 242, 156, 79, 82,
	373, 349, 412, 374, 489, 238, 386, 241, 269, 387,
	349, 412, 238, 241, 489, 269, 349, 238, 241, 412,
	269, 387, 349, 452, 453, 241, 27, 378, 381, 382,
	453, -474, 485, 156, 113, 110, 111, 112, -345, 131,
	-360, 124, 125, 126, 127, 128, 129, 130, 138, 137,
	148, 141, 142, 143, 144, 145, 146, 147, 139, 140,
	134, 114, 132, 136, 133, 116, 151, -163, -345, -353,
	61, -343, -343, -343, -343, -319, -434, -350, -345, 82,
	82, 82, 82, 155, 101, 88, -345, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, -467,
	82, 82, -357, -358, 82, 82, -338, -300, 82, 88,
	88, 82, 82, 82, 88, 82, 82, 82, -358, -358,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, -180, 156, -179, 82, -179,
	-180, -164, -163, 32, 33, 32, 33, 32, 33, 32,
	33, -567, 618, 82, 98, 629, 222, 478, 539, 167,
	168, 169, -365, 244, -203, -319, -205, 372, 241, 525,
	241, -153, -365, -365, -365, -365, -365, 240, -365, 24,
	238, 238, 238, 238, -365, 496, 124, 124, 59, -529,
	171, 156, -518, -185, 82, -330, 132, 136, -330, -283,
	18, 24, 267, 267, 267, -330, 307, -575, -576, 17,
	134, -328, -576, -328, -328, -330, -577, 240, 463, 43,
	268, 267, -181, -182, 22, -181, 457, 453, -420, 458,
	459, -332, -576, -331, -330, -330, -331, -330, -330, -330,
	32, 238, 241, 489, 327, 622, -575, -575, 31, 31,
	-452, -452, -218, -452, 523, -310, -319, -452, -452, -452,
	-530, 243, -561, -560, 476, -563, 478, 161, -397, 161,
	-397, -378, 269, 269, 156, 124, 24, -398, 124, 135,
	-397, -397, -398, -398, -241, 41, -318, 152, -319, 88,
	-241, 41, -558, -557, -218, -180, -164, -163, 83, 83,
	83, 533, 533, 533, -452, -452, -452, -452, -452, -454,
	-452, -452, -452, -452, -452, -325, -195, -319, -205, 244,
	-452, -452, -452, -165, -166, 143, -345, -319, -165, -3,
	-129, -128, 118, 119, 121, 612, 367, 611, 615, 609,
	-397, 41, -447, 394, 393, -441, -443, 82, -442, 82,
	-442, -442, -442, -442, -442, 82, 82, -444, 82, -444,
	-444, -441, -445, 82, -445, -446, 82, -446, -445, -319,
	-424, 539, -351, -353, -319, 39, -463, 61, -160, 82,
	31, 82, -186, -319, 187, 166, 626, -464, 61, -160,
	82, 31, -180, -122, 39, -182, 21, 155, 98, 88,
	-109, -92, 77, -109, 83, 156, -522, 104, 105, -525,
	204, 196, -319, -107, 88, -7, -8, -9, -10, -47,
	-82, -79, -160, 231, -491, -489, 82, 32, 421, 79,
	17, -404, 238, 489, 372, 265, 241, 349, -402, -385,
	-382, -380, -318, -378, -381, -380, -407, -300, 453, -123,
	436, 435, 319, -345, -345, -345, -345, -345, 103, 114,
	344, 104, 105, -340, -361, 32, 315, 316, -341, -341,
	-341, -341, -341, -341, -341, -341, -341, -341, -341, -341,
	-349, -359, -434, 82, 134, 132, 136, 133, 116, -343,
	-343, -341, -341, -243, -318, 152, 83, 156, -345, -515,
	-514, 118, -345, -345, -345, -345, -319, -512, -513, 503,
	504, 505, 506, 507, 508, 509, 510, 511, 512, 513,
	363, 358, 364, 362, 352, 370, 365, 366, 189, 520,
	521, 514, 515, 516, 517, 518, 519, -351, -351, -345,
	-512, -351, -293, 33, 32, -353, -353, -353, 83, -345,
	-526, 342, 341, 343, -183, -319, -351, 83, 83, 83,
	98, -353, -353, -351, -341, -351, -351, -351, -351, -513,
	-293, -293, -293, -293, 143, -353, -353, -293, -293, -293,
	-293, 143, -293, -293, -293, -293, -293, -293, -293, -293,
	-293, -293, 83, 83, 83, 143, -353, -181, -121, -472,
	-471, -345, 41, -122, -182, -568, 619, 82, -300, -556,
	88, 88, 633, 479, 480, 165, 168, 167, -319, 114,
	35, 82, -195, -365, -365, -365, -534, -319, 89, -386,
	-383, -380, -319, -319, -376, -319, -319, -218, -365, -365,
	-365, -365, -218, -252, 53, 54, 55, -380, -154, 56,
	57, -530, -517, 35, -184, -319, -283, -343, -343, -345,
	-380, 269, -575, -330, -330, -311, -310, -332, -327, -332,
	-332, -283, -328, -330, -330, -345, -332, -328, -283, -319,
	453, -283, -283, -420, -330, -329, -319, -329, -365, -310,
	-311, -311, -218, -218, -264, -269, -265, -270, 261, 235,
	356, 357, 233, 231, 11, 232, -277, 308, -366, 497,
	-247, -248, 77, 42, -250, 259, 398, 391, 271, 275,
	92, 276, 431, 277, 240, 279, 280, 281, 296, 298,
	251, 282, 283, 284, 422, 285, 160, 297, 286, 287,
	288, 374, -242, 6, 330, 41, 51, 52, 445, 444,
	542, 539, 272, -534, -532, 31, -319, 31, -386, -319,
	-319, -173, -168, -172, -169, -174, -286, -288, -171, 82,
	-218, -163, -319, 156, 477, 479, 480, -561, -398, -561,
	-398, 32, 421, -401, 421, 32, -376, -395, 473, 475,
	-391, 88, 422, -381, -400, 79, 152, -471, -398, -398,
	-400, -400, 151, 156, -559, 478, 479, 227, -181, 98,
	98, 98, -220, -218, -534, -385, -376, -319, -452, -220,
	-220, -220, -319, -319, 82, 155, 36, -319, -319, -319,
	-282, 156, -281, 17, -320, -319, 35, 88, 155, -282,
	-130, -128, 120, -345, -6, 611, -345, -6, -6, -345,
	-6, -345, -450, 395, 98, 98, -302, 88, -302, 98,
	98, 98, 545, 83, 88, -389, 79, -465, -354, -510,
	601, -188, 83, -183, -508, -509, -183, -187, -319, -463,
	633, 124, 124, 124, -465, -188, 83, -508, -181, 602,
	-122, -178, -177, -345, -319, 24, -109, -92, -520, 155,
	349, 156, -184, -404, -384, -381, -406, 143, -319, -392,
	156, 539, 636, 86, 242, -547, -546, 413, 83, 156,
	-475, 243, 496, 88, 633, 429, 222, 223, 103, 344,
	104, 105, -434, -353, -349, -343, -343, -341, -341, -347,
	256, -347, 113, -345, 634, -344, -514, 120, -345, 35,
	156, 35, 156, 80, 155, 83, 83, 17, 17, 83,
	-345, 83, 83, 83, 83, 17, 17, -345, 83, 155,
	83, 83, 83, 83, 80, 83, 156, 83, 83, 83,
	83, 156, -353, -353, -345, -353, 83, 83, 83, -345,
	-345, -345, -353, 83, -345, -345, -345, -345, -345, -345,
	-345, -345, -345, -345, -414, 448, -414, -414, 156, 156,
	156, 83, -122, 82, 98, 156, 630, -306, -305, 88,
	166, 169, 169, 168, 24, 36, -204, -206, -207, -208,
	-209, -210, 134, 157, 158, 82, -218, -218, -218, -536,
	399, -548, 156, 41, -546, 489, -150, 319, -369, 80,
	-157, 17, 539, -218, -218, -218, -218, -231, 35, 17,
	-167, -219, -319, 82, 83, 156, -377, 80, -319, -311,
	-283, -283, -332, -283, -283, 156, 23, -330, -332, -332,
	-328, 155, -310, -440, 35, -185, 156, 21, 261, -217,
	-316, -214, -216, 246, -335, -215, 249, -504, 247, 245,
	108, 250, 304, 109, 240, -316, -316, 246, -251, 242,
	35, -316, -267, 240, 347, 304, 247, 21, 261, -266,
	240, 109, -319, 246, 250, 247, 245, -315, 124, -309,
	151, 242, 43, 374, -315, 543, 261, -315, -315, -315,
	-315, -315, -315, -315, 278, 278, -315, -315, -315, -315,
	-315, -315, -315, -315, -315, -315, -315, 161, -315, -315,
	-315, -315, -315, -315, 82, 273, 274, -537, 399, 31,
	355, 355, -548, 31, -158, 349, 31, -289, -290, -291,
	-292, 68, 72, 74, 69, 70, 71, 75, 31, 156,
	-317, -321, 35, -319, 88, -317, -163, -168, -173, -317,
	82, -560, -562, 481, 478, 484, -400, -400, 242, 82,
	124, -400, -400, 41, -318, -557, 485, 479, -122, 156,
	79, -220, -196, -197, -198, -199, -224, -300, 191, 194,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 207,
	208, 205, 206, 255, 186, 187, 188, 189, 209, 172,
	192, 537, 173, 174, 175, 176, 177, 178, 181, 182,
	183, 184, 180, -319, -205, -283, -166, -168, -319, 88,
	-319, 143, -283, 121, -6, 119, -134, -133, -132, 122,
	609, 615, 121, 121, 121, 83, 83, 83, 156, 83,
	83, 83, 156, 83, 156, 98, -478, 458, 40, 156,
	82, 83, 156, 61, 156, 124, 83, 156, 187, 166,
	626, -345, -345, -345, 83, 61, -122, 88, 156, -175,
	37, 38, 155, 431, -319, -489, 83, -406, 156, 242,
	155, 155, -382, 377, -318, -384, 21, 539, -300, 39,
	-306, 124, 633, -319, 83, -347, -347, 113, -343, -340,
	83, 121, -345, 119, -222, -224, 393, 394, -345, -222,
	-223, -229, 152, 190, 255, 189, 188, 186, 393, 394,
	-241, -319, -345, -345, 83, -345, -345, 17, -319, -241,
	-341, -345, -180, -180, 83, 83, -413, -414, -413, -413,
	83, 83, 83, 83, -413, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 82, 98, 100, 98, 100,
	-471, -569, 63, 617, 62, 421, 103, 309, 156, 98,
	88, 634, 156, 124, 169, -549, 313, 349, 385, 83,
	156, -300, -196, -185, 82, -185, -539, 460, 401, 411,
	-315, -337, -336, 351, 42, -457, 422, 407, 408, -383,
	269, -319, -545, 95, 124, 79, 334, 338, 339, 335,
	336, 337, -363, -364, -362, -366, -532, 82, 82, -160,
	35, 132, 82, 82, 35, -435, 324, -224, -218, -167,
	-319, 17, 156, -531, 155, -1, -319, -376, -330, -283,
	-345, -345, -283, -330, -330, -332, -319, -435, -224, 35,
	-265, 235, 232, -410, 306, 307, -411, -425, 309, -427,
	82, -221, -300, -215, -503, -504, -365, -319, 109, -503,
	109, 82, -221, -300, -300, -268, -329, -300, -319, -319,
	-319, -319, -273, -272, -300, -275, 32, -276, -319, -319,
	-319, -319, 109, -319, 109, -246, 41, 48, 49, 50,
	-315, -315, 193, -249, 41, 421, 423, 424, -275, 98,
	98, 98, 98, 88, 88, 88, -315, -315, 98, 88,
	-321, 88, -505, 168, 45, 46, 98, 98, 98, 98,
	41, 88, -254, 41, 289, 293, 290, 291, 292, 88,
	98, 41, 98, 41, 98, 41, -319, 82, -506, -507,
	88, -539, -315, 355, -397, 124, -337, -544, 319, -159,
	489, 32, -189, 235, 232, -532, -388, -387, -300, -172,
	-172, -172, -172, 68, 68, 68, 73, 68, 73, 68,
	-291, -388, -174, -185, -321, 83, -554, -553, -552, -550,
	76, 243, 77, -351, 478, 482, 483, -384, -333, 88,
	-391, -193, 24, -218, -218, -456, 299, 300, 83, 156,
	-224, -285, 19, 155, -285, 117, -6, -130, -132, -345,
	-6, -345, 611, 367, 612, 88, 98, 98, -486, 442,
	437, 439, 109, -354, -473, -472, 61, -160, -183, -465,
	-509, -471, -319, 124, 124, 124, 634, 634, 634, 61,
	-160, -465, -193, -478, -177, -176, 44, -319, 98, 17,
	-381, -376, 143, 143, -319, 378, -392, 88, 400, 88,
	238, 634, 88, -306, -340, -345, 83, -232, 177, 176,
	-232, 35, 83, 83, -442, -442, -441, -444, -441, -232,
	-232, 83, 83, 24, 83, 83, 83, -345, 83, 83,
	156, -461, 498, -462, 572, -413, -413, -413, -413, -413,
	-413, -413, -413, -413, -413, -413, -413, -413, -413, -413,
	-413, -356, -355, 261, 443, 624, 624, 443, 624, 624,
	83, 156, -512, 156, -305, 88, -319, 88, 88, -208,
	-224, 83, 35, -211, -212, -213, -221, -214, -216, 35,
	-540, 92, -535, 88, -319, 89, -541, 92, 402, 154,
	353, 41, 403, 404, 419, 348, 98, 98, 409, -533,
	-319, -158, -543, 52, 124, 88, -218, -362, -309, 151,
	280, 327, -280, -279, -319, 88, -211, -160, -218, -211,
	-211, -160, -436, 326, 21, 98, 142, -186, 80, 155,
	-168, -219, -319, 143, 83, -283, -283, -283, -330, -436,
	-160, -422, 310, 82, -420, 82, -420, 109, 335, -428,
	-426, 261, -271, 45, 47, -224, -501, -319, -499, -501,
	-319, -499, -499, -365, -345, -271, -221, 242, 31, 232,
	-274, 332, 333, 338, -393, 305, 114, -393, 156, -175,
	156, -319, -241, -241, 31, 88, 88, -220, 83, 156,
	124, -540, -535, 124, -398, 88, -541, -545, 124, -151,
	92, -310, 156, -189, -189, -283, 156, 124, -191, -190,
	79, 80, -192, 79, -190, 68, 68, -283, -552, -551,
	24, -504, -504, -504, 83, 83, 15, -198, 41, -284,
	20, 21, 143, -284, 121, 119, 121, 121, -319, 83,
	83, -448, 603, -482, -484, 437, 21, 21, 15, 243,
	83, -465, -345, -345, -345, -465, -486, 45, 46, -376,
	-392, 422, -218, 156, 634, -222, -345, 83, -345, 83,
	88, 83, 88, -180, 21, 83, 156, 83, 83, 83,
	156, 83, 83, -345, 83, -512, 236, -160, 83, 156,
	-160, 88, -538, 413, 88, 88, 98, 41, 98, 154,
	405, -458, -151, -542, 92, 124, 633, 82, -315, -315,
	-315, -319, 83, 156, -315, -315, 83, 83, 83, -239,
	539, -437, 260, 98, 142, 98, 142, 98, -317, -168,
	-319, -283, -531, 155, -283, -437, -412, 311, 98, -341,
	82, -341, 82, -421, 308, 82, 83, 156, -319, -300,
	-236, -235, -233, 103, 114, 41, 391, -234, 92, 151,
	294, 297, 296, 272, 295, -263, -334, 79, 397, 332,
	333, -366, 603, 527, 245, 108, 109, 379, -335, 82,
	82, 80, 314, 82, 82, -501, 83, -271, -300, 41,
	-274, 41, 345, 305, -272, -319, 151, -241, 83, -507,
	88, -538, 88, -400, -543, 88, 88, -532, -180, -387,
	-471, -345, 82, -345, 82, 68, 11, 19, -338, -345,
	-353, 244, -6, 612, 367, -256, 604, 88, 21, 88,
	-480, 88, -388, 634, 634, 634, -448, -125, -253, -309,
	277, 83, 83, 83, -413, -413, -416, -415, -419, 443,
	306, 451, -353, 88, 88, 83, 83, -200, -224, -155,
	539, -239, -213, -155, 21, 539, 352, 41, 98, 41,
	406, 124, 104, 105, -307, -308, 88, -371, -373, -300,
	82, -241, -243, 88, -279, -338, -338, -237, -160, 35,
	-238, -277, -366, -124, -123, -237, 82, -438, 160, 98,
	142, 98, 98, -283, -283, -438, -427, 21, 83, -407,
	83, -407, 82, 124, -341, -426, -429, 61, -233, 103,
	-341, 88, -243, -244, 41, 293, 289, 124, 124, -245,
	41, 273, 274, -255, 82, 304, 15, 193, 82, 109,
	109, -218, -371, -371, -502, 334, 335, 336, 340, 338,
	339, 337, -502, -371, -371, 82, -394, -393, -341, -315,
	-315, 151, -542, -181, -184, -500, -319, 245, 21, 21,
	-319, -319, -303, 605, 98, 88, 439, -256, -449, 606,
	-476, -420, -241, 124, 83, -418, 116, 405, 409, -339,
	-342, 98, 100, 185, 154, 83, 83, 538, -156, 60,
	485, 88, 89, 400, 88, 89, 352, 88, 634, 156,
	124, 83, 156, -441, -345, -408, 261, -160, 156, -277,
	-309, -125, -408, -240, -278, -319, 88, -455, 168, 325,
	539, 98, 142, 98, -180, -439, 168, 325, -411, 83,
	83, 83, -407, 98, 83, -433, -430, 82, -277, 263,
	134, 88, 88, 98, 82, -466, 31, 88, -372, 82,
	83, 83, 83, 83, -371, 98, -241, -315, 83, 83,
	156, 82, 21, -303, 88, -485, 442, -479, -477, 437,
	438, 439, 440, 88, -417, -418, 409, -339, -342, 601,
	449, 449, 449, -202, -319, 304, 422, -308, 88, -374,
	-373, -175, 83, -409, 313, 21, -277, -315, -409, 83,
	156, -315, -315, 325, 98, 142, 98, -181, 325, -423,
	312, 83, -433, -277, -432, -431, 311, 264, 82, 83,
	-345, -357, -315, 83, -258, -257, 535, -371, -374, 80,
	-374, 80, -374, 80, -374, 80, 83, -241, -319, 245,
	-304, -319, -480, -487, 243, -483, -484, 441, -477, 21,
	439, 21, 21, -126, 156, 113, 450, 450, 450, -201,
	35, 444, 378, -375, 251, 345, 346, 92, 539, 332,
	333, -175, 21, -410, -241, -278, -338, -338, 98, 98,
	83, 156, -319, 260, 82, -352, -346, -345, 260, 83,
	-319, -262, -260, -261, 79, 456, 302, 303, 83, -502,
	-502, -502, -502, -263, 83, 156, -494, 82, 98, -482,
	-481, -483, 21, -480, 21, -480, -480, 446, -417, 88,
	-315, -315, 88, 88, 331, -300, 82, -422, -431, -430,
	-352, 83, 156, -393, -261, 79, -260, 79, 16, 15,
	-374, -374, -374, -374, -319, -498, 31, 83, -493, -492,
	-301, -488, -319, 442, 443, 88, -480, 124, -572, -571,
	623, 98, 98, -319, -407, -412, 83, -346, -259, 299,
	300, 31, 168, -259, -497, -496, -495, 83, 156, 155,
	88, 88, 83, -427, 103, 41, 301, 156, 124, -492,
	-319, -496, 41, -345, 155, -319,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	0, 268, 269, 270, 875, 876, 877, 878, 879, 880,
	881, 0, 0, 0, 0, 0, 633, 634, 0, 599,
	0, 0, 0, 0, 0, 0, 485, 486, 487, 488,
	489, 490, 491, 492, 493, 494, 495, 496, 497, 498,
	499, 500, 501, 502, 503, 504, 505, 506, 507, 508,
	509, 510, 511, 512, 513, 514, 515, 516, 369, 370,
	371, 372, 373, 374, 375, 376, 0, 293, 289, 214,
	215, 216, 217, 218, 300, 301, 462, 0, 0, 0,
	0, 716, -2, 60, 0, 282, 0, 273, 273, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, -2, 646, 0, 600, 601, 602, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	353, 354, 355, 349, 350, 352, 351, -2, 0, 646,
	0, 0, 0, 724, 0, 0, 0, 0, 0, 767,
	789, 23, 0, 7, 9, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 0, 0, 19, 0, 19, 0,
	0, 0, 1290, 1291, 1292, 1293, 2071, 2041, -2, 1814,
	1791, 1966, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
	2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118,
	2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128,
	2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138,
	2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148,
	2149, 2150, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755,
	1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765,
	1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
	1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
	1786, 1787, 1788, 1789, 1790, 1792, 1793, 1794, 1795, 1796,
	1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
	1807, 1808, 1809, 1810, 1811, 1812, 1813, 1815, 1816, 1817,
	1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827,
	1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837,
	1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847,
	1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857,
	1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
	1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877,
	1878, 1879, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888,
	1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898,
	1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
	1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918,
	1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928,
	1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938,
	1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948,
	1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
	1959, 1960, 1961, 1962, 1963, 1964, 1965, 1967, 1968, 1969,
	1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
	1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989,
	1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, -2, 1999,
	2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
	2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
	2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
	2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039,
	2040, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, -2, -2, -2, 2060,
	2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070,
	2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081,
	2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 0,
	266, 264, 1761, 1791, 1814, 1868, 1879, 1880, 1914, 1966,
	1998, 2041, 2057, 2058, 2059, 2071, 0, 0, 899, 0,
	694, 0, 0, 699, 1236, 694, 294, 635, 636, 724,
	750, 597, 0, 331, 0, 1805, 335, 2048, 0, 0,
	0, 594, 325, 326, 327, 328, 329, 330, 0, 0,
	874, 0, 0, 321, 0, 288, 1870, 2070, 0, 0,
	0, 0, 0, 157, 1017, 159, 1019, 163, 171, 0,
	0, 0, 176, 177, 180, 181, 182, 183, 184, 0,
	188, 0, 190, 193, 0, 195, 196, 0, 199, 200,
	201, 0, 211, 212, 213, 1020, 1021, 1022, -2, 88,
	897, 1719, 1606, 0, 1613, 1626, 1637, 1370, 1371, 1372,
	1373, 0, 0, 0, 0, 0, 0, 1381, 1382, 0,
	1410, 2105, 2146, 2147, 0, 1390, 1391, 1392, 1393, 1394,
	1395, 97, 109, 110, 1659, 1660, 1661, 1662, 1663, 1664,
	1665, 0, 1667, 1668, 1669, 1577, 1357, 1290, 0, 2114,
	0, 2136, 2141, 2142, 2143, 2144, 2135, 0, 0, 1562,
	0, 1552, 0, 0, -2, -2, 0, 0, 1939, -2,
	2148, 2149, 2150, 2111, 2132, 2140, 2115, 2116, 2139, 2107,
	2108, 2109, 2102, 2103, 2104, 2106, 2118, 2120, 2131, 0,
	2127, 2137, 2138, 2046, 0, 0, 0, 0, 0, 2087,
	111, 112, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1573,
	-2, -2, 1576, -2, 1579, -2, -2, -2, -2, 1584,
	1585, -2, 1587, -2, -2, -2, -2, -2, -2, -2,
	1564, 1565, 1566, 1567, 1556, 1557, 1558, 1559, 1560, 1561,
	-2, -2, -2, 750, 825, 0, 750, 0, 725, 772,
	775, 778, 781, 728, 0, 0, 61, 62, 0, 283,
	284, 272, 274, 0, 278, 0, 271, 1053, 0, 0,
	0, 0, 1053, 1053, 1053, 1053, 1053, 0, 1053, 0,
	0, 0, 0, 0, 1053, 0, 932, 1024, 1025, 1026,
	1051, 1052, 1124, 0, 0, 0, 651, 647, 648, 649,
	650, 738, 0, 740, 743, 574, 574, 798, 520, 0,
	0, 0, 574, 0, 534, 526, 0, 0, 0, 574,
	0, 0, 745, 745, 0, 577, 584, 574, 574, -2,
	574, 574, 571, 574, 0, 0, 1065, 540, 541, 542,
	526, 526, 545, 546, 547, 557, 558, 585, 1743, 0,
	0, 462, 462, 0, 462, 0, 462, 462, 462, 653,
	1909, 1812, 1885, 1870, 2070, 0, 239, 1939, 244, 0,
	1813, 1832, 0, 0, 1850, 0, -2, 0, 310, 750,
	0, 0, 724, 0, 0, 0, 0, 0, 462, 462,
	462, 462, 462, 1123, 462, 462, 462, 462, 462, 0,
	0, 0, 462, 462, 462, 0, 0, 790, 791, 786,
	787, 788, 792, 793, 5, 6, 19, 0, 0, 0,
	0, 0, 0, 67, 66, 0, 1720, 1738, 1672, 1673,
	1674, 1725, 1676, 1729, 1729, 1729, 1729, 1705, 1706, 1707,
	1708, 1709, 1710, 1711, 1712, 1713, 1729, 1729, 0, 0,
	1718, 1696, 1727, 1727, 1727, 1725, 1722, 1677, 1678, 1679,
	1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689,
	1690, 1732, 1732, 1735, 1735, 1732, 0, 367, 365, 366,
	1602, 0, 0, 0, 0, 694, 698, 0, 0, 0,
	750, -2, 0, 0, 598, 332, 1294, 0, 0, 336,
	0, 337, 0, 0, 0, 356, 0, 359, 344, 345,
	346, 340, 0, 137, 0, 323, 324, 0, 0, 290,
	0, 0, 0, 463, 0, 0, 0, 0, 0, 0,
	168, 164, 172, 175, 185, 192, 0, 204, 206, 209,
	165, 173, 178, 179, 186, 207, 166, 169, 170, 174,
	208, 210, 167, 187, 191, 205, 189, 194, 197, 198,
	203, 0, 138, 0, 0, 0, 0, 0, 1612, 0,
	0, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 1606, 0,
	0, 1376, 1377, 1378, 1379, 0, 1383, 0, 1411, 0,
	0, 0, 0, 0, 1666, 1670, 0, 1602, 1602, 0,
	1602, 1598, 0, 0, 0, 0, 0, 0, 1602, 1535,
	0, 0, 1537, 1553, 0, 0, 1539, 1540, 0, 1543,
	1544, 1602, 0, 1602, 1548, 1602, 1602, 1602, 1531, 1532,
	0, 1598, 1598, 1598, 1598, 0, 0, 1598, 1598, 1598,
	1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,
	1598, 0, 0, 0, 0, 745, 0, 751, 0, -2,
	0, 769, 771, 773, 774, 776, 777, 779, 780, 782,
	783, 730, 0, 0, 63, 0, 0, 0, 0, 276,
	0, 281, 0, 0, 0, 896, 0, 0, 1053, 1053,
	1053, 933, 0, 0, 0, 0, 0, 0, 0, 0,
	1053, 1053, 1053, 1053, 0, 1071, 0, 0, 0, 653,
	652, 0, 739, 0, 0, 798, 0, 0, 518, 519,
	0, 0, 526, 574, 574, 532, 533, 528, 527, 580,
	581, 577, 0, 577, 577, 798, 0, 551, 552, 553,
	574, 574, 559, 746, 0, 560, 561, 577, 0, 582,
	583, 798, 0, 0, 798, 798, 0, 569, 570, 572,
	574, 0, 0, 1053, 0, 590, 528, 528, 1744, 1745,
	0, 0, 1062, 0, 0, 0, 593, 0, 0, 0,
	0, 654, 219, 222, 0, 225, 0, 1909, 0, 1909,
	0, 232, 0, 0, 0, 0, 0, 0, 262, 263,
	0, 0, 0, 0, 253, 256, 1230, 1231, 1014, 1015,
	257, 258, 302, 303, 0, 745, 768, 770, 764, 765,
	766, 0, 0, 0, 0, 0, 0, 0, 0, 462,
	0, 0, 0, 0, 0, 629, 0, 912, 631, 0,
	0, 0, 0, 806, 800, 802, 869, 97, 806, 8,
	84, 81, 0, 19, 0, 0, 19, 19, 0, 19,
	267, 0, 1741, 1739, 1740, 1675, 1726, 0, 1701, 0,
	1702, 1703, 1704, 1714, 1715, 0, 0, 1697, 0, 1698,
	1699, 1700, 1691, 0, 1692, 1693, 0, 1694, 1695, 265,
	364, 0, 0, 1603, 900, 0, 672, 686, 667, 0,
	675, 0, 0, 1237, 0, 0, 0, 655, 686, 657,
	0, 675, 745, 722, 0, 700, 0, 0, 333, 0,
	341, 338, 0, 342, 0, 0, 358, 360, 361, 362,
	347, 348, 595, 319, 320, 311, 312, 313, 314, 315,
	316, 317, 318, 0, 322, 107, 0, 291, 292, 0,
	0, 0, 151, 152, 153, 154, 155, 156, 158, 142,
	618, 620, 1006, 1018, 0, 1009, 0, 161, 202, 134,
	0, 0, 0, 1607, 1608, 1609, 1610, 1611, 1616, 0,
	1618, 1620, 1622, 1624, 0, 1642, -2, -2, 1358, 1359,
	1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369,
	1627, 1640, 1641, 0, 0, 0, 0, 0, 0, 1638,
	1638, 1633, 0, 1396, 1232, 1233, 1374, 0, 0, 1408,
	1412, 0, 0, 0, 0, 0, 98, 1597, 1502, 1503,
	1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513,
	1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523,
	1524, 1525, 1526, 1527, 1528, 1529, 1530, 0, 0, 1606,
	0, 0, 0, 1599, 1600, 0, 0, 0, 1490, 0,
	0, 1496, 1497, 1498, 0, 681, 0, 1563, 1536, 1554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 824, 826, 0,
	690, 692, 693, 719, 700, 726, 0, 0, 0, 59,
	64, 0, 1091, 285, 286, 0, 0, 280, 0, 0,
	0, -2, 0, 0, 0, 0, 0, 948, 949, 460,
	1000, 0, 0, 0, 1016, 1041, 1049, 0, 0, 0,
	0, 0, 1097, 934, 939, 940, 941, 935, 936, 942,
	943, 0, 741, 0, 0, 838, 517, 575, 576, 799,
	523, 1870, 528, 798, 798, 535, 529, 536, 579, 537,
	538, 539, 577, 798, 798, 747, 574, 577, 562, 578,
	577, 565, 566, 0, 573, 586, 591, 587, 0, 589,
	543, 544, 1099, 743, 379, 380, 381, 383, 0, 431,
	431, 431, 414, 431, 0, 0, 402, 1746, 0, 0,
	0, 0, 411, 1746, 0, 0, 1746, 1746, 1746, 1746,
	1746, 1746, 1746, 0, 0, 1746, 1746, 1746, 1746, 1746,
	1746, 1746, 1746, 1746, 1746, 1746, 0, 1746, 1746, 1746,
	1746, 1746, 1216, 1746, 0, 1063, 421, 422, 423, 424,
	429, 430, 0, 457, 0, 0, 947, 0, 460, 0,
	986, 811, 0, 812, 813, 809, 840, 864, 864, 0,
	864, 844, 1236, 0, 0, 230, 231, 220, 0, 221,
	0, 233, 234, 0, 236, 237, 238, 245, 1812, 1885,
	240, 242, 0, 0, 246, 259, 260, 261, 0, 0,
	251, 252, 0, 0, 305, 306, 308, 0, 700, 1066,
	1067, 1068, 615, 1234, 616, 617, 621, 0, 0, 624,
	625, 626, 627, 628, 914, 0, 0, 993, 994, 995,
	798, 0, 807, 0, 803, 870, 0, 872, 0, 798,
	0, 82, 19, 0, 75, 72, 0, 0, 0, 0,
	0, 1721, 1671, 1742, 0, 0, 0, 1723, 0, 0,
	0, 0, 0, 65, 702, 662, 0, 666, 683, 0,
	687, 0, 0, 679, 671, 676, 0, 0, 696, 663,
	0, 0, 0, 0, 656, 0, 0, 661, 700, 0,
	723, 752, 753, 756, 1295, 0, 343, 339, 357, 0,
	462, 0, 0, 0, 145, 1003, 0, 146, 150, 140,
	0, 0, 0, 1008, 0, 1005, 1010, 0, 160, 0,
	0, 135, 136, 1082, 1091, 0, 0, 0, 1617, 1619,
	1621, 1623, 1625, 0, 1628, 1638, 1638, 1634, 0, 1629,
	0, 1631, 0, 1607, 1380, 0, 1413, 0, 0, 0,
	0, 0, 0, 0, 0, 1480, 1481, 0, 0, 1485,
	0, 1487, 1488, 1489, 1491, 0, 0, 0, 1495, 0,
	1534, 1555, 1538, 1541, 0, 1545, 0, 1547, 1549, 1550,
	1551, 0, 750, 750, 0, 0, 1452, 1452, 1452, 0,
	0, 0, 0, 1452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1397, 0, 1398, 1399, 0, 0,
	0, 827, 720, 0, 0, 0, 0, 0, 1089, 0,
	287, 275, 277, 0, 0, 1054, 0, 0, 902, 903,
	905, 0, 908, 909, 910, 914, 743, 0, 743, 959,
	1746, 464, 0, 0, 1002, 0, 975, 0, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 1101, 0, 0,
	0, 640, 644, 23, 744, 0, 521, 0, 522, 574,
	530, 531, 798, 554, 555, 0, 0, 798, 574, 574,
	577, 0, 588, 1101, 0, 0, 1062, 1167, 1135, 392,
	0, 1251, 1252, 432, 0, 1258, 1267, 1053, 1327, 0,
	1267, 0, 0, 1269, 1270, 0, 0, 0, 0, 415,
	416, 0, 401, 0, 0, 0, 0, 0, 0, 400,
	0, 0, 442, 0, 0, 0, 0, 0, 1747, 1746,
	1746, 0, 409, 410, 0, 413, 0, 0, 0, 0,
	0, 0, 0, 0, 1746, 1746, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1207, 0, 0,
	0, 0, 0, 0, 0, 1222, 1223, 959, 1746, 0,
	0, 0, 464, 973, 991, 0, 0, 0, 0, 0,
	0, 831, 0, 0, 830, 0, 0, 0, 0, 0,
	743, 865, 0, 867, 868, 842, -2, 0, 811, 847,
	1602, 223, 224, 0, 0, 229, 247, 249, 0, 0,
	0, 248, 250, 254, 255, 304, 307, 309, 762, 0,
	0, 1125, 0, 915, 916, 918, 919, 0, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1796, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 913, 632, 796, 801, 808, 871, 873,
	98, 804, 796, 0, 85, 19, 84, 76, 77, 0,
	19, 0, 0, 0, 0, 1731, 1730, 1716, 0, 1717,
	1728, 1733, 0, 1736, 0, 368, 706, 0, 0, 686,
	688, 0, 0, 686, 0, 0, 695, 0, 0, 0,
	0, 0, 0, 0, 0, 686, 762, 702, 0, 759,
	757, 758, 0, 0, 596, 108, 363, 0, 0, 0,
	0, 0, 619, 0, 1007, 142, 0, 0, 162, 0,
	0, 0, 1091, 1086, 1601, 1630, 1632, 0, 1639, 1635,
	1375, 1384, 1409, 0, 0, 1415, 1427, 1427, 0, 0,
	0, 1418, 1729, 1729, 1421, 1725, 1727, 1725, 1427, 1427,
	0, 99, 0, 0, 1486, 0, 0, 0, 682, 0,
	0, 0, 1448, 1450, 1452, 1452, 1459, 1453, 1460, 1461,
	1452, 1452, 1452, 1452, 1466, 1452, 1452, 1452, 1452, 1452,
	1452, 1452, 1452, 1452, 1452, 1446, 0, 0, 1660, 1661,
	691, 0, 0, 733, 734, 735, 736, 737, 0, 0,
	54, 55, 1091, 0, 279, 56, 57, 0, 0, 0,
	907, 0, 0, 0, 1244, 0, 963, 960, 961, 962,
	0, 997, 465, 466, 467, 468, 0, 0, 0, 1001,
	0, 986, 968, 0, 0, 0, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, -2, 1057, 0, 0, 0, 1244, 1076,
	0, 0, 1244, 1244, 0, 1109, 0, 1098, 694, 0,
	-2, 0, 0, 642, 0, 0, 839, 524, 798, 548,
	748, 749, 563, 798, 798, 574, 592, 1109, 1100, 0,
	382, 431, 0, 1155, 0, 0, 1161, 0, 1168, 385,
	0, 433, 0, 1257, 1284, 1268, 1284, 1328, 1284, 1284,
	1053, 0, 433, 0, 0, 403, 439, 0, 0, 0,
	0, 0, 399, 436, 756, 386, 388, 389, 390, 440,
	441, 443, 0, 445, 446, 405, 417, 418, 419, 420,
	0, 0, 0, 412, 425, 426, 427, 428, 387, 1184,
	1185, 1186, 1189, 1190, 1191, 1192, 0, 0, 1195, 1196,
	1197, 1198, 1199, 1281, 1282, 1283, 1200, 1201, 1202, 1203,
	1204, 1205, 1206, 1224, 1225, 1226, 1227, 1228, 1229, 1208,
	1209, 1210, 1211, 1212, 1213, 1214, 1215, 0, 0, 1219,
	0, 963, 0, 0, 0, 0, 997, 975, 0, 982,
	0, 987, 988, 0, 0, 664, 798, 297, 0, 834,
	828, 0, 817, 832, 833, 820, 0, 822, 0, 818,
	819, 798, 810, 841, 866, 843, 846, 848, 849, 855,
	0, 0, 0, 0, 226, 227, 228, 235, 0, 484,
	241, 718, 0, 1235, 622, 623, 1126, 1127, 630, 0,
	920, 794, 0, 0, 794, 80, 83, 0, 78, 0,
	0, 0, 0, 70, 68, 1724, 0, 0, 708, 122,
	0, 0, 0, 684, 0, 689, 686, 670, 680, 669,
	677, 678, 697, 0, 0, 0, 1238, 1239, 1240, 686,
	660, 659, 721, 706, 754, 755, 0, 1296, 334, 0,
	1004, 142, 147, 148, 149, 143, 141, 1011, 0, 1013,
	0, 1084, 0, 0, 1636, 1414, 1385, 1416, 1428, 1429,
	1417, 0, 1387, 1388, 1419, 1420, 1422, 1423, 1424, 1425,
	1426, 1389, 1482, 0, 1484, 1492, 1493, 0, 1542, 1546,
	0, 0, 0, 0, 0, 1457, 1458, 1462, 1463, 1464,
	1465, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 750, 1447, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 1090, 1092, 58, 895, 898, 904,
	906, 0, 0, 0, 1245, 1246, 1248, 1249, 1250, 0,
	931, 0, 0, 951, 952, 953, 965, 0, 0, 0,
	470, 471, 0, 0, 0, 483, 479, 480, 481, 461,
	996, 982, 971, 0, 0, 981, 0, 1058, 1746, 1746,
	1746, 0, 0, 1169, 1746, 1746, 0, 1078, 1080, 0,
	0, 1173, 1112, 0, 0, 1103, 0, 864, 0, 0,
	798, 641, 644, 645, 742, 525, 567, 564, 798, 1112,
	378, 1133, 0, 0, 0, 0, 0, 1165, 0, 0,
	1137, 0, 404, 434, 0, -2, 0, 1285, 0, 1271,
	1285, 0, 0, 1284, 0, 393, 433, 0, 0, 0,
	447, 451, 452, 0, 449, 1323, 0, 450, 0, 438,
	0, 444, 1187, 1188, 0, 1193, 1194, 0, 1218, 0,
	0, 453, 0, 0, 0, 454, 459, 968, 0, 985,
	0, 992, 0, 989, 990, 750, 0, 0, 814, 835,
	0, 0, 815, 0, 816, 821, 823, 296, 850, 0,
	0, 852, 853, 854, 845, 243, 763, 917, 0, 784,
	0, 0, 805, 785, 0, 19, 0, 0, 73, 1734,
	1737, 710, 0, 707, 123, 0, 0, 0, 0, 674,
	685, 668, 0, 0, 0, 658, 708, 760, 761, 144,
	139, 1012, 1094, 0, 1085, 0, 0, 1494, 0, 1452,
	1449, 1452, 1451, 1443, 0, 1400, 0, 1402, 1403, 1404,
	0, 1406, 1407, 0, 729, 0, 0, 937, 1173, 0,
	937, 964, 950, 0, 998, 999, 0, 472, 473, 0,
	476, 482, 966, 967, 0, 0, 979, 0, 0, 0,
	0, 1050, 1064, 0, 0, 0, -2, 0, -2, 1075,
	0, 1118, 0, 1110, 0, 1102, 0, 1105, 798, 798,
	-2, 638, 643, 0, 568, 1118, 1135, 0, 1156, 0,
	0, 0, 0, 0, 0, 0, 1136, 0, 1149, 435,
	1286, -2, 1299, 1301, 0, 1063, 1304, 1305, 0, 0,
	0, 0, 0, 0, 1349, 1313, 0, 0, 1317, 1318,
	1319, 0, 0, 1322, 0, 1654, 1655, 0, 1326, 0,
	0, 0, 0, 0, 0, 0, 1265, 394, 395, 0,
	397, 398, 1746, 1324, 437, 391, 1746, 407, 1217, 1220,
	1221, 458, 455, 456, 971, 974, 983, 665, 745, 298,
	299, 836, 0, 829, 859, 856, 0, 0, 921, 795,
	797, 74, 79, 0, 0, 712, 0, 709, 0, 703,
	705, 133, 673, 1241, 1242, 1243, 710, 95, 125, 0,
	0, 1386, 1483, 1533, 1455, 1456, 0, 1444, 0, 1438,
	1439, 1440, 1445, 0, 0, 732, 727, 0, 923, 930,
	944, 1069, 1247, 929, 0, 0, 469, 474, 0, 477,
	478, 0, 969, 970, 0, 977, 0, 0, 1037, 1725,
	0, 1059, 1060, 1061, 1170, 1171, 1172, 1128, 1077, 0,
	-2, 1181, 0, 1073, 1094, 1128, 0, 1106, 0, 1113,
	0, 1111, 1104, 750, 639, 1115, 384, 1167, 1157, 0,
	1159, 0, 0, 0, 0, 1138, -2, 0, 1300, 1302,
	1303, 1306, 1307, 1308, 1354, 1355, 1356, 0, 0, 1311,
	1351, 1352, 1353, 1312, 0, 0, 0, 0, 0, 1652,
	1653, 1347, 0, 0, 1272, 1274, 1275, 1276, 1277, 1278,
	1279, 1280, 1273, 0, 0, 0, 1264, 1266, 396, 0,
	0, 1746, 984, 295, 0, 0, 860, 862, 857, 858,
	69, 71, 86, 0, 711, 124, 0, 712, 87, 0,
	116, 0, 1095, 0, 1454, 1441, 0, 0, 0, 0,
	0, 1656, 1657, 1658, 0, 1401, 1405, 0, 0, 945,
	946, 954, 955, 0, 957, 958, 475, 972, 976, 979,
	0, 1028, 0, 756, 0, 1130, 0, 1079, 1062, 1183,
	1746, 1081, 1130, 0, 1175, 1746, 1746, 1096, 0, 1108,
	0, 1120, 0, 1114, 745, 377, 0, 1117, 1153, 1158,
	1160, 1162, 0, 1166, 1164, 1139, -2, 0, 1147, 0,
	0, 1309, 1310, 0, 0, 1552, 1746, 0, 1342, 0,
	1028, 1028, 1028, 1028, 0, 448, 406, 0, 837, 851,
	0, 0, 0, 701, 96, 113, 0, 126, 127, 0,
	0, 0, 0, 1087, 0, 1430, 0, 0, 0, 1434,
	1435, 1436, 1437, 0, 922, 0, 956, 978, 980, 1027,
	1038, 1039, 756, 1072, 0, 1167, 1182, 0, 1074, 1174,
	0, 0, 0, 1107, 1119, 0, 1122, 637, 1116, 1134,
	0, 1163, 1140, 1148, 0, 1143, 0, 0, 0, 1350,
	0, 1316, 0, 1321, 1330, 1343, 0, 0, 1253, 0,
	1255, 0, 1259, 0, 1261, 0, 0, 408, 861, 863,
	0, 714, 704, 100, 0, 122, 119, 0, 128, 0,
	0, 0, 0, 1083, 0, 0, 1431, 1432, 1433, 0,
	924, 925, 938, 1029, 1746, 1746, 0, 0, 0, 1035,
	1036, 1040, 0, 1155, 1187, 1176, 1177, 1178, 1121, 1154,
	1142, 0, -2, 1150, 0, 0, 1604, 1614, 1615, 1314,
	1320, 1329, 1331, 1332, 0, 1344, 1345, 1346, 1348, 1028,
	1028, 1028, 1028, 1263, 713, 0, 89, 0, 0, 117,
	118, 120, 0, 129, 0, 131, 132, 0, 1442, 926,
	0, 0, 1032, 1033, 0, 1131, 0, 1133, 1144, -2,
	0, 1152, 0, 1315, 1333, 0, 1334, 0, 0, 0,
	1254, 1256, 1260, 1262, 715, 1093, 0, 101, 0, 103,
	105, 106, 1287, 114, 115, 121, 130, 0, 911, 927,
	0, 1030, 1031, 1034, 0, 1135, 1151, 1605, 1335, 1337,
	1338, 0, 0, 1336, 90, 91, 0, 102, 0, 0,
	1088, 928, 1132, 1129, 1339, 1341, 1340, 0, 0, 104,
	1288, 92, 93, 94, 0, 1289,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 115, 3, 3, 3, 146, 138, 3,
	82, 83, 143, 141, 156, 142, 155, 144, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 635, 632,
	125, 124, 126, 3, 636, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 148, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 633, 137, 634, 149,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 116, 117, 118, 119, 120, 121, 122, 123, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 139,
	140, 145, 147, 150, 151, 152, 153, 154, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:812
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:819
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:825
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:833
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:839
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:843
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:858
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:862
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:873
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:877
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:910
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:919
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option)
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:928
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option)
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:939
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Obeject:     yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:949
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:959
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:972
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:992
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:998
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1005
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1013
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1019
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1028
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1038
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1046
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1054
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1062
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1072
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1080
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1090
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1097
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1106
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1116
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1120
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1126
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1130
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1136
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1145
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1155
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1159
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1165
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1174
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1178
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1184
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1205
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1218
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1225
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1229
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1235
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1239
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1245
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1252
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1260
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1264
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1278
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1284
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1290
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin(), yyDollar[5].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1297
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1301
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1305
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1311
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1320
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1331
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1335
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1341
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1345
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1351
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1355
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1361
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1385
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1404
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1408
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1412
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1417
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1421
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1430
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1440
		{
			yyVAL.str = ""
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1447
		{
			yyVAL.str = yyDollar[3].str
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1452
		{
			yyVAL.str = "\n"
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1459
		{
			yyVAL.str = yyDollar[3].str
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1464
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1468
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1496
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1500
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1506
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1514
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1534
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1553
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1578
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1582
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1586
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1591
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1595
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1601
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1614
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1625
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1638
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1642
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1652
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1665
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1678
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1684
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1690
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1697
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1705
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1714
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1718
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1722
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1726
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1730
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1734
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1741
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1745
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1751
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1758
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1767
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1771
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1777
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1781
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1785
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1789
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1793
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1797
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1801
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1805
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1809
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1813
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1817
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1821
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1825
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1829
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1833
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1837
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1841
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1845
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1849
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1853
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1857
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1861
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1865
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1869
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1873
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1877
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1881
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1885
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1889
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1893
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1897
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1901
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1905
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1909
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1913
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1917
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1921
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1925
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1929
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1933
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1937
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1941
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1945
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1949
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1953
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1957
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1961
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1965
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1969
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1973
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1977
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1990
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1997
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2004
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2014
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2018
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2024
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2031
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2039
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2043
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2047
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2051
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2057
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2061
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2067
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2074
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2081
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2090
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2120
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2124
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2128
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2134
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2140
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2144
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2151
		{
			yyVAL.str = yyDollar[3].str
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2157
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2161
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2167
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2175
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2184
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2193
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2201
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2209
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2232
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2255
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2262
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2269
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2277
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2284
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2291
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2300
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2304
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2308
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2314
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2318
		{
			yyVAL.str = yyDollar[1].str
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2324
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2328
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2334
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2338
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2349
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2355
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2360
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2364
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2368
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2372
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2376
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2380
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2384
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2388
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2392
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2398
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2402
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2406
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2410
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2415
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2420
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2426
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2439
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2452
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2465
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2478
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2494
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2501
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2512
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2523
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2527
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2533
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2543
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2549
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2553
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2559
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2565
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2569
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2573
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2577
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2583
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2596
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2602
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2606
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2612
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2616
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2622
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2628
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2639
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2645
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2649
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2653
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2657
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2661
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2665
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2673
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2681
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2691
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2703
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2707
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2715
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2723
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2762
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2766
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2772
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2778
		{
			yyVAL.str = yyDollar[1].str
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2783
		{
			yyVAL.str = "true"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2784
		{
			yyVAL.str = "false"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2785
		{
			yyVAL.str = yyDollar[1].str
		}
	case 363:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2790
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2796
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2805
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2812
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2820
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2824
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2847
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2870
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2880
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2887
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2896
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2900
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2906
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2910
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2934
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2944
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2960
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2978
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2982
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2988
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2992
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2998
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3004
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3012
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3022
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3030
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3040
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3050
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3060
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3067
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3071
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3075
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3079
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3083
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3090
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3096
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3100
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3104
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3108
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3112
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3116
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3120
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3124
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3129
		{
			yyVAL.str = ""
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3160
		{
			yyVAL.str = ""
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3164
		{
			yyVAL.str = string("COLUMN")
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3169
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3175
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3181
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3189
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3193
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3199
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3207
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3214
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3220
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3226
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3232
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3238
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3245
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3252
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3260
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3266
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3278
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3284
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3292
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3296
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3303
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3321
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3335
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3349
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3362
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3368
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3379
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3392
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3396
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3404
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3408
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3413
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3417
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3433
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3437
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3441
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3445
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3452
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3456
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3460
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3464
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3471
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3475
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3482
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3486
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3490
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3494
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3501
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3508
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3514
		{
			yyVAL.item = nil
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3519
		{
			yyVAL.item = nil
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3562
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3571
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3579
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3587
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3591
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3595
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				&tree.Role{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3606
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3610
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3616
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3621
		{
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3625
		{
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3630
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3640
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3650
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3658
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3664
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3670
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3676
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3682
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3688
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3694
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3703
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3707
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3711
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3715
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3719
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3723
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3727
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3731
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3737
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3746
		{
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3748
		{
		}
	case 554:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3757
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3767
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3776
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3780
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3784
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3790
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3796
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3802
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3808
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3817
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3827
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3839
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3843
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3849
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3861
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3875
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3881
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3887
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3894
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3898
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3903
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3907
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3911
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3916
		{
			yyVAL.str = ""
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3920
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3926
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3939
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3943
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3949
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3954
		{
			yyLOCAL = &tree.ShowCreateView{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3958
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3962
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3968
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3974
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3978
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3984
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3990
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3994
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3998
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4004
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4008
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4034
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4042
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4050
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4058
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4062
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4068
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4081
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4089
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4098
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4104
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4112
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4120
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4128
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4134
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4142
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4148
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4156
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4162
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4172
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4177
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4184
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4200
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4213
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4224
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4228
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4234
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4239
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4246
		{
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4248
		{
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4251
		{
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4260
		{
		}
	case 653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4264
		{
		}
	case 655:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4269
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4278
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4285
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4291
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4299
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4306
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4313
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4333
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4341
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4351
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4355
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4361
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4368
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4374
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4382
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4389
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4396
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4415
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4419
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4423
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4428
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4432
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4436
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4442
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4451
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4455
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4461
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4465
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4471
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4475
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4481
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4486
		{
		}
	case 688:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4490
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4497
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4501
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4508
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4513
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4517
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4523
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4527
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4533
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4537
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4542
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4546
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4559
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4570
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4581
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4603
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4626
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4634
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4643
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4647
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4660
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4664
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4669
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4673
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4680
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4685
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4692
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4698
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4702
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4706
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4710
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4714
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4718
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4723
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4727
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4733
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4743
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4758
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4762
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4776
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4780
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4786
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4795
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4799
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4803
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4807
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4811
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4817
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4824
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4833
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4837
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4843
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4851
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4855
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4860
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4864
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4870
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4874
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4878
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4883
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4887
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4893
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4899
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4903
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:4909
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4914
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4918
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4922
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4927
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4931
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4935
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4940
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4944
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4952
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4956
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4960
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4974
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4978
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4988
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4998
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5008
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5020
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5028
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5036
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5045
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5053
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5061
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5069
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5077
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5085
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5093
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5101
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5109
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5119
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5130
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5144
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5148
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5152
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5157
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5161
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5165
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5174
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5178
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5183
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5187
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5192
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5196
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5202
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5206
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5212
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5216
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5221
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5225
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5230
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5238
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5244
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5252
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5260
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5270
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5276
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5285
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5294
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5303
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5313
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5317
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5327
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5331
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5335
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5339
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 824:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5345
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5355
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5359
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5365
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5371
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5375
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5381
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5387
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5391
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5395
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5401
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5405
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5411
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5415
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5421
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5425
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5431
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5435
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5445
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5458
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5464
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5470
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: tree.NewCStrUseOrigin(yyDollar[1].cstrUnion().Origin(), yylex.(*Lexer).useOrigin),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5484
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5495
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5502
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5506
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5512
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5522
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5526
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5530
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5535
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5539
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5543
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5547
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5552
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5556
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5560
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5564
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5568
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5573
		{
			yyVAL.str = ""
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5577
		{
			yyVAL.str = yyDollar[1].str
		}
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5581
		{
			yyVAL.str = yyDollar[2].str
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5587
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 869:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5593
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5597
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5601
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5605
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5609
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5615
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 895:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5655
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5668
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5674
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 898:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5680
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5693
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5698
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5704
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5711
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5715
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5721
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5727
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5732
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5736
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5740
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5744
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5751
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5784
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5789
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5795
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5802
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5806
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5812
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5818
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5822
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5826
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5832
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5838
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5844
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5848
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5854
		{
			yyVAL.str = ""
		}
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5861
		{
			yyVAL.str = yyDollar[2].str
		}
	case 929:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5867
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5882
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5899
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5916
		{
			yyVAL.str = yyDollar[1].str
		}
	case 933:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5920
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 934:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5926
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 935:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5930
		{
			yyVAL.str = "DEFINER = "
		}
	case 936:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5934
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 937:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5939
		{
			yyVAL.str = ""
		}
	case 938:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:5943
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 944:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5957
		{
			yyVAL.str = ""
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5965
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5971
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5976
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:5982
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5995
		{
			var Str = yyDollar[1].str
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6000
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6005
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6011
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6018
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6025
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6032
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6039
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6047
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6053
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6060
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6067
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6075
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6081
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6090
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6107
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6124
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6142
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6148
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6155
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6163
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6169
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6177
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6183
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6191
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6197
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6206
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6210
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6215
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6219
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6226
		{
			yyVAL.str = yyDollar[3].str
		}
	case 982:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6231
		{
			yyVAL.str = ""
		}
	case 983:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6235
		{
			yyVAL.str = yyDollar[2].str
		}
	case 984:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6241
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6254
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var comment = yyDollar[7].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, comment)
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6264
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6268
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6274
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6280
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6286
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6293
		{
			yyVAL.str = ""
		}
	case 992:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6297
		{
			yyVAL.str = yyDollar[2].str
		}
	case 993:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6303
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6311
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6319
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6327
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 997:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6332
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6344
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6355
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6464
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6468
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6474
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6487
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6491
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6497
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6510
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6514
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6518
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6523
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6527
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6533
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6540
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6546
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6555
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1016:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6562
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6573
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6577
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6583
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6592
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6596
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6600
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6605
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6609
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6613
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6617
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6623
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6654
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6658
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6684
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6690
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6702
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6708
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6714
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6720
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6726
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6734
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6738
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6744
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6758
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6772
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6776
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6780
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6784
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6788
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6792
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6796
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6802
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6817
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6821
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6832
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6836
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6841
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6845
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6851
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6855
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6861
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6870
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6879
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6885
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6889
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6895
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6906
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6912
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6930
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6948
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6966
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6982
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6986
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6995
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7007
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7016
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7028
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7038
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7048
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7059
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7069
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7080
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7090
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7097
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7107
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7120
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7128
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7137
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7146
		{
			yyVAL.str = ""
		}
	case 1088:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7150
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7156
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7160
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7165
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7169
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7176
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7188
		{
			yyVAL.str = ""
		}
	case 1095:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7192
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1096:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7198
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7219
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7233
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7237
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7241
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7247
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7251
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7258
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7265
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7272
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7279
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7283
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7287
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7291
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7295
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7302
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7309
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7313
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7320
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7327
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7331
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7337
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7343
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7347
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7354
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7361
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7368
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7375
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7379
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7384
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7388
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7392
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7397
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7401
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7414
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7418
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7426
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7434
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7438
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7450
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7454
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7460
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7464
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7470
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7483
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7497
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7501
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7507
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7511
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7517
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7526
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7537
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7541
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7546
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7550
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7556
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7561
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7569
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7573
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7583
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7587
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7598
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7606
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7614
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7622
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7633
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7642
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7652
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7662
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7666
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7671
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7675
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7681
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7685
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7691
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7700
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7710
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7714
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7720
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7724
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7730
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7739
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7749
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7753
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7759
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7763
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7767
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7773
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7777
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7781
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7785
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7789
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7793
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7797
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7802
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7806
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7810
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7814
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7818
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7822
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7826
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7830
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7834
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7838
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7842
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7846
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7850
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7856
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7862
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7866
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7870
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7874
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7878
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7884
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7890
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7896
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7902
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7908
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7914
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7918
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7922
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7926
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7933
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7937
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:7943
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7954
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7958
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7964
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7968
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7972
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7976
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7980
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7984
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7998
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8002
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8011
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8016
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8021
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			atTs := &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[5].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8030
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			atTs := &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: yyDollar[5].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8039
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			atTs := &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[5].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8048
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			atTs := &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[7].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8057
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			atTs := &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: yyDollar[7].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8066
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			atTs := &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[7].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8076
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8083
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8087
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8093
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8097
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8101
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8107
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8111
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8117
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8130
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8143
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8182
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8222
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8236
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8242
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8255
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8268
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8281
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8294
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8309
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8319
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8325
		{
			yyVAL.str = ""
		}
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8329
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8339
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8345
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8351
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8372
		{
			yyVAL.str = ""
		}
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8376
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8382
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8388
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8394
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8400
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin(), yyDollar[5].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8408
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8412
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8416
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8420
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8426
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8432
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8438
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin(), yyDollar[5].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8445
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8449
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8455
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8459
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8465
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8469
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8473
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8477
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8481
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8485
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8490
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8494
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8498
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8502
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8506
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8510
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8514
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8518
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8522
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8526
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[3].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8540
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8544
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8548
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8552
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8556
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8560
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8566
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8570
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8575
		{
			yyVAL.str = ""
		}
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8579
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8585
		{
			yyVAL.str = ""
		}
	case 1328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8589
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1329:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8595
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8612
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8619
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8626
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8633
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8640
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8649
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8655
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8661
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8665
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8669
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8673
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8677
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8682
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8689
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8693
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8697
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8702
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8706
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8711
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8715
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8731
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8737
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8741
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8745
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8749
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8753
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8757
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8761
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8765
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8769
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8773
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8777
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8781
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8785
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8791
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8795
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8799
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8803
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8807
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8811
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8815
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8819
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8823
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8827
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8869
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8873
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8877
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8882
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8890
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8894
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8898
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8902
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8906
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8916
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8920
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8924
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8928
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8932
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8936
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8940
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8946
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8955
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8964
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8975
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8985
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8995
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9004
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9014
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9024
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9034
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9043
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9053
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9057
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9062
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9066
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9072
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9076
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9082
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9091
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9103
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9120
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9137
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9150
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9163
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9175
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9189
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9204
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9219
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9236
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9251
		{
		}
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9258
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9262
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9266
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9272
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9276
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9280
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9284
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9290
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9294
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9298
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9304
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9312
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9322
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9326
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9333
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9338
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9342
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9347
		{
			yyVAL.str = ","
		}
	case 1449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9351
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9356
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9360
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1452:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9365
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9372
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9398
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9410
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9422
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9433
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9444
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9455
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9465
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9475
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9486
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9497
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9508
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9519
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9530
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9541
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9552
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9563
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9574
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9585
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9596
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9607
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9618
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9629
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9647
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9656
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9665
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9674
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9683
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9694
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9703
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9713
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9722
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9731
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9740
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9749
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9761
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9772
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9785
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9797
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9820
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9856
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9869
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9882
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9894
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9903
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9911
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9919
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9932
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9941
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9952
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9963
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9972
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9984
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9994
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10004
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10013
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10024
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10033
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10043
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10052
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10061
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10071
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10075
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10081
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10085
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10104
		{
		}
	case 1563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10106
		{
		}
	case 1597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10147
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10159
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10163
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10167
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10173
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10178
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10182
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10188
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10192
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10198
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10202
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10209
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10213
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10217
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin("concat", yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10226
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10230
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10234
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10239
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10243
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10249
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10253
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10257
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10261
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10265
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10269
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10273
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10277
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10281
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10285
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10293
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10297
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10301
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10305
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10309
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10313
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10317
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10321
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10325
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10329
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10335
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10339
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10345
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10349
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10356
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10360
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10364
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10370
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10374
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10378
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10382
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10386
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10390
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10394
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10400
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10404
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10408
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10412
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10418
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10431
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10436
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10442
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10446
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10459
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10464
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10468
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10472
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10476
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10480
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10487
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10491
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10495
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10499
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10506
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10517
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10522
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10528
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10540
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10552
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10564
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10577
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10590
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10603
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10616
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10629
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10642
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10655
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10668
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10681
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10694
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10709
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10736
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10778
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10814
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10850
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10867
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10879
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10899
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10919
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10939
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10955
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10968
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10981
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10994
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11007
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11019
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11031
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11043
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11055
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11067
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11079
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11091
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11103
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11115
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11128
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11141
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11154
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11167
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11182
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11190
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11199
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11209
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11232
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11237
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11243
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11250
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11254
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11259
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11263
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11269
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11275
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11282
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11289
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11298
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11305
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11312
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11321
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11325
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11329
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11335
		{
		}
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11337
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11347
		{
			yyVAL.str = ""
		}
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11351
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
