// Code generated by goyacc -o mysql_sql.go -c mysql mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const SELECT = 57349
const STREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const LOWER_THAN_SET = 57363
const SET = 57364
const ALL = 57365
const DISTINCT = 57366
const DISTINCTROW = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const DEFAULT = 57374
const LOCK = 57375
const KEYS = 57376
const VALUES = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const SUBQUERY_AS_EXPR = 57396
const LOWER_THAN_STRING = 57397
const ID = 57398
const AT_ID = 57399
const AT_AT_ID = 57400
const STRING = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const INTEGRAL = 57406
const HEX = 57407
const BIT_LITERAL = 57408
const FLOAT = 57409
const HEXNUM = 57410
const NULL = 57411
const TRUE = 57412
const FALSE = 57413
const LOWER_THAN_CHARSET = 57414
const CHARSET = 57415
const UNIQUE = 57416
const KEY = 57417
const OR = 57418
const PIPE_CONCAT = 57419
const XOR = 57420
const AND = 57421
const NOT = 57422
const BETWEEN = 57423
const CASE = 57424
const WHEN = 57425
const THEN = 57426
const ELSE = 57427
const END = 57428
const LE = 57429
const GE = 57430
const NE = 57431
const NULL_SAFE_EQUAL = 57432
const IS = 57433
const LIKE = 57434
const REGEXP = 57435
const IN = 57436
const ASSIGNMENT = 57437
const SHIFT_LEFT = 57438
const SHIFT_RIGHT = 57439
const DIV = 57440
const MOD = 57441
const UNARY = 57442
const COLLATE = 57443
const BINARY = 57444
const UNDERSCORE_BINARY = 57445
const INTERVAL = 57446
const BEGIN = 57447
const START = 57448
const TRANSACTION = 57449
const COMMIT = 57450
const ROLLBACK = 57451
const WORK = 57452
const CONSISTENT = 57453
const SNAPSHOT = 57454
const CHAIN = 57455
const NO = 57456
const RELEASE = 57457
const PRIORITY = 57458
const QUICK = 57459
const BIT = 57460
const TINYINT = 57461
const SMALLINT = 57462
const MEDIUMINT = 57463
const INT = 57464
const INTEGER = 57465
const BIGINT = 57466
const INTNUM = 57467
const REAL = 57468
const DOUBLE = 57469
const FLOAT_TYPE = 57470
const DECIMAL = 57471
const NUMERIC = 57472
const DECIMAL_VALUE = 57473
const TIME = 57474
const TIMESTAMP = 57475
const DATETIME = 57476
const YEAR = 57477
const CHAR = 57478
const VARCHAR = 57479
const BOOL = 57480
const CHARACTER = 57481
const VARBINARY = 57482
const NCHAR = 57483
const TEXT = 57484
const TINYTEXT = 57485
const MEDIUMTEXT = 57486
const LONGTEXT = 57487
const BLOB = 57488
const TINYBLOB = 57489
const MEDIUMBLOB = 57490
const LONGBLOB = 57491
const JSON = 57492
const ENUM = 57493
const GEOMETRY = 57494
const POINT = 57495
const LINESTRING = 57496
const POLYGON = 57497
const GEOMETRYCOLLECTION = 57498
const MULTIPOINT = 57499
const MULTILINESTRING = 57500
const MULTIPOLYGON = 57501
const INT1 = 57502
const INT2 = 57503
const INT3 = 57504
const INT4 = 57505
const INT8 = 57506
const SQL_SMALL_RESULT = 57507
const SQL_BIG_RESULT = 57508
const SQL_BUFFER_RESULT = 57509
const LOW_PRIORITY = 57510
const HIGH_PRIORITY = 57511
const DELAYED = 57512
const CREATE = 57513
const ALTER = 57514
const DROP = 57515
const RENAME = 57516
const ANALYZE = 57517
const ADD = 57518
const SCHEMA = 57519
const TABLE = 57520
const INDEX = 57521
const VIEW = 57522
const TO = 57523
const IGNORE = 57524
const IF = 57525
const PRIMARY = 57526
const COLUMN = 57527
const CONSTRAINT = 57528
const SPATIAL = 57529
const FULLTEXT = 57530
const FOREIGN = 57531
const KEY_BLOCK_SIZE = 57532
const SHOW = 57533
const DESCRIBE = 57534
const EXPLAIN = 57535
const DATE = 57536
const ESCAPE = 57537
const REPAIR = 57538
const OPTIMIZE = 57539
const TRUNCATE = 57540
const MAXVALUE = 57541
const PARTITION = 57542
const REORGANIZE = 57543
const LESS = 57544
const THAN = 57545
const PROCEDURE = 57546
const TRIGGER = 57547
const STATUS = 57548
const VARIABLES = 57549
const ROLE = 57550
const PROXY = 57551
const AVG_ROW_LENGTH = 57552
const STORAGE = 57553
const DISK = 57554
const MEMORY = 57555
const CHECKSUM = 57556
const COMPRESSION = 57557
const DATA = 57558
const DIRECTORY = 57559
const DELAY_KEY_WRITE = 57560
const ENCRYPTION = 57561
const ENGINE = 57562
const MAX_ROWS = 57563
const MIN_ROWS = 57564
const PACK_KEYS = 57565
const ROW_FORMAT = 57566
const STATS_AUTO_RECALC = 57567
const STATS_PERSISTENT = 57568
const STATS_SAMPLE_PAGES = 57569
const DYNAMIC = 57570
const COMPRESSED = 57571
const REDUNDANT = 57572
const COMPACT = 57573
const FIXED = 57574
const COLUMN_FORMAT = 57575
const AUTO_RANDOM = 57576
const RESTRICT = 57577
const CASCADE = 57578
const ACTION = 57579
const PARTIAL = 57580
const SIMPLE = 57581
const CHECK = 57582
const ENFORCED = 57583
const RANGE = 57584
const LIST = 57585
const ALGORITHM = 57586
const LINEAR = 57587
const PARTITIONS = 57588
const SUBPARTITION = 57589
const SUBPARTITIONS = 57590
const TYPE = 57591
const ANY = 57592
const SOME = 57593
const PREPARE = 57594
const DEALLOCATE = 57595
const PROPERTIES = 57596
const PARSER = 57597
const VISIBLE = 57598
const INVISIBLE = 57599
const BTREE = 57600
const HASH = 57601
const RTREE = 57602
const BSI = 57603
const ZONEMAP = 57604
const LEADING = 57605
const BOTH = 57606
const TRAILING = 57607
const UNKNOWN = 57608
const EXPIRE = 57609
const ACCOUNT = 57610
const UNLOCK = 57611
const DAY = 57612
const NEVER = 57613
const SECOND = 57614
const ASCII = 57615
const COALESCE = 57616
const COLLATION = 57617
const HOUR = 57618
const MICROSECOND = 57619
const MINUTE = 57620
const MONTH = 57621
const QUARTER = 57622
const REPEAT = 57623
const REVERSE = 57624
const ROW_COUNT = 57625
const WEEK = 57626
const REVOKE = 57627
const FUNCTION = 57628
const PRIVILEGES = 57629
const TABLESPACE = 57630
const EXECUTE = 57631
const SUPER = 57632
const GRANT = 57633
const OPTION = 57634
const REFERENCES = 57635
const REPLICATION = 57636
const SLAVE = 57637
const CLIENT = 57638
const USAGE = 57639
const RELOAD = 57640
const FILE = 57641
const TEMPORARY = 57642
const ROUTINE = 57643
const EVENT = 57644
const SHUTDOWN = 57645
const NULLX = 57646
const AUTO_INCREMENT = 57647
const APPROXNUM = 57648
const SIGNED = 57649
const UNSIGNED = 57650
const ZEROFILL = 57651
const USER = 57652
const IDENTIFIED = 57653
const CIPHER = 57654
const ISSUER = 57655
const X509 = 57656
const SUBJECT = 57657
const SAN = 57658
const REQUIRE = 57659
const SSL = 57660
const NONE = 57661
const PASSWORD = 57662
const MAX_QUERIES_PER_HOUR = 57663
const MAX_UPDATES_PER_HOUR = 57664
const MAX_CONNECTIONS_PER_HOUR = 57665
const MAX_USER_CONNECTIONS = 57666
const FORMAT = 57667
const VERBOSE = 57668
const CONNECTION = 57669
const LOAD = 57670
const INFILE = 57671
const TERMINATED = 57672
const OPTIONALLY = 57673
const ENCLOSED = 57674
const ESCAPED = 57675
const STARTING = 57676
const LINES = 57677
const DATABASES = 57678
const TABLES = 57679
const EXTENDED = 57680
const FULL = 57681
const PROCESSLIST = 57682
const FIELDS = 57683
const COLUMNS = 57684
const OPEN = 57685
const ERRORS = 57686
const WARNINGS = 57687
const INDEXES = 57688
const SCHEMAS = 57689
const NAMES = 57690
const GLOBAL = 57691
const SESSION = 57692
const ISOLATION = 57693
const LEVEL = 57694
const READ = 57695
const WRITE = 57696
const ONLY = 57697
const REPEATABLE = 57698
const COMMITTED = 57699
const UNCOMMITTED = 57700
const SERIALIZABLE = 57701
const LOCAL = 57702
const EXCEPT = 57703
const CURRENT_TIMESTAMP = 57704
const DATABASE = 57705
const CURRENT_TIME = 57706
const LOCALTIME = 57707
const LOCALTIMESTAMP = 57708
const UTC_DATE = 57709
const UTC_TIME = 57710
const UTC_TIMESTAMP = 57711
const REPLACE = 57712
const CONVERT = 57713
const SEPARATOR = 57714
const CURRENT_DATE = 57715
const CURRENT_USER = 57716
const CURRENT_ROLE = 57717
const SECOND_MICROSECOND = 57718
const MINUTE_MICROSECOND = 57719
const MINUTE_SECOND = 57720
const HOUR_MICROSECOND = 57721
const HOUR_SECOND = 57722
const HOUR_MINUTE = 57723
const DAY_MICROSECOND = 57724
const DAY_SECOND = 57725
const DAY_MINUTE = 57726
const DAY_HOUR = 57727
const YEAR_MONTH = 57728
const SQL_TSI_HOUR = 57729
const SQL_TSI_DAY = 57730
const SQL_TSI_WEEK = 57731
const SQL_TSI_MONTH = 57732
const SQL_TSI_QUARTER = 57733
const SQL_TSI_YEAR = 57734
const SQL_TSI_SECOND = 57735
const SQL_TSI_MINUTE = 57736
const RECURSIVE = 57737
const CONFIG = 57738
const MATCH = 57739
const AGAINST = 57740
const BOOLEAN = 57741
const LANGUAGE = 57742
const WITH = 57743
const QUERY = 57744
const EXPANSION = 57745
const ADDDATE = 57746
const BIT_AND = 57747
const BIT_OR = 57748
const BIT_XOR = 57749
const CAST = 57750
const COUNT = 57751
const APPROX_COUNT_DISTINCT = 57752
const APPROX_PERCENTILE = 57753
const CURDATE = 57754
const CURTIME = 57755
const DATE_ADD = 57756
const DATE_SUB = 57757
const EXTRACT = 57758
const GROUP_CONCAT = 57759
const MAX = 57760
const MID = 57761
const MIN = 57762
const NOW = 57763
const POSITION = 57764
const SESSION_USER = 57765
const STD = 57766
const STDDEV = 57767
const STDDEV_POP = 57768
const STDDEV_SAMP = 57769
const SUBDATE = 57770
const SUBSTR = 57771
const SUBSTRING = 57772
const SUM = 57773
const SYSDATE = 57774
const SYSTEM_USER = 57775
const TRANSLATE = 57776
const TRIM = 57777
const VARIANCE = 57778
const VAR_POP = 57779
const VAR_SAMP = 57780
const AVG = 57781
const ROW = 57782
const OUTFILE = 57783
const HEADER = 57784
const MAX_FILE_SIZE = 57785
const FORCE_QUOTE = 57786
const UNUSED = 57787

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"INTEGRAL",
	"HEX",
	"BIT_LITERAL",
	"FLOAT",
	"HEXNUM",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"TYPE",
	"ANY",
	"SOME",
	"PREPARE",
	"DEALLOCATE",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"EXPIRE",
	"ACCOUNT",
	"UNLOCK",
	"DAY",
	"NEVER",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"LOAD",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"DATABASES",
	"TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EXCEPT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT_DISTINCT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"UNUSED",
	"';'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:6733

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 61,
	18, 404,
	-2, 385,
	-1, 66,
	196, 554,
	-2, 590,
	-1, 81,
	223, 270,
	224, 270,
	-2, 291,
	-1, 338,
	60, 1377,
	464, 1377,
	-2, 97,
	-1, 357,
	60, 715,
	464, 715,
	-2, 552,
	-1, 358,
	60, 545,
	464, 545,
	-2, 553,
	-1, 364,
	18, 405,
	-2, 368,
	-1, 432,
	91, 1257,
	102, 1257,
	121, 1257,
	-2, 1080,
	-1, 460,
	18, 405,
	-2, 368,
	-1, 631,
	55, 1406,
	-2, 1413,
	-1, 639,
	55, 1407,
	-2, 1421,
	-1, 641,
	55, 1403,
	-2, 1423,
	-1, 642,
	55, 1404,
	-2, 1424,
	-1, 647,
	55, 1405,
	-2, 1430,
	-1, 648,
	55, 1408,
	-2, 1431,
	-1, 649,
	55, 1409,
	-2, 1432,
	-1, 650,
	55, 844,
	-2, 1433,
	-1, 651,
	55, 845,
	-2, 1434,
	-1, 652,
	55, 846,
	-2, 1435,
	-1, 654,
	55, 1410,
	-2, 1437,
	-1, 655,
	55, 863,
	-2, 1438,
	-1, 656,
	55, 862,
	-2, 1439,
	-1, 659,
	55, 1411,
	-2, 1442,
	-1, 660,
	55, 1412,
	-2, 1443,
	-1, 666,
	55, 925,
	-2, 1257,
	-1, 667,
	55, 934,
	-2, 1283,
	-1, 668,
	55, 938,
	-2, 1322,
	-1, 669,
	55, 949,
	-2, 1382,
	-1, 670,
	55, 951,
	-2, 1392,
	-1, 671,
	55, 939,
	-2, 1397,
	-1, 672,
	55, 947,
	-2, 1401,
	-1, 673,
	55, 928,
	-2, 1402,
	-1, 838,
	1, 580,
	57, 580,
	463, 580,
	-2, 587,
	-1, 967,
	18, 404,
	-2, 773,
	-1, 1013,
	121, 1090,
	-2, 1088,
	-1, 1015,
	121, 494,
	-2, 1085,
	-1, 1016,
	121, 495,
	-2, 1086,
	-1, 1217,
	1, 581,
	57, 581,
	463, 581,
	-2, 587,
	-1, 1280,
	55, 992,
	-2, 1399,
	-1, 1281,
	55, 993,
	-2, 1400,
	-1, 1448,
	53, 325,
	56, 325,
	-2, 679,
	-1, 1734,
	76, 587,
	117, 587,
	153, 587,
	156, 587,
	-2, 627,
	-1, 1736,
	257, 740,
	-2, 721,
	-1, 1760,
	53, 325,
	56, 325,
	-2, 680,
	-1, 1838,
	76, 587,
	117, 587,
	153, 587,
	156, 587,
	-2, 628,
	-1, 1866,
	257, 740,
	-2, 722,
	-1, 2247,
	56, 602,
	57, 602,
	-2, 587,
	-1, 2251,
	56, 602,
	57, 602,
	-2, 587,
	-1, 2263,
	56, 606,
	57, 606,
	-2, 587,
	-1, 2266,
	56, 607,
	57, 607,
	-2, 587,
}

const yyPrivate = 57344

const yyLast = 23449

var yyAct = [...]int{
	828, 2251, 2253, 2258, 2250, 2224, 676, 2198, 2089, 1283,
	1896, 817, 2213, 694, 2169, 1878, 2150, 2063, 2151, 1834,
	2066, 500, 2044, 567, 1204, 674, 1728, 97, 898, 1284,
	1999, 100, 310, 316, 1895, 316, 610, 2051, 496, 602,
	325, 1886, 1894, 314, 22, 365, 1783, 1754, 1464, 97,
	327, 430, 364, 1571, 1867, 1907, 1595, 1451, 359, 359,
	546, 1567, 555, 1885, 1555, 1612, 1786, 96, 1776, 388,
	630, 884, 815, 1794, 1260, 1432, 495, 1583, 1576, 1740,
	1798, 1572, 1618, 1210, 706, 61, 995, 1629, 431, 1507,
	675, 1223, 1637, 455, 1261, 843, 97, 1010, 812, 1013,
	1004, 996, 845, 1469, 1367, 1005, 1353, 1271, 1426, 1222,
	60, 877, 313, 15, 302, 3, 61, 557, 685, 1842,
	438, 29, 311, 6, 1218, 312, 5, 813, 830, 787,
	334, 334, 1285, 390, 433, 677, 457, 22, 852, 1282,
	623, 435, 881, 1297, 854, 329, 303, 900, 470, 1186,
	853, 534, 29, 1177, 306, 903, 934, 422, 387, 498,
	331, 804, 484, 330, 1193, 12, 7, 594, 4, 513,
	93, 611, 1918, 1830, 437, 1727, 825, 998, 61, 91,
	315, 321, 423, 88, 580, 622, 1189, 1408, 92, 2116,
	26, 48, 67, 1556, 1427, 2106, 544, 578, 1415, 385,
	436, 871, 92, 574, 361, 92, 15, 533, 1418, 454,
	866, 867, 409, 301, 29, 318, 6, 755, 856, 5,
	820, 442, 441, 92, 92, 26, 48, 67, 568, 569,
	752, 2138, 581, 1532, 528, 2136, 89, 92, 2173, 26,
	48, 67, 566, 775, 524, 565, 568, 569, 2154, 2155,
	754, 440, 1997, 89, 1559, 377, 395, 2000, 2001, 2002,
	2003, 1560, 2077, 1561, 2080, 1921, 1729, 824, 1394, 464,
	1613, 89, 89, 473, 1584, 1585, 1586, 1587, 1189, 410,
	1435, 1433, 1430, 1434, 1436, 89, 1429, 1428, 878, 1435,
	1433, 1616, 1434, 1436, 1191, 444, 1904, 1782, 1781, 515,
	526, 527, 1883, 1827, 463, 525, 1724, 805, 514, 366,
	1984, 1702, 1767, 1770, 462, 92, 1771, 2164, 316, 317,
	97, 1973, 1615, 2052, 2053, 2054, 2056, 2055, 2140, 2243,
	2115, 2259, 2178, 807, 519, 2135, 1676, 1673, 1674, 1675,
	2091, 2185, 1707, 2113, 1706, 1705, 1703, 459, 461, 2153,
	1577, 1580, 2065, 439, 435, 460, 1936, 501, 2087, 2088,
	480, 2091, 520, 89, 1967, 1274, 1275, 1276, 2234, 66,
	1935, 90, 379, 1475, 1275, 1276, 1272, 1438, 1439, 1440,
	1441, 363, 376, 375, 1962, 2097, 1416, 388, 575, 81,
	2142, 2143, 61, 61, 437, 2260, 2118, 2119, 434, 590,
	523, 1768, 522, 371, 1704, 2254, 443, 564, 563, 2225,
	547, 506, 1508, 545, 1924, 806, 456, 1412, 579, 359,
	436, 832, 2075, 475, 474, 431, 431, 431, 29, 29,
	359, 359, 548, 840, 550, 510, 1588, 505, 1248, 1197,
	549, 1958, 517, 1725, 319, 316, 626, 626, 1580, 1778,
	1777, 539, 552, 1462, 518, 521, 382, 383, 384, 757,
	1246, 1245, 466, 467, 516, 2216, 768, 769, 1244, 1581,
	607, 584, 582, 583, 1574, 625, 625, 773, 1575, 1578,
	869, 870, 463, 97, 97, 97, 97, 2029, 1243, 868,
	411, 334, 788, 412, 801, 374, 758, 2238, 478, 753,
	473, 2202, 604, 604, 1763, 370, 1601, 1562, 559, 1472,
	359, 359, 463, 359, 892, 571, 572, 1708, 1709, 613,
	1452, 782, 818, 302, 1406, 1405, 2141, 2064, 1393, 501,
	1579, 359, 359, 1388, 568, 569, 802, 536, 568, 569,
	61, 2117, 560, 1238, 1202, 1170, 538, 359, 1556, 359,
	915, 838, 772, 61, 388, 761, 1212, 844, 378, 468,
	771, 97, 61, 879, 589, 1766, 1581, 827, 1192, 1769,
	831, 837, 609, 512, 2217, 861, 1273, 530, 476, 359,
	458, 1963, 1964, 334, 1474, 819, 554, 952, 1409, 29,
	781, 359, 431, 1605, 359, 600, 601, 859, 29, 68,
	778, 849, 1548, 777, 561, 833, 558, 597, 598, 599,
	893, 434, 759, 68, 612, 784, 68, 359, 359, 897,
	97, 334, 301, 764, 885, 621, 912, 2220, 401, 822,
	885, 885, 750, 760, 68, 68, 862, 616, 617, 618,
	619, 620, 901, 780, 779, 834, 776, 1550, 68, 847,
	475, 474, 902, 570, 1960, 800, 573, 916, 1959, 823,
	899, 2211, 848, 334, 789, 790, 791, 792, 595, 1444,
	401, 816, 808, 1596, 857, 858, 2101, 863, 414, 596,
	1390, 850, 851, 1435, 1433, 1697, 1434, 1436, 826, 969,
	334, 821, 1188, 562, 836, 2214, 2215, 1549, 1287, 1286,
	2030, 2032, 2033, 2034, 2031, 403, 1250, 1175, 402, 968,
	465, 1930, 841, 1368, 593, 895, 908, 976, 855, 413,
	1424, 880, 835, 447, 452, 453, 68, 416, 415, 955,
	956, 957, 958, 959, 952, 978, 875, 1360, 1368, 1969,
	1513, 1968, 1187, 890, 891, 911, 908, 403, 1744, 876,
	402, 1358, 1359, 1357, 1739, 1002, 1002, 1007, 909, 910,
	911, 908, 894, 896, 967, 887, 888, 889, 1495, 1953,
	2249, 970, 971, 972, 973, 953, 954, 955, 956, 957,
	958, 959, 952, 1015, 1292, 592, 844, 2230, 1445, 2195,
	436, 2179, 2125, 1016, 950, 960, 961, 953, 954, 955,
	956, 957, 958, 959, 952, 974, 417, 2263, 1295, 992,
	1686, 2233, 2073, 1494, 2040, 942, 2072, 1835, 1296, 909,
	910, 911, 908, 960, 961, 953, 954, 955, 956, 957,
	958, 959, 952, 97, 97, 909, 910, 911, 908, 437,
	1224, 919, 920, 921, 922, 923, 924, 925, 917, 2039,
	61, 2232, 909, 910, 911, 908, 310, 2046, 2024, 2023,
	1001, 1699, 2022, 1240, 1185, 436, 2019, 2038, 1516, 986,
	2013, 1515, 359, 1207, 1209, 901, 1228, 909, 910, 911,
	908, 1172, 449, 450, 451, 902, 29, 2010, 2009, 1173,
	1919, 1912, 1318, 359, 909, 910, 911, 908, 1911, 1518,
	2036, 1693, 2037, 1910, 1906, 626, 994, 97, 1905, 1900,
	1008, 2026, 1009, 1750, 1267, 1169, 1269, 885, 885, 885,
	1168, 1014, 951, 950, 960, 961, 953, 954, 955, 956,
	957, 958, 959, 952, 625, 2035, 1749, 1748, 1263, 1264,
	1265, 1266, 1293, 1294, 334, 1182, 2025, 1241, 1747, 1544,
	762, 2174, 1229, 1230, 1231, 502, 503, 504, 1219, 1820,
	1290, 1205, 1206, 1201, 2163, 1255, 909, 910, 911, 908,
	1232, 1196, 2146, 1332, 992, 2045, 1341, 1342, 1343, 1344,
	1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 2095, 1277,
	2094, 1362, 1363, 1234, 2071, 1236, 1819, 1377, 2027, 2020,
	1200, 1233, 1235, 1482, 1237, 2016, 1258, 1369, 2015, 1372,
	855, 2014, 909, 910, 911, 908, 1379, 1247, 909, 910,
	911, 908, 1955, 909, 910, 911, 908, 1314, 2147, 1311,
	1251, 1252, 1253, 1313, 1310, 1312, 1316, 1317, 1920, 2231,
	1908, 1315, 1465, 2069, 2219, 1259, 1833, 1831, 2241, 1757,
	909, 910, 911, 908, 1593, 1361, 909, 910, 911, 908,
	1592, 1288, 1289, 1591, 1291, 909, 910, 911, 908, 1590,
	1327, 1328, 1329, 1330, 1331, 721, 720, 1337, 1338, 1339,
	1340, 1355, 963, 1199, 966, 951, 950, 960, 961, 953,
	954, 955, 956, 957, 958, 959, 952, 1382, 964, 965,
	962, 1198, 951, 950, 960, 961, 953, 954, 955, 956,
	957, 958, 959, 952, 988, 949, 948, 763, 2122, 1371,
	1373, 1374, 1370, 328, 1522, 2121, 1381, 1478, 1521, 1378,
	2102, 1380, 1509, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1309, 1321, 1322, 1323, 1324, 1325, 1326,
	1319, 1320, 1990, 951, 950, 960, 961, 953, 954, 955,
	956, 957, 958, 959, 952, 1986, 368, 1478, 2268, 2262,
	2261, 1395, 1195, 2244, 1985, 463, 367, 1995, 2240, 2239,
	1195, 2228, 360, 1195, 2227, 788, 2201, 2200, 1980, 2161,
	359, 1978, 1821, 359, 1980, 2156, 463, 1818, 359, 909,
	910, 911, 908, 1421, 1810, 1400, 1411, 846, 1401, 1257,
	2144, 1403, 1913, 909, 910, 911, 908, 615, 1806, 1398,
	2133, 2132, 1448, 1805, 1980, 2111, 435, 2208, 1454, 1804,
	1419, 1420, 1775, 831, 909, 910, 911, 908, 1734, 1459,
	909, 910, 911, 908, 1716, 909, 910, 911, 908, 359,
	1471, 909, 910, 911, 908, 1980, 2110, 97, 97, 1980,
	2109, 1617, 1446, 1714, 1606, 1410, 1525, 1696, 1523, 22,
	1423, 1443, 1520, 951, 950, 960, 961, 953, 954, 955,
	956, 957, 958, 959, 952, 909, 910, 911, 908, 909,
	910, 911, 908, 1980, 2108, 1519, 1413, 1467, 1468, 1690,
	1517, 1483, 1487, 1689, 1399, 2100, 2099, 1396, 1994, 1993,
	61, 1992, 1991, 1988, 1989, 1479, 1484, 1407, 1480, 1481,
	1477, 909, 910, 911, 908, 909, 910, 911, 908, 1988,
	1987, 1447, 1422, 1980, 1979, 1455, 1461, 1219, 15, 1227,
	1719, 1453, 1442, 1478, 1691, 1376, 29, 1463, 6, 1688,
	1460, 5, 1456, 1375, 1457, 1478, 1677, 1489, 1490, 1491,
	1492, 1493, 1466, 1497, 1478, 1486, 1502, 1498, 1499, 1500,
	1501, 909, 910, 911, 908, 803, 1458, 1687, 1478, 1485,
	1473, 1227, 1397, 1392, 1391, 1505, 1506, 1002, 614, 1536,
	1002, 1386, 1385, 1539, 1683, 1510, 1449, 1476, 1514, 909,
	910, 911, 908, 844, 846, 359, 1227, 1226, 1682, 359,
	359, 1526, 1478, 359, 885, 1542, 909, 910, 911, 908,
	885, 1681, 1195, 1194, 906, 1543, 463, 766, 765, 1533,
	909, 910, 911, 908, 1600, 1545, 1570, 1450, 97, 509,
	1450, 967, 1383, 909, 910, 911, 908, 1174, 529, 1504,
	97, 1224, 508, 1604, 507, 1735, 1531, 92, 508, 1189,
	1717, 67, 1538, 1471, 1503, 510, 1389, 436, 904, 1365,
	61, 1512, 97, 1622, 1535, 1257, 1355, 1203, 1594, 1171,
	1524, 1551, 1553, 510, 553, 1528, 1527, 591, 2264, 2210,
	1537, 1540, 1534, 1541, 2204, 1972, 92, 1680, 1546, 2186,
	2183, 1597, 1598, 1547, 2181, 89, 2124, 1589, 1624, 2061,
	2049, 1554, 2047, 2042, 2004, 1785, 1976, 359, 1678, 909,
	910, 911, 908, 359, 1602, 1684, 1685, 951, 950, 960,
	961, 953, 954, 955, 956, 957, 958, 959, 952, 1975,
	1599, 1974, 1603, 1698, 89, 1679, 1971, 1966, 1711, 1951,
	1713, 556, 1795, 359, 1787, 1799, 1710, 1802, 1792, 1607,
	1608, 1627, 1712, 1622, 1791, 97, 1621, 909, 910, 911,
	908, 1752, 1745, 1356, 1738, 89, 1609, 1425, 1402, 1384,
	1695, 1249, 1242, 909, 910, 911, 908, 1225, 1215, 604,
	1626, 993, 991, 990, 1692, 604, 359, 989, 359, 1694,
	987, 97, 1760, 935, 1625, 1733, 984, 1732, 1701, 983,
	1715, 981, 909, 910, 911, 908, 980, 1364, 979, 1718,
	977, 947, 946, 945, 944, 1720, 909, 910, 911, 908,
	1774, 501, 943, 941, 940, 1753, 939, 1742, 1723, 909,
	910, 911, 908, 938, 937, 936, 933, 932, 61, 1773,
	931, 930, 929, 1737, 1741, 928, 1741, 1743, 1736, 481,
	1746, 927, 1762, 926, 1751, 785, 756, 511, 604, 479,
	1755, 1178, 1179, 2191, 2189, 1759, 1758, 1765, 2152, 486,
	489, 490, 491, 487, 1437, 488, 492, 1789, 1790, 486,
	489, 490, 491, 487, 1256, 488, 492, 1181, 531, 1262,
	1779, 1793, 797, 795, 1797, 1761, 1788, 798, 796, 406,
	1184, 799, 1764, 490, 491, 1183, 1807, 2248, 794, 793,
	1387, 1220, 359, 359, 1205, 1206, 97, 1557, 535, 1809,
	1796, 28, 27, 1721, 1564, 1213, 463, 1839, 865, 1922,
	1887, 1889, 1722, 1887, 1887, 1563, 1570, 885, 320, 1811,
	842, 401, 1813, 463, 1815, 1800, 494, 1803, 1287, 1286,
	2166, 299, 300, 577, 1808, 576, 1828, 541, 542, 1167,
	1812, 537, 2205, 2129, 2127, 1893, 2082, 1816, 1817, 2081,
	1814, 2079, 1888, 2007, 2005, 1832, 1772, 1731, 1826, 1823,
	1884, 1730, 1620, 368, 1824, 1825, 1836, 1864, 540, 367,
	1619, 1488, 1470, 367, 846, 1892, 1890, 1891, 2193, 2192,
	493, 1404, 477, 2192, 2193, 391, 34, 1, 1762, 839,
	551, 1902, 381, 380, 1333, 543, 770, 446, 403, 472,
	767, 402, 471, 469, 1366, 1298, 707, 997, 1003, 2043,
	2165, 1926, 2197, 2123, 2168, 783, 693, 2074, 1909, 1558,
	1914, 1996, 1916, 2076, 1998, 1417, 1915, 1414, 532, 1529,
	1530, 1898, 1899, 400, 719, 710, 982, 712, 751, 448,
	709, 404, 1901, 1614, 369, 359, 445, 392, 1903, 1726,
	1780, 1801, 1784, 2257, 97, 2247, 2223, 2203, 2090, 2242,
	2134, 2184, 2177, 1889, 1929, 2086, 1954, 1927, 1928, 1923,
	1931, 1932, 1933, 1934, 332, 872, 1937, 1938, 1939, 1940,
	1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950,
	1884, 1952, 1956, 585, 1970, 420, 2062, 1982, 2008, 786,
	1582, 1431, 1211, 1190, 1977, 814, 333, 2114, 2048, 1870,
	372, 1214, 373, 1981, 1983, 1217, 1216, 1755, 1278, 918,
	2041, 435, 951, 950, 960, 961, 953, 954, 955, 956,
	957, 958, 959, 952, 1354, 985, 2006, 975, 628, 1511,
	684, 501, 463, 1873, 678, 463, 463, 463, 2021, 1868,
	1611, 463, 1610, 1879, 1881, 1882, 2011, 2012, 860, 33,
	1869, 32, 2017, 2018, 31, 907, 1011, 708, 99, 1239,
	1012, 2083, 1917, 2170, 692, 2084, 2068, 61, 691, 690,
	689, 2057, 359, 359, 2050, 2067, 485, 2058, 2059, 2060,
	2070, 483, 482, 324, 1874, 2085, 323, 905, 397, 2078,
	399, 409, 2149, 2148, 2104, 396, 394, 393, 405, 398,
	2105, 407, 408, 97, 1829, 1965, 2028, 1961, 1957, 2096,
	463, 2092, 2093, 1838, 1837, 1865, 1866, 1872, 1636, 1632,
	1634, 1635, 463, 1633, 1700, 1628, 1568, 1569, 1566, 1565,
	1180, 2098, 1176, 999, 1006, 829, 94, 2103, 322, 11,
	10, 774, 9, 899, 604, 604, 14, 21, 389, 20,
	19, 56, 2107, 55, 2120, 54, 53, 18, 8, 2128,
	52, 2130, 2131, 2126, 2112, 51, 50, 17, 1880, 16,
	1573, 2137, 2139, 46, 44, 43, 42, 41, 40, 39,
	38, 45, 37, 2145, 36, 2172, 35, 65, 64, 2157,
	2158, 2159, 2160, 63, 2176, 1876, 62, 23, 2171, 24,
	25, 74, 73, 70, 72, 71, 69, 30, 13, 2175,
	2, 0, 0, 0, 0, 0, 0, 1875, 1877, 0,
	0, 0, 2180, 0, 2182, 2187, 0, 0, 2190, 2188,
	0, 0, 2162, 2199, 0, 0, 0, 2194, 0, 0,
	0, 0, 463, 0, 463, 0, 2196, 0, 0, 0,
	0, 0, 818, 2207, 818, 2209, 0, 0, 0, 0,
	0, 0, 2172, 2222, 0, 0, 2218, 0, 0, 0,
	0, 463, 2212, 0, 2226, 2171, 2221, 1883, 0, 0,
	0, 818, 2229, 0, 0, 0, 2199, 2235, 0, 1871,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2245,
	0, 0, 0, 0, 0, 0, 2246, 0, 0, 0,
	2237, 0, 0, 0, 2256, 0, 2255, 0, 0, 0,
	0, 0, 0, 0, 0, 2266, 2265, 0, 0, 2256,
	0, 0, 1125, 1112, 2267, 1074, 1127, 1048, 1063, 1135,
	1064, 1065, 1099, 1027, 1083, 224, 1061, 0, 1115, 1019,
	1051, 1052, 1021, 1058, 1022, 1049, 1076, 168, 1047, 1086,
	194, 1133, 0, 0, 253, 208, 0, 0, 1079, 1117,
	1081, 1104, 1073, 1100, 1035, 1093, 1128, 1062, 1097, 1129,
	0, 0, 0, 0, 0, 502, 503, 504, 0, 0,
	0, 0, 150, 0, 0, 0, 0, 0, 1096, 1122,
	1060, 0, 153, 1126, 1080, 1098, 0, 0, 1020, 1094,
	0, 1025, 1028, 1134, 1120, 1055, 1056, 0, 0, 0,
	0, 0, 0, 0, 1077, 1082, 1101, 1070, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1053, 0, 1090,
	0, 0, 0, 1030, 1026, 0, 1075, 0, 142, 258,
	272, 151, 249, 285, 156, 256, 147, 223, 245, 0,
	1166, 144, 270, 255, 205, 188, 189, 143, 0, 240,
	166, 180, 163, 221, 0, 1124, 297, 162, 288, 1029,
	280, 146, 1161, 279, 220, 267, 271, 206, 200, 145,
	269, 204, 199, 192, 170, 184, 232, 198, 233, 185,
	210, 209, 211, 1145, 1146, 1147, 1148, 1149, 1157, 1158,
	0, 1162, 1163, 1164, 1034, 0, 1054, 1102, 0, 1018,
	1110, 1118, 1072, 282, 1121, 1069, 1068, 1152, 0, 1151,
	257, 1153, 1154, 193, 1116, 1050, 1059, 298, 1057, 243,
	226, 1123, 1089, 1165, 241, 196, 268, 234, 273, 259,
	281, 237, 235, 138, 260, 165, 207, 148, 149, 161,
	167, 169, 171, 172, 216, 217, 229, 248, 261, 262,
	263, 164, 157, 242, 158, 182, 159, 139, 250, 160,
	140, 230, 266, 1150, 178, 238, 203, 141, 202, 231,
	265, 264, 289, 295, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1159, 0, 1160, 294,
	175, 1017, 277, 0, 222, 1113, 1023, 1033, 1031, 1066,
	1091, 1092, 218, 293, 1106, 1109, 1107, 1136, 246, 0,
	0, 0, 0, 0, 187, 228, 0, 247, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1024, 0,
	254, 275, 287, 278, 1067, 1041, 1078, 286, 1044, 1042,
	1105, 1043, 1095, 1138, 212, 213, 214, 215, 179, 0,
	155, 1087, 1071, 1139, 1140, 1141, 1142, 1143, 1144, 1046,
	1119, 174, 181, 0, 183, 154, 227, 177, 284, 190,
	1111, 219, 186, 251, 191, 197, 239, 283, 225, 244,
	152, 274, 252, 201, 176, 1040, 1045, 1039, 1084, 1085,
	1130, 1131, 1132, 1103, 1032, 1114, 1036, 1038, 1037, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1108, 0,
	1088, 137, 0, 195, 1137, 236, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 715, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 1155, 1156, 290, 291, 292, 276, 686,
	0, 0, 0, 168, 0, 0, 194, 0, 0, 0,
	253, 208, 0, 2206, 0, 0, 729, 735, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 679, 0, 0,
	0, 629, 721, 720, 695, 704, 0, 0, 150, 696,
	0, 703, 697, 701, 700, 698, 699, 0, 666, 0,
	0, 0, 0, 0, 0, 627, 683, 0, 687, 951,
	950, 960, 961, 953, 954, 955, 956, 957, 958, 959,
	952, 0, 0, 0, 0, 0, 0, 0, 0, 680,
	681, 0, 0, 0, 0, 716, 0, 682, 0, 0,
	718, 0, 705, 0, 142, 258, 272, 151, 249, 285,
	156, 256, 147, 223, 245, 1822, 0, 144, 270, 255,
	205, 188, 189, 143, 0, 240, 166, 180, 163, 221,
	702, 714, 672, 162, 670, 713, 280, 146, 0, 279,
	220, 267, 271, 206, 200, 145, 269, 204, 199, 192,
	170, 184, 232, 198, 233, 185, 210, 209, 211, 0,
	0, 951, 950, 960, 961, 953, 954, 955, 956, 957,
	958, 959, 952, 0, 0, 0, 711, 0, 0, 282,
	0, 0, 728, 0, 0, 0, 257, 0, 0, 193,
	0, 0, 0, 673, 0, 243, 226, 738, 0, 0,
	241, 196, 268, 234, 273, 259, 281, 237, 235, 138,
	260, 165, 207, 148, 149, 161, 167, 169, 171, 172,
	216, 217, 229, 248, 261, 262, 263, 164, 157, 242,
	158, 182, 159, 139, 250, 160, 140, 230, 266, 0,
	178, 238, 203, 141, 202, 231, 265, 264, 289, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1335, 1334, 1336, 294, 175, 0, 277, 726,
	222, 737, 722, 723, 724, 727, 730, 731, 668, 671,
	732, 734, 736, 739, 246, 0, 0, 0, 0, 0,
	187, 228, 0, 247, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 275, 287, 669,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 717,
	212, 213, 214, 215, 667, 0, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 181, 0,
	183, 154, 227, 177, 284, 190, 0, 219, 186, 251,
	191, 197, 239, 283, 225, 244, 152, 274, 252, 201,
	176, 745, 725, 744, 746, 747, 743, 748, 749, 733,
	688, 0, 741, 740, 742, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 195,
	0, 236, 173, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 641, 642, 643, 644, 645, 116, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 0,
	0, 290, 291, 292, 276, 92, 0, 715, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 0,
	0, 0, 0, 0, 0, 686, 0, 0, 0, 168,
	0, 0, 194, 0, 0, 0, 253, 208, 0, 0,
	0, 0, 729, 735, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 679, 0, 0, 0, 629, 721, 720,
	695, 704, 0, 0, 150, 696, 0, 703, 697, 701,
	700, 698, 699, 0, 666, 0, 0, 0, 0, 0,
	0, 627, 683, 0, 687, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 680, 681, 0, 0, 0,
	0, 716, 0, 682, 0, 0, 718, 0, 705, 0,
	142, 258, 272, 151, 249, 285, 156, 256, 147, 223,
	245, 0, 0, 144, 270, 255, 205, 188, 189, 143,
	0, 240, 166, 180, 163, 221, 702, 714, 672, 162,
	670, 713, 280, 146, 0, 279, 220, 267, 271, 206,
	200, 145, 269, 204, 199, 192, 170, 184, 232, 198,
	233, 185, 210, 209, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 711, 0, 0, 282, 0, 0, 728, 0,
	0, 0, 257, 0, 0, 193, 0, 0, 0, 673,
	0, 243, 226, 738, 0, 0, 241, 196, 268, 234,
	273, 259, 281, 237, 235, 138, 260, 165, 207, 148,
	149, 161, 167, 169, 171, 172, 216, 217, 229, 248,
	261, 262, 263, 164, 157, 242, 158, 182, 159, 139,
	250, 160, 140, 230, 266, 0, 178, 238, 203, 141,
	202, 231, 265, 264, 289, 295, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 175, 0, 277, 726, 222, 737, 722, 723,
	724, 727, 730, 731, 668, 671, 732, 734, 736, 739,
	246, 0, 0, 0, 0, 0, 187, 228, 0, 247,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 275, 287, 669, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 717, 212, 213, 214, 215,
	667, 0, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 181, 0, 183, 154, 227, 177,
	284, 190, 0, 219, 186, 251, 191, 197, 239, 283,
	225, 244, 152, 274, 252, 201, 176, 745, 725, 744,
	746, 747, 743, 748, 749, 733, 688, 0, 741, 740,
	742, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 195, 68, 236, 173, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 645, 116, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 715, 0, 290, 291, 292,
	276, 0, 0, 0, 0, 224, 0, 0, 0, 0,
	0, 0, 0, 686, 0, 0, 0, 168, 886, 0,
	194, 0, 0, 0, 253, 208, 0, 0, 0, 0,
	729, 735, 0, 0, 0, 0, 0, 0, 882, 0,
	0, 679, 0, 0, 0, 629, 721, 720, 695, 704,
	0, 0, 150, 696, 0, 703, 697, 701, 700, 698,
	699, 0, 666, 0, 0, 0, 0, 0, 0, 627,
	683, 0, 687, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 680, 681, 0, 0, 0, 0, 716,
	0, 682, 0, 0, 883, 0, 705, 0, 142, 258,
	272, 151, 249, 285, 156, 256, 147, 223, 245, 0,
	0, 144, 270, 255, 205, 188, 189, 143, 0, 240,
	166, 180, 163, 221, 702, 714, 672, 162, 670, 713,
	280, 146, 0, 279, 220, 267, 271, 206, 200, 145,
	269, 204, 199, 192, 170, 184, 232, 198, 233, 185,
	210, 209, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	711, 0, 0, 282, 0, 0, 728, 0, 0, 0,
	257, 0, 0, 193, 0, 0, 0, 673, 0, 243,
	226, 738, 0, 0, 241, 196, 268, 234, 273, 259,
	281, 237, 235, 138, 260, 165, 207, 148, 149, 161,
	167, 169, 171, 172, 216, 217, 229, 248, 261, 262,
	263, 164, 157, 242, 158, 182, 159, 139, 250, 160,
	140, 230, 266, 0, 178, 238, 203, 141, 202, 231,
	265, 264, 289, 295, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	175, 0, 277, 726, 222, 737, 722, 723, 724, 727,
	730, 731, 668, 671, 732, 734, 736, 739, 246, 0,
	0, 0, 0, 0, 187, 228, 0, 247, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 275, 287, 669, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 717, 212, 213, 214, 215, 667, 0,
	155, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 181, 0, 183, 154, 227, 177, 284, 190,
	0, 219, 186, 251, 191, 197, 239, 283, 225, 244,
	152, 274, 252, 201, 176, 745, 725, 744, 746, 747,
	743, 748, 749, 733, 688, 0, 741, 740, 742, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 195, 0, 236, 173, 631, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	644, 645, 116, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 715, 0, 290, 291, 292, 276, 0,
	0, 0, 0, 224, 0, 0, 0, 0, 0, 0,
	0, 686, 0, 0, 0, 168, 2236, 0, 194, 0,
	0, 0, 253, 208, 0, 0, 0, 0, 729, 735,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 679,
	0, 0, 0, 629, 721, 720, 695, 704, 0, 0,
	150, 696, 0, 703, 697, 701, 700, 698, 699, 0,
	666, 0, 0, 0, 0, 0, 0, 627, 683, 0,
	687, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 680, 681, 0, 0, 0, 0, 716, 0, 682,
	0, 0, 718, 0, 705, 0, 142, 258, 272, 151,
	249, 285, 156, 256, 147, 223, 245, 0, 0, 144,
	270, 255, 205, 188, 189, 143, 0, 240, 166, 180,
	163, 221, 702, 714, 672, 162, 670, 713, 280, 146,
	0, 279, 220, 267, 271, 206, 200, 145, 269, 204,
	199, 192, 170, 184, 232, 198, 233, 185, 210, 209,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 711, 0,
	0, 282, 0, 0, 728, 0, 0, 0, 257, 0,
	0, 193, 0, 0, 0, 673, 0, 243, 226, 738,
	0, 0, 241, 196, 268, 234, 273, 259, 281, 237,
	235, 138, 260, 165, 207, 148, 149, 161, 167, 169,
	171, 172, 216, 217, 229, 248, 261, 262, 263, 164,
	157, 242, 158, 182, 159, 139, 250, 160, 140, 230,
	266, 0, 178, 238, 203, 141, 202, 231, 265, 264,
	289, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 175, 0,
	277, 726, 222, 737, 722, 723, 724, 727, 730, 731,
	668, 671, 732, 734, 736, 739, 246, 0, 0, 0,
	0, 0, 187, 228, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 275,
	287, 669, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 717, 212, 213, 214, 215, 667, 0, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	181, 0, 183, 154, 227, 177, 284, 190, 0, 219,
	186, 251, 191, 197, 239, 283, 225, 244, 152, 274,
	252, 201, 176, 745, 725, 744, 746, 747, 743, 748,
	749, 733, 688, 0, 741, 740, 742, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 195, 0, 236, 173, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
	116, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 661, 662, 663, 664,
	665, 715, 0, 290, 291, 292, 276, 0, 0, 0,
	0, 224, 0, 0, 0, 0, 0, 0, 0, 686,
	0, 0, 0, 168, 886, 0, 194, 0, 0, 0,
	253, 208, 0, 0, 0, 0, 729, 735, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 679, 0, 0,
	0, 629, 721, 720, 695, 704, 0, 0, 150, 696,
	0, 703, 697, 701, 700, 698, 699, 0, 666, 0,
	0, 0, 0, 0, 0, 627, 683, 0, 687, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 680,
	681, 0, 0, 0, 0, 716, 0, 682, 0, 0,
	718, 0, 705, 0, 142, 258, 272, 151, 249, 285,
	156, 256, 147, 223, 245, 0, 0, 144, 270, 255,
	205, 188, 189, 143, 0, 240, 166, 180, 163, 221,
	702, 714, 672, 162, 670, 713, 280, 146, 0, 279,
	220, 267, 271, 206, 200, 145, 269, 204, 199, 192,
	170, 184, 232, 198, 233, 185, 210, 209, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 711, 0, 0, 282,
	0, 0, 728, 0, 0, 0, 257, 0, 0, 193,
	0, 0, 0, 673, 0, 243, 226, 738, 0, 0,
	241, 196, 268, 234, 273, 259, 281, 237, 235, 138,
	260, 165, 207, 148, 149, 161, 167, 169, 171, 172,
	216, 217, 229, 248, 261, 262, 263, 164, 157, 242,
	158, 182, 159, 139, 250, 160, 140, 230, 266, 0,
	178, 238, 203, 141, 202, 231, 265, 264, 289, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 175, 0, 277, 726,
	222, 737, 722, 723, 724, 727, 730, 731, 668, 671,
	732, 734, 736, 739, 246, 0, 0, 0, 0, 0,
	187, 228, 0, 247, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 275, 287, 669,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 717,
	212, 213, 214, 215, 667, 0, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 181, 0,
	183, 154, 227, 177, 284, 190, 0, 219, 186, 251,
	191, 197, 239, 283, 225, 244, 152, 274, 252, 201,
	176, 745, 725, 744, 746, 747, 743, 748, 749, 733,
	688, 0, 741, 740, 742, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 195,
	0, 236, 173, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 641, 642, 643, 644, 645, 116, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 0,
	0, 290, 291, 292, 276, 715, 0, 0, 1496, 0,
	0, 0, 0, 0, 0, 224, 0, 0, 0, 0,
	0, 0, 0, 686, 0, 0, 0, 168, 0, 0,
	194, 0, 0, 0, 253, 208, 0, 0, 0, 0,
	729, 735, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 679, 0, 0, 0, 629, 721, 720, 695, 704,
	0, 0, 150, 696, 0, 703, 697, 701, 700, 698,
	699, 0, 666, 0, 0, 0, 0, 0, 0, 627,
	683, 0, 687, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 680, 681, 0, 0, 0, 0, 716,
	0, 682, 0, 0, 718, 0, 705, 0, 142, 258,
	272, 151, 249, 285, 156, 256, 147, 223, 245, 0,
	0, 144, 270, 255, 205, 188, 189, 143, 0, 240,
	166, 180, 163, 221, 702, 714, 672, 162, 670, 713,
	280, 146, 0, 279, 220, 267, 271, 206, 200, 145,
	269, 204, 199, 192, 170, 184, 232, 198, 233, 185,
	210, 209, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	711, 0, 0, 282, 0, 0, 728, 0, 0, 0,
	257, 0, 0, 193, 0, 0, 0, 673, 0, 243,
	226, 738, 0, 0, 241, 196, 268, 234, 273, 259,
	281, 237, 235, 138, 260, 165, 207, 148, 149, 161,
	167, 169, 171, 172, 216, 217, 229, 248, 261, 262,
	263, 164, 157, 242, 158, 182, 159, 139, 250, 160,
	140, 230, 266, 0, 178, 238, 203, 141, 202, 231,
	265, 264, 289, 295, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	175, 0, 277, 726, 222, 737, 722, 723, 724, 727,
	730, 731, 668, 671, 732, 734, 736, 739, 246, 0,
	0, 0, 0, 0, 187, 228, 0, 247, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 275, 287, 669, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 717, 212, 213, 214, 215, 667, 0,
	155, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 181, 0, 183, 154, 227, 177, 284, 190,
	0, 219, 186, 251, 191, 197, 239, 283, 225, 244,
	152, 274, 252, 201, 176, 745, 725, 744, 746, 747,
	743, 748, 749, 733, 688, 0, 741, 740, 742, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 195, 0, 236, 173, 631, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	644, 645, 116, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 715, 0, 290, 291, 292, 276, 0,
	0, 0, 0, 224, 0, 0, 0, 0, 0, 0,
	0, 686, 0, 0, 0, 168, 0, 0, 194, 0,
	0, 0, 253, 208, 0, 0, 0, 0, 729, 735,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 679,
	0, 0, 0, 629, 721, 720, 695, 704, 0, 0,
	150, 696, 0, 703, 697, 701, 700, 698, 699, 0,
	666, 0, 0, 0, 0, 0, 0, 627, 683, 0,
	687, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 680, 681, 624, 0, 0, 0, 716, 0, 682,
	0, 0, 718, 0, 705, 0, 142, 258, 272, 151,
	249, 285, 156, 256, 147, 223, 245, 0, 0, 144,
	270, 255, 205, 188, 189, 143, 0, 240, 166, 180,
	163, 221, 702, 714, 672, 162, 670, 713, 280, 146,
	0, 279, 220, 267, 271, 206, 200, 145, 269, 204,
	199, 192, 170, 184, 232, 198, 233, 185, 210, 209,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 711, 0,
	0, 282, 0, 0, 728, 0, 0, 0, 257, 0,
	0, 193, 0, 0, 0, 673, 0, 243, 226, 738,
	0, 0, 241, 196, 268, 234, 273, 259, 281, 237,
	235, 138, 260, 165, 207, 148, 149, 161, 167, 169,
	171, 172, 216, 217, 229, 248, 261, 262, 263, 164,
	157, 242, 158, 182, 159, 139, 250, 160, 140, 230,
	266, 0, 178, 238, 203, 141, 202, 231, 265, 264,
	289, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 175, 0,
	277, 726, 222, 737, 722, 723, 724, 727, 730, 731,
	668, 671, 732, 734, 736, 739, 246, 0, 0, 0,
	0, 0, 187, 228, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 275,
	287, 669, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 717, 212, 213, 214, 215, 667, 0, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	181, 0, 183, 154, 227, 177, 284, 190, 0, 219,
	186, 251, 191, 197, 239, 283, 225, 244, 152, 274,
	252, 201, 176, 745, 725, 744, 746, 747, 743, 748,
	749, 733, 688, 0, 741, 740, 742, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 195, 0, 236, 173, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
	116, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 661, 662, 663, 664,
	665, 715, 0, 290, 291, 292, 276, 0, 0, 0,
	0, 224, 0, 0, 0, 0, 0, 0, 0, 686,
	0, 0, 0, 168, 0, 0, 194, 0, 0, 0,
	253, 208, 0, 0, 0, 0, 729, 735, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 679, 0, 0,
	0, 629, 721, 720, 695, 704, 0, 0, 150, 696,
	0, 703, 697, 701, 700, 698, 699, 0, 666, 0,
	0, 0, 0, 0, 0, 627, 683, 0, 687, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 680,
	681, 0, 0, 0, 0, 716, 0, 682, 0, 0,
	718, 0, 705, 0, 142, 258, 272, 151, 249, 285,
	156, 256, 147, 223, 245, 0, 0, 144, 270, 255,
	205, 188, 189, 143, 0, 240, 166, 180, 163, 221,
	702, 714, 672, 162, 670, 713, 280, 146, 0, 279,
	220, 267, 271, 206, 200, 145, 269, 204, 199, 192,
	170, 184, 232, 198, 233, 185, 210, 209, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 711, 0, 0, 282,
	0, 0, 728, 0, 0, 0, 257, 0, 0, 193,
	0, 0, 0, 673, 0, 243, 226, 738, 0, 0,
	241, 196, 268, 234, 273, 259, 281, 237, 235, 138,
	260, 165, 207, 148, 149, 161, 167, 169, 171, 172,
	216, 217, 229, 248, 261, 262, 263, 164, 157, 242,
	158, 182, 159, 139, 250, 160, 140, 230, 266, 0,
	178, 238, 203, 141, 202, 231, 265, 264, 289, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 175, 0, 277, 726,
	222, 737, 722, 723, 724, 727, 730, 731, 668, 671,
	732, 734, 736, 739, 246, 0, 0, 0, 0, 0,
	187, 228, 0, 247, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 275, 287, 669,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 717,
	212, 213, 214, 215, 667, 0, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 181, 0,
	183, 154, 227, 177, 284, 190, 0, 219, 186, 251,
	191, 197, 239, 283, 225, 244, 152, 274, 252, 201,
	176, 745, 725, 744, 746, 747, 743, 748, 749, 733,
	688, 0, 741, 740, 742, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 195,
	0, 236, 173, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 641, 642, 643, 644, 645, 116, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 715,
	0, 290, 291, 292, 276, 0, 0, 0, 0, 224,
	0, 0, 0, 1279, 0, 0, 0, 686, 0, 0,
	0, 168, 0, 0, 194, 0, 0, 0, 253, 208,
	0, 0, 0, 0, 729, 735, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 679, 0, 0, 0, 629,
	721, 720, 695, 704, 0, 0, 150, 696, 0, 703,
	697, 701, 700, 698, 699, 0, 666, 0, 0, 0,
	0, 0, 0, 0, 683, 0, 687, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 680, 681, 0,
	0, 0, 0, 716, 0, 682, 0, 0, 718, 0,
	705, 0, 142, 258, 272, 151, 249, 285, 156, 256,
	147, 223, 245, 0, 0, 144, 270, 255, 205, 188,
	189, 143, 0, 240, 166, 180, 163, 221, 702, 714,
	672, 162, 670, 713, 280, 146, 0, 279, 220, 267,
	271, 206, 200, 145, 269, 204, 199, 192, 170, 184,
	232, 198, 233, 185, 210, 209, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 711, 0, 0, 282, 0, 0,
	728, 0, 0, 0, 257, 0, 0, 193, 0, 0,
	0, 673, 0, 243, 226, 738, 0, 0, 241, 196,
	268, 234, 273, 259, 281, 237, 235, 138, 260, 165,
	207, 148, 149, 161, 167, 169, 171, 172, 216, 217,
	229, 248, 261, 262, 263, 164, 157, 242, 158, 182,
	159, 139, 250, 160, 140, 230, 266, 0, 178, 238,
	203, 141, 202, 231, 265, 264, 289, 1280, 1281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 175, 0, 277, 726, 222, 737,
	722, 723, 724, 727, 730, 731, 668, 671, 732, 734,
	736, 739, 246, 0, 0, 0, 0, 0, 187, 228,
	0, 247, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 275, 287, 669, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 717, 212, 213,
	214, 215, 667, 0, 155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 181, 0, 183, 154,
	227, 177, 284, 190, 0, 219, 186, 251, 191, 197,
	239, 283, 225, 244, 152, 274, 252, 201, 176, 745,
	725, 744, 746, 747, 743, 748, 749, 733, 688, 0,
	741, 740, 742, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 195, 0, 236,
	173, 631, 632, 633, 634, 635, 636, 637, 638, 639,
	640, 641, 642, 643, 644, 645, 116, 646, 647, 648,
	649, 650, 651, 652, 653, 654, 655, 656, 657, 658,
	659, 660, 661, 662, 663, 664, 665, 715, 0, 290,
	291, 292, 276, 0, 0, 0, 0, 224, 0, 0,
	0, 0, 0, 0, 0, 686, 0, 0, 0, 168,
	0, 0, 194, 0, 0, 0, 253, 208, 0, 0,
	0, 0, 729, 735, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 679, 0, 0, 0, 629, 721, 720,
	695, 704, 0, 0, 150, 696, 0, 703, 697, 701,
	700, 698, 699, 0, 666, 0, 0, 0, 0, 0,
	0, 0, 683, 0, 687, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 680, 681, 0, 0, 0,
	0, 716, 0, 682, 0, 0, 718, 0, 705, 0,
	142, 258, 272, 151, 249, 285, 156, 256, 147, 223,
	245, 0, 0, 144, 270, 255, 205, 188, 189, 143,
	0, 240, 166, 180, 163, 221, 702, 714, 672, 162,
	670, 713, 280, 146, 0, 279, 220, 267, 271, 206,
	200, 145, 269, 204, 199, 192, 170, 184, 232, 198,
	233, 185, 210, 209, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 711, 0, 0, 282, 0, 0, 728, 0,
	0, 0, 257, 0, 0, 193, 0, 0, 0, 673,
	0, 243, 226, 738, 0, 0, 241, 196, 268, 234,
	273, 259, 281, 237, 235, 138, 260, 165, 207, 148,
	149, 161, 167, 169, 171, 172, 216, 217, 229, 248,
	261, 262, 263, 164, 157, 242, 158, 182, 159, 139,
	250, 160, 140, 230, 266, 0, 178, 238, 203, 141,
	202, 231, 265, 264, 289, 295, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 175, 0, 277, 726, 222, 737, 722, 723,
	724, 727, 730, 731, 668, 671, 732, 734, 736, 739,
	246, 0, 0, 0, 0, 0, 187, 228, 0, 247,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 275, 287, 669, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 717, 212, 213, 214, 215,
	667, 0, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 181, 0, 183, 154, 227, 177,
	284, 190, 0, 219, 186, 251, 191, 197, 239, 283,
	225, 244, 152, 274, 252, 201, 176, 745, 725, 744,
	746, 747, 743, 748, 749, 733, 688, 0, 741, 740,
	742, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 195, 0, 236, 173, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 645, 116, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 715, 0, 290, 291, 292,
	276, 0, 0, 0, 0, 224, 0, 0, 0, 0,
	0, 0, 0, 686, 0, 0, 0, 168, 0, 0,
	194, 0, 0, 0, 253, 208, 0, 0, 0, 0,
	729, 735, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 629, 721, 720, 695, 704,
	0, 0, 150, 696, 0, 703, 697, 701, 700, 698,
	699, 0, 666, 0, 0, 0, 0, 0, 0, 627,
	683, 0, 687, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 680, 681, 0, 0, 0, 0, 716,
	0, 682, 0, 0, 718, 0, 705, 0, 142, 258,
	272, 151, 249, 285, 156, 256, 147, 223, 245, 0,
	0, 144, 270, 255, 205, 188, 189, 143, 0, 240,
	166, 180, 163, 221, 702, 714, 672, 162, 670, 713,
	280, 146, 0, 279, 220, 267, 271, 206, 200, 145,
	269, 204, 199, 192, 170, 184, 232, 198, 233, 185,
	210, 209, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	711, 0, 0, 282, 0, 0, 728, 0, 0, 0,
	257, 0, 0, 193, 0, 0, 0, 673, 0, 243,
	226, 738, 0, 0, 241, 196, 268, 234, 273, 259,
	281, 237, 235, 138, 260, 165, 207, 148, 149, 161,
	167, 169, 171, 172, 216, 217, 229, 248, 261, 262,
	263, 164, 157, 242, 158, 182, 159, 139, 250, 160,
	140, 230, 266, 0, 178, 238, 203, 141, 202, 231,
	265, 264, 289, 295, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	175, 0, 277, 726, 222, 737, 722, 723, 724, 727,
	730, 731, 668, 671, 732, 734, 736, 739, 246, 0,
	0, 0, 0, 0, 187, 228, 0, 247, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 275, 287, 669, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 717, 212, 213, 214, 215, 667, 0,
	155, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 181, 0, 183, 154, 227, 177, 284, 190,
	0, 219, 186, 251, 191, 197, 239, 283, 225, 244,
	152, 274, 252, 201, 176, 745, 725, 744, 746, 747,
	743, 748, 749, 733, 688, 0, 741, 740, 742, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 195, 0, 236, 173, 631, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	644, 645, 116, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 0, 0, 290, 291, 292, 276, 344,
	0, 343, 347, 339, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 0, 335, 0, 0, 0, 0,
	0, 0, 0, 168, 0, 354, 194, 0, 0, 0,
	253, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 357, 0, 0, 358, 0, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	344, 0, 343, 347, 339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 354, 0, 0, 0,
	0, 0, 0, 0, 142, 258, 272, 151, 249, 285,
	156, 256, 147, 223, 245, 0, 0, 144, 270, 255,
	205, 188, 189, 143, 0, 240, 166, 180, 163, 221,
	0, 0, 297, 162, 288, 0, 280, 146, 0, 279,
	220, 267, 271, 206, 200, 145, 269, 204, 199, 192,
	170, 184, 232, 198, 233, 185, 210, 209, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	337, 336, 340, 0, 0, 0, 0, 0, 342, 282,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 193,
	346, 0, 0, 298, 0, 243, 226, 0, 0, 0,
	241, 196, 268, 234, 338, 259, 281, 237, 362, 138,
	260, 165, 207, 148, 149, 161, 167, 169, 171, 172,
	216, 217, 229, 248, 261, 262, 263, 164, 157, 242,
	158, 182, 159, 139, 250, 160, 140, 230, 266, 0,
	178, 238, 203, 141, 202, 231, 265, 264, 289, 295,
	296, 337, 336, 340, 0, 0, 0, 0, 0, 342,
	0, 0, 0, 0, 0, 294, 175, 0, 277, 0,
	222, 346, 0, 0, 0, 0, 0, 0, 218, 293,
	0, 0, 0, 0, 246, 809, 0, 0, 341, 345,
	348, 228, 349, 350, 0, 0, 351, 352, 353, 0,
	0, 355, 356, 0, 0, 0, 254, 275, 287, 278,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 179, 0, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 181, 0,
	183, 154, 227, 177, 284, 190, 0, 219, 186, 251,
	191, 197, 239, 283, 225, 244, 152, 274, 252, 201,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 341,
	345, 810, 0, 349, 811, 0, 0, 351, 352, 353,
	0, 0, 355, 356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 195,
	0, 236, 173, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 0,
	0, 290, 291, 292, 276, 344, 0, 343, 347, 339,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 0,
	0, 335, 0, 0, 0, 0, 0, 0, 0, 168,
	0, 354, 194, 0, 0, 0, 253, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 357, 0, 0,
	358, 0, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 258, 272, 151, 249, 285, 156, 256, 147, 223,
	245, 0, 0, 144, 270, 255, 205, 188, 189, 143,
	0, 240, 166, 180, 163, 221, 0, 0, 297, 162,
	288, 0, 280, 146, 0, 279, 220, 267, 271, 206,
	200, 145, 269, 204, 199, 192, 170, 184, 232, 198,
	233, 185, 210, 209, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 337, 336, 340, 0,
	0, 0, 0, 0, 342, 282, 0, 0, 0, 0,
	0, 0, 257, 0, 0, 193, 346, 0, 0, 298,
	0, 243, 226, 0, 0, 0, 241, 196, 268, 234,
	338, 259, 281, 237, 235, 138, 260, 165, 207, 148,
	149, 161, 167, 169, 171, 172, 216, 217, 229, 248,
	261, 262, 263, 164, 157, 242, 158, 182, 159, 139,
	250, 160, 140, 230, 266, 0, 178, 238, 203, 141,
	202, 231, 265, 264, 289, 295, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 175, 0, 277, 0, 222, 0, 0, 0,
	0, 0, 0, 0, 218, 293, 0, 0, 0, 0,
	246, 0, 0, 0, 341, 345, 348, 228, 349, 350,
	0, 0, 351, 352, 353, 0, 0, 355, 356, 0,
	0, 0, 254, 275, 287, 278, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	179, 0, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 181, 0, 183, 154, 227, 177,
	284, 190, 0, 219, 186, 251, 191, 197, 239, 283,
	225, 244, 152, 274, 252, 201, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 195, 0, 236, 173, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 0, 0, 290, 291, 292,
	276, 92, 0, 26, 48, 67, 0, 0, 0, 0,
	0, 0, 0, 224, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 168, 0, 0, 194, 0,
	0, 0, 253, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 258, 272, 151,
	249, 285, 156, 256, 147, 223, 245, 0, 0, 144,
	270, 255, 205, 188, 189, 143, 0, 240, 166, 180,
	163, 221, 0, 0, 297, 162, 288, 0, 280, 146,
	0, 279, 220, 267, 271, 206, 200, 145, 269, 204,
	199, 192, 170, 184, 232, 198, 233, 185, 210, 209,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 308, 0, 0, 0,
	0, 282, 0, 0, 0, 0, 0, 0, 257, 0,
	0, 193, 0, 0, 0, 298, 0, 243, 226, 0,
	0, 0, 241, 196, 268, 234, 273, 259, 281, 237,
	235, 138, 260, 165, 207, 148, 149, 161, 167, 169,
	171, 172, 216, 217, 229, 248, 261, 262, 263, 164,
	157, 242, 158, 182, 159, 139, 250, 160, 140, 230,
	266, 0, 178, 238, 203, 141, 202, 231, 265, 264,
	289, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 175, 0,
	277, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	218, 293, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 187, 228, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 275,
	287, 278, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 305, 307, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	181, 0, 183, 154, 227, 177, 284, 190, 0, 219,
	186, 251, 191, 197, 239, 283, 225, 244, 152, 274,
	252, 201, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 195, 68, 236, 173, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 224, 0, 290, 291, 292, 276, 0, 0, 0,
	0, 0, 0, 168, 0, 0, 194, 0, 0, 0,
	253, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 1577,
	1580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 258, 272, 151, 249, 285,
	156, 256, 147, 223, 245, 0, 0, 144, 270, 255,
	205, 188, 189, 143, 0, 240, 166, 180, 163, 221,
	0, 0, 297, 162, 288, 0, 280, 146, 0, 279,
	220, 267, 271, 206, 200, 145, 269, 204, 199, 192,
	170, 184, 232, 198, 233, 185, 210, 209, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1581, 282,
	0, 0, 0, 1574, 0, 1573, 257, 1575, 1578, 193,
	0, 0, 0, 298, 0, 243, 226, 0, 0, 0,
	241, 196, 268, 234, 273, 259, 281, 237, 235, 138,
	260, 165, 207, 148, 149, 161, 167, 169, 171, 172,
	216, 217, 229, 248, 261, 262, 263, 164, 157, 242,
	158, 182, 159, 139, 250, 160, 140, 230, 266, 1579,
	178, 238, 203, 141, 202, 231, 265, 264, 289, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 175, 0, 277, 0,
	222, 0, 0, 0, 0, 0, 0, 0, 218, 293,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	187, 228, 0, 247, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 275, 287, 278,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 179, 0, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 181, 0,
	183, 154, 227, 177, 284, 190, 0, 219, 186, 251,
	191, 197, 239, 283, 225, 244, 152, 274, 252, 201,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 195,
	0, 236, 173, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 224,
	0, 290, 291, 292, 276, 0, 913, 0, 0, 0,
	0, 168, 0, 0, 194, 0, 0, 0, 253, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 914, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 153, 0, 0, 909,
	910, 911, 908, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 258, 272, 151, 249, 285, 156, 256,
	147, 223, 245, 0, 0, 144, 270, 255, 205, 188,
	189, 143, 0, 240, 166, 180, 163, 221, 0, 0,
	297, 162, 288, 0, 280, 146, 0, 279, 220, 267,
	271, 206, 200, 145, 269, 204, 199, 192, 170, 184,
	232, 198, 233, 185, 210, 209, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 0, 0,
	0, 0, 0, 0, 257, 0, 0, 193, 0, 0,
	0, 298, 0, 243, 226, 0, 0, 0, 241, 196,
	268, 234, 273, 259, 281, 237, 235, 138, 260, 165,
	207, 148, 149, 161, 167, 169, 171, 172, 216, 217,
	229, 248, 261, 262, 263, 164, 157, 242, 158, 182,
	159, 139, 250, 160, 140, 230, 266, 0, 178, 238,
	203, 141, 202, 231, 265, 264, 289, 295, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 175, 0, 277, 0, 222, 0,
	0, 0, 0, 0, 0, 0, 218, 293, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 187, 228,
	0, 247, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 275, 287, 278, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 179, 0, 155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 181, 0, 183, 154,
	227, 177, 284, 190, 0, 219, 186, 251, 191, 197,
	239, 283, 225, 244, 152, 274, 252, 201, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 195, 0, 236,
	173, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 224, 0, 290,
	291, 292, 276, 0, 0, 0, 0, 0, 0, 168,
	419, 0, 194, 0, 0, 0, 253, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 427, 428,
	0, 0, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 258, 272, 151, 249, 285, 156, 256, 147, 223,
	245, 0, 0, 144, 270, 255, 205, 188, 189, 143,
	0, 240, 166, 180, 163, 221, 0, 0, 297, 162,
	288, 403, 280, 146, 402, 279, 220, 267, 271, 206,
	200, 145, 269, 204, 199, 192, 170, 184, 232, 198,
	233, 185, 210, 209, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 0, 0, 0, 0,
	0, 0, 257, 0, 0, 193, 0, 0, 0, 298,
	0, 243, 226, 0, 0, 0, 241, 196, 268, 234,
	273, 259, 281, 418, 235, 138, 260, 165, 207, 148,
	149, 161, 167, 169, 171, 172, 216, 217, 229, 248,
	261, 262, 263, 164, 157, 242, 158, 182, 159, 139,
	250, 160, 140, 230, 266, 0, 178, 238, 203, 141,
	202, 231, 265, 264, 289, 295, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 175, 0, 277, 0, 222, 0, 0, 0,
	0, 0, 0, 0, 218, 293, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 187, 228, 0, 247,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 275, 287, 278, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 421, 212, 213, 214, 215,
	179, 0, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 181, 0, 183, 154, 227, 177,
	284, 190, 0, 429, 424, 425, 191, 197, 239, 283,
	225, 244, 152, 274, 252, 426, 176, 0, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 195, 0, 236, 173, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 92, 0, 290, 291, 292,
	276, 0, 0, 0, 0, 0, 0, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 168,
	0, 0, 194, 0, 0, 0, 253, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 1000, 0, 98, 0, 0,
	0, 0, 0, 0, 150, 0, 0, 0, 0, 1314,
	0, 1311, 0, 0, 153, 1313, 1310, 1312, 1316, 1317,
	0, 0, 0, 1315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 258, 272, 151, 249, 285, 156, 256, 147, 223,
	245, 0, 0, 144, 270, 255, 205, 188, 189, 143,
	0, 240, 166, 180, 163, 221, 0, 0, 297, 162,
	288, 0, 280, 146, 0, 279, 220, 267, 271, 206,
	200, 145, 269, 204, 199, 192, 170, 184, 232, 198,
	233, 185, 210, 209, 211, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1321, 1322, 1323, 1324,
	1325, 1326, 1319, 1320, 0, 282, 0, 0, 0, 0,
	0, 0, 257, 0, 0, 193, 0, 0, 0, 298,
	0, 243, 226, 0, 0, 0, 241, 196, 268, 234,
	273, 259, 281, 237, 235, 138, 260, 165, 207, 148,
	149, 161, 167, 169, 171, 172, 216, 217, 229, 248,
	261, 262, 263, 164, 157, 242, 158, 182, 159, 139,
	250, 160, 140, 230, 266, 0, 178, 238, 203, 141,
	202, 231, 265, 264, 289, 295, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 175, 0, 277, 0, 222, 0, 0, 0,
	0, 0, 0, 0, 218, 293, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 187, 228, 0, 247,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 275, 287, 278, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	179, 0, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 181, 0, 183, 154, 227, 177,
	284, 190, 0, 219, 186, 251, 191, 197, 239, 283,
	225, 244, 152, 274, 252, 201, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 195, 68, 236, 173, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 224, 0, 290, 291, 292,
	276, 0, 0, 0, 0, 0, 0, 168, 0, 0,
	194, 0, 0, 0, 253, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 427, 428, 0, 0,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 432, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 258,
	272, 151, 249, 285, 156, 256, 147, 223, 245, 0,
	0, 144, 270, 255, 205, 188, 189, 143, 0, 240,
	166, 180, 163, 221, 0, 0, 297, 162, 288, 403,
	280, 146, 402, 279, 220, 267, 271, 206, 200, 145,
	269, 204, 199, 192, 170, 184, 232, 198, 233, 185,
	210, 209, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 0, 0, 0, 0, 0, 0,
	257, 0, 0, 193, 0, 0, 0, 298, 0, 243,
	226, 0, 0, 0, 241, 196, 268, 234, 273, 259,
	281, 237, 235, 138, 260, 165, 207, 148, 149, 161,
	167, 169, 171, 172, 216, 217, 229, 248, 261, 262,
	263, 164, 157, 242, 158, 182, 159, 139, 250, 160,
	140, 230, 266, 0, 178, 238, 203, 141, 202, 231,
	265, 264, 289, 295, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	175, 0, 277, 0, 222, 0, 0, 0, 0, 0,
	0, 0, 218, 293, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 187, 228, 0, 247, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 275, 287, 278, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 179, 0,
	155, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 181, 0, 183, 154, 227, 177, 284, 190,
	0, 429, 424, 425, 191, 197, 239, 283, 225, 244,
	152, 274, 252, 426, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 195, 0, 236, 173, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 0, 0, 290, 291, 292, 276, 224,
	0, 0, 0, 586, 0, 0, 0, 0, 0, 0,
	0, 168, 587, 0, 194, 0, 0, 0, 253, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 357,
	0, 0, 358, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 258, 272, 151, 249, 285, 156, 256,
	147, 223, 245, 0, 0, 144, 270, 255, 205, 188,
	189, 143, 0, 240, 166, 180, 163, 221, 0, 0,
	297, 162, 288, 0, 280, 146, 0, 279, 220, 267,
	271, 206, 200, 145, 269, 204, 199, 192, 170, 184,
	232, 198, 233, 185, 210, 209, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 0, 0,
	0, 0, 0, 0, 257, 0, 0, 193, 0, 0,
	0, 298, 0, 243, 226, 0, 0, 0, 241, 196,
	268, 234, 273, 259, 281, 237, 235, 138, 260, 165,
	207, 148, 149, 161, 167, 169, 171, 172, 216, 217,
	229, 248, 261, 262, 263, 164, 157, 242, 158, 182,
	159, 139, 250, 160, 140, 230, 266, 0, 178, 238,
	203, 141, 202, 231, 265, 264, 289, 295, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 175, 0, 277, 0, 222, 0,
	0, 0, 0, 0, 0, 0, 218, 293, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 187, 228,
	0, 247, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 275, 287, 278, 0, 0,
	0, 286, 0, 0, 0, 0, 588, 0, 212, 213,
	214, 215, 179, 0, 155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 181, 0, 183, 154,
	227, 177, 284, 190, 0, 219, 186, 251, 191, 197,
	239, 283, 225, 244, 152, 274, 252, 201, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 195, 0, 236,
	173, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 0, 0, 290,
	291, 292, 276, 224, 0, 0, 0, 874, 0, 0,
	0, 0, 0, 0, 0, 168, 0, 0, 194, 0,
	0, 0, 253, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 357, 0, 0, 358, 0, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 258, 272, 151,
	249, 285, 156, 256, 147, 223, 245, 0, 0, 144,
	270, 255, 205, 188, 189, 143, 0, 240, 166, 180,
	163, 221, 0, 0, 297, 162, 288, 0, 280, 146,
	0, 279, 220, 267, 271, 206, 200, 145, 269, 204,
	199, 192, 170, 184, 232, 198, 233, 185, 210, 209,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 0, 0, 0, 0, 0, 0, 257, 0,
	0, 193, 0, 0, 0, 298, 0, 243, 226, 0,
	0, 0, 241, 196, 268, 234, 273, 259, 281, 237,
	235, 138, 260, 165, 207, 148, 149, 161, 167, 169,
	171, 172, 216, 217, 229, 248, 261, 262, 263, 164,
	157, 242, 158, 182, 159, 139, 250, 160, 140, 230,
	266, 0, 178, 238, 203, 141, 202, 231, 265, 264,
	289, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 175, 0,
	277, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	218, 293, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 187, 228, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 275,
	287, 278, 0, 0, 0, 286, 0, 0, 0, 0,
	873, 0, 212, 213, 214, 215, 179, 0, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	181, 0, 183, 154, 227, 177, 284, 190, 0, 219,
	186, 251, 191, 197, 239, 283, 225, 244, 152, 274,
	252, 201, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 195, 0, 236, 173, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 224, 0, 290, 291, 292, 276, 0, 0, 0,
	0, 0, 0, 168, 608, 0, 194, 0, 0, 0,
	253, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 606, 0, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 0, 0, 0, 142, 258, 272, 151, 249, 285,
	156, 256, 147, 223, 245, 0, 0, 144, 270, 255,
	205, 188, 189, 143, 0, 240, 166, 180, 163, 221,
	0, 0, 297, 162, 288, 0, 280, 146, 0, 279,
	220, 267, 271, 206, 200, 145, 269, 204, 199, 192,
	170, 184, 232, 198, 233, 185, 210, 209, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 193,
	0, 0, 0, 298, 0, 243, 226, 0, 0, 0,
	241, 196, 268, 234, 273, 259, 281, 237, 235, 138,
	260, 165, 207, 148, 149, 161, 167, 169, 171, 172,
	216, 217, 229, 248, 261, 262, 263, 164, 157, 242,
	158, 182, 159, 139, 250, 160, 140, 230, 266, 0,
	178, 238, 203, 141, 202, 231, 265, 264, 289, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 175, 0, 277, 0,
	222, 0, 0, 0, 0, 0, 0, 0, 218, 293,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	187, 228, 0, 247, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 275, 287, 278,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 179, 0, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 181, 0,
	183, 154, 227, 177, 284, 190, 0, 219, 186, 251,
	191, 197, 239, 283, 225, 244, 152, 274, 252, 201,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 195,
	0, 236, 173, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 224,
	0, 290, 291, 292, 276, 0, 0, 0, 0, 0,
	0, 168, 603, 0, 194, 0, 0, 0, 253, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 606, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 0,
	0, 0, 142, 258, 272, 151, 249, 285, 156, 256,
	147, 223, 245, 0, 0, 144, 270, 255, 205, 188,
	189, 143, 0, 240, 166, 180, 163, 221, 0, 0,
	297, 162, 288, 0, 280, 146, 0, 279, 220, 267,
	271, 206, 200, 145, 269, 204, 199, 192, 170, 184,
	232, 198, 233, 185, 210, 209, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 0, 0,
	0, 0, 0, 0, 257, 0, 0, 193, 0, 0,
	0, 298, 0, 243, 226, 0, 0, 0, 241, 196,
	268, 234, 273, 259, 281, 237, 235, 138, 260, 165,
	207, 148, 149, 161, 167, 169, 171, 172, 216, 217,
	229, 248, 261, 262, 263, 164, 157, 242, 158, 182,
	159, 139, 250, 160, 140, 230, 266, 0, 178, 238,
	203, 141, 202, 231, 265, 264, 289, 295, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 175, 0, 277, 0, 222, 0,
	0, 0, 0, 0, 0, 0, 218, 293, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 187, 228,
	0, 247, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 275, 287, 278, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 179, 0, 155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 181, 0, 183, 154,
	227, 177, 284, 190, 0, 219, 186, 251, 191, 197,
	239, 283, 225, 244, 152, 274, 252, 201, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 195, 0, 236,
	173, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 224, 0, 290,
	291, 292, 276, 0, 0, 0, 0, 0, 0, 168,
	0, 0, 194, 0, 0, 0, 253, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2167, 0, 98, 721, 0,
	0, 0, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 258, 272, 151, 249, 285, 156, 256, 147, 223,
	245, 0, 0, 144, 270, 255, 205, 188, 189, 143,
	0, 240, 166, 180, 163, 221, 0, 0, 297, 162,
	288, 0, 280, 146, 0, 279, 220, 267, 271, 206,
	200, 145, 269, 204, 199, 192, 170, 184, 232, 198,
	233, 185, 210, 209, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 0, 0, 0, 0,
	0, 0, 257, 0, 0, 193, 0, 0, 0, 298,
	0, 243, 226, 0, 0, 0, 241, 196, 268, 234,
	273, 259, 281, 237, 235, 138, 260, 165, 207, 148,
	149, 161, 167, 169, 171, 172, 216, 217, 229, 248,
	261, 262, 263, 164, 157, 242, 158, 182, 159, 139,
	250, 160, 140, 230, 266, 0, 178, 238, 203, 141,
	202, 231, 265, 264, 289, 295, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 175, 0, 277, 0, 222, 0, 0, 0,
	0, 0, 0, 0, 218, 293, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 187, 228, 0, 247,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 275, 287, 278, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	179, 0, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 181, 0, 183, 154, 227, 177,
	284, 190, 0, 219, 186, 251, 191, 197, 239, 283,
	225, 244, 152, 274, 252, 201, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 195, 0, 236, 173, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 224, 0, 290, 291, 292,
	276, 0, 0, 0, 0, 0, 0, 168, 0, 0,
	194, 0, 0, 0, 253, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 0, 606, 0,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 0, 0, 0, 142, 258,
	272, 151, 249, 285, 156, 256, 147, 223, 245, 0,
	0, 144, 270, 255, 205, 188, 189, 143, 0, 240,
	166, 180, 163, 221, 0, 0, 297, 162, 288, 0,
	280, 146, 0, 279, 220, 267, 271, 206, 200, 145,
	269, 204, 199, 192, 170, 184, 232, 198, 233, 185,
	210, 209, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 0, 0, 0, 0, 0, 0,
	257, 0, 0, 193, 0, 0, 0, 298, 0, 243,
	226, 0, 0, 0, 241, 196, 268, 234, 273, 259,
	281, 237, 235, 138, 260, 165, 207, 148, 149, 161,
	167, 169, 171, 172, 216, 217, 229, 248, 261, 262,
	263, 164, 157, 242, 158, 182, 159, 139, 250, 160,
	140, 230, 266, 0, 178, 238, 203, 141, 202, 231,
	265, 264, 289, 295, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	175, 0, 277, 0, 222, 0, 0, 0, 0, 0,
	0, 0, 218, 293, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 187, 228, 0, 247, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 275, 287, 278, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 179, 0,
	155, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 181, 0, 183, 154, 227, 177, 284, 190,
	0, 219, 186, 251, 191, 197, 239, 283, 225, 244,
	152, 274, 252, 201, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 195, 0, 236, 173, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 224, 0, 290, 291, 292, 276, 0,
	0, 0, 0, 0, 0, 168, 0, 0, 194, 0,
	0, 0, 253, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 606, 0, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1756, 0, 0, 0, 142, 258, 272, 151,
	249, 285, 156, 256, 147, 223, 245, 0, 0, 144,
	270, 255, 205, 188, 189, 143, 0, 240, 166, 180,
	163, 221, 0, 0, 297, 162, 288, 0, 280, 146,
	0, 279, 220, 267, 271, 206, 200, 145, 269, 204,
	199, 192, 170, 184, 232, 198, 233, 185, 210, 209,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 0, 0, 0, 0, 0, 0, 257, 0,
	0, 193, 0, 0, 0, 298, 0, 243, 226, 0,
	0, 0, 241, 196, 268, 234, 273, 259, 281, 237,
	235, 138, 260, 165, 207, 148, 149, 161, 167, 169,
	171, 172, 216, 217, 229, 248, 261, 262, 263, 164,
	157, 242, 158, 182, 159, 139, 250, 160, 140, 230,
	266, 0, 178, 238, 203, 141, 202, 231, 265, 264,
	289, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 175, 0,
	277, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	218, 293, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 187, 228, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 275,
	287, 278, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 179, 0, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	181, 0, 183, 154, 227, 177, 284, 190, 0, 219,
	186, 251, 191, 197, 239, 283, 225, 244, 152, 274,
	252, 201, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 195, 0, 236, 173, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 224, 0, 290, 291, 292, 276, 0, 0, 0,
	0, 0, 0, 168, 0, 0, 194, 0, 0, 0,
	253, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 606, 0, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 258, 272, 151, 249, 285,
	156, 256, 147, 223, 245, 0, 0, 144, 270, 255,
	205, 188, 189, 143, 0, 240, 166, 180, 163, 221,
	0, 0, 297, 162, 288, 0, 280, 146, 0, 279,
	220, 267, 271, 206, 200, 145, 269, 204, 199, 192,
	170, 184, 232, 198, 233, 185, 210, 209, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 193,
	0, 0, 0, 298, 0, 243, 226, 0, 0, 0,
	241, 196, 268, 234, 273, 259, 281, 237, 235, 138,
	260, 165, 207, 148, 149, 161, 167, 169, 171, 172,
	216, 217, 229, 248, 261, 262, 263, 164, 157, 242,
	158, 182, 159, 139, 250, 160, 140, 230, 266, 0,
	178, 238, 203, 141, 202, 231, 265, 264, 289, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 175, 0, 277, 0,
	222, 0, 0, 0, 0, 0, 0, 0, 218, 293,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	187, 228, 0, 247, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 275, 287, 278,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 1552,
	212, 213, 214, 215, 179, 0, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 181, 0,
	183, 154, 227, 177, 284, 190, 0, 219, 186, 251,
	191, 197, 239, 283, 225, 244, 152, 274, 252, 201,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 195,
	0, 236, 173, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 224,
	0, 290, 291, 292, 276, 0, 0, 0, 0, 0,
	0, 168, 1254, 0, 194, 0, 0, 0, 253, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 606, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 258, 272, 151, 249, 285, 156, 256,
	147, 223, 245, 0, 0, 144, 270, 255, 205, 188,
	189, 143, 0, 240, 166, 180, 163, 221, 0, 0,
	297, 162, 288, 0, 280, 146, 0, 279, 220, 267,
	271, 206, 200, 145, 269, 204, 199, 192, 170, 184,
	232, 198, 233, 185, 210, 209, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 0, 0,
	0, 0, 0, 0, 257, 0, 0, 193, 0, 0,
	0, 298, 0, 243, 226, 0, 0, 0, 241, 196,
	268, 234, 273, 259, 281, 237, 235, 138, 260, 165,
	207, 148, 149, 161, 167, 169, 171, 172, 216, 217,
	229, 248, 261, 262, 263, 164, 157, 242, 158, 182,
	159, 139, 250, 160, 140, 230, 266, 0, 178, 238,
	203, 141, 202, 231, 265, 264, 289, 295, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 175, 0, 277, 0, 222, 0,
	0, 0, 0, 0, 0, 0, 218, 293, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 187, 228,
	0, 247, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 275, 287, 278, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 179, 0, 155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 181, 0, 183, 154,
	227, 177, 284, 190, 0, 219, 186, 251, 191, 197,
	239, 283, 225, 244, 152, 274, 252, 201, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 195, 0, 236,
	173, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 224, 0, 290,
	291, 292, 276, 0, 0, 0, 0, 0, 0, 168,
	0, 0, 194, 0, 0, 0, 253, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 721, 0,
	0, 0, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 258, 272, 151, 249, 285, 156, 256, 147, 223,
	245, 0, 0, 144, 270, 255, 205, 188, 189, 143,
	0, 240, 166, 180, 163, 221, 0, 0, 297, 162,
	288, 0, 280, 146, 0, 279, 220, 267, 271, 206,
	200, 145, 269, 204, 199, 192, 170, 184, 232, 198,
	233, 185, 210, 209, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 0, 0, 0, 0,
	0, 0, 257, 0, 0, 193, 0, 0, 0, 298,
	0, 243, 226, 0, 0, 0, 241, 196, 268, 234,
	273, 259, 281, 237, 235, 138, 260, 165, 207, 148,
	149, 161, 167, 169, 171, 172, 216, 217, 229, 248,
	261, 262, 263, 164, 157, 242, 158, 182, 159, 139,
	250, 160, 140, 230, 266, 0, 178, 238, 203, 141,
	202, 231, 265, 264, 289, 295, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 175, 0, 277, 0, 222, 0, 0, 0,
	0, 0, 0, 0, 218, 293, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 187, 228, 0, 247,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 275, 287, 278, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	179, 0, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 181, 0, 183, 154, 227, 177,
	284, 190, 0, 219, 186, 251, 191, 197, 239, 283,
	225, 244, 152, 274, 252, 201, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 195, 0, 236, 173, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 224, 0, 290, 291, 292,
	276, 0, 0, 0, 0, 0, 0, 168, 0, 0,
	194, 0, 0, 0, 253, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1897, 0, 0, 0, 98, 0, 0, 0, 0,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 258,
	272, 151, 249, 285, 156, 256, 147, 223, 245, 0,
	0, 144, 270, 255, 205, 188, 189, 143, 0, 240,
	166, 180, 163, 221, 0, 0, 297, 162, 288, 0,
	280, 146, 0, 279, 220, 267, 271, 206, 200, 145,
	269, 204, 199, 192, 170, 184, 232, 198, 233, 185,
	210, 209, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 0, 0, 0, 0, 0, 0,
	257, 0, 0, 193, 0, 0, 0, 298, 0, 243,
	226, 0, 0, 0, 241, 196, 268, 234, 273, 259,
	281, 237, 235, 138, 260, 165, 207, 148, 149, 161,
	167, 169, 171, 172, 216, 217, 229, 248, 261, 262,
	263, 164, 157, 242, 158, 182, 159, 139, 250, 160,
	140, 230, 266, 0, 178, 238, 203, 141, 202, 231,
	265, 264, 289, 295, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	175, 0, 277, 0, 222, 0, 0, 0, 0, 0,
	0, 0, 218, 293, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 187, 228, 0, 247, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 275, 287, 278, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 179, 0,
	155, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 181, 0, 183, 154, 227, 177, 284, 190,
	0, 219, 186, 251, 191, 197, 239, 283, 225, 244,
	152, 274, 252, 201, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 195, 0, 236, 173, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 224, 0, 290, 291, 292, 276, 0,
	0, 0, 0, 0, 0, 168, 0, 0, 194, 0,
	0, 0, 253, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 606, 0, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 258, 272, 151,
	249, 285, 156, 256, 147, 223, 245, 0, 0, 144,
	270, 255, 205, 188, 189, 143, 0, 240, 166, 180,
	163, 221, 0, 0, 297, 162, 288, 0, 280, 146,
	0, 279, 220, 267, 271, 206, 200, 145, 269, 204,
	199, 192, 170, 184, 232, 198, 233, 185, 210, 209,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 0, 0, 0, 0, 0, 0, 257, 0,
	0, 193, 0, 0, 0, 298, 0, 243, 226, 0,
	0, 0, 241, 196, 268, 234, 273, 259, 281, 237,
	235, 138, 260, 165, 207, 148, 149, 161, 167, 169,
	171, 172, 216, 217, 229, 248, 261, 262, 263, 164,
	157, 242, 158, 182, 159, 139, 250, 160, 140, 230,
	266, 0, 178, 238, 203, 141, 202, 231, 265, 264,
	289, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 175, 0,
	277, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	218, 293, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 187, 228, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 275,
	287, 278, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 179, 0, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	181, 0, 183, 154, 227, 177, 284, 190, 0, 219,
	186, 251, 191, 197, 239, 283, 225, 244, 152, 274,
	252, 201, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 195, 0, 236, 173, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 224, 0, 290, 291, 292, 276, 0, 0, 0,
	0, 0, 0, 168, 0, 0, 194, 0, 0, 0,
	253, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1605, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 258, 272, 151, 249, 285,
	156, 256, 147, 223, 245, 0, 0, 144, 270, 255,
	205, 188, 189, 143, 0, 240, 166, 180, 163, 221,
	0, 0, 297, 162, 288, 0, 280, 146, 0, 279,
	220, 267, 271, 206, 200, 145, 269, 204, 199, 192,
	170, 184, 232, 198, 233, 185, 210, 209, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 193,
	0, 0, 0, 298, 0, 243, 226, 0, 0, 0,
	241, 196, 268, 234, 273, 259, 281, 237, 235, 138,
	260, 165, 207, 148, 149, 161, 167, 169, 171, 172,
	216, 217, 229, 248, 261, 262, 263, 164, 157, 242,
	158, 182, 159, 139, 250, 160, 140, 230, 266, 0,
	178, 238, 203, 141, 202, 231, 265, 264, 289, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 175, 0, 277, 0,
	222, 0, 0, 0, 0, 0, 0, 0, 218, 293,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	187, 228, 0, 247, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 275, 287, 278,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 179, 0, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 181, 0,
	183, 154, 227, 177, 284, 190, 0, 219, 186, 251,
	191, 197, 239, 283, 225, 244, 152, 274, 252, 201,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 195,
	0, 236, 173, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 224,
	0, 290, 291, 292, 276, 0, 0, 0, 0, 0,
	0, 168, 0, 0, 194, 0, 0, 0, 253, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 258, 272, 151, 249, 285, 156, 256,
	147, 223, 245, 0, 0, 144, 270, 255, 205, 188,
	189, 143, 0, 240, 166, 180, 163, 221, 0, 0,
	297, 162, 288, 0, 280, 146, 0, 279, 220, 267,
	271, 206, 200, 145, 269, 204, 199, 192, 170, 184,
	232, 198, 233, 185, 210, 209, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 0, 0,
	0, 0, 0, 0, 257, 0, 0, 193, 0, 0,
	0, 298, 0, 243, 226, 0, 0, 0, 241, 196,
	268, 234, 273, 259, 281, 237, 235, 138, 260, 165,
	207, 148, 149, 161, 167, 169, 171, 172, 216, 217,
	229, 248, 261, 262, 263, 164, 157, 242, 158, 182,
	159, 139, 250, 160, 140, 230, 266, 0, 178, 238,
	203, 141, 202, 231, 265, 264, 289, 295, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 175, 0, 277, 0, 222, 0,
	0, 0, 0, 0, 0, 0, 218, 293, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 187, 228,
	0, 247, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 275, 287, 278, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 179, 0, 155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 181, 0, 183, 154,
	227, 177, 284, 190, 0, 219, 186, 251, 191, 197,
	239, 283, 225, 244, 152, 274, 252, 201, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 195, 0, 236,
	173, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 224, 0, 290,
	291, 292, 276, 0, 0, 0, 0, 0, 0, 168,
	0, 0, 194, 0, 0, 0, 253, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1623, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 258, 272, 151, 249, 285, 156, 256, 147, 223,
	245, 0, 0, 144, 270, 255, 205, 188, 189, 143,
	0, 240, 166, 180, 163, 221, 0, 0, 297, 162,
	288, 0, 280, 146, 0, 279, 220, 267, 271, 206,
	200, 145, 269, 204, 199, 192, 170, 184, 232, 198,
	233, 185, 210, 209, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 0, 0, 0, 0,
	0, 0, 257, 0, 0, 193, 0, 0, 0, 298,
	0, 243, 226, 0, 0, 0, 241, 196, 268, 234,
	273, 259, 281, 237, 235, 138, 260, 165, 207, 148,
	149, 161, 167, 169, 171, 172, 216, 217, 229, 248,
	261, 262, 263, 164, 157, 242, 158, 182, 159, 139,
	250, 160, 140, 230, 266, 0, 178, 238, 203, 141,
	202, 231, 265, 264, 289, 295, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 175, 0, 277, 0, 222, 0, 0, 0,
	0, 0, 0, 0, 218, 293, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 187, 228, 0, 247,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 275, 287, 278, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	179, 0, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 181, 0, 183, 154, 227, 177,
	284, 190, 0, 219, 186, 251, 191, 197, 239, 283,
	225, 244, 152, 274, 252, 201, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 195, 0, 236, 173, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 224, 0, 290, 291, 292,
	276, 0, 0, 0, 0, 0, 0, 168, 0, 0,
	194, 0, 0, 0, 253, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 0,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 258,
	272, 151, 249, 285, 156, 256, 147, 223, 245, 0,
	0, 144, 270, 255, 205, 188, 189, 143, 0, 240,
	166, 180, 163, 221, 0, 0, 297, 162, 288, 0,
	280, 146, 0, 279, 220, 267, 271, 206, 200, 145,
	269, 204, 199, 192, 170, 184, 232, 198, 233, 185,
	210, 209, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 0, 0, 0, 0, 0, 0,
	257, 0, 0, 193, 0, 0, 0, 298, 0, 243,
	226, 0, 0, 0, 241, 196, 268, 234, 273, 259,
	281, 237, 235, 138, 260, 165, 207, 148, 149, 161,
	167, 169, 171, 172, 216, 217, 229, 248, 261, 262,
	263, 164, 157, 242, 158, 182, 159, 139, 250, 160,
	140, 230, 266, 0, 178, 238, 203, 141, 202, 231,
	265, 264, 289, 295, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	175, 0, 277, 0, 222, 0, 0, 0, 0, 0,
	0, 0, 218, 293, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 187, 228, 0, 247, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 275, 287, 278, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 179, 0,
	155, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 181, 0, 183, 154, 227, 177, 284, 190,
	0, 219, 186, 251, 191, 197, 239, 283, 225, 244,
	152, 274, 252, 201, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 195, 0, 236, 173, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 224, 0, 290, 291, 292, 276, 0,
	0, 0, 0, 0, 0, 168, 0, 0, 194, 0,
	0, 0, 253, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 1268, 0, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 258, 272, 151,
	249, 285, 156, 256, 147, 223, 245, 0, 0, 144,
	270, 255, 205, 188, 189, 143, 0, 240, 166, 180,
	163, 221, 0, 0, 297, 162, 288, 0, 280, 146,
	0, 279, 220, 267, 271, 206, 200, 145, 269, 204,
	199, 192, 170, 184, 232, 198, 233, 185, 210, 209,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 0, 0, 0, 0, 0, 0, 257, 0,
	0, 193, 0, 0, 0, 298, 0, 243, 226, 0,
	0, 0, 241, 196, 268, 234, 273, 259, 281, 237,
	235, 138, 260, 165, 207, 148, 149, 161, 167, 169,
	171, 172, 216, 217, 229, 248, 261, 262, 263, 164,
	157, 242, 158, 182, 159, 139, 250, 160, 140, 230,
	266, 0, 178, 238, 203, 141, 202, 231, 265, 264,
	289, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 175, 0,
	277, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	218, 293, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 187, 228, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 275,
	287, 278, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 179, 0, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	181, 0, 183, 154, 227, 177, 284, 190, 0, 219,
	186, 251, 191, 197, 239, 283, 225, 244, 152, 274,
	252, 201, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 195, 0, 236, 173, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 224, 0, 290, 291, 292, 276, 0, 0, 0,
	0, 0, 0, 168, 0, 0, 194, 0, 0, 0,
	253, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 357, 0, 0, 358, 0, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 258, 272, 151, 249, 285,
	156, 256, 147, 223, 245, 0, 0, 144, 270, 255,
	205, 188, 189, 143, 0, 240, 166, 180, 163, 221,
	0, 0, 297, 162, 288, 0, 280, 146, 0, 279,
	220, 267, 271, 206, 200, 145, 269, 204, 199, 192,
	170, 184, 232, 198, 233, 185, 210, 209, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 193,
	0, 0, 0, 298, 0, 243, 226, 0, 0, 0,
	241, 196, 268, 234, 273, 259, 281, 237, 235, 138,
	260, 165, 207, 148, 149, 161, 167, 169, 171, 172,
	216, 217, 229, 248, 261, 262, 263, 164, 157, 242,
	158, 182, 159, 139, 250, 160, 140, 230, 266, 0,
	178, 238, 203, 141, 202, 231, 265, 264, 289, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 175, 0, 277, 0,
	222, 0, 0, 0, 0, 0, 0, 0, 218, 293,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	187, 228, 0, 247, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 275, 287, 278,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 179, 0, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 181, 0,
	183, 154, 227, 177, 284, 190, 0, 219, 186, 251,
	191, 197, 239, 283, 225, 244, 152, 274, 252, 201,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 195,
	0, 236, 173, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 1221,
	0, 290, 291, 292, 276, 0, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 168, 0,
	0, 194, 0, 0, 0, 253, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	258, 272, 151, 249, 285, 156, 256, 147, 223, 245,
	0, 0, 144, 270, 255, 205, 188, 189, 143, 0,
	240, 166, 180, 163, 221, 0, 0, 297, 162, 288,
	0, 280, 146, 0, 279, 220, 267, 271, 206, 200,
	145, 269, 204, 199, 192, 170, 184, 232, 198, 233,
	185, 210, 209, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 193, 0, 0, 0, 298, 0,
	243, 226, 0, 0, 0, 241, 196, 268, 234, 273,
	259, 281, 237, 235, 138, 260, 165, 207, 148, 149,
	161, 167, 169, 171, 172, 216, 217, 229, 248, 261,
	262, 263, 164, 157, 242, 158, 182, 159, 139, 250,
	160, 140, 230, 266, 0, 178, 238, 203, 141, 202,
	231, 265, 264, 289, 295, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 175, 0, 277, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 218, 293, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 187, 228, 0, 247, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 275, 287, 278, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 179,
	0, 155, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 181, 0, 183, 154, 227, 177, 284,
	190, 0, 219, 186, 251, 191, 197, 239, 283, 225,
	244, 152, 274, 252, 201, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 195, 0, 236, 173, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 224, 0, 290, 291, 292, 276,
	0, 0, 0, 0, 0, 0, 168, 0, 0, 194,
	0, 0, 0, 253, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 258, 272,
	151, 249, 285, 156, 256, 147, 223, 245, 0, 0,
	144, 270, 255, 205, 188, 189, 143, 0, 240, 166,
	180, 163, 221, 0, 0, 297, 162, 288, 0, 280,
	146, 0, 279, 220, 267, 271, 206, 200, 145, 269,
	204, 199, 192, 170, 184, 232, 198, 233, 185, 210,
	209, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 1208, 0, 0, 0, 257,
	0, 0, 193, 0, 0, 0, 298, 0, 243, 226,
	0, 0, 0, 241, 196, 268, 234, 273, 259, 281,
	237, 235, 138, 260, 165, 207, 148, 149, 161, 167,
	169, 171, 172, 216, 217, 229, 248, 261, 262, 263,
	164, 157, 242, 158, 182, 159, 139, 250, 160, 140,
	230, 266, 0, 178, 238, 203, 141, 202, 231, 265,
	264, 289, 295, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 175,
	0, 277, 0, 222, 0, 0, 0, 0, 0, 0,
	0, 218, 293, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 187, 228, 0, 247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	275, 287, 278, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 179, 0, 155,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 181, 0, 183, 154, 227, 177, 284, 190, 0,
	219, 186, 251, 191, 197, 239, 283, 225, 244, 152,
	274, 252, 201, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 0, 195, 0, 236, 173, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 224, 0, 290, 291, 292, 276, 0, 0,
	0, 0, 0, 0, 168, 0, 0, 194, 0, 0,
	0, 253, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 606, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 258, 272, 151, 249,
	285, 156, 256, 147, 223, 245, 0, 0, 144, 270,
	255, 205, 188, 189, 143, 0, 240, 166, 180, 163,
	221, 0, 0, 297, 162, 288, 0, 280, 146, 0,
	279, 220, 267, 271, 206, 200, 145, 269, 204, 199,
	192, 170, 184, 232, 198, 233, 185, 210, 209, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 257, 0, 0,
	193, 0, 0, 0, 298, 0, 243, 226, 0, 0,
	0, 241, 196, 268, 234, 273, 259, 281, 237, 235,
	138, 260, 165, 207, 148, 149, 161, 167, 169, 171,
	172, 216, 217, 229, 248, 261, 262, 263, 164, 157,
	242, 158, 182, 159, 139, 250, 160, 140, 230, 266,
	0, 178, 238, 203, 141, 202, 231, 265, 264, 289,
	295, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 294, 175, 0, 277,
	0, 222, 0, 0, 0, 0, 0, 0, 0, 218,
	293, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	0, 187, 228, 0, 247, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 275, 287,
	864, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 179, 0, 155, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 181,
	0, 183, 154, 227, 177, 284, 190, 0, 219, 186,
	251, 191, 197, 239, 283, 225, 244, 152, 274, 252,
	201, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 0,
	195, 0, 236, 173, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	224, 0, 290, 291, 292, 276, 0, 0, 0, 0,
	0, 0, 168, 0, 0, 194, 0, 0, 0, 253,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 258, 272, 151, 249, 285, 156,
	256, 147, 223, 245, 0, 0, 144, 270, 255, 205,
	188, 189, 143, 0, 240, 166, 180, 163, 221, 0,
	0, 297, 162, 288, 0, 280, 146, 0, 279, 220,
	267, 271, 206, 200, 145, 269, 204, 199, 192, 170,
	184, 232, 198, 233, 185, 210, 209, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 193, 0,
	0, 0, 298, 0, 243, 226, 0, 0, 0, 241,
	196, 268, 234, 273, 259, 281, 237, 235, 138, 260,
	165, 207, 148, 149, 161, 167, 169, 171, 172, 216,
	217, 229, 248, 261, 262, 263, 164, 157, 242, 158,
	182, 159, 139, 250, 160, 140, 230, 266, 0, 178,
	238, 203, 141, 202, 231, 265, 264, 289, 295, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 175, 0, 277, 0, 222,
	0, 0, 0, 0, 0, 0, 0, 218, 293, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 187,
	228, 0, 247, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 275, 287, 278, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 179, 0, 155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 181, 0, 183,
	154, 227, 177, 284, 190, 0, 219, 186, 251, 191,
	197, 239, 283, 225, 244, 152, 274, 252, 201, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 386, 0, 0, 137, 0, 195, 0,
	236, 173, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 224, 0,
	290, 291, 292, 276, 0, 0, 0, 0, 0, 95,
	168, 0, 0, 194, 0, 0, 0, 253, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 258, 272, 151, 249, 285, 156, 256, 147,
	223, 245, 0, 0, 144, 270, 255, 205, 188, 189,
	143, 0, 240, 166, 180, 163, 221, 0, 0, 297,
	162, 288, 0, 280, 146, 0, 279, 220, 267, 271,
	206, 200, 145, 269, 204, 199, 192, 170, 184, 232,
	198, 233, 185, 210, 209, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 257, 0, 0, 193, 0, 0, 0,
	298, 0, 243, 226, 0, 0, 0, 241, 196, 268,
	234, 273, 259, 281, 237, 235, 138, 260, 165, 207,
	148, 149, 161, 167, 169, 171, 172, 216, 217, 229,
	248, 261, 262, 263, 164, 157, 242, 158, 182, 159,
	139, 250, 160, 140, 230, 266, 0, 178, 238, 203,
	141, 202, 231, 265, 264, 289, 295, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 294, 175, 0, 277, 0, 222, 0, 0,
	0, 0, 0, 0, 0, 218, 293, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 0, 187, 228, 0,
	247, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 275, 287, 278, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 179, 0, 155, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 181, 0, 183, 154, 227,
	177, 284, 190, 0, 219, 186, 251, 191, 197, 239,
	283, 225, 244, 152, 274, 252, 201, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 195, 0, 236, 173,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 224, 0, 290, 291,
	292, 276, 0, 0, 0, 0, 0, 0, 168, 0,
	0, 194, 0, 0, 0, 253, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	258, 272, 151, 249, 285, 156, 256, 147, 223, 245,
	0, 0, 144, 270, 255, 205, 188, 189, 143, 0,
	240, 166, 180, 163, 221, 0, 0, 297, 162, 288,
	0, 280, 146, 0, 279, 220, 267, 271, 206, 200,
	145, 269, 204, 199, 192, 170, 184, 232, 198, 233,
	185, 210, 209, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 193, 0, 0, 0, 298, 0,
	243, 226, 0, 0, 0, 241, 196, 268, 234, 273,
	259, 281, 237, 235, 138, 260, 165, 207, 148, 149,
	161, 167, 169, 171, 172, 216, 217, 229, 248, 261,
	262, 263, 164, 157, 242, 158, 182, 159, 139, 250,
	160, 140, 230, 266, 0, 178, 238, 203, 141, 202,
	231, 265, 264, 289, 295, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 175, 0, 277, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 218, 293, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 187, 228, 0, 247, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 275, 287, 278, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 179,
	0, 155, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 181, 0, 183, 154, 227, 177, 284,
	190, 0, 219, 186, 251, 191, 197, 239, 283, 225,
	244, 152, 274, 252, 201, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 195, 0, 236, 173, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 224, 0, 290, 291, 292, 276,
	0, 497, 0, 0, 0, 0, 168, 0, 0, 194,
	0, 0, 0, 253, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 502, 503, 504, 499, 0, 0,
	0, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 258, 272,
	151, 249, 285, 156, 256, 147, 223, 245, 0, 0,
	144, 270, 255, 205, 188, 189, 143, 0, 240, 166,
	180, 163, 221, 0, 0, 297, 162, 288, 0, 280,
	146, 0, 279, 220, 267, 271, 206, 200, 145, 269,
	204, 199, 192, 170, 184, 232, 198, 233, 185, 210,
	209, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 257,
	0, 0, 193, 0, 0, 0, 298, 0, 243, 226,
	0, 0, 0, 241, 196, 268, 234, 273, 259, 281,
	237, 235, 138, 260, 165, 207, 148, 149, 161, 167,
	169, 171, 172, 216, 217, 229, 248, 261, 262, 263,
	164, 157, 242, 158, 182, 159, 139, 250, 160, 140,
	230, 266, 0, 178, 238, 203, 141, 202, 231, 265,
	264, 289, 295, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 175,
	0, 277, 0, 222, 0, 0, 0, 0, 0, 0,
	0, 218, 293, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 187, 228, 0, 247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	275, 287, 278, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 179, 0, 155,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 181, 0, 183, 154, 227, 177, 284, 190, 0,
	219, 186, 251, 191, 197, 239, 283, 225, 244, 152,
	274, 252, 201, 176, 0, 0, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 168, 0,
	0, 194, 0, 0, 0, 253, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 0, 195, 0, 236, 173, 502, 503, 504, 499,
	0, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 290, 291, 292, 276, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	258, 272, 151, 249, 285, 156, 256, 147, 223, 245,
	0, 0, 144, 270, 255, 205, 188, 189, 143, 0,
	240, 166, 180, 163, 221, 0, 0, 297, 162, 288,
	0, 280, 146, 0, 279, 220, 267, 271, 206, 200,
	145, 269, 204, 199, 192, 170, 184, 232, 198, 233,
	185, 210, 209, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 193, 0, 0, 0, 298, 0,
	243, 226, 0, 0, 0, 241, 196, 268, 234, 273,
	259, 281, 237, 235, 138, 260, 165, 207, 148, 149,
	161, 167, 169, 171, 172, 216, 217, 229, 248, 261,
	262, 263, 164, 157, 242, 158, 182, 159, 139, 250,
	160, 140, 230, 266, 0, 178, 238, 203, 141, 202,
	231, 265, 264, 289, 295, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 175, 0, 277, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 218, 293, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 187, 228, 0, 247, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 275, 287, 278, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 179,
	0, 155, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 181, 0, 183, 154, 227, 177, 284,
	190, 0, 219, 186, 251, 191, 197, 239, 283, 225,
	244, 152, 274, 252, 201, 176, 0, 0, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	168, 0, 0, 194, 0, 0, 0, 253, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 195, 0, 236, 173, 502, 503,
	504, 0, 0, 0, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 290, 291, 292, 276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 258, 272, 151, 249, 285, 156, 256, 147,
	223, 245, 0, 0, 144, 270, 255, 205, 188, 189,
	143, 0, 240, 166, 180, 163, 221, 0, 0, 297,
	162, 288, 0, 280, 146, 0, 279, 220, 267, 271,
	206, 200, 145, 269, 204, 199, 192, 170, 184, 232,
	198, 233, 185, 210, 209, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 257, 0, 0, 193, 0, 0, 0,
	298, 0, 243, 226, 0, 0, 0, 241, 196, 268,
	234, 273, 259, 281, 237, 235, 138, 260, 165, 207,
	148, 149, 161, 167, 169, 171, 172, 216, 217, 229,
	248, 261, 262, 263, 164, 157, 242, 158, 182, 159,
	139, 250, 160, 140, 230, 266, 0, 178, 238, 203,
	141, 202, 231, 265, 264, 289, 295, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 294, 175, 0, 277, 0, 222, 0, 0,
	0, 0, 0, 0, 0, 218, 293, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 0, 187, 228, 1652,
	247, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 275, 287, 278, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 179, 0, 155, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 181, 0, 183, 154, 227,
	177, 284, 190, 0, 219, 186, 251, 191, 197, 239,
	283, 225, 244, 152, 274, 252, 201, 176, 1652, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1640, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 195, 0, 236, 173,
	0, 0, 1659, 1663, 1665, 1667, 1669, 1670, 1672, 0,
	1676, 1673, 1674, 1675, 0, 0, 1654, 1655, 1656, 1657,
	1638, 1639, 1660, 0, 1641, 0, 1642, 1643, 1644, 1645,
	1646, 1647, 1648, 1649, 1650, 1651, 1658, 0, 290, 291,
	292, 276, 0, 0, 1662, 1664, 1666, 1668, 1671, 0,
	0, 0, 0, 0, 1640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1659, 1663, 1665, 1667, 1669, 1670, 1672, 1653, 1676,
	1673, 1674, 1675, 0, 0, 1654, 1655, 1656, 1657, 1638,
	1639, 1660, 1862, 1641, 0, 1642, 1643, 1644, 1645, 1646,
	1647, 1648, 1649, 1650, 1651, 1658, 92, 0, 26, 48,
	67, 1862, 0, 1662, 1664, 1666, 1668, 1671, 1220, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 0, 0, 0, 0, 1220, 0, 0,
	0, 2252, 0, 0, 0, 0, 0, 1653, 0, 49,
	0, 0, 1844, 0, 89, 0, 0, 0, 0, 0,
	0, 1925, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1844, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1630, 1631, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 84, 0, 85, 86, 0, 0, 0, 0,
	1862, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1848, 1661, 0, 0, 0, 66, 82, 90,
	1844, 47, 0, 1852, 0, 0, 0, 0, 0, 0,
	0, 1848, 0, 0, 0, 0, 0, 81, 76, 75,
	0, 0, 1852, 1841, 0, 0, 0, 1843, 1845, 1847,
	0, 1849, 1850, 1851, 1853, 1854, 1855, 1857, 1858, 1859,
	1860, 0, 1841, 0, 0, 0, 1843, 1845, 1847, 0,
	1849, 1850, 1851, 1853, 1854, 1855, 1857, 1858, 1859, 1860,
	0, 0, 1661, 0, 0, 0, 0, 1863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 79,
	0, 0, 0, 0, 0, 0, 1863, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1861, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 0, 0, 80, 0, 58, 1840, 0,
	1861, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1848, 0, 0, 1856, 0, 0, 0, 1840, 0, 0,
	1846, 1852, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1856, 0, 59, 0, 0, 0, 0, 1846,
	0, 1841, 0, 0, 0, 1843, 1845, 1847, 0, 1849,
	1850, 1851, 1853, 1854, 1855, 1857, 1858, 1859, 1860, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1861,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1840, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1856, 0, 0, 0, 0, 0, 0, 1846,
}

var yyPact = [...]int{
	22979, -1000, -293, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 20859, -1000, -1000, 1450,
	-1000, 8564, 21297, 50, 21297, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 249, 16910, 21297,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 8108, 7652, 148,
	-1000, 1787, -1000, -1000, -1000, -1000, 178, 271, 20421, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1675, -48, 363, 369, 596, 596, 9878, 1787, 217,
	26, -1000, 700, 22979, 199, 21297, -1000, 459, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1787, 1787, 21297, -75, 619, -1000, 230, 216, 308,
	457, -1000, -1000, -1000, -1000, 1800, -1000, 21297, 1616, 21297,
	1637, -1000, -1000, -1000, 1730, 21735, 217, -1000, 1402, 1427,
	-1000, -1000, 1612, -1000, 109, 4, -19, 137, -1000, -1000,
	177, -1000, -1000, -1000, -1000, -1000, 47, -1000, -4, -1000,
	-12, -1000, -1000, -1000, -120, -1000, -1000, -1000, -1000, -1000,
	1396, 379, 1646, -170, 1698, 1753, 1489, 1781, 1744, 1,
	210, 210, 244, 210, -1000, -1000, -1000, -1000, -1000, -1000,
	318, -1000, -1000, -1000, -1000, 1428, 21297, -1000, 1496, 507,
	507, 592, 184, -1000, -1000, -112, -144, 507, 507, -144,
	8, -1000, 1743, 1741, -1000, -1000, -1000, -1000, -1000, -1000,
	218, -1000, -186, -1000, 342, -1000, 339, -1000, 11210, 174,
	1431, 694, -1000, 577, 21297, 21297, 21297, 577, 577, 12530,
	12092, 451, -1000, 1753, 1489, -1000, 1331, 1160, 1489, 218,
	218, 218, 218, 218, 21297, 5404, 5404, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 195, 1611, -1000, 21297, 1753,
	1698, 1753, -1000, 434, 883, 1055, -1000, -1000, 230, 1371,
	-1000, 393, -1000, -1000, -1000, -1000, 21297, 181, -1000, 1015,
	1610, 21297, 16910, 16910, 16910, 16910, -1000, 1677, 1676, -1000,
	1661, 1660, 1669, 21297, -1000, -1000, -1000, 22097, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1318, 1787, 112, 7733, 16034,
	18662, 21297, 16034, -1000, -1000, -1000, -1000, -1000, -134, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 112,
	16034, 16034, -79, -1000, -1000, -282, 1698, 5852, -1000, -1000,
	5852, -1000, -1000, 224, 210, -1000, 16034, 639, 18662, 896,
	21297, 234, -1000, 21297, 1428, 1724, 21297, 1791, 6748, 1791,
	21297, -1000, -1000, 507, 507, -1000, 592, 592, -1000, -1000,
	-136, 1791, 1791, -130, 21297, 210, -1000, -1000, 19983, 1711,
	-161, 361, 349, 351, -1000, -1000, -177, -1000, -1000, 1409,
	11654, 10766, 226, 16034, 3606, -1000, -1000, 577, 577, 577,
	3606, 3606, 397, -1000, -1000, -1000, -1000, -1000, -1000, 21297,
	1698, -1000, -1000, -1000, -1000, -1000, 16034, 18662, 21297, 21297,
	22459, -1000, 1412, -1000, -1000, 9440, 429, 5852, 750, 1608,
	-1000, -1000, 1606, 1600, 1597, 1596, 1595, 1592, 1591, -1000,
	1548, -1000, -1000, 1590, 1589, 1588, 1581, -1000, -1000, -1000,
	-1000, -1000, -1000, 1579, -1000, -1000, -1000, 1578, 1548, -1000,
	-1000, 1577, 1569, 1568, 1567, 1566, -1000, -1000, -1000, -1000,
	-1000, -1000, 1054, 1053, 999, -1000, -1000, -1000, -1000, 3158,
	6748, 6748, 6748, 6748, -1000, -1000, 1520, 5852, 1565, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 7196, -1000, 1563, 1561, 1556,
	1554, 1551, 1548, 1545, 1052, 1542, 1538, 1537, 6748, 1536,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1412, -1000, -280, -1000, 10328, 21297, 21297, -1000, 1698, -1000,
	1698, 2266, -1000, 1749, -1000, 230, 81, -1000, -1000, -1000,
	-1000, -1000, -1000, 424, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1423, -1000, 21297, 1391, -1000, 616, 1619,
	1645, 1619, -1000, -1000, -1000, -1000, 1673, -1000, 1668, -1000,
	-1000, 1496, -1000, -1000, 633, -1000, -1000, -1000, -1000, -1000,
	-4, -12, 1403, -1000, -34, 104, -1000, 1366, -1000, -1000,
	-1000, 633, 1403, 241, 1039, 1021, -1000, 944, 423, 1421,
	-1000, 933, 19545, 21297, 222, 1708, 1409, 1535, 1689, 19107,
	-1000, -1000, 1532, 1350, -1000, -1000, 5852, -1000, -1000, 1791,
	1791, 1791, 507, 22459, 592, 21297, 592, -1000, -1000, 592,
	-1000, 422, 21297, 222, 1527, -1000, -1000, -1000, 359, 336,
	329, 18662, 240, -1000, -1000, 1409, -1000, -1000, -1000, 1526,
	615, -1000, -1000, 6748, -1000, 679, -1000, 3606, 3606, 3606,
	-1000, -1000, 14720, -1000, -1000, 1403, 1409, 1642, 1419, -1000,
	-1000, -1000, -1000, 1791, 5404, -1000, 16910, -1000, 5852, 5852,
	5852, 5852, -1000, 18224, -1000, 17786, -1000, 293, 6300, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 5852, 1735, 1735, 1735,
	5852, 675, 5852, 5852, -1000, 751, 10112, 1735, 1735, 1735,
	1735, 1735, -1000, 2702, 1735, 1735, 1735, 1735, -1000, -1000,
	6748, 6748, 6748, 6748, 6748, 6748, 6748, 6748, 6748, 6748,
	6748, 6748, 1518, 652, 6748, 6748, 6748, 1160, 1560, 1413,
	-1000, -1000, -1000, -1000, -1000, 626, 679, 5852, 740, 5852,
	5852, 5852, -1000, 1296, 1288, -1000, -1000, 5852, -1000, 5852,
	6748, 5852, -1000, 1735, 1791, 1386, -1000, 1524, -1000, 1335,
	1685, -1000, 412, 1410, -1000, 589, 1327, -1000, -1000, -1000,
	-1000, 407, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -76, -1000, -1000,
	21297, 1015, 1325, 1783, 21297, 5852, -1000, -1000, 5852, 1523,
	-1000, 5852, -1000, -1000, -1000, -1000, 1799, 404, 403, 16034,
	-1000, 170, 16034, -1000, -1000, 21297, 219, 16034, -1, -150,
	5852, 5852, 21297, 5852, -1000, -1000, -1000, 1496, 637, 1522,
	-224, -1000, -49, -1000, 1632, 102, -1000, 1689, -1000, 552,
	-1000, 21297, 1384, -1000, 399, 22979, -1000, 21297, 679, -1000,
	-1000, -1000, 1791, -1000, 507, -1000, 507, 592, 21297, -1000,
	-1000, -224, 1279, -1000, -1000, -1000, 321, 1409, 16034, 980,
	226, -1000, -1000, -1000, -1000, -1000, 21297, 21297, 1788, -1000,
	1407, -1000, 1647, -1000, 664, 664, 634, -1000, -1000, 388,
	-1000, -1000, 301, -1000, -1000, -1000, -1000, -1000, 1520, -1000,
	-1000, -1000, 1263, 1356, 679, 5852, -1000, -1000, 5852, 5852,
	977, 5852, 1259, 1322, 1308, -1000, 1245, 1789, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5852, 5852, 5852,
	5852, 5852, 756, 4956, -1000, -1000, -1000, 5852, 5852, 5852,
	5852, 718, 690, -1000, 620, 620, 473, 473, 473, 473,
	473, 668, 668, -1000, -1000, -1000, 3158, 1518, 6748, 6748,
	6748, 200, 1849, 1050, -1000, 5852, 651, -1000, 5852, 815,
	-1000, 1243, 887, 1238, 1215, -1000, -1000, 1071, 1211, 1424,
	1209, 5852, 1788, -280, 4502, 198, 21297, -280, 21297, 21297,
	4502, -1000, 21297, 2266, 882, -1000, -1000, -1000, 1753, -1000,
	679, 679, 21297, 679, 16034, 493, 588, -1000, 14282, 16034,
	-1000, -1000, 16034, 130, 1697, -1000, -1000, -98, -86, 679,
	679, 386, -1000, 1719, 1707, 9002, -1000, -64, -1000, -1000,
	-1000, 354, -1000, 1007, 1001, 998, 992, 21297, -1000, -1000,
	-1000, -1000, -1000, 582, 582, 582, 199, 1381, 385, 16910,
	21297, -1000, 16472, 1207, -1000, -1000, 1791, 1791, 507, -1000,
	-15, -37, -1000, 1403, 1204, -1000, -1000, -1000, -1000, 1785,
	1775, 16910, 17348, -1000, -1000, -1000, -1000, -1000, 5852, 1547,
	1533, 1504, 22747, 1299, -1000, -1000, -1000, -1000, 5852, 1488,
	1440, 1364, 1351, 1337, -1000, 5852, 5852, 798, 1320, 1292,
	1246, 1242, 1287, -1000, 200, 1849, 819, -1000, 6748, 6748,
	1210, 595, -1000, 5852, 773, 193, 13406, -1000, 5852, -1000,
	-1000, -1000, 13406, -1000, 6748, -1000, 1206, 1785, -1000, 1187,
	1404, -1000, -280, -1000, -1000, 1386, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1283, 1403, -1000, -1000,
	-1000, -1000, 16034, 1716, 222, -1000, -2, 248, -284, -81,
	1774, 1770, 21297, 217, 21297, 1181, 1399, -1000, -1000, -1000,
	22816, 273, -1000, 21297, 676, 370, 210, 370, 670, 1517,
	-1000, -1000, -64, -1000, 881, 870, 869, 846, -40, -1000,
	-1000, -1000, -1000, -1000, 1516, 13406, -1000, 13844, 987, 21735,
	16910, 16472, 1194, -1000, 383, -1000, -1000, -1000, -1000, 1791,
	-1000, -15, -1000, 279, 281, 32, 1769, -1000, -1000, 5852,
	5852, -1000, -1000, -1000, 679, -1000, -1000, -1000, 1175, -1000,
	310, 310, -27, -1000, -1000, -1000, 1460, -1000, 1499, 1499,
	1460, 1460, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1509, 1503, -1000, 1460, 1497, 1497, 1460, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1500, 1500, 1502, 1500, -1000, 1172, -1000,
	-1000, -1000, -1000, -1000, 1166, 1161, 5852, -1000, -1000, -1000,
	-1000, -1000, -1000, 6748, -1000, -1000, -1000, -1000, 679, 5852,
	1147, -1000, 1460, 1499, -1000, 1460, 1497, 1460, 310, 310,
	1140, 939, 1135, 2778, -1000, -1000, -1000, 4502, 1386, -1000,
	-1000, 16034, 16034, -225, -6, 21297, -287, 985, -1000, 1768,
	984, 755, -1000, 1496, 23104, 9002, 1907, -1000, -1000, 21297,
	21297, -1000, 21297, 21297, 210, 5852, -1000, -1000, -1000, -1000,
	-1000, -1000, 15596, -1000, -1000, -1000, -1000, -1000, 1791, 1194,
	383, -1000, -1000, 484, -1000, -1000, -1000, -1000, 842, -1000,
	-1000, -1000, 980, 679, 1356, -1000, -1000, -1000, -1000, -1000,
	-30, -1000, -1000, -1000, -1000, 841, -1000, 837, -1000, -1000,
	-1000, 978, 978, -1000, -1000, 836, -1000, -1000, -1000, 831,
	-1000, -1000, 824, -1000, -1000, -1000, -1000, 1155, -1000, 679,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5852, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -130, -289,
	823, -1000, 976, -84, -1000, -1000, 1713, 197, 22985, -1000,
	582, 582, 594, 582, 582, 582, 582, 136, 122, 582,
	582, 582, 582, 582, 582, 582, 582, 582, 582, 582,
	582, 582, 582, 1494, -1000, -1000, 1907, -1000, -1000, 697,
	6748, -1000, -1000, 960, 13844, 409, 352, 1492, -1000, 107,
	663, 661, -1000, 21297, -1000, 1491, 1442, 55, 1486, -1000,
	1484, 1461, 21297, 1134, 1277, -1000, 1460, 5852, 1783, -1000,
	23, -1000, -1000, -1000, -1000, 1117, 1108, 1273, -1000, 1257,
	1095, 1255, 1252, -1000, 1120, -100, -90, -1000, 1459, -1000,
	-1000, 1767, 217, -1000, 1766, 23104, -1000, 821, 820, 582,
	582, 803, 949, 946, 943, 582, 582, 799, 937, 22097,
	795, 792, 791, 879, 936, 455, 868, 835, 782, 21297,
	1458, 913, -1000, -1000, 1849, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 790, 1457, -1000, -1000,
	1455, 15596, 48, 48, 15596, 15596, 15596, 1454, 269, -1000,
	15596, 1696, 986, 1753, -1000, -1000, -1000, -1000, 932, -1000,
	-1000, -1000, 749, -1000, 745, -1000, 223, -89, -90, -1000,
	1764, -85, 1762, 1759, 21297, 755, -1000, 99, -1000, -1000,
	-1000, 13406, 13406, -1000, -1000, -1000, -1000, 928, 926, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 157, 21297, 1249, -1000, 585, 1073, 5852, -219, 15596,
	1237, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1203, 1199,
	1168, 15596, -1000, -1000, -1000, 85, 123, -1000, -1000, 1696,
	-1000, -1000, 1068, 1061, 1451, 725, -81, 1757, -1000, 755,
	1756, 755, 755, 1164, -1000, -1000, 72, 180, 176, -1000,
	250, -1000, -1000, -1000, -1000, -1000, -1000, 161, 1153, -1000,
	913, 910, -1000, 971, 1626, -1000, -7, 1138, -1000, -1000,
	-1000, -1000, 1132, -1000, -1000, 582, 902, 45, -1000, -1000,
	-1000, -1000, -1000, 1738, 12968, -114, -1000, 889, -1000, 755,
	-1000, -1000, -1000, 21297, 68, 724, 6748, 1449, 6748, 1445,
	80, 1444, -1000, -1000, -1000, -1000, -1000, 269, -1000, -1000,
	1622, 1621, 1798, -1000, -1000, -1000, -1000, 123, 123, 123,
	123, -8, 722, -1000, 896, -1000, 21297, -1000, 1130, -1000,
	-1000, -1000, 380, -1000, -1000, -1000, -1000, 1439, 1755, -1000,
	2686, 21297, 1170, 21297, 1434, 570, 6748, -1000, -1000, 1804,
	-1000, 1802, 443, 443, -1000, -1000, -1000, 988, -1000, 536,
	-1000, 15158, 21297, -1000, 192, 78, -1000, 1127, -1000, 1124,
	21297, 720, 982, -1000, -1000, -1000, 779, 114, -1000, 21297,
	4054, -1000, 376, 1122, -1000, 989, 64, -1000, -1000, 1116,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 679, 21297, -1000,
	192, 1682, -1000, 703, -1000, -1000, -1000, 22966, 186, -1000,
	-1000, 22966, 67, -1000, 175, -1000, -1000, 1113, -1000, 748,
	1433, -1000, 67, 23104, 5852, -1000, 23104, 1111, -1000,
}

var yyPgo = [...]int{
	0, 115, 2150, 168, 125, 122, 166, 2148, 1732, 1731,
	2147, 2146, 2145, 2144, 2143, 2142, 2141, 2140, 2139, 2137,
	2136, 2133, 2128, 2127, 165, 2126, 2124, 2122, 2121, 2120,
	2119, 2118, 2117, 2116, 2115, 2114, 2113, 112, 2109, 2107,
	2106, 2105, 2100, 2098, 154, 2097, 2096, 2095, 2093, 2091,
	2090, 2089, 2087, 2086, 2082, 2081, 2080, 2079, 151, 43,
	110, 183, 84, 179, 185, 140, 74, 109, 1699, 181,
	2078, 2076, 94, 24, 128, 2075, 52, 45, 36, 171,
	105, 95, 62, 93, 2074, 2073, 153, 2072, 2070, 2069,
	2068, 61, 2067, 81, 40, 91, 28, 2066, 2065, 2064,
	87, 2063, 2061, 2060, 2059, 92, 2058, 68, 54, 2057,
	2056, 2055, 2054, 2053, 39, 2049, 47, 2048, 2047, 2046,
	2045, 2044, 2040, 2034, 12, 16, 18, 2033, 2032, 15,
	2, 2027, 155, 102, 82, 103, 2026, 309, 2023, 2022,
	2021, 162, 2016, 132, 2010, 2009, 2008, 2004, 10, 2003,
	55, 2002, 2001, 2000, 51, 1999, 1998, 1997, 99, 31,
	56, 97, 1996, 1995, 76, 159, 21, 72, 0, 147,
	38, 1994, 1991, 1989, 180, 146, 144, 1988, 117, 256,
	138, 48, 1983, 53, 65, 1982, 1980, 1974, 107, 70,
	25, 1970, 90, 1969, 29, 89, 1968, 106, 1967, 139,
	9, 101, 1965, 156, 1964, 1949, 1948, 124, 1946, 1945,
	60, 119, 1942, 1941, 1940, 42, 1938, 34, 20, 1937,
	145, 160, 1936, 1935, 1933, 127, 98, 83, 1932, 1931,
	75, 1930, 108, 77, 129, 1929, 719, 111, 64, 17,
	1926, 157, 1925, 182, 167, 142, 1923, 1905, 163, 1123,
	161, 1904, 149, 11, 1899, 1895, 8, 1892, 23, 1891,
	1890, 1889, 1888, 5, 1887, 1886, 1885, 1, 3, 1883,
	4, 118, 46, 66, 1882, 73, 80, 1881, 1880, 1879,
	1878, 1877, 197, 1876, 1874, 1873, 1872, 1870, 1869, 1868,
	86, 1867, 1866, 1865, 1864, 71, 1860, 1859, 1858, 1857,
	1856, 30, 1855, 1854, 19, 1853, 26, 1851, 1849, 1847,
	13, 135, 1846, 1845, 14, 1844, 1843, 6, 7, 1842,
	1840, 63, 41, 37, 79, 78, 1839, 22, 1838, 100,
	1837, 1836, 143, 1835, 104, 1834, 120, 158, 199, 1833,
	148, 1832, 1830, 1829, 1827, 1826, 1825, 1824, 1823, 1822,
	1820, 1819, 57, 1817, 1816, 1815, 150, 1810,
}

//line mysql_sql.y:6733
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 353, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 52, 320, 320, 319, 319, 318,
	318, 317, 317, 317, 316, 316, 316, 315, 315, 314,
	314, 313, 313, 311, 311, 312, 310, 309, 309, 307,
	307, 305, 305, 306, 306, 300, 300, 303, 303, 301,
	301, 301, 301, 304, 299, 299, 299, 298, 298, 51,
	51, 51, 238, 238, 50, 50, 252, 252, 252, 252,
	252, 250, 250, 250, 250, 249, 249, 248, 248, 253,
	253, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 45, 45, 45, 45, 48, 49,
	246, 246, 246, 246, 246, 247, 247, 247, 46, 47,
	47, 237, 237, 242, 242, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 245, 245, 245,
	244, 244, 243, 243, 39, 39, 39, 42, 41, 236,
	236, 236, 236, 236, 236, 236, 236, 40, 40, 40,
	40, 40, 40, 38, 38, 37, 235, 235, 234, 55,
	55, 55, 55, 55, 55, 55, 54, 54, 57, 57,
	56, 44, 44, 44, 44, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 343, 343, 343, 345, 345, 172,
	173, 354, 171, 171, 171, 339, 339, 340, 341, 342,
	342, 342, 53, 7, 36, 36, 282, 282, 185, 185,
	186, 186, 184, 184, 184, 184, 184, 184, 285, 286,
	181, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 28, 28, 35, 355, 355, 355, 33, 34,
	281, 281, 281, 32, 31, 30, 29, 29, 27, 27,
	26, 26, 178, 178, 180, 180, 176, 356, 356, 258,
	258, 179, 179, 25, 25, 177, 177, 155, 175, 175,
	175, 6, 10, 10, 10, 10, 10, 10, 16, 15,
	13, 12, 11, 14, 5, 5, 5, 5, 8, 8,
	9, 67, 67, 95, 95, 352, 352, 348, 348, 349,
	349, 349, 350, 350, 351, 351, 4, 289, 289, 289,
	289, 289, 289, 328, 328, 328, 329, 85, 85, 80,
	80, 290, 290, 201, 330, 330, 297, 297, 296, 296,
	295, 295, 83, 83, 84, 84, 71, 71, 58, 58,
	302, 302, 302, 302, 308, 308, 279, 279, 121, 121,
	151, 151, 152, 152, 59, 59, 60, 60, 60, 60,
	60, 60, 336, 336, 338, 338, 337, 82, 82, 78,
	78, 79, 79, 79, 77, 77, 76, 75, 75, 74,
	73, 73, 73, 62, 62, 61, 61, 61, 61, 61,
	137, 137, 137, 63, 63, 344, 344, 344, 283, 283,
	283, 288, 288, 134, 134, 135, 135, 133, 133, 64,
	64, 65, 65, 65, 65, 132, 132, 131, 66, 66,
	72, 68, 68, 70, 70, 70, 70, 142, 142, 141,
	141, 141, 141, 88, 88, 140, 139, 139, 139, 87,
	87, 86, 86, 81, 81, 69, 69, 138, 357, 357,
	136, 164, 164, 164, 170, 170, 163, 163, 163, 163,
	163, 174, 169, 169, 165, 165, 166, 166, 166, 3,
	3, 3, 19, 19, 19, 19, 23, 23, 346, 346,
	17, 232, 232, 231, 231, 233, 233, 233, 233, 227,
	227, 228, 228, 228, 228, 229, 229, 229, 230, 230,
	230, 230, 226, 226, 225, 223, 223, 223, 224, 224,
	224, 224, 224, 224, 167, 167, 18, 220, 220, 221,
	221, 221, 222, 222, 214, 214, 214, 214, 22, 218,
	218, 219, 219, 219, 219, 219, 215, 215, 217, 217,
	213, 213, 213, 213, 213, 21, 212, 212, 210, 210,
	208, 208, 209, 209, 207, 207, 207, 211, 211, 20,
	284, 284, 254, 254, 257, 257, 264, 264, 265, 265,
	263, 263, 270, 270, 269, 269, 268, 268, 267, 267,
	266, 266, 261, 261, 260, 260, 255, 255, 255, 255,
	255, 256, 256, 259, 259, 262, 262, 112, 112, 113,
	113, 113, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 326, 326, 327, 115, 115, 115, 119, 119, 119,
	119, 119, 119, 114, 114, 116, 116, 96, 96, 94,
	94, 89, 89, 90, 90, 91, 91, 92, 92, 93,
	93, 93, 93, 93, 93, 240, 240, 324, 324, 325,
	325, 321, 321, 321, 323, 323, 323, 323, 323, 322,
	322, 97, 149, 149, 149, 168, 168, 168, 148, 148,
	148, 111, 111, 110, 110, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 239, 239,
	182, 182, 183, 183, 129, 127, 127, 128, 128, 128,
	128, 125, 126, 124, 124, 124, 124, 124, 123, 123,
	122, 122, 122, 216, 216, 120, 120, 118, 118, 118,
	117, 117, 117, 271, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 193, 193, 198,
	198, 335, 335, 334, 98, 98, 98, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 107, 107, 107, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 294, 294, 294, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 347,
	347, 347, 331, 331, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 146, 146, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 202, 202,
	203, 203, 291, 291, 291, 291, 291, 291, 292, 292,
	293, 293, 293, 293, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 191, 143, 143, 143, 204, 199, 199, 200,
	200, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 196, 196, 196, 196, 196, 188, 188, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 195, 195, 197,
	197, 206, 206, 206, 205, 205, 205, 205, 205, 205,
	205, 109, 109, 109, 109, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 100, 100, 100, 100, 104,
	104, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 105, 105, 105, 105, 103,
	103, 103, 103, 103, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 102,
	150, 150, 272, 272, 275, 275, 273, 273, 274, 276,
	276, 276, 277, 277, 277, 278, 278, 278, 280, 280,
	154, 154, 154, 160, 160, 153, 153, 161, 161, 162,
	162, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156,
}

var yyR2 = [...]int{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 14, 0, 2, 1, 3, 3,
	3, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 0,
	3, 0, 3, 0, 3, 0, 2, 1, 2, 3,
	4, 3, 3, 1, 0, 1, 1, 0, 1, 9,
	4, 7, 0, 3, 7, 4, 1, 3, 3, 3,
	1, 0, 1, 1, 1, 1, 3, 1, 4, 1,
	3, 1, 2, 1, 1, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	2, 1, 1, 1, 3, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 6,
	3, 1, 1, 1, 1, 1, 1, 1, 2, 4,
	6, 1, 4, 1, 3, 3, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 2, 2, 0,
	4, 2, 4, 1, 5, 3, 2, 1, 2, 2,
	4, 4, 5, 2, 1, 7, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 2, 4,
	3, 1, 1, 1, 1, 2, 3, 4, 7, 2,
	3, 3, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 1, 1,
	1, 1, 6, 1, 7, 9, 0, 2, 0, 1,
	1, 2, 2, 2, 1, 4, 2, 2, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 5, 1, 1, 1, 5, 5,
	0, 1, 1, 2, 2, 3, 6, 7, 4, 4,
	7, 8, 0, 2, 0, 2, 2, 1, 1, 1,
	1, 0, 1, 4, 5, 1, 3, 1, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 4, 4,
	6, 4, 4, 3, 1, 1, 2, 2, 11, 8,
	9, 1, 3, 2, 4, 0, 2, 0, 1, 1,
	1, 1, 0, 1, 0, 1, 4, 2, 1, 5,
	4, 4, 2, 0, 1, 3, 3, 1, 3, 1,
	3, 1, 3, 4, 0, 1, 0, 1, 1, 3,
	1, 1, 0, 4, 1, 3, 2, 1, 0, 8,
	0, 4, 7, 4, 0, 2, 0, 2, 0, 2,
	0, 4, 1, 3, 1, 1, 4, 3, 4, 5,
	4, 5, 2, 3, 1, 3, 6, 0, 3, 0,
	1, 2, 4, 4, 0, 1, 3, 1, 3, 2,
	0, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 2, 7, 7, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 2, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 3,
	1, 1, 1, 4, 4, 4, 3, 2, 2, 2,
	3, 2, 3, 0, 2, 1, 1, 2, 2, 0,
	1, 2, 4, 1, 3, 1, 4, 3, 0, 1,
	2, 0, 1, 2, 1, 1, 0, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 8, 11, 0, 1,
	6, 0, 2, 1, 2, 2, 2, 2, 2, 0,
	1, 2, 2, 2, 2, 1, 3, 2, 2, 2,
	2, 2, 1, 3, 2, 1, 3, 2, 0, 3,
	3, 5, 5, 4, 1, 1, 4, 1, 3, 1,
	3, 2, 1, 1, 0, 1, 1, 1, 11, 0,
	2, 3, 2, 3, 1, 1, 1, 3, 3, 4,
	0, 2, 2, 2, 2, 5, 1, 1, 0, 3,
	0, 1, 1, 2, 4, 4, 4, 0, 1, 10,
	0, 1, 0, 6, 0, 4, 0, 3, 1, 3,
	4, 5, 0, 3, 1, 3, 2, 3, 1, 2,
	0, 6, 0, 2, 0, 2, 4, 5, 4, 5,
	1, 6, 5, 0, 3, 0, 1, 0, 1, 1,
	3, 2, 3, 3, 4, 4, 3, 3, 3, 3,
	4, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 5,
	4, 1, 3, 3, 0, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 0, 1, 1, 3, 1, 1, 2, 1, 7,
	7, 7, 7, 8, 5, 0, 1, 0, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 0,
	1, 3, 1, 3, 5, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 2, 1, 2, 2, 1, 1,
	2, 2, 2, 2, 2, 1, 5, 6, 1, 2,
	0, 1, 1, 2, 5, 0, 1, 1, 1, 2,
	2, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	2, 2, 2, 0, 3, 0, 3, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 1, 1,
	3, 5, 2, 2, 2, 2, 1, 1, 2, 5,
	6, 6, 6, 1, 1, 1, 1, 0, 2, 0,
	1, 1, 2, 4, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 2, 2, 2, 0, 1, 1, 5,
	4, 4, 5, 5, 5, 5, 4, 5, 5, 5,
	5, 5, 5, 5, 1, 1, 1, 4, 4, 6,
	8, 6, 4, 5, 5, 4, 6, 6, 7, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 4, 2, 3, 2, 4,
	6, 2, 2, 4, 6, 4, 2, 2, 0, 1,
	2, 3, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 3, 0, 1, 1,
	3, 3, 3, 3, 3, 2, 3, 4, 3, 4,
	1, 3, 4, 3, 4, 1, 1, 1, 3, 4,
	4, 5, 3, 4, 5, 6, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 1,
	2, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 4, 1,
	1, 3, 0, 1, 0, 3, 0, 3, 3, 0,
	3, 5, 0, 3, 5, 0, 1, 1, 0, 1,
	1, 2, 2, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -353, -2, -1, -3, -4, -5, -6, -43, -54,
	-56, -57, -24, -7, -53, -37, -38, -39, -45, -50,
	-51, -52, -59, -19, -18, -17, 9, -8, -9, -336,
	-10, -171, -172, -173, -354, -25, -26, -27, -29, -30,
	-31, -32, -33, -34, -35, -28, -36, 192, 10, 50,
	-40, -41, -42, -46, -47, -48, -49, 302, 308, 345,
	-60, -62, -20, -21, -22, -23, 188, 11, 418, -11,
	-14, -12, -13, -15, -16, 210, 209, 29, 269, 270,
	306, 208, 189, 122, 123, 125, 126, 22, -61, 55,
	190, -63, 7, 463, -71, 30, -94, -168, 59, -156,
	-159, 421, 422, 423, 424, 425, 426, 427, 428, 429,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 415, 227, 251,
	254, 261, 122, 141, 135, 163, 155, 130, 231, 232,
	66, 125, 374, 76, 359, 344, 128, 246, 248, 250,
	253, 233, 151, 146, 245, 229, 144, 234, 31, 235,
	168, 236, 237, 420, 355, 284, 378, 361, 258, 342,
	145, 356, 249, 358, 169, 173, 366, 308, 139, 140,
	363, 368, 167, 207, 34, 417, 219, 369, 171, 166,
	162, 377, 262, 260, 165, 138, 161, 230, 39, 175,
	174, 176, 338, 339, 340, 341, 238, 239, 296, 365,
	158, 147, 288, 131, 19, 372, 214, 360, 309, 240,
	255, 263, 170, 172, 221, 226, 419, 225, 259, 370,
	143, 218, 247, 213, 373, 132, 302, 311, 241, 126,
	252, 367, 376, 38, 324, 137, 129, 204, 123, 223,
	228, 242, 243, 244, 265, 264, 256, 159, 220, 164,
	136, 160, 124, 222, 375, 325, 462, 286, 327, 157,
	154, 224, 197, 371, 362, 127, 331, 326, 152, 266,
	459, 460, 461, 297, 283, 267, 268, 150, 211, -9,
	-8, -61, -62, -175, 20, 342, -44, 343, 192, 55,
	-168, -5, -4, -37, -59, -174, -168, 269, -174, 195,
	-68, -69, -70, -136, -138, -94, 55, -168, -249, -220,
	-248, -221, -251, -222, -167, 23, 189, 188, 222, 11,
	190, 306, 196, 9, 7, 307, 208, 10, 308, 310,
	311, 314, 315, 316, 33, 319, 320, 59, 62, -168,
	-249, -220, 226, 233, -76, -77, -137, 16, 6, -284,
	327, 225, -214, -212, 317, 205, 204, 77, 380, 194,
	-348, -349, 185, 186, 187, -338, 412, -337, -168, 413,
	-154, -355, -281, 362, 361, -179, 360, 353, 364, 355,
	188, 76, 156, 153, 196, 363, 34, 366, 367, 356,
	327, 127, 124, -236, 82, 132, 131, -236, 225, 32,
	-242, 337, -241, -243, 366, 367, 377, 60, 61, 365,
	-154, -168, 76, -77, -137, -76, -60, -62, -336, 327,
	225, 196, 195, 380, 269, -283, -344, 23, -288, 182,
	183, 184, 24, 25, -1, -83, 217, -94, 121, -77,
	-76, -77, -148, -168, 344, 91, -44, -44, 343, -339,
	-340, -341, -343, 192, 343, 342, 121, 12, -174, 53,
	-94, 22, -139, -140, -141, -142, 42, 46, 48, 43,
	44, 45, 49, -357, 26, -164, -170, 26, -165, 62,
	-166, -159, 59, 60, 61, -60, -62, 52, 56, 12,
	56, 55, 464, 60, 304, 318, 327, 305, 317, 197,
	225, 318, 225, 353, 197, 309, 312, 313, 354, 52,
	198, 52, -298, 377, -58, 30, -79, 18, -63, -62,
	17, 23, 24, -346, 195, 412, -210, 200, -210, 196,
	-210, -350, 134, 56, -338, -82, 55, -178, 99, -178,
	-356, 12, 101, 224, 223, 357, 354, -258, 358, 359,
	-179, -178, -178, -179, 195, 380, 22, 22, -282, 200,
	370, 418, 130, 131, 132, -246, 23, 32, 336, -220,
	225, 56, 91, 20, -244, 91, 102, -243, -243, -243,
	-244, -244, -114, 32, -167, 118, 62, -114, 32, 121,
	-78, -79, -63, -62, 57, 57, -282, -282, -282, -282,
	-282, -174, -64, -65, 109, -194, -168, 83, -196, 59,
	-189, 421, 422, 423, 424, 425, 426, 427, 428, 429,
	430, 431, 432, 433, 434, 435, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 76, 342, 296, 327,
	152, 297, 150, 211, -190, -192, -317, -311, -187, 55,
	107, 108, 115, 84, -191, -271, 27, 86, 388, -144,
	-145, -146, -147, -312, -310, 62, 67, 70, 73, 74,
	72, 71, 148, 69, 63, 120, -62, -331, -157, -287,
	-293, 194, -291, 153, 149, 9, 113, 337, 118, -294,
	61, 60, 290, 291, 292, 380, 287, 293, 200, 44,
	294, 295, 298, 387, 299, 45, 300, 289, 215, 301,
	391, 390, 392, 384, 381, 379, 382, 383, 385, 386,
	-64, -289, 35, -59, 55, 22, 55, -168, -78, -58,
	-79, 121, 67, 62, -44, 57, 56, -342, 73, 74,
	-345, 167, 159, -168, -55, 62, -3, -4, -5, -6,
	-24, -37, -59, -313, -311, 55, -235, -234, -148, -69,
	-69, -69, -69, 42, 42, 42, 47, 42, 47, 42,
	-141, -168, -170, 57, -250, 195, 303, 221, -248, 222,
	308, 311, -226, -225, -223, -167, -221, -253, -148, -167,
	354, -250, -226, -225, 346, 458, -58, -194, -168, -75,
	-74, -194, 197, -210, -226, 83, -220, -166, -168, -351,
	199, -337, 26, -81, -168, -133, 13, -192, -133, -94,
	-178, -178, -180, -356, -176, -356, 354, -133, -133, -258,
	-177, -168, -210, -226, 327, 27, 371, 372, 128, 131,
	130, 378, -247, 336, 23, -220, -241, -237, 62, 337,
	-225, -245, 52, 118, -295, -194, 32, -244, -244, -244,
	-245, -245, 117, -168, -58, -226, -220, -168, -96, -94,
	-169, -166, -159, -132, 56, -131, 12, -163, 82, 79,
	80, 81, -168, 26, 62, 121, -194, 98, -205, 91,
	92, 93, 94, 95, 96, 97, 55, 55, 55, 55,
	55, 55, 55, 55, -203, 55, 55, 55, 55, 55,
	55, 55, -203, 55, 55, 55, 55, 55, 62, 62,
	104, 103, 114, 107, 108, 109, 110, 111, 112, 113,
	105, 106, 101, 83, 99, 100, 85, -62, -194, -200,
	-192, -192, -192, -192, -271, -198, -194, 55, -194, 55,
	55, 55, -292, 55, 55, -202, -203, 55, 62, 55,
	55, 55, -192, 55, -132, -290, -201, -330, 457, -85,
	57, -80, -168, -328, -329, -80, -84, -168, -58, -58,
	-161, -162, -153, -158, -165, -166, -159, 285, 193, 23,
	82, 26, 28, 290, 322, 85, 118, 17, 86, 153,
	117, 292, 388, 291, 188, 48, 390, 392, 391, 381,
	379, 329, 333, 335, 332, 380, 353, 32, 11, 29,
	209, 24, 25, 111, 190, 89, 90, 212, 27, 210,
	74, 20, 51, 12, 14, 15, 293, 328, 200, 199,
	101, 346, 196, 46, 9, 120, 30, 98, 330, 42,
	78, 44, 99, 18, 382, 383, 33, 345, 414, 216,
	113, 294, 295, 49, 83, 336, 72, 52, 79, 16,
	47, 100, 191, 387, 45, 334, 298, 300, 412, 299,
	194, 364, 7, 289, 389, 22, 208, 43, 195, 354,
	88, 198, 73, 215, 149, 6, 77, 10, 50, 53,
	384, 385, 386, 35, 87, 13, 301, 418, 337, 347,
	348, 349, 350, 351, 352, 177, 178, 179, 180, 181,
	257, 203, 201, 205, 206, 457, 458, 182, 183, 280,
	282, 156, 185, 186, 187, 217, 134, 20, -44, -340,
	121, 56, -81, -133, 56, 91, -87, -86, 52, 53,
	-88, 52, -86, 42, 42, -82, -252, 109, 59, 56,
	-224, 328, 464, 60, 57, 56, -252, 198, 62, 62,
	56, 19, 121, 56, -73, 28, 29, -94, 200, -94,
	-227, -228, 334, 27, -213, 53, -208, -209, -207, -211,
	32, 12, -67, -95, -168, 55, 57, 56, -194, -133,
	-133, -133, -178, -169, -180, -175, -180, -176, 121, -155,
	-168, -227, 55, 129, 132, 132, 131, -220, 198, 55,
	91, -245, -245, -245, 32, -167, 52, 56, -133, -65,
	-66, -72, -68, -194, -194, -194, -194, -168, 62, -168,
	109, -188, 83, 283, 72, 73, 74, -189, -206, 23,
	267, 268, -199, -200, -194, -143, 24, 23, -143, -143,
	-194, -143, 109, -200, -200, 57, 67, -332, -333, 393,
	394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	294, 289, 295, 293, 287, 301, 296, 297, 152, 410,
	411, 404, 405, 406, 407, 408, 409, -143, -143, -143,
	-143, -143, -194, -347, 281, 280, 282, -143, -143, -143,
	-143, -190, -190, -190, -190, -190, -190, -190, -190, -190,
	-190, -190, -190, -197, -204, -271, 55, 101, 99, 100,
	85, -192, -190, -190, 57, 56, -335, -334, 87, -194,
	-332, -199, -194, -199, -199, 57, 57, -200, -199, -190,
	-199, -143, -133, 56, 55, 57, 56, 35, 121, 56,
	91, 57, 56, 121, 344, -168, -311, 57, -77, -234,
	-194, -194, 55, -194, 12, 121, 121, -225, 17, 418,
	-167, -148, 198, -226, -299, 199, 387, -302, 358, -194,
	-194, -168, -74, -82, 83, 55, -232, 418, 336, 335,
	331, -229, -230, 330, 332, 329, 333, 52, 275, 276,
	277, 278, -207, -154, 117, 236, -94, -67, -168, 12,
	56, -352, 121, -1, -168, -133, -178, -178, -180, -168,
	-232, 57, 132, -226, -181, 62, -237, -94, -94, -135,
	14, 56, 121, -188, 283, 72, -271, 57, 56, -194,
	-194, -194, 26, -200, 57, 57, 57, 57, 12, -194,
	-194, -194, -194, -194, 57, 12, 12, -194, -194, -194,
	-194, -194, -200, -197, -192, -190, -190, -195, 212, 82,
	-194, -193, -334, 89, -194, 56, 53, 57, 12, 57,
	57, 57, 53, 57, 56, 57, -194, -135, -201, -297,
	-296, -295, 35, -59, -80, -290, -168, -329, -295, -168,
	-161, -158, -166, -159, 67, -78, -81, -226, 109, 109,
	59, -167, 337, -167, -226, -238, 418, 30, -308, 352,
	347, 349, 121, 26, 27, -89, -90, -91, -97, -92,
	-148, -183, -93, 203, 201, 205, -325, 77, 206, 257,
	78, 196, -231, -233, 338, 339, 340, 341, 82, -230,
	62, 62, 62, 62, -94, -160, 91, -160, -160, -83,
	53, 121, -66, -95, -168, 109, 57, -133, -133, -178,
	-185, -186, -184, 285, -285, 337, 328, 57, -134, 15,
	17, -72, -168, 109, -194, 57, 57, 57, -98, -100,
	324, 325, -104, -101, -103, -102, -106, -105, 153, 154,
	118, 157, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 22, 211, 149, 150, 151, 152, 169, 135,
	155, 416, 177, 136, 178, 137, 179, 138, 180, 139,
	140, 181, 141, 144, 145, 146, 143, 57, -194, 57,
	57, 57, 57, 57, -194, -194, 12, 57, 57, 57,
	57, 57, -195, 82, -192, -189, 57, 90, -194, 88,
	-99, -105, 118, 153, 211, 152, 151, 149, 324, 325,
	-114, -194, -114, -190, 57, -134, 57, 56, -290, 57,
	-167, 17, 26, -227, 308, 195, -279, 459, -306, 347,
	17, 17, -59, -94, 57, 56, -100, -93, -168, 78,
	-324, -325, -210, -324, 78, 55, -233, 67, 67, 67,
	67, -230, 55, -114, -116, -167, 118, 62, -164, -66,
	-168, -133, -352, 121, -133, -184, 286, 33, 120, 288,
	32, 284, 17, -194, -200, 57, -107, 140, 139, -107,
	-278, 325, 324, -272, -274, 55, -273, 55, -273, -272,
	-272, 55, 55, -272, -275, 55, -275, -272, -276, 55,
	-276, -277, 55, -276, 57, 57, 57, -194, -189, -194,
	57, -272, -273, -272, -275, -272, -107, -107, 57, 57,
	20, 57, 57, -295, -167, -167, -238, 309, -94, -121,
	460, 62, 17, 62, -304, 62, -82, -112, -113, -130,
	322, 227, -211, 231, 66, 232, 344, 233, 196, 235,
	236, 237, 207, 238, 239, 240, 337, 241, 242, 243,
	244, 305, 6, 271, -91, -111, -110, -108, 72, 83,
	32, 322, -109, 66, 117, 250, 228, 251, -129, -182,
	201, 77, 78, 310, -183, -321, -322, -168, -322, -168,
	-321, -321, -210, -194, -215, -217, -148, 55, -133, -133,
	67, -286, -181, -280, 326, 67, 67, -150, 62, -150,
	67, 67, 67, 57, -194, -300, -258, -151, 461, 67,
	62, 349, 26, -254, 217, 56, -130, -160, -160, -154,
	117, -160, -160, -160, -160, 234, 234, -160, -160, -160,
	-160, -160, -160, -160, -160, -160, -160, -160, -160, -160,
	-160, 55, -108, 72, -190, 62, -116, -117, 32, 249,
	245, -118, 32, 229, 230, -120, 55, 257, 78, 78,
	-94, 55, 53, 266, 55, 55, 55, -322, 57, 57,
	56, -272, -194, -77, 287, 57, 57, 57, 56, 57,
	57, 57, 56, 57, 56, 57, -307, 352, -303, -301,
	347, 348, 349, 350, 55, 17, -59, 17, -130, 67,
	67, -160, -160, 67, 62, 62, 62, -160, -160, 67,
	62, -170, 67, 67, 67, 67, 32, 62, -119, 32,
	245, 249, 246, 247, 248, 67, 32, 67, 32, 67,
	32, -168, 55, -326, -327, 62, 67, 55, -216, 55,
	-215, -323, 275, 276, 277, 279, 278, -323, -215, -215,
	-215, 55, -240, -239, 258, 83, -218, -217, -73, 57,
	-78, 62, 67, 67, -309, 199, -305, 351, -301, 17,
	349, 17, 17, -152, -168, -304, -255, 259, 260, -256,
	-262, 262, -114, -114, 62, 62, -115, 228, -96, 57,
	56, 91, 57, -194, -123, -122, 414, -215, 57, 57,
	57, 57, -215, 258, -219, 207, 66, 418, 273, 274,
	-73, 57, 57, -316, 55, 67, -306, 17, -304, 17,
	-304, -304, 57, 56, -260, 263, 55, -258, 55, -258,
	78, 276, 229, 230, 57, -327, 62, 57, -127, -128,
	-125, -126, 52, 356, 255, 256, 57, -218, -218, -218,
	-218, 57, -160, 62, 272, -320, 22, 57, -315, -314,
	-149, -310, -168, 352, 62, -304, -168, -257, 264, 67,
	-190, 55, -190, 55, -259, 261, 55, -239, -126, 52,
	-125, 52, 11, 10, -129, 67, -166, -319, -318, -317,
	57, 56, 121, -264, 55, 17, 57, -253, 57, -253,
	55, 91, -190, -124, 252, 253, 22, 131, -124, 56,
	91, -314, -168, -265, -263, 217, -256, 57, 57, -253,
	67, 57, 72, 32, 254, -318, 32, -194, 121, 57,
	56, 59, -261, 265, 57, -168, -263, -266, 35, 67,
	-270, -267, 55, -130, 219, -270, -130, -269, -268, 264,
	220, 57, 56, 59, 55, -268, -267, -200, 57,
}

var yyDef = [...]int{
	23, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 499, 500, 501, 0, 314, 315, 0,
	301, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 233, 0, 0, 184,
	164, 165, 166, 124, 125, 126, 127, 0, 0, 0,
	384, -2, 502, 503, 504, 505, -2, 327, 0, 302,
	303, 304, 305, 306, 307, 222, 223, 224, 219, 220,
	221, -2, 0, 177, 0, 169, 169, 0, 404, 0,
	0, 415, 428, 23, 362, 0, 367, 679, 715, 716,
	717, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421,
	1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431,
	1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
	1442, 1443, 1444, 1445, 1446, 1447, 1448, 1241, 1242, 1243,
	1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
	1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
	1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
	1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
	1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
	1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
	1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
	1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
	1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 316,
	317, 404, 404, 205, 0, 1283, 209, 0, 0, 0,
	298, 201, 202, 203, 204, 0, 491, 0, 198, 0,
	0, 451, 452, 475, 478, 481, 0, 183, 0, 0,
	85, 547, 87, 549, 0, 91, 93, 94, -2, 98,
	99, 100, 101, 102, 103, 104, 0, 106, 1291, 108,
	1351, 111, 112, 113, 0, 122, 123, -2, -2, 544,
	0, 0, 1339, 67, -2, 0, 0, 0, 420, 508,
	578, 578, 0, 578, 591, 555, 556, 557, 576, 577,
	332, 328, 329, 330, 331, 392, 0, 394, 397, 282,
	282, 0, 0, 273, 274, 0, 291, 282, 282, 291,
	0, 1080, 0, 0, 265, 266, 267, 271, 272, 292,
	236, 178, 179, 168, 0, 173, 0, 167, 1341, 0,
	138, 0, 143, 0, 1290, 1355, 1305, 0, 0, 1323,
	0, 162, -2, 399, 0, 405, 0, 404, 0, 236,
	236, 236, 236, 236, 0, 0, 0, 429, 430, 425,
	426, 427, 431, 432, 3, 0, 0, 366, 0, 399,
	-2, 0, 206, 718, 0, 0, 210, 211, 0, 0,
	225, 0, 228, 214, 215, 216, 0, 0, 200, 0,
	0, 0, 0, 0, 0, 0, 466, 0, 0, 465,
	0, 0, 0, 0, 479, 480, 482, 0, 484, 485,
	494, 495, 496, 497, 498, 0, 404, 81, 0, 0,
	0, 0, 0, 551, 92, 121, 95, 96, 0, 116,
	118, 120, 119, 105, 117, 107, 109, 110, 115, 81,
	0, 0, 0, 68, 387, 0, 368, 0, 417, 419,
	0, 421, 422, 0, 578, 509, 0, 0, 0, 0,
	0, 334, 333, 0, 393, 0, 0, 437, 0, 437,
	0, 287, 288, 282, 282, 275, 284, 0, 289, 290,
	0, 437, 437, 0, 0, 578, 1081, 1082, 0, 0,
	0, 0, 171, 0, 176, 128, 133, 131, 132, 134,
	0, 0, 0, 0, 0, 160, 161, 0, 0, 0,
	0, 0, 151, 154, 673, 674, 545, 155, 156, 0,
	368, 400, 416, 418, 413, 414, 0, 0, 0, 0,
	0, 313, 445, 439, 441, 486, 31, 0, 970, 715,
	975, -2, 1414, 1415, 1416, 1417, 1418, 1419, 1420, -2,
	1422, -2, -2, 1425, 1426, 1427, 1429, -2, -2, -2,
	-2, -2, -2, 1436, -2, -2, -2, 1440, 1441, -2,
	-2, 1444, 1445, 1446, 1447, 1448, -2, -2, -2, -2,
	-2, -2, -2, -2, 986, 786, 787, 788, 789, 0,
	0, 0, 0, 0, 796, 797, 0, 809, 0, 803,
	804, 805, 806, 43, 44, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 933, 773, 0, 0, 0,
	918, 0, 908, 0, 946, 0, 0, 0, 0, 0,
	45, 46, 924, 926, 927, 929, 930, 931, 932, 935,
	936, 937, 940, 941, 942, 943, 944, 945, 948, 950,
	920, 921, 922, 923, 912, 913, 914, 915, 916, 917,
	445, 336, 354, 338, 0, 343, 0, 680, 368, 390,
	368, 0, 207, 0, 212, 0, 0, 227, 229, 230,
	231, 217, 218, 299, 196, 197, 189, 190, 191, 192,
	193, 194, 195, 199, 41, 0, 437, 186, 0, 469,
	463, 0, 456, 467, 468, 459, 0, 461, 0, 457,
	458, 397, 483, 477, 0, 82, 83, 84, 86, 97,
	0, 0, 75, 532, 538, 535, 548, 0, 89, 550,
	114, 0, 70, 0, 0, 0, 388, 401, 31, 406,
	407, 410, 0, 0, 519, 0, 546, 570, -2, 0,
	335, 395, 0, 0, 473, 262, 0, 283, 263, 437,
	437, 437, 282, 0, 284, 0, 284, 278, 279, 0,
	293, 295, 0, 519, 1382, 237, 180, 181, 0, 0,
	175, 0, 0, 135, 136, 137, 144, 139, 141, 0,
	0, 145, 157, 158, 159, 360, 361, 0, 0, 0,
	149, 150, 0, 163, 386, 308, 309, 0, 311, 677,
	312, 492, 493, 437, 0, 446, 0, 442, 0, 0,
	0, 0, 487, 0, 489, 0, 965, 0, 0, 994,
	995, 996, 997, 998, 999, 1000, 957, 953, 953, 953,
	0, 953, 0, 0, 893, 0, 0, 953, 953, 953,
	953, 953, 894, 0, 953, 953, 953, 953, 907, 901,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 959, 0,
	792, 793, 794, 795, 798, 0, 810, 0, 0, 957,
	957, 957, 896, 0, 0, 898, 909, 0, 902, 957,
	0, 957, 906, 953, 437, 337, 351, 0, 355, 0,
	0, 347, 349, 342, 344, 0, 0, 364, 389, 391,
	719, 0, 1087, -2, 1089, -2, -2, 1091, 1092, 1093,
	1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
	1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
	1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
	1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
	1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
	1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,
	1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163,
	1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173,
	1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183,
	1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193,
	1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203,
	1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213,
	1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223,
	1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233,
	1234, 1235, 1236, 1237, 1238, 1239, 1240, 0, 213, 226,
	0, 0, 0, 404, 0, 0, 453, 470, 0, 0,
	454, 0, 455, 460, 462, 476, 0, 76, 80, 0,
	534, 0, 0, 537, 88, 0, 0, 0, 64, 370,
	0, 0, 0, 0, 409, 411, 412, 397, 0, 0,
	511, 520, 0, 579, 0, 0, 575, -2, 582, 0,
	588, 0, 0, 321, 325, 23, 398, 0, 438, 264,
	268, 269, 437, 285, 282, 286, 282, 284, 0, 294,
	297, 511, 0, 182, 170, 172, 0, 130, 0, 0,
	0, 146, 147, 148, 152, 153, 0, 0, 435, 440,
	447, 448, 450, 961, 962, 963, 964, 488, 490, 32,
	443, 966, 0, 968, 971, 976, 977, 973, 0, 991,
	-2, -2, 0, 958, 959, 0, 954, 955, 0, 0,
	0, 0, 0, 0, 0, 910, 0, 0, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 0, 0, 0,
	0, 0, 0, 0, 859, 860, 861, 0, 0, 0,
	0, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 978, 989, 990, 0, 0, 0, 0,
	0, 987, 982, 0, 790, 0, 807, 811, 0, 0,
	952, 0, 959, 0, 0, 919, 897, 0, 0, 0,
	0, 0, 435, 354, 356, 0, 0, 354, 0, 0,
	0, 363, 0, 0, 0, 300, 42, 232, 399, 187,
	188, 471, 0, 464, 0, 0, 0, 533, 0, 0,
	536, 90, 0, 72, 0, 65, 66, 374, 0, 402,
	403, 32, 408, 0, 0, 681, 510, 0, 521, 522,
	523, 524, 525, 0, 0, 0, 0, 0, 571, 572,
	573, 574, 583, 1083, 1083, 1083, 362, 0, -2, 0,
	0, 323, 0, 0, 474, 276, 437, 437, 282, 296,
	238, 0, 174, 129, 0, 250, 140, 310, 678, 433,
	0, 0, 0, 967, 969, 972, 974, 847, 0, 0,
	0, 0, 0, 0, 836, 830, 831, 911, 0, 0,
	0, 0, 0, 0, 855, 0, 0, 0, 0, 0,
	0, 0, 0, 979, 987, 983, 0, 980, 0, 0,
	960, 0, 812, 0, 0, 0, 0, 848, 0, 852,
	895, 899, 0, 903, 0, 905, 0, 433, 352, 0,
	357, 358, 354, 341, 348, 340, 350, 345, 346, 365,
	720, 1088, 1085, 1086, 208, 185, 0, 74, 77, 78,
	79, 539, 0, 540, 519, 71, 0, 0, 376, 53,
	0, 0, 0, 0, 0, 0, 682, 683, 685, 686,
	0, 0, 688, 742, 0, 697, 578, 697, 0, 0,
	699, 700, 512, 513, 0, 0, 0, 0, 0, 527,
	528, 529, 530, 531, 0, 0, 1084, 0, 0, 481,
	0, 0, 437, 322, 325, 326, 396, 280, 277, 437,
	234, 239, 240, 0, 244, 0, 0, 142, 423, 0,
	0, 449, 33, 444, 960, 832, 833, 834, 0, 814,
	826, 826, 1075, 1016, 1017, 1018, 1062, 1020, 1066, 1066,
	1062, 1062, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 0, 0, 1039, 1062, 1064, 1064, 1062, 1059, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1069, 1069, 1072, 1069, 835, 0, 854,
	837, 838, 841, 839, 0, 0, 0, 853, 842, 843,
	829, 956, 981, 0, 988, 984, 791, 799, 808, 0,
	0, 817, 1062, 1066, 820, 1062, 1064, 1062, 826, 826,
	0, 0, 0, 0, 840, 424, 353, 0, 339, 472,
	543, 0, 0, 72, 0, 0, 378, 0, 375, 0,
	0, 0, 506, 397, -2, 0, -2, 687, 743, 709,
	709, 698, 709, 709, 578, 0, 514, 515, 516, 517,
	518, 526, 0, 584, 585, 675, 676, 586, 437, 437,
	-2, 319, 324, 0, 281, 241, 242, 243, 0, 246,
	247, 249, 0, 434, 436, 800, 815, 827, 828, 816,
	1078, 1076, 1077, 1019, 1063, 0, 1044, 0, 1045, 1046,
	1047, 0, 0, 1040, 1041, 0, 1042, 1043, 1035, 0,
	1036, 1037, 0, 1038, 851, 856, 857, 0, 985, 813,
	801, 818, 819, 821, 822, 823, 824, 825, 802, 849,
	0, 900, 904, 359, 541, 542, 69, 73, 55, 380,
	0, 377, 0, 371, 373, 63, 0, 592, -2, 629,
	1083, 1083, 0, 1083, 1083, 1083, 1083, 0, 0, 1083,
	1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
	1083, 1083, 1083, 0, 684, 711, -2, 723, 725, 0,
	0, 728, 729, 0, 0, 0, 0, 765, 735, 0,
	0, 1003, 1004, 0, 741, 0, 701, 710, 0, 710,
	0, 0, 709, 0, 0, 566, 1062, 0, 404, 320,
	0, 248, 235, 1015, 1079, 0, 0, 0, 1060, 0,
	0, 0, 0, 858, 0, 49, 0, 369, 0, 379,
	54, 0, 0, 589, 0, 587, 631, 0, 0, 1083,
	1083, 0, 0, 0, 0, 1083, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 724, 726, 727, 730, 731, 732, 770, 771,
	772, 733, 767, 768, 769, 734, 0, 0, 1001, 1002,
	763, 0, 0, 0, 0, 0, 0, 0, 695, 559,
	0, 410, 0, 399, 245, 1068, 1067, 1057, 0, 1058,
	1065, 1070, 0, 1073, 0, 850, 47, 51, 56, 57,
	0, 0, 0, 0, 0, 0, 507, 625, 630, 632,
	633, 0, 0, 636, 637, 638, 639, 0, 0, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 667,
	668, 669, 670, 671, 672, 652, 653, 654, 655, 656,
	657, 664, 0, 0, 661, 0, 0, 0, 758, 0,
	0, 702, 704, 705, 706, 707, 708, 703, 0, 0,
	0, 0, 694, 696, 738, 0, 558, 567, 568, 410,
	318, 1061, 0, 0, 34, 0, 53, 0, 58, 0,
	0, 0, 0, 0, 382, 372, 614, 0, 0, 620,
	0, 626, 634, 635, 640, 641, 658, 0, 0, 660,
	0, 0, 766, 0, 745, 759, 0, 0, 559, 559,
	559, 559, 0, 739, 560, 1083, 0, 0, 564, 565,
	569, 1071, 1074, 25, 0, 0, 50, 0, 59, 0,
	61, 62, 381, 0, 594, 0, 0, 0, 0, 0,
	623, 0, 665, 666, 659, 662, 663, 736, 744, 746,
	747, 748, 0, 760, 761, 762, 764, 689, 690, 691,
	692, 0, 0, 562, 0, 24, 0, 35, 0, 37,
	39, 40, 712, 48, 52, 60, 383, 596, 0, 615,
	0, 0, 0, 0, 0, 0, 0, 737, 749, 0,
	750, 0, 0, 0, 693, 561, 563, 26, 27, 0,
	36, 0, 0, 593, 0, 625, 616, 0, 618, 0,
	0, 0, 0, 751, 753, 754, 0, 0, 752, 0,
	0, 38, 713, 0, 598, 0, 612, 617, 619, 0,
	624, 622, 755, 757, 756, 28, 29, 30, 0, 597,
	0, 610, 595, 0, 621, 714, 599, -2, 0, 613,
	600, -2, 0, 608, 0, 601, 609, 0, 604, 0,
	0, 603, 0, -2, 0, 605, -2, 0, 611,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 84, 3, 3, 3, 112, 104, 3,
	55, 57, 109, 107, 56, 108, 121, 110, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 463,
	92, 91, 93, 3, 464, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 114, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 115,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 85,
	86, 87, 88, 89, 90, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 105, 106, 111, 113, 116, 117,
	118, 119, 120, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:514
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:520
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:546
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:550
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 24:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:556
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				File:              yyDollar[5].str,
				DuplicateHandling: yyDollar[6].duplicateKeyUnion(),
				Table:             yyDollar[9].tableNameUnion(),
				Fields:            yyDollar[10].fieldsUnion(),
				Lines:             yyDollar[11].linesUnion(),
				IgnoredLines:      uint64(yyDollar[12].int64ValUnion()),
				ColumnList:        yyDollar[13].loadColumnsUnion(),
				Assignments:       yyDollar[14].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:571
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:575
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:581
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:585
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:591
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:598
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:607
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:611
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:615
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:620
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:624
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:628
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:634
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:643
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:654
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:658
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:664
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:668
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:674
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:678
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:684
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:708
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//        	yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:727
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:731
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:736
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:740
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:748
		{
			yyVAL.str = ""
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:752
		{
			yyVAL.str = yyDollar[3].str
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:757
		{
			yyVAL.str = "\n"
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:761
		{
			yyVAL.str = yyDollar[3].str
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:766
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:770
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:794
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:798
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:804
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:810
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:828
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:845
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:868
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:872
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:876
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:881
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:885
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:891
		{
			yyLOCAL = &tree.Grant{
				Privileges:  yyDollar[2].privilegesUnion(),
				ObjType:     yyDollar[4].objectTypeUnion(),
				Level:       yyDollar[5].privilegeLevelUnion(),
				Users:       yyDollar[7].usersUnion(),
				GrantOption: yyDollar[9].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:901
		{
			yyLOCAL = &tree.Grant{
				IsGrantRole:      true,
				RolesInGrantRole: yyDollar[2].rolesUnion(),
				Users:            yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:909
		{
			yyLOCAL = &tree.Grant{
				IsProxy:     true,
				ProxyUser:   yyDollar[4].userUnion(),
				Users:       yyDollar[6].usersUnion(),
				GrantOption: yyDollar[7].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:919
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:923
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:933
		{
			yyLOCAL = &tree.Revoke{
				Privileges: yyDollar[2].privilegesUnion(),
				ObjType:    yyDollar[4].objectTypeUnion(),
				Level:      yyDollar[5].privilegeLevelUnion(),
				Users:      yyDollar[7].usersUnion(),
				Roles:      nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:943
		{
			yyLOCAL = &tree.Revoke{
				IsRevokeRole:      true,
				RolesInRevokeRole: yyDollar[2].rolesUnion(),
				Users:             yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:953
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:959
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_GLOBAL,
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:965
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
				DbName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:972
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				DbName:  yyDollar[1].str,
				TabName: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:980
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:988
		{
			yyLOCAL = tree.OBJECT_TYPE_NONE
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:992
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:996
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1000
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1006
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1010
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1016
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1023
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1032
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1036
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1042
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1046
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1050
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1054
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1058
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1062
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1066
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1070
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1074
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1078
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1082
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1086
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1090
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1094
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1098
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1102
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1106
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1110
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1114
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1118
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1122
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1126
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1130
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1134
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1138
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1142
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1146
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1150
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1154
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1158
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1162
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1166
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1170
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1182
		{
			yyLOCAL = yyDollar[3].setRoleUnion()
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1188
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1196
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL_EXCEPT, Roles: yyDollar[3].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1200
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_DEFAULT, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1204
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1208
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1212
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1218
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1222
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1226
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1232
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1238
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1242
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:1249
		{
			yyVAL.str = yyDollar[3].str
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1255
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1259
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1265
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1273
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1282
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1290
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1298
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1321
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1344
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1351
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1358
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     yyDollar[1].str,
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1366
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1373
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1380
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1389
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1393
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1397
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1403
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1407
		{
			yyVAL.str = yyDollar[1].str
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1414
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1425
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1431
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1436
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1440
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1444
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1448
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1452
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1456
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1460
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1464
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1470
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1474
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1478
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1482
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1487
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1492
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1498
		{
			yyLOCAL = &tree.Use{Name: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1502
		{
			yyLOCAL = &tree.Use{}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1508
		{
			yyLOCAL = &tree.Update{
				Table:   yyDollar[2].tableExprUnion(),
				Exprs:   yyDollar[4].updateExprsUnion(),
				Where:   yyDollar[5].whereUnion(),
				OrderBy: yyDollar[6].orderByUnion(),
				Limit:   yyDollar[7].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1521
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1525
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1531
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1543
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1549
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1553
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1559
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1563
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1569
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1578
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1584
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1589
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1594
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1598
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1602
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1606
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1614
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1622
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1632
		{
			explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
			explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1664
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1668
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:1674
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1680
		{
			yyVAL.str = yyDollar[1].str
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1685
		{
			yyVAL.str = "true"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1686
		{
			yyVAL.str = "false"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1687
		{
			yyVAL.str = yyDollar[1].str
		}
	case 232:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1692
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1702
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: false,
				Users:      yyDollar[4].usersUnion(),
				TlsOpts:    yyDollar[5].tlsOptionsUnion(),
				ResOpts:    yyDollar[6].resourceOptionsUnion(),
				MiscOpts:   yyDollar[7].userMiscOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1713
		{
			auth := &tree.User{
				AuthString: yyDollar[9].str,
				ByAuth:     true,
			}
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: true,
				UserFunc:   auth,
			}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1726
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1730
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1735
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1739
		{
			yyLOCAL = yyDollar[1].userMiscOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1745
		{
			yyLOCAL = []tree.UserMiscOption{yyDollar[1].userMiscOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1749
		{
			yyLOCAL = append(yyDollar[1].userMiscOptionsUnion(), yyDollar[2].userMiscOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1755
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1759
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1763
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1767
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1771
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1775
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1781
		{
			yyVAL.item = nil
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1786
		{
			yyVAL.item = nil
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1808
		{
			yyLOCAL = &tree.ShowTarget{Target: yyDollar[2].str, Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1812
		{
			yyLOCAL = &tree.ShowTarget{Target: "charset", Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1818
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: *yyDollar[4].tableNameUnion(),
				Where:     yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1832
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1842
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1851
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1855
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1859
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1865
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1871
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1877
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1883
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1893
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1905
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1909
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1915
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1927
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1940
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1944
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1949
		{
			yyVAL.str = ""
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:1953
		{
			yyVAL.str = yyDollar[2].str
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1959
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1972
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1976
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1982
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1986
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1992
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1996
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2005
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2009
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2013
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].str, yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2030
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2039
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2048
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].str),
				TableName: *yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2058
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2064
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].str), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2070
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2078
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2083
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2090
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2106
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: yyDollar[7].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2119
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: yyDollar[8].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2130
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2134
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:2140
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:2145
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2152
		{
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2154
		{
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2157
		{
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2166
		{
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2170
		{
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2175
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2184
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2191
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2197
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2205
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2212
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2219
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2238
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2242
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2246
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:2252
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2261
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2265
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2271
		{
			yyVAL.str = yyDollar[1].str
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2275
		{
			yyVAL.str = yyDollar[3].str
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2281
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2285
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2291
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2296
		{
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2300
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2307
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2311
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2318
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2323
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2327
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2333
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2337
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2343
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2347
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2352
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2356
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2369
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2376
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2383
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2401
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2420
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2426
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2433
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2437
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2450
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2454
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2459
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2463
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2470
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2475
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2482
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2488
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2492
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Ep: yyDollar[3].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2496
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2500
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2504
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2508
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2514
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2521
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2530
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2534
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:2540
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].str), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2548
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2552
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2557
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2561
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2567
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2571
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2575
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2580
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2584
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2590
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2596
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2600
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:2606
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2611
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2615
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2619
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2626
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2630
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2636
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2640
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2650
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2660
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2670
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2682
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2690
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2698
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2708
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2719
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2737
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2741
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2745
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2754
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2758
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2763
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2767
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2772
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2776
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2782
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2786
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2792
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2796
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: tree.UnrestrictedIdentifier(yyDollar[2].str)}
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2800
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2804
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].str, yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2809
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2817
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2823
		{
			yyLOCAL = &tree.From{
				Tables: yyDollar[2].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2831
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2835
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2848
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2857
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2867
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2876
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2886
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2890
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2900
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2904
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2908
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2912
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2918
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2922
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2928
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2934
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2938
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2942
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2948
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2952
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2958
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2962
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2968
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2972
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2978
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2982
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[3].str),
					Cols:  yyDollar[4].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:2995
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3000
		{
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3001
		{
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:3005
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3017
		{
			yyVAL.str = ""
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3021
		{
			yyVAL.str = yyDollar[1].str
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3025
		{
			yyVAL.str = yyDollar[2].str
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3034
		{
			yyVAL.str = ""
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3038
		{
			yyVAL.str = yyDollar[1].str
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3042
		{
			yyVAL.str = yyDollar[2].str
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3046
		{
			yyVAL.str = yyDollar[1].str
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3050
		{
			yyVAL.str = yyDollar[2].str
		}
	case 506:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3083
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3093
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[8].tableNameUnion(),
				ColNames:    yyDollar[9].identifierListUnion(),
				AsSource:    yyDollar[11].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3104
		{
		}
	case 510:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3109
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Users:       yyDollar[4].usersUnion(),
				TlsOpts:     yyDollar[5].tlsOptionsUnion(),
				ResOpts:     yyDollar[6].resourceOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3119
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3123
		{
			yyLOCAL = yyDollar[2].resourceOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3129
		{
			yyLOCAL = []tree.ResourceOption{yyDollar[1].resourceOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3133
		{
			yyLOCAL = append(yyDollar[1].resourceOptionsUnion(), yyDollar[2].resourceOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3139
		{
			yyLOCAL = &tree.ResourceOptionMaxQueriesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3143
		{
			yyLOCAL = &tree.ResourceOptionMaxUpdatesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3147
		{
			yyLOCAL = &tree.ResourceOptionMaxConnectionPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3151
		{
			yyLOCAL = &tree.ResourceOptionMaxUserConnections{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3157
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3164
		{
			t := &tree.TlsOptionNone{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3169
		{
			t := &tree.TlsOptionSSL{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3174
		{
			t := &tree.TlsOptionX509{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3179
		{
			yyLOCAL = yyDollar[2].tlsOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3185
		{
			yyLOCAL = []tree.TlsOption{yyDollar[1].tlsOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3189
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[3].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3193
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[2].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3199
		{
			yyLOCAL = &tree.TlsOptionIssuer{Issuer: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3203
		{
			yyLOCAL = &tree.TlsOptionSubject{Subject: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3207
		{
			yyLOCAL = &tree.TlsOptionCipher{Cipher: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3211
		{
			yyLOCAL = &tree.TlsOptionSan{San: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3217
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3221
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3227
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthPlugin: yyDollar[2].authRecordUnion().AuthPlugin,
				AuthString: yyDollar[2].authRecordUnion().AuthString,
				HashString: yyDollar[2].authRecordUnion().HashString,
				ByAuth:     yyDollar[2].authRecordUnion().ByAuth,
			}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3240
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3244
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3248
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3253
		{
			yyLOCAL = &tree.AuthRecord{}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3257
		{
			yyLOCAL = &tree.AuthRecord{
				AuthString: yyDollar[3].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3264
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3270
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				AuthString: yyDollar[5].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3278
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				HashString: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3285
		{
			yyLOCAL = &tree.AuthRecord{
				HashString: yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3297
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3306
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3310
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3316
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: "%"}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3320
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3324
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3333
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3337
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3341
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3345
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3351
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].str),
				Table:       *yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3370
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3374
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3396
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3400
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3404
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3408
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3412
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3418
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3422
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3428
		{
			// Order is parsed but just ignored as MySQL did.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3433
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3438
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3442
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3446
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3450
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3454
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3460
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:   yyDollar[3].ifNotExistsUnion(),
				Name:          tree.Identifier(yyDollar[4].str),
				CreateOptions: yyDollar[5].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3474
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3478
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3483
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3487
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3493
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3497
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3503
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3507
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3511
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3516
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3520
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3526
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3538
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3542
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3547
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3551
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3561
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3565
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3574
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3578
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3584
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3588
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3594
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3603
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3613
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3617
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3623
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3627
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3633
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3640
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3649
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3653
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3658
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3662
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3667
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3671
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3681
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3685
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3696
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3704
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3712
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3720
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3731
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3741
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3751
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3755
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3760
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3764
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3769
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3773
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3779
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3783
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3787
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3793
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3797
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3801
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3805
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3809
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3813
		{
			yyLOCAL = tree.NewTableOptionComment(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3817
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3821
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3825
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3829
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3833
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3837
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3841
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3845
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3849
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3853
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3857
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3861
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3865
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3869
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3873
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3877
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3881
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3885
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3889
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3893
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3897
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].str, yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3901
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3905
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3912
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3916
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:3922
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3927
		{
			yyVAL.str = ""
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3931
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3935
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3941
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3945
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3949
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3953
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3957
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3961
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3975
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3979
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3988
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3993
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3999
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4006
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4010
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4016
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4020
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4026
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.Name = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4036
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4042
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4051
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4060
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invail the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4083
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4092
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4102
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4110
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4116
		{
			yyVAL.str = ""
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4120
		{
			yyVAL.str = yyDollar[1].str
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4130
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4136
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4142
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4156
		{
			yyVAL.str = ""
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:4163
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4169
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4173
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4177
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4188
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4192
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4196
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4201
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4205
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4211
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4215
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4221
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4225
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4229
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4233
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4237
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4241
		{
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4245
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4249
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4253
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4257
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4261
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4265
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4269
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4279
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4283
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4288
		{
			yyVAL.str = ""
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4292
		{
			yyVAL.str = yyDollar[1].str
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4298
		{
			yyVAL.str = ""
		}
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4302
		{
			yyVAL.str = yyDollar[2].str
		}
	case 744:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:4308
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4319
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4329
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4336
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4343
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4350
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4359
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4365
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4371
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4375
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4379
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4383
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4387
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4392
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4399
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4403
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4407
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4412
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4416
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4421
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4425
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:4441
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4447
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4451
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4455
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4459
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4463
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4467
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4471
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4475
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4479
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4483
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4487
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4491
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4495
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4501
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4505
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4509
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4513
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4517
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4521
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4525
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4529
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4533
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4537
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4541
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4545
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4550
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4558
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4562
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4566
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4575
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4579
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4583
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4587
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4592
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4596
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4601
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4605
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4611
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4615
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:4621
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4631
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4648
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4665
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4678
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4691
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4703
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4717
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4732
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4747
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4764
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4779
		{
		}
	case 829:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4785
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4794
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4802
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4810
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4819
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4828
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4837
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[4].exprsUnion(),
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4846
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4855
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4864
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4873
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4882
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4891
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4900
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4909
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4925
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4933
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4941
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4949
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4957
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			timeUinit := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4966
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4974
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4983
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4992
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5000
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5008
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5017
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5037
		{
			yyVAL.str = yyDollar[1].str
		}
	case 893:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5073
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5085
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5099
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5107
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5114
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5121
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5133
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5141
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5152
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5161
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5170
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5178
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5188
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5196
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5204
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5214
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5218
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5224
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5228
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5247
		{
		}
	case 919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5249
		{
		}
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5289
		{
			name := tree.SetUnresolvedName("interval")
			arg2 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5299
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5303
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5307
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:5313
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5318
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5322
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5328
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5332
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5339
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5343
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5347
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5355
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5359
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5363
		{
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5367
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5371
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5376
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5381
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5387
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5391
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5395
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5399
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5406
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5410
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5416
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5420
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5424
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5428
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5432
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5436
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5440
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5444
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5450
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5454
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5460
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5464
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5471
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5475
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5479
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5485
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5489
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5493
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5497
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5501
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5505
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5509
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5515
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5519
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5523
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5527
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5533
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5537
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5550
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5555
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5559
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5563
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5567
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_hexnum)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5581
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5585
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_bit)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5599
		{
			yyLOCAL = tree.NewParamExpr(yyp)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5605
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5616
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5621
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5627
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5639
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5651
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5663
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5676
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5689
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5702
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5715
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5728
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5741
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5754
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5767
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5780
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5793
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5808
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5831
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 53 {
				yylex.Error("For float(M), M must between 0 and 53.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5868
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 18 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5916
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5933
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5945
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5960
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5980
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6000
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6016
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6029
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6042
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6055
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6068
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6080
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6092
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6104
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6116
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6128
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6140
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6152
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6164
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6176
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6189
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6204
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6227
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6232
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6238
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6245
		{
			yyLOCAL = 6
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6249
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6254
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6258
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6264
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6270
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6277
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6284
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6293
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 10, // this is the default precision for decimal
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6300
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6307
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6316
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6320
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6324
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6330
		{
		}
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6332
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6342
		{
			yyVAL.str = ""
		}
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6346
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
