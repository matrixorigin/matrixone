// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const DATALINK = 57526
const BLOB = 57527
const TINYBLOB = 57528
const MEDIUMBLOB = 57529
const LONGBLOB = 57530
const JSON = 57531
const ENUM = 57532
const UUID = 57533
const VECF32 = 57534
const VECF64 = 57535
const GEOMETRY = 57536
const POINT = 57537
const LINESTRING = 57538
const POLYGON = 57539
const GEOMETRYCOLLECTION = 57540
const MULTIPOINT = 57541
const MULTILINESTRING = 57542
const MULTIPOLYGON = 57543
const INT1 = 57544
const INT2 = 57545
const INT3 = 57546
const INT4 = 57547
const INT8 = 57548
const S3OPTION = 57549
const STAGEOPTION = 57550
const SQL_SMALL_RESULT = 57551
const SQL_BIG_RESULT = 57552
const SQL_BUFFER_RESULT = 57553
const LOW_PRIORITY = 57554
const HIGH_PRIORITY = 57555
const DELAYED = 57556
const CREATE = 57557
const ALTER = 57558
const DROP = 57559
const RENAME = 57560
const ANALYZE = 57561
const ADD = 57562
const RETURNS = 57563
const SCHEMA = 57564
const TABLE = 57565
const SEQUENCE = 57566
const INDEX = 57567
const VIEW = 57568
const TO = 57569
const IGNORE = 57570
const IF = 57571
const PRIMARY = 57572
const COLUMN = 57573
const CONSTRAINT = 57574
const SPATIAL = 57575
const FULLTEXT = 57576
const FOREIGN = 57577
const KEY_BLOCK_SIZE = 57578
const SHOW = 57579
const DESCRIBE = 57580
const EXPLAIN = 57581
const DATE = 57582
const ESCAPE = 57583
const REPAIR = 57584
const OPTIMIZE = 57585
const TRUNCATE = 57586
const MAXVALUE = 57587
const PARTITION = 57588
const REORGANIZE = 57589
const LESS = 57590
const THAN = 57591
const PROCEDURE = 57592
const TRIGGER = 57593
const STATUS = 57594
const VARIABLES = 57595
const ROLE = 57596
const PROXY = 57597
const AVG_ROW_LENGTH = 57598
const STORAGE = 57599
const DISK = 57600
const MEMORY = 57601
const CHECKSUM = 57602
const COMPRESSION = 57603
const DATA = 57604
const DIRECTORY = 57605
const DELAY_KEY_WRITE = 57606
const ENCRYPTION = 57607
const ENGINE = 57608
const MAX_ROWS = 57609
const MIN_ROWS = 57610
const PACK_KEYS = 57611
const ROW_FORMAT = 57612
const STATS_AUTO_RECALC = 57613
const STATS_PERSISTENT = 57614
const STATS_SAMPLE_PAGES = 57615
const DYNAMIC = 57616
const COMPRESSED = 57617
const REDUNDANT = 57618
const COMPACT = 57619
const FIXED = 57620
const COLUMN_FORMAT = 57621
const AUTO_RANDOM = 57622
const ENGINE_ATTRIBUTE = 57623
const SECONDARY_ENGINE_ATTRIBUTE = 57624
const INSERT_METHOD = 57625
const RESTRICT = 57626
const CASCADE = 57627
const ACTION = 57628
const PARTIAL = 57629
const SIMPLE = 57630
const CHECK = 57631
const ENFORCED = 57632
const RANGE = 57633
const LIST = 57634
const ALGORITHM = 57635
const LINEAR = 57636
const PARTITIONS = 57637
const SUBPARTITION = 57638
const SUBPARTITIONS = 57639
const CLUSTER = 57640
const TYPE = 57641
const ANY = 57642
const SOME = 57643
const EXTERNAL = 57644
const LOCALFILE = 57645
const URL = 57646
const PREPARE = 57647
const DEALLOCATE = 57648
const RESET = 57649
const EXTENSION = 57650
const INCREMENT = 57651
const CYCLE = 57652
const MINVALUE = 57653
const PUBLICATION = 57654
const SUBSCRIPTIONS = 57655
const PUBLICATIONS = 57656
const PROPERTIES = 57657
const PARSER = 57658
const VISIBLE = 57659
const INVISIBLE = 57660
const BTREE = 57661
const HASH = 57662
const RTREE = 57663
const BSI = 57664
const IVFFLAT = 57665
const MASTER = 57666
const ZONEMAP = 57667
const LEADING = 57668
const BOTH = 57669
const TRAILING = 57670
const UNKNOWN = 57671
const LISTS = 57672
const OP_TYPE = 57673
const REINDEX = 57674
const EXPIRE = 57675
const ACCOUNT = 57676
const ACCOUNTS = 57677
const UNLOCK = 57678
const DAY = 57679
const NEVER = 57680
const PUMP = 57681
const MYSQL_COMPATIBILITY_MODE = 57682
const UNIQUE_CHECK_ON_AUTOINCR = 57683
const MODIFY = 57684
const CHANGE = 57685
const SECOND = 57686
const ASCII = 57687
const COALESCE = 57688
const COLLATION = 57689
const HOUR = 57690
const MICROSECOND = 57691
const MINUTE = 57692
const MONTH = 57693
const QUARTER = 57694
const REPEAT = 57695
const REVERSE = 57696
const ROW_COUNT = 57697
const WEEK = 57698
const REVOKE = 57699
const FUNCTION = 57700
const PRIVILEGES = 57701
const TABLESPACE = 57702
const EXECUTE = 57703
const SUPER = 57704
const GRANT = 57705
const OPTION = 57706
const REFERENCES = 57707
const REPLICATION = 57708
const SLAVE = 57709
const CLIENT = 57710
const USAGE = 57711
const RELOAD = 57712
const FILE = 57713
const TEMPORARY = 57714
const ROUTINE = 57715
const EVENT = 57716
const SHUTDOWN = 57717
const NULLX = 57718
const AUTO_INCREMENT = 57719
const APPROXNUM = 57720
const SIGNED = 57721
const UNSIGNED = 57722
const ZEROFILL = 57723
const ENGINES = 57724
const LOW_CARDINALITY = 57725
const AUTOEXTEND_SIZE = 57726
const ADMIN_NAME = 57727
const RANDOM = 57728
const SUSPEND = 57729
const ATTRIBUTE = 57730
const HISTORY = 57731
const REUSE = 57732
const CURRENT = 57733
const OPTIONAL = 57734
const FAILED_LOGIN_ATTEMPTS = 57735
const PASSWORD_LOCK_TIME = 57736
const UNBOUNDED = 57737
const SECONDARY = 57738
const RESTRICTED = 57739
const USER = 57740
const IDENTIFIED = 57741
const CIPHER = 57742
const ISSUER = 57743
const X509 = 57744
const SUBJECT = 57745
const SAN = 57746
const REQUIRE = 57747
const SSL = 57748
const NONE = 57749
const PASSWORD = 57750
const SHARED = 57751
const EXCLUSIVE = 57752
const MAX_QUERIES_PER_HOUR = 57753
const MAX_UPDATES_PER_HOUR = 57754
const MAX_CONNECTIONS_PER_HOUR = 57755
const MAX_USER_CONNECTIONS = 57756
const FORMAT = 57757
const VERBOSE = 57758
const CONNECTION = 57759
const TRIGGERS = 57760
const PROFILES = 57761
const LOAD = 57762
const INLINE = 57763
const INFILE = 57764
const TERMINATED = 57765
const OPTIONALLY = 57766
const ENCLOSED = 57767
const ESCAPED = 57768
const STARTING = 57769
const LINES = 57770
const ROWS = 57771
const IMPORT = 57772
const DISCARD = 57773
const JSONTYPE = 57774
const MODUMP = 57775
const OVER = 57776
const PRECEDING = 57777
const FOLLOWING = 57778
const GROUPS = 57779
const DATABASES = 57780
const TABLES = 57781
const SEQUENCES = 57782
const EXTENDED = 57783
const FULL = 57784
const PROCESSLIST = 57785
const FIELDS = 57786
const COLUMNS = 57787
const OPEN = 57788
const ERRORS = 57789
const WARNINGS = 57790
const INDEXES = 57791
const SCHEMAS = 57792
const NODE = 57793
const LOCKS = 57794
const ROLES = 57795
const TABLE_NUMBER = 57796
const COLUMN_NUMBER = 57797
const TABLE_VALUES = 57798
const TABLE_SIZE = 57799
const NAMES = 57800
const GLOBAL = 57801
const PERSIST = 57802
const SESSION = 57803
const ISOLATION = 57804
const LEVEL = 57805
const READ = 57806
const WRITE = 57807
const ONLY = 57808
const REPEATABLE = 57809
const COMMITTED = 57810
const UNCOMMITTED = 57811
const SERIALIZABLE = 57812
const LOCAL = 57813
const EVENTS = 57814
const PLUGINS = 57815
const CURRENT_TIMESTAMP = 57816
const DATABASE = 57817
const CURRENT_TIME = 57818
const LOCALTIME = 57819
const LOCALTIMESTAMP = 57820
const UTC_DATE = 57821
const UTC_TIME = 57822
const UTC_TIMESTAMP = 57823
const REPLACE = 57824
const CONVERT = 57825
const SEPARATOR = 57826
const TIMESTAMPDIFF = 57827
const CURRENT_DATE = 57828
const CURRENT_USER = 57829
const CURRENT_ROLE = 57830
const SECOND_MICROSECOND = 57831
const MINUTE_MICROSECOND = 57832
const MINUTE_SECOND = 57833
const HOUR_MICROSECOND = 57834
const HOUR_SECOND = 57835
const HOUR_MINUTE = 57836
const DAY_MICROSECOND = 57837
const DAY_SECOND = 57838
const DAY_MINUTE = 57839
const DAY_HOUR = 57840
const YEAR_MONTH = 57841
const SQL_TSI_HOUR = 57842
const SQL_TSI_DAY = 57843
const SQL_TSI_WEEK = 57844
const SQL_TSI_MONTH = 57845
const SQL_TSI_QUARTER = 57846
const SQL_TSI_YEAR = 57847
const SQL_TSI_SECOND = 57848
const SQL_TSI_MINUTE = 57849
const RECURSIVE = 57850
const CONFIG = 57851
const DRAINER = 57852
const SOURCE = 57853
const STREAM = 57854
const HEADERS = 57855
const CONNECTOR = 57856
const CONNECTORS = 57857
const DAEMON = 57858
const PAUSE = 57859
const CANCEL = 57860
const TASK = 57861
const RESUME = 57862
const MATCH = 57863
const AGAINST = 57864
const BOOLEAN = 57865
const LANGUAGE = 57866
const WITH = 57867
const QUERY = 57868
const EXPANSION = 57869
const WITHOUT = 57870
const VALIDATION = 57871
const UPGRADE = 57872
const RETRY = 57873
const ADDDATE = 57874
const BIT_AND = 57875
const BIT_OR = 57876
const BIT_XOR = 57877
const CAST = 57878
const COUNT = 57879
const APPROX_COUNT = 57880
const APPROX_COUNT_DISTINCT = 57881
const SERIAL_EXTRACT = 57882
const APPROX_PERCENTILE = 57883
const CURDATE = 57884
const CURTIME = 57885
const DATE_ADD = 57886
const DATE_SUB = 57887
const EXTRACT = 57888
const GROUP_CONCAT = 57889
const MAX = 57890
const MID = 57891
const MIN = 57892
const NOW = 57893
const POSITION = 57894
const SESSION_USER = 57895
const STD = 57896
const STDDEV = 57897
const MEDIAN = 57898
const CLUSTER_CENTERS = 57899
const KMEANS = 57900
const STDDEV_POP = 57901
const STDDEV_SAMP = 57902
const SUBDATE = 57903
const SUBSTR = 57904
const SUBSTRING = 57905
const SUM = 57906
const SYSDATE = 57907
const SYSTEM_USER = 57908
const TRANSLATE = 57909
const TRIM = 57910
const VARIANCE = 57911
const VAR_POP = 57912
const VAR_SAMP = 57913
const AVG = 57914
const RANK = 57915
const ROW_NUMBER = 57916
const DENSE_RANK = 57917
const BIT_CAST = 57918
const BITMAP_BIT_POSITION = 57919
const BITMAP_BUCKET_NUMBER = 57920
const BITMAP_COUNT = 57921
const BITMAP_CONSTRUCT_AGG = 57922
const BITMAP_OR_AGG = 57923
const NEXTVAL = 57924
const SETVAL = 57925
const CURRVAL = 57926
const LASTVAL = 57927
const ARROW = 57928
const ROW = 57929
const OUTFILE = 57930
const HEADER = 57931
const MAX_FILE_SIZE = 57932
const FORCE_QUOTE = 57933
const PARALLEL = 57934
const STRICT = 57935
const UNUSED = 57936
const BINDINGS = 57937
const DO = 57938
const DECLARE = 57939
const LOOP = 57940
const WHILE = 57941
const LEAVE = 57942
const ITERATE = 57943
const UNTIL = 57944
const CALL = 57945
const PREV = 57946
const SLIDING = 57947
const FILL = 57948
const SPBEGIN = 57949
const BACKEND = 57950
const SERVERS = 57951
const HANDLER = 57952
const PERCENT = 57953
const SAMPLE = 57954
const MO_TS = 57955
const PITR = 57956
const CDC = 57957
const KILL = 57958
const BACKUP = 57959
const FILESYSTEM = 57960
const PARALLELISM = 57961
const RESTORE = 57962
const QUERY_RESULT = 57963

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12440

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 133,
	11, 775,
	22, 775,
	-2, 768,
	-1, 156,
	240, 1184,
	242, 1083,
	-2, 1130,
	-1, 183,
	43, 598,
	242, 598,
	269, 605,
	270, 605,
	466, 598,
	-2, 633,
	-1, 222,
	642, 1942,
	-2, 508,
	-1, 524,
	642, 2062,
	-2, 394,
	-1, 582,
	642, 2121,
	-2, 392,
	-1, 583,
	642, 2122,
	-2, 393,
	-1, 584,
	642, 2123,
	-2, 395,
	-1, 717,
	321, 178,
	438, 178,
	439, 178,
	-2, 1847,
	-1, 783,
	83, 1633,
	-2, 1998,
	-1, 784,
	83, 1651,
	-2, 1969,
	-1, 788,
	83, 1652,
	-2, 1997,
	-1, 821,
	83, 1560,
	-2, 2195,
	-1, 822,
	83, 1561,
	-2, 2194,
	-1, 823,
	83, 1562,
	-2, 2184,
	-1, 824,
	83, 2156,
	-2, 2177,
	-1, 825,
	83, 2157,
	-2, 2178,
	-1, 826,
	83, 2158,
	-2, 2186,
	-1, 827,
	83, 2159,
	-2, 2166,
	-1, 828,
	83, 2160,
	-2, 2175,
	-1, 829,
	83, 2161,
	-2, 2187,
	-1, 830,
	83, 2162,
	-2, 2188,
	-1, 831,
	83, 2163,
	-2, 2193,
	-1, 832,
	83, 2164,
	-2, 2198,
	-1, 833,
	83, 2165,
	-2, 2199,
	-1, 834,
	83, 1629,
	-2, 2036,
	-1, 835,
	83, 1630,
	-2, 1831,
	-1, 836,
	83, 1631,
	-2, 2045,
	-1, 837,
	83, 1632,
	-2, 1840,
	-1, 839,
	83, 1635,
	-2, 1848,
	-1, 840,
	83, 1636,
	-2, 2069,
	-1, 842,
	83, 1639,
	-2, 1867,
	-1, 844,
	83, 1641,
	-2, 2081,
	-1, 845,
	83, 1642,
	-2, 2080,
	-1, 846,
	83, 1643,
	-2, 1911,
	-1, 847,
	83, 1644,
	-2, 1993,
	-1, 850,
	83, 1647,
	-2, 2092,
	-1, 852,
	83, 1649,
	-2, 2095,
	-1, 853,
	83, 1650,
	-2, 2097,
	-1, 854,
	83, 1653,
	-2, 2105,
	-1, 855,
	83, 1654,
	-2, 1978,
	-1, 856,
	83, 1655,
	-2, 2023,
	-1, 857,
	83, 1656,
	-2, 1988,
	-1, 858,
	83, 1657,
	-2, 2013,
	-1, 869,
	83, 1538,
	-2, 2189,
	-1, 870,
	83, 1539,
	-2, 2190,
	-1, 871,
	83, 1540,
	-2, 2191,
	-1, 970,
	461, 633,
	462, 633,
	-2, 599,
	-1, 1019,
	125, 1831,
	136, 1831,
	156, 1831,
	-2, 1805,
	-1, 1136,
	22, 802,
	-2, 751,
	-1, 1242,
	11, 775,
	22, 775,
	-2, 1418,
	-1, 1324,
	22, 802,
	-2, 751,
	-1, 1667,
	83, 1704,
	-2, 1995,
	-1, 1668,
	83, 1705,
	-2, 1996,
	-1, 1837,
	84, 955,
	-2, 961,
	-1, 2282,
	108, 1122,
	152, 1122,
	191, 1122,
	194, 1122,
	282, 1122,
	-2, 1115,
	-1, 2434,
	11, 775,
	22, 775,
	-2, 896,
	-1, 2467,
	84, 1791,
	157, 1791,
	-2, 1980,
	-1, 2468,
	84, 1791,
	157, 1791,
	-2, 1979,
	-1, 2469,
	84, 1767,
	157, 1767,
	-2, 1966,
	-1, 2470,
	84, 1768,
	157, 1768,
	-2, 1971,
	-1, 2471,
	84, 1769,
	157, 1769,
	-2, 1899,
	-1, 2472,
	84, 1770,
	157, 1770,
	-2, 1893,
	-1, 2473,
	84, 1771,
	157, 1771,
	-2, 1821,
	-1, 2474,
	84, 1772,
	157, 1772,
	-2, 1968,
	-1, 2475,
	84, 1773,
	157, 1773,
	-2, 1897,
	-1, 2476,
	84, 1774,
	157, 1774,
	-2, 1892,
	-1, 2477,
	84, 1775,
	157, 1775,
	-2, 1881,
	-1, 2478,
	84, 1791,
	157, 1791,
	-2, 1882,
	-1, 2479,
	84, 1791,
	157, 1791,
	-2, 1883,
	-1, 2481,
	84, 1780,
	157, 1780,
	-2, 2013,
	-1, 2482,
	84, 1757,
	157, 1757,
	-2, 1998,
	-1, 2483,
	84, 1789,
	157, 1789,
	-2, 1969,
	-1, 2484,
	84, 1789,
	157, 1789,
	-2, 1997,
	-1, 2485,
	84, 1789,
	157, 1789,
	-2, 1849,
	-1, 2486,
	84, 1787,
	157, 1787,
	-2, 1988,
	-1, 2487,
	84, 1784,
	157, 1784,
	-2, 1872,
	-1, 2488,
	83, 1738,
	84, 1738,
	157, 1738,
	396, 1738,
	397, 1738,
	398, 1738,
	-2, 1820,
	-1, 2489,
	83, 1739,
	84, 1739,
	157, 1739,
	396, 1739,
	397, 1739,
	398, 1739,
	-2, 1822,
	-1, 2490,
	83, 1740,
	84, 1740,
	157, 1740,
	396, 1740,
	397, 1740,
	398, 1740,
	-2, 2041,
	-1, 2491,
	83, 1742,
	84, 1742,
	157, 1742,
	396, 1742,
	397, 1742,
	398, 1742,
	-2, 1970,
	-1, 2492,
	83, 1744,
	84, 1744,
	157, 1744,
	396, 1744,
	397, 1744,
	398, 1744,
	-2, 1951,
	-1, 2493,
	83, 1746,
	84, 1746,
	157, 1746,
	396, 1746,
	397, 1746,
	398, 1746,
	-2, 1898,
	-1, 2494,
	83, 1748,
	84, 1748,
	157, 1748,
	396, 1748,
	397, 1748,
	398, 1748,
	-2, 1877,
	-1, 2495,
	83, 1749,
	84, 1749,
	157, 1749,
	396, 1749,
	397, 1749,
	398, 1749,
	-2, 1878,
	-1, 2496,
	83, 1751,
	84, 1751,
	157, 1751,
	396, 1751,
	397, 1751,
	398, 1751,
	-2, 1819,
	-1, 2497,
	84, 1794,
	157, 1794,
	396, 1794,
	397, 1794,
	398, 1794,
	-2, 1854,
	-1, 2498,
	84, 1794,
	157, 1794,
	396, 1794,
	397, 1794,
	398, 1794,
	-2, 1868,
	-1, 2499,
	84, 1797,
	157, 1797,
	396, 1797,
	397, 1797,
	398, 1797,
	-2, 1850,
	-1, 2500,
	84, 1797,
	157, 1797,
	396, 1797,
	397, 1797,
	398, 1797,
	-2, 1914,
	-1, 2501,
	84, 1794,
	157, 1794,
	396, 1794,
	397, 1794,
	398, 1794,
	-2, 1935,
	-1, 2714,
	108, 1122,
	152, 1122,
	191, 1122,
	194, 1122,
	282, 1122,
	-2, 1116,
	-1, 2732,
	81, 695,
	157, 695,
	-2, 1299,
	-1, 3146,
	194, 1122,
	306, 1386,
	-2, 1358,
	-1, 3324,
	108, 1122,
	152, 1122,
	191, 1122,
	194, 1122,
	-2, 1240,
	-1, 3326,
	108, 1122,
	152, 1122,
	191, 1122,
	194, 1122,
	-2, 1240,
	-1, 3338,
	81, 695,
	157, 695,
	-2, 1299,
	-1, 3359,
	194, 1122,
	306, 1386,
	-2, 1359,
	-1, 3508,
	108, 1122,
	152, 1122,
	191, 1122,
	194, 1122,
	-2, 1241,
	-1, 3534,
	84, 1202,
	157, 1202,
	-2, 1122,
	-1, 3673,
	84, 1202,
	157, 1202,
	-2, 1122,
	-1, 3832,
	84, 1206,
	157, 1206,
	-2, 1122,
	-1, 3880,
	84, 1207,
	157, 1207,
	-2, 1122,
}

const yyPrivate = 57344

const yyLast = 50504

var yyAct = [...]int{
	750, 727, 3926, 752, 3900, 2762, 211, 3919, 3836, 1923,
	1647, 3842, 3344, 3734, 3439, 3835, 3843, 3165, 3673, 3132,
	3760, 3791, 2765, 3713, 736, 3236, 3562, 3373, 1643, 3651,
	729, 2756, 3618, 3707, 3672, 2556, 3237, 3495, 1277, 1483,
	3738, 3496, 3493, 1419, 2674, 3590, 618, 780, 1137, 2759,
	1018, 3642, 1560, 3443, 3714, 3716, 3306, 1425, 3434, 3311,
	636, 1870, 642, 642, 725, 3141, 2735, 2329, 642, 659,
	668, 3360, 65, 668, 3505, 3515, 1694, 1650, 3103, 3327,
	3510, 37, 3089, 3475, 3234, 3063, 2871, 2016, 2852, 2872,
	2870, 3161, 2465, 3092, 3329, 2013, 3143, 1980, 3296, 2428,
	2786, 196, 2053, 3150, 2030, 2934, 2332, 3276, 1131, 2591,
	2867, 2128, 3222, 1708, 1988, 2086, 1572, 2894, 3202, 676,
	680, 2463, 1883, 2703, 3070, 1476, 3068, 3074, 3064, 3149,
	719, 3066, 3065, 2293, 3112, 3061, 2261, 2715, 2237, 724,
	1549, 2981, 1127, 132, 2124, 2111, 2095, 3038, 2535, 1556,
	665, 2236, 2907, 1800, 2517, 2087, 2059, 2917, 36, 943,
	2094, 1561, 2009, 1564, 2429, 2416, 2123, 1981, 1388, 2692,
	1983, 2687, 1902, 2788, 1012, 2767, 641, 641, 2330, 1913,
	2727, 1846, 649, 2461, 2158, 207, 8, 618, 1075, 1355,
	1641, 206, 7, 6, 728, 726, 2125, 1523, 2292, 1461,
	1592, 1492, 635, 2273, 1882, 2282, 1571, 2135, 2624, 1701,
	718, 211, 1150, 211, 1632, 1066, 1067, 1681, 737, 27,
	617, 2093, 642, 2090, 2325, 1575, 1530, 1408, 16, 1640,
	2049, 2075, 1011, 1458, 979, 651, 1842, 673, 1514, 1460,
	2436, 682, 1845, 654, 1395, 1709, 14, 720, 15, 873,
	33, 197, 1404, 1821, 108, 942, 1522, 1420, 1428, 189,
	1646, 24, 683, 1027, 17, 10, 919, 23, 1429, 965,
	667, 940, 925, 1322, 1278, 679, 193, 2132, 1045, 1210,
	1211, 1212, 1209, 875, 933, 876, 934, 2438, 664, 1063,
	3725, 1391, 1210, 1211, 1212, 1209, 3636, 660, 1210, 1211,
	1212, 1209, 2951, 2950, 2659, 2659, 2659, 3341, 3119, 1132,
	2142, 2623, 1062, 3468, 1064, 662, 638, 663, 3314, 661,
	3229, 1133, 2579, 914, 2520, 647, 2518, 1813, 2523, 2521,
	1059, 1537, 1533, 1058, 1024, 999, 649, 928, 195, 924,
	637, 720, 2235, 671, 1059, 1341, 895, 893, 3048, 1026,
	1046, 1059, 2245, 2241, 1344, 1814, 3033, 3031, 3028, 3030,
	1132, 1584, 3911, 1442, 2651, 2649, 1807, 1337, 3432, 1535,
	1210, 1211, 1212, 1209, 2930, 1210, 1211, 1212, 1209, 643,
	2928, 8, 1583, 2064, 3702, 3597, 3591, 7, 3435, 1057,
	3235, 2108, 1272, 3718, 2089, 905, 874, 3008, 2081, 2370,
	885, 3476, 1350, 3817, 3480, 3658, 2653, 194, 61, 185,
	157, 1172, 2565, 2573, 194, 2129, 194, 194, 194, 194,
	194, 2283, 1040, 1035, 1030, 1034, 1038, 3328, 2284, 1570,
	194, 61, 185, 157, 3623, 3771, 1579, 194, 1590, 2721,
	1825, 194, 61, 185, 157, 894, 892, 1822, 194, 3659,
	1043, 1500, 1349, 1347, 1033, 895, 893, 1028, 194, 61,
	185, 157, 2953, 1351, 131, 3006, 1576, 930, 1587, 923,
	2140, 1148, 1363, 1022, 1380, 1023, 2865, 190, 927, 926,
	994, 992, 678, 993, 190, 2942, 190, 2719, 1578, 190,
	1589, 3625, 2277, 1816, 1601, 908, 131, 2455, 1207, 915,
	190, 2901, 2902, 2456, 890, 1041, 2676, 190, 2026, 886,
	2442, 190, 1044, 2441, 1993, 1994, 2443, 1613, 190, 922,
	1827, 1828, 1145, 1187, 2900, 1992, 1188, 2362, 190, 1416,
	194, 61, 185, 157, 1031, 2689, 3136, 2722, 932, 3032,
	3029, 2536, 2677, 921, 1462, 2690, 1464, 920, 186, 194,
	61, 185, 157, 907, 1190, 178, 1424, 913, 1042, 187,
	1423, 1426, 1427, 3814, 864, 988, 863, 865, 866, 1000,
	867, 868, 1426, 1427, 1438, 3456, 1897, 1439, 131, 911,
	1633, 1649, 3134, 1637, 3846, 3847, 1205, 3721, 1021, 3720,
	1020, 996, 3719, 118, 2688, 1200, 3721, 3804, 1032, 3810,
	190, 3796, 3720, 3803, 1362, 2224, 3867, 1636, 3719, 3802,
	3904, 3905, 3238, 2654, 1536, 1534, 3793, 931, 3705, 190,
	2935, 1743, 3708, 3709, 3710, 3711, 1653, 3594, 3793, 2936,
	2560, 2937, 3238, 1153, 1185, 1142, 2010, 2144, 2004, 1153,
	642, 642, 2807, 912, 3819, 3820, 3083, 3731, 3251, 3297,
	2136, 642, 1141, 2000, 3485, 998, 1628, 3815, 3816, 3304,
	156, 1622, 192, 1441, 3075, 3085, 3627, 3628, 2971, 2072,
	668, 668, 2695, 642, 1140, 1039, 2404, 139, 140, 2272,
	141, 142, 183, 2678, 1543, 1542, 931, 2679, 1203, 1204,
	3385, 1638, 714, 3812, 2969, 716, 1202, 2570, 1186, 182,
	715, 2368, 3080, 3081, 1175, 3433, 2929, 2407, 2408, 1069,
	2857, 1036, 2406, 3455, 1037, 1635, 3632, 3482, 3082, 3805,
	929, 3457, 3615, 3090, 2141, 3280, 2652, 2672, 1414, 2412,
	1027, 2119, 997, 1197, 3400, 634, 1250, 665, 665, 3845,
	3164, 2458, 3079, 1652, 1651, 677, 2147, 2149, 2150, 156,
	184, 192, 3875, 116, 641, 1130, 1340, 1364, 3138, 918,
	2024, 2025, 1452, 2673, 3609, 1139, 3610, 3101, 1659, 1662,
	1663, 183, 177, 176, 3724, 1189, 3162, 3163, 67, 1660,
	3635, 3397, 1141, 3113, 3753, 3748, 1134, 1163, 3254, 2975,
	2658, 1133, 1133, 1133, 2728, 670, 2130, 2130, 1167, 669,
	2130, 1024, 888, 1027, 1282, 2863, 3663, 1198, 1199, 2952,
	2279, 3390, 1281, 3655, 1047, 1029, 1026, 2242, 3039, 1815,
	3612, 3739, 2949, 3755, 1585, 3345, 1440, 1147, 2163, 1155,
	1154, 666, 1634, 2131, 3091, 1155, 1154, 1059, 889, 179,
	180, 181, 1059, 3761, 1133, 1059, 1059, 1244, 3657, 1059,
	1059, 3611, 3818, 3133, 666, 2761, 3077, 3622, 3352, 906,
	904, 2143, 2257, 1180, 2757, 2758, 1182, 2761, 1403, 3167,
	188, 995, 2519, 3287, 1024, 664, 664, 1538, 3052, 3730,
	2402, 3401, 666, 2380, 660, 660, 3553, 3289, 2458, 1026,
	1343, 127, 1345, 62, 1183, 182, 3922, 128, 3937, 1144,
	1146, 3446, 662, 662, 663, 663, 661, 661, 1360, 636,
	3542, 2379, 1158, 874, 1426, 1427, 62, 2701, 3762, 3626,
	1472, 1320, 1136, 2650, 1325, 3481, 1156, 1246, 1247, 1248,
	1249, 1135, 2348, 1023, 2574, 3091, 158, 1164, 2328, 2351,
	1160, 1161, 943, 158, 62, 158, 158, 158, 158, 158,
	1471, 1823, 1415, 1166, 129, 3288, 1129, 1251, 1165, 158,
	1426, 1427, 1623, 191, 3664, 1624, 158, 60, 1817, 3548,
	158, 3656, 2011, 666, 1176, 1401, 3076, 158, 3086, 891,
	3629, 1400, 2972, 2694, 1399, 3139, 1192, 158, 2148, 1193,
	933, 3643, 934, 2400, 2401, 642, 2350, 3834, 1454, 3677,
	1178, 2335, 3142, 2836, 618, 618, 1418, 1417, 1422, 3330,
	1661, 3811, 1181, 1184, 618, 618, 62, 1195, 1487, 1487,
	1128, 642, 3486, 3027, 2371, 2808, 2328, 2809, 2810, 3430,
	2003, 1356, 2912, 2913, 3923, 62, 678, 1241, 1177, 2349,
	2698, 2699, 668, 1515, 636, 2001, 1485, 1485, 1629, 1526,
	1526, 137, 191, 3241, 138, 2697, 3078, 3790, 1489, 158,
	211, 3166, 989, 1459, 58, 1172, 2345, 1293, 1294, 618,
	3723, 1494, 3465, 3605, 3162, 3163, 3158, 3715, 158, 3563,
	3564, 3565, 3569, 3567, 3568, 3566, 2707, 2710, 2711, 2712,
	2708, 2709, 3043, 2896, 2898, 1357, 1358, 1191, 2566, 2447,
	2366, 1367, 1368, 1369, 1370, 1371, 3099, 1373, 2664, 1449,
	2133, 1361, 1999, 1379, 3609, 1179, 3610, 2338, 1372, 1819,
	1453, 1568, 3193, 2974, 1378, 3290, 1573, 1544, 1377, 3676,
	130, 45, 3604, 1582, 1376, 1493, 1196, 59, 1375, 2334,
	672, 1481, 1482, 2159, 2336, 991, 2256, 3159, 990, 1324,
	134, 135, 1171, 1326, 136, 937, 938, 939, 1611, 3555,
	3544, 1194, 2145, 2146, 3543, 2805, 3920, 3921, 3277, 1385,
	3612, 2669, 1487, 2250, 1487, 1141, 3833, 1365, 1466, 1468,
	935, 2983, 2982, 1366, 1591, 989, 1410, 1411, 1479, 1480,
	2252, 2251, 1354, 1397, 1830, 2335, 2338, 1648, 2337, 3466,
	1027, 3611, 1831, 3549, 3550, 1352, 1353, 1027, 3045, 1577,
	2249, 1829, 896, 1387, 2392, 897, 1588, 1547, 3516, 1550,
	1551, 1210, 1211, 1212, 1209, 1405, 1409, 1409, 1409, 665,
	3938, 1552, 1553, 1630, 1443, 1444, 3100, 1430, 1394, 2426,
	1433, 1621, 1487, 1539, 932, 1402, 1516, 1558, 1559, 2339,
	1405, 1405, 1412, 2837, 2839, 2840, 2841, 2838, 3800, 1707,
	1431, 1432, 2897, 1434, 1435, 989, 1436, 3004, 991, 1470,
	1695, 990, 1581, 1756, 900, 2344, 1138, 2193, 1563, 2342,
	2192, 1567, 1566, 3242, 3118, 2599, 2733, 647, 1669, 1670,
	1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680,
	1495, 1208, 1507, 2264, 1692, 1693, 1527, 2827, 2828, 2365,
	1170, 1528, 1513, 1119, 1115, 1116, 1117, 1118, 1645, 2604,
	3933, 2603, 2602, 2600, 2052, 899, 2265, 2266, 2339, 902,
	901, 2665, 3199, 2334, 2328, 2333, 3928, 2331, 2336, 1141,
	2458, 1631, 1820, 1396, 1138, 1818, 1606, 1607, 991, 2323,
	3160, 990, 1765, 1208, 3195, 1664, 3917, 1626, 1834, 1835,
	2734, 1809, 1172, 1515, 1798, 2427, 1001, 664, 1843, 1487,
	1848, 1849, 2308, 1851, 1454, 642, 660, 3882, 1741, 1619,
	642, 2538, 3293, 1487, 1746, 1747, 1748, 943, 1616, 2601,
	1871, 1600, 2337, 2138, 662, 1594, 663, 1762, 661, 1487,
	1763, 3253, 3854, 1396, 3848, 1454, 1615, 2335, 2338, 3929,
	659, 1801, 1639, 1599, 1620, 3830, 1602, 1776, 1777, 1755,
	2229, 1618, 1208, 3605, 1617, 1614, 2734, 3606, 3781, 3883,
	1896, 2826, 1642, 1690, 1691, 1644, 1797, 2565, 1610, 1903,
	1903, 3756, 1454, 3171, 1454, 1454, 3169, 1609, 642, 642,
	3883, 1970, 1843, 1974, 1683, 1169, 1487, 1977, 1978, 1990,
	1210, 1211, 1212, 1209, 2050, 3037, 3035, 2427, 2275, 1738,
	1739, 3744, 1742, 2915, 618, 3855, 1487, 3639, 3696, 3695,
	1757, 1172, 2427, 3690, 1050, 1055, 1056, 721, 3831, 1853,
	1321, 1900, 1850, 1764, 1858, 1766, 1852, 1767, 1768, 1769,
	2681, 3639, 2655, 642, 1843, 1487, 2307, 2035, 2555, 642,
	642, 642, 676, 676, 2138, 1210, 1211, 1212, 1209, 2045,
	2046, 2047, 2048, 3689, 2543, 1804, 2054, 2172, 2605, 2606,
	1925, 2129, 1170, 211, 3688, 3687, 211, 211, 2027, 211,
	2339, 1770, 3199, 1972, 3745, 2334, 2328, 2333, 3667, 2331,
	2336, 3697, 2297, 1839, 1840, 1841, 3639, 1210, 1211, 1212,
	1209, 2169, 1909, 1910, 1906, 1854, 1855, 1856, 1857, 1991,
	2321, 1799, 878, 879, 880, 881, 2234, 2019, 2020, 1756,
	1756, 2097, 3666, 1805, 2274, 3638, 2228, 3406, 1874, 1875,
	1756, 1756, 1996, 2005, 1998, 2227, 3639, 2113, 3354, 3320,
	2200, 1838, 3269, 2171, 2337, 2017, 2018, 3639, 3639, 3303,
	2120, 3265, 1904, 2037, 2038, 2039, 2022, 2031, 1867, 1386,
	2012, 2138, 3179, 2031, 2031, 2031, 2034, 2891, 1871, 1847,
	1905, 2630, 1487, 2127, 2063, 2107, 1873, 2066, 2067, 1698,
	2069, 1889, 1868, 1863, 1872, 1885, 2622, 2581, 1907, 1908,
	1498, 1027, 1879, 1894, 1027, 2138, 1473, 1888, 3639, 1877,
	2458, 3945, 1027, 1577, 3930, 3341, 2919, 1884, 1405, 1886,
	1887, 3355, 3321, 1895, 2563, 3270, 1898, 1899, 1052, 1053,
	1054, 2736, 1409, 1893, 3266, 665, 2551, 2545, 1971, 2121,
	2540, 2099, 1880, 1881, 1409, 3180, 1060, 1061, 1976, 1979,
	2427, 1065, 2532, 2103, 1208, 1995, 2006, 1997, 2530, 1890,
	1891, 878, 879, 880, 881, 2528, 1847, 2568, 1225, 1208,
	1208, 883, 1024, 2526, 2296, 2092, 2230, 2207, 2567, 1901,
	2206, 2191, 2182, 1024, 2033, 2181, 2092, 1026, 1447, 1448,
	2032, 1450, 1451, 2559, 1455, 1456, 1457, 2297, 1026, 2040,
	2041, 2180, 2137, 2156, 2157, 2029, 2060, 1027, 2058, 2541,
	2546, 1603, 3939, 2541, 2315, 1642, 2188, 2173, 2118, 2057,
	2043, 1596, 1258, 1157, 3579, 2533, 1502, 1503, 1504, 1505,
	1506, 2531, 1508, 1509, 1510, 1511, 1512, 2077, 2527, 1125,
	1518, 1519, 1520, 1521, 1120, 2109, 2527, 2297, 1406, 2229,
	1208, 2152, 3404, 1208, 1208, 1208, 1241, 2098, 1208, 2021,
	1745, 1744, 2106, 2104, 3123, 2239, 2240, 2117, 2243, 2966,
	898, 2246, 1477, 664, 1208, 2138, 3749, 3517, 1024, 3114,
	3333, 3331, 660, 1478, 1604, 3908, 2518, 719, 1745, 1744,
	642, 642, 642, 1026, 1392, 2122, 2363, 2116, 1393, 3726,
	662, 3637, 663, 1702, 661, 642, 642, 642, 642, 1437,
	883, 1228, 1229, 1230, 1231, 1232, 1225, 3601, 2294, 2115,
	3750, 3518, 1475, 3546, 3334, 3332, 2160, 1689, 3545, 2300,
	1454, 3531, 2154, 2155, 2151, 3227, 3489, 3313, 2201, 2202,
	3200, 2204, 3191, 1686, 1688, 1685, 3185, 1687, 2211, 765,
	133, 3181, 3094, 2153, 1683, 133, 1454, 3115, 2860, 2859,
	2165, 2705, 2660, 2578, 2544, 2449, 1407, 2102, 1771, 1772,
	1773, 1774, 1782, 2357, 1778, 1779, 1780, 1781, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1224, 1223,
	1233, 1234, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1225,
	1775, 3116, 2588, 2101, 2268, 2269, 2270, 2195, 2100, 1382,
	1392, 1381, 1143, 903, 1393, 648, 2584, 2512, 133, 2285,
	2286, 2287, 2288, 1474, 2061, 2921, 2364, 1226, 1227, 1228,
	1229, 1230, 1231, 1232, 1225, 1833, 2431, 2431, 1990, 2431,
	1224, 1223, 1233, 1234, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1225, 2223, 2225, 2226, 3801, 2231, 2312, 618, 618,
	1209, 2314, 3671, 2316, 1212, 1209, 1141, 1210, 1211, 1212,
	1209, 3558, 1487, 642, 3557, 2938, 3228, 2797, 2317, 1216,
	1217, 1218, 1219, 1220, 1221, 1222, 1214, 642, 1282, 1702,
	1531, 2166, 2061, 1141, 2502, 636, 1281, 2258, 2327, 2326,
	2453, 1526, 2795, 1990, 2773, 2276, 2507, 2771, 2509, 3537,
	1027, 3913, 211, 3490, 3491, 2466, 1224, 1223, 1233, 1234,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1225, 2997, 2320,
	1210, 1211, 1212, 1209, 2301, 2435, 2433, 1260, 2437, 3936,
	1025, 3230, 2444, 1760, 2445, 133, 1210, 1211, 1212, 1209,
	1259, 3483, 2548, 1210, 1211, 1212, 1209, 2522, 1761, 3912,
	133, 1531, 133, 2450, 2451, 1210, 1211, 1212, 1209, 2561,
	3858, 2557, 2558, 2127, 2590, 2302, 2303, 2643, 2313, 2644,
	1487, 1024, 1487, 3829, 1487, 2305, 2306, 1493, 2996, 1141,
	3828, 2460, 2340, 2341, 3751, 2346, 1026, 2580, 2304, 2675,
	2506, 2031, 3935, 2310, 3692, 3301, 2311, 3680, 2985, 3484,
	2571, 2575, 2848, 2513, 3670, 1210, 1211, 1212, 1209, 1409,
	3660, 3592, 3520, 1487, 2608, 1210, 1211, 1212, 1209, 3519,
	2409, 2846, 1466, 1468, 2514, 2309, 3346, 3335, 3300, 2615,
	3084, 2439, 753, 763, 1487, 1210, 1211, 1212, 1209, 2962,
	2844, 1485, 754, 2933, 755, 759, 762, 758, 756, 757,
	1213, 2833, 2607, 3302, 2932, 2184, 2831, 3932, 1243, 2830,
	2847, 2829, 1485, 2821, 2454, 2815, 2814, 1253, 2457, 1210,
	1211, 1212, 1209, 2616, 1210, 1211, 1212, 1209, 1532, 2845,
	2813, 2614, 2662, 2663, 3839, 2170, 2666, 2503, 2505, 2812,
	2619, 2620, 1261, 2036, 2656, 2534, 2446, 760, 2843, 1469,
	2617, 2592, 2233, 2592, 1141, 2080, 2079, 2078, 1141, 2832,
	2074, 1210, 1211, 1212, 1209, 1487, 2073, 3737, 1454, 2028,
	2596, 1826, 2183, 2176, 1974, 1824, 2682, 1597, 1339, 761,
	2466, 2704, 2732, 3307, 2504, 2577, 3312, 3069, 2738, 3768,
	2572, 2586, 3461, 2511, 1210, 1211, 1212, 1209, 2553, 1210,
	1211, 1212, 1209, 2763, 3931, 2562, 2748, 2647, 3440, 2564,
	2569, 1210, 1211, 1212, 1209, 714, 1141, 3906, 716, 1210,
	1211, 1212, 1209, 715, 2770, 1210, 1211, 1212, 1209, 2582,
	2583, 1141, 1141, 1141, 1903, 2168, 1123, 1141, 3874, 2781,
	2782, 2783, 2784, 1141, 2791, 2585, 2792, 2793, 1027, 2794,
	2598, 2796, 3873, 2716, 2776, 2777, 3449, 2720, 3870, 2780,
	3630, 3631, 2791, 3808, 2717, 2787, 3807, 1210, 1211, 1212,
	1209, 3448, 3619, 2729, 2431, 1210, 1211, 1212, 1209, 3788,
	1642, 3733, 3494, 1210, 1211, 1212, 1209, 3712, 2849, 3857,
	2702, 3703, 1925, 1122, 3684, 3394, 2730, 618, 1210, 1211,
	1212, 1209, 2751, 1974, 1141, 1990, 1990, 1990, 1990, 3679,
	2739, 1210, 1211, 1212, 1209, 3678, 2749, 1141, 1990, 3634,
	3621, 2431, 1210, 1211, 1212, 1209, 2873, 2684, 2768, 2686,
	3620, 3593, 2768, 3539, 3501, 3487, 3469, 2854, 1487, 2873,
	3467, 2683, 3463, 3460, 2764, 3459, 2700, 3438, 2369, 642,
	642, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 3257, 2775,
	2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390,
	2391, 8, 2393, 2394, 2395, 2396, 2397, 7, 2398, 2737,
	2731, 2723, 3436, 3413, 3410, 1210, 1211, 1212, 1209, 2750,
	3408, 2753, 2853, 3299, 3298, 3295, 3285, 3278, 2766, 3262,
	3260, 2772, 3188, 2887, 3187, 211, 2779, 3182, 2625, 2626,
	211, 3177, 2769, 3000, 2631, 1233, 1234, 1226, 1227, 1228,
	1229, 1230, 1231, 1232, 1225, 1847, 1525, 1525, 3176, 3095,
	3056, 3055, 1756, 3051, 1756, 2811, 3049, 2948, 2823, 2741,
	1210, 1211, 1212, 1209, 2744, 133, 133, 1025, 3047, 2916,
	2961, 3044, 3042, 2238, 2976, 2973, 1487, 2931, 2905, 2968,
	2842, 2834, 2747, 2909, 2910, 2855, 2824, 2999, 2822, 2861,
	2818, 2858, 2874, 2875, 2876, 2877, 2817, 2816, 2670, 2668,
	2661, 2886, 2657, 2740, 2554, 2890, 2253, 2889, 2888, 820,
	819, 3764, 2745, 2746, 1210, 1211, 1212, 1209, 2248, 1551,
	2998, 2247, 2906, 1027, 2903, 3614, 2922, 2244, 2083, 1552,
	1553, 2926, 2943, 2641, 1027, 2076, 1832, 1801, 3613, 1812,
	1242, 1811, 2947, 2954, 1558, 1559, 1598, 1210, 1211, 1212,
	1209, 1501, 1390, 1348, 1346, 2899, 1289, 1285, 1284, 1126,
	1210, 1211, 1212, 1209, 887, 2990, 3602, 2992, 2945, 194,
	1563, 185, 157, 1567, 1566, 3462, 3046, 3447, 2955, 2920,
	3326, 2924, 2923, 3325, 3050, 3324, 3292, 3274, 3053, 3054,
	3272, 3271, 3268, 3267, 2970, 2640, 1141, 2965, 2944, 3261,
	3259, 3243, 3072, 2941, 2939, 3233, 1654, 1655, 1656, 1657,
	1658, 2958, 3088, 2957, 2946, 3232, 2956, 642, 3218, 3217,
	2964, 3124, 1210, 1211, 1212, 1209, 3059, 3034, 3002, 3104,
	1141, 2995, 2987, 642, 2978, 1141, 1141, 2986, 2980, 190,
	1279, 2977, 2914, 2639, 1990, 2294, 2984, 3122, 1699, 2680,
	2988, 2989, 1703, 1704, 1705, 1706, 2529, 2993, 2994, 2525,
	2524, 1740, 2212, 2991, 2161, 2205, 2357, 2199, 2198, 1750,
	1210, 1211, 1212, 1209, 2197, 2196, 2194, 3098, 3148, 3036,
	3151, 2190, 3151, 3151, 2189, 3058, 1327, 1141, 1224, 1223,
	1233, 1234, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1225,
	2187, 2178, 1027, 2175, 1027, 2716, 3172, 2174, 3041, 1027,
	2691, 2082, 3168, 3107, 1487, 1487, 3040, 1795, 3111, 1794,
	1793, 1802, 2638, 1759, 1758, 3135, 3137, 1749, 3057, 2637,
	194, 3096, 1499, 3170, 1497, 1027, 3763, 3698, 3686, 3681,
	1546, 3120, 1485, 1485, 3131, 3573, 3556, 3108, 3552, 1210,
	1211, 1212, 1209, 3173, 3174, 3530, 1210, 1211, 1212, 1209,
	3514, 642, 3097, 3126, 3423, 3106, 3421, 3072, 3146, 3392,
	3109, 3110, 3391, 1024, 3388, 1451, 1454, 2636, 3121, 1974,
	1974, 3147, 3156, 3117, 3387, 3353, 3350, 3348, 1026, 3315,
	1557, 1548, 3780, 2635, 1876, 3130, 2327, 2326, 1562, 1565,
	190, 1554, 2803, 2804, 1210, 1211, 1212, 1209, 1389, 2850,
	2774, 3152, 3153, 2725, 2724, 3157, 2718, 2819, 2820, 1892,
	1210, 1211, 1212, 1209, 2685, 2642, 1141, 2539, 2448, 2399,
	2608, 2295, 2267, 1496, 2232, 1684, 190, 648, 2042, 3231,
	1837, 1808, 2856, 3009, 3010, 1627, 1580, 1555, 2466, 3011,
	3012, 3013, 3014, 1338, 3015, 3016, 3017, 3018, 3019, 3020,
	3021, 3022, 3023, 3024, 1323, 3178, 1319, 1318, 1317, 133,
	1316, 1315, 1314, 3154, 1802, 2031, 1313, 1312, 1311, 1802,
	1802, 2634, 1310, 1309, 1308, 642, 1307, 1306, 1305, 3196,
	3197, 3184, 3183, 1304, 3186, 3125, 3190, 2633, 3194, 3189,
	3127, 3128, 1303, 1302, 1301, 3207, 1300, 1299, 1210, 1211,
	1212, 1209, 2632, 3214, 3215, 3216, 1298, 1297, 1296, 1295,
	1292, 3211, 3778, 2629, 1210, 1211, 1212, 1209, 1291, 2062,
	1290, 1288, 2065, 2628, 1287, 2068, 1286, 133, 2070, 1210,
	1211, 1212, 1209, 3226, 133, 1283, 1276, 3220, 2627, 3129,
	1210, 1211, 1212, 1209, 1275, 2054, 3282, 133, 1273, 3284,
	1210, 1211, 1212, 1209, 3363, 1272, 1271, 1270, 3244, 133,
	1269, 1268, 1267, 3246, 1266, 1210, 1211, 1212, 1209, 3245,
	3209, 2621, 1265, 1264, 3263, 1263, 1262, 3250, 2592, 3208,
	2611, 1257, 1256, 2112, 3249, 2587, 1255, 1254, 1174, 3252,
	1124, 642, 1974, 3375, 3888, 3255, 3776, 3286, 1210, 1211,
	1212, 1209, 3319, 3203, 3204, 3774, 3366, 1210, 1211, 1212,
	1209, 3389, 1210, 1211, 1212, 1209, 3198, 3361, 2431, 1990,
	3338, 2299, 3383, 3384, 2281, 1162, 3886, 3844, 3362, 3206,
	3425, 2706, 3210, 1027, 1697, 2459, 2085, 1173, 3426, 2883,
	1027, 2880, 3291, 3356, 2884, 2881, 1141, 3281, 3279, 3294,
	2882, 3275, 2879, 2878, 2885, 3148, 2423, 2424, 117, 1141,
	64, 1210, 1211, 1212, 1209, 3367, 63, 3535, 3357, 2552,
	1141, 2542, 3403, 1383, 1865, 1866, 1487, 1860, 1861, 1862,
	3093, 3396, 3144, 2960, 3145, 2367, 2162, 3424, 3399, 3340,
	2167, 3221, 2787, 1962, 642, 3308, 1974, 2413, 1540, 3347,
	1141, 3349, 3310, 2799, 1485, 2031, 3247, 3248, 2537, 2576,
	2800, 2801, 2802, 1593, 3386, 3405, 3337, 3336, 2557, 2558,
	2254, 1574, 2873, 2044, 644, 3343, 645, 3379, 1168, 211,
	3067, 2179, 646, 3060, 2418, 2422, 2423, 2424, 2419, 2186,
	2420, 2425, 1141, 2752, 2421, 2726, 2319, 3417, 2290, 3414,
	1869, 3398, 3427, 1836, 3395, 1745, 1744, 3897, 3393, 3683,
	3382, 2203, 2333, 3175, 2873, 2410, 2208, 2209, 2210, 3407,
	3402, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221,
	2222, 3464, 3411, 3409, 3412, 2405, 3416, 3371, 3419, 3418,
	3472, 1334, 1335, 1975, 1141, 1332, 1333, 1446, 3415, 1330,
	1331, 1445, 1201, 3445, 1328, 1329, 3213, 2908, 2031, 3368,
	3372, 3370, 3369, 2255, 2114, 1398, 1141, 1487, 1487, 1374,
	1421, 3864, 3104, 3862, 3822, 3798, 3797, 3795, 3441, 3740,
	3431, 3442, 3470, 3471, 3509, 3699, 3509, 3587, 3497, 3586,
	3525, 3429, 3437, 3264, 3240, 1485, 1695, 3377, 3378, 1141,
	3524, 1141, 3239, 3503, 3504, 3224, 3499, 2352, 1989, 3527,
	2322, 3529, 1595, 3223, 2918, 3339, 1396, 3283, 1487, 3890,
	3889, 1648, 3477, 1648, 3342, 2963, 2667, 2283, 3479, 3478,
	2177, 3458, 1342, 3474, 1159, 3889, 642, 3890, 1141, 1141,
	3554, 3488, 1141, 1141, 3500, 3385, 1695, 1027, 3219, 1138,
	3502, 3513, 1413, 3512, 72, 3340, 3506, 3364, 198, 3,
	3497, 3497, 3575, 3376, 3497, 3497, 2, 3570, 3532, 3523,
	3909, 3533, 1871, 3910, 3584, 3560, 3561, 3386, 3538, 3571,
	3572, 3536, 133, 3588, 3589, 133, 133, 1, 133, 2648,
	3379, 1806, 1336, 882, 3540, 877, 1487, 2099, 1223, 1233,
	1234, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1225, 1729,
	1463, 3581, 3576, 2440, 2023, 3528, 1491, 3616, 878, 879,
	880, 881, 3580, 1138, 1485, 1810, 884, 2892, 1025, 3608,
	2893, 133, 3212, 3582, 1802, 3600, 1802, 2895, 2671, 1025,
	2134, 2862, 2403, 2271, 3087, 1384, 936, 1751, 1608, 1049,
	3559, 3595, 3599, 133, 1152, 1802, 1802, 1605, 1151, 3603,
	3607, 1149, 1700, 767, 2088, 3652, 2851, 2825, 3646, 1224,
	1223, 1233, 1234, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
	1225, 1141, 3583, 3896, 3925, 3856, 3899, 1625, 1525, 751,
	3789, 3669, 3704, 3381, 3675, 3633, 3860, 3706, 3598, 2139,
	3640, 1206, 2940, 1648, 961, 808, 778, 1274, 1586, 3007,
	3005, 3647, 1051, 3445, 777, 3649, 3648, 3305, 2696, 2911,
	3661, 3450, 3654, 3451, 1141, 3665, 1048, 962, 2071, 1487,
	1027, 3521, 3522, 3701, 1242, 3596, 1541, 1545, 2547, 3644,
	2550, 2418, 2422, 2423, 2424, 2419, 3497, 2420, 2425, 2318,
	3662, 2421, 3682, 3759, 3534, 3140, 2760, 1485, 1569, 3754,
	3351, 3691, 3454, 3452, 3453, 684, 3722, 2002, 3693, 3380,
	616, 1009, 3574, 1725, 3729, 2084, 3316, 3317, 3318, 3717,
	1722, 685, 3322, 3323, 1724, 1721, 1723, 1727, 1728, 2298,
	1141, 3700, 1726, 3813, 3685, 916, 2280, 917, 909, 2714,
	2713, 1665, 1215, 1682, 2589, 3741, 1729, 2595, 3025, 3026,
	1252, 723, 3497, 2164, 2609, 2610, 2693, 3727, 3374, 2904,
	71, 70, 2612, 2613, 69, 68, 3736, 219, 769, 3732,
	218, 3735, 3617, 3758, 3492, 3785, 3901, 1141, 2618, 749,
	3743, 748, 747, 746, 745, 1487, 744, 2417, 3783, 3786,
	2415, 3773, 3775, 3777, 3779, 3752, 2414, 1985, 3757, 3497,
	1984, 2051, 3102, 2790, 3787, 2785, 1654, 1802, 1914, 1912,
	2778, 3766, 2347, 1485, 3772, 2354, 1911, 3841, 3769, 3770,
	3551, 2835, 3444, 1859, 3782, 2343, 1931, 2806, 1928, 1927,
	3794, 2798, 3792, 1487, 3547, 3541, 3652, 1959, 3650, 3508,
	3358, 3359, 3365, 2289, 1074, 1070, 1072, 1073, 3806, 1071,
	2597, 3192, 3832, 2324, 3062, 2263, 2262, 2260, 3840, 2259,
	1359, 1485, 3823, 3821, 3728, 3825, 3809, 3826, 3827, 3473,
	2464, 2462, 3824, 1121, 3205, 3201, 1732, 1733, 1734, 1735,
	1736, 1737, 1730, 1731, 2096, 2742, 2743, 2110, 2959, 1986,
	1982, 3849, 2864, 3850, 2411, 3851, 3869, 3852, 3624, 3853,
	3863, 1864, 3865, 3866, 3861, 910, 2278, 3859, 41, 115,
	1725, 105, 174, 1141, 56, 3868, 3717, 1722, 173, 55,
	113, 1724, 1721, 1723, 1727, 1728, 171, 54, 100, 1726,
	99, 112, 3675, 3878, 169, 3876, 53, 203, 202, 205,
	3881, 3880, 3879, 204, 201, 3887, 3895, 3884, 3903, 3885,
	2515, 3902, 2516, 3891, 3892, 3893, 3894, 200, 1529, 199,
	3799, 3511, 872, 44, 43, 175, 3914, 42, 1141, 3907,
	106, 57, 40, 39, 38, 34, 13, 2434, 3915, 12,
	3758, 3916, 3918, 35, 194, 61, 185, 157, 3924, 3927,
	1648, 22, 21, 1612, 20, 26, 32, 31, 126, 125,
	30, 124, 186, 123, 122, 121, 120, 119, 29, 178,
	19, 949, 3934, 187, 48, 47, 46, 9, 3577, 111,
	3903, 3941, 3578, 3902, 3940, 109, 28, 110, 107, 103,
	3927, 3942, 131, 101, 83, 82, 3946, 81, 96, 95,
	94, 93, 1989, 92, 91, 3526, 89, 118, 90, 960,
	80, 133, 79, 78, 190, 77, 76, 98, 104, 102,
	87, 97, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 1719, 1720, 1732, 1733, 1734, 1735, 1736, 1737, 1730,
	1731, 946, 947, 88, 86, 1210, 1211, 1212, 1209, 85,
	84, 75, 989, 74, 73, 155, 2925, 154, 2927, 1224,
	1223, 1233, 1234, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
	1225, 153, 152, 151, 149, 150, 148, 1802, 1236, 147,
	1240, 146, 1802, 145, 144, 143, 49, 50, 51, 52,
	165, 139, 140, 2112, 141, 142, 1237, 1239, 1235, 164,
	1238, 1224, 1223, 1233, 1234, 1226, 1227, 1228, 1229, 1230,
	1231, 1232, 1225, 166, 168, 170, 167, 172, 162, 160,
	163, 161, 159, 66, 1729, 11, 114, 18, 2979, 25,
	696, 695, 702, 692, 4, 991, 0, 0, 990, 3003,
	0, 0, 699, 700, 0, 701, 705, 0, 0, 686,
	0, 0, 3001, 0, 0, 0, 0, 3694, 0, 710,
	0, 0, 0, 156, 184, 192, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 975, 0, 0, 0,
	0, 0, 0, 0, 950, 183, 177, 176, 0, 0,
	0, 0, 67, 1224, 1223, 1233, 1234, 1226, 1227, 1228,
	1229, 1230, 1231, 1232, 1225, 0, 0, 0, 0, 0,
	0, 952, 1224, 1223, 1233, 1234, 1226, 1227, 1228, 1229,
	1230, 1231, 1232, 1225, 0, 3742, 0, 0, 0, 0,
	3746, 3747, 0, 0, 0, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 0,
	0, 0, 0, 179, 180, 181, 0, 0, 0, 0,
	0, 3767, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 974, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 1725, 0,
	0, 0, 0, 0, 0, 1722, 971, 0, 0, 1724,
	1721, 1723, 1727, 1728, 0, 127, 0, 1726, 945, 182,
	0, 128, 3155, 0, 0, 0, 0, 0, 0, 951,
	984, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 980, 0, 0, 0, 0, 0, 687,
	689, 688, 1960, 0, 0, 0, 0, 1921, 0, 694,
	0, 0, 0, 0, 1989, 1989, 1989, 1989, 129, 0,
	0, 698, 0, 0, 0, 0, 0, 1989, 713, 981,
	985, 60, 0, 0, 0, 691, 0, 1962, 1930, 0,
	0, 0, 3871, 3872, 0, 0, 0, 1963, 1964, 968,
	0, 966, 970, 988, 0, 0, 0, 967, 964, 963,
	0, 969, 954, 955, 953, 956, 957, 958, 959, 0,
	986, 0, 987, 1929, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 982, 983, 0, 0, 0, 0, 1937,
	1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719,
	1720, 1732, 1733, 1734, 1735, 1736, 1737, 1730, 1731, 0,
	0, 0, 0, 0, 133, 137, 191, 0, 138, 133,
	978, 0, 0, 158, 0, 0, 977, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 973, 0, 0, 0, 693, 697, 703, 0, 704,
	706, 133, 0, 707, 708, 709, 0, 1953, 711, 712,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3256, 0, 0, 0, 0,
	0, 0, 3258, 0, 130, 45, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 5, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 135, 0, 0, 136, 976,
	0, 0, 0, 3273, 0, 948, 944, 0, 0, 1920,
	1922, 1919, 0, 1916, 0, 0, 0, 0, 1941, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1947,
	0, 0, 0, 1960, 0, 0, 0, 1932, 1921, 1915,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1935,
	1969, 0, 0, 1936, 1938, 1940, 0, 1942, 1943, 1944,
	1948, 1949, 1950, 1952, 1955, 1956, 1957, 0, 1962, 1930,
	0, 0, 0, 0, 1945, 1954, 1946, 0, 1963, 1964,
	0, 0, 0, 0, 0, 0, 1924, 0, 0, 0,
	0, 0, 0, 0, 690, 0, 0, 0, 0, 1025,
	0, 133, 0, 0, 1929, 0, 133, 0, 1961, 0,
	0, 0, 0, 1989, 0, 0, 0, 0, 0, 0,
	1937, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 1917, 1918, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1958, 1802, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1802, 0,
	1934, 3420, 0, 0, 3422, 0, 0, 1933, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1953, 0,
	0, 3428, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1951, 0, 0, 0, 0, 0, 0, 0, 0,
	1939, 0, 0, 0, 0, 0, 0, 696, 695, 702,
	692, 0, 0, 1966, 1965, 0, 0, 0, 0, 699,
	700, 0, 701, 705, 0, 0, 686, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 710, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1920, 2755, 1919, 0, 2754, 0, 0, 0, 0, 1941,
	0, 0, 0, 0, 0, 0, 1926, 0, 0, 0,
	1947, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	714, 0, 0, 716, 0, 0, 0, 0, 715, 0,
	1935, 1969, 0, 0, 1936, 1938, 1940, 0, 1942, 1943,
	1944, 1948, 1949, 1950, 1952, 1955, 1956, 1957, 1968, 0,
	0, 1967, 0, 0, 0, 1945, 1954, 1946, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1924, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1961,
	0, 0, 1093, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1917, 1918, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1934, 0, 0, 0, 0, 0, 0, 1933, 0,
	0, 0, 0, 0, 0, 0, 687, 689, 688, 0,
	133, 0, 0, 0, 0, 0, 694, 133, 0, 0,
	0, 0, 1951, 0, 0, 0, 0, 0, 698, 0,
	0, 1939, 0, 0, 0, 713, 3641, 0, 0, 0,
	0, 0, 691, 0, 1966, 1965, 681, 0, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1989, 0,
	1093, 0, 0, 0, 1101, 1105, 1107, 1109, 1111, 1112,
	1114, 0, 1119, 1115, 1116, 1117, 1118, 0, 1096, 1097,
	1098, 1099, 1076, 1077, 1102, 0, 1079, 1926, 1081, 1082,
	1083, 1084, 1080, 1085, 1086, 1087, 1088, 1089, 1092, 1094,
	1090, 1091, 1100, 0, 0, 0, 0, 0, 0, 0,
	1104, 1106, 1108, 1110, 1113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1968,
	0, 0, 1967, 0, 0, 0, 0, 0, 0, 0,
	1261, 0, 693, 697, 703, 0, 704, 706, 1095, 0,
	707, 708, 709, 0, 0, 711, 712, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 1068, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 1105, 1107, 1109, 1111, 1112, 1114, 3765,
	1119, 1115, 1116, 1117, 1118, 0, 1096, 1097, 1098, 1099,
	1076, 1077, 1102, 0, 1079, 0, 1081, 1082, 1083, 1084,
	1080, 1085, 1086, 1087, 1088, 1089, 1092, 1094, 1090, 1091,
	1100, 0, 0, 0, 0, 0, 0, 0, 1104, 1106,
	1108, 1110, 1113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1095, 2593, 2594, 0,
	0, 3837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 690, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 785, 0, 0, 0, 0, 0,
	0, 0, 0, 384, 0, 508, 541, 530, 614, 496,
	0, 0, 0, 0, 0, 0, 738, 0, 0, 0,
	324, 0, 3837, 354, 545, 527, 537, 528, 513, 514,
	515, 522, 334, 516, 517, 518, 488, 519, 489, 520,
	521, 776, 544, 495, 413, 368, 562, 561, 0, 0,
	843, 851, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 730, 0, 0, 766, 820, 819, 753,
	763, 3837, 0, 297, 217, 490, 610, 492, 491, 754,
	0, 755, 759, 762, 758, 756, 757, 0, 835, 0,
	0, 1103, 0, 0, 0, 722, 734, 0, 739, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 731, 732, 0, 0, 0, 3944, 786, 0,
	733, 0, 0, 781, 760, 764, 0, 0, 0, 0,
	287, 419, 436, 298, 409, 449, 303, 416, 293, 383,
	406, 0, 0, 289, 434, 415, 365, 344, 345, 288,
	0, 401, 322, 336, 319, 381, 761, 784, 788, 318,
	857, 782, 444, 291, 0, 443, 380, 430, 435, 366,
	360, 0, 290, 432, 364, 359, 348, 326, 858, 349,
	350, 340, 392, 358, 393, 341, 370, 369, 371, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 603, 779,
	0, 607, 0, 446, 0, 0, 841, 0, 0, 1103,
	418, 0, 0, 351, 0, 0, 0, 783, 0, 404,
	386, 854, 0, 0, 402, 356, 431, 394, 437, 420,
	445, 398, 395, 282, 421, 321, 367, 294, 296, 316,
	323, 325, 327, 328, 376, 377, 389, 408, 422, 423,
	424, 320, 304, 403, 305, 338, 306, 283, 312, 310,
	313, 410, 314, 285, 390, 428, 0, 333, 399, 363,
	286, 362, 391, 427, 426, 295, 453, 459, 460, 549,
	0, 465, 630, 631, 632, 474, 479, 480, 481, 483,
	484, 485, 486, 550, 567, 534, 504, 467, 558, 501,
	505, 506, 570, 1753, 1752, 1754, 458, 352, 353, 0,
	331, 279, 280, 625, 839, 382, 572, 605, 606, 497,
	0, 853, 834, 836, 837, 840, 844, 845, 846, 847,
	848, 850, 852, 856, 624, 0, 551, 566, 628, 565,
	621, 388, 0, 407, 563, 510, 0, 555, 529, 0,
	556, 525, 560, 0, 499, 0, 414, 439, 451, 468,
	471, 500, 585, 586, 587, 284, 470, 589, 590, 591,
	592, 593, 594, 595, 588, 855, 532, 509, 535, 450,
	512, 511, 0, 0, 546, 787, 547, 548, 372, 373,
	374, 375, 842, 573, 302, 469, 397, 0, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 538, 539, 536,
	633, 0, 596, 597, 0, 0, 463, 464, 330, 337,
	482, 339, 301, 387, 332, 448, 346, 0, 475, 540,
	476, 599, 602, 600, 601, 379, 342, 343, 411, 347,
	357, 400, 447, 385, 405, 299, 438, 412, 361, 526,
	553, 864, 838, 863, 865, 866, 862, 867, 868, 849,
	743, 0, 794, 860, 859, 861, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 580, 579,
	578, 577, 576, 575, 574, 0, 0, 523, 425, 311,
	273, 307, 308, 315, 622, 619, 429, 623, 0, 281,
	503, 355, 0, 396, 329, 568, 569, 0, 0, 827,
	801, 802, 803, 740, 804, 798, 799, 741, 800, 828,
	792, 824, 825, 768, 795, 805, 823, 806, 826, 829,
	830, 869, 870, 812, 796, 245, 871, 809, 831, 822,
	821, 807, 793, 832, 833, 775, 770, 810, 811, 797,
	815, 816, 817, 742, 789, 790, 791, 813, 814, 771,
	772, 773, 774, 0, 0, 0, 454, 455, 456, 478,
	0, 440, 502, 620, 0, 0, 0, 0, 0, 0,
	0, 552, 564, 598, 0, 608, 609, 611, 613, 818,
	615, 417, 785, 0, 626, 493, 494, 627, 604, 0,
	735, 384, 0, 508, 541, 530, 614, 496, 0, 0,
	0, 0, 0, 0, 738, 0, 0, 0, 324, 1803,
	0, 354, 545, 527, 537, 528, 513, 514, 515, 522,
	334, 516, 517, 518, 488, 519, 489, 520, 521, 776,
	544, 495, 413, 368, 562, 561, 0, 0, 843, 851,
	0, 0, 0, 0, 0, 0, 0, 0, 2014, 0,
	0, 730, 0, 0, 766, 820, 819, 753, 763, 0,
	0, 297, 217, 490, 610, 492, 491, 754, 0, 755,
	759, 762, 758, 756, 757, 0, 835, 0, 0, 0,
	0, 0, 0, 722, 734, 0, 739, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 732, 0, 0, 0, 0, 786, 0, 733, 0,
	0, 2015, 760, 764, 0, 0, 0, 0, 287, 419,
	436, 298, 409, 449, 303, 416, 293, 383, 406, 0,
	0, 289, 434, 415, 365, 344, 345, 288, 0, 401,
	322, 336, 319, 381, 761, 784, 788, 318, 857, 782,
	444, 291, 0, 443, 380, 430, 435, 366, 360, 0,
	290, 432, 364, 359, 348, 326, 858, 349, 350, 340,
	392, 358, 393, 341, 370, 369, 371, 0, 0, 0,
	0, 0, 472, 473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 603, 779, 0, 607,
	0, 446, 0, 0, 841, 0, 0, 0, 418, 0,
	0, 351, 0, 0, 0, 783, 0, 404, 386, 854,
	0, 0, 402, 356, 431, 394, 437, 420, 445, 398,
	395, 282, 421, 321, 367, 294, 296, 316, 323, 325,
	327, 328, 376, 377, 389, 408, 422, 423, 424, 320,
	304, 403, 305, 338, 306, 283, 312, 310, 313, 410,
	314, 285, 390, 428, 0, 333, 399, 363, 286, 362,
	391, 427, 426, 295, 453, 459, 460, 549, 0, 465,
	630, 631, 632, 474, 479, 480, 481, 483, 484, 485,
	486, 550, 567, 534, 504, 467, 558, 501, 505, 506,
	570, 0, 0, 0, 458, 352, 353, 0, 331, 279,
	280, 625, 839, 382, 572, 605, 606, 497, 0, 853,
	834, 836, 837, 840, 844, 845, 846, 847, 848, 850,
	852, 856, 624, 0, 551, 566, 628, 565, 621, 388,
	0, 407, 563, 510, 0, 555, 529, 0, 556, 525,
	560, 0, 499, 0, 414, 439, 451, 468, 471, 500,
	585, 586, 587, 284, 470, 589, 590, 591, 592, 593,
	594, 595, 588, 855, 532, 509, 535, 450, 512, 511,
	0, 0, 546, 787, 547, 548, 372, 373, 374, 375,
	842, 573, 302, 469, 397, 0, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 538, 539, 536, 633, 0,
	596, 597, 0, 0, 463, 464, 330, 337, 482, 339,
	301, 387, 332, 448, 346, 0, 475, 540, 476, 599,
	602, 600, 601, 379, 342, 343, 411, 347, 357, 400,
	447, 385, 405, 299, 438, 412, 361, 526, 553, 864,
	838, 863, 865, 866, 862, 867, 868, 849, 743, 0,
	794, 860, 859, 861, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 580, 579, 578, 577,
	576, 575, 574, 0, 0, 523, 425, 311, 273, 307,
	308, 315, 622, 619, 429, 623, 0, 281, 503, 355,
	0, 396, 329, 568, 569, 0, 0, 827, 801, 802,
	803, 740, 804, 798, 799, 741, 800, 828, 792, 824,
	825, 768, 795, 805, 823, 806, 826, 829, 830, 869,
	870, 812, 796, 245, 871, 809, 831, 822, 821, 807,
	793, 832, 833, 775, 770, 810, 811, 797, 815, 816,
	817, 742, 789, 790, 791, 813, 814, 771, 772, 773,
	774, 0, 0, 0, 454, 455, 456, 478, 0, 440,
	502, 620, 0, 0, 0, 0, 0, 0, 0, 552,
	564, 598, 0, 608, 609, 611, 613, 818, 615, 417,
	194, 785, 626, 493, 494, 627, 604, 0, 735, 0,
	384, 0, 508, 541, 530, 614, 496, 0, 0, 0,
	0, 0, 0, 738, 0, 0, 0, 324, 0, 0,
	354, 545, 527, 537, 528, 513, 514, 515, 522, 334,
	516, 517, 518, 488, 519, 489, 520, 521, 1245, 544,
	495, 413, 368, 562, 561, 0, 0, 843, 851, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	730, 0, 0, 766, 820, 819, 753, 763, 0, 0,
	297, 217, 490, 610, 492, 491, 754, 0, 755, 759,
	762, 758, 756, 757, 0, 835, 0, 0, 0, 0,
	0, 0, 722, 734, 0, 739, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 731,
	732, 0, 0, 0, 0, 786, 0, 733, 0, 0,
	781, 760, 764, 0, 0, 0, 0, 287, 419, 436,
	298, 409, 449, 303, 416, 293, 383, 406, 0, 0,
	289, 434, 415, 365, 344, 345, 288, 0, 401, 322,
	336, 319, 381, 761, 784, 788, 318, 857, 782, 444,
	291, 0, 443, 380, 430, 435, 366, 360, 0, 290,
	432, 364, 359, 348, 326, 858, 349, 350, 340, 392,
	358, 393, 341, 370, 369, 371, 0, 0, 0, 0,
	0, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 603, 779, 0, 607, 0,
	446, 0, 0, 841, 0, 0, 0, 418, 0, 0,
	351, 0, 0, 0, 783, 0, 404, 386, 854, 0,
	0, 402, 356, 431, 394, 437, 420, 445, 398, 395,
	282, 421, 321, 367, 294, 296, 316, 323, 325, 327,
	328, 376, 377, 389, 408, 422, 423, 424, 320, 304,
	403, 305, 338, 306, 283, 312, 310, 313, 410, 314,
	285, 390, 428, 0, 333, 399, 363, 286, 362, 391,
	427, 426, 295, 453, 459, 460, 549, 0, 465, 630,
	631, 632, 474, 479, 480, 481, 483, 484, 485, 486,
	550, 567, 534, 504, 467, 558, 501, 505, 506, 570,
	0, 0, 0, 458, 352, 353, 0, 331, 279, 280,
	625, 839, 382, 572, 605, 606, 497, 0, 853, 834,
	836, 837, 840, 844, 845, 846, 847, 848, 850, 852,
	856, 624, 0, 551, 566, 628, 565, 621, 388, 0,
	407, 563, 510, 0, 555, 529, 0, 556, 525, 560,
	0, 499, 0, 414, 439, 451, 468, 471, 500, 585,
	586, 587, 284, 470, 589, 590, 591, 592, 593, 594,
	595, 588, 855, 532, 509, 535, 450, 512, 511, 0,
	0, 546, 787, 547, 548, 372, 373, 374, 375, 842,
	573, 302, 469, 397, 0, 533, 0, 0, 0, 0,
	0, 0, 0, 0, 538, 539, 536, 633, 0, 596,
	597, 0, 0, 463, 464, 330, 337, 482, 339, 301,
	387, 332, 448, 346, 0, 475, 540, 476, 599, 602,
	600, 601, 379, 342, 343, 411, 347, 357, 400, 447,
	385, 405, 299, 438, 412, 361, 526, 553, 864, 838,
	863, 865, 866, 862, 867, 868, 849, 743, 0, 794,
	860, 859, 861, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 580, 579, 578, 577, 576,
	575, 574, 0, 0, 523, 425, 311, 273, 307, 308,
	315, 622, 619, 429, 623, 0, 281, 503, 355, 158,
	396, 329, 568, 569, 0, 0, 827, 801, 802, 803,
	740, 804, 798, 799, 741, 800, 828, 792, 824, 825,
	768, 795, 805, 823, 806, 826, 829, 830, 869, 870,
	812, 796, 245, 871, 809, 831, 822, 821, 807, 793,
	832, 833, 775, 770, 810, 811, 797, 815, 816, 817,
	742, 789, 790, 791, 813, 814, 771, 772, 773, 774,
	0, 0, 0, 454, 455, 456, 478, 0, 440, 502,
	620, 0, 0, 0, 0, 0, 0, 0, 552, 564,
	598, 0, 608, 609, 611, 613, 818, 615, 417, 785,
	0, 626, 493, 494, 627, 604, 0, 735, 384, 0,
	508, 541, 530, 614, 496, 0, 0, 0, 0, 0,
	0, 738, 0, 0, 0, 324, 3943, 0, 354, 545,
	527, 537, 528, 513, 514, 515, 522, 334, 516, 517,
	518, 488, 519, 489, 520, 521, 776, 544, 495, 413,
	368, 562, 561, 0, 0, 843, 851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 730, 0,
	0, 766, 820, 819, 753, 763, 0, 0, 297, 217,
	490, 610, 492, 491, 754, 0, 755, 759, 762, 758,
	756, 757, 0, 835, 0, 0, 0, 0, 0, 0,
	722, 734, 0, 739, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 731, 732, 0,
	0, 0, 0, 786, 0, 733, 0, 0, 781, 760,
	764, 0, 0, 0, 0, 287, 419, 436, 298, 409,
	449, 303, 416, 293, 383, 406, 0, 0, 289, 434,
	415, 365, 344, 345, 288, 0, 401, 322, 336, 319,
	381, 761, 784, 788, 318, 857, 782, 444, 291, 0,
	443, 380, 430, 435, 366, 360, 0, 290, 432, 364,
	359, 348, 326, 858, 349, 350, 340, 392, 358, 393,
	341, 370, 369, 371, 0, 0, 0, 0, 0, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 603, 779, 0, 607, 0, 446, 0,
	0, 841, 0, 0, 0, 418, 0, 0, 351, 0,
	0, 0, 783, 0, 404, 386, 854, 0, 0, 402,
	356, 431, 394, 437, 420, 445, 398, 395, 282, 421,
	321, 367, 294, 296, 316, 323, 325, 327, 328, 376,
	377, 389, 408, 422, 423, 424, 320, 304, 403, 305,
	338, 306, 283, 312, 310, 313, 410, 314, 285, 390,
	428, 0, 333, 399, 363, 286, 362, 391, 427, 426,
	295, 453, 459, 460, 549, 0, 465, 630, 631, 632,
	474, 479, 480, 481, 483, 484, 485, 486, 550, 567,
	534, 504, 467, 558, 501, 505, 506, 570, 0, 0,
	0, 458, 352, 353, 0, 331, 279, 280, 625, 839,
	382, 572, 605, 606, 497, 0, 853, 834, 836, 837,
	840, 844, 845, 846, 847, 848, 850, 852, 856, 624,
	0, 551, 566, 628, 565, 621, 388, 0, 407, 563,
	510, 0, 555, 529, 0, 556, 525, 560, 0, 499,
	0, 414, 439, 451, 468, 471, 500, 585, 586, 587,
	284, 470, 589, 590, 591, 592, 593, 594, 595, 588,
	855, 532, 509, 535, 450, 512, 511, 0, 0, 546,
	787, 547, 548, 372, 373, 374, 375, 842, 573, 302,
	469, 397, 0, 533, 0, 0, 0, 0, 0, 0,
	0, 0, 538, 539, 536, 633, 0, 596, 597, 0,
	0, 463, 464, 330, 337, 482, 339, 301, 387, 332,
	448, 346, 0, 475, 540, 476, 599, 602, 600, 601,
	379, 342, 343, 411, 347, 357, 400, 447, 385, 405,
	299, 438, 412, 361, 526, 553, 864, 838, 863, 865,
	866, 862, 867, 868, 849, 743, 0, 794, 860, 859,
	861, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 580, 579, 578, 577, 576, 575, 574,
	0, 0, 523, 425, 311, 273, 307, 308, 315, 622,
	619, 429, 623, 0, 281, 503, 355, 0, 396, 329,
	568, 569, 0, 0, 827, 801, 802, 803, 740, 804,
	798, 799, 741, 800, 828, 792, 824, 825, 768, 795,
	805, 823, 806, 826, 829, 830, 869, 870, 812, 796,
	245, 871, 809, 831, 822, 821, 807, 793, 832, 833,
	775, 770, 810, 811, 797, 815, 816, 817, 742, 789,
	790, 791, 813, 814, 771, 772, 773, 774, 0, 0,
	0, 454, 455, 456, 478, 0, 440, 502, 620, 0,
	0, 0, 0, 0, 0, 0, 552, 564, 598, 0,
	608, 609, 611, 613, 818, 615, 417, 785, 0, 626,
	493, 494, 627, 604, 0, 735, 384, 0, 508, 541,
	530, 614, 496, 0, 0, 0, 0, 0, 0, 738,
	0, 0, 0, 324, 0, 0, 354, 545, 527, 537,
	528, 513, 514, 515, 522, 334, 516, 517, 518, 488,
	519, 489, 520, 521, 776, 544, 495, 413, 368, 562,
	561, 0, 0, 843, 851, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 730, 0, 0, 766,
	820, 819, 753, 763, 0, 0, 297, 217, 490, 610,
	492, 491, 754, 0, 755, 759, 762, 758, 756, 757,
	0, 835, 0, 0, 0, 0, 0, 0, 722, 734,
	0, 739, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 731, 732, 0, 0, 0,
	0, 786, 0, 733, 0, 0, 781, 760, 764, 0,
	0, 0, 0, 287, 419, 436, 298, 409, 449, 303,
	416, 293, 383, 406, 0, 0, 289, 434, 415, 365,
	344, 345, 288, 0, 401, 322, 336, 319, 381, 761,
	784, 788, 318, 857, 782, 444, 291, 0, 443, 380,
	430, 435, 366, 360, 0, 290, 432, 364, 359, 348,
	326, 858, 349, 350, 340, 392, 358, 393, 341, 370,
	369, 371, 0, 0, 0, 0, 0, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 603, 779, 0, 607, 0, 446, 0, 0, 841,
	0, 0, 0, 418, 0, 0, 351, 0, 0, 0,
	783, 0, 404, 386, 854, 3838, 0, 402, 356, 431,
	394, 437, 420, 445, 398, 395, 282, 421, 321, 367,
	294, 296, 316, 323, 325, 327, 328, 376, 377, 389,
	408, 422, 423, 424, 320, 304, 403, 305, 338, 306,
	283, 312, 310, 313, 410, 314, 285, 390, 428, 0,
	333, 399, 363, 286, 362, 391, 427, 426, 295, 453,
	459, 460, 549, 0, 465, 630, 631, 632, 474, 479,
	480, 481, 483, 484, 485, 486, 550, 567, 534, 504,
	467, 558, 501, 505, 506, 570, 0, 0, 0, 458,
	352, 353, 0, 331, 279, 280, 625, 839, 382, 572,
	605, 606, 497, 0, 853, 834, 836, 837, 840, 844,
	845, 846, 847, 848, 850, 852, 856, 624, 0, 551,
	566, 628, 565, 621, 388, 0, 407, 563, 510, 0,
	555, 529, 0, 556, 525, 560, 0, 499, 0, 414,
	439, 451, 468, 471, 500, 585, 586, 587, 284, 470,
	589, 590, 591, 592, 593, 594, 595, 588, 855, 532,
	509, 535, 450, 512, 511, 0, 0, 546, 787, 547,
	548, 372, 373, 374, 375, 842, 573, 302, 469, 397,
	0, 533, 0, 0, 0, 0, 0, 0, 0, 0,
	538, 539, 536, 633, 0, 596, 597, 0, 0, 463,
	464, 330, 337, 482, 339, 301, 387, 332, 448, 346,
	0, 475, 540, 476, 599, 602, 600, 601, 379, 342,
	343, 411, 347, 357, 400, 447, 385, 405, 299, 438,
	412, 361, 526, 553, 864, 838, 863, 865, 866, 862,
	867, 868, 849, 743, 0, 794, 860, 859, 861, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 580, 579, 578, 577, 576, 575, 574, 0, 0,
	523, 425, 311, 273, 307, 308, 315, 622, 619, 429,
	623, 0, 281, 503, 355, 0, 396, 329, 568, 569,
	0, 0, 827, 801, 802, 803, 740, 804, 798, 799,
	741, 800, 828, 792, 824, 825, 768, 795, 805, 823,
	806, 826, 829, 830, 869, 870, 812, 796, 245, 871,
	809, 831, 822, 821, 807, 793, 832, 833, 775, 770,
	810, 811, 797, 815, 816, 817, 742, 789, 790, 791,
	813, 814, 771, 772, 773, 774, 0, 0, 0, 454,
	455, 456, 478, 0, 440, 502, 620, 0, 0, 0,
	0, 0, 0, 0, 552, 564, 598, 0, 608, 609,
	611, 613, 818, 615, 417, 785, 0, 626, 493, 494,
	627, 604, 0, 735, 384, 0, 508, 541, 530, 614,
	496, 0, 0, 0, 0, 0, 0, 738, 0, 0,
	0, 324, 1803, 0, 354, 545, 527, 537, 528, 513,
	514, 515, 522, 334, 516, 517, 518, 488, 519, 489,
	520, 521, 776, 544, 495, 413, 368, 562, 561, 0,
	0, 843, 851, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 730, 0, 0, 766, 820, 819,
	753, 763, 0, 0, 297, 217, 490, 610, 492, 491,
	754, 0, 755, 759, 762, 758, 756, 757, 0, 835,
	0, 0, 0, 0, 0, 0, 722, 734, 0, 739,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 731, 732, 0, 0, 0, 0, 786,
	0, 733, 0, 0, 781, 760, 764, 0, 0, 0,
	0, 287, 419, 436, 298, 409, 449, 303, 416, 293,
	383, 406, 0, 0, 289, 434, 415, 365, 344, 345,
	288, 0, 401, 322, 336, 319, 381, 761, 784, 788,
	318, 857, 782, 444, 291, 0, 443, 380, 430, 435,
	366, 360, 0, 290, 432, 364, 359, 348, 326, 858,
	349, 350, 340, 392, 358, 393, 341, 370, 369, 371,
	0, 0, 0, 0, 0, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 603,
	779, 0, 607, 0, 446, 0, 0, 841, 0, 0,
	0, 418, 0, 0, 351, 0, 0, 0, 783, 0,
	404, 386, 854, 0, 0, 402, 356, 431, 394, 437,
	420, 445, 398, 395, 282, 421, 321, 367, 294, 296,
	316, 323, 325, 327, 328, 376, 377, 389, 408, 422,
	423, 424, 320, 304, 403, 305, 338, 306, 283, 312,
	310, 313, 410, 314, 285, 390, 428, 0, 333, 399,
	363, 286, 362, 391, 427, 426, 295, 453, 459, 460,
	549, 0, 465, 630, 631, 632, 474, 479, 480, 481,
	483, 484, 485, 486, 550, 567, 534, 504, 467, 558,
	501, 505, 506, 570, 0, 0, 0, 458, 352, 353,
	0, 331, 279, 280, 625, 839, 382, 572, 605, 606,
	497, 0, 853, 834, 836, 837, 840, 844, 845, 846,
	847, 848, 850, 852, 856, 624, 0, 551, 566, 628,
	565, 621, 388, 0, 407, 563, 510, 0, 555, 529,
	0, 556, 525, 560, 0, 499, 0, 414, 439, 451,
	468, 471, 500, 585, 586, 587, 284, 470, 589, 590,
	591, 592, 593, 594, 595, 588, 855, 532, 509, 535,
	450, 512, 511, 0, 0, 546, 787, 547, 548, 372,
	373, 374, 375, 842, 573, 302, 469, 397, 0, 533,
	0, 0, 0, 0, 0, 0, 0, 0, 538, 539,
	536, 633, 0, 596, 597, 0, 0, 463, 464, 330,
	337, 482, 339, 301, 387, 332, 448, 346, 0, 475,
	540, 476, 599, 602, 600, 601, 379, 342, 343, 411,
	347, 357, 400, 447, 385, 405, 299, 438, 412, 361,
	526, 553, 864, 838, 863, 865, 866, 862, 867, 868,
	849, 743, 0, 794, 860, 859, 861, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 580,
	579, 578, 577, 576, 575, 574, 0, 0, 523, 425,
	311, 273, 307, 308, 315, 622, 619, 429, 623, 0,
	281, 503, 355, 0, 396, 329, 568, 569, 0, 0,
	827, 801, 802, 803, 740, 804, 798, 799, 741, 800,
	828, 792, 824, 825, 768, 795, 805, 823, 806, 826,
	829, 830, 869, 870, 812, 796, 245, 871, 809, 831,
	822, 821, 807, 793, 832, 833, 775, 770, 810, 811,
	797, 815, 816, 817, 742, 789, 790, 791, 813, 814,
	771, 772, 773, 774, 0, 0, 0, 454, 455, 456,
	478, 0, 440, 502, 620, 0, 0, 0, 0, 0,
	0, 0, 552, 564, 598, 0, 608, 609, 611, 613,
	818, 615, 417, 785, 0, 626, 493, 494, 627, 604,
	0, 735, 384, 0, 508, 541, 530, 614, 496, 0,
	0, 0, 0, 0, 0, 738, 0, 0, 0, 324,
	0, 0, 354, 545, 527, 537, 528, 513, 514, 515,
	522, 334, 516, 517, 518, 488, 519, 489, 520, 521,
	776, 544, 495, 413, 368, 562, 561, 0, 0, 843,
	851, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 730, 0, 0, 766, 820, 819, 753, 763,
	0, 0, 297, 217, 490, 610, 492, 491, 754, 0,
	755, 759, 762, 758, 756, 757, 0, 835, 0, 0,
	0, 0, 0, 0, 722, 734, 0, 739, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 731, 732, 1524, 0, 0, 0, 786, 0, 733,
	0, 0, 781, 760, 764, 0, 0, 0, 0, 287,
	419, 436, 298, 409, 449, 303, 416, 293, 383, 406,
	0, 0, 289, 434, 415, 365, 344, 345, 288, 0,
	401, 322, 336, 319, 381, 761, 784, 788, 318, 857,
	782, 444, 291, 0, 443, 380, 430, 435, 366, 360,
	0, 290, 432, 364, 359, 348, 326, 858, 349, 350,
	340, 392, 358, 393, 341, 370, 369, 371, 0, 0,
	0, 0, 0, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 603, 779, 0,
	607, 0, 446, 0, 0, 841, 0, 0, 0, 418,
	0, 0, 351, 0, 0, 0, 783, 0, 404, 386,
	854, 0, 0, 402, 356, 431, 394, 437, 420, 445,
	398, 395, 282, 421, 321, 367, 294, 296, 316, 323,
	325, 327, 328, 376, 377, 389, 408, 422, 423, 424,
	320, 304, 403, 305, 338, 306, 283, 312, 310, 313,
	410, 314, 285, 390, 428, 0, 333, 399, 363, 286,
	362, 391, 427, 426, 295, 453, 459, 460, 549, 0,
	465, 630, 631, 632, 474, 479, 480, 481, 483, 484,
	485, 486, 550, 567, 534, 504, 467, 558, 501, 505,
	506, 570, 0, 0, 0, 458, 352, 353, 0, 331,
	279, 280, 625, 839, 382, 572, 605, 606, 497, 0,
	853, 834, 836, 837, 840, 844, 845, 846, 847, 848,
	850, 852, 856, 624, 0, 551, 566, 628, 565, 621,
	388, 0, 407, 563, 510, 0, 555, 529, 0, 556,
	525, 560, 0, 499, 0, 414, 439, 451, 468, 471,
	500, 585, 586, 587, 284, 470, 589, 590, 591, 592,
	593, 594, 595, 588, 855, 532, 509, 535, 450, 512,
	511, 0, 0, 546, 787, 547, 548, 372, 373, 374,
	375, 842, 573, 302, 469, 397, 0, 533, 0, 0,
	0, 0, 0, 0, 0, 0, 538, 539, 536, 633,
	0, 596, 597, 0, 0, 463, 464, 330, 337, 482,
	339, 301, 387, 332, 448, 346, 0, 475, 540, 476,
	599, 602, 600, 601, 379, 342, 343, 411, 347, 357,
	400, 447, 385, 405, 299, 438, 412, 361, 526, 553,
	864, 838, 863, 865, 866, 862, 867, 868, 849, 743,
	0, 794, 860, 859, 861, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 580, 579, 578,
	577, 576, 575, 574, 0, 0, 523, 425, 311, 273,
	307, 308, 315, 622, 619, 429, 623, 0, 281, 503,
	355, 0, 396, 329, 568, 569, 0, 0, 827, 801,
	802, 803, 740, 804, 798, 799, 741, 800, 828, 792,
	824, 825, 768, 795, 805, 823, 806, 826, 829, 830,
	869, 870, 812, 796, 245, 871, 809, 831, 822, 821,
	807, 793, 832, 833, 775, 770, 810, 811, 797, 815,
	816, 817, 742, 789, 790, 791, 813, 814, 771, 772,
	773, 774, 0, 0, 0, 454, 455, 456, 478, 0,
	440, 502, 620, 0, 0, 0, 0, 0, 0, 0,
	552, 564, 598, 0, 608, 609, 611, 613, 818, 615,
	417, 0, 0, 626, 493, 494, 627, 604, 785, 735,
	0, 2185, 0, 0, 0, 0, 0, 384, 0, 508,
	541, 530, 614, 496, 0, 0, 0, 0, 0, 0,
	738, 0, 0, 0, 324, 0, 0, 354, 545, 527,
	537, 528, 513, 514, 515, 522, 334, 516, 517, 518,
	488, 519, 489, 520, 521, 776, 544, 495, 413, 368,
	562, 561, 0, 0, 843, 851, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 730, 0, 0,
	766, 820, 819, 753, 763, 0, 0, 297, 217, 490,
	610, 492, 491, 754, 0, 755, 759, 762, 758, 756,
	757, 0, 835, 0, 0, 0, 0, 0, 0, 722,
	734, 0, 739, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 731, 732, 0, 0,
	0, 0, 786, 0, 733, 0, 0, 781, 760, 764,
	0, 0, 0, 0, 287, 419, 436, 298, 409, 449,
	303, 416, 293, 383, 406, 0, 0, 289, 434, 415,
	365, 344, 345, 288, 0, 401, 322, 336, 319, 381,
	761, 784, 788, 318, 857, 782, 444, 291, 0, 443,
	380, 430, 435, 366, 360, 0, 290, 432, 364, 359,
	348, 326, 858, 349, 350, 340, 392, 358, 393, 341,
	370, 369, 371, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 603, 779, 0, 607, 0, 446, 0, 0,
	841, 0, 0, 0, 418, 0, 0, 351, 0, 0,
	0, 783, 0, 404, 386, 854, 0, 0, 402, 356,
	431, 394, 437, 420, 445, 398, 395, 282, 421, 321,
	367, 294, 296, 316, 323, 325, 327, 328, 376, 377,
	389, 408, 422, 423, 424, 320, 304, 403, 305, 338,
	306, 283, 312, 310, 313, 410, 314, 285, 390, 428,
	0, 333, 399, 363, 286, 362, 391, 427, 426, 295,
	453, 459, 460, 549, 0, 465, 630, 631, 632, 474,
	479, 480, 481, 483, 484, 485, 486, 550, 567, 534,
	504, 467, 558, 501, 505, 506, 570, 0, 0, 0,
	458, 352, 353, 0, 331, 279, 280, 625, 839, 382,
	572, 605, 606, 497, 0, 853, 834, 836, 837, 840,
	844, 845, 846, 847, 848, 850, 852, 856, 624, 0,
	551, 566, 628, 565, 621, 388, 0, 407, 563, 510,
	0, 555, 529, 0, 556, 525, 560, 0, 499, 0,
	414, 439, 451, 468, 471, 500, 585, 586, 587, 284,
	470, 589, 590, 591, 592, 593, 594, 595, 588, 855,
	532, 509, 535, 450, 512, 511, 0, 0, 546, 787,
	547, 548, 372, 373, 374, 375, 842, 573, 302, 469,
	397, 0, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 538, 539, 536, 633, 0, 596, 597, 0, 0,
	463, 464, 330, 337, 482, 339, 301, 387, 332, 448,
	346, 0, 475, 540, 476, 599, 602, 600, 601, 379,
	342, 343, 411, 347, 357, 400, 447, 385, 405, 299,
	438, 412, 361, 526, 553, 864, 838, 863, 865, 866,
	862, 867, 868, 849, 743, 0, 794, 860, 859, 861,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 580, 579, 578, 577, 576, 575, 574, 0,
	0, 523, 425, 311, 273, 307, 308, 315, 622, 619,
	429, 623, 0, 281, 503, 355, 0, 396, 329, 568,
	569, 0, 0, 827, 801, 802, 803, 740, 804, 798,
	799, 741, 800, 828, 792, 824, 825, 768, 795, 805,
	823, 806, 826, 829, 830, 869, 870, 812, 796, 245,
	871, 809, 831, 822, 821, 807, 793, 832, 833, 775,
	770, 810, 811, 797, 815, 816, 817, 742, 789, 790,
	791, 813, 814, 771, 772, 773, 774, 0, 0, 0,
	454, 455, 456, 478, 0, 440, 502, 620, 0, 0,
	0, 0, 0, 0, 0, 552, 564, 598, 0, 608,
	609, 611, 613, 818, 615, 417, 785, 0, 626, 493,
	494, 627, 604, 0, 735, 384, 0, 508, 541, 530,
	614, 496, 0, 0, 0, 0, 0, 0, 738, 0,
	0, 0, 324, 0, 0, 354, 545, 527, 537, 528,
	513, 514, 515, 522, 334, 516, 517, 518, 488, 519,
	489, 520, 521, 776, 544, 495, 413, 368, 562, 561,
	0, 0, 843, 851, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 730, 0, 0, 766, 820,
	819, 753, 763, 0, 0, 297, 217, 490, 610, 492,
	491, 754, 0, 755, 759, 762, 758, 756, 757, 0,
	835, 0, 0, 0, 0, 0, 0, 722, 734, 0,
	739, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 731, 732, 1796, 0, 0, 0,
	786, 0, 733, 0, 0, 781, 760, 764, 0, 0,
	0, 0, 287, 419, 436, 298, 409, 449, 303, 416,
	293, 383, 406, 0, 0, 289, 434, 415, 365, 344,
	345, 288, 0, 401, 322, 336, 319, 381, 761, 784,
	788, 318, 857, 782, 444, 291, 0, 443, 380, 430,
	435, 366, 360, 0, 290, 432, 364, 359, 348, 326,
	858, 349, 350, 340, 392, 358, 393, 341, 370, 369,
	371, 0, 0, 0, 0, 0, 472, 473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	603, 779, 0, 607, 0, 446, 0, 0, 841, 0,
	0, 0, 418, 0, 0, 351, 0, 0, 0, 783,
	0, 404, 386, 854, 0, 0, 402, 356, 431, 394,
	437, 420, 445, 398, 395, 282, 421, 321, 367, 294,
	296, 316, 323, 325, 327, 328, 376, 377, 389, 408,
	422, 423, 424, 320, 304, 403, 305, 338, 306, 283,
	312, 310, 313, 410, 314, 285, 390, 428, 0, 333,
	399, 363, 286, 362, 391, 427, 426, 295, 453, 459,
	460, 549, 0, 465, 630, 631, 632, 474, 479, 480,
	481, 483, 484, 485, 486, 550, 567, 534, 504, 467,
	558, 501, 505, 506, 570, 0, 0, 0, 458, 352,
	353, 0, 331, 279, 280, 625, 839, 382, 572, 605,
	606, 497, 0, 853, 834, 836, 837, 840, 844, 845,
	846, 847, 848, 850, 852, 856, 624, 0, 551, 566,
	628, 565, 621, 388, 0, 407, 563, 510, 0, 555,
	529, 0, 556, 525, 560, 0, 499, 0, 414, 439,
	451, 468, 471, 500, 585, 586, 587, 284, 470, 589,
	590, 591, 592, 593, 594, 595, 588, 855, 532, 509,
	535, 450, 512, 511, 0, 0, 546, 787, 547, 548,
	372, 373, 374, 375, 842, 573, 302, 469, 397, 0,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 538,
	539, 536, 633, 0, 596, 597, 0, 0, 463, 464,
	330, 337, 482, 339, 301, 387, 332, 448, 346, 0,
	475, 540, 476, 599, 602, 600, 601, 379, 342, 343,
	411, 347, 357, 400, 447, 385, 405, 299, 438, 412,
	361, 526, 553, 864, 838, 863, 865, 866, 862, 867,
	868, 849, 743, 0, 794, 860, 859, 861, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	580, 579, 578, 577, 576, 575, 574, 0, 0, 523,
	425, 311, 273, 307, 308, 315, 622, 619, 429, 623,
	0, 281, 503, 355, 0, 396, 329, 568, 569, 0,
	0, 827, 801, 802, 803, 740, 804, 798, 799, 741,
	800, 828, 792, 824, 825, 768, 795, 805, 823, 806,
	826, 829, 830, 869, 870, 812, 796, 245, 871, 809,
	831, 822, 821, 807, 793, 832, 833, 775, 770, 810,
	811, 797, 815, 816, 817, 742, 789, 790, 791, 813,
	814, 771, 772, 773, 774, 0, 0, 0, 454, 455,
	456, 478, 0, 440, 502, 620, 0, 0, 0, 0,
	0, 0, 0, 552, 564, 598, 0, 608, 609, 611,
	613, 818, 615, 417, 785, 0, 626, 493, 494, 627,
	604, 0, 735, 384, 0, 508, 541, 530, 614, 496,
	0, 0, 0, 0, 0, 0, 738, 0, 0, 0,
	324, 0, 0, 354, 545, 527, 537, 528, 513, 514,
	515, 522, 334, 516, 517, 518, 488, 519, 489, 520,
	521, 776, 544, 495, 413, 368, 562, 561, 0, 0,
	843, 851, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 730, 0, 0, 766, 820, 819, 753,
	763, 0, 0, 297, 217, 490, 610, 492, 491, 754,
	0, 755, 759, 762, 758, 756, 757, 0, 835, 0,
	0, 0, 0, 0, 0, 722, 734, 0, 739, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 731, 732, 0, 0, 0, 0, 786, 0,
	733, 0, 0, 781, 760, 764, 0, 0, 0, 0,
	287, 419, 436, 298, 409, 449, 303, 416, 293, 383,
	406, 0, 0, 289, 434, 415, 365, 344, 345, 288,
	0, 401, 322, 336, 319, 381, 761, 784, 788, 318,
	857, 782, 444, 291, 0, 443, 380, 430, 435, 366,
	360, 0, 290, 432, 364, 359, 348, 326, 858, 349,
	350, 340, 392, 358, 393, 341, 370, 369, 371, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 603, 779,
	0, 607, 0, 446, 0, 0, 841, 0, 0, 0,
	418, 0, 0, 351, 0, 0, 0, 783, 0, 404,
	386, 854, 0, 0, 402, 356, 431, 394, 437, 420,
	445, 398, 395, 282, 421, 321, 367, 294, 296, 316,
	323, 325, 327, 328, 376, 377, 389, 408, 422, 423,
	424, 320, 304, 403, 305, 338, 306, 283, 312, 310,
	313, 410, 314, 285, 390, 428, 0, 333, 399, 363,
	286, 362, 391, 427, 426, 295, 453, 459, 460, 549,
	0, 465, 630, 631, 632, 474, 479, 480, 481, 483,
	484, 485, 486, 550, 567, 534, 504, 467, 558, 501,
	505, 506, 570, 0, 0, 0, 458, 352, 353, 0,
	331, 279, 280, 625, 839, 382, 572, 605, 606, 497,
	0, 853, 834, 836, 837, 840, 844, 845, 846, 847,
	848, 850, 852, 856, 624, 0, 551, 566, 628, 565,
	621, 388, 0, 407, 563, 510, 0, 555, 529, 0,
	556, 525, 560, 0, 499, 0, 414, 439, 451, 468,
	471, 500, 585, 586, 587, 284, 470, 589, 590, 591,
	592, 593, 594, 595, 588, 855, 532, 509, 535, 450,
	512, 511, 0, 0, 546, 787, 547, 548, 372, 373,
	374, 375, 842, 573, 302, 469, 397, 0, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 538, 539, 536,
	633, 0, 596, 597, 0, 0, 463, 464, 330, 337,
	482, 339, 301, 387, 332, 448, 346, 0, 475, 540,
	476, 599, 602, 600, 601, 379, 342, 343, 411, 347,
	357, 400, 447, 385, 405, 299, 438, 412, 361, 526,
	553, 864, 838, 863, 865, 866, 862, 867, 868, 849,
	743, 0, 794, 860, 859, 861, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 580, 579,
	578, 577, 576, 575, 574, 0, 0, 523, 425, 311,
	273, 307, 308, 315, 622, 619, 429, 623, 0, 281,
	503, 355, 0, 396, 329, 568, 569, 0, 0, 827,
	801, 802, 803, 740, 804, 798, 799, 741, 800, 828,
	792, 824, 825, 768, 795, 805, 823, 806, 826, 829,
	830, 869, 870, 812, 796, 245, 871, 809, 831, 822,
	821, 807, 793, 832, 833, 775, 770, 810, 811, 797,
	815, 816, 817, 742, 789, 790, 791, 813, 814, 771,
	772, 773, 774, 0, 0, 0, 454, 455, 456, 478,
	0, 440, 502, 620, 0, 0, 0, 0, 0, 0,
	0, 552, 564, 598, 0, 608, 609, 611, 613, 818,
	615, 417, 785, 0, 626, 493, 494, 627, 604, 0,
	735, 384, 0, 508, 541, 530, 614, 496, 0, 0,
	0, 0, 0, 0, 738, 0, 0, 0, 324, 0,
	0, 354, 545, 527, 537, 528, 513, 514, 515, 522,
	334, 516, 517, 518, 488, 519, 489, 520, 521, 776,
	544, 495, 413, 368, 562, 561, 0, 0, 843, 851,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 730, 0, 0, 766, 820, 819, 753, 763, 0,
	0, 297, 217, 490, 610, 492, 491, 2645, 0, 2646,
	759, 762, 758, 756, 757, 0, 835, 0, 0, 0,
	0, 0, 0, 722, 734, 0, 739, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 732, 0, 0, 0, 0, 786, 0, 733, 0,
	0, 781, 760, 764, 0, 0, 0, 0, 287, 419,
	436, 298, 409, 449, 303, 416, 293, 383, 406, 0,
	0, 289, 434, 415, 365, 344, 345, 288, 0, 401,
	322, 336, 319, 381, 761, 784, 788, 318, 857, 782,
	444, 291, 0, 443, 380, 430, 435, 366, 360, 0,
	290, 432, 364, 359, 348, 326, 858, 349, 350, 340,
	392, 358, 393, 341, 370, 369, 371, 0, 0, 0,
	0, 0, 472, 473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 603, 779, 0, 607,
	0, 446, 0, 0, 841, 0, 0, 0, 418, 0,
	0, 351, 0, 0, 0, 783, 0, 404, 386, 854,
	0, 0, 402, 356, 431, 394, 437, 420, 445, 398,
	395, 282, 421, 321, 367, 294, 296, 316, 323, 325,
	327, 328, 376, 377, 389, 408, 422, 423, 424, 320,
	304, 403, 305, 338, 306, 283, 312, 310, 313, 410,
	314, 285, 390, 428, 0, 333, 399, 363, 286, 362,
	391, 427, 426, 295, 453, 459, 460, 549, 0, 465,
	630, 631, 632, 474, 479, 480, 481, 483, 484, 485,
	486, 550, 567, 534, 504, 467, 558, 501, 505, 506,
	570, 0, 0, 0, 458, 352, 353, 0, 331, 279,
	280, 625, 839, 382, 572, 605, 606, 497, 0, 853,
	834, 836, 837, 840, 844, 845, 846, 847, 848, 850,
	852, 856, 624, 0, 551, 566, 628, 565, 621, 388,
	0, 407, 563, 510, 0, 555, 529, 0, 556, 525,
	560, 0, 499, 0, 414, 439, 451, 468, 471, 500,
	585, 586, 587, 284, 470, 589, 590, 591, 592, 593,
	594, 595, 588, 855, 532, 509, 535, 450, 512, 511,
	0, 0, 546, 787, 547, 548, 372, 373, 374, 375,
	842, 573, 302, 469, 397, 0, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 538, 539, 536, 633, 0,
	596, 597, 0, 0, 463, 464, 330, 337, 482, 339,
	301, 387, 332, 448, 346, 0, 475, 540, 476, 599,
	602, 600, 601, 379, 342, 343, 411, 347, 357, 400,
	447, 385, 405, 299, 438, 412, 361, 526, 553, 864,
	838, 863, 865, 866, 862, 867, 868, 849, 743, 0,
	794, 860, 859, 861, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 580, 579, 578, 577,
	576, 575, 574, 0, 0, 523, 425, 311, 273, 307,
	308, 315, 622, 619, 429, 623, 0, 281, 503, 355,
	0, 396, 329, 568, 569, 0, 0, 827, 801, 802,
	803, 740, 804, 798, 799, 741, 800, 828, 792, 824,
	825, 768, 795, 805, 823, 806, 826, 829, 830, 869,
	870, 812, 796, 245, 871, 809, 831, 822, 821, 807,
	793, 832, 833, 775, 770, 810, 811, 797, 815, 816,
	817, 742, 789, 790, 791, 813, 814, 771, 772, 773,
	774, 0, 0, 0, 454, 455, 456, 478, 0, 440,
	502, 620, 0, 0, 0, 0, 0, 0, 0, 552,
	564, 598, 0, 608, 609, 611, 613, 818, 615, 417,
	785, 0, 626, 493, 494, 627, 604, 0, 735, 384,
	0, 508, 541, 530, 614, 496, 0, 0, 1666, 0,
	0, 0, 738, 0, 0, 0, 324, 0, 0, 354,
	545, 527, 537, 528, 513, 514, 515, 522, 334, 516,
	517, 518, 488, 519, 489, 520, 521, 776, 544, 495,
	413, 368, 562, 561, 0, 0, 843, 851, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 730,
	0, 0, 766, 820, 819, 753, 763, 0, 0, 297,
	217, 490, 610, 492, 491, 754, 0, 755, 759, 762,
	758, 756, 757, 0, 835, 0, 0, 0, 0, 0,
	0, 0, 734, 0, 739, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 731, 732,
	0, 0, 0, 0, 786, 0, 733, 0, 0, 781,
	760, 764, 0, 0, 0, 0, 287, 419, 436, 298,
	409, 449, 303, 416, 293, 383, 406, 0, 0, 289,
	434, 415, 365, 344, 345, 288, 0, 401, 322, 336,
	319, 381, 761, 784, 788, 318, 857, 782, 444, 291,
	0, 443, 380, 430, 435, 366, 360, 0, 290, 432,
	364, 359, 348, 326, 858, 349, 350, 340, 392, 358,
	393, 341, 370, 369, 371, 0, 0, 0, 0, 0,
	472, 473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 603, 779, 0, 607, 0, 446,
	0, 0, 841, 0, 0, 0, 418, 0, 0, 351,
	0, 0, 0, 783, 0, 404, 386, 854, 0, 0,
	402, 356, 431, 394, 437, 420, 445, 398, 395, 282,
	421, 321, 367, 294, 296, 316, 323, 325, 327, 328,
	376, 377, 389, 408, 422, 423, 424, 320, 304, 403,
	305, 338, 306, 283, 312, 310, 313, 410, 314, 285,
	390, 428, 0, 333, 399, 363, 286, 362, 391, 427,
	426, 295, 453, 1667, 1668, 549, 0, 465, 630, 631,
	632, 474, 479, 480, 481, 483, 484, 485, 486, 550,
	567, 534, 504, 467, 558, 501, 505, 506, 570, 0,
	0, 0, 458, 352, 353, 0, 331, 279, 280, 625,
	839, 382, 572, 605, 606, 497, 0, 853, 834, 836,
	837, 840, 844, 845, 846, 847, 848, 850, 852, 856,
	624, 0, 551, 566, 628, 565, 621, 388, 0, 407,
	563, 510, 0, 555, 529, 0, 556, 525, 560, 0,
	499, 0, 414, 439, 451, 468, 471, 500, 585, 586,
	587, 284, 470, 589, 590, 591, 592, 593, 594, 595,
	588, 855, 532, 509, 535, 450, 512, 511, 0, 0,
	546, 787, 547, 548, 372, 373, 374, 375, 842, 573,
	302, 469, 397, 0, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 538, 539, 536, 633, 0, 596, 597,
	0, 0, 463, 464, 330, 337, 482, 339, 301, 387,
	332, 448, 346, 0, 475, 540, 476, 599, 602, 600,
	601, 379, 342, 343, 411, 347, 357, 400, 447, 385,
	405, 299, 438, 412, 361, 526, 553, 864, 838, 863,
	865, 866, 862, 867, 868, 849, 743, 0, 794, 860,
	859, 861, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 580, 579, 578, 577, 576, 575,
	574, 0, 0, 523, 425, 311, 273, 307, 308, 315,
	622, 619, 429, 623, 0, 281, 503, 355, 0, 396,
	329, 568, 569, 0, 0, 827, 801, 802, 803, 740,
	804, 798, 799, 741, 800, 828, 792, 824, 825, 768,
	795, 805, 823, 806, 826, 829, 830, 869, 870, 812,
	796, 245, 871, 809, 831, 822, 821, 807, 793, 832,
	833, 775, 770, 810, 811, 797, 815, 816, 817, 742,
	789, 790, 791, 813, 814, 771, 772, 773, 774, 0,
	0, 0, 454, 455, 456, 478, 0, 440, 502, 620,
	0, 0, 0, 0, 0, 0, 0, 552, 564, 598,
	0, 608, 609, 611, 613, 818, 615, 417, 785, 0,
	626, 493, 494, 627, 604, 0, 735, 384, 0, 508,
	541, 530, 614, 496, 0, 0, 0, 0, 0, 0,
	738, 0, 0, 0, 324, 0, 0, 354, 545, 527,
	537, 528, 513, 514, 515, 522, 334, 516, 517, 518,
	488, 519, 489, 520, 521, 776, 544, 495, 413, 368,
	562, 561, 0, 0, 843, 851, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 730, 0, 0,
	766, 820, 819, 753, 763, 0, 0, 297, 217, 490,
	610, 492, 491, 754, 0, 755, 759, 762, 758, 756,
	757, 0, 835, 0, 0, 0, 0, 0, 0, 0,
	734, 0, 739, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 731, 732, 0, 0,
	0, 0, 786, 0, 733, 0, 0, 781, 760, 764,
	0, 0, 0, 0, 287, 419, 436, 298, 409, 449,
	303, 416, 293, 383, 406, 0, 0, 289, 434, 415,
	365, 344, 345, 288, 0, 401, 322, 336, 319, 381,
	761, 784, 788, 318, 857, 782, 444, 291, 0, 443,
	380, 430, 435, 366, 360, 0, 290, 432, 364, 359,
	348, 326, 858, 349, 350, 340, 392, 358, 393, 341,
	370, 369, 371, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 603, 779, 0, 607, 0, 446, 0, 0,
	841, 0, 0, 0, 418, 0, 0, 351, 0, 0,
	0, 783, 0, 404, 386, 854, 0, 0, 402, 356,
	431, 394, 437, 420, 445, 398, 395, 282, 421, 321,
	367, 294, 296, 316, 323, 325, 327, 328, 376, 377,
	389, 408, 422, 423, 424, 320, 304, 403, 305, 338,
	306, 283, 312, 310, 313, 410, 314, 285, 390, 428,
	0, 333, 399, 363, 286, 362, 391, 427, 426, 295,
	453, 459, 460, 549, 0, 465, 630, 631, 632, 474,
	479, 480, 481, 483, 484, 485, 486, 550, 567, 534,
	504, 467, 558, 501, 505, 506, 570, 0, 0, 0,
	458, 352, 353, 0, 331, 279, 280, 625, 839, 382,
	572, 605, 606, 497, 0, 853, 834, 836, 837, 840,
	844, 845, 846, 847, 848, 850, 852, 856, 624, 0,
	551, 566, 628, 565, 621, 388, 0, 407, 563, 510,
	0, 555, 529, 0, 556, 525, 560, 0, 499, 0,
	414, 439, 451, 468, 471, 500, 585, 586, 587, 284,
	470, 589, 590, 591, 592, 593, 594, 595, 588, 855,
	532, 509, 535, 450, 512, 511, 0, 0, 546, 787,
	547, 548, 372, 373, 374, 375, 842, 573, 302, 469,
	397, 0, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 538, 539, 536, 633, 0, 596, 597, 0, 0,
	463, 464, 330, 337, 482, 339, 301, 387, 332, 448,
	346, 0, 475, 540, 476, 599, 602, 600, 601, 379,
	342, 343, 411, 347, 357, 400, 447, 385, 405, 299,
	438, 412, 361, 526, 553, 864, 838, 863, 865, 866,
	862, 867, 868, 849, 743, 0, 794, 860, 859, 861,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 580, 579, 578, 577, 576, 575, 574, 0,
	0, 523, 425, 311, 273, 307, 308, 315, 622, 619,
	429, 623, 0, 281, 503, 355, 0, 396, 329, 568,
	569, 0, 0, 827, 801, 802, 803, 740, 804, 798,
	799, 741, 800, 828, 792, 824, 825, 768, 795, 805,
	823, 806, 826, 829, 830, 869, 870, 812, 796, 245,
	871, 809, 831, 822, 821, 807, 793, 832, 833, 775,
	770, 810, 811, 797, 815, 816, 817, 742, 789, 790,
	791, 813, 814, 771, 772, 773, 774, 0, 0, 0,
	454, 455, 456, 478, 0, 440, 502, 620, 0, 0,
	0, 0, 0, 0, 0, 552, 564, 598, 0, 608,
	609, 611, 613, 818, 615, 417, 785, 0, 626, 493,
	494, 627, 604, 0, 735, 384, 0, 508, 541, 530,
	614, 496, 0, 0, 0, 0, 0, 0, 738, 0,
	0, 0, 324, 0, 0, 354, 545, 527, 537, 528,
	513, 514, 515, 522, 334, 516, 517, 518, 488, 519,
	489, 520, 521, 776, 544, 495, 413, 368, 562, 561,
	0, 0, 843, 851, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 766, 820,
	819, 753, 763, 0, 0, 297, 217, 490, 610, 492,
	491, 754, 0, 755, 759, 762, 758, 756, 757, 0,
	835, 0, 0, 0, 0, 0, 0, 722, 734, 0,
	739, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 731, 732, 0, 0, 0, 0,
	786, 0, 733, 0, 0, 781, 760, 764, 0, 0,
	0, 0, 287, 419, 436, 298, 409, 449, 303, 416,
	293, 383, 406, 0, 0, 289, 434, 415, 365, 344,
	345, 288, 0, 401, 322, 336, 319, 381, 761, 784,
	788, 318, 857, 782, 444, 291, 0, 443, 380, 430,
	435, 366, 360, 0, 290, 432, 364, 359, 348, 326,
	858, 349, 350, 340, 392, 358, 393, 341, 370, 369,
	371, 0, 0, 0, 0, 0, 472, 473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	603, 779, 0, 607, 0, 446, 0, 0, 841, 0,
	0, 0, 418, 0, 0, 351, 0, 0, 0, 783,
	0, 404, 386, 854, 0, 0, 402, 356, 431, 394,
	437, 420, 445, 398, 395, 282, 421, 321, 367, 294,
	296, 316, 323, 325, 327, 328, 376, 377, 389, 408,
	422, 423, 424, 320, 304, 403, 305, 338, 306, 283,
	312, 310, 313, 410, 314, 285, 390, 428, 0, 333,
	399, 363, 286, 362, 391, 427, 426, 295, 453, 459,
	460, 549, 0, 465, 630, 631, 632, 474, 479, 480,
	481, 483, 484, 485, 486, 550, 567, 534, 504, 467,
	558, 501, 505, 506, 570, 0, 0, 0, 458, 352,
	353, 0, 331, 279, 280, 625, 839, 382, 572, 605,
	606, 497, 0, 853, 834, 836, 837, 840, 844, 845,
	846, 847, 848, 850, 852, 856, 624, 0, 551, 566,
	628, 565, 621, 388, 0, 407, 563, 510, 0, 555,
	529, 0, 556, 525, 560, 0, 499, 0, 414, 439,
	451, 468, 471, 500, 585, 586, 587, 284, 470, 589,
	590, 591, 592, 593, 594, 595, 588, 855, 532, 509,
	535, 450, 512, 511, 0, 0, 546, 787, 547, 548,
	372, 373, 374, 375, 842, 573, 302, 469, 397, 0,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 538,
	539, 536, 633, 0, 596, 597, 0, 0, 463, 464,
	330, 337, 482, 339, 301, 387, 332, 448, 346, 0,
	475, 540, 476, 599, 602, 600, 601, 379, 342, 343,
	411, 347, 357, 400, 447, 385, 405, 299, 438, 412,
	361, 526, 553, 864, 838, 863, 865, 866, 862, 867,
	868, 849, 743, 0, 794, 860, 859, 861, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	580, 579, 578, 577, 576, 575, 574, 0, 0, 523,
	425, 311, 273, 307, 308, 315, 622, 619, 429, 623,
	0, 281, 503, 355, 0, 396, 329, 568, 569, 0,
	0, 827, 801, 802, 803, 740, 804, 798, 799, 741,
	800, 828, 792, 824, 825, 768, 795, 805, 823, 806,
	826, 829, 830, 869, 870, 812, 796, 245, 871, 809,
	831, 822, 821, 807, 793, 832, 833, 775, 770, 810,
	811, 797, 815, 816, 817, 742, 789, 790, 791, 813,
	814, 771, 772, 773, 774, 0, 0, 0, 454, 455,
	456, 478, 0, 440, 502, 620, 0, 0, 0, 0,
	0, 0, 0, 552, 564, 598, 0, 608, 609, 611,
	613, 818, 615, 417, 0, 0, 626, 493, 494, 627,
	604, 0, 735, 194, 61, 185, 157, 0, 0, 0,
	0, 0, 0, 384, 0, 508, 541, 530, 614, 496,
	0, 186, 0, 0, 0, 0, 0, 0, 178, 0,
	324, 0, 187, 354, 545, 527, 537, 528, 513, 514,
	515, 522, 334, 516, 517, 518, 488, 519, 489, 520,
	521, 131, 544, 495, 413, 368, 562, 561, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 216, 0, 0, 0,
	0, 0, 0, 297, 217, 490, 610, 492, 491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 419, 436, 298, 409, 449, 303, 416, 293, 383,
	406, 0, 0, 289, 434, 415, 365, 344, 345, 288,
	0, 401, 322, 336, 319, 381, 0, 433, 461, 318,
	452, 0, 444, 291, 0, 443, 380, 430, 435, 366,
	360, 0, 290, 432, 364, 359, 348, 326, 477, 349,
	350, 340, 392, 358, 393, 341, 370, 369, 371, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 0, 0,
	0, 0, 156, 184, 192, 0, 116, 0, 603, 0,
	0, 607, 0, 446, 0, 0, 209, 0, 0, 0,
	418, 0, 0, 351, 183, 177, 176, 462, 0, 404,
	386, 221, 0, 0, 402, 356, 431, 394, 437, 420,
	445, 398, 395, 282, 421, 321, 367, 294, 296, 316,
	323, 325, 327, 328, 376, 377, 389, 408, 422, 423,
	424, 320, 304, 403, 305, 338, 306, 283, 312, 310,
	313, 410, 314, 285, 390, 428, 0, 333, 399, 363,
	286, 362, 391, 427, 426, 295, 453, 459, 460, 549,
	0, 465, 582, 583, 584, 474, 479, 480, 481, 483,
	484, 485, 486, 550, 567, 534, 504, 467, 558, 501,
	505, 506, 570, 0, 0, 0, 458, 352, 353, 0,
	331, 279, 280, 441, 317, 382, 572, 605, 606, 497,
	0, 559, 498, 507, 309, 531, 543, 542, 378, 457,
	212, 554, 557, 487, 222, 0, 551, 566, 524, 565,
	223, 388, 0, 407, 563, 510, 0, 555, 529, 0,
	556, 525, 560, 0, 499, 0, 414, 439, 451, 468,
	471, 500, 585, 586, 587, 284, 470, 589, 590, 591,
	592, 593, 594, 595, 588, 442, 532, 509, 535, 450,
	512, 511, 0, 0, 546, 466, 547, 548, 372, 373,
	374, 375, 335, 573, 302, 469, 397, 129, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 538, 539, 536,
	220, 0, 596, 597, 0, 0, 463, 464, 330, 337,
	482, 339, 301, 387, 332, 448, 346, 0, 475, 540,
	476, 599, 602, 600, 601, 379, 342, 343, 411, 347,
	357, 400, 447, 385, 405, 299, 438, 412, 361, 526,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 580, 579,
	578, 577, 576, 575, 574, 0, 0, 523, 425, 311,
	273, 307, 308, 315, 227, 292, 429, 228, 0, 281,
	503, 355, 158, 396, 329, 568, 569, 58, 0, 229,
	230, 231, 232, 233, 234, 235, 236, 274, 237, 238,
	239, 240, 241, 242, 243, 246, 247, 248, 249, 250,
	251, 252, 253, 571, 244, 245, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	0, 0, 0, 275, 276, 277, 278, 0, 0, 269,
	270, 271, 272, 0, 0, 0, 454, 455, 456, 478,
	0, 440, 502, 224, 45, 210, 213, 215, 214, 0,
	59, 552, 564, 598, 5, 608, 609, 611, 613, 612,
	615, 417, 194, 134, 225, 493, 494, 226, 604, 0,
	0, 0, 384, 0, 508, 541, 530, 614, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 324,
	0, 0, 354, 545, 527, 537, 528, 513, 514, 515,
	522, 334, 516, 517, 518, 488, 519, 489, 520, 521,
	131, 544, 495, 413, 368, 562, 561, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 216, 0, 0, 0, 0,
	0, 0, 297, 217, 490, 610, 492, 491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 2335, 2338,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 287,
	419, 436, 298, 409, 449, 303, 416, 293, 383, 406,
	0, 0, 289, 434, 415, 365, 344, 345, 288, 0,
	401, 322, 336, 319, 381, 0, 433, 461, 318, 452,
	0, 444, 291, 0, 443, 380, 430, 435, 366, 360,
	0, 290, 432, 364, 359, 348, 326, 477, 349, 350,
	340, 392, 358, 393, 341, 370, 369, 371, 0, 0,
	0, 0, 0, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 603, 0, 0,
	607, 2339, 446, 0, 0, 0, 2334, 0, 2333, 418,
	2331, 2336, 351, 0, 0, 0, 462, 0, 404, 386,
	629, 0, 0, 402, 356, 431, 394, 437, 420, 445,
	398, 395, 282, 421, 321, 367, 294, 296, 316, 323,
	325, 327, 328, 376, 377, 389, 408, 422, 423, 424,
	320, 304, 403, 305, 338, 306, 283, 312, 310, 313,
	410, 314, 285, 390, 428, 2337, 333, 399, 363, 286,
	362, 391, 427, 426, 295, 453, 459, 460, 549, 0,
	465, 630, 631, 632, 474, 479, 480, 481, 483, 484,
	485, 486, 550, 567, 534, 504, 467, 558, 501, 505,
	506, 570, 0, 0, 0, 458, 352, 353, 0, 331,
	279, 280, 625, 317, 382, 572, 605, 606, 497, 0,
	559, 498, 507, 309, 531, 543, 542, 378, 457, 0,
	554, 557, 487, 624, 0, 551, 566, 628, 565, 621,
	388, 0, 407, 563, 510, 0, 555, 529, 0, 556,
	525, 560, 0, 499, 0, 414, 439, 451, 468, 471,
	500, 585, 586, 587, 284, 470, 589, 590, 591, 592,
	593, 594, 595, 588, 442, 532, 509, 535, 450, 512,
	511, 0, 0, 546, 466, 547, 548, 372, 373, 374,
	375, 335, 573, 302, 469, 397, 0, 533, 0, 0,
	0, 0, 0, 0, 0, 0, 538, 539, 536, 633,
	0, 596, 597, 0, 0, 463, 464, 330, 337, 482,
	339, 301, 387, 332, 448, 346, 0, 475, 540, 476,
	599, 602, 600, 601, 379, 342, 343, 411, 347, 357,
	400, 447, 385, 405, 299, 438, 412, 361, 526, 553,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 268, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 580, 579, 578,
	577, 576, 575, 574, 0, 0, 523, 425, 311, 273,
	307, 308, 315, 622, 619, 429, 623, 0, 281, 503,
	355, 158, 396, 329, 568, 569, 0, 0, 229, 230,
	231, 232, 233, 234, 235, 236, 274, 237, 238, 239,
	240, 241, 242, 243, 246, 247, 248, 249, 250, 251,
	252, 253, 571, 244, 245, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 0,
	0, 0, 275, 276, 277, 278, 0, 0, 269, 270,
	271, 272, 0, 0, 0, 454, 455, 456, 478, 0,
	440, 502, 620, 0, 0, 0, 0, 0, 0, 0,
	552, 564, 598, 0, 608, 609, 611, 613, 612, 615,
	417, 0, 0, 626, 493, 494, 627, 604, 384, 0,
	508, 541, 530, 614, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 324, 0, 0, 354, 545,
	527, 537, 528, 513, 514, 515, 522, 334, 516, 517,
	518, 488, 519, 489, 520, 521, 0, 544, 495, 413,
	368, 562, 561, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1280, 0,
	0, 216, 0, 0, 753, 763, 0, 0, 297, 217,
	490, 610, 492, 491, 754, 0, 755, 759, 762, 758,
	756, 757, 0, 300, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 760,
	0, 0, 0, 0, 0, 287, 419, 436, 298, 409,
	449, 303, 416, 293, 383, 406, 0, 0, 289, 434,
	415, 365, 344, 345, 288, 0, 401, 322, 336, 319,
	381, 761, 433, 461, 318, 452, 0, 444, 291, 0,
	443, 380, 430, 435, 366, 360, 0, 290, 432, 364,
	359, 348, 326, 477, 349, 350, 340, 392, 358, 393,
	341, 370, 369, 371, 0, 0, 0, 0, 0, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 603, 0, 0, 607, 0, 446, 0,
	0, 0, 0, 0, 0, 418, 0, 0, 351, 0,
	0, 0, 462, 0, 404, 386, 629, 0, 0, 402,
	356, 431, 394, 437, 420, 445, 398, 395, 282, 421,
	321, 367, 294, 296, 316, 323, 325, 327, 328, 376,
	377, 389, 408, 422, 423, 424, 320, 304, 403, 305,
	338, 306, 283, 312, 310, 313, 410, 314, 285, 390,
	428, 0, 333, 399, 363, 286, 362, 391, 427, 426,
	295, 453, 459, 460, 549, 0, 465, 630, 631, 632,
	474, 479, 480, 481, 483, 484, 485, 486, 550, 567,
	534, 504, 467, 558, 501, 505, 506, 570, 0, 0,
	0, 458, 352, 353, 0, 331, 279, 280, 625, 317,
	382, 572, 605, 606, 497, 0, 559, 498, 507, 309,
	531, 543, 542, 378, 457, 0, 554, 557, 487, 624,
	0, 551, 566, 628, 565, 621, 388, 0, 407, 563,
	510, 0, 555, 529, 0, 556, 525, 560, 0, 499,
	0, 414, 439, 451, 468, 471, 500, 585, 586, 587,
	284, 470, 589, 590, 591, 592, 593, 594, 595, 588,
	442, 532, 509, 535, 450, 512, 511, 0, 0, 546,
	466, 547, 548, 372, 373, 374, 375, 335, 573, 302,
	469, 397, 0, 533, 0, 0, 0, 0, 0, 0,
	0, 0, 538, 539, 536, 633, 0, 596, 597, 0,
	0, 463, 464, 330, 337, 482, 339, 301, 387, 332,
	448, 346, 0, 475, 540, 476, 599, 602, 600, 601,
	379, 342, 343, 411, 347, 357, 400, 447, 385, 405,
	299, 438, 412, 361, 526, 553, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 580, 579, 578, 577, 576, 575, 574,
	0, 0, 523, 425, 311, 273, 307, 308, 315, 622,
	619, 429, 623, 0, 281, 503, 355, 0, 396, 329,
	568, 569, 0, 0, 229, 230, 231, 232, 233, 234,
	235, 236, 274, 237, 238, 239, 240, 241, 242, 243,
	246, 247, 248, 249, 250, 251, 252, 253, 571, 244,
	245, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 0, 0, 0, 275, 276,
	277, 278, 0, 0, 269, 270, 271, 272, 0, 0,
	0, 454, 455, 456, 478, 0, 440, 502, 620, 0,
	0, 0, 0, 0, 0, 0, 552, 564, 598, 0,
	608, 609, 611, 613, 612, 615, 417, 0, 0, 626,
	493, 494, 627, 604, 194, 61, 185, 157, 0, 0,
	0, 0, 0, 0, 384, 652, 508, 541, 530, 614,
	496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 324, 0, 0, 354, 545, 527, 537, 528, 513,
	514, 515, 522, 334, 516, 517, 518, 488, 519, 489,
	520, 521, 0, 544, 495, 413, 368, 562, 561, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 658, 0,
	0, 0, 0, 0, 657, 0, 0, 216, 0, 0,
	0, 0, 0, 0, 297, 217, 490, 610, 492, 491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 287, 419, 436, 298, 409, 449, 303, 416, 293,
	383, 406, 0, 0, 289, 434, 415, 365, 344, 345,
	288, 0, 401, 322, 336, 319, 381, 0, 433, 461,
	318, 452, 0, 444, 291, 0, 443, 380, 430, 435,
	366, 360, 0, 290, 432, 364, 359, 348, 326, 477,
	349, 350, 340, 392, 358, 393, 341, 370, 369, 371,
	0, 0, 0, 0, 0, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 656, 0, 603,
	0, 0, 607, 0, 446, 0, 0, 0, 0, 0,
	0, 418, 0, 0, 351, 0, 0, 0, 462, 0,
	404, 386, 629, 0, 0, 402, 356, 431, 394, 437,
	420, 445, 398, 395, 282, 421, 321, 367, 294, 296,
	316, 323, 325, 327, 328, 376, 377, 389, 408, 422,
	423, 424, 320, 304, 403, 305, 338, 306, 283, 312,
	310, 313, 410, 314, 285, 390, 428, 0, 333, 399,
	363, 286, 362, 391, 427, 426, 295, 453, 459, 460,
	549, 0, 465, 630, 631, 632, 474, 479, 480, 481,
	483, 484, 485, 486, 550, 567, 534, 504, 467, 558,
	501, 505, 506, 570, 0, 0, 0, 458, 352, 353,
	0, 331, 279, 280, 625, 317, 382, 572, 605, 606,
	497, 0, 559, 498, 507, 309, 531, 543, 542, 378,
	457, 0, 554, 557, 487, 624, 0, 551, 566, 628,
	565, 621, 388, 0, 407, 563, 510, 0, 555, 529,
	0, 556, 525, 560, 0, 499, 0, 414, 439, 451,
	468, 471, 500, 585, 586, 587, 284, 470, 589, 590,
	591, 592, 593, 594, 595, 588, 442, 532, 509, 535,
	450, 512, 511, 0, 0, 546, 466, 547, 548, 372,
	373, 374, 375, 653, 655, 302, 469, 397, 666, 533,
	0, 0, 0, 0, 0, 0, 0, 0, 538, 539,
	536, 633, 0, 596, 597, 0, 0, 463, 464, 330,
	337, 482, 339, 301, 387, 332, 448, 346, 0, 475,
	540, 476, 599, 602, 600, 601, 379, 342, 343, 411,
	347, 357, 400, 447, 385, 405, 299, 438, 412, 361,
	526, 553, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 268, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 580,
	579, 578, 577, 576, 575, 574, 0, 0, 523, 425,
	311, 273, 307, 308, 315, 622, 619, 429, 623, 0,
	281, 503, 355, 158, 396, 329, 568, 569, 0, 0,
	229, 230, 231, 232, 233, 234, 235, 236, 274, 237,
	238, 239, 240, 241, 242, 243, 246, 247, 248, 249,
	250, 251, 252, 253, 571, 244, 245, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 0, 0, 0, 275, 276, 277, 278, 0, 0,
	269, 270, 271, 272, 0, 0, 0, 454, 455, 456,
	478, 0, 440, 502, 620, 0, 0, 0, 0, 0,
	0, 0, 552, 564, 598, 0, 608, 609, 611, 613,
	612, 615, 417, 0, 0, 626, 493, 494, 627, 604,
	384, 0, 508, 541, 530, 614, 496, 0, 1093, 0,
	0, 0, 0, 0, 0, 0, 0, 324, 0, 0,
	354, 545, 527, 537, 528, 513, 514, 515, 522, 334,
	516, 517, 518, 488, 519, 489, 520, 521, 0, 544,
	495, 413, 368, 562, 561, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 0, 0, 0, 0, 0, 0,
	297, 217, 490, 610, 492, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 300, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 287, 419, 436,
	298, 409, 449, 303, 416, 293, 383, 406, 0, 0,
	2488, 2491, 2492, 2493, 2494, 2495, 2496, 0, 2501, 2497,
	2498, 2499, 2500, 0, 2483, 2484, 2485, 2486, 1076, 2467,
	2489, 0, 2468, 380, 2469, 2470, 2471, 2472, 1080, 2473,
	2474, 2475, 2476, 2477, 2480, 2481, 2478, 2479, 2487, 392,
	358, 393, 341, 370, 369, 371, 1104, 1106, 1108, 1110,
	1113, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 603, 0, 0, 607, 0,
	446, 0, 0, 0, 0, 0, 0, 418, 0, 0,
	351, 0, 0, 0, 2482, 0, 404, 386, 629, 0,
	0, 402, 356, 431, 394, 437, 420, 445, 398, 395,
	282, 421, 321, 367, 294, 296, 316, 323, 325, 327,
	328, 376, 377, 389, 408, 422, 423, 424, 320, 304,
	403, 305, 338, 306, 283, 312, 310, 313, 410, 314,
	285, 390, 428, 0, 333, 399, 363, 286, 362, 391,
	427, 426, 295, 453, 459, 460, 549, 0, 465, 630,
	631, 632, 474, 479, 480, 481, 483, 484, 485, 486,
	550, 567, 534, 504, 467, 558, 501, 505, 506, 570,
	0, 0, 0, 458, 352, 353, 0, 331, 279, 280,
	625, 317, 382, 572, 605, 606, 497, 0, 559, 498,
	507, 309, 531, 543, 542, 378, 457, 0, 554, 557,
	487, 624, 0, 551, 566, 628, 565, 621, 388, 0,
	407, 563, 510, 0, 555, 529, 0, 556, 525, 560,
	0, 499, 0, 414, 439, 451, 468, 471, 500, 585,
	586, 587, 284, 470, 589, 590, 591, 592, 593, 594,
	595, 588, 442, 532, 509, 535, 450, 512, 511, 0,
	0, 546, 466, 547, 548, 372, 373, 374, 375, 335,
	573, 302, 469, 397, 0, 533, 0, 0, 0, 0,
	0, 0, 0, 0, 538, 539, 536, 633, 0, 596,
	597, 0, 0, 463, 464, 330, 337, 482, 339, 301,
	387, 332, 448, 346, 0, 475, 540, 476, 599, 602,
	600, 601, 379, 342, 343, 411, 347, 357, 400, 447,
	385, 405, 299, 438, 412, 361, 526, 553, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 268,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 580, 579, 578, 577, 576,
	575, 574, 0, 0, 523, 425, 311, 273, 307, 308,
	315, 622, 619, 429, 623, 0, 281, 2490, 355, 0,
	396, 329, 568, 569, 0, 0, 229, 230, 231, 232,
	233, 234, 235, 236, 274, 237, 238, 239, 240, 241,
	242, 243, 246, 247, 248, 249, 250, 251, 252, 253,
	571, 244, 245, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 0, 0, 0,
	275, 276, 277, 278, 0, 0, 269, 270, 271, 272,
	0, 0, 0, 454, 455, 456, 478, 0, 440, 502,
	620, 0, 0, 0, 0, 0, 0, 0, 552, 564,
	598, 0, 608, 609, 611, 613, 612, 615, 417, 0,
	0, 626, 493, 494, 627, 604, 384, 0, 508, 541,
	530, 614, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 324, 0, 0, 354, 545, 527, 537,
	528, 513, 514, 515, 522, 334, 516, 517, 518, 488,
	519, 489, 520, 521, 0, 544, 495, 413, 368, 562,
	561, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	0, 0, 0, 0, 0, 0, 297, 217, 490, 610,
	492, 491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 300, 2335, 2338, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 287, 419, 436, 298, 409, 449, 303,
	416, 293, 383, 406, 0, 0, 289, 434, 415, 365,
	344, 345, 288, 0, 401, 322, 336, 319, 381, 0,
	433, 461, 318, 452, 0, 444, 291, 0, 443, 380,
	430, 435, 366, 360, 0, 290, 432, 364, 359, 348,
	326, 477, 349, 350, 340, 392, 358, 393, 341, 370,
	369, 371, 0, 0, 0, 0, 0, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 603, 0, 0, 607, 2339, 446, 0, 0, 0,
	2334, 0, 2333, 418, 2331, 2336, 351, 0, 0, 0,
	462, 0, 404, 386, 629, 0, 0, 402, 356, 431,
	394, 437, 420, 445, 398, 395, 282, 421, 321, 367,
	294, 296, 316, 323, 325, 327, 328, 376, 377, 389,
	408, 422, 423, 424, 320, 304, 403, 305, 338, 306,
	283, 312, 310, 313, 410, 314, 285, 390, 428, 2337,
	333, 399, 363, 286, 362, 391, 427, 426, 295, 453,
	459, 460, 549, 0, 465, 630, 631, 632, 474, 479,
	480, 481, 483, 484, 485, 486, 550, 567, 534, 504,
	467, 558, 501, 505, 506, 570, 0, 0, 0, 458,
	352, 353, 0, 331, 279, 280, 625, 317, 382, 572,
	605, 606, 497, 0, 559, 498, 507, 309, 531, 543,
	542, 378, 457, 0, 554, 557, 487, 624, 0, 551,
	566, 628, 565, 621, 388, 0, 407, 563, 510, 0,
	555, 529, 0, 556, 525, 560, 0, 499, 0, 414,
	439, 451, 468, 471, 500, 585, 586, 587, 284, 470,
	589, 590, 591, 592, 593, 594, 595, 588, 442, 532,
	509, 535, 450, 512, 511, 0, 0, 546, 466, 547,
	548, 372, 373, 374, 375, 335, 573, 302, 469, 397,
	0, 533, 0, 0, 0, 0, 0, 0, 0, 0,
	538, 539, 536, 633, 0, 596, 597, 0, 0, 463,
	464, 330, 337, 482, 339, 301, 387, 332, 448, 346,
	0, 475, 540, 476, 599, 602, 600, 601, 379, 342,
	343, 411, 347, 357, 400, 447, 385, 405, 299, 438,
	412, 361, 526, 553, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 268, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 580, 579, 578, 577, 576, 575, 574, 0, 0,
	523, 425, 311, 273, 307, 308, 315, 622, 619, 429,
	623, 0, 281, 503, 355, 0, 396, 329, 568, 569,
	0, 0, 229, 230, 231, 232, 233, 234, 235, 236,
	274, 237, 238, 239, 240, 241, 242, 243, 246, 247,
	248, 249, 250, 251, 252, 253, 571, 244, 245, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 0, 0, 0, 275, 276, 277, 278,
	0, 0, 269, 270, 271, 272, 0, 0, 0, 454,
	455, 456, 478, 0, 440, 502, 620, 0, 0, 0,
	0, 0, 0, 0, 552, 564, 598, 0, 608, 609,
	611, 613, 612, 615, 417, 0, 0, 626, 493, 494,
	627, 604, 384, 0, 508, 541, 530, 614, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 324,
	0, 0, 354, 545, 527, 537, 528, 513, 514, 515,
	522, 334, 516, 517, 518, 488, 519, 489, 520, 521,
	0, 544, 495, 413, 368, 562, 561, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 0, 0, 0, 0,
	0, 0, 297, 217, 490, 610, 492, 491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 2356,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 287,
	419, 436, 298, 409, 449, 303, 416, 293, 383, 406,
	0, 0, 289, 434, 415, 365, 344, 345, 288, 0,
	401, 322, 336, 319, 381, 0, 433, 461, 318, 452,
	0, 444, 291, 0, 443, 380, 430, 435, 366, 360,
	0, 290, 432, 364, 359, 348, 326, 477, 349, 350,
	340, 392, 358, 393, 341, 370, 369, 371, 0, 0,
	0, 0, 0, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 603, 0, 0,
	607, 2355, 446, 0, 0, 0, 2361, 2358, 2360, 418,
	0, 2359, 351, 0, 0, 0, 462, 0, 404, 386,
	629, 0, 2353, 402, 356, 431, 394, 437, 420, 445,
	398, 395, 282, 421, 321, 367, 294, 296, 316, 323,
	325, 327, 328, 376, 377, 389, 408, 422, 423, 424,
	320, 304, 403, 305, 338, 306, 283, 312, 310, 313,
	410, 314, 285, 390, 428, 0, 333, 399, 363, 286,
	362, 391, 427, 426, 295, 453, 459, 460, 549, 0,
	465, 630, 631, 632, 474, 479, 480, 481, 483, 484,
	485, 486, 550, 567, 534, 504, 467, 558, 501, 505,
	506, 570, 0, 0, 0, 458, 352, 353, 0, 331,
	279, 280, 625, 317, 382, 572, 605, 606, 497, 0,
	559, 498, 507, 309, 531, 543, 542, 378, 457, 0,
	554, 557, 487, 624, 0, 551, 566, 628, 565, 621,
	388, 0, 407, 563, 510, 0, 555, 529, 0, 556,
	525, 560, 0, 499, 0, 414, 439, 451, 468, 471,
	500, 585, 586, 587, 284, 470, 589, 590, 591, 592,
	593, 594, 595, 588, 442, 532, 509, 535, 450, 512,
	511, 0, 0, 546, 466, 547, 548, 372, 373, 374,
	375, 335, 573, 302, 469, 397, 0, 533, 0, 0,
	0, 0, 0, 0, 0, 0, 538, 539, 536, 633,
	0, 596, 597, 0, 0, 463, 464, 330, 337, 482,
	339, 301, 387, 332, 448, 346, 0, 475, 540, 476,
	599, 602, 600, 601, 379, 342, 343, 411, 347, 357,
	400, 447, 385, 405, 299, 438, 412, 361, 526, 553,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 268, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 580, 579, 578,
	577, 576, 575, 574, 0, 0, 523, 425, 311, 273,
	307, 308, 315, 622, 619, 429, 623, 0, 281, 503,
	355, 0, 396, 329, 568, 569, 0, 0, 229, 230,
	231, 232, 233, 234, 235, 236, 274, 237, 238, 239,
	240, 241, 242, 243, 246, 247, 248, 249, 250, 251,
	252, 253, 571, 244, 245, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 0,
	0, 0, 275, 276, 277, 278, 0, 0, 269, 270,
	271, 272, 0, 0, 0, 454, 455, 456, 478, 0,
	440, 502, 620, 0, 0, 0, 0, 0, 0, 0,
	552, 564, 598, 0, 608, 609, 611, 613, 612, 615,
	417, 0, 0, 626, 493, 494, 627, 604, 384, 0,
	508, 541, 530, 614, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 324, 0, 0, 354, 545,
	527, 537, 528, 513, 514, 515, 522, 334, 516, 517,
	518, 488, 519, 489, 520, 521, 0, 544, 495, 413,
	368, 562, 561, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 0, 0, 0, 0, 0, 0, 297, 217,
	490, 610, 492, 491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 300, 0, 2356, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 287, 419, 436, 298, 409,
	449, 303, 416, 293, 383, 406, 0, 0, 289, 434,
	415, 365, 344, 345, 288, 0, 401, 322, 336, 319,
	381, 0, 433, 461, 318, 452, 0, 444, 291, 0,
	443, 380, 430, 435, 366, 360, 0, 290, 432, 364,
	359, 348, 326, 477, 349, 350, 340, 392, 358, 393,
	341, 370, 369, 371, 0, 0, 0, 0, 0, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 603, 0, 0, 607, 2355, 446, 0,
	0, 0, 2361, 2358, 2360, 418, 0, 2359, 351, 0,
	0, 0, 462, 0, 404, 386, 629, 0, 0, 402,
	356, 431, 394, 437, 420, 445, 398, 395, 282, 421,
	321, 367, 294, 296, 316, 323, 325, 327, 328, 376,
	377, 389, 408, 422, 423, 424, 320, 304, 403, 305,
	338, 306, 283, 312, 310, 313, 410, 314, 285, 390,
	428, 0, 333, 399, 363, 286, 362, 391, 427, 426,
	295, 453, 459, 460, 549, 0, 465, 630, 631, 632,
	474, 479, 480, 481, 483, 484, 485, 486, 550, 567,
	534, 504, 467, 558, 501, 505, 506, 570, 0, 0,
	0, 458, 352, 353, 0, 331, 279, 280, 625, 317,
	382, 572, 605, 606, 497, 0, 559, 498, 507, 309,
	531, 543, 542, 378, 457, 0, 554, 557, 487, 624,
	0, 551, 566, 628, 565, 621, 388, 0, 407, 563,
	510, 0, 555, 529, 0, 556, 525, 560, 0, 499,
	0, 414, 439, 451, 468, 471, 500, 585, 586, 587,
	284, 470, 589, 590, 591, 592, 593, 594, 595, 588,
	442, 532, 509, 535, 450, 512, 511, 0, 0, 546,
	466, 547, 548, 372, 373, 374, 375, 335, 573, 302,
	469, 397, 0, 533, 0, 0, 0, 0, 0, 0,
	0, 0, 538, 539, 536, 633, 0, 596, 597, 0,
	0, 463, 464, 330, 337, 482, 339, 301, 387, 332,
	448, 346, 0, 475, 540, 476, 599, 602, 600, 601,
	379, 342, 343, 411, 347, 357, 400, 447, 385, 405,
	299, 438, 412, 361, 526, 553, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 580, 579, 578, 577, 576, 575, 574,
	0, 0, 523, 425, 311, 273, 307, 308, 315, 622,
	619, 429, 623, 0, 281, 503, 355, 0, 396, 329,
	568, 569, 0, 0, 229, 230, 231, 232, 233, 234,
	235, 236, 274, 237, 238, 239, 240, 241, 242, 243,
	246, 247, 248, 249, 250, 251, 252, 253, 571, 244,
	245, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 0, 0, 0, 275, 276,
	277, 278, 0, 0, 269, 270, 271, 272, 0, 0,
	0, 454, 455, 456, 478, 0, 440, 502, 620, 0,
	0, 0, 0, 0, 0, 0, 552, 564, 598, 0,
	608, 609, 611, 613, 612, 615, 417, 0, 0, 626,
	493, 494, 627, 604, 384, 0, 508, 541, 530, 614,
	496, 0, 0, 0, 0, 0, 2055, 0, 0, 0,
	0, 324, 0, 0, 354, 545, 527, 537, 528, 513,
	514, 515, 522, 334, 516, 517, 518, 488, 519, 489,
	520, 521, 0, 544, 495, 413, 368, 562, 561, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 0, 0,
	2056, 0, 0, 0, 297, 217, 490, 610, 492, 491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	0, 0, 1210, 1211, 1212, 1209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 287, 419, 436, 298, 409, 449, 303, 416, 293,
	383, 406, 0, 0, 289, 434, 415, 365, 344, 345,
	288, 0, 401, 322, 336, 319, 381, 0, 433, 461,
	318, 452, 0, 444, 291, 0, 443, 380, 430, 435,
	366, 360, 0, 290, 432, 364, 359, 348, 326, 477,
	349, 350, 340, 392, 358, 393, 341, 370, 369, 371,
	0, 0, 0, 0, 0, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 603,
	0, 0, 607, 0, 446, 0, 0, 0, 0, 0,
	0, 418, 0, 0, 351, 0, 0, 0, 462, 0,
	404, 386, 629, 0, 0, 402, 356, 431, 394, 437,
	420, 445, 398, 395, 282, 421, 321, 367, 294, 296,
	316, 323, 325, 327, 328, 376, 377, 389, 408, 422,
	423, 424, 320, 304, 403, 305, 338, 306, 283, 312,
	310, 313, 410, 314, 285, 390, 428, 0, 333, 399,
	363, 286, 362, 391, 427, 426, 295, 453, 459, 460,
	549, 0, 465, 630, 631, 632, 474, 479, 480, 481,
	483, 484, 485, 486, 550, 567, 534, 504, 467, 558,
	501, 505, 506, 570, 0, 0, 0, 458, 352, 353,
	0, 331, 279, 280, 625, 317, 382, 572, 605, 606,
	497, 0, 559, 498, 507, 309, 531, 543, 542, 378,
	457, 0, 554, 557, 487, 624, 0, 551, 566, 628,
	565, 621, 388, 0, 407, 563, 510, 0, 555, 529,
	0, 556, 525, 560, 0, 499, 0, 414, 439, 451,
	468, 471, 500, 585, 586, 587, 284, 470, 589, 590,
	591, 592, 593, 594, 595, 588, 442, 532, 509, 535,
	450, 512, 511, 0, 0, 546, 466, 547, 548, 372,
	373, 374, 375, 335, 573, 302, 469, 397, 0, 533,
	0, 0, 0, 0, 0, 0, 0, 0, 538, 539,
	536, 633, 0, 596, 597, 0, 0, 463, 464, 330,
	337, 482, 339, 301, 387, 332, 448, 346, 0, 475,
	540, 476, 599, 602, 600, 601, 379, 342, 343, 411,
	347, 357, 400, 447, 385, 405, 299, 438, 412, 361,
	526, 553, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 268, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 580,
	579, 578, 577, 576, 575, 574, 0, 0, 523, 425,
	311, 273, 307, 308, 315, 622, 619, 429, 623, 0,
	281, 503, 355, 0, 396, 329, 568, 569, 0, 0,
	229, 230, 231, 232, 233, 234, 235, 236, 274, 237,
	238, 239, 240, 241, 242, 243, 246, 247, 248, 249,
	250, 251, 252, 253, 571, 244, 245, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 0, 0, 0, 275, 276, 277, 278, 0, 0,
	269, 270, 271, 272, 0, 0, 0, 454, 455, 456,
	478, 0, 440, 502, 620, 0, 0, 0, 0, 0,
	0, 0, 552, 564, 598, 0, 608, 609, 611, 613,
	612, 615, 417, 194, 0, 626, 493, 494, 627, 604,
	0, 0, 0, 384, 0, 508, 541, 530, 614, 496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 354, 545, 527, 537, 528, 513, 514,
	515, 522, 334, 516, 517, 518, 488, 519, 489, 520,
	521, 131, 544, 495, 413, 368, 562, 561, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 2105, 0, 216, 0, 0, 0,
	0, 0, 0, 297, 217, 490, 610, 492, 491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 419, 436, 298, 409, 449, 303, 416, 293, 383,
	406, 0, 0, 289, 434, 415, 365, 344, 345, 288,
	0, 401, 322, 336, 319, 381, 0, 433, 461, 318,
	452, 0, 444, 291, 0, 443, 380, 430, 435, 366,
	360, 0, 290, 432, 364, 359, 348, 326, 477, 349,
	350, 340, 392, 358, 393, 341, 370, 369, 371, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 603, 0,
	0, 607, 0, 446, 0, 0, 0, 0, 0, 0,
	418, 0, 0, 351, 0, 0, 0, 462, 0, 404,
	386, 629, 0, 0, 402, 356, 431, 394, 437, 420,
	445, 398, 395, 282, 421, 321, 367, 294, 296, 316,
	323, 325, 327, 328, 376, 377, 389, 408, 422, 423,
	424, 320, 304, 403, 305, 338, 306, 283, 312, 310,
	313, 410, 314, 285, 390, 428, 0, 333, 399, 363,
	286, 362, 391, 427, 426, 295, 453, 459, 460, 549,
	0, 465, 630, 631, 632, 474, 479, 480, 481, 483,
	484, 485, 486, 550, 567, 534, 504, 467, 558, 501,
	505, 506, 570, 0, 0, 0, 458, 352, 353, 0,
	331, 279, 280, 625, 317, 382, 572, 605, 606, 497,
	0, 559, 498, 507, 309, 531, 543, 542, 378, 457,
	0, 554, 557, 487, 624, 0, 551, 566, 628, 565,
	621, 388, 0, 407, 563, 510, 0, 555, 529, 0,
	556, 525, 560, 0, 499, 0, 414, 439, 451, 468,
	471, 500, 585, 586, 587, 284, 470, 589, 590, 591,
	592, 593, 594, 595, 588, 442, 532, 509, 535, 450,
	512, 511, 0, 0, 546, 466, 547, 548, 372, 373,
	374, 375, 335, 573, 302, 469, 397, 0, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 538, 539, 536,
	633, 0, 596, 597, 0, 0, 463, 464, 330, 337,
	482, 339, 301, 387, 332, 448, 346, 0, 475, 540,
	476, 599, 602, 600, 601, 379, 342, 343, 411, 347,
	357, 400, 447, 385, 405, 299, 438, 412, 361, 526,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 580, 579,
	578, 577, 576, 575, 574, 0, 0, 523, 425, 311,
	273, 307, 308, 315, 622, 619, 429, 623, 0, 281,
	503, 355, 158, 396, 329, 568, 569, 0, 0, 229,
	230, 231, 232, 233, 234, 235, 236, 274, 237, 238,
	239, 240, 241, 242, 243, 246, 247, 248, 249, 250,
	251, 252, 253, 571, 244, 245, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	0, 0, 0, 275, 276, 277, 278, 0, 0, 269,
	270, 271, 272, 0, 0, 0, 454, 455, 456, 478,
	0, 440, 502, 620, 0, 0, 0, 0, 0, 0,
	0, 552, 564, 598, 0, 608, 609, 611, 613, 612,
	615, 417, 194, 0, 626, 493, 494, 627, 604, 0,
	0, 0, 384, 0, 508, 541, 530, 614, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 324,
	0, 0, 354, 545, 527, 537, 528, 513, 514, 515,
	522, 334, 516, 517, 518, 488, 519, 489, 520, 521,
	131, 544, 495, 413, 368, 562, 561, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 2091, 0, 216, 0, 0, 0, 0,
	0, 0, 297, 217, 490, 610, 492, 491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 287,
	419, 436, 298, 409, 449, 303, 416, 293, 383, 406,
	0, 0, 289, 434, 415, 365, 344, 345, 288, 0,
	401, 322, 336, 319, 381, 0, 433, 461, 318, 452,
	0, 444, 291, 0, 443, 380, 430, 435, 366, 360,
	0, 290, 432, 364, 359, 348, 326, 477, 349, 350,
	340, 392, 358, 393, 341, 370, 369, 371, 0, 0,
	0, 0, 0, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 603, 0, 0,
	607, 0, 446, 0, 0, 0, 0, 0, 0, 418,
	0, 0, 351, 0, 0, 0, 462, 0, 404, 386,
	629, 0, 0, 402, 356, 431, 394, 437, 420, 445,
	398, 395, 282, 421, 321, 367, 294, 296, 316, 323,
	325, 327, 328, 376, 377, 389, 408, 422, 423, 424,
	320, 304, 403, 305, 338, 306, 283, 312, 310, 313,
	410, 314, 285, 390, 428, 0, 333, 399, 363, 286,
	362, 391, 427, 426, 295, 453, 459, 460, 549, 0,
	465, 630, 631, 632, 474, 479, 480, 481, 483, 484,
	485, 486, 550, 567, 534, 504, 467, 558, 501, 505,
	506, 570, 0, 0, 0, 458, 352, 353, 0, 331,
	279, 280, 625, 317, 382, 572, 605, 606, 497, 0,
	559, 498, 507, 309, 531, 543, 542, 378, 457, 0,
	554, 557, 487, 624, 0, 551, 566, 628, 565, 621,
	388, 0, 407, 563, 510, 0, 555, 529, 0, 556,
	525, 560, 0, 499, 0, 414, 439, 451, 468, 471,
	500, 585, 586, 587, 284, 470, 589, 590, 591, 592,
	593, 594, 595, 588, 442, 532, 509, 535, 450, 512,
	511, 0, 0, 546, 466, 547, 548, 372, 373, 374,
	375, 335, 573, 302, 469, 397, 0, 533, 0, 0,
	0, 0, 0, 0, 0, 0, 538, 539, 536, 633,
	0, 596, 597, 0, 0, 463, 464, 330, 337, 482,
	339, 301, 387, 332, 448, 346, 0, 475, 540, 476,
	599, 602, 600, 601, 379, 342, 343, 411, 347, 357,
	400, 447, 385, 405, 299, 438, 412, 361, 526, 553,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 268, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 580, 579, 578,
	577, 576, 575, 574, 0, 0, 523, 425, 311, 273,
	307, 308, 315, 622, 619, 429, 623, 0, 281, 503,
	355, 158, 396, 329, 568, 569, 0, 0, 229, 230,
	231, 232, 233, 234, 235, 236, 274, 237, 238, 239,
	240, 241, 242, 243, 246, 247, 248, 249, 250, 251,
	252, 253, 571, 244, 245, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 0,
	0, 0, 275, 276, 277, 278, 0, 0, 269, 270,
	271, 272, 0, 0, 0, 454, 455, 456, 478, 0,
	440, 502, 620, 0, 0, 0, 0, 0, 0, 0,
	552, 564, 598, 0, 608, 609, 611, 613, 612, 615,
	417, 0, 0, 626, 493, 494, 627, 604, 384, 0,
	508, 541, 530, 614, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 324, 1008, 0, 354, 545,
	527, 537, 528, 513, 514, 515, 522, 334, 516, 517,
	518, 488, 519, 489, 520, 521, 0, 544, 495, 413,
	368, 562, 561, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 1015, 1016, 0, 0, 0, 0, 297, 217,
	490, 610, 492, 491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1019, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 287, 419, 1002, 298, 409,
	449, 303, 416, 293, 383, 406, 0, 0, 289, 434,
	415, 365, 344, 345, 288, 0, 401, 322, 336, 319,
	381, 0, 433, 461, 318, 452, 991, 444, 291, 990,
	443, 380, 430, 435, 366, 360, 0, 290, 432, 364,
	359, 348, 326, 477, 349, 350, 340, 392, 358, 393,
	341, 370, 369, 371, 0, 0, 0, 0, 0, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 603, 0, 0, 607, 0, 446, 0,
	0, 0, 0, 0, 0, 418, 0, 0, 351, 0,
	0, 0, 462, 0, 404, 386, 629, 0, 0, 402,
	356, 431, 394, 437, 420, 445, 1006, 395, 282, 421,
	321, 367, 294, 296, 316, 323, 325, 327, 328, 376,
	377, 389, 408, 422, 423, 424, 320, 304, 403, 305,
	338, 306, 283, 312, 310, 313, 410, 314, 285, 390,
	428, 0, 333, 399, 363, 286, 362, 391, 427, 426,
	295, 453, 459, 460, 549, 0, 465, 630, 631, 632,
	474, 479, 480, 481, 483, 484, 485, 486, 550, 567,
	534, 504, 467, 558, 501, 505, 506, 570, 0, 0,
	0, 458, 352, 353, 0, 331, 279, 280, 625, 317,
	382, 572, 605, 606, 497, 0, 559, 498, 507, 309,
	531, 543, 542, 378, 457, 0, 554, 557, 487, 624,
	0, 551, 566, 628, 565, 621, 388, 0, 407, 563,
	510, 0, 555, 529, 0, 556, 525, 560, 0, 499,
	0, 414, 439, 451, 468, 471, 500, 585, 586, 587,
	284, 470, 589, 590, 591, 592, 593, 594, 1007, 588,
	442, 532, 509, 535, 450, 512, 511, 0, 0, 546,
	1010, 547, 548, 372, 373, 374, 375, 335, 573, 1005,
	469, 397, 0, 533, 0, 0, 0, 0, 0, 0,
	0, 0, 538, 539, 536, 633, 0, 596, 597, 0,
	0, 463, 464, 330, 337, 482, 339, 301, 387, 332,
	448, 346, 0, 475, 540, 476, 599, 602, 600, 601,
	1017, 1003, 1013, 1004, 347, 357, 400, 447, 385, 405,
	299, 438, 412, 1014, 526, 553, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 580, 579, 578, 577, 576, 575, 574,
	0, 0, 523, 425, 311, 273, 307, 308, 315, 622,
	619, 429, 623, 0, 281, 503, 355, 0, 396, 329,
	568, 569, 0, 0, 229, 230, 231, 232, 233, 234,
	235, 236, 274, 237, 238, 239, 240, 241, 242, 243,
	246, 247, 248, 249, 250, 251, 252, 253, 571, 244,
	245, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 0, 0, 0, 275, 276,
	277, 278, 0, 0, 269, 270, 271, 272, 0, 0,
	0, 454, 455, 456, 478, 0, 440, 502, 620, 0,
	0, 0, 0, 0, 0, 0, 552, 564, 598, 0,
	608, 609, 611, 613, 612, 615, 417, 194, 0, 626,
	493, 494, 627, 604, 0, 0, 0, 384, 0, 508,
	541, 530, 614, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 324, 0, 0, 354, 545, 527,
	537, 528, 513, 514, 515, 522, 334, 516, 517, 518,
	488, 519, 489, 520, 521, 131, 544, 495, 413, 368,
	562, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1987, 0, 0,
	216, 0, 0, 0, 0, 0, 0, 297, 217, 490,
	610, 492, 491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 419, 436, 298, 409, 449,
	303, 416, 293, 383, 406, 0, 0, 289, 434, 415,
	365, 344, 345, 288, 0, 401, 322, 336, 319, 381,
	0, 433, 461, 318, 452, 0, 444, 291, 0, 443,
	380, 430, 435, 366, 360, 0, 290, 432, 364, 359,
	348, 326, 477, 349, 350, 340, 392, 358, 393, 341,
	370, 369, 371, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 603, 0, 0, 607, 0, 446, 0, 0,
	0, 0, 0, 0, 418, 0, 0, 351, 0, 0,
	0, 462, 0, 404, 386, 629, 0, 0, 402, 356,
	431, 394, 437, 420, 445, 398, 395, 282, 421, 321,
	367, 294, 296, 316, 323, 325, 327, 328, 376, 377,
	389, 408, 422, 423, 424, 320, 304, 403, 305, 338,
	306, 283, 312, 310, 313, 410, 314, 285, 390, 428,
	0, 333, 399, 363, 286, 362, 391, 427, 426, 295,
	453, 459, 460, 549, 0, 465, 630, 631, 632, 474,
	479, 480, 481, 483, 484, 485, 486, 550, 567, 534,
	504, 467, 558, 501, 505, 506, 570, 0, 0, 0,
	458, 352, 353, 0, 331, 279, 280, 625, 317, 382,
	572, 605, 606, 497, 0, 559, 498, 507, 309, 531,
	543, 542, 378, 457, 0, 554, 557, 487, 624, 0,
	551, 566, 628, 565, 621, 388, 0, 407, 563, 510,
	0, 555, 529, 0, 556, 525, 560, 0, 499, 0,
	414, 439, 451, 468, 471, 500, 585, 586, 587, 284,
	470, 589, 590, 591, 592, 593, 594, 595, 588, 442,
	532, 509, 535, 450, 512, 511, 0, 0, 546, 466,
	547, 548, 372, 373, 374, 375, 335, 573, 302, 469,
	397, 0, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 538, 539, 536, 633, 0, 596, 597, 0, 0,
	463, 464, 330, 337, 482, 339, 301, 387, 332, 448,
	346, 0, 475, 540, 476, 599, 602, 600, 601, 379,
	342, 343, 411, 347, 357, 400, 447, 385, 405, 299,
	438, 412, 361, 526, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 580, 579, 578, 577, 576, 575, 574, 0,
	0, 523, 425, 311, 273, 307, 308, 315, 622, 619,
	429, 623, 0, 281, 503, 355, 158, 396, 329, 568,
	569, 0, 0, 229, 230, 231, 232, 233, 234, 235,
	236, 274, 237, 238, 239, 240, 241, 242, 243, 246,
	247, 248, 249, 250, 251, 252, 253, 571, 244, 245,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 0, 0, 0, 275, 276, 277,
	278, 0, 0, 269, 270, 271, 272, 0, 0, 0,
	454, 455, 456, 478, 0, 440, 502, 620, 0, 0,
	0, 0, 0, 0, 0, 552, 564, 598, 0, 608,
	609, 611, 613, 612, 615, 417, 0, 0, 626, 493,
	494, 627, 604, 384, 0, 508, 541, 530, 614, 496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 354, 545, 527, 537, 528, 513, 514,
	515, 522, 334, 516, 517, 518, 488, 519, 489, 520,
	521, 0, 544, 495, 413, 368, 562, 561, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 1015, 1016, 0,
	0, 0, 0, 297, 217, 490, 610, 492, 491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1019, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 419, 436, 298, 409, 449, 303, 416, 293, 383,
	406, 0, 0, 289, 434, 415, 365, 344, 345, 288,
	0, 401, 322, 336, 319, 381, 0, 433, 461, 318,
	452, 991, 444, 291, 990, 443, 380, 430, 435, 366,
	360, 0, 290, 432, 364, 359, 348, 326, 477, 349,
	350, 340, 392, 358, 393, 341, 370, 369, 371, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 603, 0,
	0, 607, 0, 446, 0, 0, 0, 0, 0, 0,
	418, 0, 0, 351, 0, 0, 0, 462, 0, 404,
	386, 629, 0, 0, 402, 356, 431, 394, 437, 420,
	445, 398, 395, 282, 421, 321, 367, 294, 296, 316,
	323, 325, 327, 328, 376, 377, 389, 408, 422, 423,
	424, 320, 304, 403, 305, 338, 306, 283, 312, 310,
	313, 410, 314, 285, 390, 428, 0, 333, 399, 363,
	286, 362, 391, 427, 426, 295, 453, 459, 460, 549,
	0, 465, 630, 631, 632, 474, 479, 480, 481, 483,
	484, 485, 486, 550, 567, 534, 504, 467, 558, 501,
	505, 506, 570, 0, 0, 0, 458, 352, 353, 0,
	331, 279, 280, 625, 317, 382, 572, 605, 606, 497,
	0, 559, 498, 507, 309, 531, 543, 542, 378, 457,
	0, 554, 557, 487, 624, 0, 551, 566, 628, 565,
	621, 388, 0, 407, 563, 510, 0, 555, 529, 0,
	556, 525, 560, 0, 499, 0, 414, 439, 451, 468,
	471, 500, 585, 586, 587, 284, 470, 589, 590, 591,
	592, 593, 594, 595, 588, 442, 532, 509, 535, 450,
	512, 511, 0, 0, 546, 466, 547, 548, 372, 373,
	374, 375, 335, 573, 302, 469, 397, 0, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 538, 539, 536,
	633, 0, 596, 597, 0, 0, 463, 464, 330, 337,
	482, 339, 301, 387, 332, 448, 346, 0, 475, 540,
	476, 599, 602, 600, 601, 1017, 2007, 1013, 2008, 347,
	357, 400, 447, 385, 405, 299, 438, 412, 1014, 526,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 580, 579,
	578, 577, 576, 575, 574, 0, 0, 523, 425, 311,
	273, 307, 308, 315, 622, 619, 429, 623, 0, 281,
	503, 355, 0, 396, 329, 568, 569, 0, 0, 229,
	230, 231, 232, 233, 234, 235, 236, 274, 237, 238,
	239, 240, 241, 242, 243, 246, 247, 248, 249, 250,
	251, 252, 253, 571, 244, 245, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	0, 0, 0, 275, 276, 277, 278, 0, 0, 269,
	270, 271, 272, 0, 0, 0, 454, 455, 456, 478,
	0, 440, 502, 620, 0, 0, 0, 0, 0, 0,
	0, 552, 564, 598, 0, 608, 609, 611, 613, 612,
	615, 417, 0, 0, 626, 493, 494, 627, 604, 384,
	0, 508, 541, 530, 614, 496, 0, 0, 2866, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 354,
	545, 527, 537, 528, 513, 514, 515, 522, 334, 516,
	517, 518, 488, 519, 489, 520, 521, 0, 544, 495,
	413, 368, 562, 561, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 297,
	217, 490, 610, 492, 491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 300, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 419, 436, 298,
	409, 449, 303, 416, 293, 383, 406, 0, 0, 289,
	434, 415, 365, 344, 345, 288, 0, 401, 322, 336,
	319, 381, 0, 433, 461, 318, 452, 0, 444, 291,
	0, 443, 380, 430, 435, 366, 360, 0, 290, 432,
	364, 359, 348, 326, 477, 349, 350, 340, 392, 358,
	393, 341, 370, 369, 371, 0, 0, 0, 0, 0,
	472, 473, 0, 0, 0, 0, 0, 0, 0, 0,
	2869, 0, 0, 2868, 603, 0, 0, 607, 0, 446,
	0, 0, 0, 0, 0, 0, 418, 0, 0, 351,
	0, 0, 0, 462, 0, 404, 386, 629, 0, 0,
	402, 356, 431, 394, 437, 420, 445, 398, 395, 282,
	421, 321, 367, 294, 296, 316, 323, 325, 327, 328,
	376, 377, 389, 408, 422, 423, 424, 320, 304, 403,
	305, 338, 306, 283, 312, 310, 313, 410, 314, 285,
	390, 428, 0, 333, 399, 363, 286, 362, 391, 427,
	426, 295, 453, 459, 460, 549, 0, 465, 630, 631,
	632, 474, 479, 480, 481, 483, 484, 485, 486, 550,
	567, 534, 504, 467, 558, 501, 505, 506, 570, 0,
	0, 0, 458, 352, 353, 0, 331, 279, 280, 625,
	317, 382, 572, 605, 606, 497, 0, 559, 498, 507,
	309, 531, 543, 542, 378, 457, 0, 554, 557, 487,
	624, 0, 551, 566, 628, 565, 621, 388, 0, 407,
	563, 510, 0, 555, 529, 0, 556, 525, 560, 0,
	499, 0, 414, 439, 451, 468, 471, 500, 585, 586,
	587, 284, 470, 589, 590, 591, 592, 593, 594, 595,
	588, 442, 532, 509, 535, 450, 512, 511, 0, 0,
	546, 466, 547, 548, 372, 373, 374, 375, 335, 573,
	302, 469, 397, 0, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 538, 539, 536, 633, 0, 596, 597,
	0, 0, 463, 464, 330, 337, 482, 339, 301, 387,
	332, 448, 346, 0, 475, 540, 476, 599, 602, 600,
	601, 379, 342, 343, 411, 347, 357, 400, 447, 385,
	405, 299, 438, 412, 361, 526, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 580, 579, 578, 577, 576, 575,
	574, 0, 0, 523, 425, 311, 273, 307, 308, 315,
	622, 619, 429, 623, 0, 281, 503, 355, 0, 396,
	329, 568, 569, 0, 0, 229, 230, 231, 232, 233,
	234, 235, 236, 274, 237, 238, 239, 240, 241, 242,
	243, 246, 247, 248, 249, 250, 251, 252, 253, 571,
	244, 245, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 0, 0, 0, 275,
	276, 277, 278, 0, 0, 269, 270, 271, 272, 0,
	0, 0, 454, 455, 456, 478, 0, 440, 502, 620,
	0, 0, 0, 0, 0, 0, 0, 552, 564, 598,
	0, 608, 609, 611, 613, 612, 615, 417, 0, 0,
	626, 493, 494, 627, 604, 384, 0, 508, 541, 530,
	614, 496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 324, 1490, 0, 354, 545, 527, 537, 528,
	513, 514, 515, 522, 334, 516, 517, 518, 488, 519,
	489, 520, 521, 0, 544, 495, 413, 368, 562, 561,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 0,
	0, 1488, 0, 0, 0, 297, 217, 490, 610, 492,
	491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	300, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 287, 419, 436, 298, 409, 449, 303, 416,
	293, 383, 406, 0, 0, 289, 434, 415, 365, 344,
	345, 288, 0, 401, 322, 336, 319, 381, 0, 433,
	461, 318, 452, 0, 444, 291, 0, 443, 380, 430,
	435, 366, 360, 0, 290, 432, 364, 359, 348, 326,
	477, 349, 350, 340, 392, 358, 393, 341, 370, 369,
	371, 0, 0, 0, 0, 0, 472, 473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	603, 0, 0, 607, 0, 446, 0, 0, 0, 0,
	0, 0, 418, 0, 0, 351, 0, 0, 0, 462,
	0, 404, 386, 629, 0, 0, 402, 356, 431, 394,
	437, 420, 445, 398, 395, 282, 421, 321, 367, 294,
	296, 316, 323, 325, 327, 328, 376, 377, 389, 408,
	422, 423, 424, 320, 304, 403, 305, 338, 306, 283,
	312, 310, 313, 410, 314, 285, 390, 428, 0, 333,
	399, 363, 286, 362, 391, 427, 426, 295, 453, 459,
	460, 549, 0, 465, 630, 631, 632, 474, 479, 480,
	481, 483, 484, 485, 486, 550, 567, 534, 504, 467,
	558, 501, 505, 506, 570, 0, 0, 0, 458, 352,
	353, 0, 331, 279, 280, 625, 317, 382, 572, 605,
	606, 497, 0, 559, 498, 507, 309, 531, 543, 542,
	378, 457, 0, 554, 557, 487, 624, 0, 551, 566,
	628, 565, 621, 388, 0, 407, 563, 510, 0, 555,
	529, 0, 556, 525, 560, 0, 499, 0, 414, 439,
	451, 468, 471, 500, 585, 586, 587, 284, 470, 589,
	590, 591, 592, 593, 594, 595, 588, 442, 532, 509,
	535, 450, 512, 511, 0, 0, 546, 466, 547, 548,
	372, 373, 374, 375, 335, 573, 302, 469, 397, 0,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 538,
	539, 536, 633, 0, 596, 597, 0, 0, 463, 464,
	330, 337, 482, 339, 301, 387, 332, 448, 346, 0,
	475, 540, 476, 599, 602, 600, 601, 379, 342, 343,
	411, 347, 357, 400, 447, 385, 405, 299, 438, 412,
	361, 526, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	580, 579, 578, 577, 576, 575, 574, 0, 0, 523,
	425, 311, 273, 307, 308, 315, 622, 619, 429, 623,
	0, 281, 503, 355, 0, 396, 329, 568, 569, 0,
	0, 229, 230, 231, 232, 233, 234, 235, 236, 274,
	237, 238, 239, 240, 241, 242, 243, 246, 247, 248,
	249, 250, 251, 252, 253, 571, 244, 245, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 0, 0, 0, 275, 276, 277, 278, 0,
	0, 269, 270, 271, 272, 0, 0, 0, 454, 455,
	456, 478, 0, 440, 502, 620, 0, 0, 0, 0,
	0, 0, 0, 552, 564, 598, 0, 608, 609, 611,
	613, 612, 615, 417, 0, 0, 626, 493, 494, 627,
	604, 384, 0, 508, 541, 530, 614, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 324, 1484,
	0, 354, 545, 527, 537, 528, 513, 514, 515, 522,
	334, 516, 517, 518, 488, 519, 489, 520, 521, 0,
	544, 495, 413, 368, 562, 561, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 0, 0, 1488, 0, 0,
	0, 297, 217, 490, 610, 492, 491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 287, 419,
	436, 298, 409, 449, 303, 416, 293, 383, 406, 0,
	0, 289, 434, 415, 365, 344, 345, 288, 0, 401,
	322, 336, 319, 381, 0, 433, 461, 318, 452, 0,
	444, 291, 0, 443, 380, 430, 435, 366, 360, 0,
	290, 432, 364, 359, 348, 326, 477, 349, 350, 340,
	392, 358, 393, 341, 370, 369, 371, 0, 0, 0,
	0, 0, 472, 473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 603, 0, 0, 607,
	0, 446, 0, 0, 0, 0, 0, 0, 418, 0,
	0, 351, 0, 0, 0, 462, 0, 404, 386, 629,
	0, 0, 402, 356, 431, 394, 437, 420, 445, 398,
	395, 282, 421, 321, 367, 294, 296, 316, 323, 325,
	327, 328, 376, 377, 389, 408, 422, 423, 424, 320,
	304, 403, 305, 338, 306, 283, 312, 310, 313, 410,
	314, 285, 390, 428, 0, 333, 399, 363, 286, 362,
	391, 427, 426, 295, 453, 459, 460, 549, 0, 465,
	630, 631, 632, 474, 479, 480, 481, 483, 484, 485,
	486, 550, 567, 534, 504, 467, 558, 501, 505, 506,
	570, 0, 0, 0, 458, 352, 353, 0, 331, 279,
	280, 625, 317, 382, 572, 605, 606, 497, 0, 559,
	498, 507, 309, 531, 543, 542, 378, 457, 0, 554,
	557, 487, 624, 0, 551, 566, 628, 565, 621, 388,
	0, 407, 563, 510, 0, 555, 529, 0, 556, 525,
	560, 0, 499, 0, 414, 439, 451, 468, 471, 500,
	585, 586, 587, 284, 470, 589, 590, 591, 592, 593,
	594, 595, 588, 442, 532, 509, 535, 450, 512, 511,
	0, 0, 546, 466, 547, 548, 372, 373, 374, 375,
	335, 573, 302, 469, 397, 0, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 538, 539, 536, 633, 0,
	596, 597, 0, 0, 463, 464, 330, 337, 482, 339,
	301, 387, 332, 448, 346, 0, 475, 540, 476, 599,
	602, 600, 601, 379, 342, 343, 411, 347, 357, 400,
	447, 385, 405, 299, 438, 412, 361, 526, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 580, 579, 578, 577,
	576, 575, 574, 0, 0, 523, 425, 311, 273, 307,
	308, 315, 622, 619, 429, 623, 0, 281, 503, 355,
	0, 396, 329, 568, 569, 0, 0, 229, 230, 231,
	232, 233, 234, 235, 236, 274, 237, 238, 239, 240,
	241, 242, 243, 246, 247, 248, 249, 250, 251, 252,
	253, 571, 244, 245, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 0, 0,
	0, 275, 276, 277, 278, 0, 0, 269, 270, 271,
	272, 0, 0, 0, 454, 455, 456, 478, 0, 440,
	502, 620, 0, 0, 0, 0, 0, 0, 0, 552,
	564, 598, 0, 608, 609, 611, 613, 612, 615, 417,
	0, 0, 626, 493, 494, 627, 604, 384, 0, 508,
	541, 530, 614, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 324, 0, 0, 354, 545, 527,
	537, 528, 513, 514, 515, 522, 334, 516, 517, 518,
	488, 519, 489, 520, 521, 0, 544, 495, 413, 368,
	562, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3898, 0,
	216, 820, 0, 0, 0, 0, 0, 297, 217, 490,
	610, 492, 491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 419, 436, 298, 409, 449,
	303, 416, 293, 383, 406, 0, 0, 289, 434, 415,
	365, 344, 345, 288, 0, 401, 322, 336, 319, 381,
	0, 433, 461, 318, 452, 0, 444, 291, 0, 443,
	380, 430, 435, 366, 360, 0, 290, 432, 364, 359,
	348, 326, 477, 349, 350, 340, 392, 358, 393, 341,
	370, 369, 371, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 603, 0, 0, 607, 0, 446, 0, 0,
	0, 0, 0, 0, 418, 0, 0, 351, 0, 0,
	0, 462, 0, 404, 386, 629, 0, 0, 402, 356,
	431, 394, 437, 420, 445, 398, 395, 282, 421, 321,
	367, 294, 296, 316, 323, 325, 327, 328, 376, 377,
	389, 408, 422, 423, 424, 320, 304, 403, 305, 338,
	306, 283, 312, 310, 313, 410, 314, 285, 390, 428,
	0, 333, 399, 363, 286, 362, 391, 427, 426, 295,
	453, 459, 460, 549, 0, 465, 630, 631, 632, 474,
	479, 480, 481, 483, 484, 485, 486, 550, 567, 534,
	504, 467, 558, 501, 505, 506, 570, 0, 0, 0,
	458, 352, 353, 0, 331, 279, 280, 625, 317, 382,
	572, 605, 606, 497, 0, 559, 498, 507, 309, 531,
	543, 542, 378, 457, 0, 554, 557, 487, 624, 0,
	551, 566, 628, 565, 621, 388, 0, 407, 563, 510,
	0, 555, 529, 0, 556, 525, 560, 0, 499, 0,
	414, 439, 451, 468, 471, 500, 585, 586, 587, 284,
	470, 589, 590, 591, 592, 593, 594, 595, 588, 442,
	532, 509, 535, 450, 512, 511, 0, 0, 546, 466,
	547, 548, 372, 373, 374, 375, 335, 573, 302, 469,
	397, 0, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 538, 539, 536, 633, 0, 596, 597, 0, 0,
	463, 464, 330, 337, 482, 339, 301, 387, 332, 448,
	346, 0, 475, 540, 476, 599, 602, 600, 601, 379,
	342, 343, 411, 347, 357, 400, 447, 385, 405, 299,
	438, 412, 361, 526, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 580, 579, 578, 577, 576, 575, 574, 0,
	0, 523, 425, 311, 273, 307, 308, 315, 622, 619,
	429, 623, 0, 281, 503, 355, 0, 396, 329, 568,
	569, 0, 0, 229, 230, 231, 232, 233, 234, 235,
	236, 274, 237, 238, 239, 240, 241, 242, 243, 246,
	247, 248, 249, 250, 251, 252, 253, 571, 244, 245,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 0, 0, 0, 275, 276, 277,
	278, 0, 0, 269, 270, 271, 272, 0, 0, 0,
	454, 455, 456, 478, 0, 440, 502, 620, 0, 0,
	0, 0, 0, 0, 0, 552, 564, 598, 0, 608,
	609, 611, 613, 612, 615, 417, 0, 0, 626, 493,
	494, 627, 604, 384, 0, 508, 541, 530, 614, 496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 354, 545, 527, 537, 528, 513, 514,
	515, 522, 334, 516, 517, 518, 488, 519, 489, 520,
	521, 0, 544, 495, 413, 368, 562, 561, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 0, 0, 1488,
	0, 0, 0, 297, 217, 490, 610, 492, 491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1486, 0, 0, 0, 0, 0, 0,
	287, 419, 436, 298, 409, 449, 303, 416, 293, 383,
	406, 0, 0, 289, 434, 415, 365, 344, 345, 288,
	0, 401, 322, 336, 319, 381, 0, 433, 461, 318,
	452, 0, 444, 291, 0, 443, 380, 430, 435, 366,
	360, 0, 290, 432, 364, 359, 348, 326, 477, 349,
	350, 340, 392, 358, 393, 341, 370, 369, 371, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 603, 0,
	0, 607, 0, 446, 0, 0, 0, 0, 0, 0,
	418, 0, 0, 351, 0, 0, 0, 462, 0, 404,
	386, 629, 0, 0, 402, 356, 431, 394, 437, 420,
	445, 398, 395, 282, 421, 321, 367, 294, 296, 316,
	323, 325, 327, 328, 376, 377, 389, 408, 422, 423,
	424, 320, 304, 403, 305, 338, 306, 283, 312, 310,
	313, 410, 314, 285, 390, 428, 0, 333, 399, 363,
	286, 362, 391, 427, 426, 295, 453, 459, 460, 549,
	0, 465, 630, 631, 632, 474, 479, 480, 481, 483,
	484, 485, 486, 550, 567, 534, 504, 467, 558, 501,
	505, 506, 570, 0, 0, 0, 458, 352, 353, 0,
	331, 279, 280, 625, 317, 382, 572, 605, 606, 497,
	0, 559, 498, 507, 309, 531, 543, 542, 378, 457,
	0, 554, 557, 487, 624, 0, 551, 566, 628, 565,
	621, 388, 0, 407, 563, 510, 0, 555, 529, 0,
	556, 525, 560, 0, 499, 0, 414, 439, 451, 468,
	471, 500, 585, 586, 587, 284, 470, 589, 590, 591,
	592, 593, 594, 595, 588, 442, 532, 509, 535, 450,
	512, 511, 0, 0, 546, 466, 547, 548, 372, 373,
	374, 375, 335, 573, 302, 469, 397, 0, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 538, 539, 536,
	633, 0, 596, 597, 0, 0, 463, 464, 330, 337,
	482, 339, 301, 387, 332, 448, 346, 0, 475, 540,
	476, 599, 602, 600, 601, 379, 342, 343, 411, 347,
	357, 400, 447, 385, 405, 299, 438, 412, 361, 526,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 580, 579,
	578, 577, 576, 575, 574, 0, 0, 523, 425, 311,
	273, 307, 308, 315, 622, 619, 429, 623, 0, 281,
	503, 355, 0, 396, 329, 568, 569, 0, 0, 229,
	230, 231, 232, 233, 234, 235, 236, 274, 237, 238,
	239, 240, 241, 242, 243, 246, 247, 248, 249, 250,
	251, 252, 253, 571, 244, 245, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	0, 0, 0, 275, 276, 277, 278, 0, 0, 269,
	270, 271, 272, 0, 0, 0, 454, 455, 456, 478,
	0, 440, 502, 620, 0, 0, 0, 0, 0, 0,
	0, 552, 564, 598, 0, 608, 609, 611, 613, 612,
	615, 417, 0, 0, 626, 493, 494, 627, 604, 384,
	0, 508, 541, 530, 614, 496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 354,
	545, 527, 537, 528, 513, 514, 515, 522, 334, 516,
	517, 518, 488, 519, 489, 520, 521, 0, 544, 495,
	413, 368, 562, 561, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 0, 0, 1488, 0, 0, 0, 297,
	217, 490, 610, 492, 491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 300, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1696,
	0, 0, 0, 0, 0, 0, 287, 419, 436, 298,
	409, 449, 303, 416, 293, 383, 406, 0, 0, 289,
	434, 415, 365, 344, 345, 288, 0, 401, 322, 336,
	319, 381, 0, 433, 461, 318, 452, 0, 444, 291,
	0, 443, 380, 430, 435, 366, 360, 0, 290, 432,
	364, 359, 348, 326, 477, 349, 350, 340, 392, 358,
	393, 341, 370, 369, 371, 0, 0, 0, 0, 0,
	472, 473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 603, 0, 0, 607, 0, 446,
	0, 0, 0, 0, 0, 0, 418, 0, 0, 351,
	0, 0, 0, 462, 0, 404, 386, 629, 0, 0,
	402, 356, 431, 394, 437, 420, 445, 398, 395, 282,
	421, 321, 367, 294, 296, 316, 323, 325, 327, 328,
	376, 377, 389, 408, 422, 423, 424, 320, 304, 403,
	305, 338, 306, 283, 312, 310, 313, 410, 314, 285,
	390, 428, 0, 333, 399, 363, 286, 362, 391, 427,
	426, 295, 453, 459, 460, 549, 0, 465, 630, 631,
	632, 474, 479, 480, 481, 483, 484, 485, 486, 550,
	567, 534, 504, 467, 558, 501, 505, 506, 570, 0,
	0, 0, 458, 352, 353, 0, 331, 279, 280, 625,
	317, 382, 572, 605, 606, 497, 0, 559, 498, 507,
	309, 531, 543, 542, 378, 457, 0, 554, 557, 487,
	624, 0, 551, 566, 628, 565, 621, 388, 0, 407,
	563, 510, 0, 555, 529, 0, 556, 525, 560, 0,
	499, 0, 414, 439, 451, 468, 471, 500, 585, 586,
	587, 284, 470, 589, 590, 591, 592, 593, 594, 595,
	588, 442, 532, 509, 535, 450, 512, 511, 0, 0,
	546, 466, 547, 548, 372, 373, 374, 375, 335, 573,
	302, 469, 397, 0, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 538, 539, 536, 633, 0, 596, 597,
	0, 0, 463, 464, 330, 337, 482, 339, 301, 387,
	332, 448, 346, 0, 475, 540, 476, 599, 602, 600,
	601, 379, 342, 343, 411, 347, 357, 400, 447, 385,
	405, 299, 438, 412, 361, 526, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 580, 579, 578, 577, 576, 575,
	574, 0, 0, 523, 425, 311, 273, 307, 308, 315,
	622, 619, 429, 623, 0, 281, 503, 355, 0, 396,
	329, 568, 569, 0, 0, 229, 230, 231, 232, 233,
	234, 235, 236, 274, 237, 238, 239, 240, 241, 242,
	243, 246, 247, 248, 249, 250, 251, 252, 253, 571,
	244, 245, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 0, 0, 0, 275,
	276, 277, 278, 0, 0, 269, 270, 271, 272, 0,
	0, 0, 454, 455, 456, 478, 0, 440, 502, 620,
	0, 0, 0, 0, 0, 0, 0, 552, 564, 598,
	0, 608, 609, 611, 613, 612, 615, 417, 0, 0,
	626, 493, 494, 627, 604, 384, 0, 508, 541, 530,
	614, 496, 0, 0, 0, 0, 0, 2430, 0, 0,
	0, 0, 324, 0, 0, 354, 545, 527, 537, 528,
	513, 514, 515, 522, 334, 516, 517, 518, 488, 519,
	489, 520, 521, 0, 544, 495, 413, 368, 562, 561,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 0,
	0, 2432, 0, 0, 0, 297, 217, 490, 610, 492,
	491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	300, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 419, 436, 298, 409, 449, 303, 416,
	293, 383, 406, 0, 0, 289, 434, 415, 365, 344,
	345, 288, 0, 401, 322, 336, 319, 381, 0, 433,
	461, 318, 452, 0, 444, 291, 0, 443, 380, 430,
	435, 366, 360, 0, 290, 432, 364, 359, 348, 326,
	477, 349, 350, 340, 392, 358, 393, 341, 370, 369,
	371, 0, 0, 0, 0, 0, 472, 473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	603, 0, 0, 607, 0, 446, 0, 0, 0, 0,
	0, 0, 418, 0, 0, 351, 0, 0, 0, 462,
	0, 404, 386, 629, 0, 0, 402, 356, 431, 394,
	437, 420, 445, 398, 395, 282, 421, 321, 367, 294,
	296, 316, 323, 325, 327, 328, 376, 377, 389, 408,
	422, 423, 424, 320, 304, 403, 305, 338, 306, 283,
	312, 310, 313, 410, 314, 285, 390, 428, 0, 333,
	399, 363, 286, 362, 391, 427, 426, 295, 453, 459,
	460, 549, 0, 465, 630, 631, 632, 474, 479, 480,
	481, 483, 484, 485, 486, 550, 567, 534, 504, 467,
	558, 501, 505, 506, 570, 0, 0, 0, 458, 352,
	353, 0, 331, 279, 280, 625, 317, 382, 572, 605,
	606, 497, 0, 559, 498, 507, 309, 531, 543, 542,
	378, 457, 0, 554, 557, 487, 624, 0, 551, 566,
	628, 565, 621, 388, 0, 407, 563, 510, 0, 555,
	529, 0, 556, 525, 560, 0, 499, 0, 414, 439,
	451, 468, 471, 500, 585, 586, 587, 284, 470, 589,
	590, 591, 592, 593, 594, 595, 588, 442, 532, 509,
	535, 450, 512, 511, 0, 0, 546, 466, 547, 548,
	372, 373, 374, 375, 335, 573, 302, 469, 397, 0,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 538,
	539, 536, 633, 0, 596, 597, 0, 0, 463, 464,
	330, 337, 482, 339, 301, 387, 332, 448, 346, 0,
	475, 540, 476, 599, 602, 600, 601, 379, 342, 343,
	411, 347, 357, 400, 447, 385, 405, 299, 438, 412,
	361, 526, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	580, 579, 578, 577, 576, 575, 574, 0, 0, 523,
	425, 311, 273, 307, 308, 315, 622, 619, 429, 623,
	0, 281, 503, 355, 0, 396, 329, 568, 569, 0,
	0, 229, 230, 231, 232, 233, 234, 235, 236, 274,
	237, 238, 239, 240, 241, 242, 243, 246, 247, 248,
	249, 250, 251, 252, 253, 571, 244, 245, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 0, 0, 0, 275, 276, 277, 278, 0,
	0, 269, 270, 271, 272, 0, 0, 0, 454, 455,
	456, 478, 0, 440, 502, 620, 0, 0, 0, 0,
	0, 0, 0, 552, 564, 598, 0, 608, 609, 611,
	613, 612, 615, 417, 0, 0, 626, 493, 494, 627,
	604, 384, 0, 508, 541, 530, 614, 496, 0, 0,
	0, 0, 0, 2055, 0, 0, 0, 0, 324, 0,
	0, 354, 545, 527, 537, 528, 513, 514, 515, 522,
	334, 516, 517, 518, 488, 519, 489, 520, 521, 0,
	544, 495, 413, 368, 562, 561, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 0, 0, 2056, 0, 0,
	0, 297, 217, 490, 610, 492, 491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 419,
	436, 298, 409, 449, 303, 416, 293, 383, 406, 0,
	0, 289, 434, 415, 365, 344, 345, 288, 0, 401,
	322, 336, 319, 381, 0, 433, 461, 318, 452, 0,
	444, 291, 0, 443, 380, 430, 435, 366, 360, 0,
	290, 432, 364, 359, 348, 326, 477, 349, 350, 340,
	392, 358, 393, 341, 370, 369, 371, 0, 0, 0,
	0, 0, 472, 473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 603, 0, 0, 607,
	0, 446, 0, 0, 0, 0, 0, 0, 418, 0,
	0, 351, 0, 0, 0, 462, 0, 404, 386, 629,
	0, 0, 402, 356, 431, 394, 437, 420, 445, 398,
	395, 282, 421, 321, 367, 294, 296, 316, 323, 325,
	327, 328, 376, 377, 389, 408, 422, 423, 424, 320,
	304, 403, 305, 338, 306, 283, 312, 310, 313, 410,
	314, 285, 390, 428, 0, 333, 399, 363, 286, 362,
	391, 427, 426, 295, 453, 459, 460, 549, 0, 465,
	630, 631, 632, 474, 479, 480, 481, 483, 484, 485,
	486, 550, 567, 534, 504, 467, 558, 501, 505, 506,
	570, 0, 0, 0, 458, 352, 353, 0, 331, 279,
	280, 625, 317, 382, 572, 605, 606, 497, 0, 559,
	498, 507, 309, 531, 543, 542, 378, 457, 0, 554,
	557, 487, 624, 0, 551, 566, 628, 565, 621, 388,
	0, 407, 563, 510, 0, 555, 529, 0, 556, 525,
	560, 0, 499, 0, 414, 439, 451, 468, 471, 500,
	585, 586, 587, 284, 470, 589, 590, 591, 592, 593,
	594, 595, 588, 442, 532, 509, 535, 450, 512, 511,
	0, 0, 546, 466, 547, 548, 372, 373, 374, 375,
	335, 573, 302, 469, 397, 0, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 538, 539, 536, 633, 0,
	596, 597, 0, 0, 463, 464, 330, 337, 482, 339,
	301, 387, 332, 448, 346, 0, 475, 540, 476, 599,
	602, 600, 601, 379, 342, 343, 411, 347, 357, 400,
	447, 385, 405, 299, 438, 412, 361, 526, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 580, 579, 578, 577,
	576, 575, 574, 0, 0, 523, 425, 311, 273, 307,
	308, 315, 622, 619, 429, 623, 0, 281, 503, 355,
	0, 396, 329, 568, 569, 0, 0, 229, 230, 231,
	232, 233, 234, 235, 236, 274, 237, 238, 239, 240,
	241, 242, 243, 246, 247, 248, 249, 250, 251, 252,
	253, 571, 244, 245, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 0, 0,
	0, 275, 276, 277, 278, 0, 0, 269, 270, 271,
	272, 0, 0, 0, 454, 455, 456, 478, 0, 440,
	502, 620, 0, 0, 0, 0, 0, 0, 0, 552,
	564, 598, 0, 608, 609, 611, 613, 612, 615, 417,
	0, 0, 626, 493, 494, 627, 604, 384, 0, 508,
	541, 530, 614, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 324, 0, 0, 354, 545, 527,
	537, 528, 513, 514, 515, 522, 334, 516, 517, 518,
	488, 519, 489, 520, 521, 0, 544, 495, 413, 368,
	562, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 0, 0, 3071, 3073, 0, 0, 297, 217, 490,
	610, 492, 491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 419, 436, 298, 409, 449,
	303, 416, 293, 383, 406, 0, 0, 289, 434, 415,
	365, 344, 345, 288, 0, 401, 322, 336, 319, 381,
	0, 433, 461, 318, 452, 0, 444, 291, 0, 443,
	380, 430, 435, 366, 360, 0, 290, 432, 364, 359,
	348, 326, 477, 349, 350, 340, 392, 358, 393, 341,
	370, 369, 371, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 603, 0, 0, 607, 0, 446, 0, 0,
	0, 0, 0, 0, 418, 0, 0, 351, 0, 0,
	0, 462, 0, 404, 386, 629, 0, 0, 402, 356,
	431, 394, 437, 420, 445, 398, 395, 282, 421, 321,
	367, 294, 296, 316, 323, 325, 327, 328, 376, 377,
	389, 408, 422, 423, 424, 320, 304, 403, 305, 338,
	306, 283, 312, 310, 313, 410, 314, 285, 390, 428,
	0, 333, 399, 363, 286, 362, 391, 427, 426, 295,
	453, 459, 460, 549, 0, 465, 630, 631, 632, 474,
	479, 480, 481, 483, 484, 485, 486, 550, 567, 534,
	504, 467, 558, 501, 505, 506, 570, 0, 0, 0,
	458, 352, 353, 0, 331, 279, 280, 625, 317, 382,
	572, 605, 606, 497, 0, 559, 498, 507, 309, 531,
	543, 542, 378, 457, 0, 554, 557, 487, 624, 0,
	551, 566, 628, 565, 621, 388, 0, 407, 563, 510,
	0, 555, 529, 0, 556, 525, 560, 0, 499, 0,
	414, 439, 451, 468, 471, 500, 585, 586, 587, 284,
	470, 589, 590, 591, 592, 593, 594, 595, 588, 442,
	532, 509, 535, 450, 512, 511, 0, 0, 546, 466,
	547, 548, 372, 373, 374, 375, 335, 573, 302, 469,
	397, 0, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 538, 539, 536, 633, 0, 596, 597, 0, 0,
	463, 464, 330, 337, 482, 339, 301, 387, 332, 448,
	346, 0, 475, 540, 476, 599, 602, 600, 601, 379,
	342, 343, 411, 347, 357, 400, 447, 385, 405, 299,
	438, 412, 361, 526, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 580, 579, 578, 577, 576, 575, 574, 0,
	0, 523, 425, 311, 273, 307, 308, 315, 622, 619,
	429, 623, 0, 281, 503, 355, 0, 396, 329, 568,
	569, 0, 0, 229, 230, 231, 232, 233, 234, 235,
	236, 274, 237, 238, 239, 240, 241, 242, 243, 246,
	247, 248, 249, 250, 251, 252, 253, 571, 244, 245,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 0, 0, 0, 275, 276, 277,
	278, 0, 0, 269, 270, 271, 272, 0, 0, 0,
	454, 455, 456, 478, 0, 440, 502, 620, 0, 0,
	0, 0, 0, 0, 0, 552, 564, 598, 0, 608,
	609, 611, 613, 612, 615, 417, 0, 0, 626, 493,
	494, 627, 604, 384, 0, 508, 541, 530, 614, 496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 2452, 0, 354, 545, 527, 537, 528, 513, 514,
	515, 522, 334, 516, 517, 518, 488, 519, 489, 520,
	521, 0, 544, 495, 413, 368, 562, 561, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 0, 0, 1488,
	0, 0, 0, 297, 217, 490, 610, 492, 491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 419, 436, 298, 409, 449, 303, 416, 293, 383,
	406, 0, 0, 289, 434, 415, 365, 344, 345, 288,
	0, 401, 322, 336, 319, 381, 0, 433, 461, 318,
	452, 0, 444, 291, 0, 443, 380, 430, 435, 366,
	360, 0, 290, 432, 364, 359, 348, 326, 477, 349,
	350, 340, 392, 358, 393, 341, 370, 369, 371, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 603, 0,
	0, 607, 0, 446, 0, 0, 0, 0, 0, 0,
	418, 0, 0, 351, 0, 0, 0, 462, 0, 404,
	386, 629, 0, 0, 402, 356, 431, 394, 437, 420,
	445, 398, 395, 282, 421, 321, 367, 294, 296, 316,
	323, 325, 327, 328, 376, 377, 389, 408, 422, 423,
	424, 320, 304, 403, 305, 338, 306, 283, 312, 310,
	313, 410, 314, 285, 390, 428, 0, 333, 399, 363,
	286, 362, 391, 427, 426, 295, 453, 459, 460, 549,
	0, 465, 630, 631, 632, 474, 479, 480, 481, 483,
	484, 485, 486, 550, 567, 534, 504, 467, 558, 501,
	505, 506, 570, 0, 0, 0, 458, 352, 353, 0,
	331, 279, 280, 625, 317, 382, 572, 605, 606, 497,
	0, 559, 498, 507, 309, 531, 543, 542, 378, 457,
	0, 554, 557, 487, 624, 0, 551, 566, 628, 565,
	621, 388, 0, 407, 563, 510, 0, 555, 529, 0,
	556, 525, 560, 0, 499, 0, 414, 439, 451, 468,
	471, 500, 585, 586, 587, 284, 470, 589, 590, 591,
	592, 593, 594, 595, 588, 442, 532, 509, 535, 450,
	512, 511, 0, 0, 546, 466, 547, 548, 372, 373,
	374, 375, 335, 573, 302, 469, 397, 0, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 538, 539, 536,
	633, 0, 596, 597, 0, 0, 463, 464, 330, 337,
	482, 339, 301, 387, 332, 448, 346, 0, 475, 540,
	476, 599, 602, 600, 601, 379, 342, 343, 411, 347,
	357, 400, 447, 385, 405, 299, 438, 412, 361, 526,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 580, 579,
	578, 577, 576, 575, 574, 0, 0, 523, 425, 311,
	273, 307, 308, 315, 622, 619, 429, 623, 0, 281,
	503, 355, 0, 396, 329, 568, 569, 0, 0, 229,
	230, 231, 232, 233, 234, 235, 236, 274, 237, 238,
	239, 240, 241, 242, 243, 246, 247, 248, 249, 250,
	251, 252, 253, 571, 244, 245, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	0, 0, 0, 275, 276, 277, 278, 0, 0, 269,
	270, 271, 272, 0, 0, 0, 454, 455, 456, 478,
	0, 440, 502, 620, 0, 0, 0, 0, 0, 0,
	0, 552, 564, 598, 0, 608, 609, 611, 613, 612,
	615, 417, 0, 0, 626, 493, 494, 627, 604, 384,
	0, 508, 541, 530, 614, 496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 640, 324, 0, 0, 354,
	545, 527, 537, 528, 513, 514, 515, 522, 334, 516,
	517, 518, 488, 519, 489, 520, 521, 0, 544, 495,
	413, 368, 562, 561, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 297,
	217, 490, 610, 492, 491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 300, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 419, 436, 298,
	409, 449, 303, 416, 293, 383, 406, 0, 0, 289,
	434, 415, 365, 344, 345, 288, 0, 401, 322, 336,
	319, 381, 0, 433, 461, 318, 452, 0, 444, 291,
	0, 443, 380, 430, 435, 366, 360, 0, 290, 432,
	364, 359, 348, 326, 477, 349, 350, 340, 392, 358,
	393, 341, 370, 369, 371, 0, 0, 0, 0, 0,
	472, 473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 603, 0, 0, 607, 0, 446,
	0, 639, 0, 0, 0, 0, 418, 0, 0, 351,
	0, 0, 0, 462, 0, 404, 386, 629, 0, 0,
	402, 356, 431, 394, 437, 420, 445, 398, 395, 282,
	421, 321, 367, 294, 296, 316, 323, 325, 327, 328,
	376, 377, 389, 408, 422, 423, 424, 320, 304, 403,
	305, 338, 306, 283, 312, 310, 313, 410, 314, 285,
	390, 428, 0, 333, 399, 363, 286, 362, 391, 427,
	426, 295, 453, 459, 460, 549, 0, 465, 630, 631,
	632, 474, 479, 480, 481, 483, 484, 485, 486, 550,
	567, 534, 504, 467, 558, 501, 505, 506, 570, 0,
	0, 0, 458, 352, 353, 0, 331, 279, 280, 625,
	317, 382, 572, 605, 606, 497, 0, 559, 498, 507,
	309, 531, 543, 542, 378, 457, 0, 554, 557, 487,
	624, 0, 551, 566, 628, 565, 621, 388, 0, 407,
	563, 510, 0, 555, 529, 0, 556, 525, 560, 0,
	499, 0, 414, 439, 451, 468, 471, 500, 585, 586,
	587, 284, 470, 589, 590, 591, 592, 593, 594, 595,
	588, 442, 532, 509, 535, 450, 512, 511, 0, 0,
	546, 466, 547, 548, 372, 373, 374, 375, 335, 573,
	302, 469, 397, 0, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 538, 539, 536, 633, 0, 596, 597,
	0, 0, 463, 464, 330, 337, 482, 339, 301, 387,
	332, 448, 346, 0, 475, 540, 476, 599, 602, 600,
	601, 379, 342, 343, 411, 347, 357, 400, 447, 385,
	405, 299, 438, 412, 361, 526, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 580, 579, 578, 577, 576, 575,
	574, 0, 0, 523, 425, 311, 273, 307, 308, 315,
	622, 619, 429, 623, 0, 281, 503, 355, 0, 396,
	329, 568, 569, 0, 0, 229, 230, 231, 232, 233,
	234, 235, 236, 274, 237, 238, 239, 240, 241, 242,
	243, 246, 247, 248, 249, 250, 251, 252, 253, 571,
	244, 245, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 0, 0, 0, 275,
	276, 277, 278, 0, 0, 269, 270, 271, 272, 0,
	0, 0, 454, 455, 456, 478, 0, 440, 502, 620,
	0, 0, 0, 0, 0, 0, 0, 552, 564, 598,
	0, 608, 609, 611, 613, 612, 615, 417, 0, 0,
	626, 493, 494, 627, 604, 384, 0, 508, 541, 530,
	614, 496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 324, 0, 0, 354, 545, 527, 537, 528,
	513, 514, 515, 522, 334, 516, 517, 518, 488, 519,
	489, 520, 521, 0, 544, 495, 413, 368, 562, 561,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 820,
	0, 0, 0, 0, 0, 297, 217, 490, 610, 492,
	491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	300, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 419, 436, 298, 409, 449, 303, 416,
	293, 383, 406, 0, 0, 289, 434, 415, 365, 344,
	345, 288, 0, 401, 322, 336, 319, 381, 0, 433,
	461, 318, 452, 0, 444, 291, 0, 443, 380, 430,
	435, 366, 360, 0, 290, 432, 364, 359, 348, 326,
	477, 349, 350, 340, 392, 358, 393, 341, 370, 369,
	371, 0, 0, 0, 0, 0, 472, 473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	603, 0, 0, 607, 0, 446, 0, 0, 0, 0,
	0, 0, 418, 0, 0, 351, 0, 0, 0, 462,
	0, 404, 386, 629, 0, 0, 402, 356, 431, 394,
	437, 420, 445, 398, 395, 282, 421, 321, 367, 294,
	296, 316, 323, 325, 327, 328, 376, 377, 389, 408,
	422, 423, 424, 320, 304, 403, 305, 338, 306, 283,
	312, 310, 313, 410, 314, 285, 390, 428, 0, 333,
	399, 363, 286, 362, 391, 427, 426, 295, 453, 459,
	460, 549, 0, 465, 630, 631, 632, 474, 479, 480,
	481, 483, 484, 485, 486, 550, 567, 534, 504, 467,
	558, 501, 505, 506, 570, 0, 0, 0, 458, 352,
	353, 0, 331, 279, 280, 625, 317, 382, 572, 605,
	606, 497, 0, 559, 498, 507, 309, 531, 543, 542,
	378, 457, 0, 554, 557, 487, 624, 0, 551, 566,
	628, 565, 621, 388, 0, 407, 563, 510, 0, 555,
	529, 0, 556, 525, 560, 0, 499, 0, 414, 439,
	451, 468, 471, 500, 585, 586, 587, 284, 470, 589,
	590, 591, 592, 593, 594, 595, 588, 442, 532, 509,
	535, 450, 512, 511, 0, 0, 546, 466, 547, 548,
	372, 373, 374, 375, 335, 573, 302, 469, 397, 0,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 538,
	539, 536, 633, 0, 596, 597, 0, 0, 463, 464,
	330, 337, 482, 339, 301, 387, 332, 448, 346, 0,
	475, 540, 476, 599, 602, 600, 601, 379, 342, 343,
	411, 347, 357, 400, 447, 385, 405, 299, 438, 412,
	361, 526, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	580, 579, 578, 577, 576, 575, 574, 0, 0, 523,
	425, 311, 273, 307, 308, 315, 622, 619, 429, 623,
	0, 281, 503, 355, 0, 396, 329, 568, 569, 0,
	0, 229, 230, 231, 232, 233, 234, 235, 236, 274,
	237, 238, 239, 240, 241, 242, 243, 246, 247, 248,
	249, 250, 251, 252, 253, 571, 244, 245, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 0, 0, 0, 275, 276, 277, 278, 0,
	0, 269, 270, 271, 272, 0, 0, 0, 454, 455,
	456, 478, 0, 440, 502, 620, 0, 0, 0, 0,
	0, 0, 0, 552, 564, 598, 0, 608, 609, 611,
	613, 612, 615, 417, 0, 0, 626, 493, 494, 627,
	604, 384, 0, 508, 541, 530, 614, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 324, 0,
	0, 354, 545, 527, 537, 528, 513, 514, 515, 522,
	334, 516, 517, 518, 488, 519, 489, 520, 521, 0,
	544, 495, 413, 368, 562, 561, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3877, 0, 0, 216, 0, 0, 0, 0, 0,
	0, 297, 217, 490, 610, 492, 491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 419,
	436, 298, 409, 449, 303, 416, 293, 383, 406, 0,
	0, 289, 434, 415, 365, 344, 345, 288, 0, 401,
	322, 336, 319, 381, 0, 433, 461, 318, 452, 0,
	444, 291, 0, 443, 380, 430, 435, 366, 360, 0,
	290, 432, 364, 359, 348, 326, 477, 349, 350, 340,
	392, 358, 393, 341, 370, 369, 371, 0, 0, 0,
	0, 0, 472, 473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 603, 0, 0, 607,
	0, 446, 0, 0, 0, 0, 0, 0, 418, 0,
	0, 351, 0, 0, 0, 462, 0, 404, 386, 629,
	0, 0, 402, 356, 431, 394, 437, 420, 445, 398,
	395, 282, 421, 321, 367, 294, 296, 316, 323, 325,
	327, 328, 376, 377, 389, 408, 422, 423, 424, 320,
	304, 403, 305, 338, 306, 283, 312, 310, 313, 410,
	314, 285, 390, 428, 0, 333, 399, 363, 286, 362,
	391, 427, 426, 295, 453, 459, 460, 549, 0, 465,
	630, 631, 632, 474, 479, 480, 481, 483, 484, 485,
	486, 550, 567, 534, 504, 467, 558, 501, 505, 506,
	570, 0, 0, 0, 458, 352, 353, 0, 331, 279,
	280, 625, 317, 382, 572, 605, 606, 497, 0, 559,
	498, 507, 309, 531, 543, 542, 378, 457, 0, 554,
	557, 487, 624, 0, 551, 566, 628, 565, 621, 388,
	0, 407, 563, 510, 0, 555, 529, 0, 556, 525,
	560, 0, 499, 0, 414, 439, 451, 468, 471, 500,
	585, 586, 587, 284, 470, 589, 590, 591, 592, 593,
	594, 595, 588, 442, 532, 509, 535, 450, 512, 511,
	0, 0, 546, 466, 547, 548, 372, 373, 374, 375,
	335, 573, 302, 469, 397, 0, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 538, 539, 536, 633, 0,
	596, 597, 0, 0, 463, 464, 330, 337, 482, 339,
	301, 387, 332, 448, 346, 0, 475, 540, 476, 599,
	602, 600, 601, 379, 342, 343, 411, 347, 357, 400,
	447, 385, 405, 299, 438, 412, 361, 526, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 580, 579, 578, 577,
	576, 575, 574, 0, 0, 523, 425, 311, 273, 307,
	308, 315, 622, 619, 429, 623, 0, 281, 503, 355,
	0, 396, 329, 568, 569, 0, 0, 229, 230, 231,
	232, 233, 234, 235, 236, 274, 237, 238, 239, 240,
	241, 242, 243, 246, 247, 248, 249, 250, 251, 252,
	253, 571, 244, 245, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 0, 0,
	0, 275, 276, 277, 278, 0, 0, 269, 270, 271,
	272, 0, 0, 0, 454, 455, 456, 478, 0, 440,
	502, 620, 0, 0, 0, 0, 0, 0, 0, 552,
	564, 598, 0, 608, 609, 611, 613, 612, 615, 417,
	0, 0, 626, 493, 494, 627, 604, 384, 0, 508,
	541, 530, 614, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 324, 0, 0, 354, 545, 527,
	537, 528, 513, 514, 515, 522, 334, 516, 517, 518,
	488, 519, 489, 520, 521, 0, 544, 495, 413, 368,
	562, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 0, 0, 3653, 0, 0, 0, 297, 217, 490,
	610, 492, 491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 419, 436, 298, 409, 449,
	303, 416, 293, 383, 406, 0, 0, 289, 434, 415,
	365, 344, 345, 288, 0, 401, 322, 336, 319, 381,
	0, 433, 461, 318, 452, 0, 444, 291, 0, 443,
	380, 430, 435, 366, 360, 0, 290, 432, 364, 359,
	348, 326, 477, 349, 350, 340, 392, 358, 393, 341,
	370, 369, 371, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 603, 0, 0, 607, 0, 446, 0, 0,
	0, 0, 0, 0, 418, 0, 0, 351, 0, 0,
	0, 462, 0, 404, 386, 629, 0, 0, 402, 356,
	431, 394, 437, 420, 445, 398, 395, 282, 421, 321,
	367, 294, 296, 316, 323, 325, 327, 328, 376, 377,
	389, 408, 422, 423, 424, 320, 304, 403, 305, 338,
	306, 283, 312, 310, 313, 410, 314, 285, 390, 428,
	0, 333, 399, 363, 286, 362, 391, 427, 426, 295,
	453, 459, 460, 549, 0, 465, 630, 631, 632, 474,
	479, 480, 481, 483, 484, 485, 486, 550, 567, 534,
	504, 467, 558, 501, 505, 506, 570, 0, 0, 0,
	458, 352, 353, 0, 331, 279, 280, 625, 317, 382,
	572, 605, 606, 497, 0, 559, 498, 507, 309, 531,
	543, 542, 378, 457, 0, 554, 557, 487, 624, 0,
	551, 566, 628, 565, 621, 388, 0, 407, 563, 510,
	0, 555, 529, 0, 556, 525, 560, 0, 499, 0,
	414, 439, 451, 468, 471, 500, 585, 586, 587, 284,
	470, 589, 590, 591, 592, 593, 594, 595, 588, 442,
	532, 509, 535, 450, 512, 511, 0, 0, 546, 466,
	547, 548, 372, 373, 374, 375, 335, 573, 302, 469,
	397, 0, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 538, 539, 536, 633, 0, 596, 597, 0, 0,
	463, 464, 330, 337, 482, 339, 301, 387, 332, 448,
	346, 0, 475, 540, 476, 599, 602, 600, 601, 379,
	342, 343, 411, 347, 357, 400, 447, 385, 405, 299,
	438, 412, 361, 526, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 580, 579, 578, 577, 576, 575, 574, 0,
	0, 523, 425, 311, 273, 307, 308, 315, 622, 619,
	429, 623, 0, 281, 503, 355, 0, 396, 329, 568,
	569, 0, 0, 229, 230, 231, 232, 233, 234, 235,
	236, 274, 237, 238, 239, 240, 241, 242, 243, 246,
	247, 248, 249, 250, 251, 252, 253, 571, 244, 245,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 0, 0, 0, 275, 276, 277,
	278, 0, 0, 269, 270, 271, 272, 0, 0, 0,
	454, 455, 456, 478, 0, 440, 502, 620, 0, 0,
	0, 0, 0, 0, 0, 552, 564, 598, 0, 608,
	609, 611, 613, 612, 615, 417, 0, 0, 626, 493,
	494, 627, 604, 384, 0, 508, 541, 530, 614, 496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 354, 545, 527, 537, 528, 513, 514,
	515, 522, 334, 516, 517, 518, 488, 519, 489, 520,
	521, 0, 544, 495, 413, 368, 562, 561, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 0, 0, 297, 217, 490, 610, 492, 491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 419, 436, 298, 409, 449, 303, 416, 293, 383,
	406, 0, 0, 289, 434, 415, 365, 344, 345, 288,
	0, 401, 322, 336, 319, 381, 0, 433, 461, 318,
	452, 0, 444, 291, 0, 443, 380, 430, 435, 366,
	360, 0, 290, 432, 364, 359, 348, 326, 477, 349,
	350, 340, 392, 358, 393, 341, 370, 369, 371, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 603, 0,
	0, 607, 0, 446, 0, 0, 0, 3784, 0, 0,
	418, 0, 0, 351, 0, 0, 0, 462, 0, 404,
	386, 629, 0, 0, 402, 356, 431, 394, 437, 420,
	445, 398, 395, 282, 421, 321, 367, 294, 296, 316,
	323, 325, 327, 328, 376, 377, 389, 408, 422, 423,
	424, 320, 304, 403, 305, 338, 306, 283, 312, 310,
	313, 410, 314, 285, 390, 428, 0, 333, 399, 363,
	286, 362, 391, 427, 426, 295, 453, 459, 460, 549,
	0, 465, 630, 631, 632, 474, 479, 480, 481, 483,
	484, 485, 486, 550, 567, 534, 504, 467, 558, 501,
	505, 506, 570, 0, 0, 0, 458, 352, 353, 0,
	331, 279, 280, 625, 317, 382, 572, 605, 606, 497,
	0, 559, 498, 507, 309, 531, 543, 542, 378, 457,
	0, 554, 557, 487, 624, 0, 551, 566, 628, 565,
	621, 388, 0, 407, 563, 510, 0, 555, 529, 0,
	556, 525, 560, 0, 499, 0, 414, 439, 451, 468,
	471, 500, 585, 586, 587, 284, 470, 589, 590, 591,
	592, 593, 594, 595, 588, 442, 532, 509, 535, 450,
	512, 511, 0, 0, 546, 466, 547, 548, 372, 373,
	374, 375, 335, 573, 302, 469, 397, 0, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 538, 539, 536,
	633, 0, 596, 597, 0, 0, 463, 464, 330, 337,
	482, 339, 301, 387, 332, 448, 346, 0, 475, 540,
	476, 599, 602, 600, 601, 379, 342, 343, 411, 347,
	357, 400, 447, 385, 405, 299, 438, 412, 361, 526,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 580, 579,
	578, 577, 576, 575, 574, 0, 0, 523, 425, 311,
	273, 307, 308, 315, 622, 619, 429, 623, 0, 281,
	503, 355, 0, 396, 329, 568, 569, 0, 0, 229,
	230, 231, 232, 233, 234, 235, 236, 274, 237, 238,
	239, 240, 241, 242, 243, 246, 247, 248, 249, 250,
	251, 252, 253, 571, 244, 245, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	0, 0, 0, 275, 276, 277, 278, 0, 0, 269,
	270, 271, 272, 0, 0, 0, 454, 455, 456, 478,
	0, 440, 502, 620, 0, 0, 0, 0, 0, 0,
	0, 552, 564, 598, 0, 608, 609, 611, 613, 612,
	615, 417, 0, 0, 626, 493, 494, 627, 604, 384,
	0, 508, 541, 530, 614, 496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 354,
	545, 527, 537, 528, 513, 514, 515, 522, 334, 516,
	517, 518, 488, 519, 489, 520, 521, 0, 544, 495,
	413, 368, 562, 561, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3498,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 297,
	217, 490, 610, 492, 491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 300, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 419, 436, 298,
	409, 449, 303, 416, 293, 383, 406, 0, 0, 289,
	434, 415, 365, 344, 345, 288, 0, 401, 322, 336,
	319, 381, 0, 433, 461, 318, 452, 0, 444, 291,
	0, 443, 380, 430, 435, 366, 360, 0, 290, 432,
	364, 359, 348, 326, 477, 349, 350, 340, 392, 358,
	393, 341, 370, 369, 371, 0, 0, 0, 0, 0,
	472, 473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 603, 0, 0, 607, 0, 446,
	0, 0, 0, 0, 0, 0, 418, 0, 0, 351,
	0, 0, 0, 462, 0, 404, 386, 629, 0, 0,
	402, 356, 431, 394, 437, 420, 445, 398, 395, 282,
	421, 321, 367, 294, 296, 316, 323, 325, 327, 328,
	376, 377, 389, 408, 422, 423, 424, 320, 304, 403,
	305, 338, 306, 283, 312, 310, 313, 410, 314, 285,
	390, 428, 0, 333, 399, 363, 286, 362, 391, 427,
	426, 295, 453, 459, 460, 549, 0, 465, 630, 631,
	632, 474, 479, 480, 481, 483, 484, 485, 486, 550,
	567, 534, 504, 467, 558, 501, 505, 506, 570, 0,
	0, 0, 458, 352, 353, 0, 331, 279, 280, 625,
	317, 382, 572, 605, 606, 497, 0, 559, 498, 507,
	309, 531, 543, 542, 378, 457, 0, 554, 557, 487,
	624, 0, 551, 566, 628, 565, 621, 388, 0, 407,
	563, 510, 0, 555, 529, 0, 556, 525, 560, 0,
	499, 0, 414, 439, 451, 468, 471, 500, 585, 586,
	587, 284, 470, 589, 590, 591, 592, 593, 594, 595,
	588, 442, 532, 509, 535, 450, 512, 511, 0, 0,
	546, 466, 547, 548, 372, 373, 374, 375, 335, 573,
	302, 469, 397, 0, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 538, 539, 536, 633, 0, 596, 597,
	0, 0, 463, 464, 330, 337, 482, 339, 301, 387,
	332, 448, 346, 0, 475, 540, 476, 599, 602, 600,
	601, 379, 342, 343, 411, 347, 357, 400, 447, 385,
	405, 299, 438, 412, 361, 526, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 580, 579, 578, 577, 576, 575,
	574, 0, 0, 523, 425, 311, 273, 307, 308, 315,
	622, 619, 429, 623, 0, 281, 503, 355, 0, 396,
	329, 568, 569, 0, 0, 229, 230, 231, 232, 233,
	234, 235, 236, 274, 237, 238, 239, 240, 241, 242,
	243, 246, 247, 248, 249, 250, 251, 252, 253, 571,
	244, 245, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 0, 0, 0, 275,
	276, 277, 278, 0, 0, 269, 270, 271, 272, 0,
	0, 0, 454, 455, 456, 478, 0, 440, 502, 620,
	0, 0, 0, 0, 0, 0, 0, 552, 564, 598,
	0, 608, 609, 611, 613, 612, 615, 417, 0, 0,
	626, 493, 494, 627, 604, 384, 0, 508, 541, 530,
	614, 496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 324, 0, 0, 354, 545, 527, 537, 528,
	513, 514, 515, 522, 334, 516, 517, 518, 488, 519,
	489, 520, 521, 0, 544, 495, 413, 368, 562, 561,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3668, 0, 216, 0,
	0, 0, 0, 0, 0, 297, 217, 490, 610, 492,
	491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	300, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 419, 436, 298, 409, 449, 303, 416,
	293, 383, 406, 0, 0, 289, 434, 415, 365, 344,
	345, 288, 0, 401, 322, 336, 319, 381, 0, 433,
	461, 318, 452, 0, 444, 291, 0, 443, 380, 430,
	435, 366, 360, 0, 290, 432, 364, 359, 348, 326,
	477, 349, 350, 340, 392, 358, 393, 341, 370, 369,
	371, 0, 0, 0, 0, 0, 472, 473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	603, 0, 0, 607, 0, 446, 0, 0, 0, 0,
	0, 0, 418, 0, 0, 351, 0, 0, 0, 462,
	0, 404, 386, 629, 0, 0, 402, 356, 431, 394,
	437, 420, 445, 398, 395, 282, 421, 321, 367, 294,
	296, 316, 323, 325, 327, 328, 376, 377, 389, 408,
	422, 423, 424, 320, 304, 403, 305, 338, 306, 283,
	312, 310, 313, 410, 314, 285, 390, 428, 0, 333,
	399, 363, 286, 362, 391, 427, 426, 295, 453, 459,
	460, 549, 0, 465, 630, 631, 632, 474, 479, 480,
	481, 483, 484, 485, 486, 550, 567, 534, 504, 467,
	558, 501, 505, 506, 570, 0, 0, 0, 458, 352,
	353, 0, 331, 279, 280, 625, 317, 382, 572, 605,
	606, 497, 0, 559, 498, 507, 309, 531, 543, 542,
	378, 457, 0, 554, 557, 487, 624, 0, 551, 566,
	628, 565, 621, 388, 0, 407, 563, 510, 0, 555,
	529, 0, 556, 525, 560, 0, 499, 0, 414, 439,
	451, 468, 471, 500, 585, 586, 587, 284, 470, 589,
	590, 591, 592, 593, 594, 595, 588, 442, 532, 509,
	535, 450, 512, 511, 0, 0, 546, 466, 547, 548,
	372, 373, 374, 375, 335, 573, 302, 469, 397, 0,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 538,
	539, 536, 633, 0, 596, 597, 0, 0, 463, 464,
	330, 337, 482, 339, 301, 387, 332, 448, 346, 0,
	475, 540, 476, 599, 602, 600, 601, 379, 342, 343,
	411, 347, 357, 400, 447, 385, 405, 299, 438, 412,
	361, 526, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	580, 579, 578, 577, 576, 575, 574, 0, 0, 523,
	425, 311, 273, 307, 308, 315, 622, 619, 429, 623,
	0, 281, 503, 355, 0, 396, 329, 568, 569, 0,
	0, 229, 230, 231, 232, 233, 234, 235, 236, 274,
	237, 238, 239, 240, 241, 242, 243, 246, 247, 248,
	249, 250, 251, 252, 253, 571, 244, 245, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 0, 0, 0, 275, 276, 277, 278, 0,
	0, 269, 270, 271, 272, 0, 0, 0, 454, 455,
	456, 478, 0, 440, 502, 620, 0, 0, 0, 0,
	0, 0, 0, 552, 564, 598, 0, 608, 609, 611,
	613, 612, 615, 417, 0, 0, 626, 493, 494, 627,
	604, 384, 0, 508, 541, 530, 614, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 324, 0,
	0, 354, 545, 527, 537, 528, 513, 514, 515, 522,
	334, 516, 517, 518, 488, 519, 489, 520, 521, 0,
	544, 495, 413, 368, 562, 561, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 0,
	0, 297, 217, 490, 610, 492, 491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 419,
	436, 298, 409, 449, 303, 416, 293, 383, 406, 0,
	0, 289, 434, 415, 365, 344, 345, 288, 0, 401,
	322, 336, 319, 381, 0, 433, 461, 318, 452, 0,
	444, 291, 0, 443, 380, 430, 435, 366, 360, 0,
	290, 432, 364, 359, 348, 326, 477, 349, 350, 340,
	392, 358, 393, 341, 370, 369, 371, 0, 0, 0,
	0, 0, 472, 473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 603, 0, 0, 607,
	0, 446, 0, 0, 0, 3585, 0, 0, 418, 0,
	0, 351, 0, 0, 0, 462, 0, 404, 386, 629,
	0, 0, 402, 356, 431, 394, 437, 420, 445, 398,
	395, 282, 421, 321, 367, 294, 296, 316, 323, 325,
	327, 328, 376, 377, 389, 408, 422, 423, 424, 320,
	304, 403, 305, 338, 306, 283, 312, 310, 313, 410,
	314, 285, 390, 428, 0, 333, 399, 363, 286, 362,
	391, 427, 426, 295, 453, 459, 460, 549, 0, 465,
	630, 631, 632, 474, 479, 480, 481, 483, 484, 485,
	486, 550, 567, 534, 504, 467, 558, 501, 505, 506,
	570, 0, 0, 0, 458, 352, 353, 0, 331, 279,
	280, 625, 317, 382, 572, 605, 606, 497, 0, 559,
	498, 507, 309, 531, 543, 542, 378, 457, 0, 554,
	557, 487, 624, 0, 551, 566, 628, 565, 621, 388,
	0, 407, 563, 510, 0, 555, 529, 0, 556, 525,
	560, 0, 499, 0, 414, 439, 451, 468, 471, 500,
	585, 586, 587, 284, 470, 589, 590, 591, 592, 593,
	594, 595, 588, 442, 532, 509, 535, 450, 512, 511,
	0, 0, 546, 466, 547, 548, 372, 373, 374, 375,
	335, 573, 302, 469, 397, 0, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 538, 539, 536, 633, 0,
	596, 597, 0, 0, 463, 464, 330, 337, 482, 339,
	301, 387, 332, 448, 346, 0, 475, 540, 476, 599,
	602, 600, 601, 379, 342, 343, 411, 347, 357, 400,
	447, 385, 405, 299, 438, 412, 361, 526, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 580, 579, 578, 577,
	576, 575, 574, 0, 0, 523, 425, 311, 273, 307,
	308, 315, 622, 619, 429, 623, 0, 281, 503, 355,
	0, 396, 329, 568, 569, 0, 0, 229, 230, 231,
	232, 233, 234, 235, 236, 274, 237, 238, 239, 240,
	241, 242, 243, 246, 247, 248, 249, 250, 251, 252,
	253, 571, 244, 245, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 0, 0,
	0, 275, 276, 277, 278, 0, 0, 269, 270, 271,
	272, 0, 0, 0, 454, 455, 456, 478, 0, 440,
	502, 620, 0, 0, 0, 0, 0, 0, 0, 552,
	564, 598, 0, 608, 609, 611, 613, 612, 615, 417,
	0, 0, 626, 493, 494, 627, 604, 384, 0, 508,
	541, 530, 614, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 324, 0, 0, 354, 545, 527,
	537, 528, 513, 514, 515, 522, 334, 516, 517, 518,
	488, 519, 489, 520, 521, 0, 544, 495, 413, 368,
	562, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 0, 0, 3105, 0, 0, 0, 297, 217, 490,
	610, 492, 491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 419, 436, 298, 409, 449,
	303, 416, 293, 383, 406, 0, 0, 289, 434, 415,
	365, 344, 345, 288, 0, 401, 322, 336, 319, 381,
	0, 433, 461, 318, 452, 0, 444, 291, 0, 443,
	380, 430, 435, 366, 360, 0, 290, 432, 364, 359,
	348, 326, 477, 349, 350, 340, 392, 358, 393, 341,
	370, 369, 371, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 603, 0, 0, 607, 0, 446, 0, 0,
	0, 0, 0, 0, 418, 0, 0, 351, 0, 0,
	0, 462, 0, 404, 386, 629, 0, 0, 402, 356,
	431, 394, 437, 420, 445, 398, 395, 282, 421, 321,
	367, 294, 296, 316, 323, 325, 327, 328, 376, 377,
	389, 408, 422, 423, 424, 320, 304, 403, 305, 338,
	306, 283, 312, 310, 313, 410, 314, 285, 390, 428,
	0, 333, 399, 363, 286, 362, 391, 427, 426, 295,
	453, 459, 460, 549, 0, 465, 630, 631, 632, 474,
	479, 480, 481, 483, 484, 485, 486, 550, 567, 534,
	504, 467, 558, 501, 505, 506, 570, 0, 0, 0,
	458, 352, 353, 0, 331, 279, 280, 625, 317, 382,
	572, 605, 606, 497, 0, 559, 498, 507, 309, 531,
	543, 542, 378, 457, 0, 554, 557, 487, 624, 0,
	551, 566, 628, 565, 621, 388, 0, 407, 563, 510,
	0, 555, 529, 0, 556, 525, 560, 0, 499, 0,
	414, 439, 451, 468, 471, 500, 585, 586, 587, 284,
	470, 589, 590, 591, 592, 593, 594, 595, 588, 442,
	532, 509, 535, 450, 512, 511, 0, 0, 546, 466,
	547, 548, 372, 373, 374, 375, 335, 573, 302, 469,
	397, 0, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 538, 539, 536, 633, 0, 596, 597, 0, 0,
	463, 464, 330, 337, 482, 339, 301, 387, 332, 448,
	346, 0, 475, 540, 476, 599, 602, 600, 601, 379,
	342, 343, 411, 347, 357, 400, 447, 385, 405, 299,
	438, 412, 361, 526, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 580, 579, 578, 577, 576, 575, 574, 0,
	0, 523, 425, 311, 273, 307, 308, 315, 622, 619,
	429, 623, 0, 281, 503, 355, 0, 396, 329, 568,
	569, 0, 0, 229, 230, 231, 232, 233, 234, 235,
	236, 274, 237, 238, 239, 240, 241, 242, 243, 246,
	247, 248, 249, 250, 251, 252, 253, 571, 244, 245,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 0, 0, 0, 275, 276, 277,
	278, 0, 0, 269, 270, 271, 272, 0, 0, 0,
	454, 455, 456, 478, 0, 440, 502, 620, 0, 0,
	0, 0, 0, 0, 0, 552, 564, 598, 0, 608,
	609, 611, 613, 612, 615, 417, 0, 0, 626, 493,
	494, 627, 604, 384, 0, 508, 541, 530, 614, 496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 354, 545, 527, 537, 528, 513, 514,
	515, 522, 334, 516, 517, 518, 488, 519, 489, 520,
	521, 0, 544, 495, 413, 368, 562, 561, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 0, 0, 297, 217, 490, 610, 492, 491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 419, 436, 298, 409, 449, 303, 416, 293, 383,
	406, 0, 0, 289, 434, 415, 365, 344, 345, 288,
	0, 401, 322, 336, 319, 381, 0, 433, 461, 318,
	452, 0, 444, 291, 0, 443, 380, 430, 435, 366,
	360, 0, 290, 432, 364, 359, 348, 326, 477, 349,
	350, 340, 392, 358, 393, 341, 370, 369, 371, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 603, 0,
	0, 607, 0, 446, 0, 0, 0, 0, 0, 0,
	418, 0, 0, 351, 0, 0, 0, 462, 0, 404,
	386, 629, 0, 0, 402, 356, 431, 394, 437, 420,
	445, 398, 395, 282, 421, 321, 367, 294, 296, 316,
	323, 325, 327, 328, 376, 377, 389, 408, 422, 423,
	424, 320, 304, 403, 305, 338, 306, 283, 312, 310,
	313, 410, 314, 285, 390, 428, 0, 333, 399, 363,
	286, 362, 391, 427, 426, 295, 453, 459, 460, 549,
	0, 465, 630, 631, 632, 474, 479, 480, 481, 483,
	484, 485, 486, 550, 567, 534, 504, 467, 558, 501,
	505, 506, 570, 0, 0, 0, 458, 352, 353, 0,
	331, 279, 280, 625, 317, 382, 572, 605, 606, 497,
	0, 559, 498, 507, 309, 531, 543, 542, 378, 457,
	0, 554, 557, 487, 624, 0, 551, 566, 628, 565,
	621, 388, 0, 407, 563, 510, 0, 555, 529, 0,
	556, 525, 560, 0, 499, 0, 414, 439, 451, 468,
	471, 500, 585, 586, 587, 284, 470, 589, 590, 591,
	592, 593, 594, 595, 588, 442, 532, 509, 535, 450,
	512, 511, 0, 0, 546, 466, 547, 548, 372, 373,
	374, 375, 335, 573, 302, 469, 397, 0, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 538, 539, 536,
	633, 0, 596, 597, 0, 0, 463, 464, 330, 337,
	482, 339, 301, 387, 332, 448, 346, 0, 475, 540,
	476, 599, 602, 600, 601, 379, 342, 343, 411, 347,
	357, 400, 447, 385, 405, 299, 438, 412, 361, 526,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 580, 579,
	578, 577, 576, 575, 574, 0, 0, 523, 425, 311,
	273, 307, 308, 315, 622, 619, 429, 623, 0, 281,
	503, 355, 0, 396, 329, 568, 569, 0, 0, 229,
	230, 231, 232, 233, 234, 235, 236, 274, 237, 238,
	239, 240, 241, 242, 243, 246, 247, 248, 249, 250,
	251, 252, 253, 571, 244, 245, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	0, 0, 0, 275, 276, 277, 278, 0, 0, 269,
	270, 271, 272, 0, 0, 0, 454, 455, 456, 478,
	0, 440, 502, 620, 0, 0, 0, 0, 0, 0,
	0, 552, 564, 598, 0, 608, 609, 611, 613, 612,
	615, 417, 0, 0, 626, 493, 494, 627, 604, 384,
	0, 508, 541, 530, 614, 496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 354,
	545, 527, 537, 528, 513, 514, 515, 522, 334, 516,
	517, 518, 488, 519, 489, 520, 521, 0, 544, 495,
	413, 368, 562, 561, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1987,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 297,
	217, 490, 610, 492, 491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 300, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 419, 436, 298,
	409, 449, 303, 416, 293, 383, 406, 0, 0, 289,
	434, 415, 365, 344, 345, 288, 0, 401, 322, 336,
	319, 381, 0, 433, 461, 318, 452, 0, 444, 291,
	0, 443, 380, 430, 435, 366, 360, 0, 290, 432,
	364, 359, 348, 326, 477, 349, 350, 340, 392, 358,
	393, 341, 370, 369, 371, 0, 0, 0, 0, 0,
	472, 473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 603, 0, 0, 607, 0, 446,
	0, 0, 0, 0, 0, 0, 418, 0, 0, 351,
	0, 0, 0, 462, 0, 404, 386, 629, 0, 0,
	402, 356, 431, 394, 437, 420, 445, 398, 395, 282,
	421, 321, 367, 294, 296, 316, 323, 325, 327, 328,
	376, 377, 389, 408, 422, 423, 424, 320, 304, 403,
	305, 338, 306, 283, 312, 310, 313, 410, 314, 285,
	390, 428, 0, 333, 399, 363, 286, 362, 391, 427,
	426, 295, 453, 459, 460, 549, 0, 465, 630, 631,
	632, 474, 479, 480, 481, 483, 484, 485, 486, 550,
	567, 534, 504, 467, 558, 501, 505, 506, 570, 0,
	0, 0, 458, 352, 353, 0, 331, 279, 280, 625,
	317, 382, 572, 605, 606, 497, 0, 559, 498, 507,
	309, 531, 543, 542, 378, 457, 0, 554, 557, 487,
	624, 0, 551, 566, 628, 565, 621, 388, 0, 407,
	563, 510, 0, 555, 529, 0, 556, 525, 560, 0,
	499, 0, 414, 439, 451, 468, 471, 500, 585, 586,
	587, 284, 470, 589, 590, 591, 592, 593, 594, 595,
	588, 442, 532, 509, 535, 450, 512, 511, 0, 0,
	546, 466, 547, 548, 372, 373, 374, 375, 335, 573,
	302, 469, 397, 0, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 538, 539, 536, 633, 0, 596, 597,
	0, 0, 463, 464, 330, 337, 482, 339, 301, 387,
	332, 448, 346, 0, 475, 540, 476, 599, 602, 600,
	601, 379, 342, 343, 411, 347, 357, 400, 447, 385,
	405, 299, 438, 412, 361, 526, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 580, 579, 578, 577, 576, 575,
	574, 0, 0, 523, 425, 311, 273, 307, 308, 315,
	622, 619, 429, 623, 0, 281, 503, 355, 0, 396,
	329, 568, 569, 0, 0, 229, 230, 231, 232, 233,
	234, 235, 236, 274, 237, 238, 239, 240, 241, 242,
	243, 246, 247, 248, 249, 250, 251, 252, 253, 571,
	244, 245, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 0, 0, 0, 275,
	276, 277, 278, 0, 0, 269, 270, 271, 272, 0,
	0, 0, 454, 455, 456, 478, 0, 440, 502, 620,
	0, 0, 0, 0, 0, 0, 0, 552, 564, 598,
	0, 608, 609, 611, 613, 612, 615, 417, 0, 0,
	626, 493, 494, 627, 604, 384, 0, 508, 541, 530,
	614, 496, 0, 0, 3309, 0, 0, 0, 0, 0,
	0, 0, 324, 0, 0, 354, 545, 527, 537, 528,
	513, 514, 515, 522, 334, 516, 517, 518, 488, 519,
	489, 520, 521, 0, 544, 495, 413, 368, 562, 561,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 0, 0, 297, 217, 490, 610, 492,
	491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	300, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 419, 436, 298, 409, 449, 303, 416,
	293, 383, 406, 0, 0, 289, 434, 415, 365, 344,
	345, 288, 0, 401, 322, 336, 319, 381, 0, 433,
	461, 318, 452, 0, 444, 291, 0, 443, 380, 430,
	435, 366, 360, 0, 290, 432, 364, 359, 348, 326,
	477, 349, 350, 340, 392, 358, 393, 341, 370, 369,
	371, 0, 0, 0, 0, 0, 472, 473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	603, 0, 0, 607, 0, 446, 0, 0, 0, 0,
	0, 0, 418, 0, 0, 351, 0, 0, 0, 462,
	0, 404, 386, 629, 0, 0, 402, 356, 431, 394,
	437, 420, 445, 398, 395, 282, 421, 321, 367, 294,
	296, 316, 323, 325, 327, 328, 376, 377, 389, 408,
	422, 423, 424, 320, 304, 403, 305, 338, 306, 283,
	312, 310, 313, 410, 314, 285, 390, 428, 0, 333,
	399, 363, 286, 362, 391, 427, 426, 295, 453, 459,
	460, 549, 0, 465, 630, 631, 632, 474, 479, 480,
	481, 483, 484, 485, 486, 550, 567, 534, 504, 467,
	558, 501, 505, 506, 570, 0, 0, 0, 458, 352,
	353, 0, 331, 279, 280, 625, 317, 382, 572, 605,
	606, 497, 0, 559, 498, 507, 309, 531, 543, 542,
	378, 457, 0, 554, 557, 487, 624, 0, 551, 566,
	628, 565, 621, 388, 0, 407, 563, 510, 0, 555,
	529, 0, 556, 525, 560, 0, 499, 0, 414, 439,
	451, 468, 471, 500, 585, 586, 587, 284, 470, 589,
	590, 591, 592, 593, 594, 595, 588, 442, 532, 509,
	535, 450, 512, 511, 0, 0, 546, 466, 547, 548,
	372, 373, 374, 375, 335, 573, 302, 469, 397, 0,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 538,
	539, 536, 633, 0, 596, 597, 0, 0, 463, 464,
	330, 337, 482, 339, 301, 387, 332, 448, 346, 0,
	475, 540, 476, 599, 602, 600, 601, 379, 342, 343,
	411, 347, 357, 400, 447, 385, 405, 299, 438, 412,
	361, 526, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	580, 579, 578, 577, 576, 575, 574, 0, 0, 523,
	425, 311, 273, 307, 308, 315, 622, 619, 429, 623,
	0, 281, 503, 355, 0, 396, 329, 568, 569, 0,
	0, 229, 230, 231, 232, 233, 234, 235, 236, 274,
	237, 238, 239, 240, 241, 242, 243, 246, 247, 248,
	249, 250, 251, 252, 253, 571, 244, 245, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 0, 0, 0, 275, 276, 277, 278, 0,
	0, 269, 270, 271, 272, 0, 0, 0, 454, 455,
	456, 478, 0, 440, 502, 620, 0, 0, 0, 0,
	0, 0, 0, 552, 564, 598, 0, 608, 609, 611,
	613, 612, 615, 417, 0, 0, 626, 493, 494, 627,
	604, 384, 0, 508, 541, 530, 614, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 324, 0,
	0, 354, 545, 527, 537, 528, 513, 514, 515, 522,
	334, 516, 517, 518, 488, 519, 489, 520, 521, 0,
	544, 495, 413, 368, 562, 561, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 0,
	0, 297, 217, 490, 610, 492, 491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 419,
	436, 298, 409, 449, 303, 416, 293, 383, 406, 0,
	0, 289, 434, 415, 365, 344, 345, 288, 0, 401,
	322, 336, 319, 381, 0, 433, 461, 318, 452, 0,
	444, 291, 0, 443, 380, 430, 435, 366, 360, 0,
	290, 432, 364, 359, 348, 326, 477, 349, 350, 340,
	392, 358, 393, 341, 370, 369, 371, 0, 0, 0,
	0, 0, 472, 473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 603, 0, 0, 607,
	0, 446, 0, 0, 0, 0, 0, 0, 418, 0,
	0, 351, 0, 0, 0, 462, 0, 404, 386, 629,
	0, 0, 402, 356, 431, 394, 437, 420, 445, 398,
	395, 282, 421, 321, 367, 294, 296, 316, 323, 325,
	327, 328, 376, 377, 389, 408, 422, 423, 424, 320,
	304, 403, 305, 338, 306, 283, 312, 310, 313, 410,
	314, 285, 390, 428, 0, 333, 399, 363, 286, 362,
	391, 427, 426, 295, 453, 459, 460, 549, 0, 465,
	630, 631, 632, 474, 479, 480, 481, 483, 484, 485,
	486, 550, 567, 534, 504, 467, 558, 501, 505, 506,
	570, 0, 0, 0, 458, 352, 353, 0, 331, 279,
	280, 625, 317, 382, 572, 605, 606, 497, 0, 559,
	498, 507, 309, 531, 543, 542, 378, 457, 0, 554,
	557, 487, 624, 0, 551, 566, 628, 565, 621, 388,
	0, 407, 563, 510, 0, 555, 529, 0, 556, 525,
	560, 0, 499, 0, 414, 439, 451, 468, 471, 500,
	585, 586, 587, 284, 470, 589, 590, 591, 592, 593,
	594, 595, 588, 442, 532, 509, 535, 450, 512, 511,
	0, 0, 546, 466, 547, 548, 372, 373, 374, 375,
	335, 573, 302, 469, 397, 0, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 538, 539, 536, 633, 0,
	596, 597, 0, 0, 463, 464, 330, 337, 482, 339,
	301, 387, 332, 448, 346, 0, 475, 540, 476, 599,
	602, 600, 601, 379, 342, 343, 411, 347, 357, 400,
	447, 385, 405, 299, 438, 412, 361, 526, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 580, 579, 578, 577,
	576, 575, 574, 0, 0, 523, 425, 311, 273, 307,
	308, 315, 622, 619, 429, 623, 0, 281, 503, 355,
	0, 396, 329, 568, 569, 0, 0, 229, 230, 231,
	232, 233, 234, 235, 236, 274, 237, 238, 239, 240,
	241, 242, 243, 246, 247, 248, 249, 250, 251, 252,
	253, 571, 244, 245, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 0, 0,
	0, 275, 276, 277, 278, 0, 0, 269, 270, 271,
	272, 0, 0, 0, 454, 455, 456, 478, 0, 440,
	502, 620, 0, 0, 0, 0, 0, 0, 0, 552,
	564, 598, 0, 608, 609, 611, 613, 612, 615, 417,
	0, 0, 626, 493, 494, 627, 604, 384, 0, 508,
	541, 530, 614, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 324, 0, 0, 354, 545, 527,
	537, 528, 513, 514, 515, 522, 334, 516, 517, 518,
	488, 519, 489, 520, 521, 0, 544, 495, 413, 368,
	562, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 0, 0, 297, 217, 490,
	610, 492, 491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 419, 436, 298, 409, 449,
	303, 416, 293, 383, 406, 0, 0, 289, 434, 415,
	365, 344, 345, 288, 0, 401, 322, 336, 319, 381,
	0, 433, 461, 318, 452, 0, 444, 291, 0, 443,
	380, 430, 435, 366, 360, 0, 290, 432, 364, 359,
	348, 326, 477, 349, 350, 340, 392, 358, 393, 341,
	370, 369, 371, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 603, 0, 0, 607, 0, 446, 0, 0,
	0, 0, 0, 0, 418, 0, 0, 351, 0, 0,
	0, 462, 0, 404, 386, 629, 0, 0, 402, 356,
	431, 394, 437, 420, 445, 398, 395, 282, 421, 321,
	367, 294, 296, 316, 323, 325, 327, 328, 376, 377,
	389, 408, 422, 423, 424, 320, 304, 403, 305, 338,
	306, 283, 312, 310, 313, 410, 314, 285, 390, 428,
	0, 333, 399, 363, 286, 362, 391, 427, 426, 295,
	453, 459, 460, 549, 0, 465, 630, 631, 632, 474,
	479, 480, 481, 483, 484, 485, 486, 550, 567, 534,
	504, 467, 558, 501, 505, 506, 570, 0, 0, 0,
	458, 352, 353, 0, 331, 279, 280, 625, 317, 382,
	572, 605, 606, 497, 0, 559, 498, 507, 309, 531,
	543, 542, 378, 457, 0, 554, 557, 487, 624, 0,
	551, 566, 628, 565, 621, 388, 0, 407, 563, 510,
	0, 555, 529, 0, 556, 525, 560, 0, 499, 0,
	414, 439, 451, 468, 471, 500, 585, 586, 587, 284,
	470, 589, 590, 591, 592, 593, 594, 595, 588, 442,
	532, 509, 535, 450, 512, 511, 0, 0, 546, 466,
	547, 548, 372, 373, 374, 375, 335, 573, 302, 469,
	397, 0, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 538, 539, 536, 633, 0, 596, 597, 0, 0,
	463, 464, 330, 337, 482, 339, 301, 387, 332, 448,
	346, 0, 475, 540, 476, 599, 602, 600, 601, 379,
	342, 343, 411, 347, 357, 400, 447, 385, 405, 299,
	438, 412, 361, 526, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 580, 579, 578, 577, 576, 575, 574, 0,
	0, 523, 425, 311, 273, 307, 308, 315, 622, 619,
	429, 623, 0, 281, 503, 355, 0, 396, 329, 568,
	569, 0, 0, 229, 230, 231, 232, 233, 234, 235,
	236, 274, 237, 238, 239, 240, 241, 242, 243, 246,
	247, 248, 249, 250, 251, 252, 253, 571, 244, 245,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 0, 0, 0, 275, 276, 277,
	278, 0, 0, 269, 270, 271, 272, 0, 0, 0,
	454, 455, 456, 478, 0, 440, 502, 620, 0, 0,
	0, 0, 0, 0, 0, 552, 564, 598, 0, 608,
	609, 611, 613, 612, 615, 417, 0, 0, 626, 493,
	494, 627, 604, 384, 0, 508, 541, 530, 614, 496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 354, 545, 527, 537, 528, 513, 514,
	515, 522, 334, 516, 517, 518, 488, 519, 489, 520,
	521, 0, 544, 495, 413, 368, 562, 561, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 0, 0, 1488,
	0, 0, 0, 297, 217, 490, 610, 492, 491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 419, 436, 298, 409, 449, 303, 416, 293, 383,
	406, 0, 0, 289, 434, 415, 365, 344, 345, 288,
	0, 401, 322, 336, 319, 381, 0, 433, 461, 318,
	452, 0, 444, 291, 0, 443, 380, 430, 435, 366,
	360, 0, 290, 432, 364, 359, 348, 326, 477, 349,
	350, 340, 392, 358, 393, 341, 370, 369, 371, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 603, 0,
	0, 607, 0, 446, 0, 0, 0, 0, 0, 0,
	418, 0, 0, 351, 0, 0, 0, 462, 0, 404,
	386, 629, 0, 0, 402, 356, 431, 394, 437, 420,
	445, 398, 395, 282, 421, 321, 367, 294, 296, 316,
	323, 325, 327, 328, 376, 377, 389, 408, 422, 423,
	424, 320, 304, 403, 305, 338, 306, 283, 312, 310,
	313, 410, 314, 285, 390, 428, 0, 333, 399, 363,
	286, 362, 391, 427, 426, 295, 453, 459, 460, 549,
	0, 465, 630, 631, 632, 474, 479, 480, 481, 483,
	484, 485, 486, 550, 567, 534, 504, 467, 558, 501,
	505, 506, 570, 0, 0, 0, 458, 352, 353, 0,
	331, 279, 280, 625, 317, 382, 572, 605, 606, 497,
	0, 559, 498, 507, 309, 531, 543, 542, 378, 457,
	0, 554, 557, 487, 624, 0, 551, 566, 628, 565,
	621, 388, 0, 407, 563, 510, 0, 555, 529, 0,
	556, 525, 560, 0, 499, 0, 414, 439, 451, 468,
	471, 500, 585, 586, 587, 284, 470, 589, 590, 591,
	592, 593, 594, 595, 588, 442, 532, 509, 535, 450,
	512, 511, 0, 0, 546, 466, 547, 548, 372, 373,
	374, 375, 335, 573, 302, 469, 397, 0, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 538, 539, 536,
	633, 0, 596, 597, 0, 0, 463, 464, 330, 337,
	482, 339, 301, 387, 332, 448, 346, 0, 475, 540,
	476, 599, 602, 600, 601, 379, 342, 343, 411, 347,
	357, 400, 447, 385, 405, 299, 438, 412, 361, 526,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 580, 579,
	578, 577, 576, 575, 574, 0, 0, 523, 425, 311,
	273, 307, 308, 315, 622, 619, 429, 623, 0, 281,
	503, 355, 0, 396, 329, 568, 569, 0, 0, 229,
	230, 231, 232, 233, 234, 235, 236, 274, 237, 238,
	239, 240, 241, 242, 243, 246, 247, 248, 249, 250,
	251, 252, 253, 571, 244, 245, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	0, 0, 0, 275, 276, 277, 278, 0, 0, 269,
	270, 271, 272, 0, 0, 0, 454, 455, 456, 478,
	0, 440, 502, 620, 0, 0, 0, 0, 0, 0,
	0, 552, 564, 598, 0, 608, 609, 611, 613, 612,
	615, 417, 0, 0, 626, 493, 494, 627, 604, 384,
	0, 508, 541, 530, 614, 496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 354,
	545, 527, 537, 528, 513, 514, 515, 522, 334, 516,
	517, 518, 488, 519, 489, 520, 521, 0, 544, 495,
	413, 368, 562, 561, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 0, 0, 2432, 0, 0, 0, 297,
	217, 490, 610, 492, 491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 300, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 419, 436, 298,
	409, 449, 303, 416, 293, 383, 406, 0, 0, 289,
	434, 415, 365, 344, 345, 288, 0, 401, 322, 336,
	319, 381, 0, 433, 461, 318, 452, 0, 444, 291,
	0, 443, 380, 430, 435, 366, 360, 0, 290, 432,
	364, 359, 348, 326, 477, 349, 350, 340, 392, 358,
	393, 341, 370, 369, 371, 0, 0, 0, 0, 0,
	472, 473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 603, 0, 0, 607, 0, 446,
	0, 0, 0, 0, 0, 0, 418, 0, 0, 351,
	0, 0, 0, 462, 0, 404, 386, 629, 0, 0,
	402, 356, 431, 394, 437, 420, 445, 398, 395, 282,
	421, 321, 367, 294, 296, 316, 323, 325, 327, 328,
	376, 377, 389, 408, 422, 423, 424, 320, 304, 403,
	305, 338, 306, 283, 312, 310, 313, 410, 314, 285,
	390, 428, 0, 333, 399, 363, 286, 362, 391, 427,
	426, 295, 453, 459, 460, 549, 0, 465, 630, 631,
	632, 474, 479, 480, 481, 483, 484, 485, 486, 550,
	567, 534, 504, 467, 558, 501, 505, 506, 570, 0,
	0, 0, 458, 352, 353, 0, 331, 279, 280, 625,
	317, 382, 572, 605, 606, 497, 0, 559, 498, 507,
	309, 531, 543, 542, 378, 457, 0, 554, 557, 487,
	624, 0, 551, 566, 628, 565, 621, 388, 0, 407,
	563, 510, 0, 555, 529, 0, 556, 525, 560, 0,
	499, 0, 414, 439, 451, 468, 471, 500, 585, 586,
	587, 284, 470, 589, 590, 591, 592, 593, 594, 595,
	588, 442, 532, 509, 535, 450, 512, 511, 0, 0,
	546, 466, 547, 548, 372, 373, 374, 375, 335, 573,
	302, 469, 397, 0, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 538, 539, 536, 633, 0, 596, 597,
	0, 0, 463, 464, 330, 337, 482, 339, 301, 387,
	332, 448, 346, 0, 475, 540, 476, 599, 602, 600,
	601, 379, 342, 343, 411, 347, 357, 400, 447, 385,
	405, 299, 438, 412, 361, 526, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 580, 579, 578, 577, 576, 575,
	574, 0, 0, 523, 425, 311, 273, 307, 308, 315,
	622, 619, 429, 623, 0, 281, 503, 355, 0, 396,
	329, 568, 569, 0, 0, 229, 230, 231, 232, 233,
	234, 235, 236, 274, 237, 238, 239, 240, 241, 242,
	243, 246, 247, 248, 249, 250, 251, 252, 253, 571,
	244, 245, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 0, 0, 0, 275,
	276, 277, 278, 0, 0, 269, 270, 271, 272, 0,
	0, 0, 454, 455, 456, 478, 0, 440, 502, 620,
	0, 0, 0, 0, 0, 0, 0, 552, 564, 598,
	0, 608, 609, 611, 613, 612, 615, 417, 0, 0,
	626, 493, 494, 627, 604, 384, 0, 508, 541, 530,
	614, 496, 0, 0, 2789, 0, 0, 0, 0, 0,
	0, 0, 324, 0, 0, 354, 545, 527, 537, 528,
	513, 514, 515, 522, 334, 516, 517, 518, 488, 519,
	489, 520, 521, 0, 544, 495, 413, 368, 562, 561,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 0, 0, 297, 217, 490, 610, 492,
	491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	300, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 419, 436, 298, 409, 449, 303, 416,
	293, 383, 406, 0, 0, 289, 434, 415, 365, 344,
	345, 288, 0, 401, 322, 336, 319, 381, 0, 433,
	461, 318, 452, 0, 444, 291, 0, 443, 380, 430,
	435, 366, 360, 0, 290, 432, 364, 359, 348, 326,
	477, 349, 350, 340, 392, 358, 393, 341, 370, 369,
	371, 0, 0, 0, 0, 0, 472, 473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	603, 0, 0, 607, 0, 446, 0, 0, 0, 0,
	0, 0, 418, 0, 0, 351, 0, 0, 0, 462,
	0, 404, 386, 629, 0, 0, 402, 356, 431, 394,
	437, 420, 445, 398, 395, 282, 421, 321, 367, 294,
	296, 316, 323, 325, 327, 328, 376, 377, 389, 408,
	422, 423, 424, 320, 304, 403, 305, 338, 306, 283,
	312, 310, 313, 410, 314, 285, 390, 428, 0, 333,
	399, 363, 286, 362, 391, 427, 426, 295, 453, 459,
	460, 549, 0, 465, 630, 631, 632, 474, 479, 480,
	481, 483, 484, 485, 486, 550, 567, 534, 504, 467,
	558, 501, 505, 506, 570, 0, 0, 0, 458, 352,
	353, 0, 331, 279, 280, 625, 317, 382, 572, 605,
	606, 497, 0, 559, 498, 507, 309, 531, 543, 542,
	378, 457, 0, 554, 557, 487, 624, 0, 551, 566,
	628, 565, 621, 388, 0, 407, 563, 510, 0, 555,
	529, 0, 556, 525, 560, 0, 499, 0, 414, 439,
	451, 468, 471, 500, 585, 586, 587, 284, 470, 589,
	590, 591, 592, 593, 594, 595, 588, 442, 532, 509,
	535, 450, 512, 511, 0, 0, 546, 466, 547, 548,
	372, 373, 374, 375, 335, 573, 302, 469, 397, 0,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 538,
	539, 536, 633, 0, 596, 597, 0, 0, 463, 464,
	330, 337, 482, 339, 301, 387, 332, 448, 346, 0,
	475, 540, 476, 599, 602, 600, 601, 379, 342, 343,
	411, 347, 357, 400, 447, 385, 405, 299, 438, 412,
	361, 526, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	580, 579, 578, 577, 576, 575, 574, 0, 0, 523,
	425, 311, 273, 307, 308, 315, 622, 619, 429, 623,
	0, 281, 503, 355, 0, 396, 329, 568, 569, 0,
	0, 229, 230, 231, 232, 233, 234, 235, 236, 274,
	237, 238, 239, 240, 241, 242, 243, 246, 247, 248,
	249, 250, 251, 252, 253, 571, 244, 245, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 0, 0, 0, 275, 276, 277, 278, 0,
	0, 269, 270, 271, 272, 0, 0, 0, 454, 455,
	456, 478, 0, 440, 502, 620, 0, 0, 0, 0,
	0, 0, 0, 552, 564, 598, 0, 608, 609, 611,
	613, 612, 615, 417, 0, 0, 626, 493, 494, 627,
	604, 384, 0, 508, 541, 530, 614, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 324, 0,
	0, 354, 545, 527, 537, 528, 513, 514, 515, 522,
	334, 516, 517, 518, 488, 519, 489, 520, 521, 0,
	544, 495, 413, 368, 562, 561, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 0,
	0, 297, 217, 490, 610, 492, 491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 419,
	436, 298, 409, 449, 303, 416, 293, 383, 406, 0,
	0, 289, 434, 415, 365, 344, 345, 288, 0, 401,
	322, 336, 319, 381, 0, 433, 461, 318, 452, 0,
	444, 291, 0, 443, 380, 430, 435, 366, 360, 0,
	290, 432, 364, 359, 348, 326, 477, 349, 350, 340,
	392, 358, 393, 341, 370, 369, 371, 0, 0, 0,
	0, 0, 472, 473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 603, 0, 0, 607,
	0, 446, 0, 0, 0, 0, 0, 0, 418, 0,
	0, 351, 0, 0, 0, 462, 0, 404, 386, 629,
	0, 0, 402, 356, 431, 394, 437, 420, 445, 398,
	395, 282, 421, 321, 367, 294, 296, 316, 323, 325,
	327, 328, 376, 377, 389, 408, 422, 423, 424, 320,
	304, 403, 305, 338, 306, 283, 312, 310, 313, 410,
	314, 285, 390, 428, 0, 333, 399, 363, 286, 362,
	391, 427, 426, 295, 453, 459, 460, 549, 0, 465,
	630, 631, 632, 474, 479, 480, 481, 483, 484, 485,
	486, 550, 567, 534, 504, 467, 558, 501, 505, 506,
	570, 0, 0, 0, 458, 352, 353, 0, 331, 279,
	280, 625, 317, 382, 572, 605, 606, 497, 0, 559,
	498, 507, 309, 531, 543, 542, 378, 457, 0, 554,
	557, 487, 624, 0, 551, 566, 628, 565, 621, 388,
	0, 407, 563, 510, 0, 555, 529, 0, 556, 525,
	560, 0, 499, 0, 414, 439, 451, 468, 471, 500,
	585, 586, 587, 284, 470, 589, 590, 591, 592, 593,
	594, 595, 588, 442, 532, 509, 535, 450, 512, 511,
	0, 0, 546, 466, 547, 548, 372, 373, 374, 375,
	335, 573, 302, 469, 397, 0, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 538, 539, 536, 633, 0,
	596, 597, 0, 0, 463, 464, 330, 337, 482, 339,
	301, 387, 332, 448, 346, 0, 475, 540, 476, 599,
	602, 600, 601, 379, 342, 343, 411, 347, 357, 400,
	447, 385, 405, 299, 438, 412, 361, 526, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 580, 579, 578, 577,
	576, 575, 574, 0, 0, 523, 425, 311, 273, 307,
	308, 315, 622, 619, 429, 623, 0, 281, 503, 355,
	0, 396, 329, 568, 569, 0, 0, 229, 230, 231,
	232, 233, 234, 235, 236, 274, 237, 238, 239, 240,
	241, 242, 243, 246, 247, 248, 249, 250, 251, 252,
	253, 571, 244, 245, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 0, 0,
	0, 275, 276, 277, 278, 0, 0, 269, 270, 271,
	272, 0, 0, 0, 454, 455, 456, 478, 0, 440,
	502, 620, 0, 0, 0, 0, 0, 0, 0, 552,
	564, 598, 0, 608, 609, 611, 613, 612, 615, 417,
	0, 0, 626, 493, 494, 627, 604, 384, 0, 508,
	541, 530, 614, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 324, 0, 0, 354, 545, 527,
	537, 528, 513, 514, 515, 522, 334, 516, 517, 518,
	488, 519, 489, 520, 521, 0, 544, 495, 413, 368,
	562, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 0, 0, 2549, 0, 0, 0, 297, 217, 490,
	610, 492, 491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 419, 436, 298, 409, 449,
	303, 416, 293, 383, 406, 0, 0, 289, 434, 415,
	365, 344, 345, 288, 0, 401, 322, 336, 319, 381,
	0, 433, 461, 318, 452, 0, 444, 291, 0, 443,
	380, 430, 435, 366, 360, 0, 290, 432, 364, 359,
	348, 326, 477, 349, 350, 340, 392, 358, 393, 341,
	370, 369, 371, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 603, 0, 0, 607, 0, 446, 0, 0,
	0, 0, 0, 0, 418, 0, 0, 351, 0, 0,
	0, 462, 0, 404, 386, 629, 0, 0, 402, 356,
	431, 394, 437, 420, 445, 398, 395, 282, 421, 321,
	367, 294, 296, 316, 323, 325, 327, 328, 376, 377,
	389, 408, 422, 423, 424, 320, 304, 403, 305, 338,
	306, 283, 312, 310, 313, 410, 314, 285, 390, 428,
	0, 333, 399, 363, 286, 362, 391, 427, 426, 295,
	453, 459, 460, 549, 0, 465, 630, 631, 632, 474,
	479, 480, 481, 483, 484, 485, 486, 550, 567, 534,
	504, 467, 558, 501, 505, 506, 570, 0, 0, 0,
	458, 352, 353, 0, 331, 279, 280, 625, 317, 382,
	572, 605, 606, 497, 0, 559, 498, 507, 309, 531,
	543, 542, 378, 457, 0, 554, 557, 487, 624, 0,
	551, 566, 628, 565, 621, 388, 0, 407, 563, 510,
	0, 555, 529, 0, 556, 525, 560, 0, 499, 0,
	414, 439, 451, 468, 471, 500, 585, 586, 587, 284,
	470, 589, 590, 591, 592, 593, 594, 595, 588, 442,
	532, 509, 535, 450, 512, 511, 0, 0, 546, 466,
	547, 548, 372, 373, 374, 375, 335, 573, 302, 469,
	397, 0, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 538, 539, 536, 633, 0, 596, 597, 0, 0,
	463, 464, 330, 337, 482, 339, 301, 387, 332, 448,
	346, 0, 475, 540, 476, 599, 602, 600, 601, 379,
	342, 343, 411, 347, 357, 400, 447, 385, 405, 299,
	438, 412, 361, 526, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 580, 579, 578, 577, 576, 575, 574, 0,
	0, 523, 425, 311, 273, 307, 308, 315, 622, 619,
	429, 623, 0, 281, 503, 355, 0, 396, 329, 568,
	569, 0, 0, 229, 230, 231, 232, 233, 234, 235,
	236, 274, 237, 238, 239, 240, 241, 242, 243, 246,
	247, 248, 249, 250, 251, 252, 253, 571, 244, 245,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 0, 0, 0, 275, 276, 277,
	278, 0, 0, 269, 270, 271, 272, 0, 0, 0,
	454, 455, 456, 478, 0, 440, 502, 620, 0, 0,
	0, 0, 0, 0, 0, 552, 564, 598, 0, 608,
	609, 611, 613, 612, 615, 417, 0, 0, 626, 493,
	494, 627, 604, 384, 0, 508, 541, 530, 614, 496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 354, 545, 527, 537, 528, 513, 514,
	515, 522, 334, 516, 517, 518, 488, 519, 489, 520,
	521, 0, 544, 495, 413, 368, 562, 561, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 0, 0, 297, 217, 490, 610, 492, 491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 419, 436, 298, 409, 449, 303, 416, 293, 383,
	406, 0, 0, 289, 434, 415, 365, 344, 345, 288,
	0, 401, 322, 336, 319, 381, 0, 433, 461, 318,
	452, 0, 444, 291, 0, 443, 380, 430, 435, 366,
	360, 0, 290, 432, 364, 359, 348, 326, 477, 349,
	350, 340, 392, 358, 393, 341, 370, 369, 371, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 603, 0,
	0, 607, 0, 446, 0, 0, 0, 0, 0, 0,
	418, 0, 0, 351, 0, 0, 0, 462, 0, 404,
	386, 629, 0, 0, 402, 356, 431, 394, 437, 420,
	445, 398, 395, 282, 421, 321, 367, 294, 296, 316,
	323, 325, 327, 328, 376, 377, 389, 408, 422, 423,
	424, 320, 304, 403, 305, 338, 306, 283, 312, 310,
	313, 410, 314, 285, 390, 428, 0, 333, 399, 363,
	286, 362, 391, 427, 426, 295, 453, 459, 460, 549,
	0, 465, 630, 631, 632, 474, 479, 480, 481, 483,
	484, 485, 486, 550, 567, 534, 504, 467, 558, 501,
	505, 506, 570, 0, 0, 0, 458, 352, 353, 0,
	331, 279, 280, 625, 317, 382, 572, 605, 606, 497,
	0, 559, 498, 507, 309, 531, 543, 542, 378, 457,
	0, 554, 557, 487, 624, 0, 551, 566, 628, 565,
	621, 388, 0, 407, 563, 510, 0, 555, 529, 0,
	556, 525, 560, 0, 499, 0, 414, 439, 451, 468,
	471, 500, 585, 586, 587, 284, 470, 589, 590, 591,
	592, 593, 594, 595, 588, 442, 532, 509, 535, 450,
	512, 511, 0, 0, 546, 466, 547, 548, 372, 373,
	374, 375, 335, 573, 302, 469, 397, 0, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 538, 539, 536,
	633, 0, 596, 597, 0, 0, 463, 464, 330, 337,
	482, 339, 301, 387, 332, 448, 346, 0, 475, 540,
	476, 599, 602, 600, 601, 379, 342, 343, 411, 347,
	357, 400, 447, 385, 405, 299, 438, 412, 361, 526,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 580, 579,
	578, 577, 576, 575, 574, 0, 0, 523, 425, 311,
	273, 307, 308, 315, 622, 619, 429, 623, 0, 281,
	503, 355, 0, 396, 329, 568, 569, 0, 0, 229,
	230, 231, 232, 233, 234, 235, 236, 274, 237, 238,
	239, 240, 241, 242, 243, 246, 247, 248, 249, 250,
	251, 252, 253, 571, 244, 245, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	0, 0, 0, 275, 276, 277, 278, 0, 0, 269,
	270, 271, 272, 0, 0, 0, 454, 455, 456, 478,
	0, 440, 502, 620, 0, 0, 0, 0, 0, 0,
	0, 552, 564, 598, 0, 608, 609, 611, 613, 612,
	615, 417, 0, 0, 626, 493, 494, 627, 604, 384,
	0, 508, 541, 530, 614, 496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 354,
	545, 527, 537, 528, 513, 514, 515, 522, 334, 516,
	517, 518, 488, 519, 489, 520, 521, 0, 544, 495,
	413, 368, 562, 561, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 0, 0, 2508, 0, 0, 0, 297,
	217, 490, 610, 492, 491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 300, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 419, 436, 298,
	409, 449, 303, 416, 293, 383, 406, 0, 0, 289,
	434, 415, 365, 344, 345, 288, 0, 401, 322, 336,
	319, 381, 0, 433, 461, 318, 452, 0, 444, 291,
	0, 443, 380, 430, 435, 366, 360, 0, 290, 432,
	364, 359, 348, 326, 477, 349, 350, 340, 392, 358,
	393, 341, 370, 369, 371, 0, 0, 0, 0, 0,
	472, 473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 603, 0, 0, 607, 0, 446,
	0, 0, 0, 0, 0, 0, 418, 0, 0, 351,
	0, 0, 0, 462, 0, 404, 386, 629, 0, 0,
	402, 356, 431, 394, 437, 420, 445, 398, 395, 282,
	421, 321, 367, 294, 296, 316, 323, 325, 327, 328,
	376, 377, 389, 408, 422, 423, 424, 320, 304, 403,
	305, 338, 306, 283, 312, 310, 313, 410, 314, 285,
	390, 428, 0, 333, 399, 363, 286, 362, 391, 427,
	426, 295, 453, 459, 460, 549, 0, 465, 630, 631,
	632, 474, 479, 480, 481, 483, 484, 485, 486, 550,
	567, 534, 504, 467, 558, 501, 505, 506, 570, 0,
	0, 0, 458, 352, 353, 0, 331, 279, 280, 625,
	317, 382, 572, 605, 606, 497, 0, 559, 498, 507,
	309, 531, 543, 542, 378, 457, 0, 554, 557, 487,
	624, 0, 551, 566, 628, 565, 621, 388, 0, 407,
	563, 510, 0, 555, 529, 0, 556, 525, 560, 0,
	499, 0, 414, 439, 451, 468, 471, 500, 585, 586,
	587, 284, 470, 589, 590, 591, 592, 593, 594, 595,
	588, 442, 532, 509, 535, 450, 512, 511, 0, 0,
	546, 466, 547, 548, 372, 373, 374, 375, 335, 573,
	302, 469, 397, 0, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 538, 539, 536, 633, 0, 596, 597,
	0, 0, 463, 464, 330, 337, 482, 339, 301, 387,
	332, 448, 346, 0, 475, 540, 476, 599, 602, 600,
	601, 379, 342, 343, 411, 347, 357, 400, 447, 385,
	405, 299, 438, 412, 361, 526, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 580, 579, 578, 577, 576, 575,
	574, 0, 0, 523, 425, 311, 273, 307, 308, 315,
	622, 619, 429, 623, 0, 281, 503, 355, 0, 396,
	329, 568, 569, 0, 0, 229, 230, 231, 232, 233,
	234, 235, 236, 274, 237, 238, 239, 240, 241, 242,
	243, 246, 247, 248, 249, 250, 251, 252, 253, 571,
	244, 245, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 0, 0, 0, 275,
	276, 277, 278, 0, 0, 269, 270, 271, 272, 0,
	0, 0, 454, 455, 456, 478, 0, 440, 502, 620,
	0, 0, 0, 0, 0, 0, 0, 552, 564, 598,
	0, 608, 609, 611, 613, 612, 615, 417, 0, 2291,
	626, 493, 494, 627, 604, 384, 0, 508, 541, 530,
	614, 496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 324, 0, 0, 354, 545, 527, 537, 528,
	513, 514, 515, 522, 334, 516, 517, 518, 488, 519,
	489, 520, 521, 0, 544, 495, 413, 368, 562, 561,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 0, 0, 297, 217, 490, 610, 492,
	491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	300, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 419, 436, 298, 409, 449, 303, 416,
	293, 383, 406, 0, 0, 289, 434, 415, 365, 344,
	345, 288, 0, 401, 322, 336, 319, 381, 0, 433,
	461, 318, 452, 0, 444, 291, 0, 443, 380, 430,
	435, 366, 360, 0, 290, 432, 364, 359, 348, 326,
	477, 349, 350, 340, 392, 358, 393, 341, 370, 369,
	371, 0, 0, 0, 0, 0, 472, 473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	603, 0, 0, 607, 0, 446, 0, 0, 0, 0,
	0, 0, 418, 0, 0, 351, 0, 0, 0, 462,
	0, 404, 386, 629, 0, 0, 402, 356, 431, 394,
	437, 420, 445, 398, 395, 282, 421, 321, 367, 294,
	296, 316, 323, 325, 327, 328, 376, 377, 389, 408,
	422, 423, 424, 320, 304, 403, 305, 338, 306, 283,
	312, 310, 313, 410, 314, 285, 390, 428, 0, 333,
	399, 363, 286, 362, 391, 427, 426, 295, 453, 459,
	460, 549, 0, 465, 630, 631, 632, 474, 479, 480,
	481, 483, 484, 485, 486, 550, 567, 534, 504, 467,
	558, 501, 505, 506, 570, 0, 0, 0, 458, 352,
	353, 0, 331, 279, 280, 625, 317, 382, 572, 605,
	606, 497, 0, 559, 498, 507, 309, 531, 543, 542,
	378, 457, 0, 554, 557, 487, 624, 0, 551, 566,
	628, 565, 621, 388, 0, 407, 563, 510, 0, 555,
	529, 0, 556, 525, 560, 0, 499, 0, 414, 439,
	451, 468, 471, 500, 585, 586, 587, 284, 470, 589,
	590, 591, 592, 593, 594, 595, 588, 442, 532, 509,
	535, 450, 512, 511, 0, 0, 546, 466, 547, 548,
	372, 373, 374, 375, 335, 573, 302, 469, 397, 0,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 538,
	539, 536, 633, 0, 596, 597, 0, 0, 463, 464,
	330, 337, 482, 339, 301, 387, 332, 448, 346, 0,
	475, 540, 476, 599, 602, 600, 601, 379, 342, 343,
	411, 347, 357, 400, 447, 385, 405, 299, 438, 412,
	361, 526, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	580, 579, 578, 577, 576, 575, 574, 0, 0, 523,
	425, 311, 273, 307, 308, 315, 622, 619, 429, 623,
	0, 281, 503, 355, 0, 396, 329, 568, 569, 0,
	0, 229, 230, 231, 232, 233, 234, 235, 236, 274,
	237, 238, 239, 240, 241, 242, 243, 246, 247, 248,
	249, 250, 251, 252, 253, 571, 244, 245, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 0, 0, 0, 275, 276, 277, 278, 0,
	0, 269, 270, 271, 272, 0, 0, 0, 454, 455,
	456, 478, 0, 440, 502, 620, 0, 0, 0, 0,
	0, 0, 0, 552, 564, 598, 0, 608, 609, 611,
	613, 612, 615, 417, 0, 0, 626, 493, 494, 627,
	604, 384, 0, 508, 541, 530, 614, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 324, 0,
	0, 354, 545, 527, 537, 528, 513, 514, 515, 522,
	334, 516, 517, 518, 488, 519, 489, 520, 521, 0,
	544, 495, 413, 368, 562, 561, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 0, 0, 0, 1844, 0,
	0, 297, 217, 490, 610, 492, 491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 419,
	436, 298, 409, 449, 303, 416, 293, 383, 406, 0,
	0, 289, 434, 415, 365, 344, 345, 288, 0, 401,
	322, 336, 319, 381, 0, 433, 461, 318, 452, 0,
	444, 291, 0, 443, 380, 430, 435, 366, 360, 0,
	290, 432, 364, 359, 348, 326, 477, 349, 350, 340,
	392, 358, 393, 341, 370, 369, 371, 0, 0, 0,
	0, 0, 472, 473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 603, 0, 0, 607,
	0, 446, 0, 0, 0, 0, 0, 0, 418, 0,
	0, 351, 0, 0, 0, 462, 0, 404, 386, 629,
	0, 0, 402, 356, 431, 394, 437, 420, 445, 398,
	395, 282, 421, 321, 367, 294, 296, 316, 323, 325,
	327, 328, 376, 377, 389, 408, 422, 423, 424, 320,
	304, 403, 305, 338, 306, 283, 312, 310, 313, 410,
	314, 285, 390, 428, 0, 333, 399, 363, 286, 362,
	391, 427, 426, 295, 453, 459, 460, 549, 0, 465,
	630, 631, 632, 474, 479, 480, 481, 483, 484, 485,
	486, 550, 567, 534, 504, 467, 558, 501, 505, 506,
	570, 0, 0, 0, 458, 352, 353, 0, 331, 279,
	280, 625, 317, 382, 572, 605, 606, 497, 0, 559,
	498, 507, 309, 531, 543, 542, 378, 457, 0, 554,
	557, 487, 624, 0, 551, 566, 628, 565, 621, 388,
	0, 407, 563, 510, 0, 555, 529, 0, 556, 525,
	560, 0, 499, 0, 414, 439, 451, 468, 471, 500,
	585, 586, 587, 284, 470, 589, 590, 591, 592, 593,
	594, 595, 588, 442, 532, 509, 535, 450, 512, 511,
	0, 0, 546, 466, 547, 548, 372, 373, 374, 375,
	335, 573, 302, 469, 397, 0, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 538, 539, 536, 633, 0,
	596, 597, 0, 0, 463, 464, 330, 337, 482, 339,
	301, 387, 332, 448, 346, 0, 475, 540, 476, 599,
	602, 600, 601, 379, 342, 343, 411, 347, 357, 400,
	447, 385, 405, 299, 438, 412, 361, 526, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 580, 579, 578, 577,
	576, 575, 574, 0, 0, 523, 425, 311, 273, 307,
	308, 315, 622, 619, 429, 623, 0, 281, 503, 355,
	0, 396, 329, 568, 569, 0, 0, 229, 230, 231,
	232, 233, 234, 235, 236, 274, 237, 238, 239, 240,
	241, 242, 243, 246, 247, 248, 249, 250, 251, 252,
	253, 571, 244, 245, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 0, 0,
	0, 275, 276, 277, 278, 0, 0, 269, 270, 271,
	272, 0, 0, 0, 454, 455, 456, 478, 0, 440,
	502, 620, 0, 0, 0, 0, 0, 0, 0, 552,
	564, 598, 0, 608, 609, 611, 613, 612, 615, 417,
	0, 0, 626, 493, 494, 627, 604, 384, 0, 508,
	541, 530, 614, 496, 0, 1973, 0, 0, 0, 0,
	0, 0, 0, 0, 324, 0, 0, 354, 545, 527,
	537, 528, 513, 514, 515, 522, 334, 516, 517, 518,
	488, 519, 489, 520, 521, 0, 544, 495, 413, 368,
	562, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 0, 0, 297, 217, 490,
	610, 492, 491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 419, 436, 298, 409, 449,
	303, 416, 293, 383, 406, 0, 0, 289, 434, 415,
	365, 344, 345, 288, 0, 401, 322, 336, 319, 381,
	0, 433, 461, 318, 452, 0, 444, 291, 0, 443,
	380, 430, 435, 366, 360, 0, 290, 432, 364, 359,
	348, 326, 477, 349, 350, 340, 392, 358, 393, 341,
	370, 369, 371, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 603, 0, 0, 607, 0, 446, 0, 0,
	0, 0, 0, 0, 418, 0, 0, 351, 0, 0,
	0, 462, 0, 404, 386, 629, 0, 0, 402, 356,
	431, 394, 437, 420, 445, 398, 395, 282, 421, 321,
	367, 294, 296, 316, 323, 325, 327, 328, 376, 377,
	389, 408, 422, 423, 424, 320, 304, 403, 305, 338,
	306, 283, 312, 310, 313, 410, 314, 285, 390, 428,
	0, 333, 399, 363, 286, 362, 391, 427, 426, 295,
	453, 459, 460, 549, 0, 465, 630, 631, 632, 474,
	479, 480, 481, 483, 484, 485, 486, 550, 567, 534,
	504, 467, 558, 501, 505, 506, 570, 0, 0, 0,
	458, 352, 353, 0, 331, 279, 280, 625, 317, 382,
	572, 605, 606, 497, 0, 559, 498, 507, 309, 531,
	543, 542, 378, 457, 0, 554, 557, 487, 624, 0,
	551, 566, 628, 565, 621, 388, 0, 407, 563, 510,
	0, 555, 529, 0, 556, 525, 560, 0, 499, 0,
	414, 439, 451, 468, 471, 500, 585, 586, 587, 284,
	470, 589, 590, 591, 592, 593, 594, 595, 588, 442,
	532, 509, 535, 450, 512, 511, 0, 0, 546, 466,
	547, 548, 372, 373, 374, 375, 335, 573, 302, 469,
	397, 0, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 538, 539, 536, 633, 0, 596, 597, 0, 0,
	463, 464, 330, 337, 482, 339, 301, 387, 332, 448,
	346, 0, 475, 540, 476, 599, 602, 600, 601, 379,
	342, 343, 411, 347, 357, 400, 447, 385, 405, 299,
	438, 412, 361, 526, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 580, 579, 578, 577, 576, 575, 574, 0,
	0, 523, 425, 311, 273, 307, 308, 315, 622, 619,
	429, 623, 0, 281, 503, 355, 0, 396, 329, 568,
	569, 0, 0, 229, 230, 231, 232, 233, 234, 235,
	236, 274, 237, 238, 239, 240, 241, 242, 243, 246,
	247, 248, 249, 250, 251, 252, 253, 571, 244, 245,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 0, 0, 0, 275, 276, 277,
	278, 0, 0, 269, 270, 271, 272, 0, 0, 0,
	454, 455, 456, 478, 0, 440, 502, 620, 0, 0,
	0, 0, 0, 0, 0, 552, 564, 598, 0, 608,
	609, 611, 613, 612, 615, 417, 0, 0, 626, 493,
	494, 627, 604, 384, 0, 508, 541, 530, 614, 496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 354, 545, 527, 537, 528, 513, 514,
	515, 522, 334, 516, 517, 518, 488, 519, 489, 520,
	521, 0, 544, 495, 413, 368, 562, 561, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 0, 0, 1488,
	0, 0, 0, 297, 217, 490, 610, 492, 491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 419, 436, 298, 409, 449, 303, 416, 293, 383,
	406, 0, 0, 289, 434, 415, 365, 344, 345, 288,
	0, 401, 322, 336, 319, 381, 0, 433, 461, 318,
	452, 0, 444, 291, 0, 443, 380, 430, 435, 366,
	360, 0, 290, 432, 364, 359, 348, 326, 477, 349,
	350, 340, 392, 358, 393, 341, 370, 369, 371, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 603, 0,
	0, 607, 0, 446, 0, 0, 0, 0, 0, 0,
	418, 0, 0, 351, 0, 0, 0, 462, 0, 404,
	386, 629, 0, 0, 402, 356, 431, 394, 437, 420,
	445, 1878, 395, 282, 421, 321, 367, 294, 296, 316,
	323, 325, 327, 328, 376, 377, 389, 408, 422, 423,
	424, 320, 304, 403, 305, 338, 306, 283, 312, 310,
	313, 410, 314, 285, 390, 428, 0, 333, 399, 363,
	286, 362, 391, 427, 426, 295, 453, 459, 460, 549,
	0, 465, 630, 631, 632, 474, 479, 480, 481, 483,
	484, 485, 486, 550, 567, 534, 504, 467, 558, 501,
	505, 506, 570, 0, 0, 0, 458, 352, 353, 0,
	331, 279, 280, 625, 317, 382, 572, 605, 606, 497,
	0, 559, 498, 507, 309, 531, 543, 542, 378, 457,
	0, 554, 557, 487, 624, 0, 551, 566, 628, 565,
	621, 388, 0, 407, 563, 510, 0, 555, 529, 0,
	556, 525, 560, 0, 499, 0, 414, 439, 451, 468,
	471, 500, 585, 586, 587, 284, 470, 589, 590, 591,
	592, 593, 594, 595, 588, 442, 532, 509, 535, 450,
	512, 511, 0, 0, 546, 466, 547, 548, 372, 373,
	374, 375, 335, 573, 302, 469, 397, 0, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 538, 539, 536,
	633, 0, 596, 597, 0, 0, 463, 464, 330, 337,
	482, 339, 301, 387, 332, 448, 346, 0, 475, 540,
	476, 599, 602, 600, 601, 379, 342, 343, 411, 347,
	357, 400, 447, 385, 405, 299, 438, 412, 361, 526,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 580, 579,
	578, 577, 576, 575, 574, 0, 0, 523, 425, 311,
	273, 307, 308, 315, 622, 619, 429, 623, 0, 281,
	503, 355, 0, 396, 329, 568, 569, 0, 0, 229,
	230, 231, 232, 233, 234, 235, 236, 274, 237, 238,
	239, 240, 241, 242, 243, 246, 247, 248, 249, 250,
	251, 252, 253, 571, 244, 245, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	0, 0, 0, 275, 276, 277, 278, 0, 0, 269,
	270, 271, 272, 0, 0, 0, 454, 455, 456, 478,
	0, 440, 502, 620, 0, 0, 0, 0, 0, 0,
	0, 552, 564, 598, 0, 608, 609, 611, 613, 612,
	615, 417, 0, 0, 626, 493, 494, 627, 604, 384,
	0, 508, 541, 530, 614, 496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 354,
	545, 527, 537, 528, 513, 514, 515, 522, 334, 516,
	517, 518, 488, 519, 489, 520, 521, 0, 544, 495,
	413, 368, 562, 561, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 297,
	217, 490, 610, 492, 491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 300, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 419, 436, 298,
	409, 449, 303, 416, 293, 383, 406, 0, 0, 289,
	434, 415, 365, 344, 345, 288, 0, 401, 322, 336,
	319, 381, 0, 433, 461, 318, 452, 0, 444, 291,
	0, 443, 380, 430, 435, 366, 360, 0, 290, 432,
	364, 359, 348, 326, 477, 349, 350, 340, 392, 358,
	393, 341, 370, 369, 371, 0, 0, 0, 0, 0,
	472, 473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 603, 0, 0, 607, 0, 446,
	0, 0, 1517, 0, 0, 0, 418, 0, 0, 351,
	0, 0, 0, 462, 0, 404, 386, 629, 0, 0,
	402, 356, 431, 394, 437, 420, 445, 398, 395, 282,
	421, 321, 367, 294, 296, 316, 323, 325, 327, 328,
	376, 377, 389, 408, 422, 423, 424, 320, 304, 403,
	305, 338, 306, 283, 312, 310, 313, 410, 314, 285,
	390, 428, 0, 333, 399, 363, 286, 362, 391, 427,
	426, 295, 453, 459, 460, 549, 0, 465, 630, 631,
	632, 474, 479, 480, 481, 483, 484, 485, 486, 550,
	567, 534, 504, 467, 558, 501, 505, 506, 570, 0,
	0, 0, 458, 352, 353, 0, 331, 279, 280, 625,
	317, 382, 572, 605, 606, 497, 0, 559, 498, 507,
	309, 531, 543, 542, 378, 457, 0, 554, 557, 487,
	624, 0, 551, 566, 628, 565, 621, 388, 0, 407,
	563, 510, 0, 555, 529, 0, 556, 525, 560, 0,
	499, 0, 414, 439, 451, 468, 471, 500, 585, 586,
	587, 284, 470, 589, 590, 591, 592, 593, 594, 595,
	588, 442, 532, 509, 535, 450, 512, 511, 0, 0,
	546, 466, 547, 548, 372, 373, 374, 375, 335, 573,
	302, 469, 397, 0, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 538, 539, 536, 633, 0, 596, 597,
	0, 0, 463, 464, 330, 337, 482, 339, 301, 387,
	332, 448, 346, 0, 475, 540, 476, 599, 602, 600,
	601, 379, 342, 343, 411, 347, 357, 400, 447, 385,
	405, 299, 438, 412, 361, 526, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 580, 579, 578, 577, 576, 575,
	574, 0, 0, 523, 425, 311, 273, 307, 308, 315,
	622, 619, 429, 623, 0, 281, 503, 355, 0, 396,
	329, 568, 569, 0, 0, 229, 230, 231, 232, 233,
	234, 235, 236, 274, 237, 238, 239, 240, 241, 242,
	243, 246, 247, 248, 249, 250, 251, 252, 253, 571,
	244, 245, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 0, 0, 0, 275,
	276, 277, 278, 0, 0, 269, 270, 271, 272, 0,
	0, 0, 454, 455, 456, 478, 0, 440, 502, 620,
	0, 0, 0, 0, 0, 0, 0, 552, 564, 598,
	0, 608, 609, 611, 613, 612, 615, 417, 0, 0,
	626, 493, 494, 627, 604, 384, 0, 508, 541, 530,
	614, 496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 640, 324, 0, 0, 354, 545, 527, 537, 528,
	513, 514, 515, 522, 334, 516, 517, 518, 488, 519,
	489, 520, 521, 0, 544, 495, 413, 368, 562, 561,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 0, 0, 297, 217, 490, 610, 492,
	491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	300, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 419, 436, 298, 409, 449, 303, 416,
	293, 383, 406, 0, 0, 289, 434, 415, 365, 344,
	345, 288, 0, 401, 322, 336, 319, 381, 0, 433,
	461, 318, 452, 0, 444, 291, 0, 443, 380, 430,
	435, 366, 360, 0, 290, 432, 364, 359, 348, 326,
	477, 349, 350, 340, 392, 358, 393, 341, 370, 369,
	371, 0, 0, 0, 0, 0, 472, 473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	603, 0, 0, 607, 0, 446, 0, 0, 0, 0,
	0, 0, 418, 0, 0, 351, 0, 0, 0, 462,
	0, 404, 386, 629, 0, 0, 402, 356, 431, 394,
	437, 420, 445, 398, 395, 282, 421, 321, 367, 294,
	296, 316, 323, 325, 327, 328, 376, 377, 389, 408,
	422, 423, 424, 320, 304, 403, 305, 338, 306, 283,
	312, 310, 313, 410, 314, 285, 390, 428, 0, 333,
	399, 363, 286, 362, 391, 427, 426, 295, 453, 459,
	460, 549, 0, 465, 630, 631, 632, 474, 479, 480,
	481, 483, 484, 485, 486, 550, 567, 534, 504, 467,
	558, 501, 505, 506, 570, 0, 0, 0, 458, 352,
	353, 0, 331, 279, 280, 625, 317, 382, 572, 605,
	606, 497, 0, 559, 498, 507, 309, 531, 543, 542,
	378, 457, 0, 554, 557, 487, 624, 0, 551, 566,
	628, 565, 621, 388, 0, 407, 563, 510, 0, 555,
	529, 0, 556, 525, 560, 0, 499, 0, 414, 439,
	451, 468, 471, 500, 585, 586, 587, 284, 470, 589,
	590, 591, 592, 593, 594, 595, 588, 442, 532, 509,
	535, 450, 512, 511, 0, 0, 546, 466, 547, 548,
	372, 373, 374, 375, 335, 573, 302, 469, 397, 0,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 538,
	539, 536, 633, 0, 596, 597, 0, 0, 463, 464,
	330, 337, 482, 339, 301, 387, 332, 448, 346, 0,
	475, 540, 476, 599, 602, 600, 601, 379, 342, 343,
	411, 347, 357, 400, 447, 385, 405, 299, 438, 412,
	361, 526, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	580, 579, 578, 577, 576, 575, 574, 0, 0, 523,
	425, 311, 273, 307, 308, 315, 622, 619, 429, 623,
	0, 281, 503, 355, 0, 396, 329, 568, 569, 0,
	0, 229, 230, 231, 232, 233, 234, 235, 236, 274,
	237, 238, 239, 240, 241, 242, 243, 246, 247, 248,
	249, 250, 251, 252, 253, 571, 244, 245, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 0, 0, 0, 275, 276, 277, 278, 0,
	0, 269, 270, 271, 272, 0, 0, 0, 454, 455,
	456, 478, 0, 440, 502, 620, 0, 0, 0, 0,
	0, 0, 0, 552, 564, 598, 0, 608, 609, 611,
	613, 612, 615, 417, 0, 0, 626, 493, 494, 627,
	604, 384, 0, 508, 541, 530, 614, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 324, 0,
	0, 354, 545, 527, 537, 528, 513, 514, 515, 522,
	334, 516, 517, 518, 488, 519, 489, 520, 521, 0,
	544, 495, 413, 368, 562, 561, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 0,
	0, 297, 217, 490, 610, 492, 491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 419,
	436, 298, 409, 449, 303, 416, 293, 383, 406, 0,
	0, 289, 434, 415, 365, 344, 345, 288, 0, 401,
	322, 336, 319, 381, 0, 433, 461, 318, 452, 0,
	444, 291, 0, 443, 380, 430, 435, 366, 360, 0,
	290, 432, 364, 359, 348, 326, 477, 349, 350, 340,
	392, 358, 393, 341, 370, 369, 371, 0, 0, 0,
	0, 0, 472, 473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 603, 0, 650, 607,
	0, 446, 0, 0, 0, 0, 0, 0, 418, 0,
	0, 351, 0, 0, 0, 462, 0, 404, 386, 629,
	0, 0, 402, 356, 431, 394, 437, 420, 445, 398,
	395, 282, 421, 321, 367, 294, 296, 316, 323, 325,
	327, 328, 376, 377, 389, 408, 422, 423, 424, 320,
	304, 403, 305, 338, 306, 283, 312, 310, 313, 410,
	314, 285, 390, 428, 0, 333, 399, 363, 286, 362,
	391, 427, 426, 295, 453, 459, 460, 549, 0, 465,
	630, 631, 632, 474, 479, 480, 481, 483, 484, 485,
	486, 550, 567, 534, 504, 467, 558, 501, 505, 506,
	570, 0, 0, 0, 458, 352, 353, 0, 331, 279,
	280, 625, 317, 382, 572, 605, 606, 497, 0, 559,
	498, 507, 309, 531, 543, 542, 378, 457, 0, 554,
	557, 487, 624, 0, 551, 566, 628, 565, 621, 388,
	0, 407, 563, 510, 0, 555, 529, 0, 556, 525,
	560, 0, 499, 0, 414, 439, 451, 468, 471, 500,
	585, 586, 587, 284, 470, 589, 590, 591, 592, 593,
	594, 595, 588, 442, 532, 509, 535, 450, 512, 511,
	0, 0, 546, 466, 547, 548, 372, 373, 374, 375,
	335, 573, 302, 469, 397, 0, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 538, 539, 536, 633, 0,
	596, 597, 0, 0, 463, 464, 330, 337, 482, 339,
	301, 387, 332, 448, 346, 0, 475, 540, 476, 599,
	602, 600, 601, 379, 342, 343, 411, 347, 357, 400,
	447, 385, 405, 299, 438, 412, 361, 526, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 580, 579, 578, 577,
	576, 575, 574, 0, 0, 523, 425, 311, 273, 307,
	308, 315, 622, 619, 429, 623, 0, 281, 503, 355,
	0, 396, 329, 568, 569, 0, 0, 229, 230, 231,
	232, 233, 234, 235, 236, 274, 237, 238, 239, 240,
	241, 242, 243, 246, 247, 248, 249, 250, 251, 252,
	253, 571, 244, 245, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 0, 0,
	0, 275, 276, 277, 278, 0, 0, 269, 270, 271,
	272, 0, 0, 0, 454, 455, 456, 478, 0, 440,
	502, 620, 0, 0, 0, 0, 0, 0, 0, 552,
	564, 598, 0, 608, 609, 611, 613, 612, 615, 417,
	0, 0, 626, 493, 494, 627, 604, 384, 0, 508,
	541, 530, 614, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 324, 0, 0, 354, 545, 527,
	537, 528, 513, 514, 515, 522, 334, 516, 517, 518,
	488, 519, 489, 520, 521, 0, 544, 495, 413, 368,
	562, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 0, 0, 297, 217, 490,
	610, 492, 491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 419, 436, 298, 409, 449,
	303, 416, 293, 383, 406, 0, 0, 289, 434, 415,
	365, 344, 345, 288, 0, 401, 322, 336, 319, 381,
	0, 433, 461, 318, 452, 0, 444, 291, 0, 443,
	380, 430, 435, 366, 360, 0, 290, 432, 364, 359,
	348, 326, 477, 349, 350, 340, 392, 358, 393, 341,
	370, 369, 371, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 603, 0, 0, 607, 0, 446, 0, 0,
	0, 0, 0, 0, 418, 0, 0, 351, 0, 0,
	0, 462, 0, 404, 386, 629, 0, 0, 402, 356,
	431, 394, 437, 420, 445, 398, 395, 282, 421, 321,
	367, 294, 296, 316, 323, 325, 327, 328, 376, 377,
	389, 408, 422, 423, 424, 320, 304, 403, 305, 338,
	306, 283, 312, 310, 313, 410, 314, 285, 390, 428,
	0, 333, 399, 363, 286, 362, 391, 427, 426, 295,
	453, 459, 460, 549, 0, 465, 630, 631, 632, 474,
	479, 480, 481, 483, 484, 485, 486, 550, 567, 534,
	504, 467, 558, 501, 505, 506, 570, 0, 0, 0,
	458, 352, 353, 0, 331, 279, 280, 625, 317, 382,
	572, 605, 606, 497, 0, 559, 498, 507, 309, 531,
	543, 542, 378, 457, 0, 554, 557, 487, 624, 0,
	551, 566, 628, 565, 621, 388, 0, 407, 563, 510,
	0, 555, 529, 0, 556, 525, 560, 0, 499, 0,
	414, 439, 451, 468, 471, 500, 585, 586, 587, 284,
	470, 589, 590, 591, 592, 593, 594, 595, 588, 442,
	532, 509, 535, 450, 512, 511, 0, 0, 546, 466,
	547, 548, 372, 373, 374, 375, 335, 573, 302, 469,
	397, 0, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 538, 539, 536, 633, 0, 596, 597, 0, 0,
	463, 464, 330, 337, 482, 339, 301, 387, 332, 448,
	346, 0, 475, 540, 476, 599, 602, 600, 601, 379,
	342, 343, 411, 347, 357, 400, 447, 385, 405, 299,
	438, 412, 361, 526, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 580, 579, 578, 577, 576, 575, 574, 941,
	0, 523, 425, 311, 273, 307, 308, 315, 622, 619,
	429, 623, 0, 281, 503, 355, 0, 396, 329, 568,
	569, 0, 0, 229, 230, 231, 232, 233, 234, 235,
	236, 274, 237, 238, 239, 240, 241, 242, 243, 246,
	247, 248, 249, 250, 251, 252, 253, 571, 244, 245,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 0, 0, 0, 275, 276, 277,
	278, 0, 0, 269, 270, 271, 272, 0, 0, 0,
	454, 455, 456, 478, 0, 440, 502, 620, 0, 0,
	0, 0, 0, 0, 0, 552, 564, 598, 0, 608,
	609, 611, 613, 612, 615, 417, 0, 0, 626, 493,
	494, 627, 604, 384, 0, 508, 541, 530, 614, 496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 354, 545, 527, 537, 528, 513, 514,
	515, 522, 334, 516, 517, 518, 488, 519, 489, 520,
	521, 0, 544, 495, 413, 368, 562, 561, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 0, 0, 297, 217, 490, 610, 492, 491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 419, 436, 298, 409, 449, 303, 416, 293, 383,
	406, 0, 0, 289, 434, 415, 365, 344, 345, 288,
	0, 401, 322, 336, 319, 381, 0, 433, 461, 318,
	452, 0, 444, 291, 0, 443, 380, 430, 435, 366,
	360, 0, 290, 432, 364, 359, 348, 326, 477, 349,
	350, 340, 392, 358, 393, 341, 370, 369, 371, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 603, 0,
	0, 607, 0, 446, 0, 0, 0, 0, 0, 0,
	418, 0, 0, 351, 0, 0, 0, 462, 0, 404,
	386, 629, 0, 0, 402, 356, 431, 394, 437, 420,
	445, 398, 395, 282, 421, 321, 367, 294, 296, 316,
	323, 325, 327, 328, 376, 377, 389, 408, 422, 423,
	424, 320, 304, 403, 305, 338, 306, 283, 312, 310,
	313, 410, 314, 285, 390, 428, 0, 333, 399, 363,
	286, 362, 391, 427, 426, 295, 453, 459, 460, 549,
	0, 465, 630, 631, 632, 474, 479, 480, 481, 483,
	484, 485, 486, 550, 567, 534, 504, 467, 558, 501,
	505, 506, 570, 0, 0, 0, 458, 352, 353, 0,
	331, 279, 280, 625, 317, 382, 572, 605, 606, 497,
	0, 559, 498, 507, 309, 531, 543, 542, 378, 457,
	0, 554, 557, 487, 624, 0, 551, 566, 628, 565,
	621, 388, 0, 407, 563, 510, 0, 555, 529, 0,
	556, 525, 560, 0, 499, 0, 414, 439, 451, 468,
	471, 500, 585, 586, 587, 284, 470, 589, 590, 591,
	592, 593, 594, 595, 588, 442, 532, 509, 535, 450,
	512, 511, 0, 0, 546, 466, 547, 548, 372, 373,
	374, 375, 335, 573, 302, 469, 397, 0, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 538, 539, 536,
	633, 0, 596, 597, 0, 0, 463, 464, 330, 337,
	482, 339, 301, 387, 332, 448, 346, 0, 475, 540,
	476, 599, 602, 600, 601, 379, 342, 343, 411, 347,
	357, 400, 447, 385, 405, 299, 438, 412, 361, 526,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 580, 579,
	578, 577, 576, 575, 574, 0, 0, 523, 425, 311,
	273, 307, 308, 315, 622, 619, 429, 623, 0, 281,
	503, 355, 0, 396, 329, 568, 569, 0, 0, 229,
	230, 231, 232, 233, 234, 235, 236, 274, 237, 238,
	239, 240, 241, 242, 243, 246, 247, 248, 249, 250,
	251, 252, 253, 571, 244, 245, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	0, 0, 0, 275, 276, 277, 278, 0, 0, 269,
	270, 271, 272, 0, 0, 0, 454, 455, 456, 478,
	0, 440, 502, 620, 0, 0, 0, 0, 0, 0,
	0, 552, 564, 598, 0, 608, 609, 611, 613, 612,
	615, 417, 0, 0, 626, 493, 494, 627, 604, 384,
	0, 508, 541, 530, 614, 496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 354,
	545, 527, 537, 528, 513, 514, 515, 522, 334, 516,
	517, 518, 488, 519, 489, 520, 521, 0, 544, 495,
	413, 368, 562, 561, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 297,
	217, 490, 610, 492, 491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 300, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 419, 1467, 298,
	409, 449, 303, 416, 293, 383, 406, 0, 0, 289,
	434, 415, 365, 344, 345, 288, 0, 401, 322, 336,
	319, 381, 0, 433, 461, 318, 452, 0, 444, 291,
	0, 443, 380, 430, 435, 366, 360, 0, 290, 432,
	364, 359, 348, 326, 477, 349, 350, 340, 392, 358,
	393, 341, 370, 369, 371, 0, 0, 0, 0, 0,
	472, 473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 603, 0, 0, 607, 0, 446,
	0, 0, 0, 0, 0, 0, 418, 0, 0, 351,
	0, 0, 0, 462, 0, 404, 386, 629, 0, 0,
	402, 356, 431, 394, 437, 420, 445, 398, 395, 282,
	421, 321, 367, 294, 296, 316, 323, 325, 327, 328,
	376, 377, 389, 408, 422, 423, 424, 320, 304, 403,
	305, 338, 306, 283, 312, 310, 313, 410, 314, 285,
	390, 428, 0, 333, 399, 363, 286, 362, 391, 427,
	426, 295, 453, 459, 460, 549, 0, 465, 630, 631,
	632, 474, 479, 480, 481, 483, 484, 485, 486, 550,
	567, 534, 504, 467, 558, 501, 505, 506, 570, 0,
	0, 0, 458, 352, 353, 0, 331, 279, 280, 625,
	317, 382, 572, 605, 606, 497, 0, 559, 498, 507,
	309, 531, 543, 542, 378, 457, 0, 554, 557, 487,
	624, 0, 551, 566, 628, 565, 621, 388, 0, 407,
	563, 510, 0, 555, 529, 0, 556, 525, 560, 0,
	499, 0, 414, 439, 451, 468, 471, 500, 585, 586,
	587, 284, 470, 589, 590, 591, 592, 593, 594, 595,
	588, 442, 532, 509, 535, 450, 512, 511, 0, 0,
	546, 466, 547, 548, 372, 373, 374, 375, 335, 573,
	302, 469, 397, 0, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 538, 539, 536, 633, 0, 596, 597,
	0, 0, 463, 464, 330, 337, 482, 339, 301, 387,
	332, 448, 346, 0, 475, 540, 476, 599, 602, 600,
	601, 379, 342, 343, 411, 347, 357, 400, 447, 385,
	405, 299, 438, 412, 361, 526, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 580, 579, 578, 577, 576, 575,
	574, 0, 0, 523, 425, 311, 273, 307, 308, 315,
	622, 619, 429, 623, 0, 281, 503, 355, 0, 396,
	329, 568, 569, 0, 0, 229, 230, 231, 232, 233,
	234, 235, 236, 274, 237, 238, 239, 240, 241, 242,
	243, 246, 247, 248, 249, 250, 251, 252, 253, 571,
	244, 245, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 0, 0, 0, 275,
	276, 277, 278, 0, 0, 269, 270, 271, 272, 0,
	0, 0, 454, 455, 456, 478, 0, 440, 502, 620,
	0, 0, 0, 0, 0, 0, 0, 552, 564, 598,
	0, 608, 609, 611, 613, 612, 615, 417, 0, 0,
	626, 493, 494, 627, 604, 384, 0, 508, 541, 530,
	614, 496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 324, 0, 0, 354, 545, 527, 537, 528,
	513, 514, 515, 522, 334, 516, 517, 518, 488, 519,
	489, 520, 521, 0, 544, 495, 413, 368, 562, 561,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 0, 0, 297, 217, 490, 610, 492,
	491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	300, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 419, 1465, 298, 409, 449, 303, 416,
	293, 383, 406, 0, 0, 289, 434, 415, 365, 344,
	345, 288, 0, 401, 322, 336, 319, 381, 0, 433,
	461, 318, 452, 0, 444, 291, 0, 443, 380, 430,
	435, 366, 360, 0, 290, 432, 364, 359, 348, 326,
	477, 349, 350, 340, 392, 358, 393, 341, 370, 369,
	371, 0, 0, 0, 0, 0, 472, 473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	603, 0, 0, 607, 0, 446, 0, 0, 0, 0,
	0, 0, 418, 0, 0, 351, 0, 0, 0, 462,
	0, 404, 386, 629, 0, 0, 402, 356, 431, 394,
	437, 420, 445, 398, 395, 282, 421, 321, 367, 294,
	296, 316, 323, 325, 327, 328, 376, 377, 389, 408,
	422, 423, 424, 320, 304, 403, 305, 338, 306, 283,
	312, 310, 313, 410, 314, 285, 390, 428, 0, 333,
	399, 363, 286, 362, 391, 427, 426, 295, 453, 459,
	460, 549, 0, 465, 630, 631, 632, 474, 479, 480,
	481, 483, 484, 485, 486, 550, 567, 534, 504, 467,
	558, 501, 505, 506, 570, 0, 0, 0, 458, 352,
	353, 0, 331, 279, 280, 625, 317, 382, 572, 605,
	606, 497, 0, 559, 498, 507, 309, 531, 543, 542,
	378, 457, 0, 554, 557, 487, 624, 0, 551, 566,
	628, 565, 621, 388, 0, 407, 563, 510, 0, 555,
	529, 0, 556, 525, 560, 0, 499, 0, 414, 439,
	451, 468, 471, 500, 585, 586, 587, 284, 470, 589,
	590, 591, 592, 593, 594, 595, 588, 442, 532, 509,
	535, 450, 512, 511, 0, 0, 546, 466, 547, 548,
	372, 373, 374, 375, 335, 573, 302, 469, 397, 0,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 538,
	539, 536, 633, 0, 596, 597, 0, 0, 463, 464,
	330, 337, 482, 339, 301, 387, 332, 448, 346, 0,
	475, 540, 476, 599, 602, 600, 601, 379, 342, 343,
	411, 347, 357, 400, 447, 385, 405, 299, 438, 412,
	361, 526, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	580, 579, 578, 577, 576, 575, 574, 0, 0, 523,
	425, 311, 273, 307, 308, 315, 622, 619, 429, 623,
	0, 281, 503, 355, 0, 396, 329, 568, 569, 0,
	0, 229, 230, 231, 232, 233, 234, 235, 236, 274,
	237, 238, 239, 240, 241, 242, 243, 246, 247, 248,
	249, 250, 251, 252, 253, 571, 244, 245, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 0, 0, 0, 275, 276, 277, 278, 0,
	0, 269, 270, 271, 272, 0, 0, 0, 454, 455,
	456, 478, 0, 440, 502, 620, 0, 0, 0, 0,
	0, 0, 0, 552, 564, 598, 0, 608, 609, 611,
	613, 612, 615, 417, 0, 0, 626, 493, 494, 627,
	604, 384, 0, 508, 541, 530, 614, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 324, 0,
	0, 354, 545, 527, 537, 528, 513, 514, 515, 522,
	334, 516, 517, 518, 488, 519, 489, 520, 521, 0,
	544, 495, 413, 368, 562, 561, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 0,
	0, 297, 217, 490, 610, 492, 491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 419,
	436, 298, 409, 449, 303, 416, 293, 383, 406, 0,
	0, 289, 434, 415, 365, 344, 345, 288, 0, 401,
	322, 336, 319, 381, 0, 433, 461, 318, 452, 0,
	444, 291, 0, 443, 380, 430, 435, 366, 360, 0,
	290, 432, 364, 359, 348, 326, 477, 349, 350, 340,
	392, 358, 393, 341, 370, 369, 371, 0, 0, 0,
	0, 0, 472, 473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 603, 0, 0, 607,
	0, 446, 0, 0, 0, 0, 0, 0, 418, 0,
	0, 351, 0, 0, 0, 462, 0, 404, 386, 629,
	0, 0, 402, 356, 431, 394, 437, 420, 445, 398,
	395, 282, 421, 321, 367, 294, 296, 717, 323, 325,
	327, 328, 376, 377, 389, 408, 422, 423, 424, 320,
	304, 403, 305, 338, 306, 283, 312, 310, 313, 410,
	314, 285, 390, 428, 0, 333, 399, 363, 286, 362,
	391, 427, 426, 295, 453, 459, 460, 549, 0, 465,
	630, 631, 632, 474, 479, 480, 481, 483, 484, 485,
	486, 550, 567, 534, 504, 467, 558, 501, 505, 506,
	570, 0, 0, 0, 458, 352, 353, 0, 331, 279,
	280, 625, 317, 382, 572, 605, 606, 497, 0, 559,
	498, 507, 309, 531, 543, 542, 378, 457, 0, 554,
	557, 487, 624, 0, 551, 566, 628, 565, 621, 388,
	0, 407, 563, 510, 0, 555, 529, 0, 556, 525,
	560, 0, 499, 0, 414, 439, 451, 468, 471, 500,
	585, 586, 587, 284, 470, 589, 590, 591, 592, 593,
	594, 595, 588, 442, 532, 509, 535, 450, 512, 511,
	0, 0, 546, 466, 547, 548, 372, 373, 374, 375,
	335, 573, 302, 469, 397, 0, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 538, 539, 536, 633, 0,
	596, 597, 0, 0, 463, 464, 330, 337, 482, 339,
	301, 387, 332, 448, 346, 0, 475, 540, 476, 599,
	602, 600, 601, 379, 342, 343, 411, 347, 357, 400,
	447, 385, 405, 299, 438, 412, 361, 526, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 580, 579, 578, 577,
	576, 575, 574, 0, 0, 523, 425, 311, 273, 307,
	308, 315, 622, 619, 429, 623, 0, 281, 503, 355,
	0, 396, 329, 568, 569, 0, 0, 229, 230, 231,
	232, 233, 234, 235, 236, 274, 237, 238, 239, 240,
	241, 242, 243, 246, 247, 248, 249, 250, 251, 252,
	253, 571, 244, 245, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 0, 0,
	0, 275, 276, 277, 278, 0, 0, 269, 270, 271,
	272, 0, 0, 0, 454, 455, 456, 478, 0, 440,
	502, 620, 0, 0, 0, 0, 0, 0, 0, 552,
	564, 598, 0, 608, 609, 611, 613, 612, 615, 417,
	0, 0, 626, 493, 494, 627, 604, 384, 0, 508,
	541, 530, 614, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 324, 0, 0, 354, 545, 527,
	537, 528, 513, 514, 515, 522, 334, 516, 517, 518,
	488, 519, 489, 520, 521, 0, 544, 495, 413, 368,
	562, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 0, 0, 297, 217, 490,
	610, 492, 491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 419, 436, 298, 409, 449,
	303, 416, 293, 383, 406, 0, 0, 289, 434, 415,
	365, 344, 345, 288, 0, 401, 322, 336, 319, 381,
	0, 433, 461, 318, 452, 0, 444, 291, 0, 443,
	380, 430, 435, 366, 360, 0, 290, 432, 364, 359,
	348, 326, 477, 349, 350, 340, 392, 358, 393, 341,
	370, 369, 371, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 603, 0, 0, 607, 0, 446, 0, 0,
	0, 0, 0, 0, 418, 0, 0, 351, 0, 0,
	0, 462, 0, 404, 386, 629, 0, 0, 402, 356,
	431, 394, 437, 420, 445, 674, 395, 282, 421, 321,
	367, 294, 296, 316, 323, 325, 327, 328, 376, 377,
	389, 408, 422, 423, 424, 320, 304, 403, 305, 338,
	306, 283, 312, 310, 313, 410, 314, 285, 390, 428,
	0, 333, 399, 363, 286, 362, 391, 427, 426, 295,
	453, 459, 460, 549, 0, 465, 630, 631, 632, 474,
	479, 480, 481, 483, 484, 485, 486, 550, 567, 534,
	504, 467, 558, 501, 505, 506, 570, 0, 0, 0,
	458, 352, 353, 0, 331, 279, 280, 625, 317, 382,
	572, 605, 606, 497, 0, 559, 498, 507, 309, 531,
	543, 542, 378, 457, 0, 554, 557, 487, 624, 0,
	551, 566, 628, 565, 621, 388, 0, 407, 563, 510,
	0, 555, 529, 0, 556, 525, 560, 0, 499, 0,
	414, 439, 451, 468, 471, 500, 585, 586, 587, 284,
	470, 589, 590, 591, 592, 593, 594, 675, 588, 442,
	532, 509, 535, 450, 512, 511, 0, 0, 546, 466,
	547, 548, 372, 373, 374, 375, 335, 573, 302, 469,
	397, 0, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 538, 539, 536, 633, 0, 596, 597, 0, 0,
	463, 464, 330, 337, 482, 339, 301, 387, 332, 448,
	346, 0, 475, 540, 476, 599, 602, 600, 601, 379,
	342, 343, 411, 347, 357, 400, 447, 385, 405, 299,
	438, 412, 361, 526, 553, 0, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 580, 579, 578, 577, 576, 575, 574, 0,
	0, 523, 425, 311, 273, 307, 308, 315, 622, 619,
	429, 623, 0, 281, 503, 355, 0, 396, 329, 568,
	569, 0, 0, 229, 230, 231, 232, 233, 234, 235,
	236, 274, 237, 238, 239, 240, 241, 242, 243, 246,
	247, 248, 249, 250, 251, 252, 253, 571, 244, 245,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 0, 0, 0, 275, 276, 277,
	278, 0, 0, 269, 270, 271, 272, 0, 0, 0,
	454, 455, 456, 478, 0, 440, 502, 620, 0, 0,
	0, 0, 0, 1078, 0, 552, 564, 598, 0, 608,
	609, 611, 613, 612, 615, 417, 0, 0, 626, 493,
	494, 627, 604, 1101, 1105, 1107, 1109, 1111, 1112, 1114,
	0, 1119, 1115, 1116, 1117, 1118, 0, 1096, 1097, 1098,
	1099, 1076, 1077, 1102, 0, 1079, 0, 1081, 1082, 1083,
	1084, 1080, 1085, 1086, 1087, 1088, 1089, 1092, 1094, 1090,
	1091, 1100, 696, 695, 702, 692, 0, 0, 0, 1104,
	1106, 1108, 1110, 1113, 699, 700, 1960, 701, 705, 0,
	0, 686, 0, 194, 0, 0, 0, 0, 0, 0,
	0, 710, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3507, 0, 1095, 0, 0,
	0, 1962, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 714, 0, 0, 716, 0,
	0, 0, 0, 715, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1937, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1960, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1953, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1962, 0, 0, 1960, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1962, 687, 689, 688, 3674, 0, 0, 0, 0, 0,
	0, 694, 0, 0, 1937, 0, 0, 0, 0, 0,
	0, 0, 0, 698, 0, 0, 0, 0, 0, 0,
	713, 0, 1941, 0, 0, 0, 0, 691, 0, 0,
	0, 0, 0, 1947, 0, 0, 0, 0, 0, 0,
	0, 0, 1937, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1935, 1969, 0, 0, 1936, 1938, 1940,
	0, 1942, 1943, 1944, 1948, 1949, 1950, 1952, 1955, 1956,
	1957, 0, 1953, 0, 0, 0, 0, 0, 1945, 1954,
	1946, 0, 0, 0, 0, 1960, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1103, 0, 0, 0, 0, 0, 3645, 0, 0, 0,
	1953, 0, 1961, 0, 0, 0, 0, 0, 0, 0,
	1962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 693, 697, 703,
	0, 704, 706, 0, 0, 707, 708, 709, 0, 0,
	711, 712, 0, 1941, 0, 0, 0, 1958, 0, 0,
	0, 0, 0, 0, 1947, 0, 0, 0, 0, 0,
	0, 0, 1937, 0, 1934, 0, 0, 0, 0, 0,
	0, 1933, 0, 0, 1935, 1969, 0, 0, 1936, 1938,
	1940, 1941, 1942, 1943, 1944, 1948, 1949, 1950, 1952, 1955,
	1956, 1957, 1947, 0, 0, 1951, 0, 0, 0, 1945,
	1954, 1946, 0, 0, 1939, 0, 0, 0, 0, 0,
	0, 0, 1935, 1969, 0, 0, 1936, 1938, 1940, 0,
	1942, 1943, 1944, 1948, 1949, 1950, 1952, 1955, 1956, 1957,
	1953, 0, 0, 1961, 0, 0, 0, 1945, 1954, 1946,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1961, 0, 0, 0, 0, 0, 0, 1958, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1934, 690, 0, 0, 0,
	0, 0, 1933, 0, 0, 0, 0, 0, 0, 0,
	0, 1941, 158, 0, 0, 0, 1958, 0, 0, 0,
	0, 0, 1947, 0, 0, 0, 1951, 0, 0, 0,
	0, 0, 0, 1934, 0, 1939, 0, 0, 0, 0,
	1933, 0, 1935, 1969, 0, 0, 1936, 1938, 1940, 0,
	1942, 1943, 1944, 1948, 1949, 1950, 1952, 1955, 1956, 1957,
	0, 0, 0, 0, 1951, 0, 0, 1945, 1954, 1946,
	0, 0, 0, 1939, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1961, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1958, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1934, 0, 0, 0, 0, 0, 0,
	1933, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1951, 0, 0, 0, 0, 0,
	0, 0, 0, 1939,
}

var yyPact = [...]int{
	3881, -1000, -1000, -1000, -301, 13950, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 46620, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 384, 46620,
	-298, 28756, 44772, -1000, -1000, 2646, -1000, 45388, 15811, 46620,
	477, 473, 46620, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 900, -1000, 49084, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 790, 4724, 48468,
	10850, -208, -1000, 1705, -34, 2565, 487, -186, -187, 1047,
	1053, 1160, 1160, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 228, 926, 46004, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3894, 240, 926, 20745, 134, 132, 1705,
	435, -76, 183, -1000, 1452, 517, 211, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10850, 10850,
	13950, -353, 13950, 10850, 46620, 46620, -1000, -1000, -1000, -1000,
	-298, 45388, 790, 4724, 10850, 2565, 487, -186, -187, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -76, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 132, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4989, -1000, 1638, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2314, 3007, 1633, 2560, 757, 44772,
	46620, -1000, 153, 757, -1000, -1000, -1000, 1705, 3462, -1000,
	46620, 46620, 201, 1837, -1000, 445, 394, 403, 321, 1617,
	-1000, -1000, -1000, -1000, -1000, -1000, 633, 3367, -1000, 46620,
	46620, 3044, 46620, -1000, 2239, 687, -1000, 49749, 3192, 1375,
	908, 3057, -1000, -1000, 3005, -1000, 328, 623, 283, 746,
	382, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 352, -1000,
	3275, -1000, -1000, 315, -1000, -1000, 304, -1000, -1000, -1000,
	130, -1000, -1000, -1000, -1000, -1000, -1000, 10, -1000, -1000,
	1144, 2274, 10850, 1904, -1000, 3913, 1654, -1000, -1000, -1000,
	6517, 12704, 12704, 12704, 12704, 46620, -1000, -1000, 2843, 10850,
	3004, 3003, 2999, 2998, -1000, -1000, -1000, -1000, -1000, -1000,
	1616, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1998, -1000, -1000, -1000, 13322, -1000, 2993, 2992, 2990, 2989,
	2981, 2979, 2978, 2977, 2974, 2973, 2972, 2965, 2961, 2953,
	2647, 15185, 2952, 2559, 2558, 2943, 2941, 2938, 2557, 2937,
	2935, 2927, 2647, 2647, 2926, 2925, 2924, 2923, 2914, 2913,
	2911, 2910, 2909, 2900, 2895, 2894, 2893, 2891, 2890, 2889,
	2885, 2884, 2883, 2879, 2878, 2877, 2875, 2874, 2873, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1333, -1000, 2871, 3388, 2807, -1000, 3272, 3267,
	3263, 3259, -255, 2860, 2189, -1000, -1000, 121, 3365, 46620,
	-277, 46620, 2555, -83, 2554, -84, -1000, -79, -1000, -1000,
	1037, -1000, 1022, -1000, 785, 785, 785, 46620, 46620, 229,
	934, 785, 785, 785, 785, 785, 876, 785, 3295, 898,
	894, 888, 884, 785, -25, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1836, 1834, 3114, 997, -1000, -1000, -1000, -1000,
	1462, 46620, -1000, 2815, 2553, 1711, 1711, 3348, 3348, 3291,
	715, 712, 706, 1711, 559, -1000, 1781, 1781, 1781, 1781,
	1711, 486, 737, 3298, 3298, 100, 1781, 106, 1711, 1711,
	106, 1711, 1711, -1000, 1827, 334, -263, -1000, -1000, -1000,
	-1000, 1781, 1781, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3270, 3266, 790, 790, 46620, 790, 236, 46620, 790, 790,
	790, 818, 65, 47852, 47236, 2173, 2239, 679, 649, 1499,
	1848, -1000, 1697, 46620, 46620, 1697, 1697, 23828, 23212, -1000,
	46620, -1000, 3388, 2807, 2740, 1566, 2738, 2807, -85, 2552,
	790, 790, 790, 790, 790, 297, 790, 790, 790, 790,
	790, 46620, 46620, 44156, 790, 790, 790, 790, 8989, 8989,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13950,
	1992, 2118, 210, -1, -288, 264, -1000, -1000, 46620, 3157,
	288, -1000, -1000, -1000, 2747, -1000, 2798, 2798, 2798, 2798,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2798, 2798, 2808, 2854, -1000, -1000, 2797, 2797, 2797, 2747,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2805, 2805, 2806, 2806, 2805,
	46620, -113, -1000, -1000, 10850, 46620, 3182, 405, 2853, 757,
	-1000, -1000, 46620, 194, 407, 3388, 3174, 3298, 3341, -1000,
	-1000, 1615, 2188, 2547, -1000, 321, -1000, 417, 321, 1677,
	-1000, 1241, -1000, -1000, -1000, -1000, -1000, 46620, 10, 428,
	-1000, -1000, 2512, 2852, -1000, 624, 1153, 1324, -1000, 340,
	4067, 37380, 2239, 37380, 46620, -1000, -1000, -1000, -1000, -1000,
	-1000, 125, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 305, -1000, 10850, 10850,
	10850, 10850, 10850, -1000, 664, 12086, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 12704, 12704, 12704, 12704, 12704, 12704, 12704,
	12704, 12704, 12704, 12704, 12704, 2842, 1760, 12704, 12704, 12704,
	12704, 25676, 1566, 3050, 1482, 309, 1654, 1654, 1654, 1654,
	10850, -1000, 1734, 2274, 10850, 10850, 10850, 10850, 46620, -1000,
	-1000, 3884, 10850, 10850, 3466, 10850, 3223, 10850, 10850, 10850,
	2733, 5280, 46620, 10850, -1000, 2730, 2729, -1000, -1000, 2009,
	10850, -1000, -1000, 10850, -1000, -1000, 10850, 12704, 10850, -1000,
	10850, 10850, 10850, -1000, -1000, 3269, 3223, 3223, 3223, 1806,
	10850, 10850, 3223, 3223, 3223, 1778, 3223, 3223, 3223, 3223,
	3223, 3223, 3223, 3223, 3223, 3223, 2726, 2725, 2723, 10232,
	3298, -208, -1000, 8371, 3174, 3298, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -257, 2848, 46620, 2542,
	2540, -313, 188, 476, 46620, 1102, 415, 2186, -96, 2182,
	38, 1045, 1025, 1034, -1000, 2537, 1870, 46620, 46620, 3218,
	-1000, 2847, 46620, 785, 785, 785, -1000, 42308, 37380, 46620,
	46620, 2239, 46620, 46620, 46620, 785, 785, 785, 785, 46620,
	-1000, 3124, 37380, 3118, 818, -1000, 46620, 1462, 3215, 46620,
	415, 3348, 12704, 12704, -1000, -1000, 10850, -1000, 43540, 1781,
	1711, 1711, -1000, -1000, 46620, -1000, -1000, -1000, 1781, 46620,
	1781, 1781, 3348, 1781, -1000, -1000, -1000, 1711, 1711, -1000,
	-1000, 10850, -1000, -1000, 1781, 1781, -1000, -1000, 3348, 46620,
	120, 3348, 3348, 111, -1000, -1000, -1000, 1711, 46620, 46620,
	785, 46620, -1000, 46620, 46620, -1000, -1000, 46620, 46620, 4296,
	46620, 42308, 42924, 3262, -1000, 37380, 46620, 46620, 34916, -1000,
	1412, -1000, 45, -1000, 32, 65, 1697, 65, 1697, 868,
	-1000, 621, 606, 21980, 547, 37380, 5898, -1000, -1000, 1697,
	1697, 5898, 5898, 1657, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1459, -1000, 279, 3298, -1000, -1000, -1000, -1000, -1000,
	2180, 415, 46620, 42308, 37380, 2239, 46620, 790, 46620, 46620,
	46620, 46620, 46620, -1000, 2845, 1614, -1000, 3187, 46620, 46620,
	46620, 46620, 1307, -1000, -1000, 18891, 1613, 1307, -1000, 1921,
	-1000, 10850, 13950, -232, 10850, 13950, 13950, 10850, 13950, -1000,
	10850, 271, -1000, -1000, -1000, -1000, 2177, -1000, 2171, -1000,
	-1000, -1000, -1000, -1000, 2536, 2536, -1000, 2168, -1000, -1000,
	-1000, -1000, 2167, -1000, -1000, 2166, -1000, -1000, -1000, -1000,
	-150, 2717, 1144, -1000, 2529, 3056, -210, -1000, 20129, 46620,
	46620, 405, -319, 1833, 1828, 1792, -1000, -210, -1000, 19510,
	46620, 3298, -1000, -214, 3174, 10850, 46620, -1000, 3290, -1000,
	-1000, 321, -1000, 536, 397, -1000, -1000, -1000, -1000, -1000,
	-1000, 1612, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 380, -77, -78, 1453, -1000, 46620, -1000, -1000,
	340, 37380, 39228, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	258, -1000, -1000, 190, -1000, 866, 234, 1668, -1000, -1000,
	225, 221, 205, 938, 2274, -1000, 1901, 1901, 1896, -1000,
	642, -1000, -1000, -1000, -1000, 2843, -1000, -1000, -1000, 2385,
	3309, -1000, 1717, 1717, 1569, 1569, 1569, 1569, 1569, 1835,
	1835, -1000, -1000, -1000, 6517, 2842, 12704, 12704, 12704, 12704,
	885, 885, 4024, 2640, -1000, -1000, -1000, -1000, 10850, 187,
	1920, -1000, 10850, 2310, 1404, 2210, 1446, 1611, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2713, 2709,
	2266, 3363, 2707, 10850, -1000, -1000, 1667, 1651, 1648, -1000,
	2198, 9614, -1000, -1000, -1000, 2706, 1610, 2690, -1000, -1000,
	-1000, 2687, 1647, 1196, 2682, 1800, 2681, 2680, 2674, 2673,
	1443, 10850, 10850, 10850, 10850, 2671, 1646, 1643, 10850, 10850,
	10850, 10850, 2668, 10850, 10850, 10850, 10850, 10850, 10850, 10850,
	10850, 10850, 10850, 154, 154, 154, 1438, 1429, -1000, -1000,
	1642, -1000, 2274, -1000, -1000, 3174, -1000, 2841, 2163, 1419,
	-1000, -1000, -294, 2474, 46620, 46620, 186, 46620, 2528, -279,
	46620, -1000, -1000, 2522, -1000, 2519, -1000, -1000, -1000, 1043,
	1003, 1021, 2507, 3184, 3289, 838, 46620, 1168, 2839, 46620,
	46620, 46620, 277, -1000, -1000, 1427, -1000, 234, 0, 489,
	1205, 3043, 3360, -114, 46620, 46620, 46620, 46620, 3213, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 41692, -1000, 2838,
	1640, -1000, -1000, -1000, 1654, 1654, 2274, 3040, 46620, 46620,
	3348, 3348, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1781,
	3348, 3348, 1349, 1711, 1781, -1000, -1000, 1781, -319, -1000,
	1781, -1000, -319, 1608, -319, 46620, -1000, -1000, -1000, 3211,
	2815, 1413, -1000, -1000, -1000, 3339, 1086, 778, 778, 1031,
	690, 3336, 17659, -1000, 1721, 1157, 856, 3142, 324, -1000,
	1721, -147, 761, 1721, 1721, 1721, 1721, 1721, 1721, 1721,
	631, 603, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721,
	1721, 1721, 1721, 1052, 1721, 1721, 1721, 1721, 1721, -1000,
	1721, 2836, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 718,
	572, 274, 3254, 355, -1000, 350, 1427, 3234, 378, 3166,
	1208, -1000, -1000, -1000, -1000, 26292, 26292, 21364, 26292, -1000,
	204, 65, 29, -1000, -1000, 1412, 5898, 1412, 5898, 2157,
	-1000, -1000, 855, -1000, -1000, 1205, -1000, 46620, 46620, -1000,
	-1000, 2835, 1790, -1000, -1000, 15185, -1000, 5898, 5898, -1000,
	-1000, 28140, 46620, -1000, 9, -1000, 21, 3174, -1000, -1000,
	1183, -1000, -1000, 1374, 1205, 3055, 46620, 1183, 1183, 1183,
	-1000, -1000, 16427, 46620, 46620, -1000, -1000, -1000, -1000, 3348,
	8989, -1000, 34916, -1000, -1000, 41076, -1000, 40460, 3348, 1845,
	-1000, 13950, 2064, 203, -1000, 259, -295, 207, 1985, 206,
	2274, -1000, -1000, 2666, 2665, 1639, -1000, 1631, 2662, 1624,
	1618, 2156, -1000, 80, -1000, 3168, 1224, -1000, 2834, -1000,
	1606, 3110, -1000, 1367, -1000, 1789, 1603, -1000, -1000, -1000,
	10850, 39844, 10850, 1224, 1602, 3108, 1367, 3174, 2505, -1000,
	1351, -1000, 2084, 1587, 196, -1000, -1000, -1000, 46620, 790,
	2512, 1590, 39228, 1280, -1000, 854, 1572, 1561, -1000, 37380,
	317, 37380, -1000, 37380, -1000, -1000, 392, -1000, 46620, 3170,
	-1000, -1000, -1000, 2474, 1788, -318, 46620, -1000, -1000, -1000,
	-1000, -1000, 1563, -1000, 885, 885, 4024, 1852, -1000, 12704,
	-1000, 12704, 3001, -1000, 1830, -1000, 10850, 2004, 4851, 10850,
	4851, 1132, 25060, 46620, -1000, -1000, 10850, 10850, -1000, 2996,
	-1000, -1000, -1000, -1000, 10850, 10850, 2224, -1000, 46620, -1000,
	-1000, -1000, -1000, 25060, -1000, 12704, -1000, -1000, -1000, -1000,
	10850, 1265, 1265, 2987, 1562, 154, 154, 154, 2954, 2939,
	2929, 1547, 154, 2918, 2903, 2887, 2799, 2783, 2735, 2728,
	2649, 2601, 2539, -1000, 2832, -1000, -1000, 2028, 11468, 8371,
	-1000, -1000, 302, 1345, 2155, 2503, 149, -1000, 1787, -1000,
	2501, 46620, 46620, 1091, -1000, 46620, 3359, -1000, 2500, -1000,
	-1000, -1000, 1001, 2499, -1000, 412, 2050, 191, 299, 2655,
	1343, -1000, -1000, 46620, -1000, -1000, -1000, 16427, 2815, 2831,
	2815, 131, 1721, 630, 37380, 646, -1000, 46620, 2195, 1786,
	3051, 750, 3152, 46620, 2823, 404, 2821, 2820, 3210, 468,
	49550, 46620, 1269, -1000, 1525, 517, -1000, 46620, -1000, 2239,
	-1000, 1711, -1000, -1000, 3348, -1000, -1000, 10850, 10850, 3348,
	1711, 1711, -1000, 1781, -1000, 46620, -1000, -319, 468, 49550,
	3208, 4547, 556, 2230, -1000, 46620, -1000, -1000, -1000, 892,
	-1000, 1007, 785, 46620, 1947, 1007, 1944, 2817, -1000, -1000,
	46620, 46620, 46620, 46620, -1000, -1000, 46620, -1000, 46620, 46620,
	46620, 46620, 46620, 38612, -1000, 46620, 46620, -1000, 46620, 1942,
	46620, 1917, 3162, -1000, 1721, 1721, 971, -1000, -1000, 601,
	-1000, 38612, 2150, 2141, 2127, 2126, 2498, 2497, 2491, 1721,
	1721, 2124, 2489, 37996, 2487, 1262, 2122, 2120, 2117, 2170,
	2482, 962, -1000, 2481, 2159, 2140, 2121, 46620, 2816, 2413,
	-1000, -1000, 2050, 131, 1721, 353, 46620, 1784, 1783, 630,
	484, -16, 22596, 46620, 34916, 34916, 34916, 34916, -1000, 3085,
	3084, 3073, -1000, 3077, 3071, 3086, 46620, 34916, 2815, -1000,
	37996, -1000, -1000, -1000, 1566, 1543, 3523, 1017, 10850, -1000,
	-1000, 43, 16, -1000, -1000, -1000, -1000, 37380, 2479, 547,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3283, 46620, 46620,
	731, 2648, 1316, -1000, -1000, -1000, 49550, 2798, 2798, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2798, 2798,
	2808, -1000, -1000, 2797, 2797, 2797, 2747, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2805, 2805, 2806,
	2806, 2805, -1000, -1000, 3345, -1000, 1310, -1000, -1000, 1510,
	-1000, 3345, 1857, -309, 13950, 1853, 1713, -1000, 10850, 13950,
	10850, -235, 336, -242, -1000, -1000, -1000, 2478, -1000, -1000,
	-1000, 2115, -1000, 2104, -1000, 175, 189, 1915, -210, 8371,
	424, 46620, -210, 46620, 8371, -1000, 46620, 181, -338, -339,
	168, 401, -210, 3283, 80, 10850, 3139, -1000, -1000, 46620,
	2100, -1000, -1000, -1000, 3358, 37380, 2239, 1675, 36764, -1000,
	313, -1000, 255, 579, 2476, -1000, 883, 148, 2475, 2474,
	-1000, -1000, -1000, -1000, 12704, 1654, -1000, -1000, -1000, 2274,
	10850, 2644, -1000, 1004, 1004, 2123, 2643, 2638, -1000, 2798,
	2798, -1000, 2747, 2797, 2747, 1004, 1004, 2637, -1000, 2054,
	2526, -1000, 2493, 2439, 10850, -1000, 2634, 4005, 1110, -36,
	-178, 154, 154, -1000, -1000, -1000, -1000, 154, 154, 154,
	154, -1000, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 760, -88, -269, -89, -272, -1000, 2633, 1309,
	-1000, -1000, -1000, -1000, -1000, 3466, 1308, 502, 502, 2474,
	2473, -1000, 848, 2472, 1041, 46620, 2469, -283, -1000, -1000,
	2457, -1000, -1000, 46620, 2454, -1000, 570, 46620, 46620, 2452,
	2451, 1168, 49550, 2632, 3198, 17043, 3195, 2204, -1000, -1000,
	-1000, 27524, 571, -1000, -1000, -1000, 701, 296, 2091, 566,
	-1000, 46620, 483, 3128, 1777, 2450, 46620, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3152, -1000, 954, 438, 33684, 14569,
	-1000, 406, 46620, -1000, 17043, 17043, 406, 455, 1808, -1000,
	757, 1203, 152, 34916, 46620, -1000, 34300, 2627, -1000, 1205,
	3348, -1000, 2274, 2274, -319, 3348, 3348, 1711, -1000, -1000,
	455, -1000, 406, -1000, 1298, 18275, 541, 499, 453, -1000,
	648, -1000, -1000, 739, 3137, 49550, -1000, 46620, -1000, 46620,
	-1000, 46620, 46620, 785, 10850, 3137, 46620, 832, -1000, -1000,
	1116, 442, 400, 754, 754, 1289, -1000, 3181, -1000, -1000,
	1286, -1000, -1000, -1000, -1000, 46620, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 25060, 25060, 3232, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2449,
	2432, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	46620, 1538, -1000, 1776, 2428, 2204, 27524, 1771, 1697, 2425,
	2423, 571, 2195, 1767, 882, 46620, -1000, 1197, 46620, 46620,
	-1000, 1385, -1000, 1765, 3023, 3049, 3023, -1000, -1000, -1000,
	-1000, -1000, 3011, -1000, 3002, -1000, -1000, 1385, -1000, -1000,
	-1000, -1000, -1000, 1017, -1000, 3282, 1007, 1007, 1007, 2625,
	-1000, -1000, -1000, 1280, 2624, -1000, -1000, -1000, 3383, -1000,
	-1000, -1000, -1000, -1000, -1000, 16427, 3150, 3343, 3334, 36148,
	3343, -1000, -309, 1763, -1000, 1906, 198, 1969, 46620, -1000,
	-1000, -1000, 2621, 2611, -216, 192, 3331, 3323, 1038, -1000,
	2607, 1263, -210, -1000, -1000, 1224, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -210, -1000, 1224, -1000, 175, -1000, -1000,
	3161, -1000, -1000, 2239, -1000, 254, -1000, -1000, -1000, -1000,
	-1000, -1000, 223, -1000, 46620, -1000, 1244, 147, -1000, 2274,
	-1000, -1000, -1000, -1000, -1000, 4851, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10850, -1000, -1000,
	-1000, 2384, -1000, -1000, 10850, 2606, 2421, 2605, 2420, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3388, -1000, 3322, 1527, 2599,
	2598, 1518, 2597, 2596, -1000, 10850, 2593, 3466, 980, 2418,
	980, -1000, -1000, 374, 26908, 46620, 3350, -1000, 46620, 2417,
	-1000, -1000, 2050, 565, 647, -1000, -1000, -1000, -1000, 887,
	406, 2592, 1225, -1000, -1000, -1000, -1000, 406, -1000, 2416,
	233, -1000, -1000, -1000, -1000, 2415, 2414, 2089, -1000, -1000,
	2114, 1454, 251, -1000, -1000, -1000, -1000, -1000, -1000, 2200,
	46620, 35532, 2203, 1762, -322, -1000, 2796, -1000, 1721, 1721,
	1721, 46620, 1515, -1000, 1721, 1721, 2591, -1000, -1000, 2589,
	2586, -115, 747, 1732, 1731, -1000, 2088, 26292, 34916, 34300,
	1325, -1000, 1509, -1000, -1000, -1000, -1000, -1000, -1000, 3348,
	747, -1000, 512, 2087, 12704, 2794, 12704, 2793, 548, 2792,
	1514, -1000, 46620, -1000, -1000, 46620, 3013, 2791, -1000, 2781,
	3030, 495, 2779, 2776, 46620, 2321, -1000, 3137, 46620, 740,
	3147, -1000, -1000, -1000, 387, -1000, -1000, 574, -1000, 46620,
	-1000, 46620, -1000, 1650, -1000, 25060, -1000, -1000, 1503, -1000,
	2413, 2411, -1000, -1000, 233, 2405, 5898, -1000, -1000, -1000,
	3128, 2404, 2200, 46620, -1000, 46620, 1197, 1197, 3388, 46620,
	8371, -1000, -1000, 10850, 2773, -1000, 10850, -1000, -1000, -1000,
	-1000, -1000, 2771, 3119, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2103, -1000, 10850, 10850, -1000, -1000, 783, 13950, -248,
	335, -1000, -1000, -1000, -219, 2403, -1000, -1000, 3321, 2368,
	2229, 46620, -1000, -1000, 1224, 1224, -216, -1000, -1000, 1205,
	-1000, -1000, 1077, 622, -1000, 2583, 2297, -1000, 2282, 154,
	-1000, 154, -1000, 267, 10850, -1000, 2366, -1000, -1000, -1000,
	2364, -1000, -1000, 2218, -1000, 2581, -1000, 2363, -1000, -1000,
	46620, -1000, 828, 1032, 2361, -327, 2357, 2050, 2050, 46620,
	49550, -141, -115, 17043, -141, -1000, -1000, 383, -1000, -1000,
	363, -1000, -1000, 2060, 613, -1000, -1000, 2356, 584, -1000,
	1197, -1000, 1761, 1958, 2303, 31836, 25060, 25676, 2355, -1000,
	-1000, 33684, 2103, 2103, 49770, 305, 50069, -1000, 2767, 1057,
	1728, -1000, 2080, -1000, 2073, -1000, 3348, 1325, 151, -1000,
	-1000, 1670, -1000, 1057, 2230, 3319, -1000, 3871, 46620, 3381,
	46620, 2762, 1756, 12704, -1000, 739, 3106, -1000, -1000, 3013,
	-1000, -1000, 1955, 12704, -1000, -1000, 2354, 25676, 869, 1753,
	1748, 928, 2755, -1000, 580, 3375, -1000, -1000, -1000, 965,
	2753, -1000, 1914, 1911, -1000, 46620, -1000, 31836, 31836, 743,
	743, 31836, 31836, 2752, 754, -1000, -1000, 12704, -1000, -1000,
	1721, -1000, -1000, -1000, 1721, 1622, -1000, -1000, -1000, -1000,
	-1000, -1000, 2203, -1000, -1000, 1183, -1000, 3298, -1000, -1000,
	2274, 46620, 2274, 33068, -1000, 3318, 3316, -1000, 2274, 1144,
	-1000, -309, 46620, 46620, -222, 2072, -1000, 2352, 185, -1000,
	-1000, 1175, -219, -224, 111, 25060, 1742, -1000, -1000, -1000,
	-1000, -1000, 2572, -1000, 1015, -1000, -1000, -1000, 1144, 2544,
	2531, -1000, -1000, -1000, -1000, 371, 46620, -1000, 2293, -1000,
	2351, 2341, 549, -107, -1000, -1000, 431, -1000, -1000, -1000,
	577, 2281, -1000, -1000, 362, -1000, -1000, -1000, 2200, 2340,
	-1000, -1000, 139, -1000, 1726, 1501, -1000, 2747, 10850, -1000,
	-1000, -1000, -1000, -1000, -1000, 728, -1000, 406, 49939, -1000,
	1157, -1000, 1077, 728, 30604, 644, 306, -1000, 2071, -1000,
	-1000, 3388, -1000, 637, -1000, 544, -1000, 1498, -1000, 1464,
	32452, 2065, 1928, -1000, 49901, 864, -1000, -1000, 4024, -1000,
	-1000, -1000, -1000, -1000, -1000, 2336, 2330, -1000, -1000, -1000,
	-1000, -1000, 2058, 2746, 73, 3228, 2315, -1000, -1000, 2745,
	1451, 1450, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1439, 1399, 31836, -1000, -1000, 4024, 2055, 25060, 1721,
	-1000, -1000, 1395, 1394, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2744, -1000, -1000, 3314, -222, -226, 2312, 173, 182,
	-1000, 2308, -1000, -1000, 665, -211, 140, 137, 135, -1000,
	-1000, -1000, 10850, -1000, -1000, 46620, 826, 133, -1000, 1724,
	-1000, -1000, 2050, 46620, 573, -1000, -1000, -1000, -1000, 222,
	-1000, -1000, -1000, -1000, -1000, -1000, 2303, 2302, -1000, 31836,
	3181, 2193, 506, 3308, -1000, 50069, -1000, 1721, -1000, 506,
	1387, -1000, 1721, 1721, -1000, 458, -1000, 1727, -1000, 2045,
	-1000, 3298, -1000, 457, -1000, 509, -1000, -1000, -1000, 1357,
	-1000, -1000, -1000, 49901, 530, -1000, 652, 2743, -1000, -1000,
	2517, 10850, 2647, 1721, 2215, -103, 31836, 3024, 3015, 2931,
	2801, 1344, -1000, -1000, 25060, -1000, -1000, 31220, 46620, 2229,
	-1000, -1000, 2300, -1000, 812, 172, 182, -1000, 3306, 159,
	3305, 3304, 1101, 1891, -1000, 156, 150, 144, -1000, -1000,
	-1000, -1000, -1000, 368, -1000, 2293, 2287, 2284, 564, -1000,
	312, -1000, -1000, -1000, 310, -1000, -1000, 3181, -1000, 3303,
	556, -1000, 25060, -1000, -1000, 30604, 2103, 2103, -1000, -1000,
	2041, -1000, -1000, -1000, -1000, 2034, -1000, -1000, -1000, 1331,
	-1000, 46620, 914, 7753, -1000, 2160, -1000, 46620, -1000, 3047,
	-1000, 280, 1320, 310, 743, 310, 743, 310, 743, 310,
	743, 308, -1000, -1000, -1000, 1318, -1000, -1000, -1000, 2316,
	2021, 192, 184, 3302, -1000, 2229, 3300, 2229, 2229, -1000,
	157, 665, -1000, -1000, -1000, 46620, -1000, -1000, -1000, 2279,
	-1000, -1000, -1000, -1000, 1721, 1721, 2273, 2259, 419, -1000,
	-1000, -1000, 29988, 541, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 530, 50069, -1000, 7753, 1293, -1000, 2274, -1000, 754,
	-1000, -1000, 3046, 3014, 3354, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 46620, 3226, 24444, 165, -1000,
	-1000, -1000, 2238, -1000, 2229, -1000, -1000, 1710, -1000, -1000,
	-265, 2010, 1962, -1000, -1000, 46620, -1000, 46620, 512, -1000,
	50069, 1272, -1000, 7753, -1000, -1000, 3372, -1000, 3369, 865,
	865, 310, 310, 310, 310, -1000, -1000, 46620, -1000, 1252,
	-1000, -1000, -1000, 1508, -1000, -1000, -1000, -1000, 2225, -1000,
	-1000, 2128, -1000, -1000, -1000, 1236, 2230, -1000, -1000, -1000,
	-1000, -1000, 2048, 595, -1000, 1073, -1000, 1637, -1000, 29372,
	46620, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 46620, 7135,
	-1000, 1505, -1000, -1000, 2274, 46620, -1000,
}

var yyPgo = [...]int{
	0, 193, 3408, 251, 191, 4084, 101, 265, 246, 228,
	264, 4079, 4077, 4076, 4075, 3166, 3160, 4073, 4072, 4071,
	4070, 4069, 4068, 4067, 4066, 4065, 4064, 4063, 4049, 4040,
	4039, 4038, 4037, 4036, 4035, 4034, 4033, 4031, 4029, 4026,
	4025, 4024, 4023, 4022, 4021, 4007, 4005, 261, 4004, 4003,
	4001, 4000, 3999, 3994, 3993, 3971, 3970, 3969, 3968, 3967,
	3966, 3965, 3963, 3962, 3960, 3959, 3958, 3956, 3954, 3953,
	3951, 3950, 3949, 3948, 3947, 3945, 3944, 3943, 3939, 254,
	3938, 3937, 219, 3936, 3158, 3935, 3929, 3927, 3926, 3925,
	3924, 3920, 243, 3918, 3917, 3916, 3915, 3914, 3913, 3911,
	3910, 3909, 3908, 3907, 3906, 250, 3905, 3904, 3903, 3902,
	267, 3901, 248, 3893, 185, 158, 3889, 3886, 3885, 3884,
	3883, 3882, 3881, 3880, 3877, 3875, 3874, 3873, 3872, 249,
	200, 77, 3871, 53, 3870, 3869, 226, 3868, 156, 3867,
	154, 3862, 3860, 3854, 3853, 3849, 3848, 3847, 3846, 3844,
	3841, 3840, 3838, 3837, 3836, 3830, 3829, 3828, 3824, 3822,
	3821, 3819, 3818, 3816, 56, 3815, 272, 3811, 83, 3808,
	205, 3804, 82, 3802, 81, 143, 259, 1899, 276, 256,
	197, 198, 97, 3800, 316, 3799, 167, 240, 170, 35,
	3798, 145, 3797, 273, 48, 43, 257, 146, 61, 168,
	142, 3794, 223, 110, 118, 3785, 3784, 152, 3783, 238,
	183, 3781, 121, 3780, 3779, 3776, 3774, 3770, 210, 202,
	3769, 3767, 136, 3766, 3765, 108, 135, 3764, 85, 132,
	178, 131, 3763, 114, 133, 104, 3761, 128, 109, 3760,
	92, 3759, 3757, 3756, 3755, 188, 3754, 3753, 141, 71,
	3752, 3751, 3750, 74, 3749, 79, 3748, 39, 3747, 76,
	3745, 3744, 3741, 3739, 3738, 3737, 3736, 3735, 3733, 3732,
	3731, 3730, 58, 3729, 3728, 7, 11, 16, 3727, 27,
	3726, 179, 3725, 3722, 3720, 3719, 3718, 96, 100, 3715,
	91, 173, 3713, 9, 29, 78, 3712, 3711, 230, 244,
	112, 157, 3710, 285, 3707, 3706, 3700, 165, 3697, 621,
	3696, 3694, 3693, 3692, 3691, 3689, 22, 3686, 1, 231,
	45, 3685, 138, 151, 3684, 42, 32, 3682, 50, 122,
	204, 147, 107, 3680, 3678, 3677, 527, 224, 99, 28,
	0, 102, 237, 164, 3675, 3674, 3671, 270, 3670, 235,
	227, 172, 291, 269, 258, 3669, 3668, 67, 3666, 169,
	30, 55, 139, 64, 24, 195, 3663, 1487, 8, 184,
	3661, 217, 3660, 206, 15, 116, 155, 3659, 3658, 38,
	274, 3653, 3652, 3651, 137, 3650, 3649, 189, 80, 3648,
	3647, 3646, 3645, 37, 3644, 41, 13, 3643, 120, 3639,
	262, 3631, 260, 144, 190, 181, 166, 229, 242, 89,
	86, 3625, 1820, 162, 111, 17, 3622, 232, 3621, 174,
	125, 3620, 95, 3617, 241, 275, 214, 3615, 196, 10,
	51, 40, 31, 49, 12, 311, 208, 3614, 3613, 23,
	54, 3612, 57, 3610, 19, 3609, 3608, 44, 3606, 65,
	5, 3605, 3604, 18, 20, 3603, 34, 218, 180, 134,
	94, 75, 3600, 3599, 52, 140, 3587, 149, 161, 163,
	3586, 84, 3585, 3583, 3578, 3577, 745, 3576, 266, 3572,
	3569, 3568, 3567, 3564, 3562, 3560, 3559, 225, 3558, 115,
	47, 3557, 3556, 3555, 3554, 87, 153, 3552, 3551, 3549,
	3548, 33, 148, 3547, 14, 3546, 25, 21, 36, 3542,
	105, 3540, 3, 194, 3539, 3537, 4, 3536, 3535, 2,
	3534, 3533, 129, 3532, 103, 26, 175, 106, 3517, 3516,
	88, 221, 160, 3514, 3513, 113, 245, 209, 3512, 72,
	255, 271, 3511, 212, 3508, 3507, 3504, 3499, 3498, 3497,
	1180, 3496, 3495, 233, 66, 90, 3494, 236, 124, 3493,
	3492, 98, 171, 126, 127, 59, 93, 3491, 123, 207,
	3490, 203, 3488, 253, 3487, 3482, 117, 3480, 3477, 3476,
	3475, 201, 3466, 3464, 199, 239, 3463, 3460, 283, 3445,
	3443, 3442, 3441, 3439, 3437, 3423, 3420, 3416, 3404, 252,
	268, 3402,
}

//line mysql_sql.y:12440
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 594, 597, 597, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 120,
	120, 331, 331, 332, 332, 122, 327, 327, 326, 326,
	123, 124, 125, 573, 573, 126, 127, 156, 572, 572,
	158, 158, 158, 158, 158, 447, 121, 121, 121, 121,
	121, 121, 121, 162, 162, 162, 162, 162, 119, 579,
	579, 579, 580, 580, 116, 145, 144, 147, 147, 146,
	146, 143, 143, 139, 142, 142, 141, 141, 140, 135,
	137, 137, 136, 138, 138, 117, 105, 118, 521, 521,
	520, 520, 519, 519, 472, 472, 473, 473, 318, 318,
	318, 518, 518, 518, 517, 517, 516, 516, 515, 515,
	513, 513, 514, 512, 511, 511, 511, 509, 509, 509,
	505, 505, 507, 506, 506, 508, 500, 500, 503, 503,
	501, 501, 501, 501, 504, 499, 499, 499, 498, 498,
	104, 104, 104, 414, 414, 103, 103, 428, 428, 428,
	428, 428, 426, 426, 426, 426, 426, 426, 425, 425,
	424, 424, 429, 429, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 93, 93, 93, 93, 93,
	93, 98, 98, 98, 99, 585, 585, 584, 584, 586,
	586, 586, 586, 587, 587, 96, 96, 96, 97, 423,
	423, 423, 94, 95, 95, 413, 413, 418, 418, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 422, 422, 422, 420, 420, 419, 419, 421,
	421, 87, 87, 87, 90, 89, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 88, 88, 88, 88, 88,
	88, 83, 83, 83, 83, 83, 82, 82, 84, 84,
	410, 410, 409, 100, 100, 101, 582, 582, 581, 583,
	583, 583, 583, 102, 108, 108, 108, 108, 108, 108,
	108, 108, 107, 107, 110, 110, 109, 111, 92, 92,
	92, 92, 92, 92, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 546, 546, 546,
	548, 548, 345, 346, 598, 348, 344, 344, 344, 542,
	542, 543, 544, 545, 545, 545, 106, 14, 208, 208,
	446, 446, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 13, 81, 86, 86, 280, 280, 285, 285, 161,
	286, 286, 286, 291, 291, 292, 292, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 267,
	267, 267, 262, 262, 262, 262, 263, 263, 264, 264,
	265, 265, 265, 265, 266, 266, 337, 337, 287, 287,
	287, 289, 289, 288, 284, 282, 282, 282, 282, 282,
	282, 282, 283, 283, 283, 283, 290, 290, 79, 85,
	85, 85, 85, 560, 560, 80, 571, 571, 476, 476,
	359, 359, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 481, 482,
	355, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 54, 57, 58, 160, 53,
	53, 53, 399, 399, 52, 599, 599, 330, 330, 67,
	66, 56, 68, 69, 70, 71, 72, 73, 51, 65,
	65, 65, 65, 65, 65, 65, 65, 76, 494, 494,
	601, 601, 601, 74, 75, 475, 475, 475, 64, 63,
	62, 61, 60, 60, 50, 50, 49, 49, 55, 151,
	59, 152, 152, 352, 352, 352, 354, 354, 350, 600,
	600, 442, 442, 353, 353, 48, 48, 48, 48, 77,
	351, 351, 329, 349, 349, 349, 12, 12, 10, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 26, 27, 29, 407,
	407, 404, 28, 20, 19, 19, 23, 22, 18, 18,
	21, 24, 25, 25, 9, 9, 9, 9, 15, 15,
	16, 181, 181, 234, 234, 554, 554, 550, 550, 551,
	551, 551, 552, 552, 553, 553, 112, 488, 488, 488,
	488, 488, 488, 8, 8, 203, 203, 487, 487, 487,
	487, 487, 487, 411, 411, 411, 531, 531, 531, 532,
	202, 202, 197, 197, 489, 489, 376, 533, 533, 497,
	497, 496, 496, 495, 495, 200, 200, 201, 201, 184,
	184, 130, 130, 502, 502, 502, 502, 510, 510, 471,
	471, 272, 272, 320, 320, 321, 321, 174, 174, 175,
	175, 175, 175, 175, 175, 588, 588, 589, 590, 591,
	591, 592, 592, 592, 593, 593, 593, 593, 593, 539,
	539, 541, 541, 540, 199, 199, 195, 195, 196, 196,
	196, 194, 194, 193, 192, 192, 191, 189, 189, 189,
	190, 190, 190, 207, 207, 177, 177, 177, 176, 176,
	176, 176, 176, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 178, 178, 547, 547, 547,
	477, 477, 477, 484, 484, 300, 300, 301, 301, 299,
	299, 179, 179, 180, 180, 180, 180, 298, 298, 297,
	182, 182, 188, 187, 187, 183, 183, 183, 183, 308,
	308, 307, 307, 307, 307, 115, 128, 128, 129, 206,
	206, 306, 305, 305, 305, 305, 205, 205, 204, 204,
	198, 198, 186, 186, 186, 186, 304, 185, 302, 578,
	578, 577, 577, 576, 574, 574, 574, 575, 575, 575,
	575, 523, 523, 523, 523, 523, 338, 338, 338, 343,
	343, 341, 341, 341, 341, 341, 347, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 39,
	217, 218, 40, 219, 219, 220, 220, 221, 221, 222,
	223, 224, 224, 224, 224, 38, 209, 209, 210, 210,
	211, 211, 212, 213, 213, 213, 216, 214, 215, 215,
	596, 596, 595, 37, 37, 30, 165, 165, 166, 166,
	166, 168, 168, 268, 268, 268, 167, 167, 169, 169,
	169, 555, 557, 557, 559, 558, 558, 558, 561, 561,
	561, 561, 561, 562, 562, 562, 562, 563, 563, 31,
	148, 148, 172, 172, 153, 566, 566, 566, 565, 565,
	567, 567, 568, 568, 324, 324, 325, 325, 163, 164,
	164, 155, 150, 171, 171, 171, 171, 171, 173, 173,
	236, 236, 149, 154, 157, 159, 556, 564, 564, 564,
	408, 408, 405, 406, 406, 403, 402, 402, 402, 570,
	570, 569, 569, 569, 339, 339, 32, 398, 398, 400,
	401, 401, 401, 392, 392, 392, 392, 36, 396, 396,
	397, 397, 397, 397, 397, 397, 397, 393, 393, 395,
	395, 391, 391, 391, 391, 391, 391, 391, 35, 170,
	170, 390, 390, 387, 387, 385, 385, 386, 386, 384,
	384, 384, 388, 388, 43, 78, 44, 45, 46, 42,
	389, 389, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 132, 131, 131, 131, 131, 131, 134, 134,
	323, 323, 322, 322, 133, 269, 269, 41, 247, 247,
	463, 463, 458, 458, 458, 458, 458, 479, 479, 479,
	459, 459, 459, 460, 460, 460, 462, 462, 462, 461,
	461, 461, 461, 461, 478, 478, 480, 480, 480, 430,
	430, 431, 431, 431, 434, 434, 450, 450, 451, 451,
	449, 449, 456, 456, 455, 455, 454, 454, 453, 453,
	452, 452, 452, 452, 445, 445, 444, 444, 432, 432,
	432, 432, 432, 433, 433, 433, 443, 443, 448, 448,
	296, 296, 295, 295, 255, 255, 256, 256, 294, 294,
	253, 253, 254, 254, 254, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	529, 529, 530, 258, 258, 270, 270, 270, 270, 270,
	270, 257, 257, 259, 259, 235, 235, 233, 233, 225,
	225, 225, 225, 225, 226, 226, 227, 227, 228, 228,
	228, 232, 232, 231, 231, 231, 231, 229, 229, 230,
	230, 230, 230, 230, 230, 416, 416, 526, 526, 527,
	527, 522, 522, 522, 525, 525, 525, 525, 525, 525,
	525, 528, 528, 528, 524, 524, 237, 317, 317, 317,
	340, 340, 340, 340, 342, 316, 316, 316, 252, 252,
	251, 251, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 415, 415, 356, 356, 357, 357,
	279, 278, 278, 278, 278, 278, 276, 277, 275, 275,
	275, 275, 275, 274, 274, 273, 273, 273, 394, 394,
	271, 271, 261, 261, 261, 260, 260, 260, 457, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 314, 314,
	314, 315, 315, 315, 315, 315, 315, 315, 315, 366,
	366, 372, 372, 538, 538, 537, 238, 238, 238, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 248, 248,
	248, 439, 439, 439, 439, 440, 440, 440, 440, 441,
	441, 441, 437, 437, 438, 438, 377, 378, 378, 485,
	485, 486, 486, 435, 435, 436, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 493, 493,
	493, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 549, 549, 549,
	534, 534, 534, 535, 535, 535, 535, 535, 535, 535,
	535, 535, 535, 535, 535, 536, 536, 536, 536, 536,
	536, 536, 536, 536, 536, 536, 536, 536, 536, 536,
	536, 536, 312, 312, 312, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 379, 379, 380, 380, 490, 490, 490,
	490, 490, 490, 491, 491, 492, 492, 492, 492, 483,
	483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
	483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
	483, 483, 483, 483, 483, 483, 483, 483, 364, 309,
	309, 309, 381, 373, 373, 374, 374, 375, 375, 367,
	367, 367, 367, 367, 367, 368, 368, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 369,
	369, 371, 371, 383, 383, 383, 382, 382, 382, 382,
	382, 382, 382, 250, 250, 250, 250, 361, 361, 361,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 240, 240, 240, 240, 244, 244, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 245, 245, 245, 245, 245, 243, 243, 243,
	243, 243, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 113, 114, 114, 242, 319, 319, 464, 464, 467,
	467, 465, 465, 466, 468, 468, 468, 469, 469, 469,
	470, 470, 470, 474, 474, 328, 328, 328, 336, 336,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	4, 4, 4, 1, 2, 5, 6, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 11, 13, 5, 7, 9, 8, 6, 4, 0,
	1, 1, 0, 1, 5, 2, 2, 6, 9, 6,
	9, 4, 7, 8, 0, 1, 1, 2, 4, 6,
	1, 2, 4, 0, 2, 10, 11, 2, 0, 2,
	1, 3, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 2, 3, 1, 3, 1, 1, 1, 3,
	1, 1, 1, 1, 0, 3, 3, 0, 3, 3,
	0, 1, 3, 0, 1, 3, 0, 2, 1, 2,
	3, 4, 3, 3, 1, 0, 1, 1, 0, 1,
	8, 5, 7, 0, 3, 8, 5, 1, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 4, 1, 3, 1, 2, 2, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 2, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 2, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 1, 1, 2, 2,
	1, 1, 1, 3, 2, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 4, 5, 1, 3, 3, 1, 2,
	2, 2, 1, 2, 2, 3, 4, 4, 6, 1,
	1, 1, 2, 4, 6, 1, 4, 1, 3, 3,
	4, 4, 4, 4, 3, 3, 2, 4, 4, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 2, 2, 0, 1, 4, 2,
	4, 1, 5, 3, 2, 1, 2, 2, 4, 4,
	5, 2, 1, 3, 4, 4, 1, 2, 9, 7,
	1, 3, 3, 1, 1, 3, 1, 3, 2, 1,
	2, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 2, 4, 3, 3, 1, 1,
	1, 1, 1, 1, 2, 3, 4, 7, 2, 3,
	3, 4, 5, 3, 4, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 1, 1, 1, 1, 6, 4, 1, 1,
	0, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 10, 7, 4, 4, 1, 3, 1, 6, 7,
	3, 3, 3, 1, 1, 1, 3, 2, 4, 5,
	5, 6, 5, 5, 3, 2, 2, 1, 3, 4,
	3, 7, 5, 8, 2, 2, 1, 3, 2, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 0, 1,
	2, 1, 3, 2, 1, 2, 2, 1, 2, 3,
	2, 2, 3, 6, 3, 3, 1, 1, 7, 7,
	7, 8, 8, 0, 4, 7, 0, 3, 0, 2,
	0, 1, 1, 1, 1, 4, 2, 2, 3, 3,
	4, 5, 3, 4, 4, 2, 2, 2, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 3, 3, 2,
	5, 5, 0, 2, 7, 0, 1, 0, 1, 5,
	5, 3, 3, 2, 4, 4, 4, 4, 4, 1,
	1, 1, 3, 3, 1, 1, 1, 6, 0, 1,
	1, 1, 1, 5, 5, 0, 1, 1, 3, 3,
	3, 4, 7, 7, 5, 4, 7, 8, 3, 3,
	2, 3, 4, 0, 2, 2, 0, 2, 2, 1,
	1, 1, 1, 0, 1, 5, 5, 6, 4, 3,
	1, 3, 1, 1, 3, 5, 2, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 4, 1,
	3, 1, 4, 6, 6, 4, 4, 4, 4, 4,
	3, 6, 3, 5, 1, 1, 2, 2, 11, 8,
	9, 1, 3, 2, 4, 0, 2, 0, 1, 1,
	1, 1, 0, 1, 0, 1, 4, 2, 1, 5,
	4, 4, 2, 5, 5, 1, 3, 2, 1, 5,
	4, 4, 2, 0, 5, 4, 0, 1, 3, 3,
	1, 3, 1, 3, 1, 3, 4, 0, 1, 0,
	1, 1, 3, 1, 1, 0, 4, 1, 3, 2,
	1, 0, 8, 0, 4, 7, 4, 0, 2, 0,
	2, 0, 2, 0, 4, 1, 3, 1, 1, 6,
	4, 5, 7, 4, 5, 0, 1, 3, 8, 0,
	6, 0, 4, 6, 1, 1, 1, 1, 1, 2,
	3, 1, 3, 6, 0, 3, 0, 1, 2, 4,
	4, 0, 1, 3, 1, 3, 3, 0, 1, 1,
	0, 2, 2, 0, 2, 3, 3, 3, 1, 3,
	3, 3, 3, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 7, 7, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	2, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 3, 1, 1, 1, 4, 4, 4, 3, 2,
	2, 2, 3, 2, 3, 4, 1, 3, 4, 0,
	2, 1, 1, 2, 2, 2, 0, 1, 2, 4,
	1, 3, 1, 3, 2, 3, 1, 4, 3, 0,
	1, 1, 2, 5, 2, 2, 2, 0, 2, 3,
	3, 0, 1, 3, 1, 3, 0, 1, 2, 1,
	1, 0, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 1, 7, 1, 3, 0, 1, 1, 3, 1,
	3, 0, 1, 1, 1, 14, 1, 3, 0, 1,
	1, 3, 1, 1, 2, 4, 1, 1, 1, 1,
	0, 1, 2, 9, 9, 7, 1, 2, 3, 3,
	3, 0, 4, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 4, 1, 1, 1, 3, 3,
	4, 3, 3, 0, 1, 1, 1, 0, 2, 7,
	8, 10, 2, 2, 8, 0, 3, 3, 0, 3,
	0, 3, 0, 5, 1, 3, 0, 3, 3, 0,
	2, 9, 8, 0, 2, 2, 3, 3, 0, 2,
	0, 2, 4, 4, 4, 4, 1, 0, 2, 2,
	1, 3, 2, 1, 3, 2, 1, 3, 2, 0,
	1, 3, 4, 3, 1, 1, 4, 1, 3, 1,
	1, 1, 1, 0, 1, 1, 1, 11, 0, 2,
	3, 3, 2, 2, 3, 1, 1, 1, 3, 3,
	4, 0, 2, 2, 2, 2, 2, 2, 6, 0,
	4, 1, 1, 0, 3, 0, 1, 1, 2, 4,
	4, 4, 0, 1, 8, 2, 4, 4, 4, 9,
	0, 2, 11, 9, 11, 8, 6, 9, 7, 10,
	7, 6, 2, 2, 9, 4, 5, 3, 0, 4,
	1, 3, 0, 3, 6, 0, 2, 10, 0, 2,
	0, 2, 0, 3, 2, 4, 3, 0, 2, 1,
	0, 2, 3, 0, 2, 3, 0, 2, 1, 0,
	3, 2, 4, 3, 0, 1, 0, 1, 1, 0,
	6, 0, 3, 5, 0, 4, 0, 3, 1, 3,
	4, 5, 0, 3, 1, 3, 2, 3, 1, 2,
	0, 4, 6, 5, 0, 2, 0, 2, 4, 5,
	4, 5, 1, 5, 6, 5, 0, 3, 0, 1,
	1, 3, 3, 3, 0, 4, 1, 3, 3, 3,
	0, 1, 1, 3, 2, 3, 3, 3, 4, 4,
	3, 3, 3, 3, 4, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 5, 4,
	1, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 4, 0,
	5, 5, 5, 5, 0, 1, 1, 3, 1, 1,
	1, 1, 1, 7, 9, 7, 9, 2, 1, 7,
	9, 7, 9, 8, 5, 0, 1, 0, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 3, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 2, 1, 2, 2, 1, 1, 2, 2, 2,
	3, 3, 2, 2, 1, 5, 6, 4, 1, 1,
	1, 5, 4, 1, 1, 2, 0, 1, 1, 2,
	5, 0, 1, 1, 2, 2, 3, 3, 1, 1,
	2, 2, 2, 0, 1, 2, 2, 2, 0, 3,
	0, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 3, 5, 2, 2, 2,
	2, 4, 1, 1, 2, 5, 6, 8, 6, 6,
	6, 1, 1, 1, 1, 1, 1, 3, 4, 4,
	4, 7, 9, 7, 7, 7, 9, 7, 7, 0,
	2, 0, 1, 1, 2, 4, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 2, 2, 2, 0, 1,
	1, 1, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 5, 0, 1, 3, 0, 1, 0,
	2, 0, 2, 0, 1, 6, 8, 8, 6, 6,
	5, 5, 5, 6, 6, 6, 6, 5, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 1, 1,
	1, 4, 4, 6, 8, 6, 4, 5, 4, 4,
	4, 3, 4, 6, 6, 7, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 8, 4, 2, 3, 2, 4,
	2, 2, 4, 6, 2, 2, 4, 6, 4, 2,
	4, 4, 4, 0, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 3, 0, 1, 1, 3, 1, 3, 3,
	3, 3, 3, 2, 1, 1, 1, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 1, 3, 4,
	4, 5, 4, 5, 3, 4, 5, 6, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 2, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 4,
	1, 2, 3, 5, 1, 1, 3, 0, 1, 0,
	3, 0, 3, 3, 0, 3, 5, 0, 3, 5,
	0, 1, 1, 0, 1, 1, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -594, -597, -2, -5, 624, -1, -4, -114, -87,
	-7, -14, -116, -117, -8, -112, -9, -10, -12, -91,
	-107, -109, -111, -110, -47, -11, -106, -82, -83, -93,
	-100, -103, -104, -105, -118, -113, -115, -174, -119, -120,
	-121, -162, -124, -126, -127, 614, -88, -89, -90, -33,
	-32, -31, -30, -148, -153, -156, -158, -122, 547, 620,
	450, 14, 499, -15, -16, -539, -17, 261, -344, -345,
	-346, -348, -598, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -151,
	-152, -77, -57, -78, -58, -160, -123, -80, -79, -85,
	-81, -86, -150, -155, -13, -161, 236, -84, 76, -94,
	-95, -96, -97, -98, -99, -101, -102, 374, 380, 437,
	613, 61, -175, -177, 633, 634, 637, 534, 537, 160,
	161, 163, 164, -34, -35, -36, -37, -38, -39, -41,
	-40, -42, -43, -44, -45, -46, 232, 16, 542, -18,
	-21, -19, -22, -20, -28, -29, -27, -24, -26, -149,
	-25, -154, -23, -157, -159, -125, 256, 255, 38, 322,
	323, 324, 378, 254, 233, 15, 31, 42, 353, -176,
	83, 535, 234, -178, 13, 639, -6, -3, -2, -135,
	-139, -143, -146, -147, -144, -145, -4, -114, 118, 246,
	615, -340, 370, 616, 618, 617, 86, 94, -333, -335,
	450, 261, 374, 380, 613, 634, 637, 534, 537, 549,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	561, 562, 563, 564, 574, 575, 565, 566, 567, 568,
	569, 570, 571, 572, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 502, 599,
	600, 601, 602, 530, 557, 593, 594, 595, 596, 351,
	352, 539, 273, 297, 405, 303, 310, 160, 179, 173,
	202, 193, 535, 168, 277, 315, 278, 93, 163, 485,
	108, 462, 434, 166, 292, 294, 296, 531, 532, 364,
	299, 529, 298, 300, 302, 533, 279, 354, 189, 184,
	291, 275, 182, 280, 40, 281, 207, 282, 283, 544,
	458, 350, 464, 307, 52, 432, 183, 459, 295, 461,
	211, 215, 476, 477, 177, 178, 466, 479, 206, 209,
	210, 253, 347, 348, 43, 541, 265, 480, 213, 205,
	200, 488, 311, 309, 204, 176, 199, 276, 65, 217,
	216, 218, 428, 429, 430, 431, 284, 285, 368, 475,
	196, 185, 355, 169, 23, 483, 260, 463, 381, 286,
	304, 312, 212, 214, 267, 272, 543, 436, 271, 308,
	481, 181, 264, 293, 259, 484, 170, 383, 287, 164,
	301, 478, 487, 64, 396, 175, 167, 631, 250, 161,
	269, 274, 288, 289, 290, 528, 314, 313, 305, 536,
	197, 266, 203, 187, 174, 198, 162, 268, 486, 397,
	611, 353, 415, 195, 192, 270, 243, 482, 465, 165,
	419, 398, 190, 316, 606, 607, 608, 369, 346, 317,
	318, 188, 257, 456, 457, 321, 425, 337, 399, 435,
	406, 400, 224, 225, 325, 468, 470, 208, 609, 326,
	327, 328, 460, 329, 330, 331, 332, 373, 56, 58,
	95, 98, 97, 635, 636, 63, 29, 359, 362, 394,
	401, 339, 612, 540, 336, 340, 341, 363, 25, 417,
	385, 421, 420, 48, 49, 50, 53, 54, 55, 57,
	59, 60, 51, 527, 378, 391, 489, 45, 47, 388,
	27, 365, 416, 438, 335, 418, 449, 46, 447, 448,
	469, 26, 367, 366, 62, 44, 424, 426, 427, 319,
	333, 376, 621, 490, 371, 387, 390, 372, 338, 361,
	392, 67, 66, 384, 622, 379, 377, 334, 545, 546,
	342, 573, 356, 433, 524, 523, 522, 521, 520, 519,
	518, 517, 322, 323, 324, 402, 403, 404, 414, 407,
	408, 409, 410, 411, 412, 413, 452, 453, 623, 471,
	473, 474, 472, 238, 638, 357, 358, 241, 625, 626,
	96, 627, 629, 628, 28, 630, -421, -419, -340, 535,
	613, 380, 534, 537, 374, 353, 634, 637, 378, 261,
	322, 323, 324, 450, 351, -219, -340, 638, -184, 245,
	39, -233, -340, -184, -84, -16, -15, -176, -177, -233,
	240, -349, 24, 432, -92, 433, 236, 83, 77, -340,
	-9, -105, -8, -112, -82, -174, 437, -347, -340, 322,
	322, -347, 240, -342, 271, 413, -340, -476, 246, -425,
	-398, 272, -424, -400, -427, -401, 32, 232, 234, 233,
	547, 268, 16, 378, 242, 14, 13, 379, 254, 25,
	26, 28, 15, 380, 382, 29, 383, 386, 387, 388,
	42, 391, 392, 261, 86, 94, 89, 279, -218, -340,
	-375, -367, 115, -370, -362, -363, -365, -318, -513, -360,
	83, 142, 143, 150, 116, 640, -364, -457, 36, 118,
	553, 557, 593, 500, -310, -311, -312, -313, -314, -315,
	-340, -514, -512, 89, 99, 101, 105, 106, 104, 102,
	154, 186, 103, 90, 155, -177, 86, -534, 563, -334,
	586, 599, 600, 601, 602, 585, 61, -483, -492, 239,
	-490, 153, 191, 257, 187, 14, 148, 425, 188, 594,
	595, 596, 560, 582, 502, 564, 574, 589, 555, 556,
	558, 550, 551, 552, 554, 565, 567, 581, -493, 577,
	587, 588, 573, 597, 598, 590, 591, 592, 629, 88,
	87, 580, 579, 566, 561, 562, 568, 549, 559, 569,
	570, 578, 583, 584, 362, 108, 363, 364, 492, 354,
	365, 246, 432, 70, 366, 367, 368, 369, 370, 499,
	371, 71, 372, 361, 261, 415, 373, 190, 208, 504,
	503, 505, 496, 493, 491, 494, 495, 497, 498, 571,
	572, 576, -128, -129, 604, -588, -303, -589, 6, 7,
	8, 9, -590, 155, -579, 434, 543, 89, 315, 351,
	17, 492, 632, 533, 632, 533, 165, 162, -412, 165,
	114, 170, 169, -412, 632, 167, 631, 325, 267, -389,
	-165, 351, 415, 329, 95, 271, -392, -390, 531, -478,
	319, 315, 291, 241, 111, -166, 251, 250, 109, 492,
	239, 389, 310, 56, 58, -550, -551, 229, 230, 231,
	-541, 525, -540, -340, 632, 364, 97, 98, 631, 27,
	240, 375, 267, 470, 468, 469, 471, 472, 473, 474,
	-65, -494, -475, 465, 464, -353, 457, 463, 455, 467,
	458, 352, 331, 547, 330, 232, 625, 532, 526, -328,
	399, 435, 489, 490, 376, 436, 476, 478, 459, 108,
	194, 191, 241, 243, 240, 631, 351, 492, 415, 95,
	329, -550, 162, 476, 478, 434, 271, 413, 41, -418,
	425, -417, -419, 477, 488, 87, 88, 475, -328, 108,
	456, 456, -588, -303, -175, -177, -115, -539, 533, 632,
	241, 351, 415, 271, 242, 240, 528, 531, 243, 492,
	239, 322, 375, 267, 329, 95, 167, 631, -477, -547,
	32, -484, 226, 227, 228, 33, 34, -1, 122, 639,
	-367, -367, -6, 642, -6, -367, -340, -340, 157, -240,
	-244, -241, -243, -242, -246, -245, 191, 192, 153, 195,
	201, 197, 198, 199, 200, 202, 203, 204, 205, 206,
	209, 210, 207, 31, 208, 257, 187, 188, 189, 190,
	211, 173, 193, 540, 219, 174, 220, 175, 221, 176,
	222, 177, 178, 223, 179, 182, 183, 184, 185, 181,
	156, -208, 89, 32, 83, 156, 89, -200, 263, -184,
	-233, -225, 156, 640, -200, -588, -193, -194, 11, -233,
	-316, -340, 434, 125, -92, 77, -92, 433, 77, -542,
	-543, -544, -546, 236, 433, 432, -110, 156, 279, 17,
	-347, -347, 81, -233, -400, 271, -425, -398, 36, 80,
	157, 244, 157, 80, 83, 376, 351, 415, 377, 492,
	240, 389, 243, 271, 390, 351, 415, 240, 243, 492,
	271, 351, 240, 243, 415, 271, 390, 351, 455, 456,
	243, 27, 381, 384, 385, 456, -498, 488, 157, 114,
	111, 112, 113, -367, 132, -382, 125, 126, 127, 128,
	129, 130, 131, 139, 138, 149, 142, 143, 144, 145,
	146, 147, 148, 140, 141, 135, 115, 133, 137, 134,
	117, 152, -177, -367, -375, 61, -365, -365, -365, -365,
	-340, -457, -372, -367, 83, 83, 83, 83, 156, 102,
	89, -367, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, -491, 83, 83, -379, -380, 83,
	83, -360, -316, 83, 89, 89, 83, 83, 83, 89,
	83, 83, 83, -380, -380, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	-194, 157, -193, 83, -193, -194, -178, -177, 32, 33,
	32, 33, 32, 33, 32, 33, -591, 622, 83, 99,
	635, 224, 17, -340, 631, -340, 89, 536, 89, 536,
	481, 542, 168, 169, 170, -387, 246, -387, -387, -217,
	-340, -219, 375, 243, 528, 243, -166, -387, -387, -387,
	-387, -387, 242, -387, 24, 240, 240, 240, 240, -387,
	499, 125, 125, 59, -552, 172, 157, -541, -199, 83,
	89, -352, 133, 137, -352, -299, 18, -299, 24, 269,
	269, 269, -352, 309, -599, -600, 17, 135, -350, -600,
	-350, -350, -352, -601, 242, 466, 43, 270, 269, -195,
	-196, 22, -195, 460, 456, -442, 461, 462, -354, -600,
	-353, -352, -352, -353, -352, -352, -352, 32, 240, 243,
	492, 329, 626, -599, -599, 31, 31, -476, -476, -233,
	-476, -476, 526, -329, -340, -476, -476, -476, -553, 245,
	-585, -584, 479, -587, 481, 162, -419, 162, -419, 86,
	-400, 271, 271, 157, 125, 24, -420, 125, 136, -419,
	-419, -420, -420, -257, 41, -339, 153, -340, 89, -257,
	41, -582, -581, -233, -194, -178, -177, 84, 84, 84,
	536, 89, -476, -476, -476, -476, -476, -478, -476, -476,
	-476, -476, -476, -347, -209, -340, -219, 246, -476, -476,
	-476, -476, -179, -180, 144, -367, -340, -179, -3, -137,
	-136, 119, 120, 122, 616, 370, 615, 619, 613, -419,
	41, -470, 397, 396, -464, -466, 83, -465, 83, -465,
	-465, -465, -465, -465, 83, 83, -467, 83, -467, -467,
	-464, -468, 83, -468, -469, 83, -469, -468, -340, -446,
	542, -373, -375, -340, 39, -487, 61, -174, 83, 31,
	83, -200, -340, 188, 167, 630, -488, 61, -174, 83,
	31, -194, -130, 39, -196, 21, 156, 99, 89, -110,
	-92, 77, -110, 84, 157, -545, 105, 106, -548, 206,
	197, -340, -108, 89, -7, -8, -9, -10, -47, -82,
	-79, -174, 233, 534, 537, -515, -513, 83, 32, 424,
	80, 17, -426, 240, 492, 375, 267, 243, 351, -424,
	-407, -404, -402, -339, -400, -403, -402, -429, -316, 456,
	-131, 439, 438, 321, -367, -367, -367, -367, -367, 104,
	115, 346, 105, 106, -362, -383, 32, 317, 318, -363,
	-363, -363, -363, -363, -363, -363, -363, -363, -363, -363,
	-363, -371, -381, -457, 83, 135, 133, 137, 134, 117,
	-365, -365, -363, -363, -259, -339, 153, 84, 157, -367,
	-538, -537, 119, -367, -367, -367, -367, -340, -535, -536,
	506, 507, 508, 509, 510, 511, 512, 513, 514, 515,
	516, 366, 361, 367, 365, 354, 373, 368, 369, 190,
	523, 524, 517, 518, 519, 520, 521, 522, -373, -373,
	-367, -535, -373, -309, 33, 32, -375, -375, -375, 84,
	-367, -549, 344, 343, 345, -197, -340, -373, 84, 84,
	84, 99, -375, -375, -373, -363, -373, -373, -373, -373,
	-536, -309, -309, -309, -309, 144, -375, -375, -309, -309,
	-309, -309, 144, -309, -309, -309, -309, -309, -309, -309,
	-309, -309, -309, 84, 84, 84, 144, -375, -195, -129,
	-496, -495, -367, 41, -130, -196, -592, 623, 83, -316,
	-580, 89, 89, 640, 167, 631, 17, 492, -340, 17,
	240, -573, 32, 536, 99, 536, 99, 482, 483, 166,
	169, 168, 89, 115, -340, -340, 35, 83, -209, -387,
	-387, -387, -557, -340, 90, -408, -405, -402, -340, -340,
	-398, -340, -329, -233, -387, -387, -387, -387, -233, -268,
	53, 54, 55, -402, -167, 56, 57, -553, -540, 35,
	-198, -340, -573, -299, -365, -365, -367, -402, 271, -599,
	-352, -352, -330, -329, -354, -349, -354, -354, -299, -350,
	-352, -352, -367, -354, -350, -299, -340, 456, -299, -299,
	-442, -352, -351, -340, -351, -387, -329, -330, -330, -233,
	-233, -280, -285, -281, -286, 263, 237, 359, 360, 235,
	233, 11, 234, -293, 310, -388, 500, -263, -264, 77,
	42, -266, 261, 401, 394, 273, 277, 93, 278, 434,
	279, 242, 281, 282, 283, 298, 300, 253, 284, 285,
	286, 425, 287, 161, 299, 288, 289, 290, 377, -258,
	6, 332, 41, 51, 52, 448, 447, 545, 542, 274,
	-340, -557, -555, 31, -340, 31, -408, -340, -340, -187,
	-182, -186, -183, -188, -302, -304, -185, 83, -233, -177,
	-340, 157, 480, 482, 483, -585, -420, -585, -420, 244,
	32, 424, -423, 424, 32, -398, -417, 476, 478, -413,
	89, 425, -403, -422, 80, 153, -495, -420, -420, -422,
	-422, 152, 157, -583, 481, 482, 229, -195, 99, -573,
	-235, -233, -557, -407, -398, -340, -476, -235, -235, -235,
	-342, -342, 83, 156, 36, -340, -340, -340, -340, -298,
	157, -297, 17, -341, -340, 35, 89, 156, -298, -138,
	-136, 121, -367, -6, 615, -367, -6, -6, -367, -6,
	-367, -474, 398, 99, 99, -319, 89, -319, 99, 99,
	99, 548, 84, 89, -411, 80, -489, -376, -533, 604,
	-202, 84, -197, -531, -532, -197, -201, -340, -487, -225,
	125, 125, 125, -489, -202, 84, -531, -195, 605, -130,
	-192, -191, -367, -340, 24, -110, -92, -543, 156, 351,
	157, -198, -426, -406, -403, -428, 144, -340, -414, 157,
	542, 643, 87, 244, -570, -569, 416, 84, 157, -499,
	245, 499, 89, 640, 432, 224, 225, 104, 346, 105,
	106, -457, -375, -371, -365, -365, -363, -363, -369, 258,
	-369, 114, -367, 641, -366, -537, 121, -367, 35, 157,
	35, 157, 81, 156, 84, 84, 17, 17, 84, -367,
	84, 84, 84, 84, 17, 17, -367, 84, 156, 84,
	84, 84, 84, 81, 84, 157, 84, 84, 84, 84,
	157, -375, -375, -367, -375, 84, 84, 84, -367, -367,
	-367, -375, 84, -367, -367, -367, -367, -367, -367, -367,
	-367, -367, -367, -436, 451, -436, -436, 157, 157, 157,
	84, -130, 83, 99, 157, 636, -323, -322, 89, -340,
	-340, 167, 631, -340, 89, 631, -340, 89, 89, 167,
	170, 170, 169, 89, 36, 24, 308, 24, -218, -220,
	-221, -222, -223, -224, 135, 158, 159, 83, -233, -233,
	-233, -559, 402, -571, 157, 41, -569, 492, -163, 321,
	-391, 81, -170, 17, 542, -233, -233, -233, -233, -247,
	35, 17, -181, -234, -340, 83, 84, 157, -399, 81,
	-340, -330, -299, -299, -354, -299, -299, 157, 23, -352,
	-354, -354, -225, -350, -225, 156, -225, -329, -463, 35,
	-199, 157, 21, 263, -232, -337, -229, -231, 248, -357,
	-230, 251, -527, 249, 247, 109, 252, 306, 110, 242,
	-337, -337, 248, -267, 244, 35, -337, -283, 242, 349,
	306, 249, 21, 263, -282, 242, 110, -340, 248, 252,
	249, 247, -336, 125, -328, 152, 244, 43, 377, -336,
	546, 263, -336, -336, -336, -336, -336, -336, -336, 280,
	280, -336, -336, -336, -336, -336, -336, -336, -336, -336,
	-336, -336, 162, -336, -336, -336, -336, -336, -336, 83,
	275, 276, 308, -560, 402, 31, 357, 357, 358, -571,
	31, -171, 351, 31, -305, -306, -307, -308, 68, 72,
	74, 78, 69, 70, 71, 75, 31, 157, -338, -343,
	35, -340, 89, -338, -177, -182, -187, -338, 83, -584,
	-586, 484, 481, 487, -422, -422, 99, 244, 83, 125,
	-422, -422, 41, -339, -581, 488, 482, -130, 157, 80,
	-235, -210, -211, -212, -213, -240, -316, 192, 195, 197,
	198, 199, 200, 202, 203, 204, 205, 206, 209, 210,
	207, 208, 257, 187, 188, 189, 190, 211, 173, 193,
	540, 174, 175, 176, 177, 178, 179, 182, 183, 184,
	185, 181, -340, -219, -299, -180, -182, -340, 89, -340,
	144, -299, 122, -6, 120, -142, -141, -140, 123, 613,
	619, 122, 122, 122, 84, 84, 84, 157, 84, 84,
	84, 157, 84, 157, 99, -502, 461, 40, 157, 83,
	84, 157, 61, 157, 125, 84, 157, -367, -340, 89,
	-367, 84, 61, -130, 89, 157, -189, 37, 38, 156,
	434, -340, -513, 84, -428, 157, 244, 156, 156, -404,
	380, -339, -406, 21, 542, -316, 39, -323, 125, 640,
	-340, 84, -369, -369, 114, -365, -362, 84, 122, -367,
	120, -238, -240, 396, 397, -367, -238, -239, -245, 153,
	191, 257, 190, 189, 187, 396, 397, -257, -340, -367,
	-367, 84, -367, -367, 17, -340, -257, -363, -367, -194,
	-194, 84, 84, -435, -436, -435, -435, 84, 84, 84,
	84, -435, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 83, 99, 101, 99, 101, -495, -593, 63,
	621, 62, 424, 104, 311, 157, 99, 89, 641, 157,
	125, 89, -340, -340, 17, 240, -340, 17, 89, 170,
	89, -572, 315, 351, -447, 99, 315, 351, 492, 388,
	84, 157, -316, -210, -199, 83, -199, -562, 463, 404,
	414, -336, -359, -358, 353, 42, -481, 425, 410, 411,
	-405, 271, -329, -568, 96, 125, 80, 336, 340, 341,
	337, 338, 339, -385, -386, -384, -388, -555, 83, 83,
	-174, 35, 133, -170, 83, 83, 35, -458, 326, -240,
	-233, -181, -340, 17, 157, -554, 156, -1, -340, -398,
	-352, -299, -367, -367, -299, -352, -352, -354, -340, -225,
	-458, -240, 35, -281, 237, 234, -432, 308, 309, -433,
	-448, 311, -450, 83, -237, -316, -230, -526, -527, -387,
	-340, 110, -526, 110, 83, -237, -316, -316, -284, -351,
	-316, -340, -340, -340, -340, -289, -288, -316, -291, 32,
	-292, -340, -340, -340, -340, 110, -340, 110, -262, 41,
	48, 49, 50, -336, -336, 194, -265, 41, 424, 426,
	427, -291, 99, 99, 99, 99, 89, 89, 89, -336,
	-336, 99, 89, -343, 89, -528, 169, 45, 46, 99,
	99, 99, 99, 41, 89, -270, 41, 291, 295, 292,
	293, 294, 89, 99, 41, 99, 41, 99, 41, -340,
	83, -529, -530, 89, -447, -562, -336, 357, -419, 125,
	125, -359, -567, 321, -173, 492, 32, -203, 237, 234,
	-555, -410, -409, -316, -186, -186, -186, -186, 68, 68,
	68, 68, 73, 68, 73, 68, -307, -410, -188, -199,
	-343, 84, -578, -577, -576, -574, 76, 245, 77, -373,
	481, 485, 486, -406, -355, 89, -413, -207, 24, -233,
	-233, -480, 301, 302, 84, 157, -240, -301, 19, 156,
	-301, 118, -6, -138, -140, -367, -6, -367, 615, 370,
	616, 89, 99, 99, -510, 445, 440, 442, 110, -376,
	-497, -496, 61, -174, -197, -489, -532, -495, -340, 641,
	641, 641, 641, 61, -174, -489, -207, -502, -191, -190,
	44, -340, 99, 17, -403, -398, 144, 144, -340, 381,
	-414, 89, 403, 89, 240, 641, 89, -323, -362, -367,
	84, -248, 178, 177, -248, 35, 84, 84, -465, -465,
	-464, -467, -464, -248, -248, 84, 84, 24, 84, 84,
	84, -367, 84, 84, 157, -485, 501, -486, 575, -435,
	-435, -435, -435, -435, -435, -435, -435, -435, -435, -435,
	-435, -435, -435, -435, -435, -378, -377, 263, 446, 628,
	628, 446, 628, 628, 84, 157, -535, 157, -331, 316,
	-331, -322, 89, 244, 89, 167, -340, 89, 631, 89,
	-340, 89, 308, -340, -340, 89, 89, -222, -240, 84,
	35, -226, -227, -228, -237, -229, -231, 35, -563, 93,
	-558, 89, -340, 90, -564, 93, 405, 155, 355, 41,
	406, 407, 422, 350, 99, 99, 412, -556, -340, -172,
	240, 351, -566, 52, 125, 89, -233, -384, -328, 152,
	282, 329, -296, -295, -340, 89, -226, -174, -233, -226,
	-226, -174, -459, 328, 21, 99, 143, -200, 81, 156,
	-182, -234, -340, 144, 84, -299, -225, -299, -299, -352,
	-459, -174, -444, 312, 83, -442, 83, -442, 110, 337,
	-451, -449, 263, -287, 45, 47, -240, -524, -340, -522,
	-524, -340, -522, -522, -387, -367, -287, -237, 244, 31,
	234, -290, 334, 335, 340, -415, 307, 115, -415, 157,
	-189, 157, -340, -257, -257, 31, 89, 89, -235, 84,
	157, 125, 89, -563, -558, 125, -420, 89, 89, -564,
	-568, 125, -236, 240, -329, 157, -203, -203, -299, 157,
	125, -205, -204, 80, 81, -206, 80, -204, 68, 68,
	-299, -576, -575, 24, -527, -527, -527, 84, 84, 15,
	-212, 41, -300, 20, 21, 144, -300, 122, 120, 122,
	122, -340, 84, 84, -471, 606, -506, -508, 440, 21,
	21, 15, 245, 84, -489, -489, -510, 45, 46, -398,
	-414, 425, -233, 157, 641, -238, -367, 84, -367, 84,
	89, 84, 89, -194, 21, 84, 157, 84, 84, 84,
	157, 84, 84, -367, 84, -535, -332, 188, 89, -332,
	351, -341, -340, 17, -340, 89, -447, 308, 308, 240,
	238, -174, 84, 157, -174, 89, -561, 416, 89, 89,
	99, 41, 99, 155, 408, -482, -164, 93, -235, 32,
	-203, -565, 93, 125, 640, 83, -336, -336, -336, -340,
	84, 157, -336, -336, 84, 84, 84, -255, 542, -460,
	262, 99, 143, 99, 143, 99, -338, -182, -340, -299,
	-554, 156, -299, -460, -434, 313, 99, -363, 83, -363,
	83, -443, 310, 83, 84, 157, -340, -316, -252, -251,
	-249, 104, 115, 41, 394, -250, 93, 152, 296, 299,
	298, 274, 297, -279, -356, 80, 400, 334, 335, -388,
	606, 530, 247, 109, 110, 382, -357, 83, 83, 81,
	316, 83, 83, -524, 84, -287, -316, 41, -290, 41,
	347, 307, -288, -340, 152, -257, 84, -530, 89, -561,
	89, -422, -566, 89, -164, -235, -555, -194, -409, -495,
	-367, 83, -367, 83, 68, 11, 19, -360, -367, -375,
	246, -6, 616, 370, -272, 607, 89, 21, 89, -504,
	89, -410, -471, -133, -269, -328, 279, 84, 84, 84,
	-435, -435, -438, -437, -441, 446, 308, 454, -375, 89,
	89, 84, 84, 89, -340, 244, 167, 89, 640, 89,
	-447, -447, -340, -214, -240, -168, 542, -255, -228, -168,
	21, 542, 354, 41, 99, 41, 409, 89, -172, 125,
	105, 106, -324, -325, 89, -393, -395, -316, 83, -257,
	-259, 89, -295, -360, -360, -253, -174, 35, -254, -293,
	-388, -132, -131, -253, 83, -461, 161, 99, 143, 99,
	99, -299, -299, -461, -450, 21, 84, -429, 84, -429,
	83, 125, -363, -449, -452, 61, -249, 104, -363, 89,
	-259, -260, 41, 295, 291, 125, 125, -261, 41, 275,
	276, -271, 83, 306, 15, 194, 83, 110, 110, -233,
	-393, -393, -525, 336, 337, 338, 342, 340, 341, 339,
	-525, -393, -393, 83, -416, -415, -363, -336, -336, 152,
	-565, -195, -198, -523, -340, 247, 21, 21, -340, -340,
	-320, 608, 99, 89, 442, -272, -472, 609, -500, -442,
	-257, 125, 84, -440, 117, 408, 412, -361, -364, 99,
	101, 186, 155, 84, 84, 351, -340, -327, -326, 89,
	89, 89, 308, 541, -169, 60, 488, 89, 90, 403,
	89, 90, 354, -164, 89, 641, 157, 125, 84, 157,
	-464, -367, -430, 263, -174, 157, -293, -328, -133, -430,
	-256, -294, -340, 89, -479, 169, 327, 542, 99, 143,
	99, -194, -462, 169, 327, -433, 84, 84, 84, -429,
	99, 84, -456, -453, 83, -293, 265, 135, 89, 89,
	99, 83, -490, 31, 89, -394, 83, 84, 84, 84,
	84, -393, 99, -257, -336, 84, 84, 157, 83, 21,
	-320, -473, 610, 89, -509, 445, -503, -501, 440, 441,
	442, 443, 89, -439, -440, 412, -361, -364, 604, 452,
	452, 452, -340, 244, 641, 157, 125, -447, -216, -340,
	306, 425, -325, 89, -396, -395, -189, 84, -431, 315,
	21, -293, -336, -431, 84, 157, -336, -336, 327, 99,
	143, 99, -195, 327, -445, 314, 84, -456, -293, -455,
	-454, 313, 266, 83, 84, -367, -379, -336, 84, -274,
	-273, 538, -393, -396, 81, -396, 81, -396, 81, -396,
	81, 84, -257, -340, 247, -321, -340, -504, 89, -511,
	245, -507, -508, 444, -501, 21, 442, 21, 21, -134,
	157, 114, 453, 453, 453, 351, -326, 89, 89, -215,
	35, 447, 381, -397, 253, 347, 348, 93, 542, 334,
	335, -189, 21, -432, -257, -294, -360, -360, 99, 99,
	84, 157, -340, 262, 83, -374, -368, -367, 262, 84,
	-340, -278, -276, -277, 80, 459, 304, 305, 84, -525,
	-525, -525, -525, -279, 84, 157, -518, 83, 99, -506,
	-505, -507, 21, -504, 21, -504, -504, 449, -439, -340,
	89, -336, -336, 89, 89, 333, -316, 83, -444, -454,
	-453, -374, 84, 157, -415, -277, 80, -276, 80, 16,
	15, -396, -396, -396, -396, -340, -521, 31, 84, -517,
	-516, -317, -512, -340, 445, 446, 89, -504, 125, -596,
	-595, 627, 99, 99, -340, -429, -434, 84, -368, -275,
	301, 302, 31, 169, -275, -520, -519, -318, 84, 157,
	156, 89, 89, 84, -450, 104, 41, 303, 157, 125,
	-516, -340, -519, 41, -367, 156, -340,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 311, 312, 313, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 0, 0,
	0, 0, 0, 684, 685, 0, 648, 0, 0, 0,
	0, 0, 0, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 412, 413, 414,
	415, 416, 417, 418, 419, 420, 0, 336, 332, 255,
	256, 257, 258, 259, 260, 343, 344, 508, 0, 0,
	0, 0, 767, -2, 99, 0, 0, 0, 0, 325,
	0, 316, 316, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, -2, 697, 0, 649,
	650, 651, 652, 653, 654, 655, 656, 657, 658, 659,
	660, 661, 662, 663, 664, 665, 396, 397, 398, 392,
	393, 395, 394, -2, 0, 697, 0, 0, 0, 775,
	0, 0, 0, 818, 840, 23, 0, 7, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 0, 0,
	19, 0, 19, 0, 0, 0, 1350, 1351, 1352, 1353,
	2135, 2105, -2, 1876, 1853, 2029, 2030, 1930, 1941, 2166,
	2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176,
	2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186,
	2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196,
	2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206,
	2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 1810,
	1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
	1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
	1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
	1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
	1851, 1852, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861,
	1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871,
	1872, 1873, 1874, 1875, 1877, 1878, 1879, 1880, 1881, 1882,
	1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892,
	1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902,
	1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912,
	1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922,
	1923, 1924, 1925, 1926, 1927, 1928, 1929, 1931, 1932, 1933,
	1934, 1935, 1936, 1937, 1938, 1939, 1940, 1943, 1944, 1945,
	1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
	1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965,
	1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975,
	1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
	1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
	1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
	2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015,
	2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025,
	2026, 2027, 2028, 2031, 2032, 2033, 2034, 2035, 2036, 2037,
	2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047,
	2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057,
	2058, 2059, 2060, 2061, -2, 2063, 2064, 2065, 2066, 2067,
	2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077,
	2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087,
	2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097,
	2098, 2099, 2100, 2101, 2102, 2103, 2104, 2106, 2107, 2108,
	2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118,
	2119, 2120, -2, -2, -2, 2124, 2125, 2126, 2127, 2128,
	2129, 2130, 2131, 2132, 2133, 2134, 2136, 2137, 2138, 2139,
	2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149,
	2150, 2151, 2152, 2153, 2154, 2155, 0, 309, 307, 1823,
	1853, 1876, 1930, 1941, 1942, 1977, 2029, 2030, 2062, 2105,
	2121, 2122, 2123, 2135, 0, 0, 953, 0, 745, 0,
	0, 750, 1299, 745, 337, 686, 687, 775, 801, 646,
	0, 374, 0, 1867, 378, 2112, 0, 0, 0, 643,
	368, 369, 370, 371, 372, 373, 0, 0, 926, 0,
	0, 364, 0, 331, 1932, 2134, 1354, 0, 0, 0,
	0, 0, 198, 1077, 200, 1079, 204, 212, 0, 0,
	0, 217, 218, 221, 222, 223, 224, 225, 0, 229,
	0, 231, 234, 0, 236, 237, 0, 240, 241, 242,
	0, 252, 253, 254, 1080, 1081, 1082, -2, 127, 951,
	1781, 1667, 0, 1674, 1687, 1698, 1431, 1432, 1433, 1434,
	0, 0, 0, 0, 0, 0, 1442, 1443, 0, 1471,
	2170, 2211, 2212, 0, 1451, 1452, 1453, 1454, 1455, 1456,
	138, 150, 151, 1720, 1721, 1722, 1723, 1724, 1725, 1726,
	0, 1728, 1729, 1730, 1638, 1418, 1350, 0, 2179, 0,
	2201, 2206, 2207, 2208, 2209, 2200, 0, 0, 1623, 0,
	1613, 0, 0, -2, -2, 0, 0, 2002, -2, 2213,
	2214, 2215, 2176, 2197, 2205, 2180, 2181, 2204, 2172, 2173,
	2174, 2167, 2168, 2169, 2171, 2183, 2185, 2196, 0, 2192,
	2202, 2203, 2110, 0, 0, 0, 0, 0, 2152, 152,
	153, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1634, -2,
	-2, 1637, -2, 1640, -2, -2, -2, -2, 1645, 1646,
	-2, 1648, -2, -2, -2, -2, -2, -2, -2, 1625,
	1626, 1627, 1628, 1617, 1618, 1619, 1620, 1621, 1622, -2,
	-2, -2, 801, 876, 0, 801, 0, 776, 823, 826,
	829, 832, 779, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 327, 315, 317,
	0, 321, 0, 314, 1113, 1113, 1113, 0, 0, 0,
	0, 1113, 1113, 1113, 1113, 1113, 0, 1113, 0, 0,
	0, 0, 0, 1113, 0, 986, 1084, 1085, 1086, 1111,
	1112, 1185, 0, 0, 0, 702, 698, 699, 700, 701,
	789, 0, 791, 794, 0, 623, 623, 849, 849, 569,
	0, 0, 0, 623, 0, 583, 575, 0, 0, 0,
	623, 0, 0, 796, 796, 0, 626, 633, 623, 623,
	-2, 623, 623, 620, 623, 0, 0, 1125, 589, 590,
	591, 575, 575, 594, 595, 596, 606, 607, 634, 1805,
	0, 0, 508, 508, 0, 508, 508, 0, 508, 508,
	508, 704, 1972, 1874, 1947, 1833, 1932, 2134, 0, 282,
	2002, 287, 0, 1875, 1894, 0, 0, 1912, 0, -2,
	0, 353, 801, 0, 0, 775, 0, 0, 0, 0,
	508, 508, 508, 508, 508, 1184, 508, 508, 508, 508,
	508, 0, 0, 0, 508, 508, 508, 508, 0, 0,
	841, 842, 837, 838, 839, 843, 844, 5, 6, 19,
	0, 0, 0, 0, 0, 0, 106, 105, 0, 1782,
	1800, 1733, 1734, 1735, 1787, 1737, 1791, 1791, 1791, 1791,
	1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
	1791, 1791, 0, 0, 1780, 1757, 1789, 1789, 1789, 1787,
	1784, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
	1747, 1748, 1749, 1750, 1751, 1794, 1794, 1797, 1797, 1794,
	0, 410, 408, 409, 1663, 0, 0, 0, 0, 745,
	749, 1297, 0, 0, 0, 801, -2, 0, 0, 647,
	375, 1355, 0, 0, 379, 0, 380, 0, 0, 0,
	399, 0, 402, 387, 388, 389, 383, 0, 178, 0,
	366, 367, 0, 0, 333, 0, 0, 0, 509, 0,
	0, 0, 0, 0, 0, 209, 205, 213, 216, 226,
	233, 0, 245, 247, 250, 206, 214, 219, 220, 227,
	248, 207, 210, 211, 215, 249, 251, 208, 228, 232,
	246, 230, 235, 238, 239, 244, 0, 179, 0, 0,
	0, 0, 0, 1673, 0, 0, 1706, 1707, 1708, 1709,
	1710, 1711, 1712, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -2, 1667, 0, 0, 1437, 1438, 1439, 1440,
	0, 1444, 0, 1472, 0, 0, 0, 0, 0, 1727,
	1731, 0, 1663, 1663, 0, 1663, 1659, 0, 0, 0,
	0, 0, 0, 1663, 1596, 0, 0, 1598, 1614, 0,
	0, 1600, 1601, 0, 1604, 1605, 1663, 0, 1663, 1609,
	1663, 1663, 1663, 1592, 1593, 0, 1659, 1659, 1659, 1659,
	0, 0, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,
	1659, 1659, 1659, 1659, 1659, 1659, 0, 0, 0, 0,
	796, 0, 802, 0, -2, 0, 820, 822, 824, 825,
	827, 828, 830, 831, 833, 834, 781, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 324, 0, 0, 0, 0, 0,
	950, 0, 0, 1113, 1113, 1113, 987, 0, 0, 0,
	0, 0, 0, 0, 0, 1113, 1113, 1113, 1113, 0,
	1131, 0, 0, 0, 704, 703, 0, 790, 0, 0,
	0, 849, 0, 0, 566, 567, 0, 568, 0, 575,
	623, 623, 581, 582, 577, 576, 629, 630, 626, 0,
	626, 626, 849, 0, 600, 601, 602, 623, 623, 608,
	797, 0, 609, 610, 626, 0, 631, 632, 849, 0,
	0, 849, 849, 0, 618, 619, 621, 623, 0, 0,
	1113, 0, 639, 577, 577, 1806, 1807, 0, 0, 1122,
	0, 0, 0, 0, 642, 0, 0, 0, 0, 705,
	261, 265, 0, 268, 0, 1972, 0, 1972, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 305, 306, 0,
	0, 0, 0, 296, 299, 1291, 1292, 1074, 1075, 300,
	301, 345, 346, 0, 796, 819, 821, 815, 816, 817,
	0, 0, 0, 0, 0, 0, 0, 508, 0, 0,
	0, 0, 0, 680, 0, 966, 682, 0, 0, 0,
	0, 0, 857, 851, 853, 921, 138, 857, 8, 123,
	120, 0, 19, 0, 0, 19, 19, 0, 19, 310,
	0, 1803, 1801, 1802, 1736, 1788, 0, 1762, 0, 1763,
	1764, 1765, 1776, 1777, 0, 0, 1758, 0, 1759, 1760,
	1761, 1752, 0, 1753, 1754, 0, 1755, 1756, 308, 407,
	0, 0, 1664, 954, 0, 723, 737, 718, 0, 726,
	0, 0, 1299, 0, 0, 0, 706, 737, 708, 0,
	726, 796, 773, 0, 751, 0, 0, 376, 0, 384,
	381, 0, 385, 0, 0, 401, 403, 404, 405, 390,
	391, 644, 362, 363, 354, 355, 356, 357, 358, 359,
	360, 361, 0, 0, 0, 365, 148, 0, 334, 335,
	0, 0, 0, 192, 193, 194, 195, 196, 197, 199,
	183, 669, 671, 1066, 1078, 0, 1069, 0, 202, 243,
	175, 0, 0, 0, 1668, 1669, 1670, 1671, 1672, 1677,
	0, 1679, 1681, 1683, 1685, 0, 1703, -2, -2, 1419,
	1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
	1430, 1688, 1701, 1702, 0, 0, 0, 0, 0, 0,
	1699, 1699, 1694, 0, 1457, 1293, 1294, 1435, 0, 0,
	1469, 1473, 0, 0, 0, 0, 0, 139, 1658, 1563,
	1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573,
	1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
	1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 0, 0,
	1667, 0, 0, 0, 1660, 1661, 0, 0, 0, 1551,
	0, 0, 1557, 1558, 1559, 0, 732, 0, 1624, 1597,
	1615, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 875, 877,
	0, 741, 743, 744, 770, 751, 777, 0, 0, 0,
	98, 103, 0, 1152, 0, 0, 0, 0, 0, 0,
	0, 71, 73, 0, 1126, 0, 1128, 328, 329, 0,
	0, 323, 0, 0, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 1002, 1003, 506, 1060, 0, 0, 0,
	1076, 1101, 1109, 0, 0, 0, 0, 0, 1158, 988,
	993, 994, 995, 989, 990, 996, 997, 0, 792, 0,
	0, 890, 70, 565, 624, 625, 850, 572, 1932, 577,
	849, 849, 584, 578, 585, 628, 586, 587, 588, 626,
	849, 849, 798, 623, 626, 611, 627, 626, 1299, 615,
	0, 622, 1299, 640, 1299, 0, 638, 592, 593, 1160,
	794, 423, 424, 425, 427, 0, 476, 476, 476, 459,
	476, 0, 0, 447, 1808, 0, 0, 0, 0, 456,
	1808, 0, 0, 1808, 1808, 1808, 1808, 1808, 1808, 1808,
	0, 0, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808,
	1808, 1808, 1808, 0, 1808, 1808, 1808, 1808, 1808, 1277,
	1808, 0, 1123, 466, 467, 468, 469, 474, 475, 0,
	0, 503, 0, 0, 1001, 0, 506, 0, 1043, 862,
	0, 863, 864, 860, 892, 916, 916, 0, 916, 896,
	1299, 0, 0, 273, 274, 262, 0, 263, 0, 0,
	276, 277, 0, 279, 280, 281, 288, 1874, 1947, 283,
	285, 0, 0, 289, 302, 303, 304, 0, 0, 294,
	295, 0, 0, 348, 349, 351, 0, 751, 1127, 72,
	666, 1295, 667, 668, 672, 0, 0, 675, 676, 677,
	678, 679, 968, 0, 0, 1052, 1053, 1054, 1055, 849,
	0, 858, 0, 854, 922, 0, 924, 0, 849, 0,
	121, 19, 0, 114, 111, 0, 0, 0, 0, 0,
	1783, 1732, 1804, 0, 0, 0, 1785, 0, 0, 0,
	0, 0, 104, 753, 713, 0, 717, 734, 0, 738,
	0, 0, 730, 722, 727, 0, 0, 747, 714, 1298,
	0, 0, 0, 707, 0, 0, 712, 751, 0, 774,
	803, 804, 807, 1356, 0, 386, 382, 400, 0, 508,
	0, 0, 0, 186, 1063, 0, 187, 191, 181, 0,
	0, 0, 1068, 0, 1065, 1070, 0, 201, 0, 0,
	176, 177, 1143, 1152, 0, 0, 0, 1678, 1680, 1682,
	1684, 1686, 0, 1689, 1699, 1699, 1695, 0, 1690, 0,
	1692, 0, 1668, 1441, 0, 1474, 0, 0, 0, 0,
	0, 0, 0, 0, 1541, 1542, 0, 0, 1546, 0,
	1548, 1549, 1550, 1552, 0, 0, 0, 1556, 0, 1595,
	1616, 1599, 1602, 0, 1606, 0, 1608, 1610, 1611, 1612,
	0, 801, 801, 0, 0, 1513, 1513, 1513, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1458, 0, 1459, 1460, 0, 0, 0,
	878, 771, 0, 0, 0, 0, 0, 1150, 0, 86,
	0, 0, 0, 0, 93, 0, 0, 74, 75, 330,
	318, 320, 0, 0, 1114, 0, 0, 0, 0, 0,
	956, 957, 959, 0, 962, 963, 964, 968, 794, 0,
	794, 1013, 1808, 510, 0, 0, 1062, 0, 1032, 0,
	0, 0, -2, 0, 0, 1109, 0, 0, 0, 1162,
	0, 0, 0, 691, 695, 23, 795, 0, 570, 0,
	571, 623, 579, 580, 849, 603, 604, 0, 0, 849,
	623, 623, 614, 626, 635, 0, 636, 1299, 1162, 0,
	0, 1122, 1228, 1196, 437, 0, 1311, 1312, 477, 0,
	1318, 1327, 1113, 1388, 0, 1327, 0, 0, 1329, 1330,
	0, 0, 0, 0, 460, 461, 0, 446, 0, 0,
	0, 0, 0, 0, 445, 0, 0, 487, 0, 0,
	0, 0, 0, 1809, 1808, 1808, 0, 454, 455, 0,
	458, 0, 0, 0, 0, 0, 0, 0, 0, 1808,
	1808, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1268, 0, 0, 0, 0, 0, 0, 0,
	1283, 1284, 0, 1013, 1808, 0, 0, 0, 0, 510,
	1030, 1048, 0, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 881, 0, 0, 0, 0, 0, 794, 917,
	0, 919, 920, 894, -2, 0, 862, 899, 1663, 266,
	267, 0, 0, 272, 290, 292, 264, 0, 0, 0,
	291, 293, 297, 298, 347, 350, 352, 813, 0, 0,
	1186, 0, 969, 970, 972, 973, 0, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1858, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 967, 683, 847, 852, 859, 923, 925, 139,
	855, 847, 0, 124, 19, 123, 115, 116, 0, 19,
	0, 0, 0, 0, 1793, 1792, 1778, 0, 1779, 1790,
	1795, 0, 1798, 0, 411, 757, 0, 0, 737, 739,
	0, 0, 737, 0, 0, 746, 0, 0, 0, 0,
	0, 0, 737, 813, 753, 0, 810, 808, 809, 0,
	0, 645, 149, 406, 0, 0, 0, 0, 0, 670,
	0, 1067, 183, 0, 0, 203, 0, 0, 0, 1152,
	1147, 1662, 1691, 1693, 0, 1700, 1696, 1436, 1445, 1470,
	0, 0, 1476, 1488, 1488, 0, 0, 0, 1479, 1791,
	1791, 1482, 1787, 1789, 1787, 1488, 1488, 0, 140, 0,
	0, 1547, 0, 0, 0, 733, 0, 0, 0, 1509,
	1511, 1513, 1513, 1520, 1514, 1521, 1522, 1513, 1513, 1513,
	1513, 1527, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513,
	1513, 1513, 1507, 0, 0, 1721, 1722, 742, 0, 0,
	784, 785, 786, 787, 788, 0, 0, 61, 61, 1152,
	0, 97, 87, 0, 0, 0, 0, 0, 76, 322,
	0, 77, 78, 0, 0, 85, 0, 0, 0, 0,
	0, 961, 0, 0, 0, 1304, 0, 1017, 1014, 1015,
	1016, 0, 1057, 511, 512, 513, 514, 0, 0, 0,
	1061, 0, 0, 1025, 0, 0, 0, 1102, 1103, 1104,
	1105, 1106, 1107, 1108, -2, 1117, 0, 0, 0, 1304,
	1136, 0, 0, 1141, 1304, 1304, 0, 1170, 0, 1159,
	745, 0, -2, 0, 0, 693, 0, 0, 891, 573,
	849, 597, 799, 800, 1299, 849, 849, 623, 641, 637,
	1170, 1161, 0, 426, 476, 0, 1216, 0, 0, 1222,
	0, 1229, 430, 0, 478, 0, 1317, 1344, 1328, 1344,
	1389, 1344, 1344, 1113, 0, 478, 0, 0, 448, 484,
	0, 0, 0, 0, 0, 444, 481, 807, 431, 433,
	434, 435, 485, 486, 488, 0, 490, 491, 450, 462,
	463, 464, 465, 0, 0, 0, 457, 470, 471, 472,
	473, 432, 1245, 1246, 1247, 1250, 1251, 1252, 1253, 0,
	0, 1256, 1257, 1258, 1259, 1260, 1341, 1342, 1343, 1261,
	1262, 1263, 1264, 1265, 1266, 1267, 1285, 1286, 1287, 1288,
	1289, 1290, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
	0, 0, 1280, 0, 0, 1017, 0, 0, 0, 0,
	0, 1057, 1032, 0, 1050, 0, 1044, 1045, 0, 0,
	715, 849, 340, 0, 886, 879, 0, 868, 883, 884,
	885, 871, 0, 873, 0, 869, 870, 849, 861, 893,
	918, 895, 898, 900, 901, 907, 0, 0, 0, 0,
	269, 270, 271, 278, 0, 530, 284, 769, 0, 1296,
	673, 674, 1187, 1188, 681, 0, 974, 845, 0, 0,
	845, 119, 122, 0, 117, 0, 0, 0, 0, 109,
	107, 1786, 0, 0, 759, 163, 0, 0, 0, 735,
	0, 740, 737, 721, 731, 720, 728, 729, 748, 1300,
	1301, 1302, 1303, 737, 711, 710, 772, 757, 805, 806,
	0, 1357, 377, 0, 1064, 183, 188, 189, 190, 184,
	182, 1071, 0, 1073, 0, 1145, 0, 0, 1697, 1475,
	1446, 1477, 1489, 1490, 1478, 0, 1448, 1449, 1480, 1481,
	1483, 1484, 1485, 1486, 1487, 1450, 1543, 0, 1545, 1553,
	1554, 0, 1603, 1607, 0, 0, 0, 0, 0, 1518,
	1519, 1523, 1524, 1525, 1526, 1528, 1529, 1530, 1531, 1532,
	1533, 1534, 1535, 1536, 1537, 801, 1508, 0, 0, 0,
	0, 0, 0, 0, 782, 0, 0, 0, 63, 0,
	63, 1151, 1153, 0, 921, 0, 0, 94, 0, 0,
	79, 80, 0, 0, 0, 949, 952, 958, 960, 0,
	0, 0, 1305, 1306, 1308, 1309, 1310, 0, 985, 0,
	0, 1005, 1006, 1007, 1019, 0, 0, 0, 516, 517,
	0, 0, 0, 529, 525, 526, 527, 507, 1056, 1039,
	0, 0, 1028, 0, 0, 1038, 0, 1118, 1808, 1808,
	1808, 0, 0, 1230, 1808, 1808, 0, 1138, 1140, 0,
	0, 1234, 1173, 0, 0, 1164, 0, 916, 0, 0,
	849, 692, 695, 696, 793, 574, 612, 616, 613, 849,
	1173, 422, 1194, 0, 0, 0, 0, 0, 1226, 0,
	0, 1198, 0, 449, 479, 0, -2, 0, 1345, 0,
	1331, 1345, 0, 0, 1344, 0, 438, 478, 0, 0,
	0, 492, 496, 497, 0, 494, 1384, 0, 495, 0,
	483, 0, 489, 1248, 1249, 0, 1254, 1255, 0, 1279,
	0, 0, 429, 498, 0, 0, 0, 499, 500, 505,
	1025, 0, 1039, 0, 1049, 0, 1046, 1047, 801, 0,
	0, 865, 887, 0, 0, 866, 0, 867, 872, 874,
	339, 902, 0, 0, 904, 905, 906, 897, 286, 814,
	971, 0, 835, 0, 0, 856, 836, 0, 19, 0,
	0, 112, 1796, 1799, 761, 0, 758, 164, 0, 0,
	0, 0, 725, 736, 719, 709, 759, 811, 812, 185,
	180, 1072, 1155, 0, 1146, 0, 0, 1555, 0, 1513,
	1510, 1513, 1512, 1504, 0, 1461, 0, 1463, 1464, 1465,
	0, 1467, 1468, 0, 780, 0, 59, 0, 62, 60,
	0, 96, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 991, 1234, 0, 991, 1018, 1004, 0, 1058, 1059,
	0, 518, 519, 0, 522, 528, 1020, 0, 0, 1022,
	1023, 1024, 0, 0, 1036, 0, 0, 0, 0, 1110,
	1124, 0, 0, 0, -2, 0, -2, 1135, 0, 1179,
	0, 1171, 0, 1163, 0, 1166, 849, 849, -2, 689,
	694, 0, 617, 1179, 1196, 0, 1217, 0, 0, 0,
	0, 0, 0, 0, 1197, 0, 1210, 480, 1346, -2,
	1360, 1362, 0, 1123, 1365, 1366, 0, 0, 0, 0,
	0, 0, 1410, 1374, 0, 0, 1378, 1379, 1380, 0,
	0, 1383, 0, 1715, 1716, 0, 1387, 0, 0, 0,
	0, 0, 0, 0, 1325, 439, 440, 0, 442, 443,
	1808, 1385, 482, 436, 1808, 452, 1278, 1281, 1282, 504,
	501, 502, 1028, 1031, 1042, 1051, 716, 796, 341, 342,
	888, 0, 880, 911, 908, 0, 0, 975, 846, 848,
	113, 118, 0, 0, 763, 0, 760, 0, 754, 756,
	174, 724, 761, 134, 166, 0, 0, 1447, 1544, 1594,
	1516, 1517, 0, 1505, 0, 1499, 1500, 1501, 1506, 0,
	0, 783, 778, 64, 90, 0, 0, 95, 68, 81,
	0, 0, 0, 0, 977, 984, 998, 1129, 1307, 983,
	0, 0, 515, 520, 0, 523, 524, 1040, 1039, 0,
	1026, 1027, 0, 1034, 0, 0, 1097, 1787, 0, 1119,
	1120, 1121, 1231, 1232, 1233, 1189, 1137, 0, -2, 1242,
	0, 1133, 1155, 1189, 0, 1167, 0, 1174, 0, 1172,
	1165, 801, 690, 1176, 428, 1228, 1218, 0, 1220, 0,
	0, 0, 0, 1199, -2, 0, 1361, 1363, 1364, 1367,
	1368, 1369, 1415, 1416, 1417, 0, 0, 1372, 1412, 1413,
	1414, 1373, 0, 0, 0, 0, 0, 1713, 1714, 1408,
	0, 0, 1332, 1334, 1335, 1336, 1337, 1338, 1339, 1340,
	1333, 0, 0, 0, 1324, 1326, 441, 0, 0, 1808,
	1041, 338, 0, 0, 912, 914, 909, 910, 108, 110,
	125, 0, 762, 165, 0, 763, 136, 0, 157, 0,
	1156, 0, 1515, 1502, 0, 0, 0, 0, 0, 1717,
	1718, 1719, 0, 1462, 1466, 0, 89, 0, 66, 0,
	82, 83, 0, 0, 0, 999, 1000, 1008, 1009, 0,
	1011, 1012, 521, 1021, 1029, 1033, 1036, 0, 1088, 0,
	807, 0, 1191, 0, 1139, 1122, 1244, 1808, 1142, 1191,
	0, 1236, 1808, 1808, 1157, 0, 1169, 0, 1181, 0,
	1175, 796, 421, 0, 1178, 1214, 1219, 1221, 1223, 0,
	1227, 1225, 1200, -2, 0, 1208, 0, 0, 1370, 1371,
	0, 0, 1613, 1808, 0, 1403, 0, 1088, 1088, 1088,
	1088, 0, 493, 451, 0, 889, 903, 0, 0, 0,
	752, 126, 0, 135, 154, 0, 167, 168, 0, 0,
	0, 0, 1148, 0, 1491, 0, 0, 0, 1495, 1496,
	1497, 1498, 91, 0, 65, 68, 0, 0, 0, 976,
	0, 1010, 1035, 1037, 1087, 1098, 1099, 807, 1132, 0,
	1228, 1243, 0, 1134, 1235, 0, 0, 0, 1168, 1180,
	0, 1183, 688, 1177, 1195, 0, 1224, 1201, 1209, 0,
	1204, 0, 0, 0, 1411, 0, 1377, 0, 1382, 1391,
	1404, 0, 0, 1313, 0, 1315, 0, 1319, 0, 1321,
	0, 0, 453, 913, 915, 0, 765, 755, 137, 141,
	0, 163, 160, 0, 169, 0, 0, 0, 0, 1144,
	0, 0, 1492, 1493, 1494, 0, 67, 69, 84, 0,
	978, 979, 992, 1089, 1808, 1808, 0, 0, 0, 1095,
	1096, 1100, 0, 1216, 1248, 1237, 1238, 1239, 1182, 1215,
	1203, 0, -2, 1211, 0, 0, 1665, 1675, 1676, 1375,
	1381, 1390, 1392, 1393, 0, 1405, 1406, 1407, 1409, 1088,
	1088, 1088, 1088, 1323, 764, 0, 128, 0, 0, 158,
	159, 161, 0, 170, 0, 172, 173, 0, 1503, 92,
	980, 0, 0, 1092, 1093, 0, 1192, 0, 1194, 1205,
	-2, 0, 1213, 0, 1376, 1394, 0, 1395, 0, 0,
	0, 1314, 1316, 1320, 1322, 766, 1154, 0, 142, 0,
	144, 146, 147, 1347, 155, 156, 162, 171, 0, 965,
	981, 0, 1090, 1091, 1094, 0, 1196, 1212, 1666, 1396,
	1398, 1399, 0, 0, 1397, 129, 130, 0, 143, 0,
	0, 1149, 982, 1193, 1190, 1400, 1402, 1401, 0, 0,
	145, 1348, 131, 132, 133, 0, 1349,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 642, 639,
	126, 125, 127, 3, 643, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 640, 138, 641, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:824
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:831
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:837
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:845
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:851
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:855
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:870
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:874
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:880
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:885
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:889
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:922
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:936
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:947
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:959
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:963
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:968
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:972
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:978
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    yyDollar[4].str,
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:992
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:996
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1000
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1004
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1011
		{
			yyLOCAL = &tree.ShowCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1020
		{
			yyLOCAL = &tree.PauseCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1029
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].str, yyDollar[4].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1035
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1042
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1051
		{
			yyLOCAL = &tree.ResumeCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1060
		{
			yyLOCAL = &tree.RestartCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1069
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1079
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1089
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1101
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1111
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1121
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1132
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1143
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1157
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1165
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1173
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1181
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1190
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1200
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1209
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELDATABASE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[11].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1219
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELTABLE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:     tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[10].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[13].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1232
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1240
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1249
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1259
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1269
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1279
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1299
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1305
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1312
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1320
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1326
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1335
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1345
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1353
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1361
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1369
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1379
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1387
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1397
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1404
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1413
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1423
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1427
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1433
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1437
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1443
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1452
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1462
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1466
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1472
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1481
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1485
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1491
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1512
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1526
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1533
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1537
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1543
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1547
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1553
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1560
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1568
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1572
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1584
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1588
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1602
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1606
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1611
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1618
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1622
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1626
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1632
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1641
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1652
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1656
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1662
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1666
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1672
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1676
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1682
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1706
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1725
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1729
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1733
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1738
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1742
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1751
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1761
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1768
		{
			yyVAL.str = yyDollar[3].str
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1773
		{
			yyVAL.str = "\n"
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1780
		{
			yyVAL.str = yyDollar[3].str
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1785
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1789
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1817
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1821
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1827
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1835
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1855
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1874
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1899
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1903
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1907
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1912
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1916
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1922
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1935
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1946
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1959
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1963
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1973
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1986
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1999
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2005
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2011
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2019
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2029
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2039
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2043
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2047
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2051
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2055
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2059
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2066
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2070
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2076
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2083
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2092
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2096
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2102
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2106
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2110
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2114
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2118
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2122
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2126
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2130
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2134
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2138
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2142
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2146
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2150
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2154
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2158
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2162
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2166
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2170
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2174
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2178
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2182
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2186
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2190
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2194
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2198
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2202
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2206
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2210
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2214
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2218
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2222
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2226
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2230
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2234
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2238
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2242
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2246
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2250
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2254
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2258
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2262
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2266
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2270
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2274
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2278
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2282
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2286
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2290
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2294
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2298
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2302
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2316
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2323
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2330
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2339
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2357
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2361
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2367
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2374
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2382
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2386
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2390
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2394
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2400
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2404
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2410
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2417
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2424
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2433
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2463
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2467
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2471
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2477
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2483
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2487
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2494
		{
			yyVAL.str = yyDollar[3].str
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2500
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2504
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2510
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2518
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2527
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2536
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2544
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2552
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2575
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2598
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2605
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2612
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2620
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2627
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2634
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2643
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2647
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2651
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2657
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2661
		{
			yyVAL.str = yyDollar[1].str
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2667
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2671
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2677
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2681
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2692
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2698
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2703
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2707
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2711
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2715
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2719
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2723
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2727
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2731
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2735
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2741
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2745
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2749
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2753
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2758
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2763
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2769
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2782
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2795
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2808
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2821
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2837
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2844
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2855
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2866
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2870
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2876
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2886
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2892
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2896
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2902
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2908
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2912
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2916
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2920
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2926
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2939
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2945
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2949
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2955
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2959
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2965
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2971
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2982
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2988
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2992
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2996
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3000
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3004
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3008
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3016
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3024
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3034
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3046
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3050
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3058
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3066
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3105
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3109
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3115
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3121
		{
			yyVAL.str = yyDollar[1].str
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3126
		{
			yyVAL.str = "true"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3127
		{
			yyVAL.str = "false"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3128
		{
			yyVAL.str = yyDollar[1].str
		}
	case 406:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3133
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3139
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3148
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3155
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3163
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3167
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3191
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3214
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3224
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3231
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3240
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3244
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3250
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3254
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3278
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3288
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3298
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3314
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3332
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3336
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3342
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3346
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3352
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3358
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3366
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3376
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3384
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3394
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3404
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3414
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3421
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3425
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3429
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3433
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3437
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3444
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3450
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3454
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3458
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3462
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3466
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3470
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3474
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3478
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3483
		{
			yyVAL.str = ""
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3514
		{
			yyVAL.str = ""
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3518
		{
			yyVAL.str = string("COLUMN")
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3523
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3529
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3535
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3543
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3547
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3553
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3561
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3568
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3574
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3580
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3586
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3592
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3599
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3606
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3614
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3620
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3632
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3638
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3646
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3650
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3657
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3675
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3690
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3705
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3720
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3733
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3739
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3750
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3763
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3767
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3775
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3779
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3784
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3788
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3804
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3808
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3812
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3816
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3823
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3827
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3831
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3835
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3842
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3846
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3853
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3857
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3861
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3865
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3872
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3879
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3885
		{
			yyVAL.item = nil
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3890
		{
			yyVAL.item = nil
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3935
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3944
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3952
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3960
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3968
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3972
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3976
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3987
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3991
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3997
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4002
		{
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4006
		{
		}
	case 579:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4011
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4021
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4031
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4039
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4045
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4051
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4057
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4063
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4069
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4075
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4084
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4088
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4092
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4096
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4100
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4104
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4108
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4112
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4118
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4127
		{
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4129
		{
		}
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4138
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4148
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4157
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4161
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4165
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4171
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4177
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4183
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4189
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4198
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4209
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4221
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4229
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4235
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4247
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4261
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4267
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4273
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4280
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4284
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4289
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4293
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4297
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4302
		{
			yyVAL.str = ""
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4306
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4312
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4327
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4331
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4337
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4345
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4352
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4360
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4366
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4372
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4377
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4385
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4391
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4396
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4402
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4408
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4412
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4440
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4448
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4456
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4464
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4468
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4474
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4487
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4495
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4504
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4510
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4518
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4526
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4534
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4540
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4548
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4554
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4562
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4568
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4578
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4583
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4590
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4606
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4619
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4630
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4634
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4640
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4646
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4655
		{
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4657
		{
		}
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4660
		{
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4669
		{
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4673
		{
		}
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4678
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4687
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4694
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4700
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4708
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4715
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4722
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4742
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4750
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4760
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4764
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4770
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4777
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4783
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4791
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4798
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4805
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4824
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4828
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4832
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4837
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4841
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4845
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4851
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4860
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4864
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4870
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4874
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4880
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4884
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4890
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4895
		{
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4899
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4906
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4910
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4917
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4922
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4926
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4932
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4936
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4942
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4946
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4951
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4955
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4968
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4979
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4990
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5012
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5035
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5043
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5052
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5056
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5069
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5073
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5078
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5082
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5089
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5094
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5101
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5107
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5111
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5115
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5119
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5123
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5127
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5132
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5136
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5142
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5152
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5167
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5171
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5185
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5189
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5195
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5204
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5208
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5212
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5216
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5220
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5226
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5233
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5242
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5246
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5252
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5260
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5264
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5269
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5273
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5279
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5283
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5287
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5292
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5296
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5302
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5308
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5312
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5318
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5323
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5327
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5331
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5336
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5340
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5344
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5349
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5353
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5361
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5365
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5369
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5383
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5387
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5397
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5407
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5417
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5429
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5437
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5445
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5454
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5462
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5470
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5478
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5486
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5494
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5502
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5510
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5518
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5528
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5539
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5553
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5557
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5561
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5566
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5570
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5574
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5583
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5587
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5592
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5596
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5601
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5605
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5611
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5615
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5621
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5625
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5629
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5633
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5638
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5646
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5652
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5660
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5668
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5678
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5684
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5693
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5702
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5711
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5721
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5725
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5735
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 872:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5739
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5743
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 874:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5747
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 875:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5753
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5763
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5767
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5773
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5779
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5783
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5789
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5795
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5799
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5803
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 885:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5807
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 886:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5813
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5817
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5823
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5827
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5833
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5837
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5843
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5847
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5857
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5870
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5876
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5882
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5896
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5907
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5914
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5918
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5924
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5934
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5938
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5942
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5947
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5951
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5955
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5959
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5964
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5968
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5972
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5976
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5980
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5985
		{
			yyVAL.str = ""
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5989
		{
			yyVAL.str = yyDollar[1].str
		}
	case 918:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5993
		{
			yyVAL.str = yyDollar[2].str
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5999
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6003
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 921:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6008
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6012
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6016
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6020
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6024
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6030
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 949:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6072
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6085
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6091
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 952:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6097
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6110
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6115
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6122
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6129
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6133
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6139
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6145
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6150
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6154
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6158
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6162
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6169
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6202
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6207
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6214
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6221
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6225
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6231
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6237
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6241
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6245
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6251
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6257
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6263
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6267
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6273
		{
			yyVAL.str = ""
		}
	case 982:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6280
		{
			yyVAL.str = yyDollar[2].str
		}
	case 983:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6286
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6301
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6318
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6335
		{
			yyVAL.str = yyDollar[1].str
		}
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6339
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 988:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6345
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 989:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6349
		{
			yyVAL.str = "DEFINER = "
		}
	case 990:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6353
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 991:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6358
		{
			yyVAL.str = ""
		}
	case 992:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6362
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 998:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6376
		{
			yyVAL.str = ""
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6384
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6390
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6395
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6401
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6414
		{
			var Str = yyDollar[1].str
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6419
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6424
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6430
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6437
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6444
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6451
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6458
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6466
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6472
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6479
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6486
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6494
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6500
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6509
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6526
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6542
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6561
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6567
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6576
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6594
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6600
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6607
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6615
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6621
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6629
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6635
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6643
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6649
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6658
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6662
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6667
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6671
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6678
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1039:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6683
		{
			yyVAL.str = ""
		}
	case 1040:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6687
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1041:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6693
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6706
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6717
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6721
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6727
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6733
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6739
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6746
		{
			yyVAL.str = ""
		}
	case 1049:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6750
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1050:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6755
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6759
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6765
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6773
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6781
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6789
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6797
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1057:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6802
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6814
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6825
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6934
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6938
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6944
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6957
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6961
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6967
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6980
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6984
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6988
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6993
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6997
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7003
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7010
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7016
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7025
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1076:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7032
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7043
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7047
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7053
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7062
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7066
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7070
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7075
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7079
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7083
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7087
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7093
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7124
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7128
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7154
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7160
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7172
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7178
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7184
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7190
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7196
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7204
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7208
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7214
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7228
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7242
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7246
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7250
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7254
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7258
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7262
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7266
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7272
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7287
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7291
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7302
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7306
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7311
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7315
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7321
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7325
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7331
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7340
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7349
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7355
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7359
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7365
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7376
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7382
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7400
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7418
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7436
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7452
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7456
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7465
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7477
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7486
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7498
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7508
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7518
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7529
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7539
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7550
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7558
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7569
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7576
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7586
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7599
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7607
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7616
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7625
		{
			yyVAL.str = ""
		}
	case 1149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7629
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7635
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7639
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7644
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7648
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7655
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7667
		{
			yyVAL.str = ""
		}
	case 1156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7671
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1157:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7677
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7698
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7712
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7716
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7720
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7726
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7730
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7737
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7744
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7751
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7758
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7762
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7766
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7770
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7774
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7781
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7788
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7792
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7799
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7806
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7810
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7816
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7822
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7826
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7833
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7840
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7847
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7854
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7858
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7863
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7867
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7871
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7876
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7880
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7893
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7897
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7905
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7913
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7917
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7929
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7933
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7939
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7943
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7949
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7962
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7976
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7980
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7986
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7990
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7996
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8005
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8016
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8020
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8025
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8029
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8035
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8040
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8048
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8052
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8062
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8066
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8077
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8085
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8093
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8101
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8112
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8121
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8131
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8141
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8145
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8150
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8154
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8160
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8164
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8170
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8179
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8189
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8193
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8199
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8203
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8209
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8218
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8228
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8232
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8238
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8242
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8246
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8252
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8256
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8260
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8264
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8268
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8272
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8276
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8281
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8285
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8289
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8293
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8297
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8301
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8305
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8309
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8313
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8317
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8321
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8325
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8329
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8335
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8341
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8345
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8349
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8353
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8357
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8363
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8369
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8375
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8381
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8387
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8393
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8397
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8401
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8405
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8412
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8416
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8422
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8433
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8437
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8443
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8447
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8451
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8455
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8459
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8463
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8477
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8481
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8490
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8496
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8504
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8508
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8515
		{
			var Str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8524
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8532
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8540
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8547
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8551
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8557
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8561
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8565
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8571
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8575
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8581
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8594
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8607
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8646
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8686
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8700
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8706
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8719
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8732
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8745
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8758
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8773
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8783
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8789
		{
			yyVAL.str = ""
		}
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8793
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8803
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8809
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8815
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8836
		{
			yyVAL.str = ""
		}
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8840
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8846
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8852
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8856
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8861
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8869
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8873
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8877
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8881
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8887
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8893
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8897
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8902
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8909
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8913
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8919
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8923
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8929
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8933
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8937
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8941
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8945
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8949
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8954
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8958
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8962
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8966
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8970
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8974
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8978
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8982
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8986
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8990
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9004
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9008
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9012
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9016
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9020
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9024
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9030
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9034
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9039
		{
			yyVAL.str = ""
		}
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9043
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9049
		{
			yyVAL.str = ""
		}
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9053
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1390:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9059
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9076
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9083
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9090
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9097
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9104
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9113
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9119
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9125
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9129
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9133
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9137
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9141
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9146
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9153
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9157
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9161
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9166
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9170
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9175
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9179
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9195
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9201
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9205
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9209
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9213
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9217
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9221
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9225
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9229
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9233
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9237
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9241
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9245
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9249
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9255
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9259
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9263
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9267
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9271
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9275
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9279
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9283
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9287
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9291
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9333
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9337
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9341
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9346
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9354
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9358
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9362
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9366
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9370
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9380
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9384
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9388
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9392
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9396
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9400
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9404
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9410
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9419
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9428
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9439
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9449
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9459
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9468
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9478
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9488
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9498
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9507
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9517
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9521
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9526
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9530
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9536
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9540
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9546
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9555
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9567
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9584
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9601
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9614
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9627
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9639
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9653
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9668
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9683
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9700
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9715
		{
		}
	case 1492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9722
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9726
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9730
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9736
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9740
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9744
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9748
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9754
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9758
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9762
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9768
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9776
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9786
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9790
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9797
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9802
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9806
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9811
		{
			yyVAL.str = ","
		}
	case 1510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9815
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9820
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9824
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1513:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9829
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9836
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9862
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9874
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9886
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9897
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9908
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9919
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9929
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9939
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9950
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9961
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9972
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9983
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9994
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10005
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10016
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10027
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10038
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10049
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10060
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10071
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10082
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10093
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10111
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10120
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10129
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10138
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10147
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10158
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10167
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10177
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10186
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10195
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10204
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10213
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10225
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10236
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10249
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10261
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10284
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1592:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10320
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10333
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10346
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10358
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10367
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10375
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10383
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10396
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10405
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10416
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10427
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10436
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10448
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10458
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10468
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10477
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10488
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10497
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10507
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10516
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10525
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10535
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10539
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10545
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10549
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10568
		{
		}
	case 1624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10570
		{
		}
	case 1658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10611
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10623
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10627
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10631
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10637
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10642
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10646
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10652
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10656
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10662
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10666
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10673
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10677
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10681
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10690
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10694
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10698
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10703
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10707
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10713
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10717
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10721
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10725
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10729
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10733
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10737
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10741
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10745
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10749
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10757
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10761
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10765
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10769
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10773
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10777
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10781
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10785
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10789
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10793
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10799
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10803
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10809
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10813
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10820
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10824
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10828
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10834
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10838
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10842
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10846
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10850
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10854
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10858
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10864
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10868
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10872
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10876
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10882
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10895
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10900
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10906
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10910
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10923
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10928
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10932
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10936
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10940
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10944
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10951
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10955
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10959
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10963
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10970
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10981
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10986
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10992
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11004
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11016
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11028
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11041
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11054
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11067
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11080
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11093
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11106
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11119
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11132
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11145
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11158
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11173
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11200
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11242
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11278
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11314
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11331
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11343
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11363
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11383
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11403
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11419
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11432
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11445
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11458
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11471
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11483
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11495
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11507
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11519
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11531
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11543
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11555
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11567
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11579
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11591
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11604
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11617
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11630
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11643
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11658
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11666
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11675
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11685
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11708
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11713
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11719
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11726
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11730
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11735
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11739
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11745
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11751
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11758
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11765
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11774
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11781
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11788
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11797
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11801
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11805
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11811
		{
		}
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11813
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11823
		{
			yyVAL.str = ""
		}
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11827
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
