// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const OF = 57367
const CONNECT = 57368
const MANAGE = 57369
const GRANTS = 57370
const OWNERSHIP = 57371
const REFERENCE = 57372
const LOWER_THAN_SET = 57373
const SET = 57374
const ALL = 57375
const DISTINCT = 57376
const DISTINCTROW = 57377
const AS = 57378
const EXISTS = 57379
const ASC = 57380
const DESC = 57381
const INTO = 57382
const DUPLICATE = 57383
const DEFAULT = 57384
const LOCK = 57385
const KEYS = 57386
const NULLS = 57387
const FIRST = 57388
const LAST = 57389
const AFTER = 57390
const INSTANT = 57391
const INPLACE = 57392
const COPY = 57393
const DISABLE = 57394
const ENABLE = 57395
const UNDEFINED = 57396
const MERGE = 57397
const TEMPTABLE = 57398
const DEFINER = 57399
const INVOKER = 57400
const SQL = 57401
const SECURITY = 57402
const CASCADED = 57403
const VALUES = 57404
const NEXT = 57405
const VALUE = 57406
const SHARE = 57407
const MODE = 57408
const SQL_NO_CACHE = 57409
const SQL_CACHE = 57410
const JOIN = 57411
const STRAIGHT_JOIN = 57412
const LEFT = 57413
const RIGHT = 57414
const INNER = 57415
const OUTER = 57416
const CROSS = 57417
const NATURAL = 57418
const USE = 57419
const FORCE = 57420
const CENTROIDX = 57421
const APPLY = 57422
const DEDUP = 57423
const LOWER_THAN_ON = 57424
const ON = 57425
const USING = 57426
const SUBQUERY_AS_EXPR = 57427
const LOWER_THAN_STRING = 57428
const ID = 57429
const AT_ID = 57430
const AT_AT_ID = 57431
const STRING = 57432
const VALUE_ARG = 57433
const LIST_ARG = 57434
const COMMENT = 57435
const COMMENT_KEYWORD = 57436
const QUOTE_ID = 57437
const STAGE = 57438
const CREDENTIALS = 57439
const STAGES = 57440
const SNAPSHOTS = 57441
const INTEGRAL = 57442
const HEX = 57443
const FLOAT = 57444
const HEXNUM = 57445
const BIT_LITERAL = 57446
const NULL = 57447
const TRUE = 57448
const FALSE = 57449
const LOWER_THAN_CHARSET = 57450
const CHARSET = 57451
const UNIQUE = 57452
const KEY = 57453
const OR = 57454
const PIPE_CONCAT = 57455
const XOR = 57456
const AND = 57457
const NOT = 57458
const BETWEEN = 57459
const CASE = 57460
const WHEN = 57461
const THEN = 57462
const ELSE = 57463
const END = 57464
const ELSEIF = 57465
const LOWER_THAN_EQ = 57466
const LE = 57467
const GE = 57468
const NE = 57469
const NULL_SAFE_EQUAL = 57470
const IS = 57471
const LIKE = 57472
const REGEXP = 57473
const IN = 57474
const ASSIGNMENT = 57475
const ILIKE = 57476
const SHIFT_LEFT = 57477
const SHIFT_RIGHT = 57478
const DIV = 57479
const MOD = 57480
const UNARY = 57481
const COLLATE = 57482
const BINARY = 57483
const UNDERSCORE_BINARY = 57484
const INTERVAL = 57485
const OUT = 57486
const INOUT = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const WORK = 57493
const CONSISTENT = 57494
const SNAPSHOT = 57495
const SAVEPOINT = 57496
const CHAIN = 57497
const NO = 57498
const RELEASE = 57499
const PRIORITY = 57500
const QUICK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const DECIMAL_VALUE = 57515
const TIME = 57516
const TIMESTAMP = 57517
const DATETIME = 57518
const YEAR = 57519
const CHAR = 57520
const VARCHAR = 57521
const BOOL = 57522
const CHARACTER = 57523
const VARBINARY = 57524
const NCHAR = 57525
const TEXT = 57526
const TINYTEXT = 57527
const MEDIUMTEXT = 57528
const LONGTEXT = 57529
const DATALINK = 57530
const BLOB = 57531
const TINYBLOB = 57532
const MEDIUMBLOB = 57533
const LONGBLOB = 57534
const JSON = 57535
const ENUM = 57536
const UUID = 57537
const VECF32 = 57538
const VECF64 = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const INT1 = 57548
const INT2 = 57549
const INT3 = 57550
const INT4 = 57551
const INT8 = 57552
const S3OPTION = 57553
const STAGEOPTION = 57554
const SQL_SMALL_RESULT = 57555
const SQL_BIG_RESULT = 57556
const SQL_BUFFER_RESULT = 57557
const SQL_CALC_FOUND_ROWS = 57558
const LOW_PRIORITY = 57559
const HIGH_PRIORITY = 57560
const DELAYED = 57561
const CREATE = 57562
const ALTER = 57563
const DROP = 57564
const RENAME = 57565
const ANALYZE = 57566
const PHYPLAN = 57567
const ADD = 57568
const RETURNS = 57569
const SCHEMA = 57570
const TABLE = 57571
const SEQUENCE = 57572
const INDEX = 57573
const VIEW = 57574
const TO = 57575
const IGNORE = 57576
const IF = 57577
const PRIMARY = 57578
const COLUMN = 57579
const CONSTRAINT = 57580
const SPATIAL = 57581
const FULLTEXT = 57582
const FOREIGN = 57583
const KEY_BLOCK_SIZE = 57584
const SHOW = 57585
const DESCRIBE = 57586
const EXPLAIN = 57587
const DATE = 57588
const ESCAPE = 57589
const REPAIR = 57590
const OPTIMIZE = 57591
const TRUNCATE = 57592
const MAXVALUE = 57593
const PARTITION = 57594
const REORGANIZE = 57595
const LESS = 57596
const THAN = 57597
const PROCEDURE = 57598
const TRIGGER = 57599
const STATUS = 57600
const VARIABLES = 57601
const ROLE = 57602
const PROXY = 57603
const AVG_ROW_LENGTH = 57604
const STORAGE = 57605
const DISK = 57606
const MEMORY = 57607
const CHECKSUM = 57608
const COMPRESSION = 57609
const DATA = 57610
const DIRECTORY = 57611
const DELAY_KEY_WRITE = 57612
const ENCRYPTION = 57613
const ENGINE = 57614
const MAX_ROWS = 57615
const MIN_ROWS = 57616
const PACK_KEYS = 57617
const ROW_FORMAT = 57618
const STATS_AUTO_RECALC = 57619
const STATS_PERSISTENT = 57620
const STATS_SAMPLE_PAGES = 57621
const DYNAMIC = 57622
const COMPRESSED = 57623
const REDUNDANT = 57624
const COMPACT = 57625
const FIXED = 57626
const COLUMN_FORMAT = 57627
const AUTO_RANDOM = 57628
const ENGINE_ATTRIBUTE = 57629
const SECONDARY_ENGINE_ATTRIBUTE = 57630
const INSERT_METHOD = 57631
const RESTRICT = 57632
const CASCADE = 57633
const ACTION = 57634
const PARTIAL = 57635
const SIMPLE = 57636
const CHECK = 57637
const ENFORCED = 57638
const RANGE = 57639
const LIST = 57640
const ALGORITHM = 57641
const LINEAR = 57642
const PARTITIONS = 57643
const SUBPARTITION = 57644
const SUBPARTITIONS = 57645
const CLUSTER = 57646
const TYPE = 57647
const ANY = 57648
const SOME = 57649
const EXTERNAL = 57650
const LOCALFILE = 57651
const URL = 57652
const PREPARE = 57653
const DEALLOCATE = 57654
const RESET = 57655
const EXTENSION = 57656
const RETENTION = 57657
const PERIOD = 57658
const CLONE = 57659
const INCREMENT = 57660
const CYCLE = 57661
const MINVALUE = 57662
const PUBLICATION = 57663
const SUBSCRIPTIONS = 57664
const PUBLICATIONS = 57665
const PROPERTIES = 57666
const PARSER = 57667
const VISIBLE = 57668
const INVISIBLE = 57669
const BTREE = 57670
const HASH = 57671
const RTREE = 57672
const BSI = 57673
const IVFFLAT = 57674
const MASTER = 57675
const HNSW = 57676
const ZONEMAP = 57677
const LEADING = 57678
const BOTH = 57679
const TRAILING = 57680
const UNKNOWN = 57681
const LISTS = 57682
const OP_TYPE = 57683
const REINDEX = 57684
const EF_SEARCH = 57685
const EF_CONSTRUCTION = 57686
const M = 57687
const QUANTIZATION = 57688
const EXPIRE = 57689
const ACCOUNT = 57690
const ACCOUNTS = 57691
const UNLOCK = 57692
const DAY = 57693
const NEVER = 57694
const PUMP = 57695
const MYSQL_COMPATIBILITY_MODE = 57696
const UNIQUE_CHECK_ON_AUTOINCR = 57697
const MODIFY = 57698
const CHANGE = 57699
const SECOND = 57700
const ASCII = 57701
const COALESCE = 57702
const COLLATION = 57703
const HOUR = 57704
const MICROSECOND = 57705
const MINUTE = 57706
const MONTH = 57707
const QUARTER = 57708
const REPEAT = 57709
const REVERSE = 57710
const ROW_COUNT = 57711
const WEEK = 57712
const REVOKE = 57713
const FUNCTION = 57714
const PRIVILEGES = 57715
const TABLESPACE = 57716
const EXECUTE = 57717
const SUPER = 57718
const GRANT = 57719
const OPTION = 57720
const REFERENCES = 57721
const REPLICATION = 57722
const SLAVE = 57723
const CLIENT = 57724
const USAGE = 57725
const RELOAD = 57726
const FILE = 57727
const TEMPORARY = 57728
const ROUTINE = 57729
const EVENT = 57730
const SHUTDOWN = 57731
const NULLX = 57732
const AUTO_INCREMENT = 57733
const APPROXNUM = 57734
const SIGNED = 57735
const UNSIGNED = 57736
const ZEROFILL = 57737
const ENGINES = 57738
const LOW_CARDINALITY = 57739
const AUTOEXTEND_SIZE = 57740
const ADMIN_NAME = 57741
const RANDOM = 57742
const SUSPEND = 57743
const ATTRIBUTE = 57744
const HISTORY = 57745
const REUSE = 57746
const CURRENT = 57747
const OPTIONAL = 57748
const FAILED_LOGIN_ATTEMPTS = 57749
const PASSWORD_LOCK_TIME = 57750
const UNBOUNDED = 57751
const SECONDARY = 57752
const RESTRICTED = 57753
const USER = 57754
const IDENTIFIED = 57755
const CIPHER = 57756
const ISSUER = 57757
const X509 = 57758
const SUBJECT = 57759
const SAN = 57760
const REQUIRE = 57761
const SSL = 57762
const NONE = 57763
const PASSWORD = 57764
const SHARED = 57765
const EXCLUSIVE = 57766
const MAX_QUERIES_PER_HOUR = 57767
const MAX_UPDATES_PER_HOUR = 57768
const MAX_CONNECTIONS_PER_HOUR = 57769
const MAX_USER_CONNECTIONS = 57770
const FORMAT = 57771
const VERBOSE = 57772
const CONNECTION = 57773
const TRIGGERS = 57774
const PROFILES = 57775
const LOAD = 57776
const INLINE = 57777
const INFILE = 57778
const TERMINATED = 57779
const OPTIONALLY = 57780
const ENCLOSED = 57781
const ESCAPED = 57782
const STARTING = 57783
const LINES = 57784
const ROWS = 57785
const IMPORT = 57786
const DISCARD = 57787
const JSONTYPE = 57788
const MODUMP = 57789
const OVER = 57790
const PRECEDING = 57791
const FOLLOWING = 57792
const GROUPS = 57793
const DATABASES = 57794
const TABLES = 57795
const SEQUENCES = 57796
const EXTENDED = 57797
const FULL = 57798
const PROCESSLIST = 57799
const FIELDS = 57800
const COLUMNS = 57801
const OPEN = 57802
const ERRORS = 57803
const WARNINGS = 57804
const INDEXES = 57805
const SCHEMAS = 57806
const NODE = 57807
const LOCKS = 57808
const ROLES = 57809
const TABLE_NUMBER = 57810
const COLUMN_NUMBER = 57811
const TABLE_VALUES = 57812
const TABLE_SIZE = 57813
const NAMES = 57814
const GLOBAL = 57815
const PERSIST = 57816
const SESSION = 57817
const ISOLATION = 57818
const LEVEL = 57819
const READ = 57820
const WRITE = 57821
const ONLY = 57822
const REPEATABLE = 57823
const COMMITTED = 57824
const UNCOMMITTED = 57825
const SERIALIZABLE = 57826
const LOCAL = 57827
const EVENTS = 57828
const PLUGINS = 57829
const CURRENT_TIMESTAMP = 57830
const DATABASE = 57831
const CURRENT_TIME = 57832
const LOCALTIME = 57833
const LOCALTIMESTAMP = 57834
const UTC_DATE = 57835
const UTC_TIME = 57836
const UTC_TIMESTAMP = 57837
const REPLACE = 57838
const CONVERT = 57839
const SEPARATOR = 57840
const TIMESTAMPDIFF = 57841
const CURRENT_DATE = 57842
const CURRENT_USER = 57843
const CURRENT_ROLE = 57844
const SECOND_MICROSECOND = 57845
const MINUTE_MICROSECOND = 57846
const MINUTE_SECOND = 57847
const HOUR_MICROSECOND = 57848
const HOUR_SECOND = 57849
const HOUR_MINUTE = 57850
const DAY_MICROSECOND = 57851
const DAY_SECOND = 57852
const DAY_MINUTE = 57853
const DAY_HOUR = 57854
const YEAR_MONTH = 57855
const SQL_TSI_HOUR = 57856
const SQL_TSI_DAY = 57857
const SQL_TSI_WEEK = 57858
const SQL_TSI_MONTH = 57859
const SQL_TSI_QUARTER = 57860
const SQL_TSI_YEAR = 57861
const SQL_TSI_SECOND = 57862
const SQL_TSI_MINUTE = 57863
const RECURSIVE = 57864
const CONFIG = 57865
const DRAINER = 57866
const SOURCE = 57867
const STREAM = 57868
const HEADERS = 57869
const CONNECTOR = 57870
const CONNECTORS = 57871
const DAEMON = 57872
const PAUSE = 57873
const CANCEL = 57874
const TASK = 57875
const RESUME = 57876
const MATCH = 57877
const AGAINST = 57878
const BOOLEAN = 57879
const LANGUAGE = 57880
const WITH = 57881
const QUERY = 57882
const EXPANSION = 57883
const WITHOUT = 57884
const VALIDATION = 57885
const UPGRADE = 57886
const RETRY = 57887
const ADDDATE = 57888
const BIT_AND = 57889
const BIT_OR = 57890
const BIT_XOR = 57891
const CAST = 57892
const COUNT = 57893
const APPROX_COUNT = 57894
const APPROX_COUNT_DISTINCT = 57895
const SERIAL_EXTRACT = 57896
const APPROX_PERCENTILE = 57897
const CURDATE = 57898
const CURTIME = 57899
const DATE_ADD = 57900
const DATE_SUB = 57901
const EXTRACT = 57902
const GROUP_CONCAT = 57903
const MAX = 57904
const MID = 57905
const MIN = 57906
const NOW = 57907
const POSITION = 57908
const SESSION_USER = 57909
const STD = 57910
const STDDEV = 57911
const MEDIAN = 57912
const CLUSTER_CENTERS = 57913
const KMEANS = 57914
const STDDEV_POP = 57915
const STDDEV_SAMP = 57916
const SUBDATE = 57917
const SUBSTR = 57918
const SUBSTRING = 57919
const SUM = 57920
const SYSDATE = 57921
const SYSTEM_USER = 57922
const TRANSLATE = 57923
const TRIM = 57924
const VARIANCE = 57925
const VAR_POP = 57926
const VAR_SAMP = 57927
const AVG = 57928
const RANK = 57929
const ROW_NUMBER = 57930
const DENSE_RANK = 57931
const BIT_CAST = 57932
const BITMAP_BIT_POSITION = 57933
const BITMAP_BUCKET_NUMBER = 57934
const BITMAP_COUNT = 57935
const BITMAP_CONSTRUCT_AGG = 57936
const BITMAP_OR_AGG = 57937
const NEXTVAL = 57938
const SETVAL = 57939
const CURRVAL = 57940
const LASTVAL = 57941
const ARROW = 57942
const ROW = 57943
const OUTFILE = 57944
const HEADER = 57945
const MAX_FILE_SIZE = 57946
const FORCE_QUOTE = 57947
const PARALLEL = 57948
const STRICT = 57949
const UNUSED = 57950
const BINDINGS = 57951
const DO = 57952
const DECLARE = 57953
const LOOP = 57954
const WHILE = 57955
const LEAVE = 57956
const ITERATE = 57957
const UNTIL = 57958
const CALL = 57959
const PREV = 57960
const SLIDING = 57961
const FILL = 57962
const SPBEGIN = 57963
const BACKEND = 57964
const SERVERS = 57965
const HANDLER = 57966
const PERCENT = 57967
const SAMPLE = 57968
const MO_TS = 57969
const PITR = 57970
const RECOVERY_WINDOW = 57971
const INTERNAL = 57972
const CDC = 57973
const GROUPING = 57974
const SETS = 57975
const CUBE = 57976
const ROLLUP = 57977
const LOGSERVICE = 57978
const REPLICAS = 57979
const STORES = 57980
const SETTINGS = 57981
const KILL = 57982
const BACKUP = 57983
const FILESYSTEM = 57984
const PARALLELISM = 57985
const RESTORE = 57986
const QUERY_RESULT = 57987

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"OF",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CENTROIDX",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"SAVEPOINT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"SQL_CALC_FOUND_ROWS",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"CLONE",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"HNSW",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EF_SEARCH",
	"EF_CONSTRUCTION",
	"M",
	"QUANTIZATION",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"RECOVERY_WINDOW",
	"INTERNAL",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:13041

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 142,
	11, 813,
	22, 813,
	-2, 806,
	-1, 167,
	246, 1255,
	248, 1143,
	-2, 1199,
	-1, 194,
	44, 636,
	248, 636,
	275, 643,
	276, 643,
	480, 636,
	-2, 671,
	-1, 234,
	666, 2033,
	-2, 535,
	-1, 548,
	666, 2157,
	-2, 412,
	-1, 606,
	666, 2216,
	-2, 410,
	-1, 607,
	666, 2217,
	-2, 411,
	-1, 608,
	666, 2218,
	-2, 413,
	-1, 749,
	327, 181,
	452, 181,
	453, 181,
	-2, 1930,
	-1, 816,
	86, 1715,
	-2, 2093,
	-1, 817,
	86, 1734,
	-2, 2064,
	-1, 821,
	86, 1735,
	-2, 2092,
	-1, 855,
	86, 1642,
	-2, 2297,
	-1, 856,
	86, 1643,
	-2, 2296,
	-1, 857,
	86, 1644,
	-2, 2286,
	-1, 858,
	86, 2258,
	-2, 2279,
	-1, 859,
	86, 2259,
	-2, 2280,
	-1, 860,
	86, 2260,
	-2, 2288,
	-1, 861,
	86, 2261,
	-2, 2268,
	-1, 862,
	86, 2262,
	-2, 2277,
	-1, 863,
	86, 2263,
	-2, 2289,
	-1, 864,
	86, 2264,
	-2, 2290,
	-1, 865,
	86, 2265,
	-2, 2295,
	-1, 866,
	86, 2266,
	-2, 2300,
	-1, 867,
	86, 2267,
	-2, 2301,
	-1, 868,
	86, 1711,
	-2, 2131,
	-1, 869,
	86, 1712,
	-2, 1914,
	-1, 870,
	86, 1713,
	-2, 2140,
	-1, 871,
	86, 1714,
	-2, 1923,
	-1, 873,
	86, 1717,
	-2, 1931,
	-1, 875,
	86, 1719,
	-2, 2164,
	-1, 877,
	86, 1722,
	-2, 1952,
	-1, 879,
	86, 1724,
	-2, 2176,
	-1, 880,
	86, 1725,
	-2, 2175,
	-1, 881,
	86, 1726,
	-2, 1999,
	-1, 882,
	86, 1727,
	-2, 2088,
	-1, 885,
	86, 1730,
	-2, 2187,
	-1, 887,
	86, 1732,
	-2, 2190,
	-1, 888,
	86, 1733,
	-2, 2192,
	-1, 889,
	86, 1736,
	-2, 2200,
	-1, 890,
	86, 1737,
	-2, 2073,
	-1, 891,
	86, 1738,
	-2, 2118,
	-1, 892,
	86, 1739,
	-2, 2083,
	-1, 893,
	86, 1740,
	-2, 2108,
	-1, 904,
	86, 1620,
	-2, 2291,
	-1, 905,
	86, 1621,
	-2, 2292,
	-1, 906,
	86, 1622,
	-2, 2293,
	-1, 1010,
	475, 671,
	476, 671,
	-2, 637,
	-1, 1061,
	128, 1914,
	139, 1914,
	159, 1914,
	-2, 1888,
	-1, 1182,
	22, 840,
	-2, 789,
	-1, 1292,
	11, 813,
	22, 813,
	-2, 1497,
	-1, 1376,
	22, 840,
	-2, 789,
	-1, 1735,
	86, 1787,
	-2, 2090,
	-1, 1736,
	86, 1788,
	-2, 2091,
	-1, 2343,
	87, 1013,
	-2, 1019,
	-1, 2359,
	111, 1191,
	155, 1191,
	195, 1191,
	198, 1191,
	288, 1191,
	-2, 1184,
	-1, 2525,
	11, 813,
	22, 813,
	-2, 954,
	-1, 2559,
	87, 1874,
	160, 1874,
	-2, 2075,
	-1, 2560,
	87, 1874,
	160, 1874,
	-2, 2074,
	-1, 2561,
	87, 1850,
	160, 1850,
	-2, 2061,
	-1, 2562,
	87, 1851,
	160, 1851,
	-2, 2066,
	-1, 2563,
	87, 1852,
	160, 1852,
	-2, 1987,
	-1, 2564,
	87, 1853,
	160, 1853,
	-2, 1980,
	-1, 2565,
	87, 1854,
	160, 1854,
	-2, 1904,
	-1, 2566,
	87, 1855,
	160, 1855,
	-2, 2063,
	-1, 2567,
	87, 1856,
	160, 1856,
	-2, 1985,
	-1, 2568,
	87, 1857,
	160, 1857,
	-2, 1979,
	-1, 2569,
	87, 1858,
	160, 1858,
	-2, 1967,
	-1, 2570,
	87, 1874,
	160, 1874,
	-2, 1968,
	-1, 2571,
	87, 1874,
	160, 1874,
	-2, 1969,
	-1, 2573,
	87, 1863,
	160, 1863,
	-2, 2108,
	-1, 2574,
	87, 1840,
	160, 1840,
	-2, 2093,
	-1, 2575,
	87, 1872,
	160, 1872,
	-2, 2064,
	-1, 2576,
	87, 1872,
	160, 1872,
	-2, 2092,
	-1, 2577,
	87, 1872,
	160, 1872,
	-2, 1932,
	-1, 2578,
	87, 1870,
	160, 1870,
	-2, 2083,
	-1, 2579,
	87, 1867,
	160, 1867,
	-2, 1957,
	-1, 2580,
	86, 1821,
	87, 1821,
	160, 1821,
	410, 1821,
	411, 1821,
	412, 1821,
	-2, 1903,
	-1, 2581,
	86, 1822,
	87, 1822,
	160, 1822,
	410, 1822,
	411, 1822,
	412, 1822,
	-2, 1905,
	-1, 2582,
	86, 1823,
	87, 1823,
	160, 1823,
	410, 1823,
	411, 1823,
	412, 1823,
	-2, 2136,
	-1, 2583,
	86, 1825,
	87, 1825,
	160, 1825,
	410, 1825,
	411, 1825,
	412, 1825,
	-2, 2065,
	-1, 2584,
	86, 1827,
	87, 1827,
	160, 1827,
	410, 1827,
	411, 1827,
	412, 1827,
	-2, 2043,
	-1, 2585,
	86, 1829,
	87, 1829,
	160, 1829,
	410, 1829,
	411, 1829,
	412, 1829,
	-2, 1986,
	-1, 2586,
	86, 1831,
	87, 1831,
	160, 1831,
	410, 1831,
	411, 1831,
	412, 1831,
	-2, 1963,
	-1, 2587,
	86, 1832,
	87, 1832,
	160, 1832,
	410, 1832,
	411, 1832,
	412, 1832,
	-2, 1964,
	-1, 2588,
	86, 1834,
	87, 1834,
	160, 1834,
	410, 1834,
	411, 1834,
	412, 1834,
	-2, 1902,
	-1, 2589,
	87, 1877,
	160, 1877,
	410, 1877,
	411, 1877,
	412, 1877,
	-2, 1937,
	-1, 2590,
	87, 1877,
	160, 1877,
	410, 1877,
	411, 1877,
	412, 1877,
	-2, 1953,
	-1, 2591,
	87, 1880,
	160, 1880,
	410, 1880,
	411, 1880,
	412, 1880,
	-2, 1933,
	-1, 2592,
	87, 1880,
	160, 1880,
	410, 1880,
	411, 1880,
	412, 1880,
	-2, 2002,
	-1, 2593,
	87, 1877,
	160, 1877,
	410, 1877,
	411, 1877,
	412, 1877,
	-2, 2025,
	-1, 2821,
	111, 1191,
	155, 1191,
	195, 1191,
	198, 1191,
	288, 1191,
	-2, 1185,
	-1, 2841,
	84, 733,
	160, 733,
	-2, 1371,
	-1, 3275,
	198, 1191,
	312, 1460,
	-2, 1432,
	-1, 3470,
	111, 1191,
	155, 1191,
	195, 1191,
	198, 1191,
	-2, 1311,
	-1, 3473,
	111, 1191,
	155, 1191,
	195, 1191,
	198, 1191,
	-2, 1311,
	-1, 3485,
	84, 733,
	160, 733,
	-2, 1371,
	-1, 3506,
	198, 1191,
	312, 1460,
	-2, 1433,
	-1, 3664,
	111, 1191,
	155, 1191,
	195, 1191,
	198, 1191,
	-2, 1312,
	-1, 3693,
	87, 1273,
	160, 1273,
	-2, 1191,
	-1, 3843,
	87, 1273,
	160, 1273,
	-2, 1191,
	-1, 4015,
	87, 1277,
	160, 1277,
	-2, 1191,
	-1, 4071,
	87, 1278,
	160, 1278,
	-2, 1191,
}

const yyPrivate = 57344

const yyLast = 56085

var yyAct = [...]int{
	783, 759, 4125, 785, 4093, 2872, 223, 4117, 1637, 4019,
	1999, 1715, 4025, 3491, 3591, 4026, 4018, 3295, 3935, 3912,
	3843, 3261, 2596, 3890, 3970, 768, 3372, 3721, 3520, 3821,
	761, 1549, 2866, 3786, 3881, 1481, 3373, 1328, 3842, 1711,
	3913, 3651, 1775, 2778, 813, 2869, 649, 3755, 1183, 3595,
	1060, 3811, 3891, 1638, 37, 3451, 3893, 3586, 1487, 3456,
	1944, 1762, 2410, 667, 3507, 673, 673, 1177, 3661, 3270,
	3674, 673, 691, 700, 2844, 1718, 700, 3231, 3216, 3633,
	3474, 3666, 3192, 3370, 2987, 2985, 2110, 2097, 2986, 3443,
	2895, 3279, 2094, 1780, 3219, 68, 3290, 2962, 3476, 2557,
	3272, 2133, 2783, 3415, 208, 2059, 2685, 2519, 3055, 2982,
	2555, 2165, 2207, 2413, 3015, 3278, 2650, 2809, 3195, 3335,
	2371, 3241, 3199, 1173, 3197, 1959, 697, 708, 3194, 2822,
	2321, 3190, 1542, 2191, 2973, 1615, 3193, 3163, 2628, 751,
	2320, 756, 712, 2173, 2610, 1627, 141, 2203, 1456, 3103,
	2138, 3029, 2166, 941, 2202, 2174, 1622, 2520, 2063, 36,
	2090, 1873, 1626, 1630, 1446, 2503, 2060, 2798, 2897, 2793,
	981, 2877, 219, 8, 6, 2498, 2411, 2370, 2836, 218,
	7, 2359, 2204, 1776, 1920, 2237, 2553, 1709, 1121, 760,
	1558, 1589, 1527, 752, 1521, 2350, 2722, 1054, 750, 649,
	1769, 1199, 2353, 2406, 666, 758, 1989, 1700, 1714, 1749,
	769, 1958, 1659, 2172, 1641, 2169, 1470, 2154, 1596, 705,
	1916, 1708, 1053, 223, 2527, 223, 1919, 1112, 1113, 1526,
	1580, 980, 908, 682, 673, 2499, 714, 1523, 209, 24,
	25, 17, 10, 648, 23, 1019, 1092, 201, 1781, 957,
	1413, 1490, 699, 1482, 715, 1329, 978, 1398, 963, 910,
	1005, 27, 1374, 711, 205, 911, 1466, 2211, 3900, 1452,
	1260, 1261, 1262, 1259, 669, 1777, 1260, 1261, 1262, 1259,
	1260, 1261, 1262, 1259, 3807, 2758, 2529, 2758, 2758, 1109,
	752, 1087, 3488, 3381, 3248, 3072, 1491, 3071, 1069, 2221,
	1178, 3622, 3459, 1179, 3365, 2673, 2611, 1886, 2616, 2614,
	1599, 2613, 1603, 1104, 1105, 207, 678, 668, 2319, 1393,
	1449, 1450, 1451, 1525, 3868, 2325, 1367, 1108, 703, 1110,
	930, 16, 1039, 696, 928, 2597, 757, 14, 1652, 1887,
	674, 1105, 1105, 3173, 2329, 1396, 3156, 3158, 2721, 1066,
	3153, 3155, 4105, 206, 64, 197, 168, 1504, 1880, 1178,
	1389, 3584, 1068, 1088, 15, 1601, 3051, 3049, 2143, 2750,
	2748, 3876, 198, 1260, 1261, 1262, 1259, 3762, 3756, 189,
	8, 3587, 1103, 199, 3371, 2188, 33, 7, 3895, 1260,
	1261, 1262, 1259, 2168, 1323, 909, 3132, 2160, 2451, 4131,
	685, 3889, 140, 692, 920, 4102, 3828, 3770, 3601, 694,
	1258, 1222, 3997, 2752, 1404, 4054, 971, 126, 972, 206,
	64, 197, 168, 2659, 2208, 3634, 202, 3475, 3638, 2667,
	2362, 929, 206, 1636, 3887, 927, 695, 3794, 1082, 1077,
	1072, 1076, 1080, 3768, 206, 206, 206, 3434, 2703, 2361,
	3829, 3946, 1566, 1403, 1402, 1401, 930, 952, 693, 1399,
	206, 1064, 928, 1645, 1070, 1657, 1085, 1065, 2829, 1815,
	1075, 966, 1650, 962, 3130, 1405, 710, 1421, 206, 1438,
	1034, 1032, 2980, 1033, 1668, 2354, 206, 64, 197, 168,
	206, 206, 202, 1642, 1649, 1654, 206, 64, 197, 168,
	2547, 1419, 1889, 148, 149, 202, 150, 151, 1257, 140,
	3796, 152, 2219, 921, 153, 2777, 2548, 1644, 2827, 1656,
	925, 1083, 206, 64, 197, 168, 3022, 3075, 3157, 944,
	2629, 1086, 3154, 202, 1237, 1952, 1528, 1238, 1530, 3063,
	140, 899, 2073, 898, 900, 901, 2534, 902, 903, 2533,
	1028, 202, 2535, 1973, 206, 64, 197, 168, 1073, 202,
	1250, 1194, 3611, 202, 202, 1240, 3023, 3024, 2830, 202,
	2443, 1717, 1040, 2773, 1478, 3994, 3265, 167, 195, 204,
	196, 124, 1084, 2074, 2075, 206, 64, 197, 168, 1255,
	2775, 1898, 1899, 2795, 1230, 202, 1063, 1232, 3898, 1036,
	194, 188, 187, 2796, 968, 2107, 961, 70, 3897, 1500,
	1602, 1600, 1501, 1488, 1489, 965, 964, 1420, 1701, 1191,
	1062, 1705, 1074, 2753, 1486, 1233, 3263, 202, 1485, 1488,
	1489, 3898, 3984, 3896, 2774, 2308, 953, 3990, 4029, 4030,
	3897, 3983, 3896, 3982, 4053, 1704, 4097, 4098, 2770, 3879,
	3056, 3374, 2794, 1235, 1950, 3972, 960, 3972, 202, 3999,
	4000, 3975, 3759, 1038, 1682, 3057, 3374, 3058, 190, 191,
	192, 673, 673, 3995, 3996, 970, 4003, 4002, 4001, 4004,
	959, 2654, 673, 1187, 958, 1188, 3909, 2223, 1202, 1205,
	946, 3388, 2771, 3882, 3883, 3884, 3885, 951, 2091, 1081,
	3210, 1503, 700, 700, 1721, 673, 2917, 200, 3610, 1202,
	1205, 753, 2801, 1226, 1197, 1242, 3612, 1236, 1243, 2081,
	2085, 1696, 3444, 2215, 949, 2493, 3212, 3449, 136, 2486,
	3798, 3799, 193, 3643, 137, 1078, 2974, 1706, 1079, 1228,
	1037, 697, 697, 697, 2751, 3093, 1245, 1115, 2349, 2151,
	1392, 1231, 1234, 1609, 1608, 969, 3207, 3208, 2780, 1253,
	1254, 1703, 969, 3992, 1514, 3532, 2832, 2664, 1300, 3091,
	1422, 1252, 3209, 3899, 2220, 2776, 746, 1227, 1476, 748,
	1248, 1249, 193, 2449, 747, 1069, 1225, 3585, 950, 3806,
	3391, 138, 3097, 2757, 1239, 1951, 3050, 1179, 1180, 1179,
	2326, 4028, 3206, 3803, 63, 1179, 3749, 2209, 2968, 167,
	195, 204, 196, 2488, 1888, 1187, 1294, 2489, 2490, 2209,
	2209, 3073, 3640, 2550, 923, 3668, 3602, 3070, 3657, 1720,
	1719, 2242, 194, 2772, 1241, 3419, 1066, 2496, 1089, 1247,
	665, 1071, 1105, 1105, 2210, 1332, 1105, 1105, 1105, 1068,
	3547, 1105, 1217, 65, 1229, 3291, 3292, 698, 1069, 3293,
	3827, 3294, 3267, 3217, 1179, 967, 2105, 2106, 924, 1502,
	4062, 2222, 3998, 1246, 3229, 3242, 3544, 2837, 1702, 1035,
	3833, 1727, 1730, 1731, 3928, 3825, 2612, 3923, 146, 203,
	3750, 147, 1728, 1204, 1203, 2964, 169, 3778, 1244, 3779,
	2481, 61, 1604, 702, 956, 701, 2361, 2978, 2356, 1066,
	3537, 3164, 3914, 3930, 1204, 1203, 3492, 3936, 3204, 65,
	1196, 3769, 1068, 3262, 698, 1395, 909, 1397, 2867, 2868,
	1193, 2871, 1106, 1107, 698, 1206, 2871, 1111, 1181, 1409,
	3430, 2749, 1182, 1412, 1065, 1175, 1651, 1418, 696, 696,
	696, 3797, 3499, 3781, 1210, 1211, 1372, 2340, 1186, 1377,
	698, 1214, 169, 3639, 2668, 1488, 1489, 139, 45, 1296,
	1297, 1298, 1299, 1216, 62, 169, 1400, 1465, 5, 3297,
	981, 1301, 3218, 3908, 3792, 3780, 65, 169, 169, 169,
	3628, 1890, 698, 2226, 2228, 2229, 65, 143, 144, 3427,
	971, 145, 972, 169, 945, 2429, 3180, 943, 3429, 926,
	1477, 2409, 2432, 2484, 3548, 1488, 1489, 3712, 692, 692,
	692, 169, 65, 2908, 694, 694, 694, 4137, 3218, 169,
	2909, 2910, 2911, 169, 169, 673, 2800, 2461, 1516, 169,
	1484, 2550, 673, 3834, 2460, 2092, 649, 649, 3826, 2492,
	3213, 695, 695, 695, 65, 3800, 649, 649, 3598, 2975,
	1553, 1553, 3991, 673, 4120, 169, 1208, 3707, 2807, 2431,
	3094, 2482, 2483, 693, 693, 693, 1538, 1537, 1480, 1479,
	1463, 1344, 1345, 1215, 700, 1581, 667, 1190, 1192, 1195,
	1333, 1592, 1555, 2804, 2805, 3268, 1462, 169, 3701, 1551,
	1551, 1461, 2918, 3937, 2919, 2920, 223, 2946, 2803, 3812,
	3271, 1174, 2215, 1560, 3644, 649, 2430, 3152, 2452, 3477,
	1691, 203, 2693, 1692, 2082, 2084, 1697, 2426, 169, 3205,
	1729, 4017, 3847, 2409, 2416, 3582, 1458, 3722, 3723, 3724,
	3728, 3726, 3727, 3729, 3725, 3377, 1414, 1291, 710, 3969,
	1524, 1165, 1161, 1162, 1163, 1164, 1222, 2698, 3471, 2697,
	2696, 2694, 3778, 1515, 3779, 3464, 3287, 1634, 3168, 2660,
	2539, 2447, 1639, 1376, 3296, 2212, 1378, 3291, 3292, 1648,
	3773, 2813, 2817, 2818, 2819, 2814, 2816, 2815, 3034, 3035,
	1547, 1548, 1423, 3017, 3019, 1415, 1416, 2080, 2057, 1411,
	1425, 1426, 1427, 1428, 1429, 4121, 1431, 1424, 1680, 1430,
	3326, 2763, 1437, 2416, 2419, 1472, 1473, 3774, 3781, 3096,
	1436, 3892, 1553, 2360, 1553, 1187, 2419, 1892, 1643, 2695,
	1658, 1435, 1434, 1433, 1041, 1655, 1445, 704, 3714, 3437,
	1448, 2915, 2227, 1532, 1534, 973, 1221, 2341, 697, 3416,
	3780, 697, 697, 1545, 1546, 1455, 2238, 3288, 1613, 970,
	1616, 1617, 2644, 1464, 1690, 3846, 2224, 2225, 1492, 1069,
	1474, 1495, 1618, 1619, 1443, 2415, 1069, 2767, 1493, 1494,
	2417, 1496, 1497, 1610, 1498, 2333, 935, 1901, 1505, 1506,
	1582, 1029, 1553, 1467, 1471, 1471, 1471, 1675, 1676, 1647,
	1624, 1625, 1029, 1536, 3105, 3104, 3708, 3709, 1629, 1187,
	1779, 1633, 1605, 4016, 1408, 2912, 1902, 678, 1467, 1467,
	2335, 2334, 1810, 1811, 1828, 1814, 942, 1573, 1632, 1567,
	1561, 1763, 3620, 1829, 2418, 3226, 1579, 939, 1593, 4118,
	4119, 2425, 937, 936, 1594, 2423, 1836, 3170, 1838, 2420,
	1839, 1840, 1841, 3703, 2415, 2409, 2414, 3702, 2412, 2417,
	1029, 2420, 2947, 2949, 2950, 2951, 2948, 3018, 2937, 2938,
	2404, 1713, 1818, 1819, 1820, 1031, 2699, 2700, 1030, 1406,
	1407, 3378, 975, 976, 977, 1834, 1031, 2332, 1835, 1030,
	1679, 1187, 1900, 2473, 931, 932, 2389, 1891, 3675, 1678,
	4133, 1894, 1694, 1896, 2446, 1848, 1849, 1732, 1871, 1813,
	2842, 1903, 1905, 2418, 1906, 2276, 1908, 1909, 2275, 938,
	667, 1581, 3247, 4139, 935, 1870, 1917, 1553, 1922, 1923,
	1710, 1925, 1516, 673, 3979, 4127, 1666, 1661, 673, 1669,
	2764, 1553, 1184, 1042, 1031, 981, 2786, 1030, 1945, 1688,
	1684, 1687, 1683, 2517, 4115, 696, 1893, 1707, 696, 696,
	1258, 1553, 3332, 1874, 3289, 1457, 1263, 1516, 3227, 2787,
	2788, 1689, 691, 2217, 1293, 934, 4073, 1712, 4040, 1827,
	937, 936, 3774, 1303, 2550, 1184, 3775, 1260, 1261, 1262,
	1259, 1258, 1972, 1758, 1759, 2936, 1751, 1698, 2843, 3328,
	1716, 1979, 1979, 1222, 1516, 2631, 1516, 1516, 4128, 1312,
	673, 673, 2352, 2046, 1917, 2050, 3440, 4037, 1553, 2054,
	2055, 3390, 2313, 2659, 2070, 692, 649, 4074, 692, 692,
	3301, 694, 3299, 2388, 694, 694, 1260, 1261, 1262, 1259,
	649, 1686, 1553, 913, 914, 915, 916, 1685, 1457, 4074,
	2132, 4041, 4031, 2843, 1976, 4013, 1699, 1926, 695, 3963,
	3962, 695, 695, 1260, 1261, 1262, 1259, 1219, 3186, 673,
	1917, 1553, 1924, 2115, 1220, 673, 673, 673, 708, 708,
	693, 2518, 3128, 693, 693, 2125, 2126, 2127, 2128, 1877,
	4038, 1258, 2134, 2001, 1667, 1842, 2108, 1670, 1671, 223,
	2048, 1946, 223, 223, 3956, 223, 1872, 2518, 3162, 2248,
	1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
	1747, 1748, 2251, 1964, 1911, 2252, 1760, 1761, 4014, 1982,
	2351, 1878, 1258, 1258, 1373, 1921, 3160, 2518, 3037, 1971,
	2100, 2101, 1974, 1975, 1220, 1828, 1828, 2176, 3931, 1937,
	2754, 1912, 1260, 1261, 1262, 1259, 3919, 1828, 1828, 1947,
	1948, 2117, 2118, 2119, 2193, 2077, 1882, 2079, 3866, 1953,
	2649, 2636, 1913, 1914, 1915, 1837, 1942, 2252, 2098, 2099,
	1941, 2086, 3865, 2208, 1928, 1929, 1930, 1931, 2072, 2093,
	3332, 3860, 1965, 2130, 2187, 918, 1945, 3859, 2250, 1222,
	1553, 2206, 1643, 2142, 1970, 1961, 2145, 2146, 3858, 2148,
	2416, 2419, 3857, 3837, 2114, 3836, 2178, 1983, 1984, 2402,
	3809, 2217, 1960, 2071, 1962, 1963, 2053, 697, 1955, 3920,
	2318, 2312, 1956, 1957, 2047, 3553, 1978, 1980, 1969, 2311,
	1069, 3867, 3501, 1069, 2052, 2283, 2199, 2103, 2058, 1966,
	1967, 2056, 1069, 1981, 1444, 2375, 2200, 1766, 1467, 1539,
	4146, 2076, 2087, 2078, 2252, 3466, 2183, 3408, 3404, 1977,
	2252, 3309, 1471, 913, 914, 915, 916, 3012, 4129, 1710,
	3448, 2252, 3488, 3041, 1471, 2252, 2217, 2740, 2217, 2845,
	2112, 1066, 2113, 2252, 2728, 2720, 2675, 2120, 2121, 2662,
	2171, 2661, 1591, 1066, 1068, 2657, 2231, 2645, 2550, 2638,
	2633, 2653, 2171, 2396, 2139, 3502, 1068, 1843, 1844, 1845,
	1846, 2271, 2625, 1850, 1851, 1852, 1853, 1855, 1856, 1857,
	1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 3467, 2156,
	3409, 3405, 2256, 3739, 3310, 2198, 2420, 2623, 1069, 2621,
	2518, 2415, 2409, 2414, 1564, 2412, 2417, 2137, 2123, 3551,
	2375, 1663, 2177, 2619, 2374, 2314, 1945, 1258, 1258, 1258,
	2290, 2186, 2184, 2289, 2189, 2197, 2274, 2265, 2375, 1291,
	2634, 2264, 2639, 2634, 1100, 1101, 1102, 1309, 2323, 2324,
	1207, 2327, 2263, 2253, 2330, 2626, 1171, 2284, 2285, 1066,
	2287, 1166, 2216, 2102, 1275, 2336, 2201, 2294, 1672, 933,
	2418, 751, 1068, 2195, 673, 673, 673, 2214, 1099, 3243,
	2624, 1096, 2620, 4140, 3924, 918, 2306, 3252, 3088, 673,
	673, 673, 673, 1499, 696, 1468, 2620, 2375, 2313, 3676,
	2254, 3480, 2372, 1258, 2230, 2239, 1258, 1541, 4101, 1258,
	1258, 2376, 2377, 2378, 1258, 2381, 1516, 1817, 1816, 3478,
	2233, 2234, 2444, 2232, 1751, 1258, 2252, 2611, 3925, 2244,
	1722, 1723, 1724, 1725, 1726, 2217, 786, 796, 1817, 1816,
	1453, 1673, 1516, 3677, 1454, 3481, 787, 1543, 788, 792,
	795, 791, 789, 790, 1260, 1261, 1262, 1259, 1544, 2438,
	3244, 3363, 3901, 3479, 692, 3366, 3808, 3766, 2682, 3705,
	694, 1757, 1767, 3704, 3690, 3647, 1771, 1772, 1773, 1774,
	1278, 1279, 1280, 1281, 1282, 1275, 1812, 1754, 1756, 1753,
	3458, 1755, 3333, 3324, 1822, 3316, 1453, 695, 3311, 3221,
	1454, 793, 2393, 2971, 3245, 2970, 2395, 2811, 2397, 2759,
	2672, 1540, 2445, 2637, 2541, 2181, 1469, 673, 1979, 693,
	2180, 940, 2179, 2307, 2309, 2310, 2522, 2522, 2070, 2522,
	1440, 1854, 1439, 2196, 794, 1189, 2605, 1260, 1261, 1262,
	1259, 1093, 1094, 1095, 1098, 2140, 1097, 1875, 2615, 649,
	649, 2315, 1847, 2235, 2236, 1770, 1770, 1187, 2245, 1260,
	1261, 1262, 1259, 1553, 673, 2383, 2384, 2398, 3364, 2342,
	1597, 2408, 2140, 3042, 1907, 2386, 2387, 673, 1262, 1259,
	3981, 2407, 1259, 1187, 2594, 667, 3717, 1332, 3716, 2651,
	2652, 1592, 3059, 2070, 2906, 2904, 2601, 2883, 2603, 2881,
	3696, 223, 2545, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1275, 2401, 1273, 1283, 1284, 1276, 1277, 1278, 1279, 1280,
	1281, 1282, 1275, 1069, 3648, 3649, 2742, 2382, 2743, 1949,
	2536, 4111, 2537, 2526, 2524, 4110, 2528, 1260, 1261, 1262,
	1259, 2641, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1264,
	4136, 2542, 2543, 2394, 4109, 1968, 4107, 2421, 2422, 2655,
	2427, 3107, 2206, 2552, 2530, 1260, 1261, 1262, 1259, 1553,
	1311, 1553, 4106, 1553, 1066, 4044, 3641, 2385, 1187, 4012,
	2810, 4011, 2391, 1310, 3446, 2392, 2674, 1068, 1283, 1284,
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 1275, 2600, 2390,
	1260, 1261, 1262, 1259, 3926, 2606, 2779, 2958, 2491, 2684,
	2665, 2497, 1553, 1187, 1875, 4135, 3452, 2706, 3862, 1875,
	1875, 1260, 1261, 1262, 1259, 2531, 1260, 1261, 1262, 1259,
	2607, 2956, 2713, 1471, 1832, 1598, 3642, 1553, 2598, 1260,
	1261, 1262, 1259, 2701, 3447, 3850, 1532, 1534, 2267, 1833,
	2954, 1551, 3840, 2943, 2546, 1274, 1273, 1283, 1284, 1276,
	1277, 1278, 1279, 1280, 1281, 1282, 1275, 2957, 2714, 2141,
	3830, 3757, 2144, 3679, 2278, 2147, 1551, 3678, 2149, 3493,
	3121, 2549, 2599, 3457, 3482, 3445, 2761, 2762, 3312, 2595,
	2765, 2955, 3211, 2717, 2718, 1260, 1261, 1262, 1259, 3084,
	3054, 3053, 2941, 1597, 2940, 1187, 2939, 2686, 2931, 2686,
	2953, 2925, 1553, 2942, 2924, 1516, 2690, 2923, 2266, 2922,
	2755, 1516, 2050, 2671, 2627, 4022, 2538, 2666, 2317, 2159,
	2841, 2704, 1333, 3198, 2192, 3616, 2847, 2712, 2158, 2848,
	1535, 2157, 2680, 3120, 2658, 1260, 1261, 1262, 1259, 2656,
	4132, 2068, 1260, 1261, 1262, 1259, 2663, 2858, 2558, 2153,
	2647, 2746, 1260, 1261, 1262, 1259, 2152, 1187, 2109, 1897,
	1260, 1261, 1262, 1259, 1895, 2880, 1664, 1710, 2828, 2676,
	2677, 3604, 1187, 1187, 1187, 1979, 1391, 4130, 1187, 1169,
	2890, 2891, 2892, 2893, 1187, 2900, 2702, 2901, 2902, 2692,
	2903, 2823, 2905, 3603, 2679, 3801, 3802, 2825, 1260, 1261,
	1262, 1259, 746, 2900, 4112, 748, 672, 672, 3592, 1069,
	747, 4099, 680, 4061, 4060, 2522, 2859, 4057, 2838, 3987,
	1260, 1261, 1262, 1259, 1260, 1261, 1262, 1259, 2241, 2959,
	2808, 3986, 2246, 3787, 2001, 3967, 2824, 3541, 1168, 649,
	2255, 3911, 4138, 2669, 3652, 3905, 3886, 2050, 3877, 3854,
	2861, 1187, 2070, 2070, 2070, 2070, 2070, 2070, 3849, 3848,
	2790, 3805, 2792, 3791, 1260, 1261, 1262, 1259, 1187, 2070,
	3789, 3758, 2522, 2849, 3698, 3656, 2878, 2262, 2965, 3645,
	2878, 2789, 2259, 3630, 2851, 2269, 2806, 3629, 3020, 2854,
	1553, 3625, 3623, 2874, 3621, 2831, 8, 2840, 2846, 3618,
	3615, 673, 673, 7, 3614, 3590, 3588, 2286, 2885, 3561,
	1921, 3558, 2291, 2292, 2293, 3555, 2963, 2296, 2297, 2298,
	2299, 2300, 2301, 2302, 2303, 2304, 2305, 2450, 2860, 3442,
	2453, 2454, 2455, 2456, 2457, 2458, 2459, 2876, 2882, 2462,
	2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472,
	2888, 2474, 2475, 2476, 2477, 2478, 3008, 2479, 223, 2863,
	3424, 2249, 3417, 223, 3401, 2715, 3399, 3394, 3344, 3322,
	2558, 2921, 2933, 3021, 3321, 680, 3319, 3318, 2976, 1260,
	1261, 1262, 1259, 3313, 3307, 1828, 3306, 1828, 2723, 2724,
	3069, 3222, 3184, 3183, 2729, 3174, 2857, 3172, 3169, 3167,
	2322, 3098, 2850, 3095, 3083, 2966, 3074, 3052, 3038, 2972,
	1553, 2855, 2856, 3090, 2879, 3027, 2952, 4087, 2989, 2990,
	2991, 2992, 2993, 2994, 2944, 2934, 2932, 3009, 2928, 3011,
	3005, 2927, 2875, 2247, 3010, 2926, 2969, 2768, 3064, 1260,
	1261, 1262, 1259, 2760, 3025, 2756, 1617, 2875, 2886, 2887,
	3076, 2648, 3028, 2889, 854, 853, 1618, 1619, 2337, 2896,
	2331, 2328, 3043, 798, 142, 3396, 2162, 3047, 2155, 142,
	1874, 3124, 1885, 1884, 1665, 3068, 3955, 1340, 1336, 1069,
	1335, 1172, 922, 1624, 1625, 3943, 1629, 3939, 3783, 1633,
	3123, 1069, 1260, 1261, 1262, 1259, 3782, 3066, 1260, 1261,
	1262, 1259, 3771, 3767, 3045, 3617, 1632, 3599, 3077, 3044,
	3571, 1260, 1261, 1262, 1259, 3171, 3473, 1260, 1261, 1262,
	1259, 3472, 3175, 3176, 3177, 3179, 2988, 3181, 3182, 3092,
	3067, 3470, 679, 3080, 3060, 142, 1187, 3079, 3122, 1875,
	3065, 1875, 1187, 2988, 3062, 3439, 2739, 3413, 3201, 3078,
	3411, 3410, 206, 3087, 197, 168, 3407, 3086, 3215, 3406,
	1875, 1875, 3400, 673, 3099, 1260, 1261, 1262, 1259, 3398,
	3100, 3379, 3119, 1260, 1261, 1262, 1259, 3232, 1187, 3110,
	3111, 673, 3369, 673, 1187, 1187, 3368, 3355, 3106, 3354,
	2738, 3253, 1591, 2070, 2372, 3188, 3251, 3185, 3161, 3115,
	3116, 3159, 3126, 3117, 3113, 3109, 3108, 3102, 3036, 3112,
	2622, 3114, 2618, 2617, 2295, 2288, 2438, 1260, 1261, 1262,
	1259, 2737, 2282, 2281, 3225, 202, 206, 2280, 3277, 2736,
	3280, 2279, 3280, 3280, 3235, 2277, 2273, 1187, 2272, 3166,
	3240, 2640, 3228, 2643, 2270, 3165, 2261, 2258, 1260, 1261,
	1262, 1259, 2257, 2823, 2161, 3302, 1260, 1261, 1262, 1259,
	1868, 3298, 2735, 1867, 1553, 1553, 1067, 3260, 1866, 1831,
	2797, 142, 3255, 1069, 1830, 1069, 3264, 3266, 1821, 1565,
	1563, 1069, 2873, 3203, 4086, 4043, 142, 3961, 142, 1260,
	1261, 1262, 1259, 1330, 3938, 3303, 3304, 3872, 3249, 202,
	3869, 3224, 3856, 1551, 1551, 3851, 3752, 2683, 1069, 3234,
	2689, 673, 2734, 3246, 3250, 3238, 3239, 3751, 3201, 3276,
	3733, 2707, 2708, 2733, 1066, 3275, 3715, 3711, 3689, 2710,
	2711, 1516, 3259, 2408, 2050, 2050, 3285, 1068, 3673, 1260,
	1261, 1262, 1259, 2407, 3572, 2716, 3569, 3281, 3282, 3254,
	1260, 1261, 1262, 1259, 3256, 3257, 2732, 3539, 3538, 3535,
	3534, 3500, 3497, 3300, 3495, 3460, 2913, 2914, 3118, 1612,
	1623, 1614, 1628, 3286, 1722, 1875, 2731, 1631, 1620, 1447,
	2999, 2929, 2930, 1260, 1261, 1262, 1259, 2960, 1187, 2884,
	2834, 2833, 2706, 2826, 2791, 2741, 2632, 3308, 2540, 2480,
	3367, 2373, 2344, 1260, 1261, 1262, 1259, 2967, 2343, 3953,
	3841, 3187, 672, 1176, 2316, 1752, 202, 2875, 3133, 3134,
	2122, 1881, 1695, 1185, 3135, 3136, 3137, 3138, 1646, 3139,
	3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149,
	3315, 3314, 1621, 3329, 3330, 3323, 1213, 673, 1390, 1375,
	2852, 2853, 3317, 2875, 1371, 1370, 3327, 3320, 1369, 2875,
	2875, 3340, 709, 3341, 1274, 1273, 1283, 1284, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, 1275, 2730, 3258, 1368, 3348,
	1367, 3351, 3352, 3353, 3283, 3331, 1274, 1273, 1283, 1284,
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 1275, 3357, 1366,
	1365, 3951, 2727, 1260, 1261, 1262, 1259, 3347, 1364, 1363,
	1362, 1361, 2875, 2726, 1360, 1359, 3346, 2725, 1358, 1357,
	2134, 3421, 1356, 1355, 3423, 3380, 1354, 1353, 3425, 1260,
	1261, 1262, 1259, 3431, 1352, 1351, 1350, 3382, 3383, 1349,
	1260, 1261, 1262, 1259, 1260, 1261, 1262, 1259, 1348, 3402,
	3387, 1347, 3949, 3687, 2719, 1346, 3432, 2686, 2709, 1343,
	1342, 1341, 1339, 1338, 3392, 1337, 1334, 1327, 673, 2050,
	1326, 1324, 3426, 1323, 3428, 2705, 1322, 1321, 3386, 1320,
	3465, 1260, 1261, 1262, 1259, 1260, 1261, 1262, 1259, 1319,
	1318, 1317, 1875, 1316, 3438, 1315, 1314, 2522, 2070, 3485,
	2681, 3441, 1260, 1261, 1262, 1259, 3414, 1274, 1273, 1283,
	1284, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1275, 3418,
	1313, 3420, 3503, 1308, 1307, 1187, 1306, 1260, 1261, 1262,
	1259, 1765, 1305, 1304, 3277, 1069, 1224, 3436, 1187, 3435,
	1170, 3536, 1069, 3336, 3337, 2380, 2358, 1212, 4079, 4077,
	1187, 1801, 3550, 4027, 3453, 3339, 1553, 2812, 1260, 1261,
	1262, 1259, 2551, 2558, 2164, 1223, 3007, 3002, 3345, 3000,
	2997, 3342, 3003, 3046, 3001, 3048, 3487, 673, 3455, 2050,
	2500, 2996, 3004, 1187, 2512, 2513, 3006, 3552, 3533, 3574,
	2995, 3980, 125, 67, 1875, 1551, 3888, 3575, 3694, 1875,
	66, 2646, 2635, 3484, 3483, 1441, 3220, 3526, 3490, 1939,
	1940, 2192, 1934, 1935, 1936, 223, 3082, 2507, 2511, 2512,
	2513, 2508, 2516, 2509, 2514, 3540, 2448, 2510, 1187, 2515,
	3565, 3562, 3273, 3546, 3274, 3545, 3358, 3542, 3685, 3576,
	3549, 3384, 3385, 2039, 1606, 2630, 3101, 3573, 3486, 2670,
	142, 142, 142, 1067, 1660, 3557, 3556, 3489, 3554, 1640,
	3559, 675, 676, 3563, 3564, 3578, 2338, 3566, 3560, 677,
	3619, 3567, 2651, 2652, 3125, 2124, 1511, 1218, 3196, 3189,
	2862, 3627, 2835, 1522, 2400, 2368, 1943, 1910, 1817, 1816,
	3597, 1187, 1274, 1273, 1283, 1284, 1276, 1277, 1278, 1279,
	1280, 1281, 1282, 1275, 1559, 1386, 1387, 3613, 1384, 1385,
	4090, 1187, 1553, 1553, 1382, 1383, 3593, 3594, 3232, 3583,
	3853, 3624, 3305, 3626, 2494, 1797, 1292, 1380, 1381, 2487,
	2051, 3665, 1794, 1508, 3665, 1507, 1796, 1793, 1795, 1799,
	1800, 1251, 2182, 3654, 1798, 3350, 1187, 3683, 1187, 3659,
	3660, 1551, 1763, 3653, 3030, 2339, 2194, 3686, 1460, 3688,
	1459, 1432, 1483, 4050, 4048, 1553, 4005, 3977, 3976, 3974,
	3635, 3637, 3915, 3636, 3655, 3662, 3873, 3747, 3746, 3684,
	3589, 3403, 3646, 673, 3376, 1187, 1187, 3632, 3375, 1187,
	1187, 3361, 3671, 2433, 2403, 3658, 1662, 3360, 3670, 3040,
	3504, 1457, 4080, 2178, 1763, 4081, 4080, 4081, 3422, 3735,
	3487, 3682, 3085, 3543, 2766, 3730, 1069, 2260, 1394, 3533,
	1945, 3695, 3692, 3744, 1209, 2896, 3699, 3719, 3720, 3713,
	3356, 3731, 3732, 1184, 1475, 3753, 3754, 75, 3526, 913,
	914, 915, 916, 2, 1184, 4103, 3284, 4104, 1553, 1,
	3494, 3741, 3496, 210, 3, 2747, 1879, 1388, 2988, 917,
	912, 1529, 2532, 2104, 1557, 1883, 919, 3013, 3014, 3349,
	3740, 3784, 3127, 3016, 2769, 1379, 2213, 2977, 2485, 3765,
	3742, 2348, 3680, 3681, 3214, 3777, 1442, 1551, 1804, 1805,
	1806, 1807, 1808, 1809, 1802, 1803, 3788, 974, 3790, 1823,
	1677, 1201, 3760, 2988, 1674, 3764, 1200, 1198, 3810, 1768,
	800, 2167, 3772, 2961, 2935, 3743, 3776, 4089, 981, 3817,
	4124, 4042, 3793, 4092, 3822, 3815, 1274, 1273, 1283, 1284,
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 1275, 1693, 784,
	1187, 3968, 3878, 2507, 2511, 2512, 2513, 2508, 2516, 2509,
	2514, 3839, 3804, 2510, 3845, 2515, 4046, 3880, 3763, 2218,
	1256, 3061, 1001, 841, 811, 1325, 2875, 3816, 3813, 1653,
	3818, 3597, 3131, 3819, 3129, 810, 3450, 2802, 3748, 3831,
	3835, 3033, 3824, 1002, 1187, 2150, 3875, 3761, 1607, 1553,
	1611, 2399, 3832, 3934, 3693, 3269, 2870, 3605, 1635, 3606,
	3929, 3498, 3609, 3607, 3608, 716, 2083, 647, 3852, 1069,
	1051, 3734, 2163, 717, 2379, 3993, 3855, 954, 3433, 2357,
	3863, 1716, 955, 1716, 947, 2821, 3861, 2820, 1551, 1562,
	1733, 1265, 1750, 679, 3150, 3151, 1302, 755, 2243, 2799,
	3521, 3026, 74, 73, 72, 3907, 3461, 3462, 3463, 3894,
	71, 231, 802, 3468, 3469, 3870, 3871, 230, 3874, 3785,
	3650, 3964, 3902, 4094, 3903, 781, 780, 779, 778, 142,
	777, 776, 2505, 2506, 1927, 3916, 2504, 2502, 2501, 1932,
	2065, 2064, 3039, 3395, 3359, 2129, 3904, 3691, 2131, 3230,
	3397, 2899, 2894, 1990, 1988, 1520, 2428, 3697, 2435, 3910,
	1987, 4024, 3393, 3600, 3933, 3944, 3945, 1187, 3710, 2945,
	3918, 3596, 1933, 2424, 2007, 1553, 2916, 3927, 3958, 2004,
	2003, 2907, 3412, 3965, 3706, 3700, 2035, 3948, 3950, 3952,
	3954, 3736, 3932, 3820, 3664, 3505, 3506, 142, 3966, 3512,
	3941, 2367, 1120, 1116, 142, 1118, 3957, 1119, 1117, 3947,
	2691, 1985, 1986, 3325, 1551, 2405, 3191, 142, 2785, 2784,
	142, 142, 2782, 2781, 1417, 3973, 3971, 3906, 1553, 3989,
	3631, 3822, 2556, 142, 2554, 1167, 3338, 3334, 3988, 2175,
	3343, 2998, 2190, 3081, 3985, 2066, 2062, 4015, 2061, 1091,
	1090, 1588, 2979, 4023, 2495, 3795, 1938, 948, 4006, 4007,
	4008, 2355, 4009, 4010, 109, 41, 122, 1551, 108, 185,
	2111, 59, 184, 58, 120, 1716, 2111, 2111, 2111, 182,
	4039, 57, 103, 102, 119, 180, 56, 4032, 215, 4033,
	214, 4034, 217, 4035, 216, 4036, 213, 2678, 2608, 4049,
	2609, 4051, 4052, 212, 1595, 211, 4047, 4045, 3978, 3669,
	3960, 907, 44, 43, 186, 4055, 1187, 3894, 42, 110,
	4056, 1274, 1273, 1283, 1284, 1276, 1277, 1278, 1279, 1280,
	1281, 1282, 1275, 3510, 60, 40, 3845, 39, 4069, 1875,
	38, 34, 13, 4070, 4072, 12, 4071, 35, 22, 4078,
	4075, 4076, 4088, 21, 4096, 1875, 1681, 4095, 3568, 20,
	26, 3570, 4082, 4083, 4084, 4085, 32, 31, 135, 134,
	30, 133, 132, 4108, 3522, 4100, 131, 130, 129, 1187,
	128, 127, 3577, 29, 19, 51, 50, 3513, 49, 48,
	4113, 47, 3933, 4114, 4116, 46, 9, 123, 3508, 4122,
	118, 116, 4126, 3530, 3531, 4123, 28, 117, 114, 3509,
	115, 113, 112, 111, 106, 206, 64, 197, 168, 104,
	86, 85, 84, 99, 98, 97, 96, 95, 3737, 94,
	4134, 92, 3738, 93, 198, 1000, 83, 82, 81, 4096,
	4142, 189, 4095, 4141, 80, 199, 3514, 79, 101, 107,
	105, 4126, 4143, 90, 100, 1509, 1510, 4147, 1512, 1513,
	91, 1517, 1518, 1519, 140, 89, 88, 87, 78, 77,
	76, 166, 165, 164, 163, 162, 160, 161, 159, 126,
	158, 157, 156, 155, 154, 52, 53, 54, 202, 2240,
	55, 176, 175, 177, 179, 1568, 1569, 1570, 1571, 1572,
	181, 1574, 1575, 1576, 1577, 1578, 178, 183, 173, 1584,
	1585, 1586, 1587, 1274, 1273, 1283, 1284, 1276, 1277, 1278,
	1279, 1280, 1281, 1282, 1275, 728, 727, 734, 724, 171,
	174, 172, 170, 69, 11, 121, 18, 4, 731, 732,
	0, 733, 737, 0, 3529, 718, 2414, 2069, 0, 0,
	0, 0, 0, 0, 0, 742, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 0, 150, 151,
	0, 3518, 0, 152, 0, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4067, 0, 3515, 3519, 3517, 3516, 0, 0, 0,
	0, 746, 0, 0, 748, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 0, 2345, 2346, 2347, 0, 0,
	3864, 0, 142, 0, 0, 142, 142, 0, 142, 0,
	2363, 2364, 2365, 2366, 3524, 3525, 0, 0, 0, 167,
	195, 204, 196, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1716, 0, 989, 0, 0, 0,
	0, 0, 194, 188, 187, 0, 0, 0, 1067, 70,
	0, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	1067, 0, 0, 0, 0, 0, 0, 3532, 1286, 0,
	1290, 0, 0, 0, 0, 0, 142, 3917, 0, 3511,
	0, 0, 0, 3921, 3922, 3523, 1287, 1289, 1285, 0,
	1288, 1274, 1273, 1283, 1284, 1276, 1277, 1278, 1279, 1280,
	1281, 1282, 1275, 0, 0, 0, 0, 0, 985, 986,
	190, 191, 192, 0, 3942, 0, 0, 0, 0, 1029,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 719,
	721, 720, 0, 0, 0, 0, 0, 0, 1522, 0,
	726, 0, 0, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 730, 0, 0, 0, 1292, 0, 0, 745,
	0, 0, 0, 0, 0, 0, 723, 0, 0, 0,
	136, 0, 0, 0, 193, 0, 137, 0, 0, 0,
	0, 0, 0, 1312, 0, 1559, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2111, 0,
	0, 0, 0, 1031, 0, 0, 1030, 0, 0, 0,
	0, 0, 0, 0, 0, 3528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1015, 63, 0, 0, 0,
	0, 0, 0, 3940, 990, 4058, 4059, 0, 0, 0,
	0, 0, 4063, 4064, 4065, 4066, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 992, 0, 0, 725, 729, 735, 0, 736, 738,
	0, 3527, 739, 740, 741, 65, 0, 743, 744, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2036, 0, 0, 0, 0, 1997,
	146, 203, 0, 147, 0, 0, 0, 0, 169, 0,
	4020, 0, 0, 61, 0, 0, 0, 1014, 1012, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2039, 2006, 0, 0, 0, 0, 0, 0, 0, 0,
	2040, 2041, 0, 0, 1011, 0, 2116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 984, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2005, 991, 1024, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	45, 0, 0, 0, 2013, 0, 62, 0, 0, 4020,
	0, 1020, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1260, 1261, 1262, 1259, 0, 143,
	144, 0, 0, 145, 0, 0, 0, 0, 0, 0,
	0, 2839, 0, 722, 0, 0, 1801, 1021, 1025, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2525, 0, 0, 0, 0, 4020, 1008, 0, 1006,
	1010, 1028, 2029, 0, 0, 1007, 1004, 1003, 0, 1009,
	994, 995, 993, 996, 997, 998, 999, 0, 1026, 0,
	1027, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1022, 1023, 0, 1801, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2036, 0,
	0, 0, 0, 1997, 0, 0, 2069, 0, 0, 0,
	0, 0, 4145, 0, 142, 0, 0, 0, 1018, 0,
	0, 0, 0, 0, 1017, 0, 1996, 1998, 1995, 0,
	0, 1992, 0, 0, 2039, 2006, 2017, 0, 0, 1013,
	0, 0, 0, 0, 2040, 2041, 0, 2023, 0, 0,
	0, 0, 0, 0, 0, 2008, 0, 1991, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2011, 2045, 0,
	2005, 2012, 2014, 2016, 0, 2018, 2019, 2020, 2024, 2025,
	2026, 2028, 2031, 2032, 2033, 0, 0, 0, 2013, 0,
	0, 0, 2021, 2030, 2022, 0, 0, 0, 0, 0,
	1797, 0, 3031, 3032, 2000, 0, 0, 1794, 0, 0,
	0, 1796, 1793, 1795, 1799, 1800, 0, 1016, 0, 1798,
	0, 0, 0, 987, 988, 0, 982, 0, 0, 2037,
	0, 983, 0, 0, 728, 727, 734, 724, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 731, 732, 0,
	733, 737, 0, 0, 718, 0, 2029, 0, 1797, 0,
	0, 1993, 1994, 0, 742, 1794, 0, 0, 0, 1796,
	1793, 1795, 1799, 1800, 0, 0, 0, 1798, 0, 2034,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2010, 0, 0, 0,
	0, 0, 0, 2009, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 748, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 0, 0, 0, 0, 2027, 0, 0,
	1996, 2865, 1995, 0, 0, 2864, 2015, 142, 0, 0,
	2017, 0, 0, 0, 0, 0, 0, 142, 0, 2043,
	2042, 2023, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
	1790, 1791, 1792, 1804, 1805, 1806, 1807, 1808, 1809, 1802,
	1803, 2011, 2045, 0, 0, 2012, 2014, 2016, 0, 2018,
	2019, 2020, 2024, 2025, 2026, 2028, 2031, 2032, 2033, 0,
	0, 0, 0, 0, 0, 0, 2021, 2030, 2022, 0,
	0, 0, 2002, 0, 0, 0, 0, 0, 2000, 0,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1804, 1805, 1806, 1807, 1808, 1809, 1802, 1803, 0,
	0, 0, 0, 2037, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2038, 0, 0, 2044, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 719, 721,
	720, 0, 0, 0, 3223, 1993, 1994, 0, 0, 726,
	0, 0, 0, 0, 0, 2069, 2069, 2069, 2069, 2069,
	2069, 730, 3236, 2034, 3237, 0, 0, 0, 745, 0,
	0, 0, 2069, 0, 0, 723, 0, 0, 0, 713,
	2010, 0, 0, 0, 0, 0, 0, 2009, 1139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2027, 0, 0, 0, 0, 0, 0, 0, 0,
	2015, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2043, 2042, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2002, 142, 0, 0,
	0, 0, 2111, 725, 729, 735, 0, 736, 738, 142,
	0, 739, 740, 741, 0, 0, 743, 744, 0, 0,
	0, 0, 1124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2038, 0,
	0, 2044, 0, 1147, 1151, 1153, 1155, 1157, 1158, 1160,
	0, 1165, 1161, 1162, 1163, 1164, 0, 1142, 1143, 1144,
	1145, 1122, 1123, 1148, 0, 1125, 0, 1127, 1128, 1129,
	1130, 1126, 1131, 1132, 1133, 1134, 1135, 1138, 1140, 1136,
	1137, 1146, 0, 0, 0, 0, 0, 0, 0, 1150,
	1152, 1154, 1156, 1159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1124, 0, 0, 0, 1114, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1141,
	0, 1147, 1151, 1153, 1155, 1157, 1158, 1160, 3389, 1165,
	1161, 1162, 1163, 1164, 0, 1142, 1143, 1144, 1145, 1122,
	1123, 1148, 0, 1125, 1139, 1127, 1128, 1129, 1130, 1126,
	1131, 1132, 1133, 1134, 1135, 1138, 1140, 1136, 1137, 1146,
	0, 0, 722, 0, 0, 0, 0, 1150, 1152, 1154,
	1156, 1159, 0, 0, 728, 727, 734, 724, 0, 0,
	0, 1067, 0, 142, 0, 0, 0, 731, 732, 142,
	733, 737, 0, 0, 718, 0, 2069, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 1141, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2687, 2688, 1124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1147,
	1151, 1153, 1155, 1157, 1158, 1160, 0, 1165, 1161, 1162,
	1163, 1164, 0, 1142, 1143, 1144, 1145, 1122, 1123, 1148,
	0, 1125, 0, 1127, 1128, 1129, 1130, 1126, 1131, 1132,
	1133, 1134, 1135, 1138, 1140, 1136, 1137, 1146, 0, 0,
	0, 0, 0, 0, 0, 1150, 1152, 1154, 1156, 1159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 719, 721,
	720, 0, 0, 0, 0, 0, 0, 0, 0, 726,
	1149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 730, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 0, 0, 0, 723, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 725, 729, 735, 0, 736, 738, 0,
	0, 739, 740, 741, 3718, 0, 743, 744, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 818, 0, 0,
	0, 0, 0, 0, 0, 0, 401, 0, 0, 532,
	565, 554, 638, 520, 0, 0, 0, 0, 0, 0,
	770, 2069, 0, 0, 336, 0, 0, 369, 569, 551,
	561, 552, 537, 538, 539, 546, 348, 540, 541, 542,
	512, 543, 513, 544, 545, 809, 568, 519, 434, 385,
	586, 585, 0, 0, 878, 886, 0, 0, 0, 0,
	0, 0, 0, 0, 874, 0, 0, 0, 0, 762,
	0, 0, 799, 854, 853, 786, 796, 0, 0, 309,
	229, 514, 634, 516, 515, 787, 1149, 788, 792, 795,
	791, 789, 790, 0, 869, 0, 0, 0, 0, 0,
	0, 754, 766, 0, 771, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 763, 764,
	0, 0, 0, 0, 819, 0, 765, 0, 142, 814,
	793, 797, 722, 0, 0, 0, 299, 441, 460, 310,
	429, 473, 315, 437, 452, 305, 400, 426, 0, 0,
	301, 458, 436, 382, 359, 360, 300, 0, 420, 334,
	350, 331, 398, 794, 817, 821, 330, 892, 815, 468,
	303, 0, 467, 397, 454, 459, 383, 376, 0, 302,
	456, 381, 375, 363, 340, 893, 364, 365, 354, 409,
	373, 410, 355, 387, 386, 388, 0, 0, 0, 0,
	0, 496, 497, 0, 0, 645, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 627, 812, 0,
	631, 0, 470, 0, 0, 876, 0, 0, 0, 440,
	0, 0, 366, 0, 142, 0, 816, 0, 423, 403,
	889, 0, 0, 421, 371, 455, 411, 461, 442, 469,
	417, 412, 294, 443, 333, 384, 306, 308, 328, 335,
	337, 341, 342, 393, 394, 406, 428, 445, 446, 447,
	332, 316, 422, 317, 352, 318, 295, 324, 322, 325,
	430, 326, 297, 407, 451, 0, 347, 418, 379, 298,
	378, 408, 450, 449, 307, 477, 483, 484, 573, 0,
	489, 661, 662, 663, 498, 0, 413, 0, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 1825, 1824, 1826, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	656, 873, 399, 596, 629, 630, 521, 0, 888, 868,
	870, 871, 875, 879, 880, 881, 882, 883, 885, 887,
	891, 655, 0, 575, 590, 659, 589, 652, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 890, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 820, 571, 572, 389, 390, 391, 392, 877,
	597, 314, 493, 415, 0, 557, 0, 142, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 664, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 899, 872,
	898, 900, 901, 897, 902, 903, 884, 775, 0, 827,
	895, 894, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 653, 650, 453, 654, 782, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 861, 834, 835, 836,
	772, 837, 831, 832, 773, 833, 862, 825, 858, 859,
	801, 828, 838, 857, 839, 860, 863, 864, 904, 905,
	845, 829, 257, 906, 842, 865, 856, 855, 840, 826,
	866, 867, 808, 803, 843, 844, 830, 849, 850, 851,
	774, 822, 823, 824, 846, 847, 804, 805, 806, 807,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	651, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 852, 639, 438, 439,
	646, 0, 848, 642, 643, 640, 374, 425, 444, 432,
	818, 657, 517, 518, 658, 628, 0, 767, 0, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 770, 0, 0, 0, 336, 1876, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 809, 568,
	519, 434, 385, 586, 585, 0, 0, 878, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 0, 2095,
	0, 0, 762, 0, 0, 799, 854, 853, 786, 796,
	0, 0, 309, 229, 514, 634, 516, 515, 787, 0,
	788, 792, 795, 791, 789, 790, 0, 869, 0, 0,
	0, 0, 0, 0, 754, 766, 0, 771, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 763, 764, 0, 0, 0, 0, 819, 0, 765,
	0, 0, 2096, 793, 797, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 794, 817, 821, 330,
	892, 815, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 893, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 812, 0, 631, 0, 470, 0, 0, 876, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 816,
	0, 423, 403, 889, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 661, 662, 663, 498, 0, 413,
	0, 503, 504, 505, 507, 508, 509, 510, 574, 591,
	558, 528, 491, 582, 525, 529, 530, 357, 594, 0,
	0, 0, 482, 367, 368, 0, 339, 338, 380, 416,
	345, 291, 292, 656, 873, 399, 596, 629, 630, 521,
	0, 888, 868, 870, 871, 875, 879, 880, 881, 882,
	883, 885, 887, 891, 655, 0, 575, 590, 659, 589,
	652, 405, 0, 427, 587, 534, 0, 579, 553, 0,
	580, 549, 584, 0, 523, 0, 435, 463, 475, 492,
	495, 524, 609, 610, 611, 296, 494, 613, 614, 615,
	616, 617, 618, 619, 612, 890, 556, 533, 559, 474,
	536, 535, 0, 0, 570, 820, 571, 572, 389, 390,
	391, 392, 877, 597, 314, 493, 415, 0, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 563, 560,
	664, 0, 620, 621, 0, 0, 487, 488, 344, 351,
	506, 353, 313, 404, 346, 472, 361, 0, 499, 564,
	500, 623, 626, 624, 625, 396, 356, 358, 431, 362,
	372, 419, 471, 402, 424, 311, 462, 433, 377, 550,
	577, 899, 872, 898, 900, 901, 897, 902, 903, 884,
	775, 0, 827, 895, 894, 896, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 604, 603,
	602, 601, 600, 599, 598, 0, 0, 547, 448, 323,
	285, 319, 320, 327, 653, 650, 453, 654, 782, 293,
	527, 370, 0, 414, 343, 592, 593, 0, 644, 861,
	834, 835, 836, 772, 837, 831, 832, 773, 833, 862,
	825, 858, 859, 801, 828, 838, 857, 839, 860, 863,
	864, 904, 905, 845, 829, 257, 906, 842, 865, 856,
	855, 840, 826, 866, 867, 808, 803, 843, 844, 830,
	849, 850, 851, 774, 822, 823, 824, 846, 847, 804,
	805, 806, 807, 0, 0, 0, 478, 479, 480, 502,
	0, 464, 526, 651, 0, 0, 0, 0, 0, 0,
	0, 576, 588, 622, 0, 632, 633, 635, 637, 852,
	639, 438, 439, 646, 0, 848, 642, 643, 640, 374,
	425, 444, 432, 0, 657, 517, 518, 658, 628, 0,
	767, 206, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 770, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	1295, 568, 519, 434, 385, 586, 585, 0, 0, 878,
	886, 0, 0, 0, 0, 0, 0, 0, 0, 874,
	0, 0, 0, 0, 762, 0, 0, 799, 854, 853,
	786, 796, 0, 0, 309, 229, 514, 634, 516, 515,
	787, 0, 788, 792, 795, 791, 789, 790, 0, 869,
	0, 0, 0, 0, 0, 0, 754, 766, 0, 771,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 763, 764, 0, 0, 0, 0, 819,
	0, 765, 0, 0, 814, 793, 797, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 794, 817,
	821, 330, 892, 815, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	893, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 812, 0, 631, 0, 470, 0, 0,
	876, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 816, 0, 423, 403, 889, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 661, 662, 663, 498,
	0, 413, 0, 503, 504, 505, 507, 508, 509, 510,
	574, 591, 558, 528, 491, 582, 525, 529, 530, 357,
	594, 0, 0, 0, 482, 367, 368, 0, 339, 338,
	380, 416, 345, 291, 292, 656, 873, 399, 596, 629,
	630, 521, 0, 888, 868, 870, 871, 875, 879, 880,
	881, 882, 883, 885, 887, 891, 655, 0, 575, 590,
	659, 589, 652, 405, 0, 427, 587, 534, 0, 579,
	553, 0, 580, 549, 584, 0, 523, 0, 435, 463,
	475, 492, 495, 524, 609, 610, 611, 296, 494, 613,
	614, 615, 616, 617, 618, 619, 612, 890, 556, 533,
	559, 474, 536, 535, 0, 0, 570, 820, 571, 572,
	389, 390, 391, 392, 877, 597, 314, 493, 415, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	563, 560, 664, 0, 620, 621, 0, 0, 487, 488,
	344, 351, 506, 353, 313, 404, 346, 472, 361, 0,
	499, 564, 500, 623, 626, 624, 625, 396, 356, 358,
	431, 362, 372, 419, 471, 402, 424, 311, 462, 433,
	377, 550, 577, 899, 872, 898, 900, 901, 897, 902,
	903, 884, 775, 0, 827, 895, 894, 896, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	604, 603, 602, 601, 600, 599, 598, 0, 0, 547,
	448, 323, 285, 319, 320, 327, 653, 650, 453, 654,
	782, 293, 527, 370, 169, 414, 343, 592, 593, 0,
	644, 861, 834, 835, 836, 772, 837, 831, 832, 773,
	833, 862, 825, 858, 859, 801, 828, 838, 857, 839,
	860, 863, 864, 904, 905, 845, 829, 257, 906, 842,
	865, 856, 855, 840, 826, 866, 867, 808, 803, 843,
	844, 830, 849, 850, 851, 774, 822, 823, 824, 846,
	847, 804, 805, 806, 807, 0, 0, 0, 478, 479,
	480, 502, 0, 464, 526, 651, 0, 0, 0, 0,
	0, 0, 0, 576, 588, 622, 0, 632, 633, 635,
	637, 852, 639, 438, 439, 646, 0, 848, 642, 643,
	640, 374, 425, 444, 432, 818, 657, 517, 518, 658,
	628, 0, 767, 0, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 770, 0,
	0, 0, 336, 4144, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 809, 568, 519, 434, 385, 586, 585,
	0, 0, 878, 886, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 0, 0, 0, 0, 762, 0, 0,
	799, 854, 853, 786, 796, 0, 0, 309, 229, 514,
	634, 516, 515, 787, 0, 788, 792, 795, 791, 789,
	790, 0, 869, 0, 0, 0, 0, 0, 0, 754,
	766, 0, 771, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 763, 764, 0, 0,
	0, 0, 819, 0, 765, 0, 0, 814, 793, 797,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 794, 817, 821, 330, 892, 815, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 893, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 812, 0, 631, 0,
	470, 0, 0, 876, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 816, 0, 423, 403, 889, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 873,
	399, 596, 629, 630, 521, 0, 888, 868, 870, 871,
	875, 879, 880, 881, 882, 883, 885, 887, 891, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	890, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	820, 571, 572, 389, 390, 391, 392, 877, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 899, 872, 898, 900,
	901, 897, 902, 903, 884, 775, 0, 827, 895, 894,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 782, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 861, 834, 835, 836, 772, 837,
	831, 832, 773, 833, 862, 825, 858, 859, 801, 828,
	838, 857, 839, 860, 863, 864, 904, 905, 845, 829,
	257, 906, 842, 865, 856, 855, 840, 826, 866, 867,
	808, 803, 843, 844, 830, 849, 850, 851, 774, 822,
	823, 824, 846, 847, 804, 805, 806, 807, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 852, 639, 438, 439, 646, 0,
	848, 642, 643, 640, 374, 425, 444, 432, 818, 657,
	517, 518, 658, 628, 0, 767, 0, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 770, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 809, 568, 519, 434,
	385, 586, 585, 0, 0, 878, 886, 0, 0, 0,
	0, 0, 0, 0, 0, 874, 0, 0, 0, 0,
	762, 0, 0, 799, 854, 853, 786, 796, 0, 0,
	309, 229, 514, 634, 516, 515, 787, 0, 788, 792,
	795, 791, 789, 790, 0, 869, 0, 0, 0, 0,
	0, 0, 754, 766, 0, 771, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 763,
	764, 0, 0, 0, 0, 819, 0, 765, 0, 0,
	814, 793, 797, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 794, 817, 821, 330, 892, 815,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 893, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 812,
	0, 631, 0, 470, 0, 0, 876, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 816, 0, 423,
	403, 889, 4021, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 873, 399, 596, 629, 630, 521, 0, 888,
	868, 870, 871, 875, 879, 880, 881, 882, 883, 885,
	887, 891, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 890, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 820, 571, 572, 389, 390, 391, 392,
	877, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 899,
	872, 898, 900, 901, 897, 902, 903, 884, 775, 0,
	827, 895, 894, 896, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 782, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 861, 834, 835,
	836, 772, 837, 831, 832, 773, 833, 862, 825, 858,
	859, 801, 828, 838, 857, 839, 860, 863, 864, 904,
	905, 845, 829, 257, 906, 842, 865, 856, 855, 840,
	826, 866, 867, 808, 803, 843, 844, 830, 849, 850,
	851, 774, 822, 823, 824, 846, 847, 804, 805, 806,
	807, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 852, 639, 438,
	439, 646, 0, 848, 642, 643, 640, 374, 425, 444,
	432, 818, 657, 517, 518, 658, 628, 0, 767, 0,
	401, 0, 0, 532, 565, 554, 638, 520, 0, 0,
	0, 0, 0, 0, 770, 0, 0, 0, 336, 1876,
	0, 369, 569, 551, 561, 552, 537, 538, 539, 546,
	348, 540, 541, 542, 512, 543, 513, 544, 545, 809,
	568, 519, 434, 385, 586, 585, 0, 0, 878, 886,
	0, 0, 0, 0, 0, 0, 0, 0, 874, 0,
	0, 0, 0, 762, 0, 0, 799, 854, 853, 786,
	796, 0, 0, 309, 229, 514, 634, 516, 515, 787,
	0, 788, 792, 795, 791, 789, 790, 0, 869, 0,
	0, 0, 0, 0, 0, 754, 766, 0, 771, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 763, 764, 0, 0, 0, 0, 819, 0,
	765, 0, 0, 814, 793, 797, 0, 0, 0, 0,
	299, 441, 460, 310, 429, 473, 315, 437, 452, 305,
	400, 426, 0, 0, 301, 458, 436, 382, 359, 360,
	300, 0, 420, 334, 350, 331, 398, 794, 817, 821,
	330, 892, 815, 468, 303, 0, 467, 397, 454, 459,
	383, 376, 0, 302, 456, 381, 375, 363, 340, 893,
	364, 365, 354, 409, 373, 410, 355, 387, 386, 388,
	0, 0, 0, 0, 0, 496, 497, 0, 0, 645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 812, 0, 631, 0, 470, 0, 0, 876,
	0, 0, 0, 440, 0, 0, 366, 0, 0, 0,
	816, 0, 423, 403, 889, 0, 0, 421, 371, 455,
	411, 461, 442, 469, 417, 412, 294, 443, 333, 384,
	306, 308, 328, 335, 337, 341, 342, 393, 394, 406,
	428, 445, 446, 447, 332, 316, 422, 317, 352, 318,
	295, 324, 322, 325, 430, 326, 297, 407, 451, 0,
	347, 418, 379, 298, 378, 408, 450, 449, 307, 477,
	483, 484, 573, 0, 489, 661, 662, 663, 498, 0,
	413, 0, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 656, 873, 399, 596, 629, 630,
	521, 0, 888, 868, 870, 871, 875, 879, 880, 881,
	882, 883, 885, 887, 891, 655, 0, 575, 590, 659,
	589, 652, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 890, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 820, 571, 572, 389,
	390, 391, 392, 877, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 664, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 899, 872, 898, 900, 901, 897, 902, 903,
	884, 775, 0, 827, 895, 894, 896, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 653, 650, 453, 654, 782,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	861, 834, 835, 836, 772, 837, 831, 832, 773, 833,
	862, 825, 858, 859, 801, 828, 838, 857, 839, 860,
	863, 864, 904, 905, 845, 829, 257, 906, 842, 865,
	856, 855, 840, 826, 866, 867, 808, 803, 843, 844,
	830, 849, 850, 851, 774, 822, 823, 824, 846, 847,
	804, 805, 806, 807, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 651, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	852, 639, 438, 439, 646, 0, 848, 642, 643, 640,
	374, 425, 444, 432, 818, 657, 517, 518, 658, 628,
	0, 767, 0, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 770, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 809, 568, 519, 434, 385, 586, 585, 0,
	0, 878, 886, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 0, 0, 0, 0, 762, 0, 0, 799,
	854, 853, 786, 796, 0, 0, 309, 229, 514, 634,
	516, 515, 787, 0, 788, 792, 795, 791, 789, 790,
	0, 869, 0, 0, 0, 0, 0, 0, 754, 766,
	0, 771, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 763, 764, 1590, 0, 0,
	0, 819, 0, 765, 0, 0, 814, 793, 797, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	794, 817, 821, 330, 892, 815, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 893, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 812, 0, 631, 0, 470,
	0, 0, 876, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 816, 0, 423, 403, 889, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 661, 662,
	663, 498, 0, 413, 0, 503, 504, 505, 507, 508,
	509, 510, 574, 591, 558, 528, 491, 582, 525, 529,
	530, 357, 594, 0, 0, 0, 482, 367, 368, 0,
	339, 338, 380, 416, 345, 291, 292, 656, 873, 399,
	596, 629, 630, 521, 0, 888, 868, 870, 871, 875,
	879, 880, 881, 882, 883, 885, 887, 891, 655, 0,
	575, 590, 659, 589, 652, 405, 0, 427, 587, 534,
	0, 579, 553, 0, 580, 549, 584, 0, 523, 0,
	435, 463, 475, 492, 495, 524, 609, 610, 611, 296,
	494, 613, 614, 615, 616, 617, 618, 619, 612, 890,
	556, 533, 559, 474, 536, 535, 0, 0, 570, 820,
	571, 572, 389, 390, 391, 392, 877, 597, 314, 493,
	415, 0, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 560, 664, 0, 620, 621, 0, 0,
	487, 488, 344, 351, 506, 353, 313, 404, 346, 472,
	361, 0, 499, 564, 500, 623, 626, 624, 625, 396,
	356, 358, 431, 362, 372, 419, 471, 402, 424, 311,
	462, 433, 377, 550, 577, 899, 872, 898, 900, 901,
	897, 902, 903, 884, 775, 0, 827, 895, 894, 896,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 604, 603, 602, 601, 600, 599, 598, 0,
	0, 547, 448, 323, 285, 319, 320, 327, 653, 650,
	453, 654, 782, 293, 527, 370, 0, 414, 343, 592,
	593, 0, 644, 861, 834, 835, 836, 772, 837, 831,
	832, 773, 833, 862, 825, 858, 859, 801, 828, 838,
	857, 839, 860, 863, 864, 904, 905, 845, 829, 257,
	906, 842, 865, 856, 855, 840, 826, 866, 867, 808,
	803, 843, 844, 830, 849, 850, 851, 774, 822, 823,
	824, 846, 847, 804, 805, 806, 807, 0, 0, 0,
	478, 479, 480, 502, 0, 464, 526, 651, 0, 0,
	0, 0, 0, 0, 0, 576, 588, 622, 0, 632,
	633, 635, 637, 852, 639, 438, 439, 646, 0, 848,
	642, 643, 640, 374, 425, 444, 432, 0, 657, 517,
	518, 658, 628, 818, 767, 0, 2268, 0, 0, 0,
	0, 0, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 0, 0, 0, 0, 0, 770, 0, 0, 0,
	336, 0, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 809, 568, 519, 434, 385, 586, 585, 0, 0,
	878, 886, 0, 0, 0, 0, 0, 0, 0, 0,
	874, 0, 0, 0, 0, 762, 0, 0, 799, 854,
	853, 786, 796, 0, 0, 309, 229, 514, 634, 516,
	515, 787, 0, 788, 792, 795, 791, 789, 790, 0,
	869, 0, 0, 0, 0, 0, 0, 754, 766, 0,
	771, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 763, 764, 0, 0, 0, 0,
	819, 0, 765, 0, 0, 814, 793, 797, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 301, 458, 436, 382,
	359, 360, 300, 0, 420, 334, 350, 331, 398, 794,
	817, 821, 330, 892, 815, 468, 303, 0, 467, 397,
	454, 459, 383, 376, 0, 302, 456, 381, 375, 363,
	340, 893, 364, 365, 354, 409, 373, 410, 355, 387,
	386, 388, 0, 0, 0, 0, 0, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 812, 0, 631, 0, 470, 0,
	0, 876, 0, 0, 0, 440, 0, 0, 366, 0,
	0, 0, 816, 0, 423, 403, 889, 0, 0, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 0, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 661, 662, 663,
	498, 0, 413, 0, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 656, 873, 399, 596,
	629, 630, 521, 0, 888, 868, 870, 871, 875, 879,
	880, 881, 882, 883, 885, 887, 891, 655, 0, 575,
	590, 659, 589, 652, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 890, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 820, 571,
	572, 389, 390, 391, 392, 877, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 664, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 899, 872, 898, 900, 901, 897,
	902, 903, 884, 775, 0, 827, 895, 894, 896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 653, 650, 453,
	654, 782, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 861, 834, 835, 836, 772, 837, 831, 832,
	773, 833, 862, 825, 858, 859, 801, 828, 838, 857,
	839, 860, 863, 864, 904, 905, 845, 829, 257, 906,
	842, 865, 856, 855, 840, 826, 866, 867, 808, 803,
	843, 844, 830, 849, 850, 851, 774, 822, 823, 824,
	846, 847, 804, 805, 806, 807, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 651, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 852, 639, 438, 439, 646, 0, 848, 642,
	643, 640, 374, 425, 444, 432, 818, 657, 517, 518,
	658, 628, 0, 767, 0, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 770,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 809, 568, 519, 434, 385, 586,
	585, 0, 0, 878, 886, 0, 0, 0, 0, 0,
	0, 0, 0, 874, 0, 0, 0, 0, 762, 0,
	0, 799, 854, 853, 786, 796, 0, 0, 309, 229,
	514, 634, 516, 515, 787, 0, 788, 792, 795, 791,
	789, 790, 0, 869, 0, 0, 0, 0, 0, 0,
	754, 766, 0, 771, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 763, 764, 1869,
	0, 0, 0, 819, 0, 765, 0, 0, 814, 793,
	797, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 794, 817, 821, 330, 892, 815, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 893, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 812, 0, 631,
	0, 470, 0, 0, 876, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 816, 0, 423, 403, 889,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	661, 662, 663, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 656,
	873, 399, 596, 629, 630, 521, 0, 888, 868, 870,
	871, 875, 879, 880, 881, 882, 883, 885, 887, 891,
	655, 0, 575, 590, 659, 589, 652, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 890, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 820, 571, 572, 389, 390, 391, 392, 877, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 664, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 899, 872, 898,
	900, 901, 897, 902, 903, 884, 775, 0, 827, 895,
	894, 896, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	653, 650, 453, 654, 782, 293, 527, 370, 0, 414,
	343, 592, 593, 0, 644, 861, 834, 835, 836, 772,
	837, 831, 832, 773, 833, 862, 825, 858, 859, 801,
	828, 838, 857, 839, 860, 863, 864, 904, 905, 845,
	829, 257, 906, 842, 865, 856, 855, 840, 826, 866,
	867, 808, 803, 843, 844, 830, 849, 850, 851, 774,
	822, 823, 824, 846, 847, 804, 805, 806, 807, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 651,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 852, 639, 438, 439, 646,
	0, 848, 642, 643, 640, 374, 425, 444, 432, 818,
	657, 517, 518, 658, 628, 0, 767, 0, 401, 0,
	0, 532, 565, 554, 638, 520, 0, 0, 0, 0,
	0, 0, 770, 0, 0, 0, 336, 0, 0, 369,
	569, 551, 561, 552, 537, 538, 539, 546, 348, 540,
	541, 542, 512, 543, 513, 544, 545, 809, 568, 519,
	434, 385, 586, 585, 0, 0, 878, 886, 0, 0,
	0, 0, 0, 0, 0, 0, 874, 0, 0, 0,
	0, 762, 0, 0, 799, 854, 853, 786, 796, 0,
	0, 309, 229, 514, 634, 516, 515, 787, 0, 788,
	792, 795, 791, 789, 790, 0, 869, 0, 0, 0,
	0, 0, 0, 754, 766, 0, 771, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	763, 764, 0, 0, 0, 0, 819, 0, 765, 0,
	0, 814, 793, 797, 0, 0, 0, 0, 299, 441,
	460, 310, 429, 473, 315, 437, 452, 305, 400, 426,
	0, 0, 301, 458, 436, 382, 359, 360, 300, 0,
	420, 334, 350, 331, 398, 794, 817, 821, 330, 892,
	815, 468, 303, 0, 467, 397, 454, 459, 383, 376,
	0, 302, 456, 381, 375, 363, 340, 893, 364, 365,
	354, 409, 373, 410, 355, 387, 386, 388, 0, 0,
	0, 0, 0, 496, 497, 0, 0, 645, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 627,
	812, 0, 631, 0, 470, 0, 0, 876, 0, 0,
	0, 440, 0, 0, 366, 0, 0, 0, 816, 0,
	423, 403, 889, 0, 0, 421, 371, 455, 411, 461,
	442, 469, 417, 412, 294, 443, 333, 384, 306, 308,
	328, 335, 337, 341, 342, 393, 394, 406, 428, 445,
	446, 447, 332, 316, 422, 317, 352, 318, 295, 324,
	322, 325, 430, 326, 297, 407, 451, 0, 347, 418,
	379, 298, 378, 408, 450, 449, 307, 477, 483, 484,
	573, 0, 489, 661, 662, 663, 498, 0, 413, 0,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 656, 873, 399, 596, 629, 630, 521, 0,
	888, 868, 870, 871, 875, 879, 880, 881, 882, 883,
	885, 887, 891, 655, 0, 575, 590, 659, 589, 652,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 890, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 820, 571, 572, 389, 390, 391,
	392, 877, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 664,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	899, 872, 898, 900, 901, 897, 902, 903, 884, 775,
	0, 827, 895, 894, 896, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 653, 650, 453, 654, 782, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 861, 834,
	835, 836, 772, 837, 831, 832, 773, 833, 862, 825,
	858, 859, 801, 828, 838, 857, 839, 860, 863, 864,
	904, 905, 845, 829, 257, 906, 842, 865, 856, 855,
	840, 826, 866, 867, 808, 803, 843, 844, 830, 849,
	850, 851, 774, 822, 823, 824, 846, 847, 804, 805,
	806, 807, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 651, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 852, 639,
	438, 439, 646, 0, 848, 642, 643, 640, 374, 425,
	444, 432, 818, 657, 517, 518, 658, 628, 0, 767,
	0, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 770, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	809, 568, 519, 434, 385, 586, 585, 0, 0, 878,
	886, 0, 0, 0, 0, 0, 0, 0, 0, 874,
	0, 0, 0, 0, 762, 0, 0, 799, 854, 853,
	786, 796, 0, 0, 309, 229, 514, 634, 516, 515,
	787, 0, 788, 792, 795, 791, 789, 790, 0, 869,
	0, 0, 0, 0, 0, 0, 754, 766, 0, 771,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 763, 764, 0, 0, 0, 0, 819,
	0, 765, 0, 0, 814, 793, 797, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 794, 817,
	821, 330, 892, 815, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	893, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 812, 0, 631, 0, 470, 0, 0,
	876, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 816, 0, 423, 403, 889, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 661, 662, 663, 498,
	0, 413, 0, 503, 504, 505, 507, 508, 509, 510,
	574, 591, 558, 528, 491, 582, 525, 529, 530, 357,
	594, 0, 0, 0, 482, 367, 368, 0, 339, 338,
	380, 416, 345, 291, 292, 656, 873, 399, 596, 629,
	630, 521, 0, 888, 868, 870, 871, 875, 879, 880,
	881, 882, 883, 885, 887, 891, 655, 0, 575, 590,
	659, 589, 652, 405, 0, 427, 587, 534, 0, 579,
	553, 0, 580, 549, 584, 0, 523, 0, 435, 463,
	475, 492, 495, 524, 609, 610, 611, 296, 494, 613,
	614, 615, 616, 617, 618, 619, 612, 890, 556, 533,
	559, 474, 536, 535, 0, 0, 570, 820, 571, 572,
	389, 390, 391, 392, 877, 597, 314, 493, 415, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	563, 560, 664, 0, 620, 621, 0, 0, 487, 488,
	344, 351, 506, 353, 313, 404, 346, 472, 361, 0,
	499, 564, 500, 623, 626, 624, 625, 396, 356, 358,
	431, 362, 372, 419, 471, 402, 424, 311, 462, 433,
	377, 550, 577, 899, 872, 898, 900, 901, 897, 902,
	903, 884, 775, 0, 827, 895, 894, 896, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	604, 603, 602, 601, 600, 599, 598, 0, 0, 547,
	448, 323, 285, 319, 320, 327, 653, 650, 453, 654,
	782, 293, 527, 370, 0, 414, 343, 592, 593, 0,
	644, 861, 834, 835, 836, 772, 837, 831, 832, 773,
	833, 862, 825, 858, 859, 801, 828, 838, 857, 839,
	860, 863, 864, 904, 905, 845, 829, 257, 906, 842,
	865, 856, 855, 840, 826, 866, 867, 808, 803, 843,
	844, 830, 849, 850, 851, 774, 822, 823, 824, 846,
	847, 804, 805, 806, 807, 0, 0, 0, 478, 479,
	480, 502, 0, 464, 526, 651, 0, 0, 0, 0,
	0, 0, 0, 576, 588, 622, 0, 632, 633, 635,
	637, 852, 639, 438, 439, 646, 0, 3579, 642, 3580,
	3581, 374, 425, 444, 432, 818, 657, 517, 518, 658,
	628, 0, 767, 0, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 770, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 809, 568, 519, 434, 385, 586, 585,
	0, 0, 878, 886, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 0, 0, 0, 0, 762, 0, 0,
	799, 854, 853, 786, 796, 0, 0, 309, 229, 514,
	634, 516, 515, 2744, 0, 2745, 792, 795, 791, 789,
	790, 0, 869, 0, 0, 0, 0, 0, 0, 754,
	766, 0, 771, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 763, 764, 0, 0,
	0, 0, 819, 0, 765, 0, 0, 814, 793, 797,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 794, 817, 821, 330, 892, 815, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 893, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 812, 0, 631, 0,
	470, 0, 0, 876, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 816, 0, 423, 403, 889, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 873,
	399, 596, 629, 630, 521, 0, 888, 868, 870, 871,
	875, 879, 880, 881, 882, 883, 885, 887, 891, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	890, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	820, 571, 572, 389, 390, 391, 392, 877, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 899, 872, 898, 900,
	901, 897, 902, 903, 884, 775, 0, 827, 895, 894,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 782, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 861, 834, 835, 836, 772, 837,
	831, 832, 773, 833, 862, 825, 858, 859, 801, 828,
	838, 857, 839, 860, 863, 864, 904, 905, 845, 829,
	257, 906, 842, 865, 856, 855, 840, 826, 866, 867,
	808, 803, 843, 844, 830, 849, 850, 851, 774, 822,
	823, 824, 846, 847, 804, 805, 806, 807, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 852, 639, 438, 439, 646, 0,
	848, 642, 643, 640, 374, 425, 444, 432, 818, 657,
	517, 518, 658, 628, 0, 767, 0, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 1734, 0, 0,
	0, 770, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 809, 568, 519, 434,
	385, 586, 585, 0, 0, 878, 886, 0, 0, 0,
	0, 0, 0, 0, 0, 874, 0, 0, 0, 0,
	762, 0, 0, 799, 854, 853, 786, 796, 0, 0,
	309, 229, 514, 634, 516, 515, 787, 0, 788, 792,
	795, 791, 789, 790, 0, 869, 0, 0, 0, 0,
	0, 0, 0, 766, 0, 771, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 763,
	764, 0, 0, 0, 0, 819, 0, 765, 0, 0,
	814, 793, 797, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 794, 817, 821, 330, 892, 815,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 893, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 812,
	0, 631, 0, 470, 0, 0, 876, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 816, 0, 423,
	403, 889, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 1735, 1736, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 873, 399, 596, 629, 630, 521, 0, 888,
	868, 870, 871, 875, 879, 880, 881, 882, 883, 885,
	887, 891, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 890, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 820, 571, 572, 389, 390, 391, 392,
	877, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 899,
	872, 898, 900, 901, 897, 902, 903, 884, 775, 0,
	827, 895, 894, 896, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 782, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 861, 834, 835,
	836, 772, 837, 831, 832, 773, 833, 862, 825, 858,
	859, 801, 828, 838, 857, 839, 860, 863, 864, 904,
	905, 845, 829, 257, 906, 842, 865, 856, 855, 840,
	826, 866, 867, 808, 803, 843, 844, 830, 849, 850,
	851, 774, 822, 823, 824, 846, 847, 804, 805, 806,
	807, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 852, 639, 438,
	439, 646, 0, 848, 642, 643, 640, 374, 425, 444,
	432, 818, 657, 517, 518, 658, 628, 0, 767, 0,
	401, 0, 0, 532, 565, 554, 638, 520, 0, 0,
	0, 0, 0, 0, 770, 0, 0, 0, 336, 0,
	0, 369, 569, 551, 561, 552, 537, 538, 539, 546,
	348, 540, 541, 542, 512, 543, 513, 544, 545, 809,
	568, 519, 434, 385, 586, 585, 0, 0, 878, 886,
	0, 0, 0, 0, 0, 0, 0, 0, 874, 0,
	0, 0, 0, 762, 0, 0, 799, 854, 853, 786,
	796, 0, 0, 309, 229, 514, 634, 516, 515, 787,
	0, 788, 792, 795, 791, 789, 790, 0, 869, 0,
	0, 0, 0, 0, 0, 0, 766, 0, 771, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 763, 764, 0, 0, 0, 0, 819, 0,
	765, 0, 0, 814, 793, 797, 0, 0, 0, 0,
	299, 441, 460, 310, 429, 473, 315, 437, 452, 305,
	400, 426, 0, 0, 301, 458, 436, 382, 359, 360,
	300, 0, 420, 334, 350, 331, 398, 794, 817, 821,
	330, 892, 815, 468, 303, 0, 467, 397, 454, 459,
	383, 376, 0, 302, 456, 381, 375, 363, 340, 893,
	364, 365, 354, 409, 373, 410, 355, 387, 386, 388,
	0, 0, 0, 0, 0, 496, 497, 0, 0, 645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 812, 0, 631, 0, 470, 0, 0, 876,
	0, 0, 0, 440, 0, 0, 366, 0, 0, 0,
	816, 0, 423, 403, 889, 0, 0, 421, 371, 455,
	411, 461, 442, 469, 417, 412, 294, 443, 333, 384,
	306, 308, 328, 335, 337, 341, 342, 393, 394, 406,
	428, 445, 446, 447, 332, 316, 422, 317, 352, 318,
	295, 324, 322, 325, 430, 326, 297, 407, 451, 0,
	347, 418, 379, 298, 378, 408, 450, 449, 307, 477,
	483, 484, 573, 0, 489, 661, 662, 663, 498, 0,
	413, 0, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 656, 873, 399, 596, 629, 630,
	521, 0, 888, 868, 870, 871, 875, 879, 880, 881,
	882, 883, 885, 887, 891, 655, 0, 575, 590, 659,
	589, 652, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 890, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 820, 571, 572, 389,
	390, 391, 392, 877, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 664, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 899, 872, 898, 900, 901, 897, 902, 903,
	884, 775, 0, 827, 895, 894, 896, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 653, 650, 453, 654, 782,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	861, 834, 835, 836, 772, 837, 831, 832, 773, 833,
	862, 825, 858, 859, 801, 828, 838, 857, 839, 860,
	863, 864, 904, 905, 845, 829, 257, 906, 842, 865,
	856, 855, 840, 826, 866, 867, 808, 803, 843, 844,
	830, 849, 850, 851, 774, 822, 823, 824, 846, 847,
	804, 805, 806, 807, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 651, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	852, 639, 438, 439, 646, 0, 848, 642, 643, 640,
	374, 425, 444, 432, 818, 657, 517, 518, 658, 628,
	0, 767, 0, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 770, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 809, 568, 519, 434, 385, 586, 585, 0,
	0, 878, 886, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 0, 0, 0, 0, 0, 0, 0, 799,
	854, 853, 786, 796, 0, 0, 309, 229, 514, 634,
	516, 515, 787, 0, 788, 792, 795, 791, 789, 790,
	0, 869, 0, 0, 0, 0, 0, 0, 754, 766,
	0, 771, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 763, 764, 0, 0, 0,
	0, 819, 0, 765, 0, 0, 814, 793, 797, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	794, 817, 821, 330, 892, 815, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 893, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 812, 0, 631, 0, 470,
	0, 0, 876, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 816, 0, 423, 403, 889, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 661, 662,
	663, 498, 0, 413, 0, 503, 504, 505, 507, 508,
	509, 510, 574, 591, 558, 528, 491, 582, 525, 529,
	530, 357, 594, 0, 0, 0, 482, 367, 368, 0,
	339, 338, 380, 416, 345, 291, 292, 656, 873, 399,
	596, 629, 630, 521, 0, 888, 868, 870, 871, 875,
	879, 880, 881, 882, 883, 885, 887, 891, 655, 0,
	575, 590, 659, 589, 652, 405, 0, 427, 587, 534,
	0, 579, 553, 0, 580, 549, 584, 0, 523, 0,
	435, 463, 475, 492, 495, 524, 609, 610, 611, 296,
	494, 613, 614, 615, 616, 617, 618, 619, 612, 890,
	556, 533, 559, 474, 536, 535, 0, 0, 570, 820,
	571, 572, 389, 390, 391, 392, 877, 597, 314, 493,
	415, 0, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 560, 664, 0, 620, 621, 0, 0,
	487, 488, 344, 351, 506, 353, 313, 404, 346, 472,
	361, 0, 499, 564, 500, 623, 626, 624, 625, 396,
	356, 358, 431, 362, 372, 419, 471, 402, 424, 311,
	462, 433, 377, 550, 577, 899, 872, 898, 900, 901,
	897, 902, 903, 884, 775, 0, 827, 895, 894, 896,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 604, 603, 602, 601, 600, 599, 598, 0,
	0, 547, 448, 323, 285, 319, 320, 327, 653, 650,
	453, 654, 782, 293, 527, 370, 0, 414, 343, 592,
	593, 0, 644, 861, 834, 835, 836, 772, 837, 831,
	832, 773, 833, 862, 825, 858, 859, 801, 828, 838,
	857, 839, 860, 863, 864, 904, 905, 845, 829, 257,
	906, 842, 865, 856, 855, 840, 826, 866, 867, 808,
	803, 843, 844, 830, 849, 850, 851, 774, 822, 823,
	824, 846, 847, 804, 805, 806, 807, 0, 0, 0,
	478, 479, 480, 502, 0, 464, 526, 651, 0, 0,
	0, 0, 0, 0, 0, 576, 588, 622, 0, 632,
	633, 635, 637, 852, 639, 438, 439, 646, 0, 848,
	642, 643, 640, 374, 425, 444, 432, 0, 657, 517,
	518, 658, 628, 0, 767, 206, 64, 197, 168, 0,
	0, 0, 0, 0, 0, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 198, 0, 0, 0, 0, 0,
	0, 189, 0, 336, 0, 199, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 140, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 167,
	195, 204, 196, 124, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 221, 0, 0, 0, 440, 0,
	0, 366, 194, 188, 187, 486, 0, 423, 403, 233,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	606, 607, 608, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 465,
	329, 399, 596, 629, 630, 521, 0, 583, 522, 531,
	321, 555, 567, 566, 395, 481, 224, 578, 581, 511,
	234, 0, 575, 590, 548, 589, 235, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 466, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 490, 571, 572, 389, 390, 391, 392, 349, 597,
	314, 493, 415, 138, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 232, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	239, 304, 453, 240, 0, 293, 527, 370, 169, 414,
	343, 592, 593, 61, 644, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 595,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 236,
	45, 222, 225, 227, 226, 0, 62, 576, 588, 622,
	5, 632, 633, 635, 637, 636, 639, 438, 439, 646,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 143,
	237, 517, 518, 238, 628, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 140, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 2416, 2419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	2420, 470, 0, 0, 0, 2415, 0, 2414, 440, 2412,
	2417, 366, 0, 0, 0, 486, 0, 423, 403, 660,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 2418, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	661, 662, 663, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 656,
	329, 399, 596, 629, 630, 521, 0, 583, 522, 531,
	321, 555, 567, 566, 395, 481, 0, 578, 581, 511,
	655, 0, 575, 590, 659, 589, 652, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 466, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 490, 571, 572, 389, 390, 391, 392, 349, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 664, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	653, 650, 453, 654, 0, 293, 527, 370, 169, 414,
	343, 592, 593, 0, 644, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 595,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 651,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 636, 639, 438, 439, 646,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	657, 517, 518, 658, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 228, 0, 0, 786, 796, 0, 0, 309, 229,
	514, 634, 516, 515, 787, 0, 788, 792, 795, 791,
	789, 790, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 793,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 794, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 660,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	661, 662, 663, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 656,
	329, 399, 596, 629, 630, 521, 0, 583, 522, 531,
	321, 555, 567, 566, 395, 481, 0, 578, 581, 511,
	655, 0, 575, 590, 659, 589, 652, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 466, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 490, 571, 572, 389, 390, 391, 392, 349, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 664, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	653, 650, 453, 654, 0, 293, 527, 370, 0, 414,
	343, 592, 593, 0, 644, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 595,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 651,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 636, 639, 438, 439, 646,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	657, 517, 518, 658, 628, 206, 64, 197, 168, 0,
	0, 0, 0, 0, 0, 401, 683, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	690, 0, 0, 0, 0, 0, 0, 0, 689, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 687, 688, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 660,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	661, 662, 663, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 656,
	329, 399, 596, 629, 630, 521, 0, 583, 522, 531,
	321, 555, 567, 566, 395, 481, 0, 578, 581, 511,
	655, 0, 575, 590, 659, 589, 652, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 466, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 490, 571, 572, 389, 390, 391, 392, 684, 686,
	314, 493, 415, 698, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 664, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	653, 650, 453, 654, 0, 293, 527, 370, 169, 414,
	343, 592, 593, 0, 644, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 595,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 651,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 636, 639, 438, 439, 646,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	657, 517, 518, 658, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 1139, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1124, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 2580,
	2583, 2584, 2585, 2586, 2587, 2588, 0, 2593, 2589, 2590,
	2591, 2592, 0, 2575, 2576, 2577, 2578, 1122, 2559, 2581,
	0, 2560, 397, 2561, 2562, 2563, 2564, 1126, 2565, 2566,
	2567, 2568, 2569, 2572, 2573, 2570, 2571, 2579, 409, 373,
	410, 355, 387, 386, 388, 1150, 1152, 1154, 1156, 1159,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 2574, 0, 423, 403, 660,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	661, 662, 663, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 656,
	329, 399, 596, 629, 630, 521, 0, 583, 522, 531,
	321, 555, 567, 566, 395, 481, 0, 578, 581, 511,
	655, 0, 575, 590, 659, 589, 652, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 466, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 490, 571, 572, 389, 390, 391, 392, 349, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 664, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	653, 650, 453, 654, 0, 293, 2582, 370, 0, 414,
	343, 592, 593, 0, 644, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 595,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 651,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 636, 639, 438, 439, 646,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	657, 517, 518, 658, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 2416, 2419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	2420, 470, 0, 0, 0, 2415, 0, 2414, 440, 2412,
	2417, 366, 0, 0, 0, 486, 0, 423, 403, 660,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 2418, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	661, 662, 663, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 656,
	329, 399, 596, 629, 630, 521, 0, 583, 522, 531,
	321, 555, 567, 566, 395, 481, 0, 578, 581, 511,
	655, 0, 575, 590, 659, 589, 652, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 466, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 490, 571, 572, 389, 390, 391, 392, 349, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 664, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	653, 650, 453, 654, 0, 293, 527, 370, 0, 414,
	343, 592, 593, 0, 644, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 595,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 651,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 636, 639, 438, 439, 646,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	657, 517, 518, 658, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 2437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	2436, 470, 0, 0, 0, 2442, 2439, 2441, 440, 0,
	2440, 366, 0, 0, 0, 486, 0, 423, 403, 660,
	0, 2434, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	661, 662, 663, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 656,
	329, 399, 596, 629, 630, 521, 0, 583, 522, 531,
	321, 555, 567, 566, 395, 481, 0, 578, 581, 511,
	655, 0, 575, 590, 659, 589, 652, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 466, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 490, 571, 572, 389, 390, 391, 392, 349, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 664, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	653, 650, 453, 654, 0, 293, 527, 370, 0, 414,
	343, 592, 593, 0, 644, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 595,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 651,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 636, 639, 438, 439, 646,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	657, 517, 518, 658, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 2437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	2436, 470, 0, 0, 0, 2442, 2439, 2441, 440, 0,
	2440, 366, 0, 0, 0, 486, 0, 423, 403, 660,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	661, 662, 663, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 656,
	329, 399, 596, 629, 630, 521, 0, 583, 522, 531,
	321, 555, 567, 566, 395, 481, 0, 578, 581, 511,
	655, 0, 575, 590, 659, 589, 652, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 466, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 490, 571, 572, 389, 390, 391, 392, 349, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 664, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	653, 650, 453, 654, 0, 293, 527, 370, 0, 414,
	343, 592, 593, 0, 644, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 595,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 651,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 636, 639, 438, 439, 646,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	657, 517, 518, 658, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 2135, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 2136, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 1260, 1261, 1262, 1259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 660,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	661, 662, 663, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 656,
	329, 399, 596, 629, 630, 521, 0, 583, 522, 531,
	321, 555, 567, 566, 395, 481, 0, 578, 581, 511,
	655, 0, 575, 590, 659, 589, 652, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 466, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 490, 571, 572, 389, 390, 391, 392, 349, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 664, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	653, 650, 453, 654, 0, 293, 527, 370, 0, 414,
	343, 592, 593, 0, 644, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 595,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 651,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 636, 639, 438, 439, 646,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 206,
	657, 517, 518, 658, 628, 0, 0, 0, 0, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 140, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 2185, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 660, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 661, 662, 663, 498, 0, 413,
	0, 503, 504, 505, 507, 508, 509, 510, 574, 591,
	558, 528, 491, 582, 525, 529, 530, 357, 594, 0,
	0, 0, 482, 367, 368, 0, 339, 338, 380, 416,
	345, 291, 292, 656, 329, 399, 596, 629, 630, 521,
	0, 583, 522, 531, 321, 555, 567, 566, 395, 481,
	0, 578, 581, 511, 655, 0, 575, 590, 659, 589,
	652, 405, 0, 427, 587, 534, 0, 579, 553, 0,
	580, 549, 584, 0, 523, 0, 435, 463, 475, 492,
	495, 524, 609, 610, 611, 296, 494, 613, 614, 615,
	616, 617, 618, 619, 612, 466, 556, 533, 559, 474,
	536, 535, 0, 0, 570, 490, 571, 572, 389, 390,
	391, 392, 349, 597, 314, 493, 415, 0, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 563, 560,
	664, 0, 620, 621, 0, 0, 487, 488, 344, 351,
	506, 353, 313, 404, 346, 472, 361, 0, 499, 564,
	500, 623, 626, 624, 625, 396, 356, 358, 431, 362,
	372, 419, 471, 402, 424, 311, 462, 433, 377, 550,
	577, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 604, 603,
	602, 601, 600, 599, 598, 0, 0, 547, 448, 323,
	285, 319, 320, 327, 653, 650, 453, 654, 0, 293,
	527, 370, 169, 414, 343, 592, 593, 0, 644, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 595, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 478, 479, 480, 502,
	0, 464, 526, 651, 0, 0, 0, 0, 0, 0,
	0, 576, 588, 622, 0, 632, 633, 635, 637, 636,
	639, 438, 439, 646, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 206, 657, 517, 518, 658, 628, 0,
	0, 0, 0, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 140, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 2170, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 660, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 661, 662,
	663, 498, 0, 413, 0, 503, 504, 505, 507, 508,
	509, 510, 574, 591, 558, 528, 491, 582, 525, 529,
	530, 357, 594, 0, 0, 0, 482, 367, 368, 0,
	339, 338, 380, 416, 345, 291, 292, 656, 329, 399,
	596, 629, 630, 521, 0, 583, 522, 531, 321, 555,
	567, 566, 395, 481, 0, 578, 581, 511, 655, 0,
	575, 590, 659, 589, 652, 405, 0, 427, 587, 534,
	0, 579, 553, 0, 580, 549, 584, 0, 523, 0,
	435, 463, 475, 492, 495, 524, 609, 610, 611, 296,
	494, 613, 614, 615, 616, 617, 618, 619, 612, 466,
	556, 533, 559, 474, 536, 535, 0, 0, 570, 490,
	571, 572, 389, 390, 391, 392, 349, 597, 314, 493,
	415, 0, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 560, 664, 0, 620, 621, 0, 0,
	487, 488, 344, 351, 506, 353, 313, 404, 346, 472,
	361, 0, 499, 564, 500, 623, 626, 624, 625, 396,
	356, 358, 431, 362, 372, 419, 471, 402, 424, 311,
	462, 433, 377, 550, 577, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 604, 603, 602, 601, 600, 599, 598, 0,
	0, 547, 448, 323, 285, 319, 320, 327, 653, 650,
	453, 654, 0, 293, 527, 370, 169, 414, 343, 592,
	593, 0, 644, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 595, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	478, 479, 480, 502, 0, 464, 526, 651, 0, 0,
	0, 0, 0, 0, 0, 576, 588, 622, 0, 632,
	633, 635, 637, 636, 639, 438, 439, 646, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 657, 517,
	518, 658, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 1050, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	1057, 1058, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1061, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 1044, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 1031, 468, 303, 1030, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 660, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 1048, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 661, 662,
	663, 498, 0, 413, 0, 503, 504, 505, 507, 508,
	509, 510, 574, 591, 558, 528, 491, 582, 525, 529,
	530, 357, 594, 0, 0, 0, 482, 367, 368, 0,
	339, 338, 380, 416, 345, 291, 292, 656, 329, 399,
	596, 629, 630, 521, 0, 583, 522, 531, 321, 555,
	567, 566, 395, 481, 0, 578, 581, 511, 655, 0,
	575, 590, 659, 589, 652, 405, 0, 427, 587, 534,
	0, 579, 553, 0, 580, 549, 584, 0, 523, 0,
	435, 463, 475, 492, 495, 524, 609, 610, 611, 296,
	494, 613, 614, 615, 616, 617, 618, 1049, 612, 466,
	556, 533, 559, 474, 536, 535, 0, 0, 570, 1052,
	571, 572, 389, 390, 391, 392, 349, 597, 1047, 493,
	415, 0, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 560, 664, 0, 620, 621, 0, 0,
	487, 488, 344, 351, 506, 353, 313, 404, 346, 472,
	361, 0, 499, 564, 500, 623, 626, 624, 625, 1059,
	1045, 1055, 1046, 362, 372, 419, 471, 402, 424, 311,
	462, 433, 1056, 550, 577, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 604, 603, 602, 601, 600, 599, 598, 0,
	0, 547, 448, 323, 285, 319, 320, 327, 653, 650,
	453, 654, 0, 293, 527, 370, 0, 414, 343, 592,
	593, 0, 644, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 595, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	478, 479, 480, 502, 0, 464, 526, 651, 0, 0,
	0, 0, 0, 0, 0, 576, 588, 622, 0, 632,
	633, 635, 637, 636, 639, 438, 439, 646, 0, 641,
	642, 643, 640, 1043, 425, 444, 432, 206, 657, 517,
	518, 658, 628, 0, 0, 0, 0, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 140, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2067, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	169, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 1057, 1058, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1061, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 1031,
	468, 303, 1030, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 1059, 2088, 1055, 2089, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 1056, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 2981, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 2984, 0, 0, 0, 2983, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 1556, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 1554, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1552, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 1550, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 1554, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1552, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4091, 0, 228, 854, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 1554, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1552, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 2481, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 979, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 1554, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1764, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	2521, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 2523, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	2135, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 2136, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 3200, 3202, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 2544, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 1554, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 671, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 670, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 854, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4068, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 3823, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 3959, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1778, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3838, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 3745, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 3233, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3252, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2067, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 3454, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3362, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 1554, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 2523, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 2898, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 2642, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2604, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 2602, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 2369, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 1918, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 2049, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 1554, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 1954, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 1583, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 671, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	681, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 979, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 3178, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 1904, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 1533,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 1531,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 1410, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 749,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 657, 517, 518, 658, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 660, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 706, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 707, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 646, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 2036, 657, 517, 518, 658, 628, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3663, 0, 0, 0, 0, 0, 2039, 0, 2036,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2039, 0, 2036, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2013, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2039, 0, 0, 0, 0, 0, 3844,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2013,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2029,
	0, 0, 0, 0, 0, 0, 0, 2013, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2029, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2036, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3814, 0, 0, 0, 2029, 0, 0, 0, 0,
	0, 0, 0, 2017, 0, 0, 0, 0, 0, 0,
	2039, 0, 0, 0, 2023, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2011, 2045, 0, 0, 2012, 2014,
	2016, 2017, 2018, 2019, 2020, 2024, 2025, 2026, 2028, 2031,
	2032, 2033, 2023, 0, 0, 0, 0, 0, 0, 2021,
	2030, 2022, 0, 0, 2013, 0, 0, 0, 0, 0,
	0, 0, 2011, 2045, 0, 0, 2012, 2014, 2016, 2017,
	2018, 2019, 2020, 2024, 2025, 2026, 2028, 2031, 2032, 2033,
	2023, 0, 0, 0, 0, 0, 2037, 2021, 2030, 2022,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2011, 2045, 0, 0, 2012, 2014, 2016, 0, 2018, 2019,
	2020, 2024, 2025, 2026, 2028, 2031, 2032, 2033, 0, 0,
	0, 0, 2029, 0, 2037, 2021, 2030, 2022, 0, 0,
	0, 0, 0, 0, 0, 0, 2034, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2010, 0, 0, 0, 0, 0, 0,
	2009, 0, 2037, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2034, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2027, 0, 0, 0, 0, 0,
	0, 2010, 0, 2015, 0, 0, 0, 0, 2009, 0,
	0, 0, 0, 0, 0, 0, 2017, 0, 0, 0,
	0, 0, 2034, 0, 0, 0, 0, 2023, 0, 0,
	0, 0, 2027, 0, 0, 0, 0, 0, 0, 2010,
	0, 2015, 0, 0, 0, 0, 2009, 2011, 2045, 0,
	0, 2012, 2014, 2016, 0, 2018, 2019, 2020, 2024, 2025,
	2026, 2028, 2031, 2032, 2033, 0, 0, 0, 0, 0,
	2027, 0, 2021, 2030, 2022, 0, 0, 0, 0, 2015,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2037,
	0, 3667, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3672,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2034,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2010, 0, 0, 0,
	0, 0, 0, 2009, 0, 0, 0, 3672, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2027, 0, 0,
	0, 0, 0, 0, 0, 0, 2015, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3672,
}

var yyPact = [...]int{
	340, -1000, -1000, -1000, -348, 15592, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 50184, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 475, 50184, -345, 31624, 48264, -1000, -1000, 2789, -1000,
	48904, 17532, 50184, 577, 575, 50184, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 991, -1000, 54664, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 896, 4961, 54024, 11725,
	-223, -1000, 1537, -44, 2640, 503, -213, -217, 1226, 1230,
	1307, 1169, 50184, 1155, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 359, 1148, 49544,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4318, 234, 988, 1148, 22660, 150,
	126, 1537, 478, -83, 193, -1000, 1851, 4092, 188, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11725, 11725, 15592, -377, 15592, 11725, 50184, 50184, -1000, -1000,
	-1000, -1000, -345, 48904, 896, 4961, 11725, 2640, 503, -213,
	-217, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -83, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 126, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5304, -1000, 1742,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2396, 3204, 1737, 2639, 842,
	48264, 50184, -1000, 141, 842, -1000, -1000, -1000, 1537, 3583,
	-1000, 50184, 50184, 237, 1947, -1000, 541, 483, 473, 447,
	390, 1731, -1000, -1000, -1000, -1000, -1000, -1000, 781, 3557,
	-1000, 50184, 50184, 3213, 50184, -1000, 2363, 806, -1000, 4202,
	3390, 1484, 996, 3232, -1000, -1000, 3200, -1000, 396, 348,
	288, 469, 474, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	311, -1000, 3463, -1000, -1000, 376, -1000, -1000, 361, -1000,
	-1000, -1000, 119, -1000, -1000, -1000, -1000, -1000, -1000, 6,
	-1000, -1000, 1300, 2063, 11725, 2054, -1000, 4260, 1724, -1000,
	-1000, -1000, 7218, 14297, 14297, 14297, 14297, 50184, -1000, -1000,
	2980, 11725, 3197, 3196, 3190, 3188, -1000, -1000, -1000, -1000,
	-1000, -1000, 3187, 1728, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2118, -1000, -1000, -1000, 14940, -1000, 3184,
	3160, 3159, 3157, 3155, 3154, 3153, 3143, 3141, 3140, 3137,
	3135, 3134, 3131, 2857, 16882, 3130, 2638, 2636, 3129, 3127,
	3126, 2635, 3125, 3124, 3123, 2857, 2857, 3119, 3115, 3112,
	3103, 3100, 3099, 3098, 3091, 3090, 3087, 3086, 3083, 3082,
	3079, 3078, 3075, 3074, 3073, 3072, 3064, 3063, 3044, 3042,
	3022, 3019, 3018, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1474, -1000, 3013,
	3572, 2863, -1000, 3444, 3431, 3425, 3422, -276, 3012, 2324,
	-1000, -1000, 91, 3551, 50184, -300, 50184, 426, -95, -96,
	-97, -1000, -81, -1000, -1000, 1207, -1000, 1140, 53384, 949,
	-1000, -1000, 50184, 894, 894, 894, 50184, 228, 943, 894,
	894, 894, 894, 894, 961, 894, 3487, 987, 986, 985,
	974, 894, -34, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1944, 1942, 3295, 1098, -1000, -1000, -1000, -1000, 1594, 50184,
	-1000, 2943, 426, -334, 1844, 1844, 3533, 3533, 3486, 3484,
	826, 821, 805, 1844, 662, -1000, 1918, 1918, 1918, 1918,
	1844, 530, 803, 3490, 3490, 154, 1918, 77, 1844, 1844,
	77, 1844, 1844, -1000, 1900, 363, -283, -1000, -1000, -1000,
	-1000, 1918, 1918, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3453, 3451, 896, 896, 50184, 896, 224, 50184, 896, 896,
	896, 50184, 899, -333, 43, 52744, 52104, 2291, 2363, 800,
	799, 1599, 1923, -1000, 1859, 50184, 50184, 1859, 1859, 25864,
	25224, -1000, 50184, -1000, 3572, 2863, 2843, 1767, 2842, 2863,
	-98, 426, 896, 896, 896, 896, 896, 352, 896, 896,
	896, 896, 896, 50184, 50184, 47624, 896, 896, 896, 896,
	9790, 1851, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15592, 2221, 2152, 185, -19,
	-321, 275, -1000, -1000, 50184, 3352, 343, -1000, -1000, -1000,
	2933, -1000, 2935, 2935, 2935, 2935, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2935, 2935, 2942, 3006,
	-1000, -1000, 2934, 2934, 2934, 2933, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2936, 2936, 2941, 2941, 2936, 50184, -123, -1000, -1000,
	11725, 50184, 3369, 431, 2992, 842, -1000, -1000, 50184, 302,
	433, 3572, 3364, 3490, 3525, -1000, -1000, 1702, 2314, 2632,
	-1000, 390, -1000, 406, 390, -1000, 509, 509, 1821, -1000,
	1189, -1000, -1000, -1000, -1000, -1000, -1000, 50184, 6, 572,
	-1000, -1000, 2614, 2986, -1000, 688, 1414, 1539, -1000, 372,
	5521, 40584, 2363, 40584, 50184, -1000, -1000, -1000, -1000, -1000,
	-1000, 101, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 377, -1000, 11725, 11725,
	11725, 11725, 11725, -1000, 774, 13654, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14297, 14297, 14297, 14297, 14297, 14297, 14297,
	14297, 14297, 14297, 14297, 14297, 2979, 1891, 14297, 14297, 14297,
	14297, 28424, 1767, 3194, 1597, 308, 1724, 1724, 1724, 1724,
	11725, -1000, 1973, 2063, 11725, 11725, 11725, 11725, 34824, 50184,
	-1000, -1000, 4630, 11725, 11725, 4572, 11725, 3405, 11725, 11725,
	11725, 2841, 5923, 50184, 11725, -1000, 2837, 2832, -1000, -1000,
	2187, 11725, -1000, -1000, 11725, -1000, -1000, 11725, 14297, 11725,
	-1000, 11725, 11725, 11725, -1000, -1000, 3107, 3405, 3405, 3405,
	1945, 11725, 11725, 3405, 3405, 3405, 1924, 3405, 3405, 3405,
	3405, 3405, 3405, 3405, 3405, 3405, 3405, 3405, 2831, 2826,
	2823, 11082, 3490, -223, -1000, 9147, 3364, 3490, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -279, 2985,
	50184, 2631, 2630, -357, 169, 485, 50184, 1210, -1000, -1000,
	50184, 2312, 50184, 2307, 95, 1223, 1114, 1144, -1000, -1000,
	50184, 51464, -1000, 50184, 1996, 50184, 50184, 3401, -1000, 50184,
	50184, 894, 894, 894, -1000, 45704, 40584, 50184, 50184, 2363,
	50184, 50184, 50184, 894, 894, 894, 894, 50184, -1000, 3308,
	40584, 3302, 899, -1000, 50184, 1594, 3400, 50184, -1000, -1000,
	-1000, -1000, 3533, 14297, 14297, -1000, -1000, 11725, -1000, 289,
	46984, 1918, 1844, 1844, -1000, -1000, 50184, -1000, -1000, -1000,
	1918, 50184, 1918, 1918, 3533, 1918, -1000, -1000, -1000, 1844,
	1844, -1000, -1000, 11725, -1000, -1000, 1918, 1918, -1000, -1000,
	3533, 50184, 83, 3533, 3533, 138, -1000, -1000, -1000, 1844,
	50184, 50184, 894, 50184, -1000, 50184, 50184, -1000, -1000, 50184,
	50184, 4628, 50184, 45704, 46344, 3448, -1000, 40584, 50184, 50184,
	1591, -1000, 948, 38024, -1000, 50184, 1528, -1000, 48, -1000,
	87, 43, 1859, 43, 1859, 947, -1000, 686, 687, 23944,
	606, 40584, 6566, -1000, -1000, 1859, 1859, 6566, 6566, 1748,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1587, -1000, 371,
	3490, -1000, -1000, -1000, -1000, -1000, 2306, -1000, 50184, 45704,
	40584, 2363, 50184, 896, 50184, 50184, 50184, 50184, 50184, -1000,
	2984, 1699, -1000, 3388, 50184, 50184, 50184, 50184, 1533, -1000,
	-1000, 20732, 1698, -1000, -1000, 1988, -1000, 11725, 15592, -261,
	11725, 15592, 15592, 11725, 15592, -1000, 11725, 337, -1000, -1000,
	-1000, -1000, 2304, -1000, 2297, -1000, -1000, -1000, -1000, -1000,
	2626, 2626, -1000, 2279, -1000, -1000, -1000, -1000, 2276, -1000,
	-1000, 2267, -1000, -1000, -1000, -1000, -165, 2817, 1300, -1000,
	2624, 3231, -225, -1000, 22020, 50184, 50184, 431, -361, 1934,
	1932, 1927, 3467, -1000, -225, -1000, 21376, 50184, 3490, -1000,
	-234, 3364, 11725, 50184, -1000, 3482, -1000, -1000, 390, -1000,
	-1000, -1000, 509, 468, -1000, -1000, -1000, -1000, -1000, -1000,
	1686, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -85, -91, 1586, -1000, 50184, -1000, -1000, 372, 40584,
	42504, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 264, -1000,
	-1000, 177, -1000, 925, 293, 1815, -1000, -1000, 261, 207,
	241, 1038, 2063, -1000, 2002, 2002, 2005, -1000, 886, -1000,
	-1000, -1000, -1000, 2980, -1000, -1000, -1000, 2085, 2010, -1000,
	1873, 1873, 1752, 1752, 1752, 1752, 1752, 1998, 1998, -1000,
	-1000, -1000, 7218, 2979, 14297, 14297, 14297, 14297, 992, 992,
	2995, 4062, -1000, -1000, -1000, -1000, 11725, 166, 1974, -1000,
	11725, 2647, 1449, 2575, 1538, 1806, -1000, 2933, 11725, 1683,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2815, 2810, 2515, 3550, 2809, 11725, -1000, -1000, 1805, 1794,
	1790, -1000, 2271, 10439, -1000, -1000, -1000, 2807, 1662, 2801,
	-1000, -1000, -1000, 2799, 1789, 1331, 2798, 2154, 2794, 2790,
	2786, 2785, 1585, 11725, 11725, 11725, 11725, 2778, 1786, 1783,
	11725, 11725, 11725, 11725, 2777, 11725, 11725, 11725, 11725, 11725,
	11725, 11725, 11725, 11725, 11725, 50184, 170, 170, 170, 1579,
	1571, -1000, -1000, 1778, -1000, 2063, -1000, -1000, 3364, -1000,
	2978, 2266, 1570, -1000, -1000, -342, 2558, 50184, 50184, 155,
	50184, 2619, -301, 50184, -1000, -1000, 2618, -1000, -1000, -1000,
	1217, 1111, 1147, -1000, 50184, -1000, 2616, 3379, 3481, 933,
	50184, 2972, 2966, 50184, 50184, 50184, 332, -1000, -1000, 1470,
	-1000, 293, -21, 581, 1343, 3212, 889, -126, 50184, 50184,
	50184, 50184, 3399, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 45064, -1000, 2965, 1777, -1000, -1000, 1724, 1724, 2063,
	50184, 50184, 50184, 3211, 50184, 50184, 3533, 3533, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1918, 3533, 3533, 1373, 1844,
	1918, -1000, -1000, 1918, -361, -1000, 1918, -1000, -361, 1654,
	-361, 50184, -1000, -1000, -1000, 3398, 2943, 1559, -1000, -1000,
	-1000, 3523, 1101, 879, 879, 1091, 757, 3522, 19452, -1000,
	1834, 1249, 921, 3332, 392, -1000, 1834, -162, 849, 1834,
	1834, 1834, 1834, 1834, 1834, 1834, 758, 751, 1834, 1834,
	1834, 1834, 1834, 1834, 1834, 1834, 1834, 1834, 1834, 1228,
	1834, 1834, 1834, 1834, 1834, -1000, 1834, 2963, 568, -1000,
	-1000, -1000, -1000, -1000, -1000, 790, 699, 313, 3447, 442,
	-1000, 446, 1470, 682, 3442, 472, 50184, 50184, 3298, 1421,
	-1000, -1000, -1000, -1000, -1000, 29064, 29064, 23304, 29064, -1000,
	200, 1859, 43, 51, -1000, -1000, 1528, 6566, 1528, 6566,
	2264, -1000, -1000, 920, -1000, -1000, 1343, -1000, 50184, 50184,
	-1000, -1000, 2962, 1926, -1000, -1000, 16882, -1000, 6566, 6566,
	-1000, -1000, 30984, 50184, -1000, -2, -1000, 20, 3364, -1000,
	1324, -1000, -1000, 1523, 1343, 3229, 50184, 1324, 1324, 1324,
	-1000, -1000, 18172, 50184, 50184, -1000, -1000, -1000, -312, 3533,
	9790, -1000, 38024, -1000, -1000, 44424, -1000, 43784, 1951, -1000,
	15592, 2147, 180, -1000, 259, -322, 184, 1963, 183, 2063,
	-1000, -1000, 2776, 2775, 1776, -1000, 1762, 2773, 1760, 1735,
	2262, -1000, 55, -1000, 3354, 1345, -1000, 2960, -1000, 1723,
	3290, -1000, 1511, -1000, 1925, 1722, -1000, -1000, -1000, 11725,
	43144, 11725, 1070, 1345, 1720, 3289, 1511, 3364, 2609, -1000,
	1510, -1000, 2091, 1652, 233, -1000, -1000, -1000, 50184, 2614,
	1718, 42504, 1363, -1000, 919, 1642, 1640, -1000, 40584, 373,
	40584, -1000, 40584, -1000, -1000, 408, -1000, 50184, 3359, -1000,
	-1000, -1000, 2558, 1922, -359, 50184, -1000, -1000, -1000, -1000,
	-1000, 1709, -1000, 992, 992, 2995, 3870, -1000, 14297, -1000,
	14297, 3163, -1000, 1883, -1000, 11725, 2126, 5216, 11725, 5216,
	966, 27144, 34824, -105, 3384, 3138, 50184, -1000, -1000, 11725,
	11725, -1000, 3121, -1000, -1000, -1000, -1000, 11725, 11725, 2360,
	-1000, 50184, -1000, -1000, -1000, -1000, 27144, -1000, 14297, -1000,
	-1000, -1000, -1000, 11725, 1431, 1431, 3117, 1708, 170, 170,
	170, 3080, 3076, 3065, 1707, 170, 3039, 2939, 2919, 2886,
	2875, 2825, 2792, 2784, 2753, 2709, 1700, -1000, 2959, -1000,
	-1000, 2064, 13011, 9147, -1000, -1000, 306, 1490, 2258, 2603,
	128, -1000, 1921, -1000, 2601, 50184, 50184, 1194, -1000, 50184,
	3547, -1000, -1000, -1000, -1000, 1103, -1000, 2595, -1000, 327,
	269, 2144, 356, 1308, 18172, 2943, 2958, 2943, 175, 1834,
	669, 40584, 791, -1000, 50184, 2121, 1919, 3224, 836, 3351,
	50184, 50184, 2957, 432, 2955, 2954, 3396, 542, 5472, 50184,
	1393, -1000, 1630, 4092, -1000, 50184, -1000, -1000, 50184, -1000,
	2363, -1000, 1844, -1000, -1000, 3533, -1000, -1000, 11725, 11725,
	3533, 1844, 1844, -1000, 1918, -1000, 50184, -1000, -361, 542,
	5472, 3394, 4832, 614, 2846, -1000, 50184, -1000, -1000, -1000,
	1022, -1000, 1113, 894, 50184, 2026, 1113, 2024, 2953, -1000,
	-1000, 50184, 50184, 50184, 50184, -1000, -1000, 50184, -1000, 50184,
	50184, 50184, 50184, 50184, 41864, -1000, 50184, 50184, -1000, 50184,
	2022, 50184, 2021, 981, -1000, 1834, 1834, 1043, -1000, -1000,
	664, -1000, 41864, 2257, 2255, 2252, 2249, 2593, 2589, 2586,
	1834, 1834, 2246, 2584, 41224, 2583, 1322, 2244, 2242, 2240,
	2251, 2582, 1065, -1000, 2574, 2248, 2229, 2205, 50184, 2951,
	2474, 562, -1000, -1000, 2144, 175, 1834, 437, 50184, 1917,
	1915, 669, 640, 640, 580, -24, 24584, -1000, -1000, -1000,
	50184, 38024, 38024, 38024, 38024, 38024, 38024, -1000, 3271, 3251,
	2944, -1000, 3250, 3248, 3263, 3267, 3236, 50184, 38024, 2943,
	-1000, 41224, -1000, -1000, -1000, 1767, 1690, 3624, 1116, 11725,
	6566, -1000, -1000, 31, 67, -1000, -1000, -1000, -1000, 40584,
	2573, 606, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3480,
	50184, 50184, 881, 2771, 1478, -1000, -1000, -1000, 5472, 2935,
	2935, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2935, 2935, 2942, -1000, -1000, 2934, 2934, 2934, 2933, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2936,
	2936, 2941, 2941, 2936, -1000, -1000, -1000, -1000, 3530, -1000,
	1477, -1000, -1000, 1624, -1000, 1992, -349, 15592, 1961, 1841,
	-1000, 11725, 15592, 11725, -262, 412, -264, -1000, -1000, -1000,
	2565, -1000, -1000, -1000, 2239, -1000, 2238, -1000, 191, 211,
	2019, -225, 9147, 477, 50184, -225, 50184, 9147, -1000, 50184,
	162, -368, -370, 156, 2564, 465, -225, 3480, 55, 11725,
	3321, -1000, -1000, 50184, 2237, -1000, -1000, -1000, 3545, 40584,
	2363, 1781, 39944, -1000, 374, -1000, 263, 653, 2561, -1000,
	973, 127, 2559, 2558, -1000, -1000, -1000, -1000, 14297, 1724,
	-1000, -1000, -1000, 2063, 11725, 2770, -1000, 1123, 1123, 2165,
	2769, 2768, -1000, 2935, 2935, -1000, 2933, 2934, 2933, 1123,
	1123, 2766, -1000, 2932, -1000, 3384, -1000, 2296, 2701, -1000,
	2653, 2634, 11725, -1000, 2765, 3535, 1422, -41, -193, 170,
	170, -1000, -1000, -1000, -1000, 170, 170, 170, 170, -1000,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 848, -110, -291, -114, -295, -1000, 2764, 1476, -1000,
	-1000, -1000, -1000, -1000, 4572, 1448, 589, 589, 2558, 2557,
	-1000, 918, 2556, 1177, 50184, 2555, -302, -1000, 2553, -1000,
	-1000, 50184, 50184, 50184, 50824, 692, 50184, 50184, 2551, -1000,
	2550, 2760, 1408, -1000, -1000, 50184, -1000, -1000, -1000, 2758,
	3393, 18812, 3392, 2277, -1000, -1000, -1000, 30344, 640, -1000,
	-1000, -1000, 760, 336, 2230, 624, -1000, 50184, 617, 3303,
	1911, 2549, 50184, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3351, -1000, 1180, -361, 536, 36744, 16242, -1000, 419,
	50184, -1000, 50184, 18812, 18812, 419, 538, 1898, -1000, 842,
	1338, 135, 38024, 50184, -1000, 37384, 2754, -1000, -1000, 1343,
	3533, -1000, 2063, 2063, -361, 3533, 3533, 1844, -1000, -1000,
	538, -1000, 419, -1000, 1598, 20092, 605, 540, 490, -1000,
	749, -1000, -1000, 841, 3336, 5472, -1000, 50184, -1000, 50184,
	-1000, 50184, 50184, 894, 11725, 3336, 50184, 916, -1000, 1225,
	512, 510, 861, 861, 1372, -1000, 3384, -1000, -1000, 1370,
	-1000, -1000, -1000, -1000, 50184, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 27144, 27144, 3440, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2544,
	2542, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	50184, 1684, -1000, 1910, 2226, 2541, 2277, 30344, 1907, 1859,
	2535, 2534, 640, -1000, 2532, 2527, -1000, 2121, 1905, 964,
	50184, -1000, 1339, 50184, 50184, -1000, 1530, -1000, 1904, 3210,
	3222, 3210, -1000, 3210, -1000, -1000, -1000, -1000, 3252, 2526,
	-1000, 3249, -1000, 3097, -1000, -1000, -1000, -1000, 1530, -1000,
	-1000, -1000, -1000, -1000, 1116, -1000, 3471, 1113, 1113, 1113,
	2752, -1000, -1000, -1000, -1000, 1363, 2750, -1000, -1000, -1000,
	3565, -1000, -1000, -1000, -1000, -1000, -1000, 18172, 3344, 3527,
	3520, 39304, -1000, -349, 1876, -1000, 1985, 179, 1880, 50184,
	-1000, -1000, -1000, 2749, 2745, -236, 212, 3517, 3513, 1130,
	-1000, 2734, 1362, -225, -1000, -1000, 1345, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -372, -225, -1000, 1345, -1000, 191,
	-1000, -1000, 3345, -1000, -1000, 2363, -1000, 251, -1000, -1000,
	-1000, -1000, -1000, -1000, 252, -1000, 50184, -1000, 1361, 125,
	-1000, 2063, -1000, -1000, -1000, -1000, -1000, 5216, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2525, -1000,
	-1000, 11725, -1000, -1000, -1000, 2628, -1000, -1000, 11725, 2732,
	2524, 2725, 2522, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3572, -1000, 3510, 1681, 2722, 2719, 1680, 2714, 2713, -1000,
	11725, 2710, 4572, 1057, 2520, 1057, -1000, -1000, 470, 29704,
	50184, 3541, -1000, 50184, 2518, -1000, -1000, 50184, 2144, 685,
	2144, 694, 50184, -312, -1000, -108, 1308, 5472, 995, 419,
	2708, 1356, -1000, -1000, -1000, -1000, 419, -1000, 2487, 292,
	-1000, -1000, -1000, -1000, 2223, -1000, -1000, 2182, 1622, 305,
	-1000, -1000, -1000, -1000, -1000, -1000, 2160, 50184, 38664, 2227,
	1902, -362, -1000, 2929, -1000, 1834, 1834, 1834, 915, 50184,
	1678, -1000, 1834, 1834, 2694, -1000, -1000, 908, 2684, 2679,
	-129, 851, 1857, 1839, -1000, 2222, 29064, 38024, 37384, 1447,
	-1000, 1623, -1000, -1000, -1000, -1000, -1000, -1000, 3533, 851,
	-1000, 597, 2217, 14297, 2928, 14297, 2926, 636, 2925, 1655,
	-1000, 50184, -1000, -1000, 50184, 3981, 2924, -1000, 2923, 3207,
	588, 2922, 2921, 50184, 2400, -1000, 3336, 50184, 834, 3341,
	-1000, -1000, -1000, 493, -1000, -1000, -1000, 701, -1000, 50184,
	-1000, 50184, -1000, 1704, -1000, 27144, -1000, -1000, 1648, -1000,
	2474, 2473, 4572, -1000, -1000, 292, 2469, 6566, -1000, -1000,
	-1000, -1000, -1000, 3303, 2467, 2160, 50184, -1000, 50184, 1339,
	1339, 3572, 50184, 9147, -1000, -1000, 11725, 2910, -1000, 11725,
	-1000, -1000, -1000, 2673, -1000, -1000, -1000, -1000, -1000, 2908,
	3328, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1884, -1000,
	11725, 12368, -1000, 883, 15592, -269, 403, -1000, -1000, -1000,
	-240, 2464, -1000, -1000, 3509, 2463, 2366, 50184, -1000, -1000,
	1345, -1000, 1345, -236, -1000, -1000, 1343, -1000, -1000, 1191,
	773, -1000, 2670, 270, -1000, 2356, -1000, 2334, 170, -1000,
	170, -1000, 248, 11725, -1000, 2462, -1000, -1000, -1000, 2458,
	-1000, -1000, 2288, -1000, 2668, -1000, 2457, -1000, -1000, 50184,
	-1000, -1000, 1162, 2452, -363, -1000, 2450, 2144, 2449, 2144,
	50184, 676, -1000, 2445, 2441, -1000, -1000, 5472, -131, -129,
	18812, -131, -1000, -1000, 407, 454, -1000, -1000, 2174, 691,
	-1000, -1000, 2437, 663, -1000, 1339, -1000, 1887, 2056, 2402,
	34824, 27144, 28424, 2433, 463, -1000, -1000, 36744, 1884, 1884,
	55315, 460, 377, 55528, -1000, 2902, 1234, 1837, -1000, 2215,
	-1000, 2211, -1000, 3533, 1447, 133, -1000, -1000, 1780, -1000,
	1234, 2846, 3508, -1000, 3301, 50184, 3116, 50184, 2892, 1886,
	14297, -1000, 841, 3286, -1000, -1000, 3981, -1000, -1000, 2033,
	14297, -1000, -1000, 2432, 28424, 1056, 1885, 1881, 1025, 2891,
	-1000, 705, 3564, -1000, -1000, -1000, 1040, 2890, -1000, 2015,
	2013, -1000, 50184, -1000, 34824, 34824, 792, 792, 34824, 34824,
	2884, 861, -1000, -1000, 14297, -1000, -1000, 1834, -1000, -1000,
	-1000, 1834, 1688, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2227, -1000, -1000, 1324, -1000, 3490, -1000, -1000, 2063, 50184,
	2063, -1000, 36104, -1000, 3507, 3506, -1000, 2063, 250, 240,
	2881, 2870, -1000, -349, 50184, 50184, -244, 2209, -1000, 2429,
	206, -1000, -1000, 1302, -240, -246, 138, 27144, 1879, -1000,
	2666, 367, -150, -1000, -1000, -1000, -1000, 2665, -1000, 1060,
	-1000, -1000, -1000, 1300, 2659, 2651, -1000, -1000, -1000, -1000,
	50184, -1000, 2391, -312, 2428, -312, 2421, 670, 2144, -1000,
	-1000, -118, -1000, -1000, 449, -1000, -1000, -1000, 638, 2353,
	-1000, -1000, 435, -1000, -1000, -1000, 2160, 2419, -1000, -1000,
	124, -1000, 1878, 1633, -1000, -1000, -1000, 50184, -1000, -1000,
	-1000, 840, -1000, 419, 55391, -1000, 1249, 27784, 50184, -1000,
	1191, 840, 568, 33544, 712, 304, -1000, 2208, -1000, -1000,
	3572, -1000, 707, -1000, 619, -1000, 1628, -1000, 1626, 35464,
	2190, 2973, -1000, 55353, 994, -1000, -1000, 2995, -1000, -1000,
	-1000, -1000, -1000, -1000, 2417, 2416, -1000, -1000, -1000, -1000,
	-1000, 2183, 2869, 36, 3438, 2407, -1000, -1000, 2866, 1625,
	1621, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1610, 1604, 34824, -1000, -1000, 2995, 2156, 27144, 1834,
	-1000, -1000, 1595, 1581, -1000, -1000, -1000, -1000, -1000, -328,
	2864, 11725, 11725, -1000, -1000, -1000, 2861, -1000, -1000, 3505,
	-244, -253, 2406, 190, 239, -1000, 2404, -1000, -121, 3280,
	-157, -1000, -1000, 795, -230, 167, 142, 132, -1000, -1000,
	-1000, 11725, -1000, -1000, -1000, 108, -1000, 1874, -1000, -312,
	-1000, -312, 2144, 2403, 50184, 671, -1000, -1000, -1000, -1000,
	247, -1000, -1000, -1000, -1000, -1000, -1000, 2402, 2399, -1000,
	-1000, 591, 3501, -1000, 55528, -1000, 1834, -1000, -1000, 591,
	1569, -1000, 1834, 1834, -1000, 551, -1000, 1822, -1000, 2142,
	-1000, 3490, -1000, 548, -1000, 593, -1000, -1000, -1000, 1561,
	-1000, -1000, -1000, 55353, 598, -1000, 831, 2858, -1000, -1000,
	2650, 11725, 2857, 1834, 2648, -101, 34824, 3118, 3067, 2975,
	2642, 1517, -1000, -1000, 27144, -1000, -1000, 34184, -1000, 2851,
	1473, 1472, 50184, 2366, -1000, -1000, 2393, -1000, 898, 197,
	239, -1000, 3498, 205, 3497, 3496, 1274, 3275, -1000, -1000,
	2003, -1000, 176, 174, 165, -1000, -1000, -1000, -1000, -1000,
	2391, 2389, -1000, -1000, 2377, -312, 601, -1000, 368, -1000,
	-1000, -1000, 316, -1000, 3495, 614, -1000, 27144, -1000, -1000,
	33544, 1884, 1884, -1000, -1000, 2119, -1000, -1000, -1000, -1000,
	2117, -1000, -1000, -1000, 1468, -1000, 50184, 1045, 8504, -1000,
	2278, -1000, 50184, -1000, 3220, -1000, 328, 1465, 316, 792,
	316, 792, 316, 792, 316, 792, 369, -1000, -1000, -1000,
	1430, 11725, -1000, -1000, 1391, -1000, -1000, -1000, 2849, 2113,
	212, 199, 3493, -1000, 2366, 3492, 2366, 2366, -1000, 181,
	-141, 795, -1000, -1000, -1000, -1000, -1000, -312, -1000, 2375,
	-1000, -1000, -1000, -1000, 1834, 1834, 2372, 2371, 528, -1000,
	-1000, 1834, 1834, 1834, 1834, 32904, 605, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 598, 55528, -1000, 8504, 1389, -1000,
	2063, -1000, 861, -1000, -1000, 3216, 3215, 3540, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2848, 2580,
	-1000, 50184, 3428, 26504, 187, -1000, -1000, -1000, 2369, -1000,
	2366, -1000, -1000, 1820, -152, -1000, -1000, -289, 2110, 2094,
	-1000, -1000, 50184, 2092, 2073, 2069, 2362, -1000, 50184, 597,
	-1000, 55528, 1367, -1000, 8504, -1000, -1000, 3542, -1000, 3536,
	1032, 1032, 316, 316, 316, 316, 11725, -1000, -1000, -1000,
	50184, -1000, 1348, -1000, -1000, -1000, 1619, -1000, -1000, -1000,
	-1000, 2335, -159, -1000, -1000, 2298, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1313, 2846, -1000, -1000, -1000, -1000, -1000,
	2148, 718, -1000, 2405, 1263, -1000, 1795, -1000, 32264, 50184,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 50184,
	7861, -1000, 1601, -1000, -1000, 2063, 50184, -1000,
}

var yyPgo = [...]int{
	0, 174, 3603, 238, 179, 4227, 104, 242, 337, 331,
	241, 240, 4226, 4225, 4224, 3350, 3343, 4223, 4222, 4221,
	4220, 4219, 4198, 4197, 4196, 4190, 4184, 4183, 4182, 4181,
	4180, 4177, 4176, 4175, 4174, 4173, 4172, 4171, 4170, 4168,
	4167, 4166, 4165, 4164, 4163, 4162, 4161, 239, 4160, 4159,
	4158, 4157, 4156, 4155, 4150, 4144, 4143, 4140, 4139, 4138,
	4137, 4134, 4128, 4127, 4126, 4125, 4123, 4121, 4119, 4117,
	4116, 4115, 4114, 4113, 4112, 4111, 4110, 4109, 4104, 4103,
	4102, 4101, 4100, 4098, 4097, 261, 4096, 3342, 4091, 4090,
	4087, 4086, 4085, 4081, 4079, 4078, 4076, 4075, 4074, 400,
	4073, 4071, 4070, 4068, 4067, 4066, 4062, 4061, 4060, 4059,
	4058, 4057, 4056, 386, 4050, 4049, 4046, 4043, 244, 4038,
	364, 4037, 172, 159, 4035, 4032, 4031, 4030, 4027, 4025,
	4024, 4009, 4008, 4004, 4003, 4002, 4001, 4000, 232, 212,
	75, 3999, 49, 3998, 3995, 218, 3994, 150, 3993, 144,
	3990, 3988, 3986, 3984, 3982, 3980, 3978, 3976, 3975, 3974,
	3973, 3972, 3971, 3969, 3964, 3963, 3962, 3961, 3959, 3958,
	3956, 3955, 3954, 3951, 55, 3947, 258, 3946, 79, 3945,
	181, 3944, 78, 3942, 54, 146, 247, 2713, 264, 3941,
	191, 3940, 3939, 246, 177, 3938, 3936, 274, 3935, 166,
	224, 158, 105, 116, 3933, 133, 3932, 262, 48, 35,
	253, 155, 3931, 3930, 60, 164, 123, 3929, 215, 109,
	119, 3927, 3926, 151, 3925, 230, 186, 3924, 110, 3922,
	3920, 3919, 22, 3917, 3914, 198, 204, 3913, 3912, 102,
	3909, 3908, 67, 131, 3906, 82, 128, 176, 118, 3905,
	2391, 120, 86, 3903, 136, 106, 3900, 99, 3898, 3897,
	3895, 3893, 188, 3892, 3891, 149, 64, 3889, 3886, 3885,
	68, 3884, 80, 3883, 31, 3876, 61, 3875, 3874, 3871,
	3870, 3869, 3866, 3864, 3863, 3862, 3861, 3859, 3858, 57,
	3856, 3855, 3853, 3852, 7, 12, 15, 3851, 28, 3850,
	206, 3848, 3846, 175, 3845, 194, 3844, 3843, 100, 90,
	3842, 96, 168, 3841, 10, 29, 77, 3839, 3838, 3835,
	148, 3834, 3832, 3831, 265, 3830, 3828, 3827, 165, 3826,
	3823, 3822, 469, 3821, 3820, 3818, 3817, 3816, 3815, 275,
	3813, 1, 217, 47, 3811, 130, 140, 3810, 41, 33,
	3809, 50, 125, 211, 137, 103, 3807, 3802, 3801, 570,
	203, 107, 39, 0, 101, 219, 157, 3800, 3794, 3793,
	252, 3792, 233, 216, 235, 269, 260, 251, 3791, 3790,
	62, 3789, 167, 30, 56, 141, 336, 25, 205, 3788,
	711, 9, 185, 3787, 209, 3786, 8, 16, 53, 152,
	3785, 3784, 37, 255, 3782, 3781, 3780, 129, 3777, 3775,
	250, 81, 3774, 3772, 3769, 3768, 3767, 42, 3766, 183,
	19, 3765, 142, 3764, 254, 3763, 208, 147, 187, 184,
	154, 221, 226, 84, 88, 3762, 1909, 160, 112, 17,
	3761, 222, 3760, 197, 132, 3757, 92, 3756, 236, 263,
	207, 3755, 182, 11, 51, 40, 32, 45, 13, 348,
	196, 3754, 3753, 23, 52, 3752, 58, 3751, 21, 3750,
	3748, 43, 3746, 69, 5, 3745, 3744, 20, 18, 3743,
	38, 210, 178, 121, 98, 70, 3742, 3741, 162, 135,
	3740, 156, 145, 163, 3738, 83, 3737, 3736, 3735, 3733,
	3112, 249, 3732, 3731, 3728, 3727, 3726, 3725, 3724, 3722,
	214, 3719, 111, 44, 3715, 3714, 3713, 3712, 87, 161,
	3711, 3710, 3709, 3708, 34, 138, 3707, 14, 3706, 26,
	24, 36, 3692, 108, 3691, 3, 189, 3689, 3688, 4,
	3673, 3671, 2, 3670, 3667, 115, 3665, 91, 27, 171,
	113, 3664, 3663, 97, 213, 143, 3661, 3660, 93, 248,
	200, 3659, 95, 231, 256, 3657, 201, 3656, 3654, 3651,
	3650, 3649, 1245, 3647, 3636, 237, 74, 85, 3634, 220,
	122, 3631, 3628, 89, 169, 124, 134, 59, 94, 3627,
	117, 202, 3626, 195, 3624, 257, 3623, 3619, 114, 3618,
	3617, 3616, 3615, 190, 3614, 3613, 192, 229, 3612, 3611,
	259, 3610, 3609, 3607, 3606, 3605, 3599, 3597, 3595, 3593,
	3587, 266, 296, 3584,
}

//line mysql_sql.y:13041
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectOptionUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectOptionsUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 616, 619, 619, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 128,
	128, 354, 354, 355, 355, 130, 350, 350, 349, 349,
	131, 132, 133, 595, 595, 134, 135, 165, 594, 594,
	594, 594, 594, 167, 167, 167, 167, 167, 167, 167,
	471, 129, 129, 129, 129, 129, 171, 171, 171, 171,
	171, 127, 601, 601, 601, 602, 602, 124, 154, 153,
	156, 156, 155, 155, 152, 152, 148, 151, 151, 150,
	150, 149, 144, 146, 146, 145, 147, 147, 125, 113,
	126, 544, 544, 543, 543, 542, 542, 496, 496, 497,
	497, 341, 341, 341, 541, 541, 541, 540, 540, 539,
	539, 538, 538, 536, 536, 537, 535, 534, 534, 534,
	532, 532, 532, 528, 528, 530, 529, 529, 531, 523,
	523, 526, 526, 524, 524, 524, 524, 527, 522, 522,
	522, 521, 521, 112, 112, 112, 438, 438, 111, 111,
	452, 452, 452, 452, 452, 450, 450, 450, 450, 450,
	450, 449, 449, 448, 448, 453, 453, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 100, 100,
	100, 100, 100, 100, 100, 107, 105, 105, 105, 106,
	607, 607, 606, 606, 608, 608, 608, 608, 609, 609,
	103, 103, 103, 104, 447, 447, 447, 101, 102, 102,
	437, 437, 442, 442, 441, 441, 441, 441, 441, 441,
	441, 441, 441, 441, 441, 441, 441, 446, 446, 446,
	444, 444, 443, 443, 445, 445, 91, 91, 91, 91,
	91, 91, 95, 96, 97, 97, 97, 97, 94, 93,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 92,
	92, 92, 92, 92, 92, 86, 86, 86, 86, 86,
	85, 85, 87, 87, 434, 434, 433, 108, 108, 109,
	604, 604, 603, 605, 605, 605, 605, 110, 116, 116,
	116, 116, 116, 116, 116, 116, 115, 115, 118, 118,
	117, 119, 99, 99, 99, 99, 99, 99, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 569, 569, 569, 569, 570, 570,
	368, 369, 620, 371, 367, 367, 367, 565, 565, 566,
	567, 568, 568, 568, 114, 14, 224, 224, 470, 470,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	13, 84, 89, 89, 90, 304, 304, 305, 299, 299,
	306, 306, 170, 307, 307, 307, 312, 312, 313, 313,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 284, 284, 284, 279, 279, 279, 279, 279,
	280, 280, 281, 281, 282, 282, 282, 282, 283, 283,
	360, 360, 308, 308, 308, 310, 310, 309, 303, 301,
	301, 301, 301, 301, 301, 301, 302, 302, 302, 302,
	302, 311, 311, 82, 88, 88, 88, 88, 582, 582,
	83, 83, 83, 593, 593, 500, 500, 382, 382, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 505, 506, 378, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 79, 80, 81, 54,
	57, 58, 169, 172, 172, 172, 172, 53, 53, 53,
	423, 423, 52, 621, 621, 353, 353, 67, 66, 56,
	68, 69, 70, 71, 72, 73, 51, 65, 65, 65,
	65, 65, 65, 65, 65, 76, 517, 517, 623, 623,
	623, 74, 75, 499, 499, 499, 64, 63, 62, 61,
	60, 60, 50, 50, 49, 49, 55, 160, 59, 161,
	161, 375, 375, 375, 377, 377, 373, 622, 622, 466,
	466, 376, 376, 48, 48, 48, 48, 77, 374, 374,
	352, 372, 372, 372, 12, 12, 10, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 26, 27, 29, 431, 431, 428,
	28, 20, 19, 19, 23, 22, 18, 18, 21, 24,
	25, 25, 9, 9, 9, 9, 15, 15, 16, 194,
	194, 251, 251, 576, 576, 572, 572, 573, 573, 573,
	574, 574, 575, 575, 120, 511, 511, 511, 511, 511,
	511, 8, 8, 219, 219, 510, 510, 510, 510, 510,
	510, 435, 435, 435, 554, 554, 554, 555, 218, 218,
	211, 211, 512, 512, 399, 556, 556, 520, 520, 519,
	519, 518, 518, 216, 216, 217, 217, 197, 197, 139,
	139, 525, 525, 525, 525, 533, 533, 495, 495, 289,
	289, 343, 343, 344, 344, 184, 184, 185, 185, 185,
	185, 185, 185, 610, 610, 611, 612, 613, 613, 614,
	614, 614, 615, 615, 615, 615, 615, 562, 562, 564,
	564, 563, 215, 215, 209, 209, 210, 210, 210, 208,
	208, 207, 206, 206, 205, 203, 203, 203, 204, 204,
	204, 223, 223, 187, 187, 187, 186, 186, 186, 186,
	186, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 188, 191, 191, 192, 192, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 321, 321,
	322, 322, 322, 322, 322, 137, 137, 504, 504, 320,
	320, 189, 189, 190, 190, 190, 190, 319, 319, 318,
	202, 202, 201, 200, 200, 200, 195, 195, 195, 195,
	195, 196, 330, 330, 329, 329, 328, 328, 328, 328,
	331, 123, 136, 136, 138, 222, 222, 213, 212, 327,
	326, 326, 326, 326, 221, 221, 220, 220, 214, 214,
	199, 199, 199, 199, 325, 198, 323, 600, 600, 599,
	599, 598, 596, 596, 596, 597, 597, 597, 597, 546,
	546, 546, 546, 546, 361, 361, 361, 366, 366, 364,
	364, 364, 364, 364, 370, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 39, 234, 235,
	40, 236, 236, 237, 237, 238, 238, 239, 240, 241,
	241, 241, 241, 415, 415, 38, 225, 225, 226, 226,
	227, 227, 228, 229, 229, 229, 233, 230, 231, 231,
	618, 618, 617, 37, 37, 30, 175, 175, 176, 176,
	176, 178, 178, 285, 285, 285, 177, 177, 179, 179,
	179, 577, 579, 579, 581, 580, 580, 580, 583, 583,
	583, 583, 583, 584, 584, 584, 584, 585, 585, 31,
	157, 157, 182, 182, 162, 588, 588, 588, 587, 587,
	589, 589, 590, 590, 347, 347, 348, 348, 173, 174,
	174, 164, 159, 181, 181, 181, 181, 181, 183, 183,
	253, 253, 158, 163, 166, 168, 578, 586, 586, 586,
	432, 432, 429, 430, 430, 427, 426, 426, 426, 592,
	592, 591, 591, 591, 362, 362, 32, 422, 422, 424,
	425, 425, 425, 416, 416, 416, 416, 36, 420, 420,
	421, 421, 421, 421, 421, 421, 421, 421, 421, 421,
	421, 417, 417, 419, 419, 414, 414, 414, 414, 414,
	414, 414, 414, 35, 35, 35, 180, 180, 413, 413,
	410, 410, 232, 232, 408, 408, 409, 409, 407, 407,
	407, 411, 411, 43, 78, 44, 45, 46, 42, 412,
	412, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 141, 140, 140, 140, 140, 140, 143,
	143, 346, 346, 345, 345, 142, 286, 286, 41, 264,
	264, 487, 487, 482, 482, 482, 482, 482, 502, 502,
	502, 483, 483, 483, 484, 484, 484, 486, 486, 486,
	485, 485, 485, 485, 485, 501, 501, 503, 503, 503,
	454, 454, 455, 455, 455, 458, 458, 474, 474, 475,
	475, 473, 473, 480, 480, 479, 479, 478, 478, 477,
	477, 476, 476, 476, 476, 469, 469, 468, 468, 456,
	456, 456, 456, 456, 457, 457, 457, 467, 467, 472,
	472, 317, 317, 316, 316, 272, 272, 273, 273, 315,
	315, 270, 270, 271, 271, 271, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 552, 552, 553, 275, 275, 287, 287, 287,
	287, 287, 287, 274, 274, 276, 276, 252, 252, 250,
	250, 242, 242, 242, 242, 242, 242, 243, 243, 244,
	244, 245, 245, 245, 249, 249, 248, 248, 248, 248,
	246, 246, 247, 247, 247, 247, 247, 247, 440, 440,
	549, 549, 550, 550, 545, 545, 545, 548, 548, 548,
	548, 548, 548, 548, 548, 551, 551, 551, 547, 547,
	254, 340, 340, 340, 363, 363, 363, 363, 365, 339,
	339, 339, 269, 269, 268, 268, 266, 266, 266, 266,
	266, 266, 266, 266, 266, 266, 266, 266, 266, 266,
	266, 266, 266, 266, 266, 266, 266, 266, 439, 439,
	379, 379, 380, 380, 298, 297, 297, 297, 297, 297,
	295, 296, 294, 294, 294, 294, 294, 291, 291, 290,
	290, 290, 292, 292, 292, 292, 292, 418, 418, 288,
	288, 278, 278, 278, 277, 277, 277, 481, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 388, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 293, 337,
	337, 337, 338, 338, 338, 338, 338, 338, 338, 338,
	389, 389, 395, 395, 561, 561, 560, 255, 255, 255,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 265,
	265, 265, 463, 463, 463, 463, 464, 464, 464, 464,
	465, 465, 465, 461, 461, 462, 462, 400, 401, 401,
	508, 508, 509, 509, 459, 459, 460, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	516, 516, 516, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 571,
	571, 571, 557, 557, 557, 558, 558, 558, 558, 558,
	558, 558, 558, 558, 558, 558, 558, 559, 559, 559,
	559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
	559, 559, 559, 559, 335, 335, 335, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 402, 402, 403, 403, 513,
	513, 513, 513, 513, 513, 514, 514, 515, 515, 515,
	515, 507, 507, 507, 507, 507, 507, 507, 507, 507,
	507, 507, 507, 507, 507, 507, 507, 507, 507, 507,
	507, 507, 507, 507, 507, 507, 507, 507, 507, 507,
	507, 387, 332, 332, 332, 404, 396, 396, 397, 397,
	398, 398, 390, 390, 390, 390, 390, 390, 391, 391,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 392, 392, 394, 394, 406, 406, 406, 405,
	405, 405, 405, 405, 405, 405, 267, 267, 267, 267,
	384, 384, 384, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 257, 257, 257, 257, 261,
	261, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 262, 262, 262, 262, 262,
	260, 260, 260, 260, 260, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 121, 122, 122, 259, 342, 342,
	488, 488, 491, 491, 489, 489, 490, 492, 492, 492,
	493, 493, 493, 494, 494, 494, 498, 498, 351, 351,
	351, 359, 359, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	1, 2, 3, 10, 10, 11, 11, 12, 8, 13,
	1, 5, 6, 8, 10, 9, 5, 7, 9, 8,
	6, 4, 0, 1, 1, 0, 1, 5, 2, 2,
	6, 9, 6, 9, 4, 7, 8, 0, 1, 1,
	2, 4, 6, 1, 2, 4, 0, 2, 10, 11,
	2, 0, 2, 1, 3, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 3,
	0, 3, 3, 0, 1, 3, 0, 1, 3, 0,
	2, 1, 2, 3, 4, 3, 3, 1, 0, 1,
	1, 0, 1, 8, 5, 7, 0, 3, 8, 5,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 1, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 3, 4, 4, 5,
	1, 3, 3, 1, 2, 2, 2, 1, 2, 2,
	3, 4, 4, 6, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 3, 4, 5, 4, 2, 2,
	0, 1, 4, 2, 4, 1, 5, 3, 2, 1,
	2, 2, 4, 4, 5, 2, 1, 3, 4, 4,
	1, 2, 9, 7, 1, 3, 3, 1, 1, 3,
	1, 3, 2, 1, 2, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 2, 4,
	3, 3, 1, 1, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 3, 4, 4, 5,
	3, 4, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	1, 1, 1, 1, 6, 4, 1, 1, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	10, 7, 4, 4, 3, 1, 3, 3, 1, 3,
	1, 6, 7, 3, 3, 3, 1, 1, 1, 3,
	2, 4, 5, 5, 6, 5, 5, 3, 2, 2,
	1, 3, 4, 3, 7, 5, 8, 2, 2, 1,
	3, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 2, 1, 3, 2, 1, 2,
	2, 1, 2, 3, 2, 2, 3, 6, 3, 3,
	3, 1, 1, 7, 7, 7, 8, 8, 0, 4,
	7, 6, 6, 0, 3, 0, 2, 0, 1, 1,
	1, 1, 4, 2, 2, 3, 3, 4, 5, 3,
	4, 4, 2, 2, 2, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 4,
	3, 3, 3, 4, 5, 6, 5, 2, 5, 5,
	0, 2, 7, 0, 1, 0, 1, 5, 5, 3,
	3, 2, 4, 4, 4, 4, 4, 1, 1, 1,
	3, 3, 1, 1, 1, 6, 0, 1, 1, 1,
	1, 5, 5, 0, 1, 1, 3, 3, 3, 4,
	7, 7, 5, 4, 7, 8, 3, 3, 2, 3,
	4, 0, 2, 2, 0, 2, 2, 1, 1, 1,
	1, 0, 1, 5, 5, 6, 4, 3, 1, 3,
	1, 1, 3, 5, 2, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 4, 4, 1, 3, 1,
	4, 6, 6, 4, 4, 4, 4, 4, 3, 6,
	3, 5, 1, 1, 2, 2, 11, 8, 9, 1,
	3, 2, 4, 0, 2, 0, 1, 1, 1, 1,
	0, 1, 0, 1, 4, 2, 1, 5, 4, 4,
	2, 5, 5, 1, 3, 2, 1, 5, 4, 4,
	2, 0, 5, 4, 0, 1, 3, 3, 1, 3,
	1, 3, 1, 3, 4, 0, 1, 0, 1, 1,
	3, 1, 1, 0, 4, 1, 3, 2, 1, 0,
	8, 0, 4, 7, 4, 0, 2, 0, 2, 0,
	2, 0, 4, 1, 3, 1, 1, 6, 4, 5,
	7, 4, 5, 0, 1, 3, 8, 0, 6, 0,
	4, 6, 1, 1, 1, 1, 1, 2, 3, 1,
	3, 6, 0, 3, 0, 1, 2, 4, 4, 0,
	1, 3, 1, 3, 3, 0, 1, 1, 0, 2,
	2, 0, 2, 3, 3, 3, 1, 3, 3, 3,
	3, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 7, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 4, 7, 6, 6, 3, 5, 0, 2, 0,
	2, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 3, 1, 1, 1, 1, 4, 4, 4, 3,
	4, 3, 2, 2, 2, 2, 2, 3, 2, 3,
	2, 4, 1, 3, 4, 0, 2, 1, 3, 1,
	1, 2, 2, 3, 0, 1, 2, 4, 1, 3,
	1, 3, 2, 3, 1, 4, 3, 0, 1, 1,
	2, 5, 2, 2, 2, 0, 2, 3, 3, 0,
	1, 3, 1, 3, 0, 1, 2, 1, 1, 0,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 1,
	9, 1, 3, 0, 1, 1, 3, 1, 3, 0,
	1, 1, 1, 0, 2, 14, 1, 3, 0, 1,
	1, 3, 1, 1, 2, 4, 1, 1, 1, 1,
	0, 1, 2, 9, 9, 7, 1, 2, 3, 3,
	3, 0, 4, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 4, 1, 1, 1, 3, 3,
	4, 3, 3, 0, 1, 1, 1, 0, 2, 7,
	8, 10, 2, 2, 8, 0, 3, 3, 0, 3,
	0, 3, 0, 5, 1, 3, 0, 3, 3, 0,
	2, 9, 8, 0, 2, 2, 3, 3, 0, 2,
	0, 2, 4, 4, 4, 5, 1, 0, 2, 2,
	1, 3, 2, 1, 3, 2, 1, 3, 2, 0,
	1, 3, 4, 3, 1, 1, 4, 1, 3, 1,
	1, 1, 1, 0, 1, 1, 1, 11, 0, 2,
	3, 3, 2, 2, 3, 1, 1, 3, 3, 3,
	3, 1, 3, 3, 4, 0, 2, 2, 2, 2,
	2, 2, 2, 6, 7, 10, 0, 4, 1, 1,
	0, 3, 0, 1, 0, 1, 1, 2, 4, 4,
	4, 0, 1, 8, 2, 4, 4, 4, 9, 0,
	2, 11, 9, 11, 8, 6, 9, 7, 10, 7,
	6, 7, 10, 2, 2, 9, 4, 5, 3, 0,
	4, 1, 3, 0, 3, 6, 0, 2, 10, 0,
	2, 0, 2, 0, 3, 2, 4, 3, 0, 2,
	1, 0, 2, 3, 0, 2, 3, 0, 2, 1,
	0, 3, 2, 4, 3, 0, 1, 0, 1, 1,
	0, 6, 0, 3, 5, 0, 4, 0, 3, 1,
	3, 4, 5, 0, 3, 1, 3, 2, 3, 1,
	2, 0, 4, 6, 5, 0, 2, 0, 2, 4,
	5, 4, 5, 1, 5, 6, 5, 0, 3, 0,
	1, 1, 3, 3, 3, 0, 4, 1, 3, 3,
	3, 0, 1, 1, 3, 2, 3, 3, 3, 4,
	4, 3, 3, 3, 3, 4, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 5,
	4, 5, 1, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	4, 0, 5, 5, 5, 5, 6, 0, 1, 1,
	3, 1, 1, 1, 1, 1, 7, 9, 7, 9,
	2, 1, 7, 9, 7, 9, 8, 5, 0, 1,
	0, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	3, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 2, 1, 2, 2, 1,
	1, 2, 2, 2, 3, 3, 2, 2, 1, 5,
	6, 4, 1, 1, 1, 5, 4, 1, 1, 2,
	0, 1, 1, 2, 5, 0, 1, 1, 2, 2,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 2,
	2, 2, 0, 4, 7, 3, 3, 0, 3, 0,
	3, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 3, 5, 2, 2, 2, 2,
	4, 1, 1, 2, 5, 6, 8, 6, 6, 6,
	1, 1, 1, 1, 1, 1, 3, 9, 1, 4,
	4, 4, 7, 9, 7, 7, 7, 9, 7, 7,
	0, 2, 0, 1, 1, 2, 4, 1, 2, 2,
	1, 2, 2, 1, 2, 2, 2, 2, 2, 0,
	1, 1, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 5, 0, 1, 3, 0, 1,
	0, 2, 0, 2, 0, 1, 6, 8, 8, 6,
	6, 5, 5, 5, 6, 6, 6, 6, 5, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	1, 1, 1, 4, 4, 6, 8, 6, 4, 5,
	4, 4, 4, 3, 4, 6, 6, 7, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 8, 4, 2, 3,
	2, 4, 2, 2, 4, 6, 2, 2, 4, 6,
	4, 2, 4, 4, 4, 0, 1, 2, 3, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 3, 0, 1, 1, 3,
	1, 3, 3, 3, 3, 3, 2, 1, 1, 1,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	1, 3, 4, 4, 5, 4, 5, 3, 4, 5,
	6, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 2, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 4, 4, 1, 2, 3, 5, 1, 1, 3,
	0, 1, 0, 3, 0, 3, 3, 0, 3, 5,
	0, 3, 5, 0, 1, 1, 0, 1, 1, 2,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -616, -619, -2, -5, 638, -1, -4, -122, -91,
	-7, -14, -124, -125, -8, -120, -9, -10, -12, -98,
	-115, -117, -119, -118, -47, -11, -114, -85, -86, -100,
	-108, -111, -112, -113, -126, -121, -123, -184, -127, -128,
	-129, -171, -132, -134, -135, 628, -92, -93, -94, -95,
	-96, -97, -33, -32, -31, -30, -157, -162, -165, -167,
	-130, 561, 634, 464, 14, 513, -15, -16, -562, -17,
	267, -367, -368, -369, -371, -620, -48, -49, -50, -60,
	-61, -62, -63, -64, -74, -75, -76, -51, -52, -53,
	-56, -54, -67, -66, -68, -69, -70, -71, -72, -73,
	-55, -59, -160, -161, -77, -57, -78, -58, -169, -172,
	-131, -79, -80, -81, -83, -82, -88, -84, -89, -159,
	-164, -13, -170, -90, 241, -87, 77, -101, -102, -103,
	-104, -105, -106, -107, -109, -110, 388, 394, 451, 627,
	62, -185, -187, 657, 658, 661, 548, 551, 163, 164,
	166, 167, 171, 174, -34, -35, -36, -37, -38, -39,
	-41, -40, -42, -43, -44, -45, -46, 237, 16, 556,
	-18, -21, -19, -22, -20, -28, -29, -27, -24, -26,
	-158, -25, -163, -23, -166, -168, -133, 262, 261, 39,
	328, 329, 330, 392, 260, 238, 240, 15, 32, 43,
	367, -186, 86, 549, 239, -188, 13, 663, -6, -3,
	-2, -144, -148, -152, -155, -156, -153, -154, -4, -122,
	121, 252, 629, -363, 384, 630, 632, 631, 89, 97,
	-356, -358, 464, 267, 388, 394, 627, 658, 661, 548,
	551, 563, 564, 565, 566, 567, 568, 569, 570, 572,
	573, 574, 575, 576, 577, 578, 588, 589, 579, 580,
	581, 582, 583, 584, 585, 586, 590, 591, 592, 593,
	594, 595, 596, 597, 598, 599, 600, 601, 602, 603,
	516, 613, 614, 615, 616, 544, 571, 607, 608, 609,
	610, 365, 366, 553, 279, 303, 419, 309, 316, 163,
	183, 177, 206, 197, 549, 172, 283, 321, 284, 96,
	166, 499, 111, 476, 448, 169, 298, 300, 302, 545,
	546, 378, 305, 543, 304, 306, 308, 547, 285, 368,
	193, 188, 297, 281, 186, 286, 41, 287, 361, 360,
	211, 288, 289, 558, 472, 364, 478, 313, 53, 446,
	187, 473, 301, 475, 215, 219, 490, 351, 491, 181,
	182, 480, 493, 210, 213, 214, 259, 357, 358, 44,
	555, 271, 494, 217, 653, 209, 204, 502, 317, 315,
	362, 208, 180, 203, 282, 66, 221, 220, 222, 442,
	443, 444, 445, 290, 291, 382, 489, 200, 189, 369,
	173, 23, 497, 266, 477, 395, 292, 310, 318, 216,
	218, 273, 278, 333, 557, 450, 363, 277, 314, 495,
	185, 270, 299, 265, 498, 654, 174, 397, 293, 167,
	307, 492, 656, 501, 65, 410, 179, 170, 645, 646,
	256, 164, 275, 280, 655, 294, 295, 296, 542, 320,
	319, 311, 171, 550, 201, 272, 207, 191, 178, 202,
	165, 274, 500, 411, 625, 367, 429, 199, 196, 276,
	249, 496, 479, 168, 433, 412, 194, 322, 620, 621,
	622, 383, 356, 323, 324, 192, 263, 470, 471, 327,
	439, 346, 413, 449, 420, 414, 228, 229, 331, 482,
	484, 212, 623, 335, 336, 337, 474, 338, 339, 340,
	341, 387, 57, 59, 98, 101, 100, 659, 660, 64,
	30, 373, 376, 408, 415, 348, 626, 554, 345, 349,
	350, 377, 26, 431, 399, 435, 434, 49, 50, 51,
	54, 55, 56, 58, 60, 61, 52, 541, 392, 405,
	503, 46, 48, 402, 28, 379, 430, 452, 344, 432,
	463, 47, 461, 462, 483, 27, 381, 380, 63, 45,
	438, 440, 441, 325, 342, 390, 635, 504, 385, 401,
	404, 386, 347, 375, 406, 68, 67, 398, 636, 393,
	391, 343, 559, 560, 352, 587, 370, 447, 538, 537,
	536, 535, 534, 533, 532, 531, 328, 329, 330, 416,
	417, 418, 428, 421, 422, 423, 424, 425, 426, 427,
	466, 467, 637, 485, 487, 488, 486, 244, 662, 371,
	372, 247, 639, 640, 99, 641, 643, 642, 29, 644,
	652, 649, 650, 651, 562, 232, 647, -445, -443, -363,
	549, 627, 394, 548, 551, 388, 367, 658, 661, 392,
	267, 328, 329, 330, 464, 365, -236, -363, 662, -197,
	251, 40, -250, -363, -197, -87, -16, -15, -186, -187,
	-250, 246, -372, 24, 446, -99, 447, 241, 242, 86,
	78, -363, -9, -113, -8, -120, -85, -184, 451, -370,
	-363, 328, 328, -370, 246, -365, 277, 427, -363, -500,
	252, -449, -422, 278, -448, -424, -451, -425, 33, 237,
	239, 238, 561, 274, 16, 392, 248, 14, 13, 393,
	260, 26, 27, 29, 15, 394, 396, 30, 397, 400,
	401, 402, 43, 405, 406, 267, 89, 97, 92, 285,
	-235, -363, -398, -390, 118, -393, -385, -386, -388, -341,
	-536, -383, 86, 145, 146, 153, 119, 664, -387, -481,
	37, 121, 567, 571, 607, 514, -333, -334, -335, -336,
	-337, -338, 552, -363, -537, -535, 92, 102, 104, 108,
	109, 107, 105, 157, 190, 106, 93, 158, -187, 89,
	-557, 577, -357, 600, 613, 614, 615, 616, 599, 62,
	-507, -515, 245, -513, 156, 195, 263, 191, 14, 151,
	439, 192, 608, 609, 610, 574, 596, 516, 578, 588,
	603, 569, 570, 572, 564, 565, 566, 568, 579, 581,
	595, -516, 591, 601, 602, 587, 611, 612, 649, 604,
	605, 606, 643, 91, 90, 594, 593, 580, 575, 576,
	582, 563, 573, 583, 584, 592, 597, 598, 376, 111,
	377, 378, 506, 368, 81, 379, 252, 446, 71, 380,
	381, 382, 383, 384, 513, 385, 72, 386, 375, 267,
	429, 387, 194, 212, 518, 517, 519, 510, 507, 505,
	508, 509, 511, 512, 585, 586, 590, -136, -138, 618,
	-610, -324, -611, 6, 7, 8, 9, -612, 158, -601,
	448, 557, 92, 321, 365, 17, 506, 648, 547, 648,
	547, 168, 165, -436, 168, 117, 174, 173, 250, 168,
	-436, -363, 171, 648, 170, 645, 331, -412, -175, 365,
	429, 338, 98, 277, -416, -413, 545, -501, 325, 321,
	297, 247, 114, -176, 257, 256, 112, 506, 245, 403,
	316, 57, 59, -572, -573, 234, 235, 236, -564, 539,
	-563, -363, 648, 653, 378, 100, 101, 645, 646, 28,
	246, 389, 273, 484, 482, 483, 485, 486, 487, 488,
	-65, -517, -499, 479, 478, -376, 471, 477, 469, 481,
	472, 366, 340, 561, 339, 237, 639, 546, 540, -351,
	413, 449, 503, 504, 390, 450, 490, 492, 473, 111,
	198, 195, 247, 249, 246, 645, 365, 506, 429, 98,
	338, 246, -572, 653, 165, 490, 492, 448, 277, 427,
	42, -442, 439, -441, -443, 491, 502, 90, 91, 489,
	-351, 111, 470, 470, -610, -324, -185, -187, -123, -562,
	547, 648, 247, 365, 429, 277, 248, 246, 542, 545,
	249, 506, 245, 328, 389, 273, 338, 98, 170, 645,
	-191, -192, -193, 230, 231, 232, 70, 235, 233, 67,
	33, 34, 35, -1, 125, 663, -390, -390, -6, 666,
	-6, -390, -363, -363, 160, -257, -261, -258, -260, -259,
	-263, -262, 195, 196, 156, 199, 205, 201, 202, 203,
	204, 206, 207, 208, 209, 210, 213, 214, 211, 32,
	212, 263, 191, 192, 193, 194, 215, 177, 197, 554,
	223, 178, 224, 179, 225, 180, 226, 181, 182, 227,
	183, 186, 187, 188, 189, 185, 159, -224, 92, 33,
	86, 159, 92, -216, 269, -197, -250, -242, 159, 664,
	-216, -610, -207, -208, 11, -250, -339, -363, 448, 128,
	-99, 78, -99, 447, 78, -99, 447, 241, -565, -566,
	-567, -569, 241, 447, 446, 242, -118, 159, 285, 17,
	-370, -370, 84, -250, -424, 277, -449, -422, 37, 83,
	160, 250, 160, 83, 86, 390, 365, 429, 391, 506,
	246, 403, 249, 277, 404, 365, 429, 246, 249, 506,
	277, 365, 246, 249, 429, 277, 404, 365, 469, 470,
	249, 28, 395, 398, 399, 470, -521, 502, 160, 117,
	114, 115, 116, -390, 135, -405, 128, 129, 130, 131,
	132, 133, 134, 142, 141, 152, 145, 146, 147, 148,
	149, 150, 151, 143, 144, 138, 118, 136, 140, 137,
	120, 155, -187, -390, -398, 62, -388, -388, -388, -388,
	-363, -481, -395, -390, 86, 86, 86, 86, 86, 159,
	105, 92, -390, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, -514, 86, 86, -402, -403,
	86, 86, -383, -339, 86, 92, 92, 86, 86, 86,
	92, 86, 86, 86, -403, -403, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, -208, 160, -207, 86, -207, -208, -188, -187,
	33, 34, 33, 34, 33, 34, 33, 34, -613, 636,
	86, 102, 659, 228, 17, -363, 645, -363, -595, 33,
	550, 550, 550, 550, 495, 556, 172, 173, 174, -363,
	171, 250, -363, -410, 252, -410, -410, -234, -363, 273,
	389, 249, 542, 249, -176, -410, -410, -410, -410, -410,
	248, -410, 24, 246, 246, 246, 246, -410, 513, 128,
	128, 60, -574, 176, 160, -564, -215, 86, -595, 654,
	655, 656, -375, 136, 140, -375, -320, 18, -320, 24,
	24, 275, 275, 275, -375, 315, -621, -622, 17, 138,
	-373, -622, -373, -373, -375, -623, 248, 480, 44, 276,
	275, -209, -210, 22, -209, 474, 470, -466, 475, 476,
	-377, -622, -376, -375, -375, -376, -375, -375, -375, 33,
	246, 249, 506, 338, 640, -621, -621, 32, 32, -500,
	-500, -250, -500, -500, 540, -352, -363, -500, -500, -500,
	-304, -305, -250, -575, 251, 656, -607, -606, 493, -609,
	495, 165, -443, 165, -443, 89, -424, 277, 277, 160,
	128, 24, -444, 128, 139, -443, -443, -444, -444, -274,
	42, -362, 156, -363, 92, -274, 42, -604, -603, -250,
	-208, -188, -187, 87, 87, 87, 550, -595, -500, -500,
	-500, -500, -500, -501, -500, -500, -500, -500, -500, -370,
	-225, -363, -236, 252, -500, -500, -500, -500, -189, -190,
	147, -390, -363, -193, -3, -146, -145, 122, 123, 125,
	630, 384, 629, 633, 627, -443, 42, -494, 411, 410,
	-488, -490, 86, -489, 86, -489, -489, -489, -489, -489,
	86, 86, -491, 86, -491, -491, -488, -492, 86, -492,
	-493, 86, -493, -492, -363, -470, 556, -396, -398, -363,
	40, -510, 62, -184, 86, 32, 86, -216, -363, 192,
	170, 644, 36, -511, 62, -184, 86, 32, -208, -139,
	40, -210, 21, 159, 102, 92, -118, -99, 78, -118,
	-99, -99, 87, 160, -568, 108, 109, -570, 210, 201,
	-363, -116, 92, -7, -11, -8, -9, -10, -47, -85,
	-184, 548, 551, -538, -536, 86, 33, 438, 83, 17,
	-450, 246, 506, 389, 273, 249, 365, -448, -431, -428,
	-426, -362, -424, -427, -426, -453, -339, 470, -140, 453,
	452, 327, -390, -390, -390, -390, -390, 107, 118, 356,
	108, 109, -385, -406, 33, 323, 324, -386, -386, -386,
	-386, -386, -386, -386, -386, -386, -386, -386, -386, -394,
	-404, -481, 86, 138, 136, 140, 137, 120, -388, -388,
	-386, -386, -276, -362, 156, 87, 160, -390, -561, -560,
	122, -390, -390, -390, -390, -417, -419, -339, 86, -363,
	-558, -559, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 530, 380, 375, 381, 379, 368, 387, 382,
	383, 194, 537, 538, 531, 532, 533, 534, 535, 536,
	-396, -396, -390, -558, -396, -332, 34, 33, -398, -398,
	-398, 87, -390, -571, 354, 353, 355, -211, -363, -396,
	87, 87, 87, 102, -398, -398, -396, -386, -396, -396,
	-396, -396, -559, -332, -332, -332, -332, 147, -398, -398,
	-332, -332, -332, -332, 147, -332, -332, -332, -332, -332,
	-332, -332, -332, -332, -332, -332, 87, 87, 87, 147,
	-398, -209, -138, -519, -518, -390, 42, -139, -210, -614,
	637, 86, -339, -602, 92, 92, 664, 170, 645, 17,
	506, -363, 17, 246, -363, 102, -363, 102, 496, 497,
	169, 173, 172, -363, 171, -363, -363, 118, -363, -363,
	36, -236, -225, -410, -410, -410, -579, -363, 93, -432,
	-429, -426, -363, -363, -422, -363, -352, -250, -410, -410,
	-410, -410, -250, -285, 54, 55, 56, -426, -177, 57,
	58, -575, -563, 36, -214, -363, -320, -388, -388, -390,
	365, 506, 246, -426, 277, -621, -375, -375, -353, -352,
	-377, -372, -377, -377, -320, -373, -375, -375, -390, -377,
	-373, -320, -363, 470, -320, -320, -466, -375, -374, -363,
	-374, -410, -352, -353, -353, -250, -250, -299, -306, -300,
	-307, 269, 243, 373, 374, 240, 238, 11, 239, -314,
	316, -411, 514, -280, -281, 78, 43, -283, 267, 415,
	408, 279, 283, 96, 284, 448, 285, 248, 287, 288,
	289, 304, 306, 259, 290, 291, 292, 439, 293, 164,
	305, 294, 295, 296, 391, -275, 6, 341, 556, 42,
	52, 53, 462, 461, 559, 280, -363, -579, -577, 32,
	-363, 32, -432, -426, -363, -363, 160, 250, -200, -202,
	-199, -195, -196, -201, -323, -325, -198, 86, -250, -187,
	-363, -443, 160, 494, 496, 497, -607, -444, -607, -444,
	250, 33, 438, -447, 438, 33, -422, -441, 490, 492,
	-437, 92, 439, -427, -446, 83, 156, -518, -444, -444,
	-446, -446, 155, 160, -605, 495, 496, 234, -209, 102,
	-252, -250, -579, -431, -422, -363, -500, -252, -252, -252,
	-365, -365, 86, 159, 37, -363, -363, -363, -363, -319,
	160, -318, 17, -364, -363, 36, 92, 159, -147, -145,
	124, -390, -6, 629, -390, -6, -6, -390, -6, -390,
	-498, 412, 102, 102, -342, 92, -342, 102, 102, 102,
	562, 87, 92, -435, 83, -512, -399, -556, 618, -218,
	87, -211, -554, -555, -211, -217, -363, -510, -242, 128,
	128, 128, 25, -512, -218, 87, -554, -209, 619, -139,
	-206, -205, -390, -363, 24, -118, -99, -566, 159, 160,
	-214, -450, -430, -427, -452, 147, -363, -438, 160, 556,
	667, 90, 250, -592, -591, 430, 87, 160, -522, 251,
	513, 92, 664, 446, 228, 229, 107, 356, 108, 109,
	-481, -398, -394, -388, -388, -386, -386, -392, 264, -392,
	117, -390, 665, -389, -560, 124, -390, 36, 160, 36,
	160, 84, 160, 87, -488, -390, 159, 87, 87, 17,
	17, 87, -390, 87, 87, 87, 87, 17, 17, -390,
	87, 159, 87, 87, 87, 87, 84, 87, 160, 87,
	87, 87, 87, 160, -398, -398, -390, -398, 87, 87,
	87, -390, -390, -390, -398, 87, -390, -390, -390, -390,
	-390, -390, -390, -390, -390, -390, -214, -460, 465, -460,
	-460, 160, 160, 160, 87, -139, 86, 102, 160, 660,
	-346, -345, 92, -363, -363, 170, 645, -363, 92, 645,
	-363, 92, 170, 174, 174, 173, -363, 92, 37, 24,
	24, 314, -235, 86, 86, -250, -250, -250, -581, 416,
	-593, 160, 42, -591, 506, -173, 327, -414, 84, -180,
	334, 17, 556, -250, -250, -250, -250, -264, 36, 17,
	-194, -251, -363, 86, 87, 160, -363, -363, -363, -423,
	84, -363, -353, -320, -320, -377, -320, -320, 160, 23,
	-375, -377, -377, -242, -373, -242, 159, -242, -352, -487,
	36, -215, 160, 21, 269, -249, -360, -246, -248, 254,
	-380, -247, 257, -550, 255, 253, 112, 258, 312, 113,
	248, -360, -360, 254, -284, 250, 36, -360, -302, 248,
	359, 312, 255, 21, 269, -301, 248, 113, -363, 254,
	258, 255, 253, -359, 128, -351, 155, 250, 44, 391,
	-359, 560, 269, -359, -359, -359, -359, -359, -359, -359,
	286, 286, -359, -359, -359, -359, -359, -359, -359, -359,
	-359, -359, -359, 165, -359, -359, -359, -359, -359, -359,
	86, 332, 281, 282, 314, -582, 416, 32, 371, 371,
	372, -593, 367, 43, 32, -181, 365, -305, -303, -374,
	32, -326, -327, -328, -329, -331, -330, 69, 73, 75,
	79, 70, 71, 72, 76, 81, 74, 32, 160, -361,
	-366, 36, -363, 92, -361, -187, -202, -200, -361, 86,
	-444, -606, -608, 498, 495, 501, -446, -446, 102, 250,
	86, 128, -446, -446, 42, -362, -603, 502, 496, -139,
	160, 83, -252, -226, -227, -228, -229, -257, -339, 196,
	199, 201, 202, 203, 204, 206, 207, 208, 209, 210,
	213, 214, 211, 212, 263, 191, 192, 193, 194, 215,
	177, 197, 554, 178, 179, 180, 181, 182, 183, 186,
	187, 188, 189, 185, -363, -236, -232, 647, -320, -190,
	-202, -363, 92, -363, 147, 125, -6, 123, -151, -150,
	-149, 126, 627, 633, 125, 125, 125, 87, 87, 87,
	160, 87, 87, 87, 160, 87, 160, 102, -525, 475,
	41, 160, 86, 87, 160, 62, 160, 128, 87, 160,
	-390, -363, 92, -390, 192, 87, 62, -139, 92, 160,
	-203, 38, 39, 159, 448, -363, -536, 87, -452, 160,
	250, 159, 159, -428, 394, -362, -430, 21, 556, -339,
	40, -346, 128, 664, -363, 87, -392, -392, 117, -388,
	-385, 87, 125, -390, 123, -255, -257, 410, 411, -390,
	-255, -256, -262, 156, 195, 263, 194, 193, 191, 410,
	411, -274, -419, 553, -203, 87, -363, -390, -390, 87,
	-390, -390, 17, -363, -274, -386, -390, -208, -208, 87,
	87, -459, -460, -459, -459, 87, 87, 87, 87, -459,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 86, 102, 104, 102, 104, -518, -615, 64, 635,
	63, 438, 107, 317, 160, 102, 92, 665, 160, 128,
	92, -363, -363, 17, 246, -363, 17, 174, 92, -594,
	321, 365, 506, 246, 365, 321, 506, 246, -471, 102,
	402, -237, -238, -239, -240, -241, 138, 161, 162, -226,
	-215, 86, -215, -584, 477, 418, 428, -359, -382, -381,
	367, 43, -505, 439, 424, 425, -429, 277, -352, -590,
	99, 128, 83, 345, 349, 351, 350, 346, 347, 348,
	-408, -409, -407, -411, -352, -577, 86, 86, -184, 36,
	136, -180, 334, 86, 86, 36, -482, 335, -257, -250,
	-194, -363, 17, 160, -576, 159, -1, -363, -363, -422,
	-375, -320, -390, -390, -320, -375, -375, -377, -363, -242,
	-482, -257, 36, -300, 243, 239, -456, 314, 315, -457,
	-472, 317, -474, 86, -254, -339, -247, -549, -550, -410,
	-363, 113, -549, 113, 86, -254, -339, -339, -303, -339,
	-363, -363, -363, -363, -310, -309, -339, -312, 33, -313,
	-363, -363, -363, -363, 113, -363, 113, -279, 42, 49,
	50, 51, 334, -359, -359, 198, -282, 42, 438, 440,
	441, -312, 102, 102, 102, 102, 92, 92, 92, -359,
	-359, 102, 92, -366, 92, -551, 173, 46, 47, 102,
	102, 102, 102, 42, 92, -287, 42, 297, 301, 298,
	299, 300, 92, 102, 42, 102, 42, 102, 42, -363,
	86, -552, -553, 92, 333, -471, -584, -359, 371, -443,
	128, 128, -382, -586, 96, 419, -586, -589, 327, -183,
	506, 33, -219, 243, 239, -577, -434, -433, -339, -199,
	-199, -199, -199, -199, -199, 69, 80, 69, -212, 86,
	69, 74, 69, 74, 69, -328, 69, 80, -434, -201,
	-215, -366, 87, -600, -599, -598, -596, 77, 251, 78,
	-396, -446, 495, 499, 500, -430, -378, 92, -437, -223,
	24, -250, -250, -503, 307, 308, 87, 160, -257, -322,
	19, 159, 121, -6, -147, -149, -390, -6, -390, 629,
	384, 630, 92, 102, 102, -533, 459, 454, 456, 113,
	-399, -520, -519, 62, -184, -211, -512, -555, -518, -363,
	665, 665, 665, 665, 92, 62, -184, -512, -223, -525,
	-205, -204, 45, -363, 102, 17, -427, -422, 147, 147,
	-363, 395, -438, 92, 417, 92, 246, 665, 92, -346,
	-385, -390, 87, -265, 182, 181, -265, 36, 87, 87,
	-489, -489, -488, -491, -488, -265, -265, 87, 86, -203,
	87, 24, 87, 87, 87, -390, 87, 87, 160, -508,
	515, -509, 589, -459, -459, -459, -459, -459, -459, -459,
	-459, -459, -459, -459, -459, -459, -459, -459, -459, -459,
	-401, -400, 269, 460, 642, 642, 460, 642, 642, 87,
	160, -558, 160, -354, 322, -354, -345, 92, 250, 92,
	170, -363, 92, 645, 92, -363, -363, -363, 314, -363,
	314, -363, -363, 92, 92, 87, 160, -339, 87, 36,
	-243, -244, -245, -254, -246, -248, 36, -585, 96, -580,
	92, -363, 93, -586, 158, 369, 42, 420, 421, 436,
	364, 102, 102, 426, -578, -363, -182, 246, 365, -588,
	53, 128, 92, -250, -407, -351, 155, 288, -242, 338,
	-317, -316, -363, 92, -243, -184, -250, -250, -243, -243,
	-184, -483, 337, 21, 102, 146, -216, 84, 159, -202,
	-251, -363, 147, 87, -320, -242, -320, -320, -375, -483,
	-184, -468, 318, 86, -466, 86, -466, 113, 346, -475,
	-473, 269, -308, 46, 48, -257, -547, -363, -545, -547,
	-363, -545, -545, -410, -390, -308, -254, 250, 32, 239,
	-311, 343, 344, 349, 351, -439, 313, 118, -439, 160,
	-203, 160, -363, -274, -274, 32, 92, 92, -252, 87,
	160, 128, 102, 92, -585, -580, 128, -444, 92, 92,
	-586, 92, 92, -590, 128, -253, 246, -352, 160, -219,
	-219, -320, 160, 128, -221, -220, 83, 84, -222, 83,
	-220, -220, 69, -213, 92, 69, 69, -320, -598, -597,
	24, -550, -550, -550, 87, 87, 15, -228, 42, -321,
	20, 21, 147, 125, 123, 125, 125, -363, 87, 87,
	-495, 620, -529, -531, 454, 21, 21, 15, 251, 87,
	-512, 665, -512, -533, 46, 47, -422, -438, 439, -250,
	160, 665, -255, -293, 92, -390, 87, -390, 87, 92,
	87, 92, -208, 21, 87, 160, 87, 87, 87, 160,
	87, 87, -390, 87, -558, -355, 192, 92, -355, 365,
	-364, -363, 17, -363, 92, -363, -471, 314, -471, 314,
	246, -363, -232, -415, 555, -239, -257, 244, -184, 87,
	160, -184, 92, -583, 430, 102, 42, 102, 158, 422,
	-506, -174, 96, -252, 33, -219, -587, 96, 128, 664,
	86, -359, -359, -359, 250, -363, 87, 160, -359, -359,
	87, 250, 87, 87, -272, 556, -484, 268, 102, 146,
	102, 146, 102, -361, -202, -363, -320, -576, 159, -320,
	-484, -458, 319, 102, -386, 86, -386, 86, -467, 316,
	86, 87, 160, -363, -339, -269, -268, -266, 107, 118,
	42, 408, -267, 96, 155, 302, 305, 304, 280, 303,
	-298, -379, 83, 414, 343, 344, -411, 620, 544, 253,
	112, 113, 396, -380, 86, 86, 84, 322, 86, 86,
	-547, 87, -308, -339, 42, -311, 42, 357, 313, -309,
	-363, 155, -274, 87, -553, 92, -558, -583, 92, -446,
	-588, 92, -174, -252, -577, -208, -433, -518, -390, 86,
	-390, 87, 86, 69, 11, 19, -383, -390, -398, 649,
	651, 652, 252, -6, 630, 384, -289, 621, 92, 21,
	92, -527, 92, -434, -495, -142, -286, -351, 285, 87,
	-292, 138, 556, 87, 87, -459, -459, -462, -461, -465,
	460, 314, 468, -398, 92, 92, 87, 87, 92, -363,
	170, 92, 664, 92, -471, 92, -471, -363, 314, 92,
	92, -230, -257, -178, 556, -272, -245, -178, 21, 556,
	368, 42, 102, 42, 423, 92, -182, 128, 108, 109,
	-347, -348, 92, -417, -274, -276, 92, 365, -316, -383,
	-383, -270, -184, 36, -271, -314, -411, 556, 365, -141,
	-140, -270, 556, 86, -485, 164, 102, 146, 102, 102,
	-320, -320, -485, -474, 21, 87, -453, 87, -453, 86,
	128, -386, -473, -476, 62, -266, 107, -386, 92, -276,
	-277, 42, 301, 297, 128, 128, -278, 42, 281, 282,
	-288, 86, 312, 15, 198, 86, 113, 113, -250, -417,
	-417, -548, 345, 346, 347, 352, 349, 350, 348, 351,
	-548, -417, -417, 86, -440, -439, -386, -359, -359, 155,
	-587, -209, -214, -546, -363, 253, 21, 21, -504, 556,
	650, 86, 86, -363, -363, -343, 622, 102, 92, 456,
	-289, -496, 623, -523, -466, -274, 128, 87, 76, 554,
	557, 87, -464, 120, 422, 426, -384, -387, 102, 104,
	190, 158, 87, 87, -363, -350, -349, 92, -232, 92,
	-232, 92, 314, -471, 555, -179, 61, 502, 92, 93,
	417, 92, 93, 368, -174, 92, 665, 160, 128, 87,
	-363, -454, 269, -184, 160, -314, -351, -363, -142, -454,
	-273, -315, -363, 92, -502, 173, 336, 556, 102, 146,
	102, -208, -486, 173, 336, -457, 87, 87, 87, -453,
	102, 87, -480, -477, 86, -314, 271, 138, 92, 92,
	102, 86, -513, 32, 92, -418, 86, 87, 87, 87,
	87, -417, 102, -274, -359, 87, 87, 160, 652, 86,
	-398, -398, 86, 21, -343, -497, 624, 92, -532, 459,
	-526, -524, 454, 455, 456, 457, 92, 555, 66, 558,
	-463, -464, 426, -384, -387, 618, 466, 466, 466, 665,
	160, 128, -232, -232, -471, 92, -233, -363, 312, 439,
	-348, 92, -420, -455, 321, 21, -314, -359, -455, 87,
	160, -359, -359, 336, 102, 146, 102, -209, 336, -469,
	320, 87, -480, -314, -479, -478, 319, 272, 86, 87,
	-390, -402, -359, 87, -291, -290, 552, -417, -420, 84,
	-420, 84, -420, 84, -420, 84, 87, -274, -363, 253,
	-137, 86, 87, 87, -344, -363, -527, 92, -534, 251,
	-530, -531, 458, -524, 21, 456, 21, 21, -143, 160,
	66, 117, 467, 467, 467, -349, 92, 92, -232, -231,
	36, 461, 395, -421, 259, 357, 358, 96, 556, 343,
	344, 362, 361, 360, 363, 21, -456, -274, -315, -383,
	-383, 102, 102, 87, 160, -363, 268, 86, -397, -391,
	-390, 268, 87, -363, -297, -295, -296, 83, 473, 310,
	311, 87, -548, -548, -548, -548, -298, 87, 160, -396,
	87, 160, -541, 86, 102, -529, -528, -530, 21, -527,
	21, -527, -527, 463, 556, -463, -232, 92, -359, -359,
	92, 92, 342, -359, -359, -359, -359, -339, 86, -468,
	-478, -477, -397, 87, 160, -439, -296, 83, -295, 83,
	16, 15, -420, -420, -420, -420, 86, 87, -363, -544,
	32, 87, -540, -539, -340, -535, -363, 459, 460, 92,
	-527, 128, 557, -618, -617, 641, 102, 102, -363, 102,
	102, 102, 92, -453, -458, 87, -391, -294, 307, 308,
	32, 173, -294, -396, -543, -542, -341, 87, 160, 159,
	92, 558, 92, 87, -474, 107, 42, 309, 87, 160,
	128, -539, -363, -542, 42, -390, 159, -363,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 316, 317, 318, 319,
	320, 321, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 0, 0, 0, 0, 0, 722, 723, 0, 686,
	0, 0, 0, 0, 0, 0, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
	592, 593, 594, 595, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 350, 346, 258, 259, 260,
	261, 262, 263, 264, 357, 358, 535, 0, 0, 0,
	0, 805, -2, 102, 0, 0, 0, 0, 339, 0,
	330, 330, 0, 0, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, -2, 735, 0,
	687, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 414, 415, 416,
	410, 411, 413, 412, -2, 0, 0, 735, 0, 0,
	0, 813, 0, 0, 0, 856, 874, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1424, 1425,
	1426, 1427, 2230, 2200, -2, 1962, 1936, 2124, 2125, 2019,
	2032, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276,
	2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286,
	2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296,
	2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306,
	2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316,
	2317, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
	1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
	1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
	1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931,
	1932, 1933, 1934, 1935, 1937, 1938, 1939, 1940, 1941, 1942,
	1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952,
	1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1963,
	1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973,
	1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983,
	1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993,
	1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
	2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
	2014, 2015, 2016, 2017, 2018, 2020, 2021, 2022, 2023, 2024,
	2025, 2026, 2027, 2028, 2029, 2030, 2031, 2034, 2035, 2036,
	2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,
	2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
	2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066,
	2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076,
	2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086,
	2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096,
	2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106,
	2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116,
	2117, 2118, 2119, 2120, 2121, 2122, 2123, 2126, 2127, 2128,
	2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138,
	2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148,
	2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, -2, 2158,
	2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168,
	2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178,
	2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188,
	2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198,
	2199, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209,
	2210, 2211, 2212, 2213, 2214, 2215, -2, -2, -2, 2219,
	2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229,
	2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240,
	2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250,
	2251, 2252, 2253, 2254, 2255, 2256, 2257, 0, 314, 312,
	1906, 1936, 1962, 2019, 2032, 2033, 2072, 2124, 2125, 2157,
	2200, 2216, 2217, 2218, 2230, 0, 0, 1011, 0, 783,
	0, 0, 788, 1371, 783, 351, 724, 725, 813, 839,
	684, 0, 388, 0, 1952, 392, 2207, 0, 0, 0,
	0, 681, 382, 383, 384, 385, 386, 387, 0, 0,
	984, 0, 0, 378, 0, 345, 2022, 2229, 1428, 0,
	0, 0, 0, 0, 201, 1137, 203, 1139, 207, 215,
	0, 0, 0, 220, 221, 224, 225, 226, 227, 228,
	0, 232, 0, 234, 237, 0, 239, 240, 0, 243,
	244, 245, 0, 255, 256, 257, 1140, 1141, 1142, -2,
	130, 1009, 1864, 1750, 0, 1757, 1770, 1781, 1510, 1511,
	1512, 1513, 0, 0, 0, 0, 0, 0, 1521, 1522,
	0, 1552, 2272, 2313, 2314, 0, 1530, 1531, 1532, 1533,
	1534, 1535, 0, 141, 153, 154, 1803, 1804, 1805, 1806,
	1807, 1808, 1809, 0, 1811, 1812, 1813, 1721, 1497, 1424,
	0, 2281, 0, 2303, 2308, 2309, 2310, 2311, 2302, 0,
	0, 1705, 0, 1695, 0, 0, -2, -2, 0, 0,
	2097, -2, 2315, 2316, 2317, 2278, 2299, 2307, 2282, 2283,
	2306, 2274, 2275, 2276, 2269, 2270, 2271, 2273, 2285, 2287,
	2298, 0, 2294, 2304, 2305, 2205, 0, 0, 2252, 0,
	0, 0, 2247, 155, 156, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1716, -2, 1718, -2, 1720, -2, 1723, -2,
	-2, -2, -2, 1728, 1729, -2, 1731, -2, -2, -2,
	-2, -2, -2, -2, 1707, 1708, 1709, 1710, 1699, 1700,
	1701, 1702, 1703, 1704, -2, -2, -2, 839, 932, 0,
	839, 0, 814, 861, 864, 867, 870, 817, 0, 0,
	103, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 340, 341, 329, 331, 0, 335, 0, 0, 331,
	328, 322, 0, 1180, 1180, 1180, 0, 0, 0, 1180,
	1180, 1180, 1180, 1180, 0, 1180, 0, 0, 0, 0,
	0, 1180, 0, 1046, 1144, 1145, 1146, 1178, 1179, 1256,
	0, 0, 0, 740, 736, 737, 738, 739, 827, 0,
	829, 832, 0, 0, 661, 661, 899, 899, 0, 607,
	0, 0, 0, 661, 0, 621, 613, 0, 0, 0,
	661, 0, 0, 834, 834, 0, 664, 671, 661, 661,
	-2, 661, 661, 658, 661, 0, 0, 1194, 627, 628,
	629, 613, 613, 632, 633, 634, 644, 645, 672, 1888,
	0, 0, 535, 535, 0, 535, 535, 0, 535, 535,
	535, 0, 742, 1978, 2067, 1959, 2038, 1916, 2022, 2229,
	0, 287, 2097, 292, 0, 1961, 1981, 0, 0, 2000,
	0, -2, 0, 367, 839, 0, 0, 813, 0, 0,
	0, 0, 535, 535, 535, 535, 535, 1255, 535, 535,
	535, 535, 535, 0, 0, 0, 535, 535, 535, 535,
	0, 875, 876, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 5, 6, 19, 0, 0, 0, 0,
	0, 0, 109, 108, 0, 1865, 1883, 1816, 1817, 1818,
	1870, 1820, 1874, 1874, 1874, 1874, 1849, 1850, 1851, 1852,
	1853, 1854, 1855, 1856, 1857, 1858, 1874, 1874, 0, 0,
	1863, 1840, 1872, 1872, 1872, 1870, 1867, 1821, 1822, 1823,
	1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833,
	1834, 1877, 1877, 1880, 1880, 1877, 0, 428, 426, 427,
	1746, 0, 0, 0, 0, 783, 787, 1369, 0, 0,
	0, 839, -2, 0, 0, 685, 389, 1429, 0, 0,
	393, 0, 394, 0, 0, 396, 0, 0, 0, 417,
	0, 420, 404, 405, 406, 407, 400, 0, 181, 0,
	380, 381, 0, 0, 347, 0, 0, 0, 536, 0,
	0, 0, 0, 0, 0, 212, 208, 216, 219, 229,
	236, 0, 248, 250, 253, 209, 217, 222, 223, 230,
	251, 210, 213, 214, 218, 252, 254, 211, 231, 235,
	249, 233, 238, 241, 242, 247, 0, 182, 0, 0,
	0, 0, 0, 1756, 0, 0, 1789, 1790, 1791, 1792,
	1793, 1794, 1795, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -2, 1750, 0, 0, 1516, 1517, 1518, 1519,
	0, 1523, 0, 1553, 0, 0, 0, 0, 0, 0,
	1810, 1814, 0, 1746, 1746, 0, 1746, 1742, 0, 0,
	0, 0, 0, 0, 1746, 1678, 0, 0, 1680, 1696,
	0, 0, 1682, 1683, 0, 1686, 1687, 1746, 0, 1746,
	1691, 1746, 1746, 1746, 1674, 1675, 0, 1742, 1742, 1742,
	1742, 0, 0, 1742, 1742, 1742, 1742, 1742, 1742, 1742,
	1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 0, 0,
	0, 0, 834, 0, 840, 0, -2, 0, 858, 860,
	862, 863, 865, 866, 868, 869, 871, 872, 819, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 71, 73,
	0, 0, 0, 0, 0, 0, 333, 0, 338, 324,
	2059, 0, 323, 0, 0, 0, 0, 0, 1008, 0,
	0, 1180, 1180, 1180, 1047, 0, 0, 0, 0, 0,
	0, 0, 0, 1180, 1180, 1180, 1180, 0, 1200, 0,
	0, 0, 742, 741, 0, 828, 0, 0, 70, 596,
	597, 598, 899, 0, 0, 600, 601, 0, 602, 0,
	0, 613, 661, 661, 619, 620, 615, 614, 667, 668,
	664, 0, 664, 664, 899, 0, 638, 639, 640, 661,
	661, 646, 835, 0, 647, 648, 664, 0, 669, 670,
	899, 0, 0, 899, 899, 0, 656, 657, 659, 661,
	0, 0, 1180, 0, 677, 615, 615, 1889, 1890, 0,
	0, 1191, 0, 0, 0, 0, 680, 0, 0, 0,
	444, 445, 0, 0, 743, 0, 266, 270, 0, 273,
	0, 2067, 0, 2067, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 310, 311, 0, 0, 0, 0, 301,
	304, 1363, 1364, 1134, 1135, 305, 306, 359, 360, 0,
	834, 857, 859, 853, 854, 855, 0, 72, 0, 0,
	0, 0, 0, 535, 0, 0, 0, 0, 0, 718,
	0, 1026, 720, 0, 0, 0, 0, 0, 907, 901,
	903, 979, 141, 877, 8, 126, 123, 0, 19, 0,
	0, 19, 19, 0, 19, 315, 0, 1886, 1884, 1885,
	1819, 1871, 0, 1845, 0, 1846, 1847, 1848, 1859, 1860,
	0, 0, 1841, 0, 1842, 1843, 1844, 1835, 0, 1836,
	1837, 0, 1838, 1839, 313, 425, 0, 0, 1747, 1012,
	0, 761, 775, 756, 0, 764, 0, 0, 1371, 0,
	0, 0, 0, 744, 775, 746, 0, 764, 834, 811,
	0, 789, 0, 0, 390, 0, 401, 395, 0, 402,
	397, 398, 0, 0, 419, 421, 422, 423, 408, 409,
	682, 376, 377, 368, 369, 370, 371, 372, 373, 374,
	375, 0, 0, 379, 151, 0, 348, 349, 0, 0,
	0, 195, 196, 197, 198, 199, 200, 202, 186, 707,
	709, 1126, 1138, 0, 1129, 0, 205, 246, 178, 0,
	0, 0, 1751, 1752, 1753, 1754, 1755, 1760, 0, 1762,
	1764, 1766, 1768, 0, 1786, -2, -2, 1498, 1499, 1500,
	1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1771,
	1784, 1785, 0, 0, 0, 0, 0, 0, 1782, 1782,
	1777, 0, 1536, 1365, 1366, 1514, 0, 0, 1550, 1554,
	0, 0, 0, 0, 0, 0, 1161, 1870, 0, 142,
	1741, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653,
	1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663,
	1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673,
	0, 0, 1750, 0, 0, 0, 1743, 1744, 0, 0,
	0, 1633, 0, 0, 1639, 1640, 1641, 0, 770, 0,
	1706, 1679, 1697, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 931, 933, 0, 779, 781, 782, 808, 789, 815,
	0, 0, 0, 101, 106, 0, 1223, 0, 0, 0,
	0, 0, 0, 0, 74, 1195, 75, 1197, 342, 343,
	0, 0, 337, 325, 2059, 327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1062, 1063, 533,
	1120, 0, 0, 0, 1136, 1165, 1176, 0, 0, 0,
	0, 0, 1229, 1048, 1053, 1054, 1055, 1049, 1050, 1056,
	1057, 0, 830, 0, 0, 948, 599, 662, 663, 900,
	603, 0, 0, 610, 2022, 615, 899, 899, 622, 616,
	623, 666, 624, 625, 626, 664, 899, 899, 836, 661,
	664, 649, 665, 664, 1371, 653, 0, 660, 1371, 678,
	1371, 0, 676, 630, 631, 1231, 832, 442, 443, 448,
	450, 0, 500, 500, 500, 482, 500, 0, 0, 470,
	1891, 0, 0, 0, 0, 479, 1891, 0, 0, 1891,
	1891, 1891, 1891, 1891, 1891, 1891, 0, 0, 1891, 1891,
	1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 0,
	1891, 1891, 1891, 1891, 1891, 1348, 1891, 0, 499, 1192,
	490, 491, 492, 493, 498, 0, 0, 528, 0, 0,
	1061, 0, 533, 0, 0, 1103, 0, 0, 912, 0,
	913, 914, 915, 910, 950, 974, 974, 0, 974, 954,
	1371, 0, 0, 0, 278, 279, 267, 0, 268, 0,
	0, 281, 282, 0, 284, 285, 286, 293, 1959, 2038,
	288, 290, 0, 0, 294, 307, 308, 309, 0, 0,
	299, 300, 0, 0, 362, 363, 365, 0, 789, 1196,
	704, 1367, 705, 706, 710, 0, 0, 713, 714, 715,
	716, 717, 1028, 0, 0, 1112, 1113, 1114, 1182, 899,
	0, 908, 0, 904, 980, 0, 982, 0, 0, 124,
	19, 0, 117, 114, 0, 0, 0, 0, 0, 1866,
	1815, 1887, 0, 0, 0, 1868, 0, 0, 0, 0,
	0, 107, 791, 751, 0, 755, 772, 0, 776, 0,
	0, 768, 760, 765, 0, 0, 785, 752, 1370, 0,
	0, 0, 0, 745, 0, 0, 750, 789, 0, 812,
	841, 842, 845, 1430, 0, 403, 399, 418, 0, 0,
	0, 0, 189, 1123, 0, 190, 194, 184, 0, 0,
	0, 1128, 0, 1125, 1130, 0, 204, 0, 0, 179,
	180, 1214, 1223, 0, 0, 0, 1761, 1763, 1765, 1767,
	1769, 0, 1772, 1782, 1782, 1778, 0, 1773, 0, 1775,
	0, 1751, 1520, 0, 1555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 845, 0, 0, 1623, 1624, 0,
	0, 1628, 0, 1630, 1631, 1632, 1634, 0, 0, 0,
	1638, 0, 1677, 1698, 1681, 1684, 0, 1688, 0, 1690,
	1692, 1693, 1694, 0, 839, 839, 0, 0, 1594, 1594,
	1594, 0, 0, 0, 0, 1594, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1539, 0, 1540,
	1541, 0, 0, 0, 934, 809, 0, 0, 0, 0,
	0, 1221, 0, 91, 0, 0, 0, 0, 96, 0,
	0, 76, 344, 332, 334, 0, 326, 0, 1181, 0,
	0, 0, 0, -2, 1028, 832, 0, 832, 1073, 1891,
	537, 0, 0, 1122, 0, 1092, 0, 0, 0, -2,
	0, 0, 0, 1176, 0, 0, 0, 1233, 0, 0,
	0, 729, 733, 23, 833, 0, 606, 604, 0, 608,
	0, 609, 661, 617, 618, 899, 641, 642, 0, 0,
	899, 661, 661, 652, 664, 673, 0, 674, 1371, 1233,
	0, 0, 1191, 1299, 1267, 460, 0, 1384, 1385, 501,
	0, 1391, 1400, 1180, 1462, 0, 1400, 0, 0, 1402,
	1403, 0, 0, 0, 0, 483, 484, 0, 469, 0,
	0, 0, 0, 0, 0, 468, 0, 0, 511, 0,
	0, 0, 0, 0, 1892, 1891, 1891, 0, 477, 478,
	0, 481, 0, 0, 0, 0, 0, 0, 0, 0,
	1891, 1891, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1339, 0, 0, 0, 0, 0, 0,
	0, 0, 1355, 1356, 0, 1073, 1891, 0, 0, 0,
	0, 537, 1117, 1117, 1090, 1108, 0, 446, 447, 508,
	0, 0, 0, 0, 0, 0, 0, 940, 0, 0,
	0, 939, 0, 0, 0, 0, 0, 0, 0, 832,
	975, 0, 977, 978, 952, -2, 0, 912, 957, 1746,
	0, 271, 272, 0, 0, 277, 295, 297, 269, 0,
	0, 0, 296, 298, 302, 303, 361, 364, 366, 851,
	0, 0, 1257, 0, 1029, 1030, 1032, 1033, 0, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1943, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1027, 721, 1115, 1183, 890, 902,
	909, 981, 983, 142, 905, 0, 127, 19, 126, 118,
	119, 0, 19, 0, 0, 0, 0, 1876, 1875, 1861,
	0, 1862, 1873, 1878, 0, 1881, 0, 429, 795, 0,
	0, 775, 777, 0, 0, 775, 0, 0, 784, 0,
	0, 0, 0, 0, 0, 0, 775, 851, 791, 0,
	848, 846, 847, 0, 0, 683, 152, 424, 0, 0,
	0, 0, 0, 708, 0, 1127, 186, 0, 0, 206,
	0, 0, 0, 1223, 1218, 1745, 1774, 1776, 0, 1783,
	1779, 1515, 1524, 1551, 0, 0, 1557, 1569, 1569, 0,
	0, 0, 1560, 1874, 1874, 1563, 1870, 1872, 1870, 1569,
	1569, 0, 1162, 0, 1163, 845, 143, 0, 0, 1629,
	0, 0, 0, 771, 0, 0, 0, 1590, 1592, 1594,
	1594, 1601, 1595, 1602, 1603, 1594, 1594, 1594, 1594, 1608,
	1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594,
	1594, 1588, 0, 0, 1804, 1805, 780, 0, 0, 822,
	823, 824, 825, 826, 0, 0, 61, 61, 1223, 0,
	100, 92, 0, 0, 0, 0, 0, 336, 0, 77,
	78, 80, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 1014, 1015, 1017, 0, 1020, 1021, 1022, 0,
	0, 1377, 0, 1077, 1074, 1075, 1076, 0, 1117, 538,
	539, 540, 541, 0, 0, 0, 1121, 0, 0, 1085,
	0, 0, 0, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
	1173, -2, 1186, 0, 1371, 0, 0, 1377, 1205, 0,
	0, 1210, 0, 1377, 1377, 0, 1241, 0, 1230, 783,
	0, -2, 0, 0, 731, 0, 0, 949, 605, 611,
	899, 635, 837, 838, 1371, 899, 899, 661, 679, 675,
	1241, 1232, 0, 449, 500, 0, 1287, 0, 0, 1293,
	0, 1300, 453, 0, 502, 0, 1390, 1418, 1401, 1418,
	1463, 1418, 1418, 1180, 0, 502, 0, 0, 471, 0,
	0, 0, 0, 0, 467, 505, 845, 454, 456, 457,
	458, 509, 510, 512, 0, 514, 515, 473, 485, 486,
	487, 488, 489, 0, 0, 0, 480, 494, 495, 496,
	497, 455, 1316, 1317, 1318, 1321, 1322, 1323, 1324, 0,
	0, 1327, 1328, 1329, 1330, 1331, 1415, 1416, 1417, 1332,
	1333, 1334, 1335, 1336, 1337, 1338, 1357, 1358, 1359, 1360,
	1361, 1362, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347,
	0, 0, 1352, 0, 0, 0, 1077, 0, 0, 0,
	0, 0, 1117, 531, 0, 0, 532, 1092, 0, 1110,
	0, 1104, 1105, 0, 0, 753, 899, 354, 0, 944,
	935, 0, 919, 0, 921, 941, 922, 942, 0, 0,
	926, 0, 928, 0, 924, 925, 930, 923, 899, 911,
	951, 976, 953, 956, 958, 959, 965, 0, 0, 0,
	0, 265, 274, 275, 276, 283, 0, 557, 289, 807,
	0, 1368, 711, 712, 1258, 1259, 719, 0, 1034, 888,
	0, 0, 122, 125, 0, 120, 0, 0, 0, 0,
	112, 110, 1869, 0, 0, 797, 166, 0, 0, 0,
	773, 0, 778, 775, 759, 769, 758, 766, 767, 786,
	1372, 1373, 1374, 1375, 0, 775, 749, 748, 810, 795,
	843, 844, 0, 1431, 391, 0, 1124, 186, 191, 192,
	193, 187, 185, 1131, 0, 1133, 0, 1216, 0, 0,
	1780, 1556, 1525, 1558, 1570, 1571, 1559, 0, 1527, 1528,
	1561, 1562, 1564, 1565, 1566, 1567, 1568, 1529, 0, 1164,
	1625, 0, 1627, 1635, 1636, 0, 1685, 1689, 0, 0,
	0, 0, 0, 1599, 1600, 1604, 1605, 1606, 1607, 1609,
	1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619,
	839, 1589, 0, 0, 0, 0, 0, 0, 0, 820,
	0, 0, 0, 63, 0, 63, 1222, 1224, 0, 979,
	0, 0, 97, 0, 0, 79, 81, 0, 2023, 0,
	0, 0, 0, 1182, 1007, 1023, 1019, 0, 0, 0,
	0, 1378, 1379, 1381, 1382, 1383, 0, 1045, 0, 0,
	1065, 1066, 1067, 1079, 0, 543, 544, 0, 0, 0,
	556, 552, 553, 554, 534, 1116, 1099, 0, 0, 1088,
	0, 0, 1098, 0, 1187, 1891, 1891, 1891, 1174, 0,
	0, 1301, 1891, 1891, 0, 1207, 1209, 1211, 0, 0,
	1305, 1244, 0, 0, 1235, 0, 974, 0, 0, 899,
	730, 733, 734, 831, 612, 650, 654, 651, 899, 1244,
	441, 1265, 0, 0, 0, 0, 0, 1297, 0, 0,
	1269, 0, 472, 503, 0, -2, 0, 1419, 0, 1404,
	1419, 0, 0, 1418, 0, 461, 502, 0, 0, 0,
	516, 521, 522, 0, 518, 519, 1458, 0, 520, 0,
	507, 0, 513, 1319, 1320, 0, 1325, 1326, 0, 1350,
	0, 0, 0, 452, 523, 0, 0, 0, 524, 525,
	530, 1118, 1119, 1085, 0, 1099, 0, 1109, 0, 1106,
	1107, 839, 0, 0, 916, 945, 0, 0, 917, 0,
	918, 920, 943, 0, 937, 927, 929, 353, 960, 0,
	0, 962, 963, 964, 955, 291, 852, 1031, 0, 873,
	0, 0, 906, 0, 19, 0, 0, 115, 1879, 1882,
	799, 0, 796, 167, 0, 0, 0, 0, 763, 774,
	757, 1376, 747, 797, 849, 850, 188, 183, 1132, 1226,
	0, 1217, 0, 1482, 1538, 0, 1637, 0, 1594, 1591,
	1594, 1593, 1585, 0, 1542, 0, 1544, 1545, 1546, 0,
	1548, 1549, 0, 818, 0, 59, 0, 62, 60, 0,
	99, 93, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 1016, 1018, 0, 1051, 1305,
	0, 1051, 1078, 1064, 0, 0, 545, 546, 0, 549,
	555, 1080, 0, 0, 1082, 1083, 1084, 0, 0, 1096,
	0, 0, 0, 0, 0, 1177, 1193, 0, 0, 0,
	-2, 0, 0, -2, 1204, 0, 1250, 0, 1242, 0,
	1234, 0, 1237, 899, 899, -2, 727, 732, 0, 655,
	1250, 1267, 0, 1288, 0, 0, 0, 0, 0, 0,
	0, 1268, 0, 1281, 504, 1420, -2, 1434, 1436, 0,
	1192, 1439, 1440, 0, 0, 0, 0, 0, 0, 1489,
	1448, 0, 0, 1452, 1453, 1454, 0, 0, 1457, 0,
	1798, 1799, 0, 1461, 0, 0, 0, 0, 0, 0,
	0, 1398, 462, 463, 0, 465, 466, 1891, 1459, 506,
	459, 1891, 475, 1349, 1353, 1354, 1351, 529, 526, 527,
	1088, 1091, 1102, 1111, 754, 834, 355, 356, 946, 0,
	936, 938, 969, 966, 0, 0, 1035, 889, 897, 2252,
	2254, 2251, 116, 121, 0, 0, 801, 0, 798, 0,
	792, 794, 177, 762, 799, 137, 169, 0, 0, 1526,
	0, 0, 0, 1626, 1676, 1597, 1598, 0, 1586, 0,
	1580, 1581, 1582, 1587, 0, 0, 821, 816, 64, 95,
	0, 98, 68, 1182, 0, 1182, 0, 0, 0, 1010,
	1024, 0, 1037, 1044, 1058, 1198, 1380, 1043, 0, 0,
	542, 547, 0, 550, 551, 1100, 1099, 0, 1086, 1087,
	0, 1094, 0, 0, 1188, 1189, 1190, 0, 1302, 1303,
	1304, 1260, 1206, 0, -2, 1313, 0, 0, 0, 1202,
	1226, 1260, 0, 0, 1238, 0, 1245, 0, 1243, 1236,
	839, 728, 1247, 451, 1299, 1289, 0, 1291, 0, 0,
	0, 0, 1270, -2, 0, 1435, 1437, 1438, 1441, 1442,
	1443, 1494, 1495, 1496, 0, 0, 1446, 1491, 1492, 1493,
	1447, 0, 0, 0, 0, 0, 1796, 1797, 1487, 0,
	0, 1405, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414,
	1406, 0, 0, 0, 1397, 1399, 464, 0, 0, 1891,
	1101, 352, 0, 0, 970, 972, 967, 968, 891, 0,
	0, 0, 0, 111, 113, 128, 0, 800, 168, 0,
	801, 139, 0, 160, 0, 1227, 0, 1537, 0, 0,
	0, 1596, 1583, 0, 0, 0, 0, 0, 1800, 1801,
	1802, 0, 1543, 1547, 94, 0, 66, 0, 83, 1182,
	84, 1182, 0, 0, 0, 0, 1059, 1060, 1068, 1069,
	0, 1071, 1072, 548, 1081, 1089, 1093, 1096, 0, 1148,
	1175, 1262, 0, 1208, 1191, 1315, 1891, 1212, 1213, 1262,
	0, 1307, 1891, 1891, 1228, 0, 1240, 0, 1252, 0,
	1246, 834, 440, 0, 1249, 1285, 1290, 1292, 1294, 0,
	1298, 1296, 1271, -2, 0, 1279, 0, 0, 1444, 1445,
	0, 0, 1695, 1891, 0, 1477, 0, 1148, 1148, 1148,
	1148, 0, 517, 474, 0, 947, 961, 0, 898, 0,
	0, 0, 0, 0, 790, 129, 0, 138, 157, 0,
	170, 171, 0, 0, 0, 0, 1219, 0, 1485, 1486,
	0, 1572, 0, 0, 0, 1576, 1577, 1578, 1579, 65,
	68, 0, 85, 86, 0, 1182, 0, 1036, 0, 1070,
	1095, 1097, 1147, 1201, 0, 1299, 1314, 0, 1203, 1306,
	0, 0, 0, 1239, 1251, 0, 1254, 726, 1248, 1266,
	0, 1295, 1272, 1280, 0, 1275, 0, 0, 0, 1490,
	0, 1451, 0, 1456, 1465, 1478, 0, 0, 1386, 0,
	1388, 0, 1392, 0, 1394, 0, 0, 476, 971, 973,
	0, 1746, 893, 894, 0, 803, 793, 140, 144, 0,
	166, 163, 0, 172, 0, 0, 0, 0, 1215, 0,
	1483, 0, 1573, 1574, 1575, 67, 69, 1182, 87, 0,
	1038, 1039, 1052, 1149, 1891, 1891, 0, 0, 0, 1155,
	1156, 1891, 1891, 1891, 1891, 0, 1287, 1319, 1308, 1309,
	1310, 1253, 1286, 1274, 0, -2, 1282, 0, 0, 1748,
	1758, 1759, 1449, 1455, 1464, 1466, 1467, 0, 1479, 1480,
	1481, 1488, 1148, 1148, 1148, 1148, 1396, 892, 0, 0,
	802, 0, 131, 0, 0, 161, 162, 164, 0, 173,
	0, 175, 176, 0, 0, 1584, 89, 1040, 0, 0,
	1152, 1153, 0, 0, 0, 0, 0, 1263, 0, 1265,
	1276, -2, 0, 1284, 0, 1450, 1468, 0, 1469, 0,
	0, 0, 1387, 1389, 1393, 1395, 1746, 895, 804, 1225,
	0, 145, 0, 147, 149, 150, 1421, 158, 159, 165,
	174, 0, 0, 1025, 1041, 0, 1150, 1151, 1154, 1157,
	1158, 1159, 1160, 0, 1267, 1283, 1749, 1470, 1472, 1473,
	0, 0, 1471, 0, 132, 133, 0, 146, 0, 0,
	1220, 1484, 1042, 1264, 1261, 1474, 1476, 1475, 896, 0,
	0, 148, 1422, 134, 135, 136, 0, 1423,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 119, 3, 3, 3, 150, 142, 3,
	86, 87, 147, 145, 160, 146, 159, 148, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 666, 663,
	129, 128, 130, 3, 667, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 152, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 664, 141, 665, 153,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 120, 121, 122, 123, 124,
	125, 126, 127, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 143, 144, 149, 151, 154, 155, 156,
	157, 158, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 57986, 661, 57987, 662, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:848
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:855
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:861
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:869
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:875
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:879
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:894
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:898
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:904
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:909
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:913
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:946
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:960
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:971
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:983
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:987
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:992
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:996
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1002
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1016
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1020
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1024
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1028
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1035
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1043
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1051
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1057
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1064
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1073
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1081
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1089
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1099
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1109
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1119
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(""),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1129
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELDATABASE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1139
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELTABLE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1151
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
				Internal:    yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1162
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
				Internal:    yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1173
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
				Internal:    yyDollar[11].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1185
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
				Internal:     yyDollar[11].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1197
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				PitrValue:    yyDollar[10].int64ValUnion(),
				PitrUnit:     yyDollar[11].str,
				Internal:     yyDollar[12].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1210
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
				Internal:    yyDollar[8].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1221
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
				Internal:     yyDollar[13].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1237
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1245
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1253
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1261
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1270
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1280
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1292
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1300
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1309
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1319
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1329
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1339
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1359
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1365
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1372
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1380
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1386
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1395
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1405
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1413
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1421
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1429
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1439
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1447
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1457
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1464
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1473
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1483
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1487
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1493
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1497
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1503
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1512
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1522
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1526
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1532
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1541
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1545
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1551
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1572
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1586
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1593
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1597
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1603
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1607
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1613
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1620
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1628
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1632
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1644
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1648
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1662
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1666
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1671
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1678
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1682
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1686
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1692
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1701
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1712
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1716
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1722
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1726
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1732
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1736
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1742
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarExpr{
				Name:   v,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1762
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1781
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1785
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1789
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1794
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1798
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1807
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1817
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1824
		{
			yyVAL.str = yyDollar[3].str
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1829
		{
			yyVAL.str = "\n"
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1836
		{
			yyVAL.str = yyDollar[3].str
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1841
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1845
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1873
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1877
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1883
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1891
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1911
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1930
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1955
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1959
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1963
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1968
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1972
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1978
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1991
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2002
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2015
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2019
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2029
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2042
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2055
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2061
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2067
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2075
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2085
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2095
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2099
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2103
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2107
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2111
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2115
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2122
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2126
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2132
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2139
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2148
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2152
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2158
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2162
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2166
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2170
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2174
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2178
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2182
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2186
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2190
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2194
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2198
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2202
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2206
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2210
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2214
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2218
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2222
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2226
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2230
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2234
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2238
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2242
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2246
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2250
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2254
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2258
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2262
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2266
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2270
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2274
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2278
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2282
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2286
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2290
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2294
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2298
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2302
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2306
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2310
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2314
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2318
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2322
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2326
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2330
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2334
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2338
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2342
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2346
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2350
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2354
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2358
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2373
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2382
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2389
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2396
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2405
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2423
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2427
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2433
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2440
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2448
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2452
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2456
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2460
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2466
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2470
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2476
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2483
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2490
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2499
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2529
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2533
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2537
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2543
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2549
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2553
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2560
		{
			yyVAL.str = yyDollar[3].str
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2566
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2570
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2576
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2584
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2593
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2602
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2610
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2618
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2641
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   v,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2660
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2667
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2674
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2682
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2689
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2696
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2705
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2709
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2713
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2719
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2723
		{
			yyVAL.str = yyDollar[1].str
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2729
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2733
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2739
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2743
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2757
		{
			yyLOCAL = &tree.SavePoint{Name: tree.Identifier(yyDollar[2].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2763
		{
			yyLOCAL = &tree.ReleaseSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2769
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2774
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2779
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[5].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2784
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2790
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2796
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2801
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2805
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2809
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2813
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2817
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2821
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2825
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2829
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2833
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2839
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2843
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2847
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2851
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2856
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2861
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2867
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2880
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2893
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2906
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2919
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2935
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2942
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2953
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2964
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2968
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2974
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2984
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2990
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2994
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:3000
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3006
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3010
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3014
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3018
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3024
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3037
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3043
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3047
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3053
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3057
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3063
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3069
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3080
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3086
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3090
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3094
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3098
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3102
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3106
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3114
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3122
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3132
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3140
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3150
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3160
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3176
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3180
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3188
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3196
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3236
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3240
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3246
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3252
		{
			yyVAL.str = yyDollar[1].str
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3257
		{
			yyVAL.str = "true"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3258
		{
			yyVAL.str = "false"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3259
		{
			yyVAL.str = yyDollar[1].str
		}
	case 424:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3264
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3270
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3279
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3286
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3294
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3298
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3323
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3346
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3356
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3363
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3372
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3380
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3384
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3390
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3401
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3405
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3411
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3415
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3439
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3449
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3459
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3475
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3493
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3497
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3503
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3507
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3513
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3519
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3527
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3537
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3545
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3555
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3565
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3575
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3582
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3586
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3590
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3594
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3598
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3605
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3611
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3615
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3619
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3623
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3627
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3631
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3635
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3639
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3644
		{
			yyVAL.str = ""
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3676
		{
			yyVAL.str = ""
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3680
		{
			yyVAL.str = string("COLUMN")
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3685
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3691
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3697
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3705
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3709
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3715
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3723
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3730
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3736
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3742
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3748
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3754
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3761
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3768
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3776
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3782
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3794
		{
			var keyType = tree.INDEX_TYPE_HNSW
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, 0)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3800
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3806
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3814
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3818
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3825
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3843
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3858
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3873
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3888
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3901
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3907
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3918
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3930
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountUnlock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3941
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountLock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3954
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3958
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3966
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3970
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3975
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3979
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3995
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3999
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4003
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4007
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4014
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4018
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4022
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4026
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4033
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4037
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4044
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4048
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4052
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4056
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4063
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4070
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4076
		{
			yyVAL.item = nil
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4081
		{
			yyVAL.item = nil
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4130
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4136
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4142
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4148
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4157
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4165
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4173
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4181
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level: tree.RECOVERYWINDOWLEVELACCOUNT,
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4187
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4194
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4202
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:       tree.RECOVERYWINDOWLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4211
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4215
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4219
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4230
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4234
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4240
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4245
		{
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4249
		{
		}
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4254
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4264
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4274
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4282
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4288
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4294
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4300
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4306
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4312
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4318
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4327
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4331
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4335
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4339
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4343
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4347
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4351
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4355
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4361
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4370
		{
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4372
		{
		}
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4381
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4391
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4400
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4404
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4408
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4414
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4420
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4426
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4432
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4441
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4452
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4464
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4472
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4478
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4490
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4504
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4510
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4516
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4523
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4527
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4532
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4536
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4540
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4545
		{
			yyVAL.str = ""
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4549
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4555
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4570
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4574
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4580
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4588
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4595
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4603
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4609
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4615
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4620
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4628
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4634
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4639
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4645
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4651
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4655
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4683
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4691
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4699
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4707
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4711
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4717
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4730
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4738
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4747
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4753
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4761
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4769
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4777
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4783
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4791
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4797
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4805
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4811
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4821
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4826
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4833
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4849
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4862
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4873
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4877
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4883
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4889
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4898
		{
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4900
		{
		}
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4903
		{
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4912
		{
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4916
		{
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4921
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4930
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4937
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4943
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4951
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4958
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4965
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4985
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4993
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5003
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5007
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5013
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5020
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5026
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5034
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5041
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5048
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5067
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5071
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5075
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5080
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5084
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5088
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:5094
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5103
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5107
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5113
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5117
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5123
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5127
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5133
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5138
		{
		}
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5142
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5149
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5153
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5160
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5165
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5169
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5175
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5179
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5185
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5189
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5194
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5198
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5211
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5222
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5233
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5255
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5278
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5286
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5295
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5299
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5312
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5316
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5321
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5325
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5332
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5337
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5344
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5350
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5354
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5358
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5362
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5366
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5370
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5375
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5379
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5385
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5395
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5410
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5414
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5428
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5432
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5438
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5447
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5451
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5455
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5459
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5463
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5469
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5476
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5485
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5489
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5495
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5503
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5507
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5512
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5516
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5522
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5526
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5530
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5535
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5539
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5545
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5551
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5555
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5561
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5566
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5570
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5574
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5579
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5583
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5587
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5592
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5596
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5604
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5608
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5612
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5626
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5630
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5640
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5650
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5660
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5672
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5680
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5688
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5697
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5705
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5713
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5721
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5729
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5737
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5745
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5753
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5761
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5771
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: tree.QuerySpecOptionDistinct&yyDollar[2].selectOptionsUnion() != 0,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].selectOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5784
		{
			yyLOCAL = tree.QuerySpecOptionNone
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5788
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5794
		{
			yyLOCAL = yyDollar[1].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5798
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion() | yyDollar[2].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5804
		{
			yyLOCAL = tree.QuerySpecOptionSqlSmallResult
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5808
		{
			yyLOCAL = tree.QuerySpecOptionSqlBigResult
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5812
		{
			yyLOCAL = tree.QuerySpecOptionSqlBufferResult
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5816
		{
			yyLOCAL = tree.QuerySpecOptionStraightJoin
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5820
		{
			yyLOCAL = tree.QuerySpecOptionHighPriority
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5824
		{
			yyLOCAL = tree.QuerySpecOptionSqlCalcFoundRows
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5828
		{
			yyLOCAL = tree.QuerySpecOptionSqlNoCache
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5832
		{
			yyLOCAL = tree.QuerySpecOptionAll
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5836
		{
			yyLOCAL = tree.QuerySpecOptionDistinct
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5840
		{
			yyLOCAL = tree.QuerySpecOptionDistinctRow
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5862
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5866
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5871
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5875
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5885
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5894
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5903
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5914
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5918
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5923
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5927
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5932
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5936
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5942
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5946
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5952
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5956
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5960
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5964
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5969
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5977
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5983
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5991
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6001
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6011
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6015
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6021
		{
			if strings.Contains(yyDollar[2].str, ":") {
				ss := strings.SplitN(yyDollar[2].str, ":", 2)
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: ss[0],
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
					Option:   ss[1],
				}
			} else {
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: yyDollar[2].str,
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6041
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6050
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6059
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6067
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:6078
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6088
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6092
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6098
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 925:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6102
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6112
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 927:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6116
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6120
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 929:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6124
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6130
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 931:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6136
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6147
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6151
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:6157
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6163
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6167
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6173
		{
			yyVAL.str = yyDollar[1].str
		}
	case 938:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6180
		{
			yyVAL.str = yyDollar[2].str
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6186
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6192
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 941:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6196
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 942:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6200
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 943:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6204
		{
			yyVAL.str = tree.JOIN_TYPE_CENTROIDX + ":" + yyDollar[2].str
		}
	case 944:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6210
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6214
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6220
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6224
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6230
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6234
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6240
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6244
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6254
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6267
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6273
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6279
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6293
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6304
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6311
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6315
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6321
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6331
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6335
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6339
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6344
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6348
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6352
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6356
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6361
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6365
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6369
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6373
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6377
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6382
		{
			yyVAL.str = ""
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6386
		{
			yyVAL.str = yyDollar[1].str
		}
	case 976:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6390
		{
			yyVAL.str = yyDollar[2].str
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6396
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6400
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 979:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6405
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6409
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6413
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6417
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6421
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6427
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1007:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6469
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6482
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6488
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1010:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6494
		{
			yyLOCAL = tree.NewCreateProcedure(
				yyDollar[2].sourceOptionalUnion(), yyDollar[4].procNameUnion(), yyDollar[6].procArgsUnion(), yyDollar[8].str, yyDollar[9].str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6502
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6507
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6514
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6521
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6525
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6531
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6537
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6542
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6546
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6550
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6554
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6559
		{
			yyVAL.str = "sql"
		}
	case 1024:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6563
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1025:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6570
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6603
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6608
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6615
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6622
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6626
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6632
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6638
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6642
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6646
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6652
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6658
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6664
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6668
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6674
		{
			yyVAL.str = ""
		}
	case 1042:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6681
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1043:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6687
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6702
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6719
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6736
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1047:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6740
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1048:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6746
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1049:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6750
		{
			yyVAL.str = "DEFINER = "
		}
	case 1050:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6754
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1051:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6759
		{
			yyVAL.str = ""
		}
	case 1052:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6763
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1058:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6777
		{
			yyVAL.str = ""
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6785
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6791
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6796
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6802
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6815
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6820
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6825
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6831
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6838
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6845
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6852
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6859
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6867
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6873
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6880
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6887
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6895
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6901
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6910
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6927
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6943
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6962
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6968
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6977
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6995
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:7001
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:7008
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:7016
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:7022
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7030
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7036
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7044
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7050
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7059
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7063
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7068
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7072
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:7079
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1099:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7084
		{
			yyVAL.str = ""
		}
	case 1100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7088
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1101:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7094
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7107
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7118
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7122
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7128
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7134
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7140
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7147
		{
			yyVAL.str = ""
		}
	case 1109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7151
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1110:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7156
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7160
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7166
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7174
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7182
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7190
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = &tree.DropPitr{
				IfExists: ifExists,
				Name:     name,
				Internal: yyDollar[5].boolValUnion(),
			}

		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7203
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7208
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7220
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7231
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7340
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7344
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7350
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7363
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7367
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7373
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7386
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7390
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7394
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7399
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7403
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7409
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7416
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7422
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7431
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1136:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7438
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7449
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7453
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7459
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7468
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7472
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7476
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7481
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7485
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7489
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7493
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7499
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7530
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7534
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				} else if opt2.HnswM > 0 {
					opt1.HnswM = opt2.HnswM
				} else if opt2.HnswEfConstruction > 0 {
					opt1.HnswEfConstruction = opt2.HnswEfConstruction
				} else if len(opt2.HnswQuantization) > 0 {
					opt1.HnswQuantization = opt2.HnswQuantization
				} else if opt2.HnswEfSearch > 0 {
					opt1.HnswEfSearch = opt2.HnswEfSearch
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7568
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7574
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7586
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7592
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7598
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7604
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7610
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7616
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("M should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswM = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7627
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_CONSTRUCTION should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfConstruction = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7638
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_SEARCH should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfSearch = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7649
		{
			io := tree.NewIndexOption()
			io.HnswQuantization = yyDollar[3].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7658
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7662
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7668
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7682
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7696
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7700
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7704
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7708
		{
			yyLOCAL = tree.INDEX_TYPE_HNSW
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7712
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7716
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7720
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7724
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7730
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7744
		{
			var t = tree.NewCloneDatabase()
			t.DstDatabase = tree.Identifier(yyDollar[4].str)
			t.SrcDatabase = tree.Identifier(yyDollar[6].str)
			t.AtTsExpr = yyDollar[7].atTimeStampUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7752
		{
			var t = tree.NewCloneDatabase()
			t.DstDatabase = tree.Identifier(yyDollar[4].str)
			t.SrcDatabase = tree.Identifier(yyDollar[6].str)
			t.AtTsExpr = yyDollar[7].atTimeStampUnion()
			t.ToAccountName = tree.Identifier(yyDollar[10].cstrUnion().Compare())
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7762
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7766
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7777
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7781
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7786
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7790
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7795
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7799
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7805
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7809
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7815
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7824
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7833
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7839
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7843
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7849
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7860
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7866
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7884
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7902
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7920
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7936
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7940
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7949
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7961
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7970
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7982
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7992
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8002
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8013
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8023
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8034
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8042
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8051
		{
			t := tree.NewCloneTable()
			t.CreateTable.Table = *yyDollar[5].tableNameUnion()
			t.CreateTable.LikeTableName = *yyDollar[7].tableNameUnion()
			t.CreateTable.IsAsLike = true
			t.SrcTable = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8060
		{
			t := tree.NewCloneTable()
			t.CreateTable.Table = *yyDollar[5].tableNameUnion()
			t.CreateTable.LikeTableName = *yyDollar[7].tableNameUnion()
			t.CreateTable.IsAsLike = true
			t.SrcTable = *yyDollar[7].tableNameUnion()
			t.ToAccountName = tree.Identifier(yyDollar[10].cstrUnion().Compare())
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8072
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8079
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8089
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8102
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8110
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8119
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8128
		{
			yyVAL.str = ""
		}
	case 1220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:8132
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8138
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8142
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8147
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8151
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:8158
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8170
		{
			yyVAL.str = ""
		}
	case 1227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8174
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1228:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8180
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8201
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8215
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8219
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8223
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8229
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8233
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8240
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8247
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8254
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8261
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8265
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8269
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8273
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8277
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8284
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8291
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8295
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8302
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8309
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8313
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8319
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8325
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8329
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8336
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8343
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8350
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8357
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8361
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8366
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8370
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8374
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8379
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8383
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8396
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8400
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8408
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8416
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8420
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8432
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8436
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8442
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8446
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8452
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8465
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8479
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8483
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8489
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8493
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8499
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8508
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8519
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8523
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8528
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8532
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8538
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8543
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8551
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8555
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8565
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8569
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8580
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8588
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8596
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8604
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8615
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8624
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8634
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8644
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8648
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8653
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8657
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8663
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8667
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8673
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8682
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8692
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8696
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8702
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8706
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8712
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8721
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8731
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8735
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8741
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8745
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8749
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8755
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8759
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8763
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8767
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8771
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8775
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8779
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8784
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8788
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8792
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8796
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8800
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8804
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8808
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8812
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8816
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8820
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8824
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8828
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8832
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8838
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8844
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8848
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8852
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8856
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8860
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8866
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8872
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8878
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8884
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8890
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8896
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8900
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8904
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8908
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8913
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8924
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8928
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8934
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8945
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8949
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8955
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8959
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8963
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8967
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8971
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8975
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8989
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8993
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:9002
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:9008
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9016
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9020
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9027
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9036
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9044
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9051
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ASOFTIMESTAMP,
				Expr: tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9059
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9066
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9070
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9076
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9080
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9084
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9090
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9094
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9100
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9113
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9126
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9167
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9209
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9223
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9229
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9242
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9255
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9268
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9281
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9296
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9306
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9312
		{
			yyVAL.str = ""
		}
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9316
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9326
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9332
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9338
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9360
		{
			yyVAL.str = ""
		}
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9364
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9370
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9376
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9380
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9385
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9393
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9397
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9401
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9405
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9411
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9417
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9421
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9426
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9433
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9437
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9443
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9447
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9453
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9457
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9461
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9465
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9469
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9473
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9478
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9482
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9486
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9490
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9494
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9498
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9502
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9506
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9510
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9514
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9528
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9532
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9536
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9540
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9544
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9548
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9554
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9558
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9563
		{
			yyVAL.str = ""
		}
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9567
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9573
		{
			yyVAL.str = ""
		}
	case 1463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9577
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1464:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9583
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9600
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9607
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9614
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9621
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9628
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9637
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9643
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9649
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9653
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9657
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9661
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9665
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9670
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9677
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9681
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9685
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9690
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9694
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9698
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9702
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9706
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9711
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9715
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9720
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9724
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9740
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9746
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9750
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9754
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9758
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9762
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9766
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9770
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9774
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9778
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9782
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9786
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9790
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9794
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9800
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9804
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9808
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9812
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9816
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9820
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9824
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9828
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9832
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9836
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9878
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9882
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9886
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9891
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9899
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9903
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9907
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9911
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9915
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9925
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9929
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9933
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9937
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9941
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9945
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9949
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9953
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9966
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1539:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9972
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9981
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9990
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10001
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10011
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10021
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10030
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10040
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10050
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10060
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10069
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10079
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10083
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10088
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10092
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10098
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10102
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:10108
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10117
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10129
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10146
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10163
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10176
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10189
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10201
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10215
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10230
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10245
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10262
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10277
		{
		}
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10284
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10288
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10292
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10298
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10302
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10306
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10310
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10316
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10320
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10324
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10330
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10338
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10348
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10352
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10359
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10364
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10368
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10373
		{
			yyVAL.str = ","
		}
	case 1591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10377
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10382
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10386
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1594:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10391
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10398
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10424
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10436
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10448
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10459
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10470
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10481
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10491
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10501
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10512
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10523
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10534
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10545
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10556
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10567
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10578
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10589
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10600
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10611
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10622
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10633
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10644
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10655
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10666
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10690
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10699
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10708
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10717
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10726
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10737
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10746
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10756
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10765
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10774
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10783
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10792
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10804
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10815
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10828
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10840
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10863
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1674:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10899
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10912
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10925
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10937
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10946
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10954
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10962
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10975
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10984
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10995
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11006
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11015
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11027
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11037
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11047
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11056
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11067
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11076
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11086
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11095
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11104
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11114
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11118
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11124
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11128
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11147
		{
		}
	case 1706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:11149
		{
		}
	case 1741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11191
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11203
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11207
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11211
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:11217
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11222
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11226
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11232
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11236
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11242
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11246
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11253
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11257
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11261
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11270
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11274
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11278
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11283
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11287
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11293
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11297
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11301
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11305
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11309
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11313
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11317
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11321
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11325
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11329
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11337
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11341
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11345
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11349
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11353
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11357
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11361
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11365
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11369
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11373
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11379
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11383
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11389
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11393
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11400
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11404
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11408
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11414
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11418
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11422
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11426
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11430
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11434
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11438
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11444
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11448
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11452
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11456
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11462
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11475
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11480
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11486
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11490
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11503
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11508
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11512
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11516
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11520
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11524
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11531
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11535
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11539
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11543
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11550
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11561
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11566
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11572
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11584
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11596
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11608
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11621
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11634
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11647
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11660
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11673
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11686
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11699
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11712
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11725
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11738
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11753
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11780
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11822
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11858
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11894
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11911
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11923
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11943
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1843:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11963
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1844:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11983
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1845:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11999
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1846:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12012
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1847:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12025
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12038
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12051
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12063
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1851:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12075
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1852:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12087
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1853:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12099
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1854:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12111
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12123
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12135
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12147
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12159
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1859:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12171
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12184
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1861:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12197
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1862:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12210
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1863:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12223
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1864:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12238
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1865:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12246
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1866:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12255
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12265
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12288
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1869:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12293
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1870:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12299
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1872:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12306
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1873:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12310
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1874:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12315
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1875:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12319
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1876:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12325
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1877:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12331
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1878:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12338
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1879:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12345
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1880:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12354
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1881:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12361
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1882:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12368
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1883:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12377
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12381
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12385
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1886:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12391
		{
		}
	case 1887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12393
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1891:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12403
		{
			yyVAL.str = ""
		}
	case 1892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12407
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
