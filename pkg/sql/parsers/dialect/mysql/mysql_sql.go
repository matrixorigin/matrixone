// Code generated by goyacc -o mysql_sql.go -c mysql mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const DISTINCTROW = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const SUBQUERY_AS_EXPR = 57394
const LOWER_THAN_STRING = 57395
const ID = 57396
const AT_ID = 57397
const AT_AT_ID = 57398
const STRING = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const INTEGRAL = 57404
const HEX = 57405
const BIT_LITERAL = 57406
const FLOAT = 57407
const HEXNUM = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const LOWER_THAN_CHARSET = 57412
const CHARSET = 57413
const UNIQUE = 57414
const KEY = 57415
const OR = 57416
const PIPE_CONCAT = 57417
const XOR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const LE = 57427
const GE = 57428
const NE = 57429
const NULL_SAFE_EQUAL = 57430
const IS = 57431
const LIKE = 57432
const REGEXP = 57433
const IN = 57434
const ASSIGNMENT = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const BEGIN = 57445
const START = 57446
const TRANSACTION = 57447
const COMMIT = 57448
const ROLLBACK = 57449
const WORK = 57450
const CONSISTENT = 57451
const SNAPSHOT = 57452
const CHAIN = 57453
const NO = 57454
const RELEASE = 57455
const BIT = 57456
const TINYINT = 57457
const SMALLINT = 57458
const MEDIUMINT = 57459
const INT = 57460
const INTEGER = 57461
const BIGINT = 57462
const INTNUM = 57463
const REAL = 57464
const DOUBLE = 57465
const FLOAT_TYPE = 57466
const DECIMAL = 57467
const NUMERIC = 57468
const DECIMAL_VALUE = 57469
const TIME = 57470
const TIMESTAMP = 57471
const DATETIME = 57472
const YEAR = 57473
const CHAR = 57474
const VARCHAR = 57475
const BOOL = 57476
const CHARACTER = 57477
const VARBINARY = 57478
const NCHAR = 57479
const TEXT = 57480
const TINYTEXT = 57481
const MEDIUMTEXT = 57482
const LONGTEXT = 57483
const BLOB = 57484
const TINYBLOB = 57485
const MEDIUMBLOB = 57486
const LONGBLOB = 57487
const JSON = 57488
const ENUM = 57489
const GEOMETRY = 57490
const POINT = 57491
const LINESTRING = 57492
const POLYGON = 57493
const GEOMETRYCOLLECTION = 57494
const MULTIPOINT = 57495
const MULTILINESTRING = 57496
const MULTIPOLYGON = 57497
const INT1 = 57498
const INT2 = 57499
const INT3 = 57500
const INT4 = 57501
const INT8 = 57502
const SQL_SMALL_RESULT = 57503
const SQL_BIG_RESULT = 57504
const SQL_BUFFER_RESULT = 57505
const CREATE = 57506
const ALTER = 57507
const DROP = 57508
const RENAME = 57509
const ANALYZE = 57510
const ADD = 57511
const SCHEMA = 57512
const TABLE = 57513
const INDEX = 57514
const VIEW = 57515
const TO = 57516
const IGNORE = 57517
const IF = 57518
const PRIMARY = 57519
const COLUMN = 57520
const CONSTRAINT = 57521
const SPATIAL = 57522
const FULLTEXT = 57523
const FOREIGN = 57524
const KEY_BLOCK_SIZE = 57525
const SHOW = 57526
const DESCRIBE = 57527
const EXPLAIN = 57528
const DATE = 57529
const ESCAPE = 57530
const REPAIR = 57531
const OPTIMIZE = 57532
const TRUNCATE = 57533
const MAXVALUE = 57534
const PARTITION = 57535
const REORGANIZE = 57536
const LESS = 57537
const THAN = 57538
const PROCEDURE = 57539
const TRIGGER = 57540
const STATUS = 57541
const VARIABLES = 57542
const ROLE = 57543
const PROXY = 57544
const AVG_ROW_LENGTH = 57545
const STORAGE = 57546
const DISK = 57547
const MEMORY = 57548
const CHECKSUM = 57549
const COMPRESSION = 57550
const DATA = 57551
const DIRECTORY = 57552
const DELAY_KEY_WRITE = 57553
const ENCRYPTION = 57554
const ENGINE = 57555
const MAX_ROWS = 57556
const MIN_ROWS = 57557
const PACK_KEYS = 57558
const ROW_FORMAT = 57559
const STATS_AUTO_RECALC = 57560
const STATS_PERSISTENT = 57561
const STATS_SAMPLE_PAGES = 57562
const DYNAMIC = 57563
const COMPRESSED = 57564
const REDUNDANT = 57565
const COMPACT = 57566
const FIXED = 57567
const COLUMN_FORMAT = 57568
const AUTO_RANDOM = 57569
const RESTRICT = 57570
const CASCADE = 57571
const ACTION = 57572
const PARTIAL = 57573
const SIMPLE = 57574
const CHECK = 57575
const ENFORCED = 57576
const RANGE = 57577
const LIST = 57578
const ALGORITHM = 57579
const LINEAR = 57580
const PARTITIONS = 57581
const SUBPARTITION = 57582
const SUBPARTITIONS = 57583
const TYPE = 57584
const ANY = 57585
const SOME = 57586
const PREPARE = 57587
const DEALLOCATE = 57588
const PROPERTIES = 57589
const PARSER = 57590
const VISIBLE = 57591
const INVISIBLE = 57592
const BTREE = 57593
const HASH = 57594
const RTREE = 57595
const BSI = 57596
const ZONEMAP = 57597
const LEADING = 57598
const BOTH = 57599
const TRAILING = 57600
const UNKNOWN = 57601
const EXPIRE = 57602
const ACCOUNT = 57603
const UNLOCK = 57604
const DAY = 57605
const NEVER = 57606
const SECOND = 57607
const ASCII = 57608
const COALESCE = 57609
const COLLATION = 57610
const HOUR = 57611
const MICROSECOND = 57612
const MINUTE = 57613
const MONTH = 57614
const QUARTER = 57615
const REPEAT = 57616
const REVERSE = 57617
const ROW_COUNT = 57618
const WEEK = 57619
const REVOKE = 57620
const FUNCTION = 57621
const PRIVILEGES = 57622
const TABLESPACE = 57623
const EXECUTE = 57624
const SUPER = 57625
const GRANT = 57626
const OPTION = 57627
const REFERENCES = 57628
const REPLICATION = 57629
const SLAVE = 57630
const CLIENT = 57631
const USAGE = 57632
const RELOAD = 57633
const FILE = 57634
const TEMPORARY = 57635
const ROUTINE = 57636
const EVENT = 57637
const SHUTDOWN = 57638
const NULLX = 57639
const AUTO_INCREMENT = 57640
const APPROXNUM = 57641
const SIGNED = 57642
const UNSIGNED = 57643
const ZEROFILL = 57644
const USER = 57645
const IDENTIFIED = 57646
const CIPHER = 57647
const ISSUER = 57648
const X509 = 57649
const SUBJECT = 57650
const SAN = 57651
const REQUIRE = 57652
const SSL = 57653
const NONE = 57654
const PASSWORD = 57655
const MAX_QUERIES_PER_HOUR = 57656
const MAX_UPDATES_PER_HOUR = 57657
const MAX_CONNECTIONS_PER_HOUR = 57658
const MAX_USER_CONNECTIONS = 57659
const FORMAT = 57660
const VERBOSE = 57661
const CONNECTION = 57662
const LOAD = 57663
const INFILE = 57664
const TERMINATED = 57665
const OPTIONALLY = 57666
const ENCLOSED = 57667
const ESCAPED = 57668
const STARTING = 57669
const LINES = 57670
const DATABASES = 57671
const TABLES = 57672
const EXTENDED = 57673
const FULL = 57674
const PROCESSLIST = 57675
const FIELDS = 57676
const COLUMNS = 57677
const OPEN = 57678
const ERRORS = 57679
const WARNINGS = 57680
const INDEXES = 57681
const SCHEMAS = 57682
const NAMES = 57683
const GLOBAL = 57684
const SESSION = 57685
const ISOLATION = 57686
const LEVEL = 57687
const READ = 57688
const WRITE = 57689
const ONLY = 57690
const REPEATABLE = 57691
const COMMITTED = 57692
const UNCOMMITTED = 57693
const SERIALIZABLE = 57694
const LOCAL = 57695
const EXCEPT = 57696
const CURRENT_TIMESTAMP = 57697
const DATABASE = 57698
const CURRENT_TIME = 57699
const LOCALTIME = 57700
const LOCALTIMESTAMP = 57701
const UTC_DATE = 57702
const UTC_TIME = 57703
const UTC_TIMESTAMP = 57704
const REPLACE = 57705
const CONVERT = 57706
const SEPARATOR = 57707
const CURRENT_DATE = 57708
const CURRENT_USER = 57709
const CURRENT_ROLE = 57710
const SECOND_MICROSECOND = 57711
const MINUTE_MICROSECOND = 57712
const MINUTE_SECOND = 57713
const HOUR_MICROSECOND = 57714
const HOUR_SECOND = 57715
const HOUR_MINUTE = 57716
const DAY_MICROSECOND = 57717
const DAY_SECOND = 57718
const DAY_MINUTE = 57719
const DAY_HOUR = 57720
const YEAR_MONTH = 57721
const SQL_TSI_HOUR = 57722
const SQL_TSI_DAY = 57723
const SQL_TSI_WEEK = 57724
const SQL_TSI_MONTH = 57725
const SQL_TSI_QUARTER = 57726
const SQL_TSI_YEAR = 57727
const SQL_TSI_SECOND = 57728
const SQL_TSI_MINUTE = 57729
const RECURSIVE = 57730
const CONFIG = 57731
const MATCH = 57732
const AGAINST = 57733
const BOOLEAN = 57734
const LANGUAGE = 57735
const WITH = 57736
const QUERY = 57737
const EXPANSION = 57738
const ADDDATE = 57739
const BIT_AND = 57740
const BIT_OR = 57741
const BIT_XOR = 57742
const CAST = 57743
const COUNT = 57744
const APPROX_COUNT_DISTINCT = 57745
const APPROX_PERCENTILE = 57746
const CURDATE = 57747
const CURTIME = 57748
const DATE_ADD = 57749
const DATE_SUB = 57750
const EXTRACT = 57751
const GROUP_CONCAT = 57752
const MAX = 57753
const MID = 57754
const MIN = 57755
const NOW = 57756
const POSITION = 57757
const SESSION_USER = 57758
const STD = 57759
const STDDEV = 57760
const STDDEV_POP = 57761
const STDDEV_SAMP = 57762
const SUBDATE = 57763
const SUBSTR = 57764
const SUBSTRING = 57765
const SUM = 57766
const SYSDATE = 57767
const SYSTEM_USER = 57768
const TRANSLATE = 57769
const TRIM = 57770
const VARIANCE = 57771
const VAR_POP = 57772
const VAR_SAMP = 57773
const AVG = 57774
const ROW = 57775
const OUTFILE = 57776
const HEADER = 57777
const MAX_FILE_SIZE = 57778
const FORCE_QUOTE = 57779
const UNUSED = 57780

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"INTEGRAL",
	"HEX",
	"BIT_LITERAL",
	"FLOAT",
	"HEXNUM",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"TYPE",
	"ANY",
	"SOME",
	"PREPARE",
	"DEALLOCATE",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"EXPIRE",
	"ACCOUNT",
	"UNLOCK",
	"DAY",
	"NEVER",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"LOAD",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"DATABASES",
	"TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EXCEPT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT_DISTINCT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"UNUSED",
	"';'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:6546

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 55,
	17, 368,
	-2, 349,
	-1, 60,
	189, 516,
	-2, 552,
	-1, 70,
	216, 257,
	217, 257,
	-2, 278,
	-1, 324,
	58, 1331,
	457, 1331,
	-2, 93,
	-1, 343,
	58, 677,
	457, 677,
	-2, 514,
	-1, 344,
	58, 507,
	457, 507,
	-2, 515,
	-1, 350,
	17, 369,
	-2, 332,
	-1, 409,
	89, 1210,
	100, 1210,
	119, 1210,
	-2, 1038,
	-1, 586,
	17, 369,
	-2, 332,
	-1, 608,
	53, 1360,
	-2, 1367,
	-1, 616,
	53, 1361,
	-2, 1375,
	-1, 618,
	53, 1357,
	-2, 1377,
	-1, 619,
	53, 1358,
	-2, 1378,
	-1, 624,
	53, 1359,
	-2, 1384,
	-1, 625,
	53, 1362,
	-2, 1385,
	-1, 626,
	53, 1363,
	-2, 1386,
	-1, 627,
	53, 803,
	-2, 1387,
	-1, 628,
	53, 804,
	-2, 1388,
	-1, 629,
	53, 805,
	-2, 1389,
	-1, 631,
	53, 1364,
	-2, 1391,
	-1, 632,
	53, 822,
	-2, 1392,
	-1, 633,
	53, 821,
	-2, 1393,
	-1, 636,
	53, 1365,
	-2, 1396,
	-1, 637,
	53, 1366,
	-2, 1397,
	-1, 643,
	53, 884,
	-2, 1210,
	-1, 644,
	53, 893,
	-2, 1236,
	-1, 645,
	53, 897,
	-2, 1275,
	-1, 646,
	53, 908,
	-2, 1336,
	-1, 647,
	53, 910,
	-2, 1346,
	-1, 648,
	53, 898,
	-2, 1351,
	-1, 649,
	53, 906,
	-2, 1355,
	-1, 650,
	53, 887,
	-2, 1356,
	-1, 807,
	1, 542,
	55, 542,
	456, 542,
	-2, 549,
	-1, 936,
	17, 368,
	-2, 735,
	-1, 982,
	119, 1048,
	-2, 1046,
	-1, 984,
	119, 456,
	-2, 1043,
	-1, 985,
	119, 457,
	-2, 1044,
	-1, 1180,
	1, 543,
	55, 543,
	456, 543,
	-2, 549,
	-1, 1239,
	53, 951,
	-2, 1353,
	-1, 1240,
	53, 952,
	-2, 1354,
	-1, 1635,
	74, 549,
	115, 549,
	149, 549,
	152, 549,
	-2, 589,
	-1, 1637,
	250, 702,
	-2, 683,
	-1, 1758,
	74, 549,
	115, 549,
	149, 549,
	152, 549,
	-2, 590,
	-1, 1786,
	250, 702,
	-2, 684,
	-1, 2177,
	54, 564,
	55, 564,
	-2, 549,
	-1, 2181,
	54, 564,
	55, 564,
	-2, 549,
	-1, 2193,
	54, 568,
	55, 568,
	-2, 549,
	-1, 2196,
	54, 569,
	55, 569,
	-2, 549,
}

const yyPrivate = 57344

const yyLast = 21946

var yyAct = [...]int{
	797, 1242, 2183, 2181, 2180, 2188, 2154, 653, 2128, 1830,
	786, 2018, 671, 2099, 2143, 1798, 2080, 1994, 2081, 1754,
	1997, 477, 1972, 538, 1167, 88, 1629, 1828, 299, 299,
	863, 1927, 1829, 1982, 573, 1547, 91, 1820, 473, 651,
	311, 1712, 1243, 88, 313, 1900, 1696, 1787, 1414, 1523,
	1819, 523, 345, 345, 1718, 1715, 1519, 407, 846, 597,
	303, 20, 1725, 1556, 1391, 87, 1507, 1721, 607, 1535,
	1524, 1528, 1682, 682, 55, 1574, 1173, 408, 1563, 1573,
	964, 652, 1459, 425, 870, 581, 973, 88, 979, 781,
	528, 982, 974, 965, 1326, 784, 662, 306, 1312, 1421,
	54, 55, 302, 13, 1230, 3, 839, 300, 6, 301,
	5, 1385, 734, 814, 1181, 756, 799, 1256, 782, 351,
	1762, 350, 1244, 1241, 600, 815, 511, 438, 367, 843,
	816, 292, 865, 449, 1140, 475, 295, 872, 903, 424,
	1149, 582, 315, 399, 773, 20, 565, 320, 320, 317,
	316, 84, 414, 416, 461, 1156, 490, 307, 55, 1845,
	304, 1750, 1628, 794, 967, 422, 83, 599, 24, 42,
	25, 83, 2046, 24, 42, 25, 352, 83, 551, 1367,
	415, 83, 1152, 83, 1508, 1386, 2035, 13, 81, 521,
	435, 1374, 6, 545, 5, 347, 83, 410, 833, 412,
	510, 372, 400, 828, 829, 539, 540, 731, 1658, 1377,
	728, 386, 818, 79, 789, 420, 419, 537, 79, 505,
	536, 539, 540, 1484, 79, 2103, 552, 501, 79, 1925,
	730, 2084, 2085, 1928, 1929, 1930, 1931, 1511, 2006, 2009,
	1512, 549, 1513, 79, 2068, 418, 2066, 1848, 1630, 793,
	1536, 1537, 1538, 1539, 411, 1354, 1152, 443, 387, 1394,
	1392, 1389, 1393, 1395, 452, 1388, 1387, 840, 1560, 363,
	1557, 1394, 1392, 1154, 1393, 1395, 1899, 1807, 1806, 492,
	503, 504, 1803, 1747, 502, 1625, 491, 1915, 1706, 1707,
	774, 2070, 88, 442, 1646, 1427, 1234, 1235, 2094, 1703,
	1905, 2173, 441, 2189, 2108, 2065, 88, 2020, 2045, 1665,
	1669, 1671, 1673, 1675, 1676, 1678, 776, 1586, 1583, 1584,
	1585, 2115, 1559, 1660, 1661, 1662, 1663, 1644, 1645, 1666,
	1996, 1647, 2083, 1648, 1649, 1650, 1651, 1652, 1653, 1654,
	1655, 1656, 1657, 1664, 2043, 1894, 457, 417, 478, 1863,
	2164, 1668, 1670, 1672, 1674, 1677, 452, 1983, 1984, 1985,
	1987, 1986, 1397, 1398, 1399, 1400, 2016, 2017, 1862, 2020,
	55, 55, 416, 349, 2048, 2049, 2026, 1704, 546, 1375,
	2190, 365, 1659, 500, 2072, 2073, 483, 1540, 561, 440,
	499, 362, 361, 2184, 2155, 1851, 345, 437, 775, 415,
	421, 1460, 408, 408, 408, 524, 522, 345, 345, 525,
	550, 527, 357, 482, 454, 453, 1889, 535, 534, 2004,
	1371, 487, 1203, 1160, 425, 801, 516, 603, 603, 526,
	1626, 305, 391, 445, 446, 1885, 1532, 378, 1723, 1722,
	733, 1412, 578, 1233, 1234, 1235, 1201, 1200, 1199, 555,
	553, 554, 831, 832, 1231, 1198, 748, 2146, 530, 442,
	88, 88, 88, 88, 830, 542, 543, 388, 757, 602,
	602, 770, 389, 2168, 2132, 1514, 1424, 1365, 1857, 1500,
	1364, 393, 392, 1353, 2071, 584, 854, 345, 345, 442,
	345, 320, 529, 513, 531, 1347, 447, 729, 787, 1193,
	1995, 1426, 575, 575, 360, 1165, 454, 453, 345, 345,
	55, 478, 380, 771, 356, 379, 1134, 753, 884, 2047,
	736, 55, 580, 455, 345, 921, 345, 439, 807, 1175,
	55, 2150, 88, 585, 587, 412, 586, 841, 560, 1508,
	1705, 515, 539, 540, 539, 540, 823, 1702, 806, 1533,
	345, 571, 572, 2141, 1155, 489, 2147, 796, 507, 752,
	800, 1548, 345, 408, 750, 345, 751, 364, 821, 2030,
	1957, 82, 811, 802, 1368, 541, 82, 1349, 544, 1246,
	1245, 855, 82, 320, 739, 788, 82, 1667, 82, 596,
	411, 345, 345, 862, 88, 726, 425, 791, 824, 871,
	583, 82, 1205, 881, 568, 569, 570, 532, 847, 1890,
	1891, 809, 566, 803, 847, 847, 866, 758, 759, 760,
	761, 320, 564, 567, 769, 812, 813, 792, 1138, 1394,
	1392, 867, 1393, 1395, 864, 1502, 777, 785, 1607, 825,
	795, 808, 496, 810, 1887, 1529, 1532, 885, 1886, 1232,
	1151, 790, 428, 433, 434, 819, 820, 320, 938, 590,
	591, 592, 593, 594, 817, 1575, 1251, 1327, 805, 378,
	497, 857, 2144, 2145, 924, 925, 926, 927, 928, 921,
	860, 444, 1327, 842, 1465, 1501, 1383, 320, 1586, 1583,
	1584, 1585, 563, 804, 1580, 533, 1579, 1578, 1576, 937,
	1150, 852, 853, 877, 837, 1896, 838, 945, 856, 1895,
	1403, 1319, 1686, 858, 1681, 849, 850, 851, 880, 877,
	390, 743, 744, 1880, 947, 1317, 1318, 1316, 1254, 859,
	936, 971, 971, 976, 861, 868, 77, 2179, 1255, 939,
	940, 941, 942, 2160, 380, 1168, 1169, 379, 1740, 2125,
	494, 2109, 2055, 1577, 1968, 871, 2002, 415, 984, 1533,
	943, 2001, 495, 498, 1526, 1966, 1974, 1952, 1527, 1530,
	1951, 1950, 493, 985, 911, 2163, 961, 1947, 978, 1958,
	1960, 1961, 1962, 1959, 1739, 2193, 878, 879, 880, 877,
	1967, 878, 879, 880, 877, 1609, 394, 878, 879, 880,
	877, 1965, 88, 88, 416, 747, 878, 879, 880, 877,
	430, 431, 432, 746, 55, 413, 2162, 1964, 299, 1941,
	1531, 1447, 1938, 970, 1404, 1195, 1937, 955, 1846, 1839,
	1148, 415, 1468, 1954, 345, 1467, 1838, 866, 1837, 1135,
	1836, 1835, 1170, 1172, 922, 923, 924, 925, 926, 927,
	928, 921, 867, 1963, 977, 345, 412, 2077, 878, 879,
	880, 877, 1277, 1832, 963, 1446, 1581, 1582, 1136, 1953,
	1692, 1691, 983, 1690, 603, 1133, 88, 1132, 1689, 878,
	879, 880, 877, 1226, 1755, 1228, 1496, 878, 879, 880,
	877, 737, 847, 847, 847, 1145, 878, 879, 880, 877,
	2104, 2093, 1196, 1252, 1253, 1187, 929, 930, 922, 923,
	924, 925, 926, 927, 928, 921, 602, 479, 480, 481,
	1222, 1223, 1224, 1225, 1184, 1185, 1186, 961, 1182, 320,
	1189, 1159, 1191, 888, 889, 890, 891, 892, 893, 894,
	886, 2076, 1249, 1973, 2037, 1596, 2024, 817, 1188, 1190,
	1210, 2023, 1192, 1955, 1948, 1291, 1236, 1164, 1336, 1300,
	1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310,
	1311, 1944, 1943, 1221, 1321, 1322, 1202, 1942, 1901, 1206,
	1207, 1208, 1882, 1847, 1211, 1218, 1212, 1415, 1753, 1328,
	1751, 1331, 1699, 1163, 1273, 1545, 1270, 1544, 1219, 1338,
	1272, 1269, 1271, 1275, 1276, 1543, 1542, 1162, 1274, 1161,
	1790, 878, 879, 880, 877, 1320, 878, 879, 880, 877,
	1247, 1248, 957, 1250, 2000, 918, 917, 738, 1314, 1286,
	1287, 1288, 1289, 1290, 2171, 2052, 1296, 1297, 1298, 1299,
	1430, 2198, 2192, 2191, 1923, 1793, 878, 879, 880, 877,
	1474, 1788, 2051, 1430, 1473, 1910, 1801, 1802, 1158, 2174,
	2170, 2169, 1789, 1352, 1840, 1329, 878, 879, 880, 877,
	1733, 2031, 1330, 1332, 1333, 2161, 1341, 878, 879, 880,
	877, 1918, 1337, 1470, 1339, 1340, 878, 879, 880, 877,
	1158, 2158, 878, 879, 880, 877, 1794, 1158, 2157, 1917,
	1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267,
	1268, 1280, 1281, 1282, 1283, 1284, 1285, 1278, 1279, 1732,
	1916, 920, 919, 929, 930, 922, 923, 924, 925, 926,
	927, 928, 921, 2131, 2130, 1355, 354, 1741, 442, 1738,
	1731, 878, 879, 880, 877, 1737, 353, 757, 1615, 878,
	879, 880, 877, 345, 1912, 2091, 345, 1912, 2086, 442,
	1711, 345, 878, 879, 880, 877, 1380, 1606, 1370, 1635,
	878, 879, 880, 877, 1600, 1800, 1617, 1525, 1214, 2074,
	1562, 1359, 1434, 1561, 1360, 1477, 589, 1362, 1475, 878,
	879, 880, 877, 1472, 1409, 1471, 878, 879, 880, 877,
	2063, 2062, 1796, 1469, 345, 1439, 1378, 1379, 1436, 800,
	1599, 1912, 2041, 2138, 88, 88, 1912, 2040, 1420, 1598,
	1912, 2039, 1429, 1597, 1795, 1797, 1912, 2038, 2029, 2028,
	1382, 1411, 878, 879, 880, 877, 878, 879, 880, 877,
	1402, 878, 879, 880, 877, 878, 879, 880, 877, 1335,
	1372, 1369, 1435, 1358, 1417, 1418, 1357, 1334, 412, 920,
	919, 929, 930, 922, 923, 924, 925, 926, 927, 928,
	921, 1366, 1979, 1980, 1979, 1978, 20, 1922, 1921, 875,
	1406, 772, 1407, 1381, 1803, 1920, 1919, 1431, 588, 55,
	1432, 1433, 2149, 1413, 1430, 1401, 1791, 1912, 1911, 1342,
	1405, 1182, 1217, 1620, 1430, 1601, 1408, 506, 1410, 1430,
	1587, 485, 1416, 1430, 1438, 1430, 1437, 1454, 13, 1217,
	1356, 1419, 873, 6, 735, 5, 1351, 1350, 486, 1441,
	1442, 1443, 1444, 1445, 1428, 1449, 1425, 1345, 1344, 1450,
	1451, 1452, 1453, 1217, 1216, 1636, 971, 1152, 1488, 971,
	1158, 1157, 1491, 484, 1593, 741, 740, 485, 1457, 1458,
	1618, 1423, 871, 487, 345, 1348, 1137, 1462, 345, 345,
	1466, 487, 345, 1324, 1214, 1494, 878, 879, 880, 877,
	1166, 595, 562, 1478, 2194, 442, 847, 1592, 2140, 936,
	1495, 2134, 847, 2116, 1522, 2113, 2111, 88, 2054, 1456,
	83, 1992, 1483, 1977, 1904, 1485, 1591, 1975, 1490, 878,
	879, 880, 877, 1314, 1970, 1455, 415, 1932, 55, 1714,
	1464, 1908, 1907, 1906, 88, 1567, 1590, 1487, 878, 879,
	880, 877, 1178, 1903, 1589, 1489, 1480, 1546, 1486, 1549,
	1550, 1479, 1492, 1497, 1893, 1493, 1498, 79, 878, 879,
	880, 877, 1878, 1499, 383, 1541, 878, 879, 880, 877,
	2121, 1506, 1572, 1503, 1505, 1719, 1814, 1813, 2096, 345,
	1571, 1716, 598, 1569, 1726, 345, 1729, 1694, 1687, 1315,
	79, 1384, 1361, 1588, 878, 879, 880, 877, 1343, 1215,
	1594, 1595, 878, 879, 880, 877, 378, 1204, 548, 1553,
	1570, 1197, 962, 1611, 960, 345, 959, 958, 1608, 1613,
	1323, 956, 904, 1612, 953, 1567, 1614, 88, 952, 1551,
	1552, 1566, 878, 879, 880, 877, 1680, 950, 949, 948,
	1605, 946, 878, 879, 880, 877, 916, 915, 914, 1602,
	913, 912, 1604, 910, 909, 908, 907, 1610, 345, 906,
	345, 905, 902, 901, 900, 899, 735, 1634, 1616, 898,
	897, 896, 895, 754, 575, 1619, 732, 1710, 488, 2119,
	575, 380, 314, 2082, 379, 1396, 1633, 1141, 1142, 1213,
	1684, 1144, 1695, 1624, 463, 466, 467, 468, 464, 55,
	465, 469, 508, 768, 1679, 467, 468, 1147, 1643, 1683,
	1621, 1683, 1685, 377, 1688, 1693, 1146, 1709, 766, 764,
	763, 381, 762, 767, 765, 2178, 1346, 547, 458, 1701,
	1717, 1183, 1720, 345, 345, 346, 1509, 88, 463, 466,
	467, 468, 464, 512, 465, 469, 1516, 442, 1759, 1734,
	1168, 1169, 1176, 575, 1622, 1697, 1522, 1727, 827, 1730,
	1724, 1623, 1736, 463, 466, 467, 468, 464, 1849, 465,
	469, 847, 1515, 869, 471, 1131, 1700, 1748, 1246, 1245,
	518, 519, 1735, 514, 2135, 2059, 2057, 1743, 2011, 2010,
	2008, 1935, 1821, 1823, 1808, 1821, 1821, 1804, 1811, 1812,
	1933, 1746, 1752, 1784, 1756, 442, 1708, 1632, 354, 1631,
	1809, 1810, 1815, 1565, 517, 1818, 353, 1422, 353, 1564,
	735, 2123, 2122, 470, 1440, 1363, 1816, 1817, 1744, 1745,
	1822, 456, 291, 932, 2122, 935, 2123, 368, 1, 1292,
	1827, 520, 745, 427, 451, 1824, 1825, 742, 1826, 933,
	934, 931, 450, 920, 919, 929, 930, 922, 923, 924,
	925, 926, 927, 928, 921, 448, 78, 1834, 1325, 1257,
	683, 1853, 966, 972, 1971, 2095, 2127, 2053, 374, 2098,
	376, 386, 1843, 670, 654, 373, 371, 370, 382, 375,
	2003, 384, 385, 1841, 919, 929, 930, 922, 923, 924,
	925, 926, 927, 928, 921, 345, 1854, 1855, 1510, 1858,
	1859, 1860, 1861, 1924, 88, 1864, 1865, 1866, 1867, 1868,
	1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 2005,
	1856, 1926, 1376, 1842, 1373, 509, 1481, 1823, 366, 1482,
	1881, 695, 2136, 686, 1879, 951, 1804, 688, 727, 429,
	685, 1883, 1833, 1558, 1897, 355, 426, 369, 1898, 1627,
	1805, 1728, 1713, 2187, 2177, 1936, 2153, 2133, 2019, 2172,
	1902, 2064, 2114, 2107, 1909, 2015, 1850, 318, 834, 556,
	397, 1993, 1913, 755, 1914, 1534, 1390, 1969, 920, 919,
	929, 930, 922, 923, 924, 925, 926, 927, 928, 921,
	1697, 1174, 1939, 1940, 1153, 783, 319, 2044, 1945, 1946,
	1976, 358, 1177, 478, 442, 1949, 359, 442, 442, 442,
	1934, 1180, 1179, 442, 1237, 887, 1313, 954, 944, 605,
	1463, 661, 655, 55, 1555, 1554, 1799, 822, 28, 27,
	472, 1981, 876, 2013, 1989, 1990, 1991, 980, 1999, 1988,
	345, 345, 684, 90, 1194, 1998, 981, 2012, 1844, 2100,
	669, 668, 667, 2014, 666, 462, 460, 459, 2007, 1603,
	310, 309, 874, 2079, 2078, 2033, 2034, 1749, 1892, 1956,
	1888, 88, 1884, 2025, 2021, 2022, 1758, 1757, 442, 1785,
	920, 919, 929, 930, 922, 923, 924, 925, 926, 927,
	928, 921, 1786, 442, 1792, 1642, 1638, 1640, 1641, 1639,
	1637, 2027, 1520, 1521, 1518, 2036, 1517, 1143, 1139, 968,
	975, 864, 436, 798, 85, 308, 1220, 749, 2032, 9,
	2042, 12, 19, 18, 17, 2050, 50, 49, 2058, 48,
	2060, 2061, 2056, 47, 16, 575, 575, 1742, 8, 46,
	2067, 2069, 45, 44, 15, 14, 40, 38, 37, 36,
	35, 34, 2075, 33, 32, 2102, 39, 31, 30, 2087,
	2088, 2089, 2090, 29, 2106, 10, 59, 2101, 58, 57,
	56, 21, 22, 23, 65, 64, 63, 62, 61, 2105,
	26, 2092, 11, 920, 919, 929, 930, 922, 923, 924,
	925, 926, 927, 928, 921, 2117, 7, 4, 2120, 2118,
	2, 0, 0, 0, 2129, 0, 2110, 2124, 2112, 0,
	0, 0, 442, 0, 442, 0, 2126, 0, 0, 0,
	0, 787, 2137, 787, 2139, 0, 0, 0, 0, 0,
	0, 0, 2102, 2152, 0, 0, 0, 0, 2148, 0,
	0, 442, 0, 0, 2101, 2151, 0, 2156, 0, 0,
	787, 2159, 0, 0, 0, 0, 2142, 2129, 2165, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2175,
	0, 0, 0, 0, 0, 0, 0, 2176, 0, 0,
	0, 0, 0, 0, 2186, 0, 2185, 0, 0, 0,
	0, 0, 0, 2167, 0, 0, 2197, 2196, 2195, 2186,
	1094, 1081, 0, 1043, 1096, 1017, 1032, 1104, 1033, 1034,
	1068, 996, 1052, 215, 1030, 988, 1020, 1021, 990, 1027,
	991, 1018, 1045, 159, 1016, 1084, 1055, 185, 1102, 0,
	0, 245, 199, 0, 0, 1048, 1086, 1050, 1073, 1042,
	1069, 1004, 1062, 1097, 1031, 1066, 1098, 0, 0, 0,
	0, 0, 479, 480, 481, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 1065, 1091, 1029, 0, 144,
	1095, 1049, 1067, 0, 0, 989, 1063, 0, 994, 997,
	1103, 1089, 1024, 1025, 0, 0, 0, 0, 0, 0,
	0, 1046, 1051, 1070, 1039, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1022, 0, 1059, 0, 0, 0,
	999, 995, 0, 1044, 0, 133, 250, 264, 142, 241,
	277, 147, 248, 138, 214, 237, 135, 262, 247, 196,
	179, 180, 134, 0, 232, 157, 171, 154, 212, 0,
	1093, 289, 153, 280, 998, 272, 137, 1130, 271, 211,
	259, 263, 197, 191, 136, 261, 195, 190, 183, 161,
	175, 224, 189, 225, 176, 201, 200, 202, 1114, 1115,
	1116, 1117, 1118, 1126, 1127, 0, 1003, 0, 1023, 1071,
	0, 987, 1079, 1087, 1041, 274, 1090, 1038, 1037, 1121,
	0, 1120, 249, 1122, 1123, 184, 1085, 1019, 1028, 290,
	1026, 235, 217, 1092, 1058, 222, 233, 187, 260, 226,
	265, 251, 273, 229, 227, 129, 252, 156, 198, 139,
	140, 152, 158, 160, 162, 163, 207, 208, 220, 240,
	253, 254, 255, 155, 148, 234, 149, 173, 150, 130,
	242, 151, 131, 221, 258, 1119, 169, 230, 194, 132,
	193, 223, 257, 256, 281, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1128, 0,
	1129, 286, 166, 986, 269, 0, 213, 1082, 992, 1002,
	1000, 1035, 1060, 1061, 209, 285, 1075, 1078, 1076, 1105,
	238, 0, 0, 0, 0, 0, 178, 219, 0, 239,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	993, 0, 246, 267, 279, 270, 1036, 1010, 1047, 278,
	1013, 1011, 1074, 1012, 1064, 1107, 203, 204, 205, 206,
	170, 0, 146, 1056, 1040, 1108, 1109, 1110, 1111, 1112,
	1113, 1015, 1088, 165, 172, 0, 174, 145, 218, 168,
	276, 181, 1080, 210, 177, 243, 182, 188, 231, 275,
	216, 236, 143, 266, 244, 192, 167, 1009, 1014, 1008,
	1053, 1054, 1099, 1100, 1101, 1072, 1001, 1083, 1005, 1007,
	1006, 920, 919, 929, 930, 922, 923, 924, 925, 926,
	927, 928, 921, 0, 0, 0, 0, 0, 0, 0,
	1077, 0, 1057, 128, 0, 186, 1106, 228, 164, 691,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 663, 0, 0, 0, 159,
	0, 0, 0, 185, 0, 0, 0, 245, 199, 1476,
	0, 0, 0, 705, 711, 1124, 1125, 282, 283, 284,
	268, 0, 0, 0, 656, 0, 0, 0, 606, 697,
	696, 672, 0, 0, 0, 141, 673, 0, 680, 674,
	678, 677, 675, 676, 0, 643, 0, 0, 0, 0,
	0, 0, 604, 660, 0, 664, 920, 919, 929, 930,
	922, 923, 924, 925, 926, 927, 928, 921, 0, 0,
	0, 0, 0, 0, 0, 0, 657, 658, 0, 0,
	0, 0, 692, 0, 659, 0, 0, 694, 0, 681,
	0, 133, 250, 264, 142, 241, 277, 147, 248, 138,
	214, 237, 135, 262, 247, 196, 179, 180, 134, 0,
	232, 157, 171, 154, 212, 679, 690, 649, 153, 647,
	689, 272, 137, 1461, 271, 211, 259, 263, 197, 191,
	136, 261, 195, 190, 183, 161, 175, 224, 189, 225,
	176, 201, 200, 202, 920, 919, 929, 930, 922, 923,
	924, 925, 926, 927, 928, 921, 0, 0, 687, 0,
	0, 274, 0, 0, 704, 0, 0, 0, 249, 0,
	0, 184, 0, 0, 0, 650, 0, 235, 217, 714,
	0, 222, 233, 187, 260, 226, 265, 251, 273, 229,
	227, 129, 252, 156, 198, 139, 140, 152, 158, 160,
	162, 163, 207, 208, 220, 240, 253, 254, 255, 155,
	148, 234, 149, 173, 150, 130, 242, 151, 131, 221,
	258, 0, 169, 230, 194, 132, 193, 223, 257, 256,
	281, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1294, 1293, 1295, 286, 166, 0,
	269, 702, 213, 713, 698, 699, 700, 703, 706, 707,
	645, 648, 708, 710, 712, 715, 238, 0, 0, 0,
	0, 0, 178, 219, 0, 239, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 246, 267,
	279, 646, 0, 0, 0, 278, 0, 0, 0, 0,
	0, 693, 203, 204, 205, 206, 644, 0, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	172, 0, 174, 145, 218, 168, 276, 181, 0, 210,
	177, 243, 182, 188, 231, 275, 216, 236, 143, 266,
	244, 192, 167, 721, 701, 720, 722, 723, 719, 724,
	725, 709, 665, 0, 717, 716, 718, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	0, 186, 0, 228, 164, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	107, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 0, 0, 282, 283, 284, 268, 83, 0, 691,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 663, 0, 0, 0, 159,
	0, 0, 0, 185, 0, 0, 0, 245, 199, 0,
	0, 0, 0, 705, 711, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 656, 0, 0, 0, 606, 697,
	696, 672, 0, 0, 0, 141, 673, 0, 680, 674,
	678, 677, 675, 676, 0, 643, 0, 0, 0, 0,
	0, 0, 604, 660, 0, 664, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 657, 658, 0, 0,
	0, 0, 692, 0, 659, 0, 0, 694, 0, 681,
	0, 133, 250, 264, 142, 241, 277, 147, 248, 138,
	214, 237, 135, 262, 247, 196, 179, 180, 134, 0,
	232, 157, 171, 154, 212, 679, 690, 649, 153, 647,
	689, 272, 137, 0, 271, 211, 259, 263, 197, 191,
	136, 261, 195, 190, 183, 161, 175, 224, 189, 225,
	176, 201, 200, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 687, 0,
	0, 274, 0, 0, 704, 0, 0, 0, 249, 0,
	0, 184, 0, 0, 0, 650, 0, 235, 217, 714,
	0, 222, 233, 187, 260, 226, 265, 251, 273, 229,
	227, 129, 252, 156, 198, 139, 140, 152, 158, 160,
	162, 163, 207, 208, 220, 240, 253, 254, 255, 155,
	148, 234, 149, 173, 150, 130, 242, 151, 131, 221,
	258, 0, 169, 230, 194, 132, 193, 223, 257, 256,
	281, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 166, 0,
	269, 702, 213, 713, 698, 699, 700, 703, 706, 707,
	645, 648, 708, 710, 712, 715, 238, 0, 0, 0,
	0, 0, 178, 219, 0, 239, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 246, 267,
	279, 646, 0, 0, 0, 278, 0, 0, 0, 0,
	0, 693, 203, 204, 205, 206, 644, 0, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	172, 0, 174, 145, 218, 168, 276, 181, 0, 210,
	177, 243, 182, 188, 231, 275, 216, 236, 143, 266,
	244, 192, 167, 721, 701, 720, 722, 723, 719, 724,
	725, 709, 665, 0, 717, 716, 718, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	0, 186, 82, 228, 164, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	107, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 691, 0, 282, 283, 284, 268, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 663, 0, 0,
	0, 159, 848, 0, 0, 185, 0, 0, 0, 245,
	199, 0, 0, 0, 0, 705, 711, 0, 0, 0,
	0, 0, 0, 844, 0, 0, 656, 0, 0, 0,
	606, 697, 696, 672, 0, 0, 0, 141, 673, 0,
	680, 674, 678, 677, 675, 676, 0, 643, 0, 0,
	0, 0, 0, 0, 604, 660, 0, 664, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 657, 658,
	0, 0, 0, 0, 692, 0, 659, 0, 0, 845,
	0, 681, 0, 133, 250, 264, 142, 241, 277, 147,
	248, 138, 214, 237, 135, 262, 247, 196, 179, 180,
	134, 0, 232, 157, 171, 154, 212, 679, 690, 649,
	153, 647, 689, 272, 137, 0, 271, 211, 259, 263,
	197, 191, 136, 261, 195, 190, 183, 161, 175, 224,
	189, 225, 176, 201, 200, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	687, 0, 0, 274, 0, 0, 704, 0, 0, 0,
	249, 0, 0, 184, 0, 0, 0, 650, 0, 235,
	217, 714, 0, 222, 233, 187, 260, 226, 265, 251,
	273, 229, 227, 129, 252, 156, 198, 139, 140, 152,
	158, 160, 162, 163, 207, 208, 220, 240, 253, 254,
	255, 155, 148, 234, 149, 173, 150, 130, 242, 151,
	131, 221, 258, 0, 169, 230, 194, 132, 193, 223,
	257, 256, 281, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	166, 0, 269, 702, 213, 713, 698, 699, 700, 703,
	706, 707, 645, 648, 708, 710, 712, 715, 238, 0,
	0, 0, 0, 0, 178, 219, 0, 239, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	246, 267, 279, 646, 0, 0, 0, 278, 0, 0,
	0, 0, 0, 693, 203, 204, 205, 206, 644, 0,
	146, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 172, 0, 174, 145, 218, 168, 276, 181,
	0, 210, 177, 243, 182, 188, 231, 275, 216, 236,
	143, 266, 244, 192, 167, 721, 701, 720, 722, 723,
	719, 724, 725, 709, 665, 0, 717, 716, 718, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 186, 0, 228, 164, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 107, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
	640, 641, 642, 691, 0, 282, 283, 284, 268, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 663,
	0, 0, 0, 159, 2166, 0, 0, 185, 0, 0,
	0, 245, 199, 0, 0, 0, 0, 705, 711, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 656, 0,
	0, 0, 606, 697, 696, 672, 0, 0, 0, 141,
	673, 0, 680, 674, 678, 677, 675, 676, 0, 643,
	0, 0, 0, 0, 0, 0, 604, 660, 0, 664,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	657, 658, 0, 0, 0, 0, 692, 0, 659, 0,
	0, 694, 0, 681, 0, 133, 250, 264, 142, 241,
	277, 147, 248, 138, 214, 237, 135, 262, 247, 196,
	179, 180, 134, 0, 232, 157, 171, 154, 212, 679,
	690, 649, 153, 647, 689, 272, 137, 0, 271, 211,
	259, 263, 197, 191, 136, 261, 195, 190, 183, 161,
	175, 224, 189, 225, 176, 201, 200, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 687, 0, 0, 274, 0, 0, 704, 0,
	0, 0, 249, 0, 0, 184, 0, 0, 0, 650,
	0, 235, 217, 714, 0, 222, 233, 187, 260, 226,
	265, 251, 273, 229, 227, 129, 252, 156, 198, 139,
	140, 152, 158, 160, 162, 163, 207, 208, 220, 240,
	253, 254, 255, 155, 148, 234, 149, 173, 150, 130,
	242, 151, 131, 221, 258, 0, 169, 230, 194, 132,
	193, 223, 257, 256, 281, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 166, 0, 269, 702, 213, 713, 698, 699,
	700, 703, 706, 707, 645, 648, 708, 710, 712, 715,
	238, 0, 0, 0, 0, 0, 178, 219, 0, 239,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 267, 279, 646, 0, 0, 0, 278,
	0, 0, 0, 0, 0, 693, 203, 204, 205, 206,
	644, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 172, 0, 174, 145, 218, 168,
	276, 181, 0, 210, 177, 243, 182, 188, 231, 275,
	216, 236, 143, 266, 244, 192, 167, 721, 701, 720,
	722, 723, 719, 724, 725, 709, 665, 0, 717, 716,
	718, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 186, 0, 228, 164, 608,
	609, 610, 611, 612, 613, 614, 615, 616, 617, 618,
	619, 620, 621, 622, 107, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 641, 642, 691, 0, 282, 283, 284,
	268, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 663, 0, 0, 0, 159, 848, 0, 0, 185,
	0, 0, 0, 245, 199, 0, 0, 0, 0, 705,
	711, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	656, 0, 0, 0, 606, 697, 696, 672, 0, 0,
	0, 141, 673, 0, 680, 674, 678, 677, 675, 676,
	0, 643, 0, 0, 0, 0, 0, 0, 604, 660,
	0, 664, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 657, 658, 0, 0, 0, 0, 692, 0,
	659, 0, 0, 694, 0, 681, 0, 133, 250, 264,
	142, 241, 277, 147, 248, 138, 214, 237, 135, 262,
	247, 196, 179, 180, 134, 0, 232, 157, 171, 154,
	212, 679, 690, 649, 153, 647, 689, 272, 137, 0,
	271, 211, 259, 263, 197, 191, 136, 261, 195, 190,
	183, 161, 175, 224, 189, 225, 176, 201, 200, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 687, 0, 0, 274, 0, 0,
	704, 0, 0, 0, 249, 0, 0, 184, 0, 0,
	0, 650, 0, 235, 217, 714, 0, 222, 233, 187,
	260, 226, 265, 251, 273, 229, 227, 129, 252, 156,
	198, 139, 140, 152, 158, 160, 162, 163, 207, 208,
	220, 240, 253, 254, 255, 155, 148, 234, 149, 173,
	150, 130, 242, 151, 131, 221, 258, 0, 169, 230,
	194, 132, 193, 223, 257, 256, 281, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 166, 0, 269, 702, 213, 713,
	698, 699, 700, 703, 706, 707, 645, 648, 708, 710,
	712, 715, 238, 0, 0, 0, 0, 0, 178, 219,
	0, 239, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 246, 267, 279, 646, 0, 0,
	0, 278, 0, 0, 0, 0, 0, 693, 203, 204,
	205, 206, 644, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 172, 0, 174, 145,
	218, 168, 276, 181, 0, 210, 177, 243, 182, 188,
	231, 275, 216, 236, 143, 266, 244, 192, 167, 721,
	701, 720, 722, 723, 719, 724, 725, 709, 665, 0,
	717, 716, 718, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 186, 0, 228,
	164, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 618, 619, 620, 621, 622, 107, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 0, 0, 282,
	283, 284, 268, 691, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 663,
	0, 0, 0, 159, 0, 0, 0, 185, 0, 0,
	0, 245, 199, 0, 0, 0, 0, 705, 711, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 656, 0,
	0, 0, 606, 697, 696, 672, 0, 0, 0, 141,
	673, 0, 680, 674, 678, 677, 675, 676, 0, 643,
	0, 0, 0, 0, 0, 0, 604, 660, 0, 664,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	657, 658, 0, 0, 0, 0, 692, 0, 659, 0,
	0, 694, 0, 681, 0, 133, 250, 264, 142, 241,
	277, 147, 248, 138, 214, 237, 135, 262, 247, 196,
	179, 180, 134, 0, 232, 157, 171, 154, 212, 679,
	690, 649, 153, 647, 689, 272, 137, 0, 271, 211,
	259, 263, 197, 191, 136, 261, 195, 190, 183, 161,
	175, 224, 189, 225, 176, 201, 200, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 687, 0, 0, 274, 0, 0, 704, 0,
	0, 0, 249, 0, 0, 184, 0, 0, 0, 650,
	0, 235, 217, 714, 0, 222, 233, 187, 260, 226,
	265, 251, 273, 229, 227, 129, 252, 156, 198, 139,
	140, 152, 158, 160, 162, 163, 207, 208, 220, 240,
	253, 254, 255, 155, 148, 234, 149, 173, 150, 130,
	242, 151, 131, 221, 258, 0, 169, 230, 194, 132,
	193, 223, 257, 256, 281, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 166, 0, 269, 702, 213, 713, 698, 699,
	700, 703, 706, 707, 645, 648, 708, 710, 712, 715,
	238, 0, 0, 0, 0, 0, 178, 219, 0, 239,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 267, 279, 646, 0, 0, 0, 278,
	0, 0, 0, 0, 0, 693, 203, 204, 205, 206,
	644, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 172, 0, 174, 145, 218, 168,
	276, 181, 0, 210, 177, 243, 182, 188, 231, 275,
	216, 236, 143, 266, 244, 192, 167, 721, 701, 720,
	722, 723, 719, 724, 725, 709, 665, 0, 717, 716,
	718, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 186, 0, 228, 164, 608,
	609, 610, 611, 612, 613, 614, 615, 616, 617, 618,
	619, 620, 621, 622, 107, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 641, 642, 691, 0, 282, 283, 284,
	268, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 663, 0, 0, 0, 159, 0, 0, 0, 185,
	0, 0, 0, 245, 199, 0, 0, 0, 0, 705,
	711, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	656, 0, 0, 0, 606, 697, 696, 672, 0, 0,
	0, 141, 673, 0, 680, 674, 678, 677, 675, 676,
	0, 643, 0, 0, 0, 0, 0, 0, 604, 660,
	0, 664, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 657, 658, 601, 0, 0, 0, 692, 0,
	659, 0, 0, 694, 0, 681, 0, 133, 250, 264,
	142, 241, 277, 147, 248, 138, 214, 237, 135, 262,
	247, 196, 179, 180, 134, 0, 232, 157, 171, 154,
	212, 679, 690, 649, 153, 647, 689, 272, 137, 0,
	271, 211, 259, 263, 197, 191, 136, 261, 195, 190,
	183, 161, 175, 224, 189, 225, 176, 201, 200, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 687, 0, 0, 274, 0, 0,
	704, 0, 0, 0, 249, 0, 0, 184, 0, 0,
	0, 650, 0, 235, 217, 714, 0, 222, 233, 187,
	260, 226, 265, 251, 273, 229, 227, 129, 252, 156,
	198, 139, 140, 152, 158, 160, 162, 163, 207, 208,
	220, 240, 253, 254, 255, 155, 148, 234, 149, 173,
	150, 130, 242, 151, 131, 221, 258, 0, 169, 230,
	194, 132, 193, 223, 257, 256, 281, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 166, 0, 269, 702, 213, 713,
	698, 699, 700, 703, 706, 707, 645, 648, 708, 710,
	712, 715, 238, 0, 0, 0, 0, 0, 178, 219,
	0, 239, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 246, 267, 279, 646, 0, 0,
	0, 278, 0, 0, 0, 0, 0, 693, 203, 204,
	205, 206, 644, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 172, 0, 174, 145,
	218, 168, 276, 181, 0, 210, 177, 243, 182, 188,
	231, 275, 216, 236, 143, 266, 244, 192, 167, 721,
	701, 720, 722, 723, 719, 724, 725, 709, 665, 0,
	717, 716, 718, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 186, 0, 228,
	164, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 618, 619, 620, 621, 622, 107, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 691, 0, 282,
	283, 284, 268, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 663, 0, 0, 0, 159, 0, 0,
	0, 185, 0, 0, 0, 245, 199, 0, 0, 0,
	0, 705, 711, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 656, 0, 0, 0, 606, 697, 696, 672,
	0, 0, 0, 141, 673, 0, 680, 674, 678, 677,
	675, 676, 0, 643, 0, 0, 0, 0, 0, 0,
	604, 660, 0, 664, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 657, 658, 0, 0, 0, 0,
	692, 0, 659, 0, 0, 694, 0, 681, 0, 133,
	250, 264, 142, 241, 277, 147, 248, 138, 214, 237,
	135, 262, 247, 196, 179, 180, 134, 0, 232, 157,
	171, 154, 212, 679, 690, 649, 153, 647, 689, 272,
	137, 0, 271, 211, 259, 263, 197, 191, 136, 261,
	195, 190, 183, 161, 175, 224, 189, 225, 176, 201,
	200, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 687, 0, 0, 274,
	0, 0, 704, 0, 0, 0, 249, 0, 0, 184,
	0, 0, 0, 650, 0, 235, 217, 714, 0, 222,
	233, 187, 260, 226, 265, 251, 273, 229, 227, 129,
	252, 156, 198, 139, 140, 152, 158, 160, 162, 163,
	207, 208, 220, 240, 253, 254, 255, 155, 148, 234,
	149, 173, 150, 130, 242, 151, 131, 221, 258, 0,
	169, 230, 194, 132, 193, 223, 257, 256, 281, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 166, 0, 269, 702,
	213, 713, 698, 699, 700, 703, 706, 707, 645, 648,
	708, 710, 712, 715, 238, 0, 0, 0, 0, 0,
	178, 219, 0, 239, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 246, 267, 279, 646,
	0, 0, 0, 278, 0, 0, 0, 0, 0, 693,
	203, 204, 205, 206, 644, 0, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 172, 0,
	174, 145, 218, 168, 276, 181, 0, 210, 177, 243,
	182, 188, 231, 275, 216, 236, 143, 266, 244, 192,
	167, 721, 701, 720, 722, 723, 719, 724, 725, 709,
	665, 0, 717, 716, 718, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 186,
	0, 228, 164, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 618, 619, 620, 621, 622, 107, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 691,
	0, 282, 283, 284, 268, 0, 0, 0, 0, 215,
	0, 1238, 0, 0, 0, 663, 0, 0, 0, 159,
	0, 0, 0, 185, 0, 0, 0, 245, 199, 0,
	0, 0, 0, 705, 711, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 656, 0, 0, 0, 606, 697,
	696, 672, 0, 0, 0, 141, 673, 0, 680, 674,
	678, 677, 675, 676, 0, 643, 0, 0, 0, 0,
	0, 0, 0, 660, 0, 664, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 657, 658, 0, 0,
	0, 0, 692, 0, 659, 0, 0, 694, 0, 681,
	0, 133, 250, 264, 142, 241, 277, 147, 248, 138,
	214, 237, 135, 262, 247, 196, 179, 180, 134, 0,
	232, 157, 171, 154, 212, 679, 690, 649, 153, 647,
	689, 272, 137, 0, 271, 211, 259, 263, 197, 191,
	136, 261, 195, 190, 183, 161, 175, 224, 189, 225,
	176, 201, 200, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 687, 0,
	0, 274, 0, 0, 704, 0, 0, 0, 249, 0,
	0, 184, 0, 0, 0, 650, 0, 235, 217, 714,
	0, 222, 233, 187, 260, 226, 265, 251, 273, 229,
	227, 129, 252, 156, 198, 139, 140, 152, 158, 160,
	162, 163, 207, 208, 220, 240, 253, 254, 255, 155,
	148, 234, 149, 173, 150, 130, 242, 151, 131, 221,
	258, 0, 169, 230, 194, 132, 193, 223, 257, 256,
	281, 1239, 1240, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 166, 0,
	269, 702, 213, 713, 698, 699, 700, 703, 706, 707,
	645, 648, 708, 710, 712, 715, 238, 0, 0, 0,
	0, 0, 178, 219, 0, 239, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 246, 267,
	279, 646, 0, 0, 0, 278, 0, 0, 0, 0,
	0, 693, 203, 204, 205, 206, 644, 0, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	172, 0, 174, 145, 218, 168, 276, 181, 0, 210,
	177, 243, 182, 188, 231, 275, 216, 236, 143, 266,
	244, 192, 167, 721, 701, 720, 722, 723, 719, 724,
	725, 709, 665, 0, 717, 716, 718, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	0, 186, 0, 228, 164, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	107, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 691, 0, 282, 283, 284, 268, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 663, 0, 0,
	0, 159, 0, 0, 0, 185, 0, 0, 0, 245,
	199, 0, 0, 0, 0, 705, 711, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 656, 0, 0, 0,
	606, 697, 696, 672, 0, 0, 0, 141, 673, 0,
	680, 674, 678, 677, 675, 676, 0, 643, 0, 0,
	0, 0, 0, 0, 0, 660, 0, 664, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 657, 658,
	0, 0, 0, 0, 692, 0, 659, 0, 0, 694,
	0, 681, 0, 133, 250, 264, 142, 241, 277, 147,
	248, 138, 214, 237, 135, 262, 247, 196, 179, 180,
	134, 0, 232, 157, 171, 154, 212, 679, 690, 649,
	153, 647, 689, 272, 137, 0, 271, 211, 259, 263,
	197, 191, 136, 261, 195, 190, 183, 161, 175, 224,
	189, 225, 176, 201, 200, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	687, 0, 0, 274, 0, 0, 704, 0, 0, 0,
	249, 0, 0, 184, 0, 0, 0, 650, 0, 235,
	217, 714, 0, 222, 233, 187, 260, 226, 265, 251,
	273, 229, 227, 129, 252, 156, 198, 139, 140, 152,
	158, 160, 162, 163, 207, 208, 220, 240, 253, 254,
	255, 155, 148, 234, 149, 173, 150, 130, 242, 151,
	131, 221, 258, 0, 169, 230, 194, 132, 193, 223,
	257, 256, 281, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	166, 0, 269, 702, 213, 713, 698, 699, 700, 703,
	706, 707, 645, 648, 708, 710, 712, 715, 238, 0,
	0, 0, 0, 0, 178, 219, 0, 239, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	246, 267, 279, 646, 0, 0, 0, 278, 0, 0,
	0, 0, 0, 693, 203, 204, 205, 206, 644, 0,
	146, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 172, 0, 174, 145, 218, 168, 276, 181,
	0, 210, 177, 243, 182, 188, 231, 275, 216, 236,
	143, 266, 244, 192, 167, 721, 701, 720, 722, 723,
	719, 724, 725, 709, 665, 0, 717, 716, 718, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 186, 0, 228, 164, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 107, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
	640, 641, 642, 691, 0, 282, 283, 284, 268, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 663,
	0, 0, 0, 159, 0, 0, 0, 185, 0, 0,
	0, 245, 199, 0, 0, 0, 0, 705, 711, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 697, 696, 672, 0, 0, 0, 141,
	673, 0, 680, 674, 678, 677, 675, 676, 0, 643,
	0, 0, 0, 0, 0, 0, 604, 660, 0, 664,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	657, 658, 0, 0, 0, 0, 692, 0, 659, 0,
	0, 694, 0, 681, 0, 133, 250, 264, 142, 241,
	277, 147, 248, 138, 214, 237, 135, 262, 247, 196,
	179, 180, 134, 0, 232, 157, 171, 154, 212, 679,
	690, 649, 153, 647, 689, 272, 137, 0, 271, 211,
	259, 263, 197, 191, 136, 261, 195, 190, 183, 161,
	175, 224, 189, 225, 176, 201, 200, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 687, 0, 0, 274, 0, 0, 704, 0,
	0, 0, 249, 0, 0, 184, 0, 0, 0, 650,
	0, 235, 217, 714, 0, 222, 233, 187, 260, 226,
	265, 251, 273, 229, 227, 129, 252, 156, 198, 139,
	140, 152, 158, 160, 162, 163, 207, 208, 220, 240,
	253, 254, 255, 155, 148, 234, 149, 173, 150, 130,
	242, 151, 131, 221, 258, 0, 169, 230, 194, 132,
	193, 223, 257, 256, 281, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 166, 0, 269, 702, 213, 713, 698, 699,
	700, 703, 706, 707, 645, 648, 708, 710, 712, 715,
	238, 0, 0, 0, 0, 0, 178, 219, 0, 239,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 267, 279, 646, 0, 0, 0, 278,
	0, 0, 0, 0, 0, 693, 203, 204, 205, 206,
	644, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 172, 0, 174, 145, 218, 168,
	276, 181, 0, 210, 177, 243, 182, 188, 231, 275,
	216, 236, 143, 266, 244, 192, 167, 721, 701, 720,
	722, 723, 719, 724, 725, 709, 665, 0, 717, 716,
	718, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 186, 0, 228, 164, 608,
	609, 610, 611, 612, 613, 614, 615, 616, 617, 618,
	619, 620, 621, 622, 107, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 641, 642, 0, 0, 282, 283, 284,
	268, 330, 0, 329, 333, 325, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 321, 0, 0, 0, 0,
	0, 0, 0, 159, 0, 0, 340, 185, 0, 0,
	0, 245, 199, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 343, 0, 0, 344, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 250, 264, 142, 241,
	277, 147, 248, 138, 214, 237, 135, 262, 247, 196,
	179, 180, 134, 0, 232, 157, 171, 154, 212, 0,
	0, 289, 153, 280, 0, 272, 137, 0, 271, 211,
	259, 263, 197, 191, 136, 261, 195, 190, 183, 161,
	175, 224, 189, 225, 176, 201, 200, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 322, 326, 0,
	0, 0, 0, 0, 328, 274, 0, 0, 0, 0,
	0, 0, 249, 0, 0, 184, 332, 0, 0, 290,
	0, 235, 217, 0, 0, 222, 233, 187, 260, 226,
	324, 251, 273, 229, 348, 129, 252, 156, 198, 139,
	140, 152, 158, 160, 162, 163, 207, 208, 220, 240,
	253, 254, 255, 155, 148, 234, 149, 173, 150, 130,
	242, 151, 131, 221, 258, 1277, 169, 230, 194, 132,
	193, 223, 257, 256, 281, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 166, 0, 269, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 209, 285, 0, 0, 0, 0,
	238, 0, 0, 0, 327, 331, 334, 219, 335, 336,
	0, 0, 337, 338, 339, 0, 0, 341, 342, 0,
	0, 0, 246, 267, 279, 270, 0, 0, 0, 278,
	0, 0, 0, 0, 0, 0, 203, 204, 205, 206,
	170, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 172, 0, 174, 145, 218, 168,
	276, 181, 0, 210, 177, 243, 182, 188, 231, 275,
	216, 236, 143, 266, 244, 192, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1273, 0, 1270,
	0, 0, 0, 1272, 1269, 1271, 1275, 1276, 0, 0,
	0, 1274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 186, 0, 228, 164, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 0, 0, 282, 283, 284,
	268, 330, 0, 329, 333, 325, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 321, 0, 0, 0, 0,
	0, 0, 0, 159, 0, 0, 340, 185, 0, 0,
	0, 245, 199, 1258, 1259, 1260, 1261, 1262, 1263, 1264,
	1265, 1266, 1267, 1268, 1280, 1281, 1282, 1283, 1284, 1285,
	1278, 1279, 343, 0, 0, 344, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 329, 333, 325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 340, 0, 0,
	0, 0, 0, 0, 0, 133, 250, 264, 142, 241,
	277, 147, 248, 138, 214, 237, 135, 262, 247, 196,
	179, 180, 134, 0, 232, 157, 171, 154, 212, 0,
	0, 289, 153, 280, 0, 272, 137, 0, 271, 211,
	259, 263, 197, 191, 136, 261, 195, 190, 183, 161,
	175, 224, 189, 225, 176, 201, 200, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 322, 326, 0,
	0, 0, 0, 0, 328, 274, 0, 0, 0, 0,
	0, 0, 249, 0, 0, 184, 332, 0, 0, 290,
	0, 235, 217, 0, 0, 222, 233, 187, 260, 226,
	324, 251, 273, 229, 227, 129, 252, 156, 198, 139,
	140, 152, 158, 160, 162, 163, 207, 208, 220, 240,
	253, 254, 255, 155, 148, 234, 149, 173, 150, 130,
	242, 151, 131, 221, 258, 0, 169, 230, 194, 132,
	193, 223, 257, 256, 281, 287, 288, 323, 322, 326,
	0, 0, 0, 0, 0, 328, 0, 0, 0, 0,
	0, 286, 166, 0, 269, 0, 213, 332, 0, 0,
	0, 0, 0, 0, 209, 285, 0, 0, 0, 0,
	238, 778, 0, 0, 327, 331, 334, 219, 335, 336,
	0, 0, 337, 338, 339, 0, 0, 341, 342, 0,
	0, 0, 246, 267, 279, 270, 0, 0, 0, 278,
	0, 0, 0, 0, 0, 0, 203, 204, 205, 206,
	170, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 172, 0, 174, 145, 218, 168,
	276, 181, 0, 210, 177, 243, 182, 188, 231, 275,
	216, 236, 143, 266, 244, 192, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 327, 331, 779, 0, 335,
	780, 0, 0, 337, 338, 339, 0, 0, 341, 342,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 186, 0, 228, 164, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 0, 0, 282, 283, 284,
	268, 83, 0, 24, 42, 25, 0, 0, 0, 0,
	0, 0, 0, 215, 293, 0, 0, 0, 0, 0,
	0, 0, 0, 159, 0, 0, 0, 185, 0, 0,
	0, 245, 199, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 250, 264, 142, 241,
	277, 147, 248, 138, 214, 237, 135, 262, 247, 196,
	179, 180, 134, 0, 232, 157, 171, 154, 212, 0,
	0, 289, 153, 280, 0, 272, 137, 0, 271, 211,
	259, 263, 197, 191, 136, 261, 195, 190, 183, 161,
	175, 224, 189, 225, 176, 201, 200, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 249, 0, 0, 184, 0, 0, 0, 290,
	0, 235, 217, 0, 0, 222, 233, 187, 260, 226,
	265, 251, 273, 229, 227, 129, 252, 156, 198, 139,
	140, 152, 158, 160, 162, 163, 207, 208, 220, 240,
	253, 254, 255, 155, 148, 234, 149, 173, 150, 130,
	242, 151, 131, 221, 258, 0, 169, 230, 194, 132,
	193, 223, 257, 256, 281, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 166, 0, 269, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 209, 285, 0, 0, 0, 0,
	238, 0, 0, 0, 0, 0, 178, 219, 0, 239,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 267, 279, 270, 0, 0, 0, 278,
	0, 0, 0, 0, 0, 0, 203, 204, 205, 206,
	294, 296, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 172, 0, 174, 145, 218, 168,
	276, 181, 0, 210, 177, 243, 182, 188, 231, 275,
	216, 236, 143, 266, 244, 192, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 186, 82, 228, 164, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 215, 0, 282, 283, 284,
	268, 0, 0, 0, 0, 159, 0, 0, 0, 185,
	0, 0, 0, 245, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 1529, 1532, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 250, 264,
	142, 241, 277, 147, 248, 138, 214, 237, 135, 262,
	247, 196, 179, 180, 134, 0, 232, 157, 171, 154,
	212, 0, 0, 289, 153, 280, 0, 272, 137, 0,
	271, 211, 259, 263, 197, 191, 136, 261, 195, 190,
	183, 161, 175, 224, 189, 225, 176, 201, 200, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1533, 274, 0, 0,
	0, 1526, 0, 1525, 249, 1527, 1530, 184, 0, 0,
	0, 290, 0, 235, 217, 0, 0, 222, 233, 187,
	260, 226, 265, 251, 273, 229, 227, 129, 252, 156,
	198, 139, 140, 152, 158, 160, 162, 163, 207, 208,
	220, 240, 253, 254, 255, 155, 148, 234, 149, 173,
	150, 130, 242, 151, 131, 221, 258, 1531, 169, 230,
	194, 132, 193, 223, 257, 256, 281, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 166, 0, 269, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 209, 285, 0, 0,
	0, 0, 238, 0, 0, 0, 0, 0, 178, 219,
	0, 239, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 246, 267, 279, 270, 0, 0,
	0, 278, 0, 0, 0, 0, 0, 0, 203, 204,
	205, 206, 170, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 172, 0, 174, 145,
	218, 168, 276, 181, 0, 210, 177, 243, 182, 188,
	231, 275, 216, 236, 143, 266, 244, 192, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 186, 0, 228,
	164, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 0, 215, 282,
	283, 284, 268, 882, 0, 0, 0, 0, 159, 0,
	0, 0, 185, 0, 0, 0, 245, 199, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	883, 0, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 0, 0, 878, 879, 880,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 250, 264, 142, 241, 277, 147, 248, 138, 214,
	237, 135, 262, 247, 196, 179, 180, 134, 0, 232,
	157, 171, 154, 212, 0, 0, 289, 153, 280, 0,
	272, 137, 0, 271, 211, 259, 263, 197, 191, 136,
	261, 195, 190, 183, 161, 175, 224, 189, 225, 176,
	201, 200, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 249, 0, 0,
	184, 0, 0, 0, 290, 0, 235, 217, 0, 0,
	222, 233, 187, 260, 226, 265, 251, 273, 229, 227,
	129, 252, 156, 198, 139, 140, 152, 158, 160, 162,
	163, 207, 208, 220, 240, 253, 254, 255, 155, 148,
	234, 149, 173, 150, 130, 242, 151, 131, 221, 258,
	0, 169, 230, 194, 132, 193, 223, 257, 256, 281,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 166, 0, 269,
	0, 213, 0, 0, 0, 0, 0, 0, 0, 209,
	285, 0, 0, 0, 0, 238, 0, 0, 0, 0,
	0, 178, 219, 0, 239, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 246, 267, 279,
	270, 0, 0, 0, 278, 0, 0, 0, 0, 0,
	0, 203, 204, 205, 206, 170, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 172,
	0, 174, 145, 218, 168, 276, 181, 0, 210, 177,
	243, 182, 188, 231, 275, 216, 236, 143, 266, 244,
	192, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	186, 0, 228, 164, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	215, 0, 282, 283, 284, 268, 0, 0, 0, 0,
	159, 396, 0, 0, 185, 0, 0, 0, 245, 199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	404, 405, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 409, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 250, 264, 142, 241, 277, 147, 248,
	138, 214, 237, 135, 262, 247, 196, 179, 180, 134,
	0, 232, 157, 171, 154, 212, 0, 0, 289, 153,
	280, 380, 272, 137, 379, 271, 211, 259, 263, 197,
	191, 136, 261, 195, 190, 183, 161, 175, 224, 189,
	225, 176, 201, 200, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 184, 0, 0, 0, 290, 0, 235, 217,
	0, 0, 222, 233, 187, 260, 226, 265, 251, 273,
	395, 227, 129, 252, 156, 198, 139, 140, 152, 158,
	160, 162, 163, 207, 208, 220, 240, 253, 254, 255,
	155, 148, 234, 149, 173, 150, 130, 242, 151, 131,
	221, 258, 0, 169, 230, 194, 132, 193, 223, 257,
	256, 281, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 166,
	0, 269, 0, 213, 0, 0, 0, 0, 0, 0,
	0, 209, 285, 0, 0, 0, 0, 238, 0, 0,
	0, 0, 0, 178, 219, 0, 239, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 246,
	267, 279, 270, 0, 0, 0, 278, 0, 0, 0,
	0, 0, 398, 203, 204, 205, 206, 170, 0, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 172, 0, 174, 145, 218, 168, 276, 181, 0,
	406, 401, 402, 182, 188, 231, 275, 216, 236, 143,
	266, 244, 403, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 186, 0, 228, 164, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 83, 0, 282, 283, 284, 268, 0, 0,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 159, 0, 0, 0, 185, 0,
	0, 0, 245, 199, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 969, 0, 89, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 250, 264, 142,
	241, 277, 147, 248, 138, 214, 237, 135, 262, 247,
	196, 179, 180, 134, 0, 232, 157, 171, 154, 212,
	0, 0, 289, 153, 280, 0, 272, 137, 0, 271,
	211, 259, 263, 197, 191, 136, 261, 195, 190, 183,
	161, 175, 224, 189, 225, 176, 201, 200, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 249, 0, 0, 184, 0, 0, 0,
	290, 0, 235, 217, 0, 0, 222, 233, 187, 260,
	226, 265, 251, 273, 229, 227, 129, 252, 156, 198,
	139, 140, 152, 158, 160, 162, 163, 207, 208, 220,
	240, 253, 254, 255, 155, 148, 234, 149, 173, 150,
	130, 242, 151, 131, 221, 258, 0, 169, 230, 194,
	132, 193, 223, 257, 256, 281, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 166, 0, 269, 0, 213, 0, 0,
	0, 0, 0, 0, 0, 209, 285, 0, 0, 0,
	0, 238, 0, 0, 0, 0, 0, 178, 219, 0,
	239, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 267, 279, 270, 0, 0, 0,
	278, 0, 0, 0, 0, 0, 0, 203, 204, 205,
	206, 170, 0, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 172, 0, 174, 145, 218,
	168, 276, 181, 0, 210, 177, 243, 182, 188, 231,
	275, 216, 236, 143, 266, 244, 192, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 186, 82, 228, 164,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 215, 0, 282, 283,
	284, 268, 0, 0, 0, 0, 159, 0, 0, 0,
	185, 0, 0, 0, 245, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 404, 405, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 409, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 250,
	264, 142, 241, 277, 147, 248, 138, 214, 237, 135,
	262, 247, 196, 179, 180, 134, 0, 232, 157, 171,
	154, 212, 0, 0, 289, 153, 280, 380, 272, 137,
	379, 271, 211, 259, 263, 197, 191, 136, 261, 195,
	190, 183, 161, 175, 224, 189, 225, 176, 201, 200,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 249, 0, 0, 184, 0,
	0, 0, 290, 0, 235, 217, 0, 0, 222, 233,
	187, 260, 226, 265, 251, 273, 229, 227, 129, 252,
	156, 198, 139, 140, 152, 158, 160, 162, 163, 207,
	208, 220, 240, 253, 254, 255, 155, 148, 234, 149,
	173, 150, 130, 242, 151, 131, 221, 258, 0, 169,
	230, 194, 132, 193, 223, 257, 256, 281, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 166, 0, 269, 0, 213,
	0, 0, 0, 0, 0, 0, 0, 209, 285, 0,
	0, 0, 0, 238, 0, 0, 0, 0, 0, 178,
	219, 0, 239, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 246, 267, 279, 270, 0,
	0, 0, 278, 0, 0, 0, 0, 0, 0, 203,
	204, 205, 206, 170, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 172, 0, 174,
	145, 218, 168, 276, 181, 0, 406, 401, 402, 182,
	188, 231, 275, 216, 236, 143, 266, 244, 403, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 186, 0,
	228, 164, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 0, 0,
	282, 283, 284, 268, 215, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 159, 558, 0, 0, 185, 0,
	0, 0, 245, 199, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 343, 0, 0, 344, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 250, 264, 142,
	241, 277, 147, 248, 138, 214, 237, 135, 262, 247,
	196, 179, 180, 134, 0, 232, 157, 171, 154, 212,
	0, 0, 289, 153, 280, 0, 272, 137, 0, 271,
	211, 259, 263, 197, 191, 136, 261, 195, 190, 183,
	161, 175, 224, 189, 225, 176, 201, 200, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 249, 0, 0, 184, 0, 0, 0,
	290, 0, 235, 217, 0, 0, 222, 233, 187, 260,
	226, 265, 251, 273, 229, 227, 129, 252, 156, 198,
	139, 140, 152, 158, 160, 162, 163, 207, 208, 220,
	240, 253, 254, 255, 155, 148, 234, 149, 173, 150,
	130, 242, 151, 131, 221, 258, 0, 169, 230, 194,
	132, 193, 223, 257, 256, 281, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 166, 0, 269, 0, 213, 0, 0,
	0, 0, 0, 0, 0, 209, 285, 0, 0, 0,
	0, 238, 0, 0, 0, 0, 0, 178, 219, 0,
	239, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 267, 279, 270, 0, 0, 0,
	278, 0, 0, 0, 0, 559, 0, 203, 204, 205,
	206, 170, 0, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 172, 0, 174, 145, 218,
	168, 276, 181, 0, 210, 177, 243, 182, 188, 231,
	275, 216, 236, 143, 266, 244, 192, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 186, 0, 228, 164,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 0, 0, 282, 283,
	284, 268, 215, 0, 836, 0, 0, 0, 0, 0,
	0, 0, 159, 0, 0, 0, 185, 0, 0, 0,
	245, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 343, 0, 0, 344, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 250, 264, 142, 241, 277,
	147, 248, 138, 214, 237, 135, 262, 247, 196, 179,
	180, 134, 0, 232, 157, 171, 154, 212, 0, 0,
	289, 153, 280, 0, 272, 137, 0, 271, 211, 259,
	263, 197, 191, 136, 261, 195, 190, 183, 161, 175,
	224, 189, 225, 176, 201, 200, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 249, 0, 0, 184, 0, 0, 0, 290, 0,
	235, 217, 0, 0, 222, 233, 187, 260, 226, 265,
	251, 273, 229, 227, 129, 252, 156, 198, 139, 140,
	152, 158, 160, 162, 163, 207, 208, 220, 240, 253,
	254, 255, 155, 148, 234, 149, 173, 150, 130, 242,
	151, 131, 221, 258, 0, 169, 230, 194, 132, 193,
	223, 257, 256, 281, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 166, 0, 269, 0, 213, 0, 0, 0, 0,
	0, 0, 0, 209, 285, 0, 0, 0, 0, 238,
	0, 0, 0, 0, 0, 178, 219, 0, 239, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 246, 267, 279, 270, 0, 0, 0, 278, 0,
	0, 0, 0, 835, 0, 203, 204, 205, 206, 170,
	0, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 172, 0, 174, 145, 218, 168, 276,
	181, 0, 210, 177, 243, 182, 188, 231, 275, 216,
	236, 143, 266, 244, 192, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 186, 0, 228, 164, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 215, 0, 282, 283, 284, 268,
	0, 0, 0, 0, 159, 579, 0, 0, 185, 0,
	0, 0, 245, 199, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 577, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 576, 0, 0, 0, 133, 250, 264, 142,
	241, 277, 147, 248, 138, 214, 237, 135, 262, 247,
	196, 179, 180, 134, 0, 232, 157, 171, 154, 212,
	0, 0, 289, 153, 280, 0, 272, 137, 0, 271,
	211, 259, 263, 197, 191, 136, 261, 195, 190, 183,
	161, 175, 224, 189, 225, 176, 201, 200, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 249, 0, 0, 184, 0, 0, 0,
	290, 0, 235, 217, 0, 0, 222, 233, 187, 260,
	226, 265, 251, 273, 229, 227, 129, 252, 156, 198,
	139, 140, 152, 158, 160, 162, 163, 207, 208, 220,
	240, 253, 254, 255, 155, 148, 234, 149, 173, 150,
	130, 242, 151, 131, 221, 258, 0, 169, 230, 194,
	132, 193, 223, 257, 256, 281, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 166, 0, 269, 0, 213, 0, 0,
	0, 0, 0, 0, 0, 209, 285, 0, 0, 0,
	0, 238, 0, 0, 0, 0, 0, 178, 219, 0,
	239, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 267, 279, 270, 0, 0, 0,
	278, 0, 0, 0, 0, 0, 0, 203, 204, 205,
	206, 170, 0, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 172, 0, 174, 145, 218,
	168, 276, 181, 0, 210, 177, 243, 182, 188, 231,
	275, 216, 236, 143, 266, 244, 192, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 186, 0, 228, 164,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 215, 0, 282, 283,
	284, 268, 0, 0, 0, 0, 159, 574, 0, 0,
	185, 0, 0, 0, 245, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 577, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 576, 0, 0, 0, 133, 250,
	264, 142, 241, 277, 147, 248, 138, 214, 237, 135,
	262, 247, 196, 179, 180, 134, 0, 232, 157, 171,
	154, 212, 0, 0, 289, 153, 280, 0, 272, 137,
	0, 271, 211, 259, 263, 197, 191, 136, 261, 195,
	190, 183, 161, 175, 224, 189, 225, 176, 201, 200,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 249, 0, 0, 184, 0,
	0, 0, 290, 0, 235, 217, 0, 0, 222, 233,
	187, 260, 226, 265, 251, 273, 229, 227, 129, 252,
	156, 198, 139, 140, 152, 158, 160, 162, 163, 207,
	208, 220, 240, 253, 254, 255, 155, 148, 234, 149,
	173, 150, 130, 242, 151, 131, 221, 258, 0, 169,
	230, 194, 132, 193, 223, 257, 256, 281, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 166, 0, 269, 0, 213,
	0, 0, 0, 0, 0, 0, 0, 209, 285, 0,
	0, 0, 0, 238, 0, 0, 0, 0, 0, 178,
	219, 0, 239, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 246, 267, 279, 270, 0,
	0, 0, 278, 0, 0, 0, 0, 0, 0, 203,
	204, 205, 206, 170, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 172, 0, 174,
	145, 218, 168, 276, 181, 0, 210, 177, 243, 182,
	188, 231, 275, 216, 236, 143, 266, 244, 192, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 186, 0,
	228, 164, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 215, 0,
	282, 283, 284, 268, 0, 0, 0, 0, 159, 0,
	0, 0, 185, 0, 0, 0, 245, 199, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2097, 0, 89, 697, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 250, 264, 142, 241, 277, 147, 248, 138, 214,
	237, 135, 262, 247, 196, 179, 180, 134, 0, 232,
	157, 171, 154, 212, 0, 0, 289, 153, 280, 0,
	272, 137, 0, 271, 211, 259, 263, 197, 191, 136,
	261, 195, 190, 183, 161, 175, 224, 189, 225, 176,
	201, 200, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 249, 0, 0,
	184, 0, 0, 0, 290, 0, 235, 217, 0, 0,
	222, 233, 187, 260, 226, 265, 251, 273, 229, 227,
	129, 252, 156, 198, 139, 140, 152, 158, 160, 162,
	163, 207, 208, 220, 240, 253, 254, 255, 155, 148,
	234, 149, 173, 150, 130, 242, 151, 131, 221, 258,
	0, 169, 230, 194, 132, 193, 223, 257, 256, 281,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 166, 0, 269,
	0, 213, 0, 0, 0, 0, 0, 0, 0, 209,
	285, 0, 0, 0, 0, 238, 0, 0, 0, 0,
	0, 178, 219, 0, 239, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 246, 267, 279,
	270, 0, 0, 0, 278, 0, 0, 0, 0, 0,
	0, 203, 204, 205, 206, 170, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 172,
	0, 174, 145, 218, 168, 276, 181, 0, 210, 177,
	243, 182, 188, 231, 275, 216, 236, 143, 266, 244,
	192, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	186, 0, 228, 164, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	215, 0, 282, 283, 284, 268, 0, 0, 0, 0,
	159, 0, 0, 0, 185, 0, 0, 0, 245, 199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 577, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 576, 0,
	0, 0, 133, 250, 264, 142, 241, 277, 147, 248,
	138, 214, 237, 135, 262, 247, 196, 179, 180, 134,
	0, 232, 157, 171, 154, 212, 0, 0, 289, 153,
	280, 0, 272, 137, 0, 271, 211, 259, 263, 197,
	191, 136, 261, 195, 190, 183, 161, 175, 224, 189,
	225, 176, 201, 200, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 184, 0, 0, 0, 290, 0, 235, 217,
	0, 0, 222, 233, 187, 260, 226, 265, 251, 273,
	229, 227, 129, 252, 156, 198, 139, 140, 152, 158,
	160, 162, 163, 207, 208, 220, 240, 253, 254, 255,
	155, 148, 234, 149, 173, 150, 130, 242, 151, 131,
	221, 258, 0, 169, 230, 194, 132, 193, 223, 257,
	256, 281, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 166,
	0, 269, 0, 213, 0, 0, 0, 0, 0, 0,
	0, 209, 285, 0, 0, 0, 0, 238, 0, 0,
	0, 0, 0, 178, 219, 0, 239, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 246,
	267, 279, 270, 0, 0, 0, 278, 0, 0, 0,
	0, 0, 0, 203, 204, 205, 206, 170, 0, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 172, 0, 174, 145, 218, 168, 276, 181, 0,
	210, 177, 243, 182, 188, 231, 275, 216, 236, 143,
	266, 244, 192, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 186, 0, 228, 164, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 215, 0, 282, 283, 284, 268, 0, 0,
	0, 0, 159, 0, 0, 0, 185, 0, 0, 0,
	245, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 577, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1698, 0, 0, 0, 133, 250, 264, 142, 241, 277,
	147, 248, 138, 214, 237, 135, 262, 247, 196, 179,
	180, 134, 0, 232, 157, 171, 154, 212, 0, 0,
	289, 153, 280, 0, 272, 137, 0, 271, 211, 259,
	263, 197, 191, 136, 261, 195, 190, 183, 161, 175,
	224, 189, 225, 176, 201, 200, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 249, 0, 0, 184, 0, 0, 0, 290, 0,
	235, 217, 0, 0, 222, 233, 187, 260, 226, 265,
	251, 273, 229, 227, 129, 252, 156, 198, 139, 140,
	152, 158, 160, 162, 163, 207, 208, 220, 240, 253,
	254, 255, 155, 148, 234, 149, 173, 150, 130, 242,
	151, 131, 221, 258, 0, 169, 230, 194, 132, 193,
	223, 257, 256, 281, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 166, 0, 269, 0, 213, 0, 0, 0, 0,
	0, 0, 0, 209, 285, 0, 0, 0, 0, 238,
	0, 0, 0, 0, 0, 178, 219, 0, 239, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 246, 267, 279, 270, 0, 0, 0, 278, 0,
	0, 0, 0, 0, 0, 203, 204, 205, 206, 170,
	0, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 172, 0, 174, 145, 218, 168, 276,
	181, 0, 210, 177, 243, 182, 188, 231, 275, 216,
	236, 143, 266, 244, 192, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 186, 0, 228, 164, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 215, 0, 282, 283, 284, 268,
	0, 0, 0, 0, 159, 0, 0, 0, 185, 0,
	0, 0, 245, 199, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 577, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 250, 264, 142,
	241, 277, 147, 248, 138, 214, 237, 135, 262, 247,
	196, 179, 180, 134, 0, 232, 157, 171, 154, 212,
	0, 0, 289, 153, 280, 0, 272, 137, 0, 271,
	211, 259, 263, 197, 191, 136, 261, 195, 190, 183,
	161, 175, 224, 189, 225, 176, 201, 200, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 249, 0, 0, 184, 0, 0, 0,
	290, 0, 235, 217, 0, 0, 222, 233, 187, 260,
	226, 265, 251, 273, 229, 227, 129, 252, 156, 198,
	139, 140, 152, 158, 160, 162, 163, 207, 208, 220,
	240, 253, 254, 255, 155, 148, 234, 149, 173, 150,
	130, 242, 151, 131, 221, 258, 0, 169, 230, 194,
	132, 193, 223, 257, 256, 281, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 166, 0, 269, 0, 213, 0, 0,
	0, 0, 0, 0, 0, 209, 285, 0, 0, 0,
	0, 238, 0, 0, 0, 0, 0, 178, 219, 0,
	239, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 267, 279, 270, 0, 0, 0,
	278, 0, 0, 0, 0, 0, 1504, 203, 204, 205,
	206, 170, 0, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 172, 0, 174, 145, 218,
	168, 276, 181, 0, 210, 177, 243, 182, 188, 231,
	275, 216, 236, 143, 266, 244, 192, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 186, 0, 228, 164,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 215, 0, 282, 283,
	284, 268, 0, 0, 0, 0, 159, 1209, 0, 0,
	185, 0, 0, 0, 245, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 577, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 250,
	264, 142, 241, 277, 147, 248, 138, 214, 237, 135,
	262, 247, 196, 179, 180, 134, 0, 232, 157, 171,
	154, 212, 0, 0, 289, 153, 280, 0, 272, 137,
	0, 271, 211, 259, 263, 197, 191, 136, 261, 195,
	190, 183, 161, 175, 224, 189, 225, 176, 201, 200,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 249, 0, 0, 184, 0,
	0, 0, 290, 0, 235, 217, 0, 0, 222, 233,
	187, 260, 226, 265, 251, 273, 229, 227, 129, 252,
	156, 198, 139, 140, 152, 158, 160, 162, 163, 207,
	208, 220, 240, 253, 254, 255, 155, 148, 234, 149,
	173, 150, 130, 242, 151, 131, 221, 258, 0, 169,
	230, 194, 132, 193, 223, 257, 256, 281, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 166, 0, 269, 0, 213,
	0, 0, 0, 0, 0, 0, 0, 209, 285, 0,
	0, 0, 0, 238, 0, 0, 0, 0, 0, 178,
	219, 0, 239, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 246, 267, 279, 270, 0,
	0, 0, 278, 0, 0, 0, 0, 0, 0, 203,
	204, 205, 206, 170, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 172, 0, 174,
	145, 218, 168, 276, 181, 0, 210, 177, 243, 182,
	188, 231, 275, 216, 236, 143, 266, 244, 192, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 186, 0,
	228, 164, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 215, 0,
	282, 283, 284, 268, 0, 0, 0, 0, 159, 0,
	0, 0, 185, 0, 0, 0, 245, 199, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 697, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 250, 264, 142, 241, 277, 147, 248, 138, 214,
	237, 135, 262, 247, 196, 179, 180, 134, 0, 232,
	157, 171, 154, 212, 0, 0, 289, 153, 280, 0,
	272, 137, 0, 271, 211, 259, 263, 197, 191, 136,
	261, 195, 190, 183, 161, 175, 224, 189, 225, 176,
	201, 200, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 249, 0, 0,
	184, 0, 0, 0, 290, 0, 235, 217, 0, 0,
	222, 233, 187, 260, 226, 265, 251, 273, 229, 227,
	129, 252, 156, 198, 139, 140, 152, 158, 160, 162,
	163, 207, 208, 220, 240, 253, 254, 255, 155, 148,
	234, 149, 173, 150, 130, 242, 151, 131, 221, 258,
	0, 169, 230, 194, 132, 193, 223, 257, 256, 281,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 166, 0, 269,
	0, 213, 0, 0, 0, 0, 0, 0, 0, 209,
	285, 0, 0, 0, 0, 238, 0, 0, 0, 0,
	0, 178, 219, 0, 239, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 246, 267, 279,
	270, 0, 0, 0, 278, 0, 0, 0, 0, 0,
	0, 203, 204, 205, 206, 170, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 172,
	0, 174, 145, 218, 168, 276, 181, 0, 210, 177,
	243, 182, 188, 231, 275, 216, 236, 143, 266, 244,
	192, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	186, 0, 228, 164, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	215, 0, 282, 283, 284, 268, 0, 0, 0, 0,
	159, 0, 0, 0, 185, 0, 0, 0, 245, 199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1831, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 250, 264, 142, 241, 277, 147, 248,
	138, 214, 237, 135, 262, 247, 196, 179, 180, 134,
	0, 232, 157, 171, 154, 212, 0, 0, 289, 153,
	280, 0, 272, 137, 0, 271, 211, 259, 263, 197,
	191, 136, 261, 195, 190, 183, 161, 175, 224, 189,
	225, 176, 201, 200, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 184, 0, 0, 0, 290, 0, 235, 217,
	0, 0, 222, 233, 187, 260, 226, 265, 251, 273,
	229, 227, 129, 252, 156, 198, 139, 140, 152, 158,
	160, 162, 163, 207, 208, 220, 240, 253, 254, 255,
	155, 148, 234, 149, 173, 150, 130, 242, 151, 131,
	221, 258, 0, 169, 230, 194, 132, 193, 223, 257,
	256, 281, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 166,
	0, 269, 0, 213, 0, 0, 0, 0, 0, 0,
	0, 209, 285, 0, 0, 0, 0, 238, 0, 0,
	0, 0, 0, 178, 219, 0, 239, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 246,
	267, 279, 270, 0, 0, 0, 278, 0, 0, 0,
	0, 0, 0, 203, 204, 205, 206, 170, 0, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 172, 0, 174, 145, 218, 168, 276, 181, 0,
	210, 177, 243, 182, 188, 231, 275, 216, 236, 143,
	266, 244, 192, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 186, 0, 228, 164, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 215, 0, 282, 283, 284, 268, 0, 0,
	0, 0, 159, 0, 0, 0, 185, 0, 0, 0,
	245, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 577, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 250, 264, 142, 241, 277,
	147, 248, 138, 214, 237, 135, 262, 247, 196, 179,
	180, 134, 0, 232, 157, 171, 154, 212, 0, 0,
	289, 153, 280, 0, 272, 137, 0, 271, 211, 259,
	263, 197, 191, 136, 261, 195, 190, 183, 161, 175,
	224, 189, 225, 176, 201, 200, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 249, 0, 0, 184, 0, 0, 0, 290, 0,
	235, 217, 0, 0, 222, 233, 187, 260, 226, 265,
	251, 273, 229, 227, 129, 252, 156, 198, 139, 140,
	152, 158, 160, 162, 163, 207, 208, 220, 240, 253,
	254, 255, 155, 148, 234, 149, 173, 150, 130, 242,
	151, 131, 221, 258, 0, 169, 230, 194, 132, 193,
	223, 257, 256, 281, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 166, 0, 269, 0, 213, 0, 0, 0, 0,
	0, 0, 0, 209, 285, 0, 0, 0, 0, 238,
	0, 0, 0, 0, 0, 178, 219, 0, 239, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 246, 267, 279, 270, 0, 0, 0, 278, 0,
	0, 0, 0, 0, 0, 203, 204, 205, 206, 170,
	0, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 172, 0, 174, 145, 218, 168, 276,
	181, 0, 210, 177, 243, 182, 188, 231, 275, 216,
	236, 143, 266, 244, 192, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 186, 0, 228, 164, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 215, 0, 282, 283, 284, 268,
	0, 0, 0, 0, 159, 0, 0, 0, 185, 0,
	0, 0, 245, 199, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1568, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 250, 264, 142,
	241, 277, 147, 248, 138, 214, 237, 135, 262, 247,
	196, 179, 180, 134, 0, 232, 157, 171, 154, 212,
	0, 0, 289, 153, 280, 0, 272, 137, 0, 271,
	211, 259, 263, 197, 191, 136, 261, 195, 190, 183,
	161, 175, 224, 189, 225, 176, 201, 200, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 249, 0, 0, 184, 0, 0, 0,
	290, 0, 235, 217, 0, 0, 222, 233, 187, 260,
	226, 265, 251, 273, 229, 227, 129, 252, 156, 198,
	139, 140, 152, 158, 160, 162, 163, 207, 208, 220,
	240, 253, 254, 255, 155, 148, 234, 149, 173, 150,
	130, 242, 151, 131, 221, 258, 0, 169, 230, 194,
	132, 193, 223, 257, 256, 281, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 166, 0, 269, 0, 213, 0, 0,
	0, 0, 0, 0, 0, 209, 285, 0, 0, 0,
	0, 238, 0, 0, 0, 0, 0, 178, 219, 0,
	239, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 267, 279, 270, 0, 0, 0,
	278, 0, 0, 0, 0, 0, 0, 203, 204, 205,
	206, 170, 0, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 172, 0, 174, 145, 218,
	168, 276, 181, 0, 210, 177, 243, 182, 188, 231,
	275, 216, 236, 143, 266, 244, 192, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 186, 0, 228, 164,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 215, 0, 282, 283,
	284, 268, 0, 0, 0, 0, 159, 0, 0, 0,
	185, 0, 0, 0, 245, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 89, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 250,
	264, 142, 241, 277, 147, 248, 138, 214, 237, 135,
	262, 247, 196, 179, 180, 134, 0, 232, 157, 171,
	154, 212, 0, 0, 289, 153, 280, 0, 272, 137,
	0, 271, 211, 259, 263, 197, 191, 136, 261, 195,
	190, 183, 161, 175, 224, 189, 225, 176, 201, 200,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 249, 0, 0, 184, 0,
	0, 0, 290, 0, 235, 217, 0, 0, 222, 233,
	187, 260, 226, 265, 251, 273, 229, 227, 129, 252,
	156, 198, 139, 140, 152, 158, 160, 162, 163, 207,
	208, 220, 240, 253, 254, 255, 155, 148, 234, 149,
	173, 150, 130, 242, 151, 131, 221, 258, 0, 169,
	230, 194, 132, 193, 223, 257, 256, 281, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 166, 0, 269, 0, 213,
	0, 0, 0, 0, 0, 0, 0, 209, 285, 0,
	0, 0, 0, 238, 0, 0, 0, 0, 0, 178,
	219, 0, 239, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 246, 267, 279, 270, 0,
	0, 0, 278, 0, 0, 0, 0, 0, 0, 203,
	204, 205, 206, 170, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 172, 0, 174,
	145, 218, 168, 276, 181, 0, 210, 177, 243, 182,
	188, 231, 275, 216, 236, 143, 266, 244, 192, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 186, 0,
	228, 164, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 215, 0,
	282, 283, 284, 268, 0, 0, 0, 0, 159, 0,
	0, 0, 185, 0, 0, 0, 245, 199, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 250, 264, 142, 241, 277, 147, 248, 138, 214,
	237, 135, 262, 247, 196, 179, 180, 134, 0, 232,
	157, 171, 154, 212, 0, 0, 289, 153, 280, 0,
	272, 137, 0, 271, 211, 259, 263, 197, 191, 136,
	261, 195, 190, 183, 161, 175, 224, 189, 225, 176,
	201, 200, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 249, 0, 0,
	184, 0, 0, 0, 290, 0, 235, 217, 0, 0,
	222, 233, 187, 260, 226, 265, 251, 273, 229, 227,
	129, 252, 156, 198, 139, 140, 152, 158, 160, 162,
	163, 207, 208, 220, 240, 253, 254, 255, 155, 148,
	234, 149, 173, 150, 130, 242, 151, 131, 221, 258,
	0, 169, 230, 194, 132, 193, 223, 257, 256, 281,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 166, 0, 269,
	0, 213, 0, 0, 0, 0, 0, 0, 0, 209,
	285, 0, 0, 0, 0, 238, 0, 0, 0, 0,
	0, 178, 219, 0, 239, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 246, 267, 279,
	270, 0, 0, 0, 278, 0, 0, 0, 0, 0,
	0, 203, 204, 205, 206, 170, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 172,
	0, 174, 145, 218, 168, 276, 181, 0, 210, 177,
	243, 182, 188, 231, 275, 216, 236, 143, 266, 244,
	192, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	186, 0, 228, 164, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	215, 0, 282, 283, 284, 268, 0, 0, 0, 0,
	159, 0, 0, 0, 185, 0, 0, 0, 245, 199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 1227, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 250, 264, 142, 241, 277, 147, 248,
	138, 214, 237, 135, 262, 247, 196, 179, 180, 134,
	0, 232, 157, 171, 154, 212, 0, 0, 289, 153,
	280, 0, 272, 137, 0, 271, 211, 259, 263, 197,
	191, 136, 261, 195, 190, 183, 161, 175, 224, 189,
	225, 176, 201, 200, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 184, 0, 0, 0, 290, 0, 235, 217,
	0, 0, 222, 233, 187, 260, 226, 265, 251, 273,
	229, 227, 129, 252, 156, 198, 139, 140, 152, 158,
	160, 162, 163, 207, 208, 220, 240, 253, 254, 255,
	155, 148, 234, 149, 173, 150, 130, 242, 151, 131,
	221, 258, 0, 169, 230, 194, 132, 193, 223, 257,
	256, 281, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 166,
	0, 269, 0, 213, 0, 0, 0, 0, 0, 0,
	0, 209, 285, 0, 0, 0, 0, 238, 0, 0,
	0, 0, 0, 178, 219, 0, 239, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 246,
	267, 279, 270, 0, 0, 0, 278, 0, 0, 0,
	0, 0, 0, 203, 204, 205, 206, 170, 0, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 172, 0, 174, 145, 218, 168, 276, 181, 0,
	210, 177, 243, 182, 188, 231, 275, 216, 236, 143,
	266, 244, 192, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 186, 0, 228, 164, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 215, 0, 282, 283, 284, 268, 0, 0,
	0, 0, 159, 0, 0, 0, 185, 0, 0, 0,
	245, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 343, 0, 0, 344, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 250, 264, 142, 241, 277,
	147, 248, 138, 214, 237, 135, 262, 247, 196, 179,
	180, 134, 0, 232, 157, 171, 154, 212, 0, 0,
	289, 153, 280, 0, 272, 137, 0, 271, 211, 259,
	263, 197, 191, 136, 261, 195, 190, 183, 161, 175,
	224, 189, 225, 176, 201, 200, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 249, 0, 0, 184, 0, 0, 0, 290, 0,
	235, 217, 0, 0, 222, 233, 187, 260, 226, 265,
	251, 273, 229, 227, 129, 252, 156, 198, 139, 140,
	152, 158, 160, 162, 163, 207, 208, 220, 240, 253,
	254, 255, 155, 148, 234, 149, 173, 150, 130, 242,
	151, 131, 221, 258, 0, 169, 230, 194, 132, 193,
	223, 257, 256, 281, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 166, 0, 269, 0, 213, 0, 0, 0, 0,
	0, 0, 0, 209, 285, 0, 0, 0, 0, 238,
	0, 0, 0, 0, 0, 178, 219, 0, 239, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 246, 267, 279, 270, 0, 0, 0, 278, 0,
	0, 0, 0, 0, 0, 203, 204, 205, 206, 170,
	0, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 172, 0, 174, 145, 218, 168, 276,
	181, 0, 210, 177, 243, 182, 188, 231, 275, 216,
	236, 143, 266, 244, 192, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 186, 0, 228, 164, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 215, 0, 282, 283, 284, 268,
	0, 0, 0, 0, 159, 0, 0, 0, 185, 0,
	0, 0, 245, 199, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 250, 264, 142,
	241, 277, 147, 248, 138, 214, 237, 135, 262, 247,
	196, 179, 180, 134, 0, 232, 157, 171, 154, 212,
	0, 0, 289, 153, 280, 0, 272, 137, 0, 271,
	211, 259, 263, 197, 191, 136, 261, 195, 190, 183,
	161, 175, 224, 189, 225, 176, 201, 200, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 1171,
	0, 0, 0, 249, 0, 0, 184, 0, 0, 0,
	290, 0, 235, 217, 0, 0, 222, 233, 187, 260,
	226, 265, 251, 273, 229, 227, 129, 252, 156, 198,
	139, 140, 152, 158, 160, 162, 163, 207, 208, 220,
	240, 253, 254, 255, 155, 148, 234, 149, 173, 150,
	130, 242, 151, 131, 221, 258, 0, 169, 230, 194,
	132, 193, 223, 257, 256, 281, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 166, 0, 269, 0, 213, 0, 0,
	0, 0, 0, 0, 0, 209, 285, 0, 0, 0,
	0, 238, 0, 0, 0, 0, 0, 178, 219, 0,
	239, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 267, 279, 270, 0, 0, 0,
	278, 0, 0, 0, 0, 0, 0, 203, 204, 205,
	206, 170, 0, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 172, 0, 174, 145, 218,
	168, 276, 181, 0, 210, 177, 243, 182, 188, 231,
	275, 216, 236, 143, 266, 244, 192, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 186, 0, 228, 164,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 215, 0, 282, 283,
	284, 268, 0, 0, 0, 0, 159, 0, 0, 0,
	185, 0, 0, 0, 245, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 577, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 250,
	264, 142, 241, 277, 147, 248, 138, 214, 237, 135,
	262, 247, 196, 179, 180, 134, 0, 232, 157, 171,
	154, 212, 0, 0, 289, 153, 280, 0, 272, 137,
	0, 271, 211, 259, 263, 197, 191, 136, 261, 195,
	190, 183, 161, 175, 224, 189, 225, 176, 201, 200,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 249, 0, 0, 184, 0,
	0, 0, 290, 0, 235, 217, 0, 0, 222, 233,
	187, 260, 226, 265, 251, 273, 229, 227, 129, 252,
	156, 198, 139, 140, 152, 158, 160, 162, 163, 207,
	208, 220, 240, 253, 254, 255, 155, 148, 234, 149,
	173, 150, 130, 242, 151, 131, 221, 258, 0, 169,
	230, 194, 132, 193, 223, 257, 256, 281, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 166, 0, 269, 0, 213,
	0, 0, 0, 0, 0, 0, 0, 209, 285, 0,
	0, 0, 0, 238, 0, 0, 0, 0, 0, 178,
	219, 0, 239, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 246, 267, 279, 826, 0,
	0, 0, 278, 0, 0, 0, 0, 0, 0, 203,
	204, 205, 206, 170, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 172, 0, 174,
	145, 218, 168, 276, 181, 0, 210, 177, 243, 182,
	188, 231, 275, 216, 236, 143, 266, 244, 192, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 186, 0,
	228, 164, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 215, 0,
	282, 283, 284, 268, 0, 0, 0, 0, 159, 0,
	0, 0, 185, 0, 0, 0, 245, 199, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 250, 264, 142, 241, 277, 147, 248, 138, 214,
	237, 135, 262, 247, 196, 179, 180, 134, 0, 232,
	157, 171, 154, 212, 0, 0, 289, 153, 280, 0,
	272, 137, 0, 271, 211, 259, 263, 197, 191, 136,
	261, 195, 190, 183, 161, 175, 224, 189, 225, 176,
	201, 200, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 249, 0, 0,
	184, 0, 0, 0, 290, 0, 235, 217, 0, 0,
	222, 233, 187, 260, 226, 265, 251, 273, 229, 227,
	129, 252, 156, 198, 139, 140, 152, 158, 160, 162,
	163, 207, 208, 220, 240, 253, 254, 255, 155, 148,
	234, 149, 173, 150, 130, 242, 151, 131, 221, 258,
	0, 169, 230, 194, 132, 193, 223, 257, 256, 281,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 166, 0, 269,
	0, 213, 0, 0, 0, 0, 0, 0, 0, 209,
	285, 0, 0, 0, 0, 238, 0, 0, 0, 0,
	0, 178, 219, 0, 239, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 246, 267, 279,
	270, 0, 0, 0, 278, 0, 0, 0, 0, 0,
	0, 203, 204, 205, 206, 170, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 172,
	0, 174, 145, 218, 168, 276, 181, 0, 210, 177,
	243, 182, 188, 231, 275, 216, 236, 143, 266, 244,
	192, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 423, 0, 0, 128, 0,
	186, 0, 228, 164, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	215, 0, 282, 283, 284, 268, 0, 0, 0, 86,
	159, 0, 0, 0, 185, 0, 0, 0, 245, 199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 250, 264, 142, 241, 277, 147, 248,
	138, 214, 237, 135, 262, 247, 196, 179, 180, 134,
	0, 232, 157, 171, 154, 212, 0, 0, 289, 153,
	280, 0, 272, 137, 0, 271, 211, 259, 263, 197,
	191, 136, 261, 195, 190, 183, 161, 175, 224, 189,
	225, 176, 201, 200, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 184, 0, 0, 0, 290, 0, 235, 217,
	0, 0, 222, 233, 187, 260, 226, 265, 251, 273,
	229, 227, 129, 252, 156, 198, 139, 140, 152, 158,
	160, 162, 163, 207, 208, 220, 240, 253, 254, 255,
	155, 148, 234, 149, 173, 150, 130, 242, 151, 131,
	221, 258, 0, 169, 230, 194, 132, 193, 223, 257,
	256, 281, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 166,
	0, 269, 0, 213, 0, 0, 0, 0, 0, 0,
	0, 209, 285, 0, 0, 0, 0, 238, 0, 0,
	0, 0, 0, 178, 219, 0, 239, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 246,
	267, 279, 270, 0, 0, 0, 278, 0, 0, 0,
	0, 0, 0, 203, 204, 205, 206, 170, 0, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 172, 0, 174, 145, 218, 168, 276, 181, 0,
	210, 177, 243, 182, 188, 231, 275, 216, 236, 143,
	266, 244, 192, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 186, 0, 228, 164, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 215, 0, 282, 283, 284, 268, 0, 0,
	0, 0, 159, 0, 0, 0, 185, 0, 0, 0,
	245, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 250, 264, 142, 241, 277,
	147, 248, 138, 214, 237, 135, 262, 247, 196, 179,
	180, 134, 0, 232, 157, 171, 154, 212, 0, 0,
	289, 153, 280, 0, 272, 137, 0, 271, 211, 259,
	263, 197, 191, 136, 261, 195, 190, 183, 161, 175,
	224, 189, 225, 176, 201, 200, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 249, 0, 0, 184, 0, 0, 0, 290, 0,
	235, 217, 0, 0, 222, 233, 187, 260, 226, 265,
	251, 273, 229, 227, 129, 252, 156, 198, 139, 140,
	152, 158, 160, 162, 163, 207, 208, 220, 240, 253,
	254, 255, 155, 148, 234, 149, 173, 150, 130, 242,
	151, 131, 221, 258, 0, 169, 230, 194, 132, 193,
	223, 257, 256, 281, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 166, 0, 269, 0, 213, 0, 0, 0, 0,
	0, 0, 0, 209, 285, 0, 0, 0, 0, 238,
	0, 0, 0, 0, 0, 178, 219, 0, 239, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 246, 267, 279, 270, 0, 0, 0, 278, 0,
	0, 0, 0, 0, 0, 203, 204, 205, 206, 170,
	0, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 172, 0, 174, 145, 218, 168, 276,
	181, 0, 210, 177, 243, 182, 188, 231, 275, 216,
	236, 143, 266, 244, 192, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 186, 0, 228, 164, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 0, 215, 282, 283, 284, 268,
	474, 0, 0, 0, 0, 159, 0, 0, 0, 185,
	0, 0, 0, 245, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 479, 480, 481, 476, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 250, 264,
	142, 241, 277, 147, 248, 138, 214, 237, 135, 262,
	247, 196, 179, 180, 134, 0, 232, 157, 171, 154,
	212, 0, 0, 289, 153, 280, 0, 272, 137, 0,
	271, 211, 259, 263, 197, 191, 136, 261, 195, 190,
	183, 161, 175, 224, 189, 225, 176, 201, 200, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 184, 0, 0,
	0, 290, 0, 235, 217, 0, 0, 222, 233, 187,
	260, 226, 265, 251, 273, 229, 227, 129, 252, 156,
	198, 139, 140, 152, 158, 160, 162, 163, 207, 208,
	220, 240, 253, 254, 255, 155, 148, 234, 149, 173,
	150, 130, 242, 151, 131, 221, 258, 0, 169, 230,
	194, 132, 193, 223, 257, 256, 281, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 166, 0, 269, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 209, 285, 0, 0,
	0, 0, 238, 0, 0, 0, 0, 0, 178, 219,
	0, 239, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 246, 267, 279, 270, 0, 0,
	0, 278, 0, 0, 0, 0, 0, 0, 203, 204,
	205, 206, 170, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 172, 0, 174, 145,
	218, 168, 276, 181, 0, 210, 177, 243, 182, 188,
	231, 275, 216, 236, 143, 266, 244, 192, 167, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 159, 0, 0, 0, 185, 0, 0, 0,
	245, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 186, 0, 228,
	164, 479, 480, 481, 476, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 284, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 250, 264, 142, 241, 277,
	147, 248, 138, 214, 237, 135, 262, 247, 196, 179,
	180, 134, 0, 232, 157, 171, 154, 212, 0, 0,
	289, 153, 280, 0, 272, 137, 0, 271, 211, 259,
	263, 197, 191, 136, 261, 195, 190, 183, 161, 175,
	224, 189, 225, 176, 201, 200, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 249, 0, 0, 184, 0, 0, 0, 290, 0,
	235, 217, 0, 0, 222, 233, 187, 260, 226, 265,
	251, 273, 229, 227, 129, 252, 156, 198, 139, 140,
	152, 158, 160, 162, 163, 207, 208, 220, 240, 253,
	254, 255, 155, 148, 234, 149, 173, 150, 130, 242,
	151, 131, 221, 258, 0, 169, 230, 194, 132, 193,
	223, 257, 256, 281, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 166, 0, 269, 0, 213, 0, 0, 0, 0,
	0, 0, 0, 209, 285, 0, 0, 0, 0, 238,
	0, 0, 0, 0, 0, 178, 219, 0, 239, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 246, 267, 279, 270, 0, 0, 0, 278, 0,
	0, 0, 0, 0, 0, 203, 204, 205, 206, 170,
	0, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 172, 0, 174, 145, 218, 168, 276,
	181, 0, 210, 177, 243, 182, 188, 231, 275, 216,
	236, 143, 266, 244, 192, 167, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 159,
	0, 0, 0, 185, 0, 0, 0, 245, 199, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 186, 0, 228, 164, 479, 480,
	481, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 284, 268,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 250, 264, 142, 241, 277, 147, 248, 138,
	214, 237, 135, 262, 247, 196, 179, 180, 134, 0,
	232, 157, 171, 154, 212, 0, 0, 289, 153, 280,
	0, 272, 137, 0, 271, 211, 259, 263, 197, 191,
	136, 261, 195, 190, 183, 161, 175, 224, 189, 225,
	176, 201, 200, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 249, 0,
	0, 184, 0, 0, 0, 290, 0, 235, 217, 0,
	0, 222, 233, 187, 260, 226, 265, 251, 273, 229,
	227, 129, 252, 156, 198, 139, 140, 152, 158, 160,
	162, 163, 207, 208, 220, 240, 253, 254, 255, 155,
	148, 234, 149, 173, 150, 130, 242, 151, 131, 221,
	258, 1782, 169, 230, 194, 132, 193, 223, 257, 256,
	281, 287, 288, 0, 83, 0, 24, 42, 25, 0,
	0, 0, 0, 0, 0, 1183, 0, 286, 166, 0,
	269, 0, 213, 0, 68, 0, 0, 0, 76, 0,
	209, 285, 0, 0, 0, 0, 238, 0, 0, 2182,
	0, 0, 178, 219, 0, 239, 43, 0, 0, 0,
	1764, 79, 0, 0, 0, 0, 0, 0, 246, 267,
	279, 270, 0, 0, 0, 278, 0, 0, 0, 0,
	0, 0, 203, 204, 205, 206, 170, 0, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	172, 0, 174, 145, 218, 168, 276, 181, 0, 210,
	177, 243, 182, 188, 231, 275, 216, 236, 143, 266,
	244, 192, 167, 0, 1782, 0, 0, 0, 72, 73,
	0, 74, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1782, 0, 0, 0, 0, 1183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	0, 186, 0, 228, 164, 0, 0, 1183, 0, 0,
	0, 0, 0, 1852, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1764, 0, 1768, 0, 0, 0, 60,
	71, 80, 0, 41, 0, 0, 1772, 0, 0, 0,
	0, 0, 1764, 282, 283, 284, 268, 0, 0, 70,
	67, 66, 0, 0, 0, 0, 1761, 0, 0, 0,
	1763, 1765, 1767, 0, 1769, 1770, 1771, 1773, 1774, 1775,
	1777, 1778, 1779, 1780, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1783, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1781, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 0, 0, 1768, 52,
	0, 1760, 0, 0, 0, 0, 0, 0, 0, 1772,
	0, 0, 0, 0, 0, 0, 1776, 1768, 0, 0,
	0, 0, 0, 1766, 0, 0, 0, 0, 1772, 1761,
	0, 0, 0, 1763, 1765, 1767, 53, 1769, 1770, 1771,
	1773, 1774, 1775, 1777, 1778, 1779, 1780, 0, 1761, 0,
	0, 0, 1763, 1765, 1767, 0, 1769, 1770, 1771, 1773,
	1774, 1775, 1777, 1778, 1779, 1780, 0, 0, 0, 0,
	0, 0, 0, 1783, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1783, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1781, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1760, 0, 1781, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1776,
	0, 0, 0, 1760, 0, 0, 1766, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1776, 0,
	0, 0, 0, 0, 0, 1766,
}

var yyPact = [...]int{
	21478, -1000, -305, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 19642, 1711, -1000, 8385, 20074, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 243, 16618, 20074, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7935, 7485, 147, -1000, 1693, -1000, -1000, -1000, -1000,
	194, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1422, -62, 342, 350, 352, 352, 9682, 1693, 1394, 175,
	27, -1000, 19210, 632, 21478, 187, 20074, -1000, 408, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 16618, 20074, -80, 592, -1000, 165, 160, 171, 404,
	-1000, -1000, -1000, -1000, 1710, 20074, 1588, -1000, -1000, -1000,
	1641, 20507, 175, -1000, 1303, 1317, -1000, -1000, 1515, -1000,
	98, -11, -32, 452, -1000, -1000, 172, -1000, -1000, -1000,
	-1000, -1000, 37, -1000, -18, -1000, -25, -1000, -1000, -1000,
	-128, -1000, -1000, -1000, -1000, -1000, 1257, 367, 1542, -170,
	1606, 1656, 1394, 1688, 1650, 1, 212, 212, 240, 212,
	-1000, -1000, -1000, -1000, -1000, -1000, 395, 395, 596, 201,
	-1000, -1000, -130, -138, 395, 395, -138, 5, -1000, 1587,
	1468, -1000, -1000, -1000, -1000, -1000, -1000, 217, -1000, -185,
	-1000, 322, -1000, 319, -1000, 10996, 170, 1328, 603, -1000,
	523, 20074, 20074, 20074, 523, 523, 12298, 11866, 403, -1000,
	1656, 1394, -1000, 1693, 1693, 1233, 1131, 217, 217, 217,
	217, 217, 1327, 20074, -1000, 1419, 5267, 5267, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 177, 1513, -1000, 20074,
	1544, -1000, 401, 826, 967, -1000, -1000, 165, 1301, -1000,
	650, -1000, -1000, -1000, -1000, 20074, 165, 1510, 20074, 16618,
	16618, 16618, 16618, -1000, 1572, 1570, -1000, 1569, 1568, 1553,
	20074, -1000, -1000, -1000, 20864, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1226, 1693, 102, 8016, 15754, 17914, 20074, 15754,
	-1000, -1000, -1000, -1000, -1000, -133, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 102, 15754, 15754, -90,
	-1000, -1000, -288, 1606, 5709, -1000, -1000, 5709, -1000, -1000,
	235, 212, -1000, 15754, 612, 17914, 860, 20074, 1698, 6593,
	1698, 20074, -1000, -1000, 395, 395, -1000, 596, 596, -1000,
	-1000, -135, 1698, 1698, -146, 20074, 212, -1000, -1000, 18778,
	1624, -161, 338, 323, 325, -1000, -1000, -173, -1000, -1000,
	1309, 11434, 10558, 207, 15754, 3493, -1000, -1000, 523, 523,
	523, 3493, 3493, 371, -1000, -1000, -1000, -1000, -1000, -1000,
	20074, 1606, -1000, -1000, -1000, 1656, 1606, 1656, -1000, -1000,
	15754, 17914, 20074, 20074, 21221, 20074, 1327, 1640, 20074, 1268,
	-1000, -1000, 9250, 399, 5709, 844, 1509, -1000, -1000, 1508,
	1507, 1506, 1502, 1501, 1500, 1499, -1000, 1459, -1000, -1000,
	1498, 1496, 1493, 1492, -1000, -1000, -1000, -1000, -1000, -1000,
	1491, -1000, -1000, -1000, 1490, 1459, -1000, -1000, 1488, 1487,
	1485, 1484, 1483, -1000, -1000, -1000, -1000, -1000, -1000, 966,
	965, 1642, -1000, -1000, -1000, -1000, 3051, 6593, 6593, 6593,
	6593, -1000, -1000, 1427, 5709, 1478, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7035, -1000, 1476, 1475, 1474, 1465, 1461, 1459, 1458,
	962, 1454, 1453, 1451, 6593, 1449, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1268, -1000, -286, -1000,
	10126, 20074, 20074, -1000, 1691, 5709, 2195, -1000, 1646, -1000,
	165, 79, -1000, -1000, -1000, -1000, -1000, -1000, 397, -1000,
	-1000, -1000, -1000, -1000, 20074, 1312, -1000, 539, 1527, 1531,
	1527, -1000, -1000, -1000, -1000, 1566, -1000, 1557, -1000, -1000,
	1419, -1000, -1000, 593, -1000, -1000, -1000, -1000, -1000, -18,
	-25, 1293, -1000, -48, 97, -1000, 1296, -1000, -1000, -1000,
	593, 1293, 232, 949, 947, -1000, 939, 386, 1326, -1000,
	720, 18346, 20074, 202, 1618, 1309, 1381, 1592, -1000, -1000,
	-1000, 1698, 1698, 1698, 395, 21221, 596, 20074, 596, -1000,
	-1000, 596, -1000, 380, 20074, 202, 1448, -1000, -1000, -1000,
	328, 318, 317, 17914, 231, -1000, -1000, 1309, -1000, -1000,
	-1000, 1444, 513, -1000, -1000, 6593, -1000, 819, -1000, 3493,
	3493, 3493, -1000, -1000, 14458, -1000, -1000, 1606, -1000, 1606,
	1293, 1309, 1529, 1320, -1000, -1000, -1000, -1000, -1000, 1436,
	1289, -1000, 1698, 5267, -1000, 16618, -1000, 5709, 5709, 5709,
	5709, -1000, 17482, -1000, 17050, -1000, 373, 6151, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 5709, 1648, 1648, 1648, 5709,
	559, 5709, 5709, -1000, 673, 7587, 1648, 1648, 1648, 1648,
	1648, -1000, 2601, 1648, 1648, 1648, 1648, -1000, -1000, 6593,
	6593, 6593, 6593, 6593, 6593, 6593, 6593, 6593, 6593, 6593,
	6593, 1426, 628, 6593, 6593, 6593, 1131, 1455, 1319, -1000,
	-1000, -1000, -1000, -1000, 582, 819, 5709, 714, 5709, 5709,
	5709, -1000, 1202, 1194, -1000, -1000, 5709, -1000, 5709, 6593,
	5709, -1000, 1648, 1698, 1245, -1000, 1435, -1000, 1283, 1583,
	-1000, 376, 1311, -1000, 488, 1272, -1000, 1656, 819, -1000,
	364, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -82, -1000, -1000, 20074, 1265, 1691, 20074, 5709, -1000,
	-1000, 5709, 1429, -1000, 5709, -1000, -1000, -1000, -1000, 1704,
	361, 358, 15754, -1000, 163, 15754, -1000, -1000, 20074, 229,
	15754, -1, -142, 5709, 5709, 20074, 5709, -1000, -1000, -1000,
	1419, 605, 1428, -226, -1000, -63, -1000, 1525, 94, -1000,
	1592, -1000, 595, -1000, -1000, -1000, -1000, 1698, -1000, 395,
	-1000, 395, 596, 20074, -1000, -1000, -226, 1176, -1000, -1000,
	-1000, 311, 1309, 15754, 927, 207, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 20074, 20074, 21478, -1000, 20074, 1694, -1000,
	1307, 1613, -1000, 639, 639, 623, -1000, -1000, 357, -1000,
	-1000, 225, -1000, -1000, -1000, -1000, -1000, 1427, -1000, -1000,
	-1000, 1167, 1240, 819, 5709, -1000, -1000, 5709, 5709, 1159,
	5709, 1153, 1261, 1259, -1000, 1150, 1703, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 5709, 5709, 5709, 5709,
	5709, 810, 4825, -1000, -1000, -1000, 5709, 5709, 5709, 5709,
	803, 1682, -1000, 567, 567, 413, 413, 413, 413, 413,
	739, 739, -1000, -1000, -1000, 3051, 1426, 6593, 6593, 6593,
	196, 2480, 2673, -1000, 5709, 597, -1000, 5709, 781, -1000,
	1148, 1072, 1140, 1138, -1000, -1000, 999, 1133, 2585, 1130,
	5709, 1694, -286, 4377, 190, 20074, -286, 20074, 20074, 4377,
	-1000, 20074, -1000, 2195, 821, -1000, -1000, 1656, -1000, 819,
	819, 20074, 819, 15754, 372, 578, -1000, 14026, 15754, -1000,
	-1000, 15754, 128, 1599, -1000, -1000, -108, -100, 819, 819,
	356, -1000, 1639, 1612, 8817, -1000, -81, -1000, -1000, -1000,
	307, -1000, 946, 945, 937, 935, 20074, -1000, -1000, -1000,
	-1000, -1000, 472, 472, 472, -1000, 1698, 1698, 395, -1000,
	-8, -53, -1000, 1293, 1128, -1000, -1000, -1000, -1000, 1125,
	-1000, 1695, 1687, 16618, 16186, -1000, -1000, -1000, -1000, -1000,
	5709, 1445, 1415, 1407, 549, 1255, -1000, -1000, -1000, -1000,
	5709, 1379, 1371, 1351, 1332, 1299, -1000, 5709, 5709, 934,
	1168, 1164, 1155, 1119, 1250, -1000, 196, 2480, 1879, -1000,
	6593, 6593, 1112, 550, -1000, 5709, 709, 549, 13162, -1000,
	5709, -1000, -1000, -1000, 13162, -1000, 6593, -1000, 1093, 1695,
	-1000, 1121, 1306, -1000, -286, -1000, -1000, 1245, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1248, 1293,
	-1000, -1000, -1000, -1000, 15754, 1628, 202, -1000, -16, 242,
	-290, -92, 1683, 1681, 20074, 175, 20074, 1114, 1291, -1000,
	-1000, -1000, 178, 570, -1000, 20074, 638, 360, 212, 360,
	636, 1425, -1000, -1000, -81, -1000, 813, 808, 806, 805,
	-51, -1000, -1000, -1000, -1000, -1000, 1424, 13162, -1000, 13594,
	932, -1000, -1000, 1698, -1000, -8, -1000, 268, 259, 12,
	1680, -1000, -1000, -1000, 5709, 5709, 1613, -1000, -1000, 819,
	-1000, -1000, -1000, 1105, -1000, 1366, 1418, -1000, 1366, 1412,
	1366, 303, 303, 1421, 1421, 1423, 1421, -1000, 1085, -1000,
	-1000, -1000, -1000, -1000, 1064, 1015, 5709, -1000, -1000, -1000,
	-1000, -1000, -1000, 6593, -1000, -1000, -1000, -1000, 819, 5709,
	1090, 1084, 729, 1082, 1982, -1000, -1000, -1000, 4377, 1245,
	-1000, -1000, 15754, 15754, -227, -19, 20074, -292, 930, -1000,
	1676, 928, 824, -1000, 1419, 21608, 8817, 981, -40, -1000,
	-1000, -1000, 1366, -1000, 1418, 1418, 1366, 1366, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1414, 1413, -1000,
	1366, 1412, 1412, 1366, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 20074, 20074, -1000, 20074, 20074, 212, 5709, -1000, -1000,
	-1000, -1000, -1000, -1000, 15322, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 798, -1000, -1000, -1000, 927, 819,
	1240, -1000, -1000, -1000, 776, -1000, 775, -1000, -1000, 773,
	-1000, -1000, -1000, -1000, -1000, -1000, 771, -1000, -1000, 764,
	-1000, -1000, -1000, -1000, 1009, -1000, 819, -1000, -1000, -1000,
	5709, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -146, -295,
	763, -1000, 923, -95, -1000, -1000, 1635, 185, 21589, -1000,
	472, 472, 363, 472, 472, 472, 472, 141, 122, 472,
	472, 472, 472, 472, 472, 472, 472, 472, 472, 472,
	472, 472, 472, 1399, -1000, -1000, 981, -1000, -1000, 653,
	6593, -1000, -1000, 922, 13594, 406, 387, 1391, -1000, 95,
	633, 629, -1000, 20074, -1000, -43, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 918, 918, -1000, -1000, -1000, -1000, 1380,
	1353, 41, 1370, -1000, 1369, 1368, 20074, 1000, 1243, -1000,
	1366, 5709, 7, -1000, -1000, 1065, 1044, 1026, 1231, 1223,
	-1000, 989, -116, -107, -1000, 1364, -1000, -1000, 1674, 175,
	-1000, 1665, 21608, -1000, 761, 757, 472, 472, 754, 917,
	912, 911, 472, 472, 712, 894, 20864, 706, 705, 702,
	804, 893, 541, 788, 736, 725, 20074, 1361, 883, -1000,
	-1000, 2480, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 701, 1354, -1000, -1000, 1350, -1000, -1000,
	1220, -1000, 1218, 15322, 89, 89, 15322, 15322, 15322, 1348,
	249, -1000, 15322, 1615, 969, -1000, -1000, -1000, -1000, -1000,
	696, -1000, 691, -1000, 227, -106, -107, -1000, 1664, -103,
	1663, 1662, 20074, 824, -1000, 114, -1000, -1000, -1000, 13162,
	13162, -1000, -1000, -1000, -1000, 891, 886, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 155,
	20074, 1174, -1000, 480, 1016, 5709, -221, 15322, -1000, 884,
	-1000, 1172, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1166,
	1162, 1157, 15322, -1000, -1000, -1000, 93, 108, -1000, -1000,
	1615, 997, 980, 1345, 687, -92, 1660, -1000, 824, 1659,
	824, 824, 1146, -1000, -1000, 49, 193, 191, -1000, 215,
	-1000, -1000, -1000, -1000, -1000, -1000, 162, 1124, -1000, 883,
	881, -1000, 802, 1523, -1000, -17, 1103, -1000, -1000, -1000,
	-1000, -1000, 1100, -1000, -1000, 472, 841, 33, -1000, -1000,
	-1000, -1000, -1000, 1438, 12730, -120, -1000, 840, -1000, 824,
	-1000, -1000, -1000, 20074, 47, 686, 6593, 1343, 6593, 1342,
	67, 1340, -1000, -1000, -1000, -1000, -1000, 249, -1000, -1000,
	1519, 1410, 1702, -1000, -1000, -1000, -1000, 108, 108, 108,
	108, -21, 684, -1000, 860, -1000, 20074, -1000, 1079, -1000,
	-1000, -1000, 355, -1000, -1000, -1000, -1000, 1338, 1658, -1000,
	1777, 20074, 1158, 20074, 1335, 464, 6593, -1000, -1000, 1717,
	-1000, 1714, 427, 427, -1000, -1000, -1000, 1238, -1000, 442,
	-1000, 14890, 20074, -1000, 184, 52, -1000, 1043, -1000, 1036,
	20074, 678, 1020, -1000, -1000, -1000, 746, 103, -1000, 20074,
	3935, -1000, 354, 1006, -1000, 977, 43, -1000, -1000, 1004,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 819, 20074, -1000,
	184, 1582, -1000, 672, -1000, -1000, -1000, 21466, 181, -1000,
	-1000, 21466, 46, -1000, 167, -1000, -1000, 988, -1000, 728,
	1331, -1000, 46, 21608, 5709, -1000, 21608, 986, -1000,
}

var yyPgo = [...]int{
	0, 105, 2100, 2097, 109, 107, 2096, 2082, 2080, 2078,
	2077, 2076, 2075, 2074, 2073, 2072, 2071, 2070, 2069, 2068,
	2066, 2065, 2063, 2058, 2057, 2056, 2054, 2053, 2051, 2050,
	2049, 2048, 2047, 2046, 102, 2045, 2044, 2043, 2042, 2039,
	2038, 136, 2034, 2033, 2029, 2027, 2026, 2024, 2023, 2022,
	2021, 2019, 2017, 126, 60, 100, 736, 73, 188, 167,
	124, 2016, 97, 157, 2015, 2014, 24, 116, 2013, 121,
	119, 85, 141, 92, 84, 59, 2012, 2010, 2009, 134,
	2008, 2007, 2006, 2004, 56, 2003, 70, 40, 30, 2002,
	79, 2000, 1999, 1998, 1997, 1996, 75, 1995, 67, 47,
	1994, 1992, 1979, 1977, 1976, 34, 1973, 46, 1972, 1970,
	1969, 1968, 1967, 1966, 1965, 14, 16, 18, 1964, 1963,
	15, 2, 1962, 137, 112, 78, 99, 1961, 176, 1960,
	1957, 1956, 154, 1955, 122, 1954, 1952, 1951, 1950, 9,
	1949, 45, 1948, 1947, 1946, 57, 1944, 1943, 1942, 91,
	36, 35, 88, 1937, 1932, 1930, 135, 21, 95, 0,
	132, 38, 1929, 1928, 131, 130, 1927, 90, 201, 113,
	48, 1926, 49, 63, 1925, 1924, 1922, 104, 68, 39,
	1921, 81, 1920, 42, 82, 1919, 98, 1918, 123, 1,
	93, 1917, 138, 1916, 1915, 1914, 114, 1912, 1911, 51,
	120, 1906, 1902, 1901, 27, 1900, 32, 20, 1897, 142,
	149, 1896, 1895, 1894, 118, 89, 76, 1891, 1876, 64,
	1875, 111, 69, 115, 1873, 720, 106, 66, 17, 1871,
	143, 1870, 202, 146, 129, 1869, 1868, 150, 1572, 144,
	1867, 140, 10, 1866, 1865, 11, 1863, 23, 1862, 1861,
	1859, 1858, 6, 1857, 1856, 1854, 3, 5, 1853, 4,
	96, 41, 55, 1852, 54, 62, 1851, 1850, 1849, 1848,
	1847, 241, 1846, 1845, 1843, 1842, 1840, 1839, 1838, 80,
	1837, 1835, 1833, 1831, 58, 1829, 1826, 1825, 1824, 1823,
	31, 1822, 1821, 19, 1819, 26, 1803, 1798, 1780, 12,
	1774, 1773, 13, 1769, 1767, 7, 8, 1766, 1765, 50,
	37, 33, 72, 71, 1764, 22, 1763, 86, 1762, 1760,
	117, 1759, 94, 1758, 1756, 139, 165, 1755, 133, 1742,
	1737, 1734, 1733, 1732, 1731, 1729, 1728, 1727, 125, 1713,
}

//line mysql_sql.y:6546
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 336, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 49, 308, 308, 307, 307, 306, 306, 305,
	305, 305, 304, 304, 304, 303, 303, 302, 302, 300,
	300, 301, 299, 298, 298, 296, 296, 294, 294, 295,
	295, 289, 289, 292, 292, 290, 290, 290, 290, 293,
	288, 288, 288, 287, 287, 48, 48, 48, 227, 227,
	47, 47, 241, 241, 241, 241, 241, 239, 239, 239,
	239, 238, 238, 237, 237, 242, 242, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	42, 42, 42, 42, 45, 46, 235, 235, 235, 235,
	235, 236, 236, 236, 43, 44, 44, 226, 226, 231,
	231, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 234, 234, 234, 233, 233, 232, 232,
	36, 36, 36, 39, 38, 225, 225, 225, 225, 225,
	225, 225, 225, 37, 37, 37, 37, 37, 37, 35,
	35, 34, 224, 224, 223, 52, 52, 52, 52, 51,
	41, 41, 41, 41, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 331, 331, 331, 333, 333, 163, 162,
	162, 162, 327, 327, 328, 329, 330, 330, 330, 50,
	7, 33, 33, 271, 271, 174, 174, 175, 175, 173,
	173, 173, 173, 173, 173, 274, 275, 170, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 25,
	25, 32, 337, 337, 337, 30, 31, 270, 270, 270,
	29, 28, 27, 26, 26, 24, 24, 23, 23, 167,
	167, 169, 169, 165, 338, 338, 247, 247, 168, 168,
	22, 22, 166, 166, 146, 164, 164, 164, 6, 8,
	8, 8, 8, 8, 13, 12, 11, 10, 9, 5,
	4, 278, 278, 278, 278, 278, 278, 316, 316, 316,
	317, 78, 78, 73, 73, 279, 279, 190, 318, 318,
	286, 286, 285, 285, 284, 284, 76, 76, 77, 77,
	65, 65, 53, 53, 291, 291, 291, 291, 297, 297,
	268, 268, 112, 112, 142, 142, 143, 143, 54, 54,
	55, 55, 55, 55, 55, 55, 324, 324, 326, 326,
	325, 75, 75, 71, 71, 72, 72, 72, 70, 70,
	69, 68, 68, 67, 66, 66, 66, 57, 57, 56,
	56, 56, 56, 56, 128, 128, 128, 58, 58, 332,
	332, 332, 272, 272, 272, 277, 277, 125, 125, 126,
	126, 124, 124, 59, 59, 60, 60, 60, 60, 123,
	123, 122, 61, 61, 62, 62, 64, 64, 64, 64,
	133, 133, 132, 132, 132, 132, 81, 81, 131, 130,
	130, 130, 80, 80, 79, 79, 74, 74, 63, 63,
	129, 339, 339, 127, 155, 155, 155, 161, 161, 154,
	154, 154, 154, 154, 160, 160, 156, 156, 157, 157,
	157, 3, 3, 3, 16, 16, 16, 16, 20, 20,
	334, 334, 14, 221, 221, 220, 220, 222, 222, 222,
	222, 216, 216, 217, 217, 217, 217, 218, 218, 218,
	219, 219, 219, 219, 215, 215, 214, 212, 212, 212,
	213, 213, 213, 213, 213, 213, 158, 158, 15, 209,
	209, 210, 210, 210, 211, 211, 203, 203, 203, 203,
	19, 207, 207, 208, 208, 208, 208, 208, 204, 204,
	206, 206, 202, 202, 202, 202, 202, 18, 201, 201,
	199, 199, 197, 197, 198, 198, 196, 196, 196, 200,
	200, 17, 273, 273, 243, 243, 246, 246, 253, 253,
	254, 254, 252, 252, 259, 259, 258, 258, 257, 257,
	256, 256, 255, 255, 250, 250, 249, 249, 244, 244,
	244, 244, 244, 245, 245, 248, 248, 251, 251, 103,
	103, 104, 104, 104, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 314, 314, 315, 106, 106, 106, 110,
	110, 110, 110, 110, 110, 105, 105, 107, 107, 88,
	88, 87, 87, 82, 82, 83, 83, 84, 84, 85,
	85, 86, 86, 86, 86, 86, 86, 229, 229, 312,
	312, 313, 313, 309, 309, 309, 311, 311, 311, 311,
	311, 310, 310, 89, 140, 140, 140, 159, 159, 159,
	139, 139, 139, 102, 102, 101, 101, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	228, 228, 171, 171, 172, 172, 120, 118, 118, 119,
	119, 119, 119, 116, 117, 115, 115, 115, 115, 115,
	114, 114, 113, 113, 113, 205, 205, 111, 111, 109,
	109, 109, 108, 108, 108, 260, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 182,
	182, 187, 187, 323, 323, 322, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 98, 98, 98, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 283, 283, 283, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 335, 335,
	335, 319, 319, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 137, 137, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 191, 191, 192,
	192, 280, 280, 280, 280, 280, 280, 281, 281, 282,
	282, 282, 282, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 180, 134, 134, 134, 193, 188, 188, 189, 189,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	185, 185, 185, 185, 185, 177, 177, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 184, 184, 186, 186,
	195, 195, 195, 194, 194, 194, 194, 194, 194, 194,
	100, 100, 100, 100, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 91, 91, 91, 91, 95, 95, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 96, 96, 96, 96, 94, 94, 94,
	94, 94, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 93, 141, 141,
	261, 261, 264, 264, 262, 262, 263, 265, 265, 265,
	266, 266, 266, 267, 267, 267, 269, 269, 145, 145,
	145, 151, 151, 144, 144, 152, 152, 153, 153, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147,
}

var yyR2 = [...]int{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 14, 0, 2, 1, 3, 3, 3, 1,
	3, 5, 0, 2, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 0, 3, 0, 3, 0, 3, 0,
	3, 0, 2, 1, 2, 3, 4, 3, 3, 1,
	0, 1, 1, 0, 1, 9, 4, 7, 0, 3,
	7, 4, 1, 3, 3, 3, 1, 0, 1, 1,
	1, 1, 3, 1, 4, 1, 3, 1, 2, 1,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 2, 1, 1, 1,
	3, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 3, 6, 3, 1, 1, 1,
	1, 1, 1, 1, 2, 4, 6, 1, 4, 1,
	3, 3, 4, 4, 4, 3, 3, 2, 4, 4,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 1, 2, 2, 0, 4, 2, 4, 1,
	5, 3, 2, 1, 2, 2, 4, 4, 5, 2,
	1, 7, 1, 3, 3, 1, 1, 1, 1, 4,
	1, 1, 1, 1, 2, 3, 4, 7, 2, 3,
	3, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 1, 1, 1, 1, 6,
	1, 7, 9, 0, 2, 0, 1, 1, 2, 2,
	2, 1, 4, 2, 2, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 5, 1, 1, 1, 5, 5, 0, 1, 1,
	2, 2, 3, 6, 7, 4, 4, 7, 8, 0,
	2, 0, 2, 2, 1, 1, 1, 1, 0, 1,
	4, 5, 1, 3, 1, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 4, 4, 6, 4, 4, 6,
	4, 2, 1, 5, 4, 4, 2, 0, 1, 3,
	3, 1, 3, 1, 3, 1, 3, 4, 0, 1,
	0, 1, 1, 3, 1, 1, 0, 4, 1, 3,
	2, 1, 0, 8, 0, 4, 7, 4, 0, 2,
	0, 2, 0, 2, 0, 4, 1, 3, 1, 1,
	4, 3, 4, 5, 4, 5, 2, 3, 1, 3,
	6, 0, 3, 0, 1, 2, 4, 4, 0, 1,
	3, 1, 3, 2, 0, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 1, 2, 2, 7, 7, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 2, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 3, 1, 1, 4, 4, 4, 3,
	2, 2, 2, 3, 2, 3, 0, 2, 1, 1,
	2, 2, 0, 1, 2, 4, 1, 3, 1, 4,
	3, 0, 1, 2, 0, 1, 2, 1, 1, 0,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 8, 11,
	0, 1, 6, 0, 2, 1, 2, 2, 2, 2,
	2, 0, 1, 2, 2, 2, 2, 1, 3, 2,
	2, 2, 2, 2, 1, 3, 2, 1, 3, 2,
	0, 3, 3, 5, 5, 4, 1, 1, 4, 1,
	3, 1, 3, 2, 1, 1, 0, 1, 1, 1,
	11, 0, 2, 3, 2, 3, 1, 1, 1, 3,
	3, 4, 0, 2, 2, 2, 2, 5, 1, 1,
	0, 3, 0, 1, 1, 2, 4, 4, 4, 0,
	1, 10, 0, 1, 0, 6, 0, 4, 0, 3,
	1, 3, 4, 5, 0, 3, 1, 3, 2, 3,
	1, 2, 0, 6, 0, 2, 0, 2, 4, 5,
	4, 5, 1, 6, 5, 0, 3, 0, 1, 0,
	1, 1, 3, 2, 3, 3, 4, 4, 3, 3,
	3, 3, 4, 4, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 5, 4, 1, 3, 3, 0, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 0, 1, 1, 3, 1, 1, 2,
	1, 7, 7, 7, 7, 8, 5, 0, 1, 0,
	1, 1, 1, 1, 3, 3, 1, 1, 1, 1,
	1, 0, 1, 3, 1, 3, 5, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 2, 1, 2, 2,
	1, 1, 2, 2, 2, 2, 2, 1, 5, 6,
	1, 2, 0, 1, 1, 2, 5, 0, 1, 1,
	1, 2, 2, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 2, 2, 2, 0, 3, 0, 3, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 3, 5, 2, 2, 2, 2, 1, 1,
	2, 5, 6, 6, 6, 1, 1, 1, 1, 0,
	2, 0, 1, 1, 2, 4, 1, 2, 2, 1,
	2, 2, 2, 2, 2, 0, 1, 1, 5, 4,
	4, 5, 5, 5, 5, 4, 5, 5, 5, 5,
	5, 5, 5, 1, 1, 1, 4, 4, 6, 8,
	6, 4, 5, 5, 4, 6, 6, 7, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 4, 2, 3, 2, 4, 6,
	2, 2, 4, 6, 4, 2, 2, 0, 1, 2,
	3, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 3, 0, 1, 1, 3,
	3, 3, 3, 3, 2, 3, 4, 3, 4, 1,
	3, 4, 3, 4, 1, 1, 1, 3, 4, 4,
	5, 3, 4, 5, 6, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 1, 1, 3,
	0, 1, 0, 3, 0, 3, 3, 0, 3, 5,
	0, 3, 5, 0, 1, 1, 0, 1, 1, 2,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int{
	-1000, -336, -2, -1, -3, -4, -5, -6, -40, -51,
	-21, -7, -50, -34, -35, -36, -42, -47, -48, -49,
	-54, -16, -15, -14, 8, 10, -8, -162, -163, -22,
	-23, -24, -26, -27, -28, -29, -30, -31, -32, -25,
	-33, 185, 9, 48, -37, -38, -39, -43, -44, -45,
	-46, 295, 301, 338, -55, -57, -17, -18, -19, -20,
	181, -9, -10, -11, -12, -13, 203, 202, 26, 262,
	201, 182, 120, 121, 123, 124, 30, -56, -324, 53,
	183, -58, 411, 6, 456, -65, 27, -87, -159, 57,
	-147, -150, 414, 415, 416, 417, 418, 419, 420, 421,
	422, 423, 424, 425, 426, 427, 428, 429, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 446, 447, 448, 449, 408, 220,
	244, 247, 254, 120, 137, 131, 159, 151, 128, 224,
	225, 64, 123, 367, 74, 352, 337, 126, 239, 241,
	243, 246, 226, 147, 142, 238, 222, 140, 227, 28,
	228, 164, 229, 230, 413, 348, 277, 371, 354, 251,
	335, 141, 349, 242, 351, 165, 169, 359, 301, 135,
	136, 356, 361, 163, 200, 32, 410, 212, 362, 167,
	162, 158, 370, 255, 253, 161, 134, 157, 223, 37,
	171, 170, 172, 331, 332, 333, 334, 231, 232, 289,
	358, 154, 143, 281, 129, 18, 365, 207, 353, 302,
	233, 248, 210, 256, 166, 168, 214, 219, 412, 218,
	252, 363, 139, 211, 240, 206, 366, 130, 295, 304,
	234, 124, 245, 360, 369, 36, 317, 133, 127, 197,
	121, 216, 221, 235, 236, 237, 258, 257, 249, 155,
	213, 160, 132, 156, 122, 215, 368, 318, 455, 279,
	320, 153, 150, 217, 190, 364, 355, 125, 324, 319,
	148, 259, 452, 453, 454, 290, 276, 260, 261, 146,
	204, 11, -164, 19, 335, -41, 336, 185, 53, -159,
	-5, -4, -34, -54, -164, 188, -62, -63, -64, -127,
	-129, -87, 53, -159, -238, -209, -237, -210, -240, -211,
	-158, 20, 182, 181, 215, 10, 183, 299, 189, 8,
	6, 300, 201, 9, 301, 303, 304, 307, 308, 309,
	31, 312, 313, 57, 60, -159, -238, -209, 219, 226,
	-69, -70, -128, 15, 5, -273, 320, 218, -203, -201,
	310, 198, 197, 75, 373, 187, 406, -145, -337, -270,
	355, 354, -168, 353, 346, 357, 348, 181, 74, 152,
	149, 189, 356, 32, 359, 360, 349, 320, 125, 122,
	-225, 80, 130, 129, -225, 218, 29, -231, 330, -230,
	-232, 359, 360, 370, 58, 59, 358, -145, -159, 74,
	-70, -128, -69, -56, -57, -55, -57, 320, 218, 189,
	188, 373, -326, 405, -325, -159, -272, -332, 20, -277,
	178, 179, 180, 21, 22, -1, -76, 210, -87, 119,
	-62, -139, -159, 337, 89, -41, -41, 336, -327, -328,
	-329, -331, 185, 336, 335, 119, 11, -87, 30, -130,
	-131, -132, -133, 40, 44, 46, 41, 42, 43, 47,
	-339, 23, -155, -161, 23, -156, 60, -157, -150, 57,
	58, 59, -55, -57, 50, 54, 11, 54, 53, 457,
	58, 297, 311, 320, 298, 310, 190, 218, 311, 218,
	346, 190, 302, 305, 306, 347, 50, 191, 50, -287,
	370, -53, 27, -72, 17, -58, -57, 16, 20, 21,
	-334, 188, 405, -199, 193, -199, 189, -199, -167, 97,
	-167, -338, 11, 99, 217, 216, 350, 347, -247, 351,
	352, -168, -167, -167, -168, 188, 373, 30, 30, -271,
	193, 363, 411, 128, 129, 130, -235, 20, 29, 329,
	-209, 218, 54, 89, 19, -233, 89, 100, -232, -232,
	-232, -233, -233, -105, 29, -158, 116, 60, -105, 29,
	119, -71, -72, -58, -57, -70, -69, -70, 55, 55,
	-271, -271, -271, -271, -271, 54, -326, -75, 53, -59,
	-60, 107, -183, -159, 81, -185, 57, -178, 414, 415,
	416, 417, 418, 419, 420, 421, 422, 423, 424, 425,
	426, 427, 428, 430, 431, 432, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 449, 74, 335, 289, 320, 148, 290, 146,
	204, -179, -181, -305, -300, -176, 53, 105, 106, 113,
	82, -180, -260, 24, 84, 381, -135, -136, -137, -138,
	-301, -299, 60, 65, 68, 71, 72, 70, 69, 144,
	67, 118, -57, -319, -148, -276, -282, 187, -280, 149,
	145, 8, 111, 330, 116, -283, 59, 58, 283, 284,
	285, 373, 280, 286, 193, 42, 287, 288, 291, 380,
	292, 43, 293, 282, 208, 294, 384, 383, 385, 377,
	374, 372, 375, 376, 378, 379, -59, -278, 33, -54,
	53, 30, 53, -159, -124, 12, 119, 65, 60, -41,
	55, 54, -330, 71, 72, -333, 163, 155, -159, -52,
	-5, -4, -34, -54, 53, -224, -223, -139, -63, -63,
	-63, -63, 40, 40, 40, 45, 40, 45, 40, -132,
	-159, -161, 55, -239, 188, 296, 214, -237, 215, 301,
	304, -215, -214, -212, -158, -210, -242, -139, -158, 347,
	-239, -215, -214, 339, 451, -53, -183, -159, -68, -67,
	-183, 190, -199, -215, 81, -209, -157, -159, -124, -181,
	-124, -87, -167, -167, -169, -338, -165, -338, 347, -124,
	-124, -247, -166, -159, -199, -215, 320, 24, 364, 365,
	126, 129, 128, 371, -236, 329, 20, -209, -230, -226,
	60, 330, -214, -234, 50, 116, -284, -183, 29, -233,
	-233, -233, -234, -234, 115, -159, -53, -71, -53, -72,
	-215, -209, -159, -88, -87, -160, -157, -150, -325, 23,
	-74, -159, -123, 54, -122, 11, -154, 80, 77, 78,
	79, -159, 23, 60, 119, -183, 96, -194, 89, 90,
	91, 92, 93, 94, 95, 53, 53, 53, 53, 53,
	53, 53, 53, -192, 53, 53, 53, 53, 53, 53,
	53, -192, 53, 53, 53, 53, 53, 60, 60, 102,
	101, 112, 105, 106, 107, 108, 109, 110, 111, 103,
	104, 99, 81, 97, 98, 83, -57, -183, -189, -181,
	-181, -181, -181, -260, -187, -183, 53, -183, 53, 53,
	53, -281, 53, 53, -191, -192, 53, 60, 53, 53,
	53, -181, 53, -123, -279, -190, -318, 450, -78, 55,
	-73, -159, -316, -317, -73, -77, -159, -70, -183, -152,
	-153, -144, -149, -156, -157, -150, 278, 186, 20, 80,
	23, 25, 283, 315, 83, 116, 16, 84, 149, 115,
	285, 381, 284, 181, 46, 383, 385, 384, 374, 372,
	322, 326, 328, 325, 373, 346, 29, 10, 26, 202,
	21, 22, 109, 183, 87, 88, 205, 24, 203, 72,
	19, 49, 11, 13, 14, 286, 321, 193, 192, 99,
	339, 189, 44, 8, 118, 27, 96, 323, 40, 76,
	42, 97, 17, 375, 376, 31, 338, 407, 209, 111,
	287, 288, 47, 81, 329, 70, 50, 77, 15, 45,
	98, 184, 380, 43, 327, 291, 293, 405, 292, 187,
	357, 6, 282, 382, 30, 201, 41, 188, 347, 86,
	191, 71, 208, 145, 5, 75, 9, 48, 51, 377,
	378, 379, 33, 85, 12, 294, 411, 330, 340, 341,
	342, 343, 344, 345, 173, 174, 175, 176, 177, 250,
	196, 194, 198, 199, 450, 451, 178, 179, 273, 275,
	152, 19, -41, -328, 119, -74, -124, 54, 89, -80,
	-79, 50, 51, -81, 50, -79, 40, 40, -75, -241,
	107, 57, 54, -213, 321, 457, 58, 55, 54, -241,
	191, 60, 60, 54, 18, 119, 54, -66, 25, 26,
	-87, 193, -87, -216, -217, 327, 24, -202, 51, -197,
	-198, -196, -200, 29, -124, -124, -124, -167, -160, -169,
	-164, -169, -165, 119, -146, -159, -216, 53, 127, 130,
	130, 129, -209, 191, 53, 89, -234, -234, -234, 29,
	-158, -53, -53, 50, 54, 53, 55, 54, -124, -60,
	-61, -62, -183, -183, -183, -183, -159, 60, -159, 107,
	-177, 81, 276, 70, 71, 72, -178, -195, 20, 260,
	261, -188, -189, -183, -134, 21, 20, -134, -134, -183,
	-134, 107, -189, -189, 55, 65, -320, -321, 386, 387,
	388, 389, 390, 391, 392, 393, 394, 395, 396, 287,
	282, 288, 286, 280, 294, 289, 290, 148, 403, 404,
	397, 398, 399, 400, 401, 402, -134, -134, -134, -134,
	-134, -183, -335, 274, 273, 275, -134, -134, -134, -134,
	-179, -179, -179, -179, -179, -179, -179, -179, -179, -179,
	-179, -179, -186, -193, -260, 53, 99, 97, 98, 83,
	-181, -179, -179, 55, 54, -323, -322, 85, -183, -320,
	-188, -183, -188, -188, 55, 55, -189, -188, -179, -188,
	-134, -124, 54, 53, 55, 54, 33, 119, 54, 89,
	55, 54, -71, 119, 337, -159, 55, -70, -223, -183,
	-183, 53, -183, 11, 119, 119, -214, 16, 411, -158,
	-139, 191, -215, -288, 192, 380, -291, 351, -183, -183,
	-159, -67, -75, 81, 53, -221, 411, 329, 328, 324,
	-218, -219, 323, 325, 322, 326, 50, 268, 269, 270,
	271, -196, -145, 115, 229, -124, -167, -167, -169, -159,
	-221, 55, 130, -215, -170, 60, -226, -87, -87, -1,
	-159, -126, 13, 54, 119, -177, 276, 70, -260, 55,
	54, -183, -183, -183, 23, -189, 55, 55, 55, 55,
	11, -183, -183, -183, -183, -183, 55, 11, 11, -183,
	-183, -183, -183, -183, -189, -186, -181, -179, -179, -184,
	205, 80, -183, -182, -322, 87, -183, 54, 51, 55,
	11, 55, 55, 55, 51, 55, 54, 55, -183, -126,
	-190, -286, -285, -284, 33, -54, -73, -279, -159, -317,
	-284, -159, -152, -149, -157, -150, 65, -71, -74, -215,
	107, 107, 57, -158, 330, -158, -215, -227, 411, 27,
	-297, 345, 340, 342, 119, 23, 24, -82, -83, -84,
	-89, -85, -139, -172, -86, 196, 194, 198, -313, 75,
	199, 250, 76, 189, -220, -222, 331, 332, 333, 334,
	80, -219, 60, 60, 60, 60, -87, -151, 89, -151,
	-151, -124, -124, -167, -174, -175, -173, 278, -274, 330,
	321, 55, 55, -125, 14, 16, -62, -159, 107, -183,
	55, 55, 55, -90, -96, 116, 149, 204, 148, 147,
	145, 317, 318, 140, 141, 142, 139, 55, -183, 55,
	55, 55, 55, 55, -183, -183, 11, 55, 55, 55,
	55, 55, -184, 80, -181, -178, 55, 88, -183, 86,
	-90, -105, -183, -105, -179, 55, -125, 55, 54, -279,
	55, -158, 16, 23, -216, 301, 188, -268, 452, -295,
	340, 16, 16, -54, -87, 55, 54, -91, -95, -92,
	-94, -93, -97, -96, 149, 150, 116, 153, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 30, 204,
	145, 146, 147, 148, 165, 131, 151, 409, 173, 132,
	174, 133, 175, 134, 176, 135, 136, 177, 137, -86,
	-159, 76, -312, -313, -199, -312, 76, 53, -222, 65,
	65, 65, 65, -219, 53, -105, -107, -158, 116, 60,
	-124, -173, 279, 31, 118, 281, 29, 277, 16, -183,
	-189, 55, -261, -263, 53, -262, 53, -261, -264, 53,
	-261, -98, 136, 135, -98, -265, 53, -265, -266, 53,
	-265, 55, 55, 55, -183, -178, -183, 55, 55, 55,
	19, 55, 55, -284, -158, -158, -227, 302, -87, -112,
	453, 60, 16, 60, -293, 60, -75, -103, -104, -121,
	315, 220, -200, 224, 64, 225, 337, 226, 189, 228,
	229, 230, 200, 231, 232, 233, 330, 234, 235, 236,
	237, 298, 5, 264, -84, -102, -101, -99, 70, 81,
	29, 315, -100, 64, 115, 243, 221, 244, -120, -171,
	194, 75, 76, 303, -172, -267, 318, 317, -261, -262,
	-262, -261, -261, 53, 53, -261, -264, -264, -261, -309,
	-310, -159, -310, -159, -309, -309, -199, -183, -204, -206,
	-139, 53, 65, -275, -170, 65, 65, 65, 65, 65,
	55, -183, -289, -247, -142, 454, 65, 60, 342, 23,
	-243, 210, 54, -121, -151, -151, -145, 115, -151, -151,
	-151, -151, 227, 227, -151, -151, -151, -151, -151, -151,
	-151, -151, -151, -151, -151, -151, -151, -151, 53, -99,
	70, -179, 60, -107, -108, 29, 242, 238, -109, 29,
	222, 223, -111, 53, 250, 76, 76, -87, -269, 319,
	-141, 60, -141, 53, 51, 259, 53, 53, 53, -310,
	55, 55, 54, -261, -183, 280, 55, 55, 55, 55,
	54, 55, 54, 55, -296, 345, -292, -290, 340, 341,
	342, 343, 53, 16, -54, 16, -121, 65, 65, -151,
	-151, 65, 60, 60, 60, -151, -151, 65, 60, -161,
	65, 65, 65, 65, 29, 60, -110, 29, 238, 242,
	239, 240, 241, 65, 29, 65, 29, 65, 29, -159,
	53, -314, -315, 60, 65, 53, -205, 53, 55, 54,
	55, -204, -311, 268, 269, 270, 272, 271, -311, -204,
	-204, -204, 53, -229, -228, 251, 81, -207, -206, -66,
	55, 65, 65, -298, 192, -294, 344, -290, 16, 342,
	16, 16, -143, -159, -293, -244, 252, 253, -245, -251,
	255, -105, -105, 60, 60, -106, 221, -88, 55, 54,
	89, 55, -183, -114, -113, 407, -204, 60, 55, 55,
	55, 55, -204, 251, -208, 200, 64, 411, 266, 267,
	-66, 55, 55, -304, 53, 65, -295, 16, -293, 16,
	-293, -293, 55, 54, -249, 256, 53, -247, 53, -247,
	76, 269, 222, 223, 55, -315, 60, 55, -118, -119,
	-116, -117, 50, 349, 248, 249, 55, -207, -207, -207,
	-207, 55, -151, 60, 265, -308, 30, 55, -303, -302,
	-140, -299, -159, 345, 60, -293, -159, -246, 257, 65,
	-179, 53, -179, 53, -248, 254, 53, -228, -117, 50,
	-116, 50, 10, 9, -120, 65, -157, -307, -306, -305,
	55, 54, 119, -253, 53, 16, 55, -242, 55, -242,
	53, 89, -179, -115, 245, 246, 30, 129, -115, 54,
	89, -302, -159, -254, -252, 210, -245, 55, 55, -242,
	65, 55, 70, 29, 247, -306, 29, -183, 119, 55,
	54, 57, -250, 258, 55, -159, -252, -255, 33, 65,
	-259, -256, 53, -121, 212, -259, -121, -258, -257, 257,
	213, 55, 54, 57, 53, -257, -256, -189, 55,
}

var yyDef = [...]int{
	21, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 461, 462, 463, 0, 0, 288, 0, 0, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	220, 0, 0, 180, 160, 161, 162, 120, 121, 122,
	123, 0, 0, 0, 348, -2, 464, 465, 466, 467,
	-2, 289, 290, 291, 292, 293, 209, 210, 211, 208,
	-2, 0, 173, 0, 165, 165, 0, 368, 0, 0,
	0, 379, 0, 392, 21, 326, 0, 331, 641, 677,
	678, 679, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
	1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384,
	1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
	1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1194, 1195,
	1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
	1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245,
	1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
	1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
	1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
	1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
	1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
	1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345,
	1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355,
	1356, 0, 194, 0, 1236, 198, 0, 0, 0, 285,
	190, 191, 192, 193, 0, 0, 0, 414, 415, 438,
	441, 444, 0, 179, 0, 0, 81, 509, 83, 511,
	0, 87, 89, 90, -2, 94, 95, 96, 97, 98,
	99, 100, 0, 102, 1244, 104, 1305, 107, 108, 109,
	0, 118, 119, -2, -2, 506, 0, 0, 1293, 63,
	-2, 0, 0, 0, 384, 470, 540, 540, 0, 540,
	553, 517, 518, 519, 538, 539, 269, 269, 0, 0,
	260, 261, 0, 278, 269, 269, 278, 0, 1038, 0,
	0, 252, 253, 254, 258, 259, 279, 223, 174, 175,
	164, 0, 169, 0, 163, 1295, 0, 134, 0, 139,
	0, 1243, 1309, 1258, 0, 0, 1276, 0, 158, -2,
	363, 0, 369, 368, 368, 0, 368, 223, 223, 223,
	223, 223, 356, 0, 358, 361, 0, 0, 393, 394,
	389, 390, 391, 395, 396, 3, 0, 0, 330, 0,
	401, 195, 680, 0, 0, 199, 200, 0, 0, 212,
	0, 215, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 429, 0, 0, 428, 0, 0, 0,
	0, 442, 443, 445, 0, 447, 448, 456, 457, 458,
	459, 460, 0, 368, 77, 0, 0, 0, 0, 0,
	513, 88, 117, 91, 92, 0, 112, 114, 116, 115,
	101, 113, 103, 105, 106, 111, 77, 0, 0, 0,
	64, 351, 0, 332, 0, 381, 383, 0, 385, 386,
	0, 540, 471, 0, 0, 0, 0, 0, 401, 0,
	401, 0, 274, 275, 269, 269, 262, 271, 0, 276,
	277, 0, 401, 401, 0, 0, 540, 1039, 1040, 0,
	0, 0, 0, 167, 0, 172, 124, 129, 127, 128,
	130, 0, 0, 0, 0, 0, 156, 157, 0, 0,
	0, 0, 0, 147, 150, 635, 636, 507, 151, 152,
	0, 332, 364, 380, 382, 363, -2, 0, 377, 378,
	0, 0, 0, 0, 0, 0, 357, 0, 0, 409,
	403, 405, 449, 29, 0, 929, 677, 934, -2, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, -2, 1376, -2, -2,
	1379, 1380, 1381, 1383, -2, -2, -2, -2, -2, -2,
	1390, -2, -2, -2, 1394, 1395, -2, -2, 1398, 1399,
	1400, 1401, 1402, -2, -2, -2, -2, -2, -2, -2,
	-2, 945, 748, 749, 750, 751, 0, 0, 0, 0,
	0, 758, 759, 0, 771, 0, 765, 766, 767, 768,
	39, 40, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 892, 735, 0, 0, 0, 877, 0, 867, 0,
	905, 0, 0, 0, 0, 0, 41, 42, 883, 885,
	886, 888, 889, 890, 891, 894, 895, 896, 899, 900,
	901, 902, 903, 904, 907, 909, 879, 880, 881, 882,
	871, 872, 873, 874, 875, 876, 409, 300, 318, 302,
	0, 307, 0, 642, 368, 0, 0, 196, 0, 201,
	0, 0, 214, 216, 217, 218, 206, 207, 286, 189,
	185, 186, 187, 188, 0, 401, 182, 0, 432, 426,
	0, 419, 430, 431, 422, 0, 424, 0, 420, 421,
	361, 446, 440, 0, 78, 79, 80, 82, 93, 0,
	0, 71, 494, 500, 497, 510, 0, 85, 512, 110,
	0, 66, 0, 0, 0, 352, 365, 29, 370, 371,
	374, 0, 0, 481, 0, 508, 532, -2, 249, 270,
	250, 401, 401, 401, 269, 0, 271, 0, 271, 265,
	266, 0, 280, 282, 0, 481, 1336, 224, 176, 177,
	0, 0, 171, 0, 0, 131, 132, 133, 140, 135,
	137, 0, 0, 141, 153, 154, 155, 324, 325, 0,
	0, 0, 145, 146, 0, 159, 350, 332, 354, 332,
	294, 295, 0, 297, 639, 298, 454, 455, 359, 0,
	0, 436, 401, 0, 410, 0, 406, 0, 0, 0,
	0, 450, 0, 452, 0, 924, 0, 0, 953, 954,
	955, 956, 957, 958, 959, 916, 912, 912, 912, 0,
	912, 0, 0, 852, 0, 0, 912, 912, 912, 912,
	912, 853, 0, 912, 912, 912, 912, 866, 860, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 918, 0, 754,
	755, 756, 757, 760, 0, 772, 0, 0, 916, 916,
	916, 855, 0, 0, 857, 868, 0, 861, 916, 0,
	916, 865, 912, 401, 301, 315, 0, 319, 0, 0,
	311, 313, 306, 308, 0, 0, 328, 363, 402, 681,
	0, 1045, -2, 1047, -2, -2, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
	1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152,
	1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
	1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
	1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
	1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
	1193, 0, 202, 213, 0, 0, 368, 0, 0, 416,
	433, 0, 0, 417, 0, 418, 423, 425, 439, 0,
	72, 76, 0, 496, 0, 0, 499, 84, 0, 0,
	0, 60, 334, 0, 0, 0, 0, 373, 375, 376,
	361, 0, 0, 473, 482, 0, 541, 0, 0, 537,
	-2, 544, 0, 550, 251, 255, 256, 401, 272, 269,
	273, 269, 271, 0, 281, 284, 473, 0, 178, 166,
	168, 0, 126, 0, 0, 0, 142, 143, 144, 148,
	149, 353, 355, 0, 0, 21, 362, 0, 399, 404,
	411, 412, 920, 921, 922, 923, 451, 453, 30, 407,
	925, 0, 927, 930, 935, 936, 932, 0, 950, -2,
	-2, 0, 917, 918, 0, 913, 914, 0, 0, 0,
	0, 0, 0, 0, 869, 0, 0, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 0, 0, 0, 0,
	0, 0, 0, 818, 819, 820, 0, 0, 0, 0,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 937, 948, 949, 0, 0, 0, 0, 0,
	946, 941, 0, 752, 0, 769, 773, 0, 0, 911,
	0, 918, 0, 0, 878, 856, 0, 0, 0, 0,
	0, 399, 318, 320, 0, 0, 318, 0, 0, 0,
	327, 0, 299, 0, 0, 287, 219, 363, 183, 184,
	434, 0, 427, 0, 0, 0, 495, 0, 0, 498,
	86, 0, 68, 0, 61, 62, 338, 0, 366, 367,
	30, 372, 0, 0, 643, 472, 0, 483, 484, 485,
	486, 487, 0, 0, 0, 0, 0, 533, 534, 535,
	536, 545, 1041, 1041, 1041, 263, 401, 401, 269, 283,
	225, 0, 170, 125, 0, 237, 136, 296, 640, 0,
	437, 397, 0, 0, 0, 926, 928, 931, 933, 806,
	0, 0, 0, 0, 0, 0, 795, 789, 790, 870,
	0, 0, 0, 0, 0, 0, 814, 0, 0, 0,
	0, 0, 0, 0, 0, 938, 946, 942, 0, 939,
	0, 0, 919, 0, 774, 0, 0, 0, 0, 807,
	0, 811, 854, 858, 0, 862, 0, 864, 0, 397,
	316, 0, 321, 322, 318, 305, 312, 304, 314, 309,
	310, 329, 682, 1046, 1043, 1044, 197, 181, 0, 70,
	73, 74, 75, 501, 0, 502, 481, 67, 0, 0,
	340, 49, 0, 0, 0, 0, 0, 0, 644, 645,
	647, 648, 0, 0, 650, 704, 0, 659, 540, 659,
	0, 0, 661, 662, 474, 475, 0, 0, 0, 0,
	0, 489, 490, 491, 492, 493, 0, 0, 1042, 0,
	0, 267, 264, 401, 221, 226, 227, 0, 231, 0,
	0, 138, 360, 387, 0, 0, 413, 31, 408, 919,
	791, 792, 793, 0, 776, 1020, 1024, 779, 1020, 1022,
	1020, 785, 785, 1027, 1027, 1030, 1027, 794, 0, 813,
	796, 797, 800, 798, 0, 0, 0, 812, 801, 802,
	788, 915, 940, 0, 947, 943, 753, 761, 770, 0,
	0, 0, 0, 0, 0, 799, 388, 317, 0, 303,
	435, 505, 0, 0, 68, 0, 0, 342, 0, 339,
	0, 0, 0, 468, 361, -2, 0, -2, 1033, 974,
	975, 976, 1020, 978, 1024, 1024, 1020, 1020, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 0, 0, 997,
	1020, 1022, 1022, 1020, 1017, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 649,
	705, 671, 671, 660, 671, 671, 540, 0, 476, 477,
	478, 479, 480, 488, 0, 546, 547, 637, 638, 548,
	268, 228, 229, 230, 0, 233, 234, 236, 0, 398,
	400, 762, 777, 1021, 0, 778, 0, 780, 781, 0,
	782, 783, 786, 787, 784, 993, 0, 994, 995, 0,
	996, 810, 815, 816, 0, 944, 775, 763, 764, 808,
	0, 859, 863, 323, 503, 504, 65, 69, 51, 344,
	0, 341, 0, 335, 337, 59, 0, 554, -2, 591,
	1041, 1041, 0, 1041, 1041, 1041, 1041, 0, 0, 1041,
	1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
	1041, 1041, 1041, 0, 646, 673, -2, 685, 687, 0,
	0, 690, 691, 0, 0, 0, 0, 727, 697, 0,
	0, 962, 963, 0, 703, 1036, 1034, 1035, 977, 1002,
	1003, 1004, 1005, 0, 0, 998, 999, 1000, 1001, 0,
	663, 672, 0, 672, 0, 0, 671, 0, 0, 528,
	1020, 0, 0, 235, 222, 0, 0, 0, 0, 0,
	817, 0, 45, 0, 333, 0, 343, 50, 0, 0,
	551, 0, 549, 593, 0, 0, 1041, 1041, 0, 0,
	0, 0, 1041, 1041, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 686,
	688, 689, 692, 693, 694, 732, 733, 734, 695, 729,
	730, 731, 696, 0, 0, 960, 961, 725, 973, 1037,
	0, 1018, 0, 0, 0, 0, 0, 0, 0, 0,
	657, 521, 0, 374, 0, 232, 1026, 1025, 1023, 1028,
	0, 1031, 0, 809, 43, 47, 52, 53, 0, 0,
	0, 0, 0, 0, 469, 587, 592, 594, 595, 0,
	0, 598, 599, 600, 601, 0, 0, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 629, 630, 631,
	632, 633, 634, 614, 615, 616, 617, 618, 619, 626,
	0, 0, 623, 0, 0, 0, 720, 0, 1015, 0,
	1016, 0, 664, 666, 667, 668, 669, 670, 665, 0,
	0, 0, 0, 656, 658, 700, 0, 520, 529, 530,
	374, 0, 0, 32, 0, 49, 0, 54, 0, 0,
	0, 0, 0, 346, 336, 576, 0, 0, 582, 0,
	588, 596, 597, 602, 603, 620, 0, 0, 622, 0,
	0, 728, 0, 707, 721, 0, 0, 1019, 521, 521,
	521, 521, 0, 701, 522, 1041, 0, 0, 526, 527,
	531, 1029, 1032, 23, 0, 0, 46, 0, 55, 0,
	57, 58, 345, 0, 556, 0, 0, 0, 0, 0,
	585, 0, 627, 628, 621, 624, 625, 698, 706, 708,
	709, 710, 0, 722, 723, 724, 726, 651, 652, 653,
	654, 0, 0, 524, 0, 22, 0, 33, 0, 35,
	37, 38, 674, 44, 48, 56, 347, 558, 0, 577,
	0, 0, 0, 0, 0, 0, 0, 699, 711, 0,
	712, 0, 0, 0, 655, 523, 525, 24, 25, 0,
	34, 0, 0, 555, 0, 587, 578, 0, 580, 0,
	0, 0, 0, 713, 715, 716, 0, 0, 714, 0,
	0, 36, 675, 0, 560, 0, 574, 579, 581, 0,
	586, 584, 717, 719, 718, 26, 27, 28, 0, 559,
	0, 572, 557, 0, 583, 676, 561, -2, 0, 575,
	562, -2, 0, 570, 0, 563, 571, 0, 566, 0,
	0, 565, 0, -2, 0, 567, -2, 0, 573,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 110, 102, 3,
	53, 55, 107, 105, 54, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 456,
	90, 89, 91, 3, 457, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:506
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:512
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:536
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 21:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:540
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:546
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				File:              yyDollar[5].str,
				DuplicateHandling: yyDollar[6].duplicateKeyUnion(),
				Table:             yyDollar[9].tableNameUnion(),
				Fields:            yyDollar[10].fieldsUnion(),
				Lines:             yyDollar[11].linesUnion(),
				IgnoredLines:      uint64(yyDollar[12].int64ValUnion()),
				ColumnList:        yyDollar[13].loadColumnsUnion(),
				Assignments:       yyDollar[14].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:561
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:565
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:571
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:575
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:581
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:588
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:597
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:601
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:605
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:610
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:614
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:618
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:624
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:633
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:644
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:648
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:654
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:658
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:664
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:688
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//        	yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:707
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:711
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:716
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:720
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:728
		{
			yyVAL.str = ""
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:732
		{
			yyVAL.str = yyDollar[3].str
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:737
		{
			yyVAL.str = "\n"
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:741
		{
			yyVAL.str = yyDollar[3].str
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:746
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:750
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:774
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:778
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:784
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:790
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:808
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:825
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:848
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:852
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:856
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:861
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:865
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:871
		{
			yyLOCAL = &tree.Grant{
				Privileges:  yyDollar[2].privilegesUnion(),
				ObjType:     yyDollar[4].objectTypeUnion(),
				Level:       yyDollar[5].privilegeLevelUnion(),
				Users:       yyDollar[7].usersUnion(),
				GrantOption: yyDollar[9].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:881
		{
			yyLOCAL = &tree.Grant{
				IsGrantRole:      true,
				RolesInGrantRole: yyDollar[2].rolesUnion(),
				Users:            yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:889
		{
			yyLOCAL = &tree.Grant{
				IsProxy:     true,
				ProxyUser:   yyDollar[4].userUnion(),
				Users:       yyDollar[6].usersUnion(),
				GrantOption: yyDollar[7].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:899
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:903
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:913
		{
			yyLOCAL = &tree.Revoke{
				Privileges: yyDollar[2].privilegesUnion(),
				ObjType:    yyDollar[4].objectTypeUnion(),
				Level:      yyDollar[5].privilegeLevelUnion(),
				Users:      yyDollar[7].usersUnion(),
				Roles:      nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:923
		{
			yyLOCAL = &tree.Revoke{
				IsRevokeRole:      true,
				RolesInRevokeRole: yyDollar[2].rolesUnion(),
				Users:             yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:933
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:939
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_GLOBAL,
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:945
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
				DbName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:952
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				DbName:  yyDollar[1].str,
				TabName: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:960
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:968
		{
			yyLOCAL = tree.OBJECT_TYPE_NONE
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:972
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:976
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:980
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:986
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:990
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:996
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1003
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1012
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1016
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1022
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1026
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1030
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1034
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1038
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1042
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1046
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1050
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1054
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1058
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1062
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1066
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1070
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1074
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1078
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1082
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1086
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1090
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1094
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1098
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1102
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1106
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1110
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1114
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1118
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1122
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1126
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1130
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1134
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1138
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1142
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1146
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1150
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1162
		{
			yyLOCAL = yyDollar[3].setRoleUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1168
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1176
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL_EXCEPT, Roles: yyDollar[3].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1180
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_DEFAULT, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1184
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1188
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1192
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1198
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1202
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1206
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1212
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1218
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1222
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:1229
		{
			yyVAL.str = yyDollar[3].str
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1235
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1239
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1245
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1253
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1262
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1270
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1278
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1301
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1324
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1331
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1338
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     yyDollar[1].str,
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1346
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1353
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1360
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1369
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1373
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1377
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1383
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1387
		{
			yyVAL.str = yyDollar[1].str
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1394
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1405
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1411
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1416
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1420
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1424
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1428
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1432
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1436
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1440
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1444
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1450
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1454
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1458
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1462
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1467
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1472
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1478
		{
			yyLOCAL = &tree.Use{Name: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1482
		{
			yyLOCAL = &tree.Use{}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1488
		{
			yyLOCAL = &tree.Update{
				Table:   yyDollar[2].tableExprUnion(),
				Exprs:   yyDollar[4].updateExprsUnion(),
				Where:   yyDollar[5].whereUnion(),
				OrderBy: yyDollar[6].orderByUnion(),
				Limit:   yyDollar[7].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1501
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1505
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1511
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1520
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1526
		{
			yyLOCAL = tree.NewPrepareStmt(yyDollar[2].unresolvedObjectNameUnion(), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1536
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1542
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1547
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1552
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1556
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1560
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1564
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1572
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1580
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1590
		{
			explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
			explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1616
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1620
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:1626
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1632
		{
			yyVAL.str = yyDollar[1].str
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1637
		{
			yyVAL.str = "true"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1638
		{
			yyVAL.str = "false"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1639
		{
			yyVAL.str = yyDollar[1].str
		}
	case 219:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1644
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1654
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: false,
				Users:      yyDollar[4].usersUnion(),
				TlsOpts:    yyDollar[5].tlsOptionsUnion(),
				ResOpts:    yyDollar[6].resourceOptionsUnion(),
				MiscOpts:   yyDollar[7].userMiscOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1665
		{
			auth := &tree.User{
				AuthString: yyDollar[9].str,
				ByAuth:     true,
			}
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: true,
				UserFunc:   auth,
			}
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1678
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1682
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1687
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1691
		{
			yyLOCAL = yyDollar[1].userMiscOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1697
		{
			yyLOCAL = []tree.UserMiscOption{yyDollar[1].userMiscOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1701
		{
			yyLOCAL = append(yyDollar[1].userMiscOptionsUnion(), yyDollar[2].userMiscOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1707
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1711
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1715
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1719
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1723
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1727
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1733
		{
			yyVAL.item = nil
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1738
		{
			yyVAL.item = nil
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1760
		{
			yyLOCAL = &tree.ShowTarget{Target: yyDollar[2].str, Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1764
		{
			yyLOCAL = &tree.ShowTarget{Target: "charset", Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1770
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: *yyDollar[4].tableNameUnion(),
				Where:     yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1784
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1794
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1803
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1807
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1811
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1817
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1823
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1829
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1835
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1845
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1857
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1861
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1867
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1879
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1892
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1896
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1901
		{
			yyVAL.str = ""
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:1905
		{
			yyVAL.str = yyDollar[2].str
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1911
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1924
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1928
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1934
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1938
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1944
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1948
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1957
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1961
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1965
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].str, yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1981
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1990
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1999
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].str),
				TableName: *yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2009
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2015
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].str), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2021
		{
			yyLOCAL = &tree.Delete{
				Table:   yyDollar[3].tableExprUnion(),
				Where:   yyDollar[4].whereUnion(),
				OrderBy: yyDollar[5].orderByUnion(),
				Limit:   yyDollar[6].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2036
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2045
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2052
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2058
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2066
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2073
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2080
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2099
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2103
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2107
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:2113
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2122
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2126
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2132
		{
			yyVAL.str = yyDollar[1].str
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2136
		{
			yyVAL.str = yyDollar[3].str
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2142
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2146
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2152
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2157
		{
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2161
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2168
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2172
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2179
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2184
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2188
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2194
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2198
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2204
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2208
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2213
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2217
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2230
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2237
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2244
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2262
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2281
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2287
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2294
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2298
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2311
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2315
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2320
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2324
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2331
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2336
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2343
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2349
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2353
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Ep: yyDollar[3].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2357
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2361
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2365
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2369
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2375
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2382
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2391
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2395
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:2401
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].str), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2409
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2413
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2418
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2422
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2428
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2432
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2436
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2441
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2445
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2451
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2457
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2461
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:2467
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2472
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2476
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2480
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2487
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2491
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2497
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2501
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2511
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2521
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2531
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2543
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2551
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2559
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2569
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2580
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2598
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2602
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2606
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2615
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2619
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2624
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2628
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2633
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2637
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2643
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2647
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2653
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2657
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: tree.UnrestrictedIdentifier(yyDollar[2].str)}
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2661
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2665
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].str, yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2670
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2678
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2684
		{
			yyLOCAL = &tree.From{
				Tables: yyDollar[2].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2692
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2696
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2706
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2715
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2725
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2734
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2744
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2748
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2758
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2762
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2766
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2770
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2776
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2780
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2786
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2792
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2796
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2800
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2806
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2810
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2816
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2820
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2826
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2830
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2836
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2840
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[3].str),
					Cols:  yyDollar[4].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:2853
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2858
		{
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2859
		{
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:2863
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2875
		{
			yyVAL.str = ""
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2879
		{
			yyVAL.str = yyDollar[1].str
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2883
		{
			yyVAL.str = yyDollar[2].str
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2892
		{
			yyVAL.str = ""
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2896
		{
			yyVAL.str = yyDollar[1].str
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2900
		{
			yyVAL.str = yyDollar[2].str
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2904
		{
			yyVAL.str = yyDollar[1].str
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2908
		{
			yyVAL.str = yyDollar[2].str
		}
	case 468:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2938
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2948
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[8].tableNameUnion(),
				ColNames:    yyDollar[9].identifierListUnion(),
				AsSource:    yyDollar[11].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2959
		{
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2964
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Users:       yyDollar[4].usersUnion(),
				TlsOpts:     yyDollar[5].tlsOptionsUnion(),
				ResOpts:     yyDollar[6].resourceOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2974
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2978
		{
			yyLOCAL = yyDollar[2].resourceOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2984
		{
			yyLOCAL = []tree.ResourceOption{yyDollar[1].resourceOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2988
		{
			yyLOCAL = append(yyDollar[1].resourceOptionsUnion(), yyDollar[2].resourceOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2994
		{
			yyLOCAL = &tree.ResourceOptionMaxQueriesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2998
		{
			yyLOCAL = &tree.ResourceOptionMaxUpdatesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3002
		{
			yyLOCAL = &tree.ResourceOptionMaxConnectionPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3006
		{
			yyLOCAL = &tree.ResourceOptionMaxUserConnections{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3012
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3019
		{
			t := &tree.TlsOptionNone{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3024
		{
			t := &tree.TlsOptionSSL{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3029
		{
			t := &tree.TlsOptionX509{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3034
		{
			yyLOCAL = yyDollar[2].tlsOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3040
		{
			yyLOCAL = []tree.TlsOption{yyDollar[1].tlsOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3044
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[3].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3048
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[2].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3054
		{
			yyLOCAL = &tree.TlsOptionIssuer{Issuer: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3058
		{
			yyLOCAL = &tree.TlsOptionSubject{Subject: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3062
		{
			yyLOCAL = &tree.TlsOptionCipher{Cipher: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3066
		{
			yyLOCAL = &tree.TlsOptionSan{San: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3072
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3076
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3082
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthPlugin: yyDollar[2].authRecordUnion().AuthPlugin,
				AuthString: yyDollar[2].authRecordUnion().AuthString,
				HashString: yyDollar[2].authRecordUnion().HashString,
				ByAuth:     yyDollar[2].authRecordUnion().ByAuth,
			}
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3095
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3099
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3103
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3108
		{
			yyLOCAL = &tree.AuthRecord{}
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3112
		{
			yyLOCAL = &tree.AuthRecord{
				AuthString: yyDollar[3].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3119
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3125
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				AuthString: yyDollar[5].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3133
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				HashString: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3140
		{
			yyLOCAL = &tree.AuthRecord{
				HashString: yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3152
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3161
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3165
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3171
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: "%"}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3175
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3179
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3188
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3192
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3196
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3200
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3206
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].str),
				Table:       *yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3225
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3229
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3251
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3255
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3259
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3263
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3267
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3273
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3277
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3283
		{
			// Order is parsed but just ignored as MySQL did.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3288
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3293
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3297
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3301
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3305
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3309
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3315
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:   yyDollar[3].ifNotExistsUnion(),
				Name:          tree.Identifier(yyDollar[4].str),
				CreateOptions: yyDollar[5].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3329
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3333
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3338
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3342
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3348
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3352
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3358
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3362
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3366
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3371
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3375
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3381
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3393
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3397
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3402
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3406
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3416
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3420
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3429
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3433
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3439
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3443
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3449
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3458
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3468
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3472
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3478
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3482
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3488
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3495
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3504
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3508
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3513
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3517
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3522
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3526
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3536
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3540
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3551
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3559
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3567
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3575
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3586
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3596
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3606
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3610
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3615
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3619
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3624
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3628
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3634
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3638
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3642
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3648
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3652
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3656
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3660
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3664
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3668
		{
			yyLOCAL = tree.NewTableOptionComment(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3672
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3676
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3680
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3684
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3688
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3692
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3696
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3700
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3704
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3708
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3712
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3716
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3720
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3724
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3728
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3732
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3736
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3740
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3744
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3748
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3752
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].str, yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3756
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3760
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3767
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3771
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:3777
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3782
		{
			yyVAL.str = ""
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3786
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3790
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3796
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3800
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3804
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3808
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3812
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3816
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3830
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3834
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3843
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3848
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3854
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3861
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3865
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3871
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3875
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3881
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.Name = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3891
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3897
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3906
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3915
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invail the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3938
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3947
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3957
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3965
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3971
		{
			yyVAL.str = ""
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3975
		{
			yyVAL.str = yyDollar[1].str
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3985
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3991
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3997
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4011
		{
			yyVAL.str = ""
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:4018
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4024
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4028
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4032
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4043
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4047
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4051
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4056
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4060
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4066
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4070
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4076
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4080
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4084
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4088
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4092
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4096
		{
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4100
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4104
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4108
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4112
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4116
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4120
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4124
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4134
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4138
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4143
		{
			yyVAL.str = ""
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4147
		{
			yyVAL.str = yyDollar[1].str
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4153
		{
			yyVAL.str = ""
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4157
		{
			yyVAL.str = yyDollar[2].str
		}
	case 706:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:4163
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4174
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4184
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4191
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4198
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4205
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4214
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4220
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4226
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4230
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4234
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4238
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4242
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4247
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4254
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4258
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4262
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4267
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4271
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4276
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4280
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:4296
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4302
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4306
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4310
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4314
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4318
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4322
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4326
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4330
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4334
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4338
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4342
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4346
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4350
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4356
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4360
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4364
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4368
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4372
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4376
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4380
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4384
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4388
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4392
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4396
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4400
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4405
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4413
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4417
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4421
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4430
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4434
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4438
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4442
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4447
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4451
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4456
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4460
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4466
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4470
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:4476
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4486
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4499
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4512
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4524
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4538
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4553
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4568
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4585
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4600
		{
		}
	case 788:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4606
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4615
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4623
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4631
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4640
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4649
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4658
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[4].exprsUnion(),
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4667
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4676
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4685
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4694
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4703
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4712
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4721
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4730
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4746
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4754
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4762
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4770
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4778
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			timeUinit := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4787
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4795
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4804
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4813
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4821
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4829
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4838
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4858
		{
			yyVAL.str = yyDollar[1].str
		}
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4894
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4906
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4920
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4928
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4935
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4942
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4954
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4962
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4973
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4982
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4991
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4999
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5009
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5017
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5025
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5035
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5039
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5045
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5049
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5068
		{
		}
	case 878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5070
		{
		}
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5110
		{
			name := tree.SetUnresolvedName("interval")
			arg2 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5120
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5124
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5128
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:5134
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5139
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5143
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5149
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5153
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5160
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5164
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5168
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5176
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5180
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5184
		{
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5188
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5192
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5197
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5202
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5208
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5212
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5216
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5220
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5227
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5231
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5237
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5241
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5245
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5249
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5253
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5257
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5261
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5265
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5271
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5275
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5281
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5285
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5292
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5296
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5300
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5306
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5310
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5314
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5318
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5322
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5326
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5330
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5336
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5340
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5344
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5348
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5354
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5358
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5371
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5376
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5380
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5384
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5388
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_hexnum)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5402
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5406
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_bit)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5422
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5433
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5438
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5444
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5456
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5468
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5480
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5493
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5506
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5519
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5532
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5545
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5558
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5571
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5584
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5597
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5610
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5625
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5648
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 53 {
				yylex.Error("For float(M), M must between 0 and 53.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5685
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 18 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5733
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5750
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5762
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5777
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5797
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5817
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5833
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5846
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5859
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5872
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5885
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5897
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5909
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5921
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5933
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5945
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5957
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5969
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5981
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5993
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6006
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6021
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6044
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6049
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6055
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6062
		{
			yyLOCAL = 6
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6066
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6071
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6075
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6081
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6087
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6094
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6101
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6110
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 10, // this is the default precision for decimal
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6117
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6124
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6133
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6137
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6141
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6147
		{
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6149
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6159
		{
			yyVAL.str = ""
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6163
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
