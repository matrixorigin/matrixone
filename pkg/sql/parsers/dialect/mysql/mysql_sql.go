// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const INTEGRAL = 57437
const HEX = 57438
const FLOAT = 57439
const HEXNUM = 57440
const BIT_LITERAL = 57441
const NULL = 57442
const TRUE = 57443
const FALSE = 57444
const LOWER_THAN_CHARSET = 57445
const CHARSET = 57446
const UNIQUE = 57447
const KEY = 57448
const OR = 57449
const PIPE_CONCAT = 57450
const XOR = 57451
const AND = 57452
const NOT = 57453
const BETWEEN = 57454
const CASE = 57455
const WHEN = 57456
const THEN = 57457
const ELSE = 57458
const END = 57459
const ELSEIF = 57460
const LOWER_THAN_EQ = 57461
const LE = 57462
const GE = 57463
const NE = 57464
const NULL_SAFE_EQUAL = 57465
const IS = 57466
const LIKE = 57467
const REGEXP = 57468
const IN = 57469
const ASSIGNMENT = 57470
const ILIKE = 57471
const SHIFT_LEFT = 57472
const SHIFT_RIGHT = 57473
const DIV = 57474
const MOD = 57475
const UNARY = 57476
const COLLATE = 57477
const BINARY = 57478
const UNDERSCORE_BINARY = 57479
const INTERVAL = 57480
const OUT = 57481
const INOUT = 57482
const BEGIN = 57483
const START = 57484
const TRANSACTION = 57485
const COMMIT = 57486
const ROLLBACK = 57487
const WORK = 57488
const CONSISTENT = 57489
const SNAPSHOT = 57490
const CHAIN = 57491
const NO = 57492
const RELEASE = 57493
const PRIORITY = 57494
const QUICK = 57495
const BIT = 57496
const TINYINT = 57497
const SMALLINT = 57498
const MEDIUMINT = 57499
const INT = 57500
const INTEGER = 57501
const BIGINT = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const FLOAT_TYPE = 57506
const DECIMAL = 57507
const NUMERIC = 57508
const DECIMAL_VALUE = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const BOOL = 57516
const CHARACTER = 57517
const VARBINARY = 57518
const NCHAR = 57519
const TEXT = 57520
const TINYTEXT = 57521
const MEDIUMTEXT = 57522
const LONGTEXT = 57523
const BLOB = 57524
const TINYBLOB = 57525
const MEDIUMBLOB = 57526
const LONGBLOB = 57527
const JSON = 57528
const ENUM = 57529
const UUID = 57530
const VECF32 = 57531
const VECF64 = 57532
const GEOMETRY = 57533
const POINT = 57534
const LINESTRING = 57535
const POLYGON = 57536
const GEOMETRYCOLLECTION = 57537
const MULTIPOINT = 57538
const MULTILINESTRING = 57539
const MULTIPOLYGON = 57540
const INT1 = 57541
const INT2 = 57542
const INT3 = 57543
const INT4 = 57544
const INT8 = 57545
const S3OPTION = 57546
const STAGEOPTION = 57547
const SQL_SMALL_RESULT = 57548
const SQL_BIG_RESULT = 57549
const SQL_BUFFER_RESULT = 57550
const LOW_PRIORITY = 57551
const HIGH_PRIORITY = 57552
const DELAYED = 57553
const CREATE = 57554
const ALTER = 57555
const DROP = 57556
const RENAME = 57557
const ANALYZE = 57558
const ADD = 57559
const RETURNS = 57560
const SCHEMA = 57561
const TABLE = 57562
const SEQUENCE = 57563
const INDEX = 57564
const VIEW = 57565
const TO = 57566
const IGNORE = 57567
const IF = 57568
const PRIMARY = 57569
const COLUMN = 57570
const CONSTRAINT = 57571
const SPATIAL = 57572
const FULLTEXT = 57573
const FOREIGN = 57574
const KEY_BLOCK_SIZE = 57575
const SHOW = 57576
const DESCRIBE = 57577
const EXPLAIN = 57578
const DATE = 57579
const ESCAPE = 57580
const REPAIR = 57581
const OPTIMIZE = 57582
const TRUNCATE = 57583
const MAXVALUE = 57584
const PARTITION = 57585
const REORGANIZE = 57586
const LESS = 57587
const THAN = 57588
const PROCEDURE = 57589
const TRIGGER = 57590
const STATUS = 57591
const VARIABLES = 57592
const ROLE = 57593
const PROXY = 57594
const AVG_ROW_LENGTH = 57595
const STORAGE = 57596
const DISK = 57597
const MEMORY = 57598
const CHECKSUM = 57599
const COMPRESSION = 57600
const DATA = 57601
const DIRECTORY = 57602
const DELAY_KEY_WRITE = 57603
const ENCRYPTION = 57604
const ENGINE = 57605
const MAX_ROWS = 57606
const MIN_ROWS = 57607
const PACK_KEYS = 57608
const ROW_FORMAT = 57609
const STATS_AUTO_RECALC = 57610
const STATS_PERSISTENT = 57611
const STATS_SAMPLE_PAGES = 57612
const DYNAMIC = 57613
const COMPRESSED = 57614
const REDUNDANT = 57615
const COMPACT = 57616
const FIXED = 57617
const COLUMN_FORMAT = 57618
const AUTO_RANDOM = 57619
const ENGINE_ATTRIBUTE = 57620
const SECONDARY_ENGINE_ATTRIBUTE = 57621
const INSERT_METHOD = 57622
const RESTRICT = 57623
const CASCADE = 57624
const ACTION = 57625
const PARTIAL = 57626
const SIMPLE = 57627
const CHECK = 57628
const ENFORCED = 57629
const RANGE = 57630
const LIST = 57631
const ALGORITHM = 57632
const LINEAR = 57633
const PARTITIONS = 57634
const SUBPARTITION = 57635
const SUBPARTITIONS = 57636
const CLUSTER = 57637
const TYPE = 57638
const ANY = 57639
const SOME = 57640
const EXTERNAL = 57641
const LOCALFILE = 57642
const URL = 57643
const PREPARE = 57644
const DEALLOCATE = 57645
const RESET = 57646
const EXTENSION = 57647
const INCREMENT = 57648
const CYCLE = 57649
const MINVALUE = 57650
const PUBLICATION = 57651
const SUBSCRIPTIONS = 57652
const PUBLICATIONS = 57653
const PROPERTIES = 57654
const PARSER = 57655
const VISIBLE = 57656
const INVISIBLE = 57657
const BTREE = 57658
const HASH = 57659
const RTREE = 57660
const BSI = 57661
const IVFFLAT = 57662
const MASTER = 57663
const ZONEMAP = 57664
const LEADING = 57665
const BOTH = 57666
const TRAILING = 57667
const UNKNOWN = 57668
const LISTS = 57669
const OP_TYPE = 57670
const REINDEX = 57671
const EXPIRE = 57672
const ACCOUNT = 57673
const ACCOUNTS = 57674
const UNLOCK = 57675
const DAY = 57676
const NEVER = 57677
const PUMP = 57678
const MYSQL_COMPATIBILITY_MODE = 57679
const MODIFY = 57680
const CHANGE = 57681
const SECOND = 57682
const ASCII = 57683
const COALESCE = 57684
const COLLATION = 57685
const HOUR = 57686
const MICROSECOND = 57687
const MINUTE = 57688
const MONTH = 57689
const QUARTER = 57690
const REPEAT = 57691
const REVERSE = 57692
const ROW_COUNT = 57693
const WEEK = 57694
const REVOKE = 57695
const FUNCTION = 57696
const PRIVILEGES = 57697
const TABLESPACE = 57698
const EXECUTE = 57699
const SUPER = 57700
const GRANT = 57701
const OPTION = 57702
const REFERENCES = 57703
const REPLICATION = 57704
const SLAVE = 57705
const CLIENT = 57706
const USAGE = 57707
const RELOAD = 57708
const FILE = 57709
const TEMPORARY = 57710
const ROUTINE = 57711
const EVENT = 57712
const SHUTDOWN = 57713
const NULLX = 57714
const AUTO_INCREMENT = 57715
const APPROXNUM = 57716
const SIGNED = 57717
const UNSIGNED = 57718
const ZEROFILL = 57719
const ENGINES = 57720
const LOW_CARDINALITY = 57721
const AUTOEXTEND_SIZE = 57722
const ADMIN_NAME = 57723
const RANDOM = 57724
const SUSPEND = 57725
const ATTRIBUTE = 57726
const HISTORY = 57727
const REUSE = 57728
const CURRENT = 57729
const OPTIONAL = 57730
const FAILED_LOGIN_ATTEMPTS = 57731
const PASSWORD_LOCK_TIME = 57732
const UNBOUNDED = 57733
const SECONDARY = 57734
const RESTRICTED = 57735
const USER = 57736
const IDENTIFIED = 57737
const CIPHER = 57738
const ISSUER = 57739
const X509 = 57740
const SUBJECT = 57741
const SAN = 57742
const REQUIRE = 57743
const SSL = 57744
const NONE = 57745
const PASSWORD = 57746
const SHARED = 57747
const EXCLUSIVE = 57748
const MAX_QUERIES_PER_HOUR = 57749
const MAX_UPDATES_PER_HOUR = 57750
const MAX_CONNECTIONS_PER_HOUR = 57751
const MAX_USER_CONNECTIONS = 57752
const FORMAT = 57753
const VERBOSE = 57754
const CONNECTION = 57755
const TRIGGERS = 57756
const PROFILES = 57757
const LOAD = 57758
const INLINE = 57759
const INFILE = 57760
const TERMINATED = 57761
const OPTIONALLY = 57762
const ENCLOSED = 57763
const ESCAPED = 57764
const STARTING = 57765
const LINES = 57766
const ROWS = 57767
const IMPORT = 57768
const DISCARD = 57769
const JSONTYPE = 57770
const MODUMP = 57771
const OVER = 57772
const PRECEDING = 57773
const FOLLOWING = 57774
const GROUPS = 57775
const DATABASES = 57776
const TABLES = 57777
const SEQUENCES = 57778
const EXTENDED = 57779
const FULL = 57780
const PROCESSLIST = 57781
const FIELDS = 57782
const COLUMNS = 57783
const OPEN = 57784
const ERRORS = 57785
const WARNINGS = 57786
const INDEXES = 57787
const SCHEMAS = 57788
const NODE = 57789
const LOCKS = 57790
const ROLES = 57791
const TABLE_NUMBER = 57792
const COLUMN_NUMBER = 57793
const TABLE_VALUES = 57794
const TABLE_SIZE = 57795
const NAMES = 57796
const GLOBAL = 57797
const PERSIST = 57798
const SESSION = 57799
const ISOLATION = 57800
const LEVEL = 57801
const READ = 57802
const WRITE = 57803
const ONLY = 57804
const REPEATABLE = 57805
const COMMITTED = 57806
const UNCOMMITTED = 57807
const SERIALIZABLE = 57808
const LOCAL = 57809
const EVENTS = 57810
const PLUGINS = 57811
const CURRENT_TIMESTAMP = 57812
const DATABASE = 57813
const CURRENT_TIME = 57814
const LOCALTIME = 57815
const LOCALTIMESTAMP = 57816
const UTC_DATE = 57817
const UTC_TIME = 57818
const UTC_TIMESTAMP = 57819
const REPLACE = 57820
const CONVERT = 57821
const SEPARATOR = 57822
const TIMESTAMPDIFF = 57823
const CURRENT_DATE = 57824
const CURRENT_USER = 57825
const CURRENT_ROLE = 57826
const SECOND_MICROSECOND = 57827
const MINUTE_MICROSECOND = 57828
const MINUTE_SECOND = 57829
const HOUR_MICROSECOND = 57830
const HOUR_SECOND = 57831
const HOUR_MINUTE = 57832
const DAY_MICROSECOND = 57833
const DAY_SECOND = 57834
const DAY_MINUTE = 57835
const DAY_HOUR = 57836
const YEAR_MONTH = 57837
const SQL_TSI_HOUR = 57838
const SQL_TSI_DAY = 57839
const SQL_TSI_WEEK = 57840
const SQL_TSI_MONTH = 57841
const SQL_TSI_QUARTER = 57842
const SQL_TSI_YEAR = 57843
const SQL_TSI_SECOND = 57844
const SQL_TSI_MINUTE = 57845
const RECURSIVE = 57846
const CONFIG = 57847
const DRAINER = 57848
const SOURCE = 57849
const STREAM = 57850
const HEADERS = 57851
const CONNECTOR = 57852
const CONNECTORS = 57853
const DAEMON = 57854
const PAUSE = 57855
const CANCEL = 57856
const TASK = 57857
const RESUME = 57858
const MATCH = 57859
const AGAINST = 57860
const BOOLEAN = 57861
const LANGUAGE = 57862
const WITH = 57863
const QUERY = 57864
const EXPANSION = 57865
const WITHOUT = 57866
const VALIDATION = 57867
const ADDDATE = 57868
const BIT_AND = 57869
const BIT_OR = 57870
const BIT_XOR = 57871
const CAST = 57872
const COUNT = 57873
const APPROX_COUNT = 57874
const APPROX_COUNT_DISTINCT = 57875
const SERIAL_EXTRACT = 57876
const APPROX_PERCENTILE = 57877
const CURDATE = 57878
const CURTIME = 57879
const DATE_ADD = 57880
const DATE_SUB = 57881
const EXTRACT = 57882
const GROUP_CONCAT = 57883
const MAX = 57884
const MID = 57885
const MIN = 57886
const NOW = 57887
const POSITION = 57888
const SESSION_USER = 57889
const STD = 57890
const STDDEV = 57891
const MEDIAN = 57892
const CLUSTER_CENTERS = 57893
const KMEANS = 57894
const STDDEV_POP = 57895
const STDDEV_SAMP = 57896
const SUBDATE = 57897
const SUBSTR = 57898
const SUBSTRING = 57899
const SUM = 57900
const SYSDATE = 57901
const SYSTEM_USER = 57902
const TRANSLATE = 57903
const TRIM = 57904
const VARIANCE = 57905
const VAR_POP = 57906
const VAR_SAMP = 57907
const AVG = 57908
const RANK = 57909
const ROW_NUMBER = 57910
const DENSE_RANK = 57911
const BIT_CAST = 57912
const NEXTVAL = 57913
const SETVAL = 57914
const CURRVAL = 57915
const LASTVAL = 57916
const ARROW = 57917
const ROW = 57918
const OUTFILE = 57919
const HEADER = 57920
const MAX_FILE_SIZE = 57921
const FORCE_QUOTE = 57922
const PARALLEL = 57923
const UNUSED = 57924
const BINDINGS = 57925
const DO = 57926
const DECLARE = 57927
const LOOP = 57928
const WHILE = 57929
const LEAVE = 57930
const ITERATE = 57931
const UNTIL = 57932
const CALL = 57933
const PREV = 57934
const SLIDING = 57935
const FILL = 57936
const SPBEGIN = 57937
const BACKEND = 57938
const SERVERS = 57939
const HANDLER = 57940
const PERCENT = 57941
const SAMPLE = 57942
const KILL = 57943
const BACKUP = 57944
const FILESYSTEM = 57945
const PARALLELISM = 57946
const QUERY_RESULT = 57947

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:11199

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 117,
	11, 707,
	22, 707,
	-2, 700,
	-1, 137,
	237, 1090,
	239, 997,
	-2, 1044,
	-1, 161,
	43, 535,
	239, 535,
	266, 542,
	267, 542,
	462, 535,
	-2, 569,
	-1, 202,
	626, 1834,
	-2, 451,
	-1, 498,
	626, 1951,
	-2, 345,
	-1, 556,
	626, 2010,
	-2, 343,
	-1, 557,
	626, 2011,
	-2, 344,
	-1, 558,
	626, 2012,
	-2, 346,
	-1, 684,
	318, 133,
	434, 133,
	435, 133,
	-2, 1739,
	-1, 749,
	82, 1526,
	-2, 1889,
	-1, 750,
	82, 1544,
	-2, 1860,
	-1, 754,
	82, 1545,
	-2, 1888,
	-1, 782,
	82, 1456,
	-2, 2082,
	-1, 783,
	82, 1457,
	-2, 2081,
	-1, 784,
	82, 1458,
	-2, 2071,
	-1, 785,
	82, 2043,
	-2, 2064,
	-1, 786,
	82, 2044,
	-2, 2065,
	-1, 787,
	82, 2045,
	-2, 2073,
	-1, 788,
	82, 2046,
	-2, 2053,
	-1, 789,
	82, 2047,
	-2, 2062,
	-1, 790,
	82, 2048,
	-2, 2074,
	-1, 791,
	82, 2049,
	-2, 2075,
	-1, 792,
	82, 2050,
	-2, 2080,
	-1, 793,
	82, 2051,
	-2, 2085,
	-1, 794,
	82, 2052,
	-2, 2086,
	-1, 795,
	82, 1522,
	-2, 1925,
	-1, 796,
	82, 1523,
	-2, 1723,
	-1, 797,
	82, 1524,
	-2, 1934,
	-1, 798,
	82, 1525,
	-2, 1732,
	-1, 800,
	82, 1528,
	-2, 1740,
	-1, 801,
	82, 1529,
	-2, 1958,
	-1, 803,
	82, 1532,
	-2, 1759,
	-1, 805,
	82, 1534,
	-2, 1970,
	-1, 806,
	82, 1535,
	-2, 1969,
	-1, 807,
	82, 1536,
	-2, 1803,
	-1, 808,
	82, 1537,
	-2, 1884,
	-1, 811,
	82, 1540,
	-2, 1981,
	-1, 813,
	82, 1542,
	-2, 1984,
	-1, 814,
	82, 1543,
	-2, 1986,
	-1, 815,
	82, 1546,
	-2, 1994,
	-1, 816,
	82, 1547,
	-2, 1869,
	-1, 817,
	82, 1548,
	-2, 1914,
	-1, 818,
	82, 1549,
	-2, 1879,
	-1, 819,
	82, 1550,
	-2, 1904,
	-1, 830,
	82, 1434,
	-2, 2076,
	-1, 831,
	82, 1435,
	-2, 2077,
	-1, 832,
	82, 1436,
	-2, 2078,
	-1, 917,
	457, 569,
	458, 569,
	-2, 536,
	-1, 963,
	123, 1723,
	134, 1723,
	154, 1723,
	-2, 1697,
	-1, 1072,
	22, 734,
	-2, 683,
	-1, 1176,
	11, 707,
	22, 707,
	-2, 1318,
	-1, 1252,
	22, 734,
	-2, 683,
	-1, 1567,
	82, 1597,
	-2, 1886,
	-1, 1568,
	82, 1598,
	-2, 1887,
	-1, 1711,
	83, 883,
	-2, 889,
	-1, 2124,
	106, 1036,
	150, 1036,
	189, 1036,
	192, 1036,
	279, 1036,
	-2, 1029,
	-1, 2271,
	11, 707,
	22, 707,
	-2, 827,
	-1, 2303,
	83, 1683,
	155, 1683,
	-2, 1871,
	-1, 2304,
	83, 1683,
	155, 1683,
	-2, 1870,
	-1, 2305,
	83, 1659,
	155, 1659,
	-2, 1857,
	-1, 2306,
	83, 1660,
	155, 1660,
	-2, 1862,
	-1, 2307,
	83, 1661,
	155, 1661,
	-2, 1791,
	-1, 2308,
	83, 1662,
	155, 1662,
	-2, 1785,
	-1, 2309,
	83, 1663,
	155, 1663,
	-2, 1713,
	-1, 2310,
	83, 1664,
	155, 1664,
	-2, 1859,
	-1, 2311,
	83, 1665,
	155, 1665,
	-2, 1789,
	-1, 2312,
	83, 1666,
	155, 1666,
	-2, 1784,
	-1, 2313,
	83, 1667,
	155, 1667,
	-2, 1773,
	-1, 2314,
	83, 1683,
	155, 1683,
	-2, 1774,
	-1, 2315,
	83, 1683,
	155, 1683,
	-2, 1775,
	-1, 2317,
	83, 1672,
	155, 1672,
	-2, 1904,
	-1, 2318,
	83, 1650,
	155, 1650,
	-2, 1889,
	-1, 2319,
	83, 1681,
	155, 1681,
	-2, 1860,
	-1, 2320,
	83, 1681,
	155, 1681,
	-2, 1888,
	-1, 2321,
	83, 1681,
	155, 1681,
	-2, 1741,
	-1, 2322,
	83, 1679,
	155, 1679,
	-2, 1879,
	-1, 2323,
	83, 1676,
	155, 1676,
	-2, 1764,
	-1, 2324,
	82, 1631,
	83, 1631,
	155, 1631,
	392, 1631,
	393, 1631,
	394, 1631,
	-2, 1712,
	-1, 2325,
	82, 1632,
	83, 1632,
	155, 1632,
	392, 1632,
	393, 1632,
	394, 1632,
	-2, 1714,
	-1, 2326,
	82, 1633,
	83, 1633,
	155, 1633,
	392, 1633,
	393, 1633,
	394, 1633,
	-2, 1930,
	-1, 2327,
	82, 1635,
	83, 1635,
	155, 1635,
	392, 1635,
	393, 1635,
	394, 1635,
	-2, 1861,
	-1, 2328,
	82, 1637,
	83, 1637,
	155, 1637,
	392, 1637,
	393, 1637,
	394, 1637,
	-2, 1843,
	-1, 2329,
	82, 1639,
	83, 1639,
	155, 1639,
	392, 1639,
	393, 1639,
	394, 1639,
	-2, 1790,
	-1, 2330,
	82, 1641,
	83, 1641,
	155, 1641,
	392, 1641,
	393, 1641,
	394, 1641,
	-2, 1769,
	-1, 2331,
	82, 1642,
	83, 1642,
	155, 1642,
	392, 1642,
	393, 1642,
	394, 1642,
	-2, 1770,
	-1, 2332,
	82, 1644,
	83, 1644,
	155, 1644,
	392, 1644,
	393, 1644,
	394, 1644,
	-2, 1711,
	-1, 2333,
	83, 1686,
	155, 1686,
	392, 1686,
	393, 1686,
	394, 1686,
	-2, 1746,
	-1, 2334,
	83, 1686,
	155, 1686,
	392, 1686,
	393, 1686,
	394, 1686,
	-2, 1760,
	-1, 2335,
	83, 1689,
	155, 1689,
	392, 1689,
	393, 1689,
	394, 1689,
	-2, 1742,
	-1, 2336,
	83, 1689,
	155, 1689,
	392, 1689,
	393, 1689,
	394, 1689,
	-2, 1806,
	-1, 2337,
	83, 1686,
	155, 1686,
	392, 1686,
	393, 1686,
	394, 1686,
	-2, 1827,
	-1, 2526,
	106, 1036,
	150, 1036,
	189, 1036,
	192, 1036,
	279, 1036,
	-2, 1030,
	-1, 2540,
	80, 628,
	155, 628,
	-2, 1203,
	-1, 2923,
	192, 1036,
	303, 1286,
	-2, 1258,
	-1, 3079,
	106, 1036,
	150, 1036,
	189, 1036,
	192, 1036,
	-2, 1146,
	-1, 3081,
	106, 1036,
	150, 1036,
	189, 1036,
	192, 1036,
	-2, 1146,
	-1, 3093,
	80, 628,
	155, 628,
	-2, 1204,
	-1, 3114,
	192, 1036,
	303, 1286,
	-2, 1259,
	-1, 3249,
	106, 1036,
	150, 1036,
	189, 1036,
	192, 1036,
	-2, 1147,
	-1, 3275,
	83, 1108,
	155, 1108,
	-2, 1036,
	-1, 3407,
	83, 1108,
	155, 1108,
	-2, 1036,
	-1, 3556,
	83, 1112,
	155, 1112,
	-2, 1036,
	-1, 3604,
	83, 1113,
	155, 1113,
	-2, 1036,
}

const yyPrivate = 57344

const yyLast = 45446

var yyAct = [...]int{
	716, 694, 3621, 2569, 718, 3584, 191, 3637, 1796, 3560,
	1547, 3099, 3462, 3566, 2942, 3567, 3559, 3407, 2909, 3447,
	3488, 702, 3303, 3192, 3128, 3385, 3009, 3438, 2563, 1210,
	3406, 696, 3237, 3466, 1332, 3236, 3234, 3342, 2387, 3010,
	590, 3331, 746, 2566, 3377, 962, 3196, 3448, 1470, 3450,
	606, 1073, 611, 611, 3187, 1744, 3066, 3241, 611, 628,
	637, 2918, 3256, 637, 2543, 1550, 1394, 3082, 3248, 2169,
	3115, 2301, 3218, 3007, 2883, 2677, 2676, 176, 2846, 1883,
	2872, 3251, 1886, 3055, 692, 2659, 2920, 2938, 2593, 3084,
	2927, 1859, 2675, 2422, 1851, 2669, 2265, 1604, 1990, 2995,
	55, 648, 2738, 2299, 642, 2572, 2172, 1954, 2698, 2975,
	2515, 36, 2672, 2856, 686, 2851, 2853, 3198, 1387, 2849,
	2844, 2890, 2848, 1901, 2135, 1066, 2249, 2847, 2527, 2102,
	2093, 2781, 2370, 2926, 691, 2711, 1974, 2092, 1963, 1955,
	893, 1691, 2353, 610, 610, 1962, 1466, 2266, 1928, 618,
	1879, 1471, 1986, 2721, 1985, 1854, 2254, 1852, 2504, 1474,
	1305, 2499, 1775, 956, 2595, 590, 1786, 2574, 2170, 6,
	634, 2535, 1480, 187, 8, 186, 7, 1720, 2134, 1541,
	2297, 1283, 1018, 605, 1496, 1479, 1373, 1987, 1433, 2115,
	2020, 191, 1403, 191, 695, 1009, 1010, 1756, 2455, 1755,
	685, 1997, 611, 589, 116, 35, 1459, 925, 703, 1581,
	1532, 1597, 1341, 1961, 26, 1086, 1958, 1546, 15, 2165,
	1944, 1321, 1440, 1918, 955, 13, 1540, 1372, 620, 14,
	2273, 32, 1719, 834, 1317, 1543, 623, 22, 2454, 892,
	1307, 1605, 1426, 650, 23, 651, 16, 1370, 1432, 2202,
	1746, 10, 177, 1333, 693, 636, 869, 173, 167, 912,
	890, 1250, 1994, 875, 1211, 647, 1006, 3069, 1005, 971,
	1007, 3371, 2004, 633, 2488, 2488, 2488, 629, 3002, 2410,
	2359, 2357, 1704, 2356, 631, 2354, 1447, 687, 632, 1443,
	630, 1001, 1002, 618, 175, 174, 51, 163, 138, 1002,
	607, 2091, 1002, 1269, 836, 837, 2829, 2826, 2831, 174,
	51, 163, 138, 164, 616, 2828, 3629, 1355, 640, 1698,
	156, 2480, 2478, 1265, 165, 1445, 3185, 164, 1342, 1145,
	1146, 1147, 1144, 2734, 156, 2732, 1933, 3338, 165, 3332,
	3188, 3008, 1971, 115, 3452, 1000, 1957, 835, 2808, 8,
	2210, 7, 1205, 1145, 1146, 1147, 1144, 115, 103, 3541,
	3392, 2482, 174, 1270, 168, 3223, 174, 51, 163, 138,
	846, 1108, 103, 968, 970, 3219, 2396, 687, 168, 2404,
	174, 174, 174, 51, 163, 138, 1991, 174, 51, 163,
	138, 174, 3083, 2126, 174, 3361, 3499, 974, 174, 51,
	163, 138, 1413, 1412, 3393, 174, 1411, 174, 51, 163,
	138, 972, 1494, 973, 1279, 646, 2806, 174, 1297, 2119,
	2002, 2291, 944, 1487, 1271, 3363, 1142, 2292, 115, 2753,
	1084, 168, 2704, 1116, 1351, 168, 1118, 1352, 1896, 2746,
	120, 121, 1491, 122, 123, 1863, 1505, 2705, 2706, 168,
	168, 168, 1329, 1484, 120, 121, 168, 122, 123, 1374,
	168, 1376, 1081, 1493, 1119, 115, 2913, 168, 1864, 1865,
	1705, 1706, 966, 967, 1486, 2371, 168, 1339, 1340, 847,
	2830, 2827, 1517, 3570, 3571, 825, 168, 824, 826, 827,
	2279, 828, 829, 2278, 2501, 1337, 2280, 2911, 1135, 1336,
	1339, 1340, 934, 1770, 2502, 1549, 3209, 1140, 965, 964,
	3455, 137, 162, 172, 3454, 101, 1533, 3538, 3453, 1537,
	3455, 3532, 2080, 1354, 3592, 137, 162, 172, 3534, 101,
	3340, 3454, 3531, 161, 155, 154, 3453, 3530, 3588, 3589,
	57, 2739, 3011, 1536, 1112, 1278, 3440, 161, 155, 154,
	3440, 3443, 3335, 2500, 57, 1089, 2391, 1078, 1123, 3011,
	2006, 1124, 1446, 1444, 1553, 940, 938, 2483, 939, 1114,
	3343, 3344, 3345, 3346, 2740, 3459, 2741, 1880, 3024, 3056,
	1874, 1117, 1120, 3228, 3063, 2614, 2243, 1870, 1528, 1126,
	2857, 1998, 2113, 1941, 1453, 1452, 881, 2491, 3543, 3544,
	1089, 157, 158, 159, 1138, 1139, 2867, 1113, 3140, 3365,
	611, 3539, 3540, 3536, 2769, 157, 158, 159, 2507, 1137,
	611, 1077, 2865, 137, 2771, 172, 3355, 1538, 3356, 2401,
	160, 3186, 166, 681, 2208, 2733, 683, 3569, 1111, 637,
	637, 682, 611, 3208, 3350, 161, 166, 2663, 1327, 2861,
	1535, 3210, 111, 2246, 945, 2245, 160, 3368, 112, 3225,
	1012, 1639, 2250, 3155, 2941, 3599, 111, 2915, 2881, 1121,
	160, 2891, 112, 2003, 2939, 2940, 941, 2862, 2863, 2481,
	1552, 1551, 3358, 3481, 1115, 1353, 3476, 2536, 3152, 1894,
	1895, 639, 638, 2864, 1364, 2668, 3145, 2121, 1280, 3467,
	3483, 1068, 1268, 1128, 2568, 3100, 1129, 3489, 2910, 1133,
	1134, 1075, 3355, 3357, 3356, 113, 2188, 3397, 3389, 3107,
	1316, 3156, 2168, 2191, 3458, 3294, 1076, 971, 50, 113,
	3653, 2220, 1122, 1099, 1131, 2219, 634, 634, 1070, 943,
	2944, 3370, 50, 3283, 3027, 2775, 2487, 1103, 1077, 3199,
	1091, 1090, 1094, 3289, 1992, 1559, 1562, 1563, 2513, 1992,
	1383, 2859, 1382, 2009, 2011, 2012, 1560, 1534, 3358, 1992,
	3304, 3305, 3306, 3310, 3308, 3309, 3307, 52, 1101, 1214,
	2190, 1002, 1083, 1002, 1002, 2294, 635, 1002, 2240, 2241,
	1314, 52, 1002, 1313, 1002, 1091, 1090, 1312, 971, 3357,
	3490, 3391, 635, 1993, 3085, 3542, 3378, 635, 2005, 1125,
	3411, 2168, 169, 170, 1127, 171, 942, 883, 635, 884,
	139, 2355, 3558, 2189, 1331, 1330, 169, 170, 990, 171,
	2919, 968, 970, 3640, 139, 2564, 2565, 1067, 2568, 633,
	633, 1339, 1340, 629, 629, 1448, 2825, 2211, 52, 3364,
	631, 631, 1132, 1215, 632, 632, 630, 630, 1276, 606,
	2021, 1080, 1082, 835, 52, 1092, 3183, 2185, 2479, 52,
	1178, 1328, 1339, 1340, 3398, 3390, 3014, 1130, 1284, 1072,
	52, 646, 3224, 114, 39, 1248, 645, 139, 1253, 1100,
	49, 139, 893, 2916, 1096, 1097, 2405, 114, 39, 2858,
	118, 119, 968, 970, 49, 139, 139, 139, 5, 3437,
	1881, 1102, 139, 1184, 118, 119, 139, 2868, 1371, 139,
	3366, 1071, 967, 139, 169, 170, 2506, 171, 2716, 2717,
	139, 2943, 139, 3351, 2175, 2772, 3535, 3352, 1108, 3410,
	2935, 611, 139, 1366, 2397, 2283, 1335, 3229, 688, 590,
	590, 2175, 2178, 1180, 1181, 1182, 1183, 2206, 590, 590,
	2860, 1995, 1398, 1398, 2615, 611, 2616, 2617, 1873, 3641,
	985, 980, 975, 979, 983, 1871, 1529, 2430, 2939, 2940,
	1289, 935, 2510, 2511, 3290, 3291, 2178, 637, 1427, 606,
	3285, 2774, 1436, 1436, 3284, 1295, 1561, 2509, 988, 3557,
	1294, 1281, 978, 191, 2010, 1061, 1057, 1058, 1059, 1060,
	1293, 2435, 590, 2434, 2433, 2431, 1292, 641, 1405, 3351,
	1223, 1224, 3049, 3449, 1107, 2879, 3296, 2700, 2702, 1400,
	1338, 2936, 1362, 2519, 2522, 2523, 2524, 2520, 2521, 887,
	888, 889, 1277, 935, 1285, 1286, 1287, 1288, 2612, 1290,
	2007, 2008, 1302, 986, 1708, 1296, 1404, 2490, 1510, 1511,
	989, 2783, 2782, 1478, 937, 1481, 1454, 936, 882, 2096,
	1489, 2174, 1274, 2184, 2098, 2097, 2176, 2182, 1392, 1393,
	2432, 1709, 976, 2179, 993, 998, 999, 2205, 2174, 2168,
	2173, 2095, 2171, 2176, 1515, 1254, 1272, 1273, 1252, 1707,
	3638, 3639, 885, 3015, 2163, 987, 849, 2232, 1398, 850,
	1398, 1077, 1378, 1380, 853, 3257, 2054, 2179, 3643, 2053,
	3528, 1390, 1391, 1495, 1282, 1143, 937, 1323, 1324, 936,
	2177, 1747, 2175, 2178, 2972, 1108, 1310, 1003, 1004, 3649,
	1365, 1315, 1008, 2634, 2635, 977, 2643, 2177, 1325, 3635,
	1514, 3623, 1304, 2373, 2880, 3606, 1344, 1345, 1513, 1347,
	1348, 1349, 1356, 1357, 3578, 852, 2105, 971, 2117, 855,
	854, 971, 1428, 2541, 1343, 1449, 2968, 1346, 1485, 1747,
	1074, 3052, 1492, 3026, 2263, 1074, 1468, 1469, 2896, 2106,
	2107, 1143, 1603, 2701, 1921, 634, 1381, 1396, 1396, 2085,
	3572, 839, 840, 841, 842, 2396, 1652, 1524, 3554, 3509,
	1473, 2000, 2948, 1477, 2946, 2835, 1548, 3484, 2436, 2437,
	1476, 3607, 984, 3624, 3472, 1406, 1457, 3607, 1460, 1461,
	616, 2937, 1318, 1322, 1322, 1322, 3579, 1419, 2833, 1462,
	1463, 1437, 1425, 1569, 1570, 1571, 1572, 1573, 1574, 1575,
	1576, 1577, 1578, 1579, 1580, 1438, 1318, 1318, 981, 1592,
	1593, 982, 1545, 2542, 2179, 2633, 946, 1077, 2264, 2174,
	2168, 2173, 3374, 2171, 2176, 995, 996, 997, 1409, 1427,
	3555, 3374, 2116, 1689, 1717, 1564, 1398, 1722, 1723, 2000,
	1725, 1726, 611, 1526, 3430, 1637, 3473, 611, 633, 2264,
	1398, 1530, 629, 1531, 893, 1661, 3429, 1745, 2264, 631,
	1523, 2542, 1398, 632, 1520, 630, 2972, 2719, 1366, 1503,
	1504, 1519, 1506, 628, 1143, 1542, 3424, 1498, 2177, 1249,
	2493, 2484, 1919, 2386, 1692, 839, 840, 841, 842, 2378,
	1522, 3423, 1521, 1769, 1651, 2294, 3422, 1518, 844, 1991,
	1539, 1862, 1776, 1776, 1544, 1366, 2161, 1366, 1366, 2090,
	2084, 611, 611, 3421, 1717, 1717, 3431, 2083, 1398, 1848,
	1849, 1861, 1700, 1642, 1643, 1644, 1716, 1106, 2139, 1583,
	2033, 1634, 1635, 1727, 1638, 590, 1658, 1398, 1732, 1659,
	1724, 2058, 1653, 2644, 2646, 2647, 2648, 2645, 3374, 1145,
	1146, 1147, 1144, 1669, 1670, 1660, 3401, 1662, 3400, 1145,
	1146, 1147, 1144, 3374, 3373, 611, 1717, 1398, 3374, 1906,
	1688, 611, 611, 611, 1911, 1912, 3161, 1590, 1591, 1982,
	3109, 1916, 1917, 3075, 1892, 3374, 1923, 1695, 1303, 1625,
	1897, 1108, 1595, 191, 1798, 2804, 191, 191, 1384, 191,
	3042, 1105, 1782, 1783, 3062, 2032, 1843, 1844, 3657, 3038,
	3625, 1713, 1714, 1715, 1773, 3096, 2956, 1663, 2695, 2461,
	2453, 2897, 1889, 1890, 1728, 1729, 1730, 1731, 2000, 2151,
	2000, 2412, 844, 1690, 2723, 1875, 3374, 1652, 1652, 1965,
	2394, 2544, 2399, 2398, 1652, 1652, 2390, 1867, 2294, 1869,
	2156, 1976, 3110, 1721, 3320, 3076, 1902, 1696, 1903, 1887,
	1888, 2049, 1902, 1902, 1902, 1777, 2382, 1737, 2380, 1905,
	1932, 1712, 3043, 1935, 1936, 2375, 1938, 1106, 1745, 1750,
	1970, 3039, 1398, 1989, 1757, 1778, 1759, 1760, 2957, 1882,
	2264, 1143, 1143, 1742, 1908, 1909, 1910, 1752, 1762, 1741,
	1766, 1758, 1779, 1143, 1753, 1754, 1780, 1781, 2368, 2366,
	1767, 2364, 2139, 1748, 1749, 1145, 1146, 1147, 1144, 2034,
	2362, 1763, 1764, 2138, 1981, 2086, 1761, 1145, 1146, 1147,
	1144, 2065, 1926, 1983, 2064, 1721, 2052, 971, 2376, 3159,
	2381, 1774, 1768, 2043, 971, 1771, 1772, 2376, 2042, 1966,
	1847, 1850, 1621, 2041, 1999, 1866, 1507, 1868, 1618, 1876,
	2275, 2150, 1620, 1617, 1619, 1623, 1624, 1914, 1500, 634,
	1622, 1191, 3477, 2030, 1093, 1960, 1069, 1064, 1062, 1891,
	2369, 2367, 1960, 2363, 1542, 1160, 1641, 1640, 1148, 1641,
	1640, 1318, 2363, 1904, 2901, 2139, 1177, 2085, 2766, 3258,
	3088, 3086, 2892, 1143, 1186, 1322, 1143, 1388, 1143, 1319,
	1308, 1927, 1929, 3644, 1309, 1143, 3478, 1322, 1389, 851,
	1143, 3626, 2203, 2018, 2019, 1143, 2000, 1350, 1508, 1194,
	3372, 3347, 1069, 1972, 3287, 971, 1946, 3286, 3272, 3230,
	3068, 968, 970, 3259, 3089, 3087, 2973, 2966, 968, 970,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1160, 1969, 2961,
	1967, 686, 2958, 1386, 611, 611, 611, 2874, 1589, 2665,
	2517, 2489, 633, 2409, 1980, 2379, 629, 2354, 2893, 611,
	611, 611, 611, 631, 1586, 1588, 1585, 632, 1587, 630,
	2285, 1984, 2136, 1978, 1979, 1299, 1675, 719, 729, 1668,
	1298, 1079, 2143, 1366, 3000, 2419, 720, 2014, 721, 725,
	728, 724, 722, 723, 1628, 1629, 1630, 1631, 1632, 1633,
	1626, 1627, 2894, 2348, 2013, 1320, 1308, 1930, 1598, 1366,
	1309, 2725, 2022, 1163, 1164, 1165, 1166, 1167, 1160, 968,
	970, 1147, 1144, 856, 1583, 2015, 2197, 1151, 1152, 1153,
	1154, 1155, 1156, 1157, 1149, 2109, 2110, 2111, 2026, 1718,
	3529, 726, 1385, 1145, 1146, 1147, 1144, 1598, 1144, 2027,
	2127, 2128, 2129, 2130, 3003, 1360, 1361, 1441, 1363, 1930,
	1367, 1368, 1369, 1145, 1146, 1147, 1144, 2059, 2060, 3299,
	2062, 2016, 2017, 727, 2204, 3298, 2742, 2069, 2604, 3652,
	1145, 1146, 1147, 1144, 2602, 2580, 2578, 2268, 2268, 1861,
	2268, 2358, 1414, 1415, 1416, 1417, 1418, 3278, 1420, 1421,
	1422, 1423, 1424, 3231, 3232, 1193, 1430, 1431, 590, 590,
	2472, 2087, 2473, 2079, 2081, 2082, 1077, 1192, 1664, 1665,
	1666, 1667, 1398, 611, 1671, 1672, 1673, 1674, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 3631, 3630, 611, 2167,
	3651, 2099, 2166, 2785, 1077, 2338, 606, 1214, 3226, 3553,
	1436, 3060, 1861, 2118, 1656, 2343, 3552, 2345, 3518, 3479,
	2655, 191, 3426, 1145, 1146, 1147, 1144, 2653, 1657, 3414,
	1435, 1435, 3001, 3404, 2160, 3394, 2651, 2281, 2516, 2282,
	2640, 3333, 2144, 2272, 2270, 3261, 2274, 3260, 3067, 971,
	1145, 1146, 1147, 1144, 3101, 3090, 3059, 2286, 2287, 2421,
	1145, 1146, 1147, 1144, 3227, 2147, 2157, 3061, 2866, 2350,
	2153, 2762, 2392, 2154, 1404, 1989, 2654, 1145, 1146, 1147,
	1144, 1215, 1398, 2652, 1398, 2155, 1398, 2737, 2736, 1902,
	2638, 1077, 2650, 2637, 2145, 2146, 2639, 2152, 2349, 2411,
	2180, 2181, 2636, 2186, 2148, 2149, 2342, 2628, 2622, 2302,
	1158, 1168, 1169, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
	1160, 2296, 2621, 2620, 1398, 2439, 2619, 2247, 2045, 2485,
	2089, 1378, 1380, 1145, 1146, 1147, 1144, 1949, 1948, 2276,
	2446, 1947, 1442, 2209, 1943, 1398, 2212, 2213, 2214, 2215,
	2216, 2217, 2218, 968, 970, 2221, 2222, 2223, 2224, 2225,
	2226, 2227, 2228, 2229, 2230, 2231, 2797, 2233, 2234, 2235,
	2236, 2237, 2293, 2238, 1942, 2290, 1900, 3563, 1899, 1898,
	1501, 1267, 1554, 1555, 1556, 1557, 1558, 2670, 2852, 2339,
	2438, 2423, 1322, 2423, 2044, 1077, 2406, 3648, 2341, 1077,
	3647, 2450, 2451, 1145, 1146, 1147, 1144, 1398, 3598, 3597,
	2514, 2447, 3594, 3193, 3590, 2427, 1717, 2289, 2445, 3461,
	1145, 1146, 1147, 1144, 2540, 2796, 1599, 1600, 1601, 1602,
	2546, 2448, 2037, 2408, 3235, 1636, 1145, 1146, 1147, 1144,
	2403, 3446, 3435, 1646, 1441, 2384, 3418, 2556, 2417, 3413,
	3412, 1145, 1146, 1147, 1144, 3369, 1077, 3367, 2476, 2340,
	3334, 2400, 2395, 3280, 2577, 2388, 2389, 2393, 2347, 3244,
	3213, 1077, 1077, 1077, 1776, 3212, 3191, 1077, 3189, 2588,
	2589, 2590, 2591, 1077, 2598, 681, 2599, 2600, 683, 2601,
	1693, 2603, 3168, 682, 2537, 3165, 2528, 2413, 2414, 1542,
	2494, 3163, 2598, 3465, 2302, 2429, 2660, 3058, 2529, 3057,
	1145, 1146, 1147, 1144, 2268, 2538, 3496, 3054, 3035, 2402,
	3033, 2558, 3214, 2967, 1145, 1146, 1147, 1144, 2656, 1145,
	1146, 1147, 1144, 1798, 2547, 2963, 590, 1145, 1146, 1147,
	1144, 1717, 1077, 1861, 1861, 1861, 1861, 2954, 1145, 1146,
	1147, 1144, 2953, 2875, 1077, 1861, 2570, 2839, 2268, 1396,
	2496, 2838, 2498, 3202, 2837, 2094, 2416, 2776, 2575, 2773,
	2735, 2709, 2575, 1765, 1398, 2649, 2641, 2583, 2584, 2495,
	1396, 2631, 2587, 2571, 2512, 611, 611, 2629, 2594, 1145,
	1146, 1147, 1144, 2456, 2457, 2625, 1907, 2545, 2582, 2462,
	2624, 8, 2539, 7, 1159, 1158, 1168, 1169, 1161, 1162,
	1163, 1164, 1165, 1166, 1167, 1160, 2623, 2486, 2560, 2385,
	2557, 1951, 3201, 2056, 1721, 1945, 1693, 3492, 2573, 1703,
	2691, 1693, 1693, 2579, 781, 780, 2586, 1702, 1502, 1222,
	1218, 191, 1217, 1065, 2576, 2031, 191, 2678, 1145, 1146,
	1147, 1144, 848, 2503, 3360, 3359, 3348, 3215, 2555, 2678,
	174, 2630, 163, 138, 2720, 3200, 2618, 1652, 3081, 1652,
	3080, 3079, 2752, 3051, 3047, 2548, 2713, 2714, 3045, 3044,
	1931, 2761, 3041, 1934, 2553, 2554, 1937, 1398, 2549, 1939,
	2768, 3040, 3034, 2552, 2661, 3032, 2666, 3016, 3006, 2664,
	2679, 2680, 2681, 2682, 3149, 2694, 3005, 2991, 3030, 2690,
	2692, 2990, 2902, 2800, 2842, 2832, 2693, 2802, 2726, 1145,
	1146, 1147, 1144, 2730, 2795, 2787, 2710, 2799, 2707, 168,
	1145, 1146, 1147, 1144, 1145, 1146, 1147, 1144, 1975, 1145,
	1146, 1147, 1144, 2029, 2610, 2611, 2786, 1692, 2780, 2718,
	2492, 2703, 2751, 1145, 1146, 1147, 1144, 1468, 1469, 2626,
	2627, 2365, 2361, 2360, 2070, 2063, 971, 2057, 2055, 2798,
	2051, 2050, 2790, 971, 2792, 2749, 1473, 2747, 2048, 1477,
	2039, 2755, 2036, 2662, 2754, 2728, 1476, 2035, 1077, 2765,
	2727, 2724, 2770, 1950, 2855, 1145, 1146, 1147, 1144, 2470,
	1686, 1461, 1685, 2743, 2870, 2748, 2745, 1684, 2757, 611,
	2756, 1462, 1463, 2758, 2750, 2469, 1655, 1145, 1146, 1147,
	1144, 2884, 1077, 1077, 1077, 1145, 1146, 1147, 1144, 1654,
	1645, 1410, 1861, 2136, 2024, 2900, 1408, 2028, 2777, 2764,
	2778, 1145, 1146, 1147, 1144, 174, 3517, 2784, 1212, 3491,
	3432, 3420, 3415, 2197, 2468, 1456, 2841, 3314, 2793, 2794,
	2982, 2467, 3297, 3293, 2878, 2925, 3271, 2928, 3255, 2928,
	2928, 2791, 2834, 3176, 1077, 3174, 3147, 3146, 2040, 3143,
	1145, 1146, 1147, 1144, 3142, 3108, 2047, 1145, 1146, 1147,
	1144, 3105, 3103, 2949, 3070, 1467, 2945, 1458, 2528, 1472,
	2876, 1398, 1398, 1475, 1464, 2061, 1306, 2657, 2581, 2836,
	2066, 2067, 2068, 2840, 168, 2071, 2072, 2073, 2074, 2075,
	2076, 2077, 2078, 2947, 2533, 971, 2898, 2788, 2789, 2532,
	2531, 2871, 2530, 2497, 2923, 2471, 2889, 2374, 2284, 2239,
	2137, 2108, 2886, 2887, 2888, 2877, 2088, 1584, 611, 2466,
	971, 168, 1913, 2855, 2895, 2924, 1711, 2899, 1699, 2933,
	1527, 2908, 1488, 1465, 1717, 1717, 1266, 2950, 2951, 2907,
	3508, 2167, 2912, 2914, 2166, 1145, 1146, 1147, 1144, 2465,
	1251, 2809, 2810, 1247, 3506, 1246, 2140, 2811, 2812, 2813,
	2814, 1245, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822,
	3405, 2934, 2929, 2930, 1244, 1145, 1146, 1147, 1144, 1243,
	1077, 1242, 1241, 1240, 2439, 1239, 731, 117, 1238, 1237,
	1236, 1235, 117, 3004, 1159, 1158, 1168, 1169, 1161, 1162,
	1163, 1164, 1165, 1166, 1167, 1160, 1234, 1233, 1232, 1902,
	1168, 1169, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1160,
	1231, 1230, 2931, 1159, 1158, 1168, 1169, 1161, 1162, 1163,
	1164, 1165, 1166, 1167, 1160, 611, 1229, 2959, 2965, 2960,
	2964, 2955, 617, 2962, 2464, 117, 2969, 2970, 1228, 1227,
	1226, 2980, 2981, 2463, 1225, 1221, 2906, 1220, 1219, 2903,
	2460, 1216, 1209, 1208, 2904, 2905, 2984, 2987, 2988, 2989,
	1145, 1146, 1147, 1144, 2459, 1206, 1693, 1205, 1693, 1145,
	1146, 1147, 1144, 2993, 2999, 2302, 1145, 1146, 1147, 1144,
	1204, 1203, 1202, 1201, 1200, 1199, 1693, 1693, 1198, 1197,
	1145, 1146, 1147, 1144, 2458, 1196, 1396, 1396, 1195, 1190,
	2684, 1189, 1188, 1187, 3017, 1110, 1063, 2423, 2452, 3612,
	3019, 3018, 2442, 3504, 3023, 3022, 3025, 3502, 1435, 3144,
	1145, 1146, 1147, 1144, 2142, 3036, 2976, 2977, 2123, 3028,
	1098, 1171, 3074, 1175, 1145, 1146, 1147, 1144, 1145, 1146,
	1147, 1144, 3610, 3568, 2979, 969, 2268, 1861, 3093, 1172,
	1174, 1170, 117, 1173, 1159, 1158, 1168, 1169, 1161, 1162,
	1163, 1164, 1165, 1166, 1167, 1160, 2518, 117, 2295, 117,
	3111, 1953, 1109, 1077, 2687, 2683, 2685, 2971, 1300, 2688,
	2418, 2686, 2925, 3048, 3276, 2689, 1077, 2260, 2261, 2383,
	2377, 2760, 2983, 102, 971, 1739, 1740, 1077, 54, 3158,
	53, 971, 3178, 1398, 1594, 3050, 1145, 1146, 1147, 1144,
	3179, 2873, 3053, 2207, 2921, 3095, 2922, 3065, 3154, 1717,
	1734, 1735, 1736, 1077, 608, 2994, 2420, 3020, 3021, 2426,
	1145, 1146, 1147, 1144, 1835, 1450, 2440, 2441, 2372, 2388,
	2389, 3092, 3091, 3141, 2443, 2444, 3102, 3098, 3104, 613,
	2407, 1497, 191, 1482, 614, 3134, 615, 2449, 2114, 3177,
	2256, 2259, 2260, 2261, 2257, 1077, 2258, 2262, 1915, 3160,
	1104, 3150, 3148, 3170, 3153, 2251, 3180, 612, 3112, 2606,
	2850, 2843, 2559, 1554, 1693, 3157, 2607, 2608, 2609, 2534,
	2159, 3151, 3166, 3162, 3164, 2132, 3167, 1743, 3171, 1710,
	1641, 1640, 2594, 1077, 1262, 1263, 3172, 1260, 1261, 1258,
	1259, 3169, 2256, 2259, 2260, 2261, 2257, 3581, 2258, 2262,
	3417, 1077, 1398, 1398, 1256, 1257, 2952, 2884, 2678, 3184,
	2248, 2244, 1846, 1359, 1358, 1136, 2986, 2712, 3250, 1977,
	3250, 3194, 1311, 3195, 1291, 1334, 3546, 2722, 3524, 2550,
	2551, 3522, 3468, 3265, 1077, 3445, 1077, 3444, 3442, 3246,
	3247, 3433, 3328, 3327, 3268, 3266, 3270, 3190, 3037, 3220,
	2678, 3217, 3013, 1398, 3012, 2997, 3222, 2192, 3071, 3072,
	3073, 3221, 2162, 1499, 3077, 3078, 2996, 1747, 3240, 3614,
	3613, 611, 2763, 1077, 1077, 2125, 3253, 1077, 1077, 3094,
	3254, 3245, 2038, 1095, 3613, 3614, 3295, 3097, 3095, 3269,
	2992, 3264, 1074, 1326, 3316, 178, 3, 62, 3311, 2,
	3182, 3627, 3274, 3628, 1, 1745, 3238, 3325, 3301, 3302,
	3281, 2477, 3312, 3313, 3141, 3277, 3329, 3330, 1396, 839,
	840, 841, 842, 3273, 1074, 1697, 3134, 1264, 843, 838,
	1375, 2277, 1893, 3279, 1402, 3322, 3267, 1701, 845, 1548,
	3211, 1548, 1159, 1158, 1168, 1169, 1161, 1162, 1163, 1164,
	1165, 1166, 1167, 1160, 3321, 2696, 2697, 2985, 2699, 3354,
	3323, 1996, 3300, 2667, 2242, 2112, 2869, 3317, 1301, 886,
	1647, 1512, 992, 1088, 1509, 1087, 1085, 1596, 3238, 3238,
	3336, 733, 3238, 3238, 1956, 3349, 3386, 3353, 3380, 1159,
	1158, 1168, 1169, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
	1160, 3203, 1077, 3204, 2658, 2632, 3324, 3580, 3620, 3516,
	3583, 1525, 3403, 717, 3409, 3436, 3339, 3375, 3520, 3341,
	3197, 2001, 1141, 2744, 908, 771, 744, 3381, 1207, 3383,
	3382, 1490, 1483, 2729, 2807, 2731, 2805, 1396, 3242, 994,
	3399, 743, 3064, 2508, 3395, 1077, 2715, 3388, 991, 909,
	1398, 1940, 3337, 1693, 1451, 1455, 2158, 3396, 1693, 3487,
	3275, 2917, 2567, 3482, 3106, 1975, 3207, 3205, 3416, 3206,
	652, 1872, 3262, 3263, 588, 953, 3315, 1952, 653, 2141,
	3425, 117, 117, 969, 3537, 3419, 866, 2122, 3242, 867,
	859, 2526, 3457, 2525, 1565, 1150, 1582, 2823, 2824, 1185,
	2779, 690, 3451, 2025, 2505, 1077, 3129, 1548, 3434, 3441,
	3439, 2708, 61, 60, 59, 58, 3427, 1922, 3469, 199,
	735, 896, 198, 3233, 2801, 3513, 3585, 715, 714, 713,
	712, 711, 710, 2255, 2253, 3318, 2252, 3463, 3460, 3319,
	1856, 1855, 1920, 2882, 3464, 2597, 3486, 3471, 2592, 1787,
	3238, 1077, 1785, 2585, 1176, 2187, 2194, 1784, 3565, 1398,
	3480, 3497, 3511, 3514, 3501, 3503, 3505, 3507, 3485, 3498,
	3292, 2642, 1733, 2183, 1804, 2613, 3494, 1801, 1800, 2605,
	3288, 3282, 1832, 3384, 3249, 3113, 3500, 3515, 3114, 3120,
	895, 2131, 1017, 1013, 1015, 3519, 3523, 3521, 3525, 3526,
	935, 1398, 1016, 1014, 3386, 2428, 2164, 2845, 2104, 2103,
	3238, 2101, 2100, 1275, 3456, 3533, 3216, 2300, 2298, 2978,
	3556, 2974, 1964, 1973, 2759, 3510, 3564, 3547, 1857, 3549,
	1853, 2124, 3362, 1738, 3545, 860, 3550, 3551, 2120, 99,
	152, 48, 89, 88, 98, 150, 47, 183, 3587, 182,
	185, 184, 3586, 181, 2351, 3573, 3238, 3574, 2352, 3575,
	2932, 3576, 180, 1439, 3577, 179, 3527, 3548, 3252, 833,
	38, 37, 33, 12, 11, 34, 21, 1077, 3591, 3593,
	20, 3451, 1516, 937, 19, 1396, 936, 25, 31, 30,
	110, 109, 29, 108, 1255, 3409, 3602, 107, 106, 105,
	3428, 104, 28, 18, 3604, 3605, 3603, 42, 3608, 41,
	3619, 3611, 3609, 3622, 40, 9, 3615, 3616, 3617, 3618,
	97, 95, 27, 921, 96, 93, 94, 92, 90, 73,
	3632, 897, 1077, 72, 71, 86, 85, 84, 83, 3118,
	82, 81, 3633, 3486, 3634, 79, 80, 3636, 907, 70,
	69, 68, 3642, 67, 66, 3587, 3646, 91, 899, 3586,
	3645, 3470, 77, 87, 78, 76, 3474, 3475, 3650, 75,
	74, 65, 64, 63, 136, 3622, 3654, 3130, 135, 134,
	133, 132, 3600, 130, 131, 129, 128, 127, 3658, 126,
	3121, 125, 124, 43, 1396, 44, 45, 3495, 46, 146,
	3116, 145, 147, 149, 151, 3138, 3139, 148, 153, 143,
	141, 3117, 144, 142, 140, 56, 100, 17, 24, 4,
	0, 920, 919, 0, 1407, 0, 0, 0, 617, 0,
	0, 0, 0, 0, 0, 0, 1396, 1548, 0, 2803,
	0, 0, 0, 918, 0, 1833, 0, 0, 3122, 0,
	1794, 0, 0, 0, 894, 0, 0, 0, 0, 117,
	0, 0, 0, 0, 0, 898, 930, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3029, 0, 0, 0,
	1835, 1803, 0, 3031, 0, 0, 0, 0, 0, 926,
	1836, 1837, 1159, 1158, 1168, 1169, 1161, 1162, 1163, 1164,
	1165, 1166, 1167, 1160, 0, 0, 0, 0, 0, 0,
	0, 0, 3046, 0, 0, 0, 1802, 0, 3595, 3596,
	0, 0, 0, 117, 0, 927, 931, 117, 0, 0,
	0, 1810, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 3137, 0, 2173, 915, 0, 913, 917, 934,
	0, 0, 117, 914, 911, 910, 0, 916, 901, 902,
	900, 903, 904, 905, 906, 0, 932, 0, 933, 3126,
	0, 663, 662, 669, 659, 0, 0, 2415, 0, 928,
	929, 0, 0, 666, 667, 0, 668, 672, 0, 0,
	654, 3123, 3127, 3125, 3124, 0, 0, 0, 1826, 0,
	677, 1159, 1158, 1168, 1169, 1161, 1162, 1163, 1164, 1165,
	1166, 1167, 1160, 0, 0, 0, 924, 0, 0, 0,
	0, 0, 923, 0, 0, 0, 0, 0, 0, 3132,
	3133, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1693, 0, 681, 0, 0, 683, 0, 0, 0,
	0, 682, 1693, 0, 0, 3173, 0, 0, 3175, 1145,
	1146, 1147, 1144, 0, 0, 0, 0, 0, 0, 1793,
	1795, 1792, 0, 1789, 0, 3181, 3140, 0, 1814, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3119, 1820,
	0, 0, 0, 0, 3131, 0, 0, 1805, 0, 1788,
	0, 0, 0, 0, 0, 0, 0, 922, 0, 1808,
	1842, 0, 0, 1809, 1811, 1813, 0, 1815, 1816, 1817,
	1821, 1822, 1823, 1825, 1828, 1829, 1830, 2023, 1833, 0,
	0, 0, 0, 1794, 1818, 1827, 1819, 0, 1625, 0,
	0, 0, 0, 0, 0, 0, 1797, 0, 0, 0,
	0, 1159, 1158, 1168, 1169, 1161, 1162, 1163, 1164, 1165,
	1166, 1167, 1160, 1835, 1803, 0, 0, 0, 1834, 0,
	0, 0, 0, 1836, 1837, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 655, 657, 656,
	0, 0, 0, 0, 1790, 1791, 0, 661, 0, 1802,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 665,
	0, 0, 1831, 0, 1810, 0, 680, 0, 0, 0,
	0, 0, 0, 658, 3136, 0, 0, 1860, 0, 1807,
	0, 0, 0, 0, 0, 0, 1806, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1824, 0, 0, 0, 0, 0, 0, 0, 0, 1812,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1826, 1839, 1838, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3135, 0, 0, 0, 0, 0, 117,
	0, 1621, 117, 117, 0, 117, 0, 1618, 0, 0,
	0, 1620, 1617, 1619, 1623, 1624, 0, 0, 3376, 1622,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 660, 664, 670, 1799, 671, 673, 0, 0,
	674, 675, 676, 969, 0, 678, 679, 0, 0, 0,
	969, 0, 1793, 2562, 1792, 0, 2561, 0, 0, 0,
	0, 1814, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 1820, 0, 0, 0, 0, 1841, 0, 0,
	1840, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1808, 1842, 0, 0, 1809, 1811, 1813, 0,
	1815, 1816, 1817, 1821, 1822, 1823, 1825, 1828, 1829, 1830,
	0, 0, 0, 0, 0, 0, 0, 1818, 1827, 1819,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1797,
	0, 0, 0, 0, 1035, 0, 0, 1194, 0, 0,
	0, 1176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1834, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613,
	1614, 1615, 1616, 1628, 1629, 1630, 1631, 1632, 1633, 1626,
	1627, 0, 0, 0, 0, 0, 0, 1790, 1791, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3493, 1831, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1807, 0, 0, 0, 0, 0, 0, 1806,
	0, 0, 0, 0, 0, 1035, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1824, 0, 0, 0, 0, 0, 0,
	0, 0, 1812, 0, 1021, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1839, 1838, 0, 0, 0,
	3561, 0, 0, 0, 1043, 1047, 1049, 1051, 1053, 1054,
	1056, 0, 1061, 1057, 1058, 1059, 1060, 1035, 1038, 1039,
	1040, 1041, 1019, 1020, 1044, 0, 1022, 0, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1036, 1032,
	1033, 1042, 0, 0, 0, 0, 0, 0, 1799, 1046,
	1048, 1050, 1052, 1055, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3561, 0, 0,
	0, 0, 0, 0, 0, 1021, 0, 0, 0, 1011,
	0, 0, 0, 0, 0, 0, 0, 1037, 0, 0,
	1841, 0, 0, 1840, 0, 1043, 1047, 1049, 1051, 1053,
	1054, 1056, 0, 1061, 1057, 1058, 1059, 1060, 0, 1038,
	1039, 1040, 1041, 1019, 1020, 1044, 3561, 1022, 0, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1036,
	1032, 1033, 1042, 0, 0, 0, 0, 1021, 0, 0,
	1046, 1048, 1050, 1052, 1055, 2271, 0, 0, 0, 0,
	0, 0, 1625, 3656, 0, 0, 0, 1043, 1047, 1049,
	1051, 1053, 1054, 1056, 0, 1061, 1057, 1058, 1059, 1060,
	0, 1038, 1039, 1040, 1041, 1019, 1020, 1044, 1037, 1022,
	0, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1034, 1036, 1032, 1033, 1042, 883, 0, 884, 0, 0,
	0, 0, 1046, 1048, 1050, 1052, 1055, 0, 1860, 0,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 2424, 2425, 0, 0, 0,
	0, 0, 0, 864, 0, 0, 0, 0, 0, 0,
	1037, 0, 0, 0, 0, 0, 878, 0, 874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1833, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1621, 0, 0, 0, 1835,
	0, 1618, 0, 0, 0, 1620, 1617, 1619, 1623, 1624,
	0, 0, 0, 1622, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1833, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3408, 0, 0, 0, 0, 0, 0, 0, 0, 1045,
	1810, 0, 0, 0, 0, 880, 0, 873, 0, 1835,
	0, 0, 0, 0, 0, 0, 877, 876, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 858, 0, 0, 0, 865, 0, 0,
	0, 0, 0, 0, 1833, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 872, 0, 0,
	1810, 0, 0, 0, 0, 0, 0, 1826, 0, 0,
	0, 0, 0, 0, 0, 0, 882, 0, 0, 1835,
	0, 871, 0, 0, 0, 870, 0, 0, 0, 0,
	1045, 857, 0, 0, 0, 863, 1606, 1607, 1608, 1609,
	1610, 1611, 1612, 1613, 1614, 1615, 1616, 1628, 1629, 1630,
	1631, 1632, 1633, 1626, 1627, 0, 0, 861, 0, 0,
	0, 0, 0, 3379, 0, 0, 0, 1826, 0, 0,
	1810, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1814, 0, 0,
	0, 0, 1045, 0, 881, 0, 0, 0, 1820, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1860,
	1860, 1860, 1860, 0, 0, 0, 0, 0, 1808, 1842,
	862, 1860, 1809, 1811, 1813, 0, 1815, 1816, 1817, 1821,
	1822, 1823, 1825, 1828, 1829, 1830, 0, 1826, 663, 662,
	669, 659, 0, 1818, 1827, 1819, 0, 1814, 0, 0,
	666, 667, 0, 668, 672, 0, 0, 654, 1820, 0,
	0, 0, 0, 0, 0, 0, 0, 677, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1834, 1808, 1842,
	0, 0, 1809, 1811, 1813, 0, 1815, 1816, 1817, 1821,
	1822, 1823, 1825, 1828, 1829, 1830, 0, 879, 0, 0,
	0, 0, 0, 1818, 1827, 1819, 0, 117, 0, 0,
	681, 0, 117, 683, 0, 0, 0, 1814, 682, 0,
	0, 1831, 0, 0, 0, 0, 0, 0, 1820, 0,
	0, 0, 117, 0, 0, 0, 868, 1834, 1807, 117,
	0, 0, 0, 0, 0, 1806, 0, 0, 1808, 1842,
	0, 0, 1809, 1811, 1813, 0, 1815, 1816, 1817, 1821,
	1822, 1823, 1825, 1828, 1829, 1830, 0, 0, 0, 1824,
	0, 0, 0, 1818, 1827, 1819, 0, 0, 1812, 0,
	0, 1831, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1807, 0,
	0, 0, 0, 0, 0, 1806, 0, 1834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1824,
	0, 0, 0, 0, 0, 0, 0, 0, 1812, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1831, 0, 0, 655, 657, 656, 0, 0, 0,
	0, 0, 0, 0, 661, 0, 0, 0, 1807, 0,
	0, 0, 0, 0, 0, 1806, 665, 0, 0, 0,
	0, 0, 0, 680, 0, 0, 0, 0, 0, 0,
	658, 117, 0, 0, 649, 0, 0, 0, 1860, 1824,
	0, 0, 0, 0, 0, 0, 0, 0, 1812, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 660,
	664, 670, 0, 671, 673, 0, 0, 674, 675, 676,
	0, 0, 678, 679, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 751, 0, 0, 0, 0, 0, 0,
	0, 0, 358, 0, 482, 515, 504, 587, 470, 0,
	0, 0, 0, 0, 0, 704, 0, 0, 0, 298,
	0, 0, 328, 519, 501, 511, 502, 487, 488, 489,
	496, 308, 490, 491, 492, 463, 493, 464, 494, 495,
	742, 518, 469, 389, 342, 536, 535, 0, 0, 804,
	812, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 697, 0, 0, 732, 781, 780, 719, 729, 0,
	117, 271, 197, 465, 583, 466, 720, 117, 721, 725,
	728, 724, 722, 723, 0, 796, 0, 0, 0, 0,
	0, 0, 689, 701, 0, 705, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 698,
	699, 0, 0, 1860, 0, 752, 0, 700, 0, 0,
	747, 726, 730, 0, 0, 0, 0, 261, 394, 411,
	272, 385, 424, 277, 392, 267, 357, 381, 0, 0,
	263, 409, 391, 339, 318, 319, 262, 0, 376, 296,
	310, 293, 355, 727, 750, 754, 292, 818, 748, 419,
	265, 0, 418, 354, 405, 410, 340, 334, 264, 407,
	338, 333, 322, 300, 819, 323, 324, 314, 366, 332,
	367, 315, 344, 343, 345, 0, 0, 0, 0, 0,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 577, 745, 0, 580, 0, 421,
	0, 0, 802, 0, 0, 0, 393, 0, 117, 325,
	0, 0, 0, 749, 0, 379, 360, 815, 0, 0,
	377, 330, 406, 368, 412, 395, 420, 373, 369, 256,
	396, 295, 341, 268, 270, 290, 297, 299, 301, 302,
	350, 351, 363, 384, 397, 398, 399, 294, 278, 378,
	279, 312, 280, 257, 286, 284, 287, 386, 288, 259,
	364, 403, 0, 307, 374, 337, 260, 336, 365, 402,
	401, 269, 428, 434, 435, 523, 0, 440, 601, 602,
	603, 449, 454, 455, 456, 458, 459, 460, 461, 524,
	541, 508, 478, 442, 532, 475, 479, 480, 544, 1649,
	1648, 1650, 433, 326, 327, 0, 305, 253, 254, 597,
	800, 356, 546, 579, 471, 0, 814, 795, 797, 798,
	801, 805, 806, 807, 808, 809, 811, 813, 817, 596,
	0, 525, 540, 599, 539, 593, 362, 0, 383, 537,
	484, 0, 529, 503, 0, 530, 499, 534, 0, 473,
	0, 390, 414, 426, 443, 446, 474, 559, 560, 561,
	258, 445, 563, 564, 565, 566, 567, 568, 569, 562,
	816, 506, 483, 509, 425, 486, 485, 0, 0, 520,
	753, 521, 522, 346, 347, 348, 349, 803, 547, 276,
	444, 372, 0, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 512, 513, 510, 604, 0, 570, 571, 0,
	0, 438, 439, 304, 311, 457, 313, 275, 361, 306,
	423, 320, 0, 450, 514, 451, 573, 576, 574, 575,
	353, 316, 317, 387, 321, 331, 375, 422, 359, 380,
	273, 413, 388, 335, 500, 527, 825, 799, 824, 826,
	827, 823, 828, 829, 810, 709, 0, 757, 821, 820,
	822, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 554, 553, 552, 551, 550, 549, 548,
	0, 0, 497, 400, 285, 250, 281, 282, 289, 594,
	591, 404, 595, 0, 255, 477, 329, 0, 370, 303,
	542, 543, 788, 764, 765, 766, 706, 767, 761, 762,
	707, 763, 789, 755, 785, 786, 734, 758, 768, 784,
	769, 787, 790, 791, 830, 831, 775, 759, 222, 832,
	772, 792, 783, 782, 770, 756, 793, 794, 741, 736,
	773, 774, 760, 776, 777, 778, 708, 737, 738, 739,
	740, 0, 0, 0, 429, 430, 431, 453, 415, 476,
	592, 0, 0, 0, 0, 0, 0, 0, 526, 538,
	572, 0, 581, 582, 584, 586, 779, 751, 598, 467,
	468, 578, 0, 0, 0, 0, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 704,
	0, 0, 0, 298, 1694, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 742, 518, 469, 389, 342, 536,
	535, 0, 0, 804, 812, 0, 0, 0, 0, 0,
	0, 0, 1884, 0, 0, 697, 0, 0, 732, 781,
	780, 719, 729, 0, 0, 271, 197, 465, 583, 466,
	720, 0, 721, 725, 728, 724, 722, 723, 0, 796,
	0, 0, 0, 0, 0, 0, 689, 701, 0, 705,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 698, 699, 0, 0, 0, 0, 752,
	0, 700, 0, 0, 1885, 726, 730, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 727, 750, 754,
	292, 818, 748, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 819, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 745,
	0, 580, 0, 421, 0, 0, 802, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 749, 0, 379,
	360, 815, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 800, 356, 546, 579, 471, 0,
	814, 795, 797, 798, 801, 805, 806, 807, 808, 809,
	811, 813, 817, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 816, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 753, 521, 522, 346, 347, 348,
	349, 803, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	825, 799, 824, 826, 827, 823, 828, 829, 810, 709,
	0, 757, 821, 820, 822, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 788, 764, 765, 766,
	706, 767, 761, 762, 707, 763, 789, 755, 785, 786,
	734, 758, 768, 784, 769, 787, 790, 791, 830, 831,
	775, 759, 222, 832, 772, 792, 783, 782, 770, 756,
	793, 794, 741, 736, 773, 774, 760, 776, 777, 778,
	708, 737, 738, 739, 740, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	779, 0, 598, 467, 468, 578, 174, 751, 0, 0,
	0, 0, 0, 0, 0, 0, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 704,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 1179, 518, 469, 389, 342, 536,
	535, 0, 0, 804, 812, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 697, 0, 0, 732, 781,
	780, 719, 729, 0, 0, 271, 197, 465, 583, 466,
	720, 0, 721, 725, 728, 724, 722, 723, 0, 796,
	0, 0, 0, 0, 0, 0, 689, 701, 0, 705,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 698, 699, 0, 0, 0, 0, 752,
	0, 700, 0, 0, 747, 726, 730, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 727, 750, 754,
	292, 818, 748, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 819, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 745,
	0, 580, 0, 421, 0, 0, 802, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 749, 0, 379,
	360, 815, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 800, 356, 546, 579, 471, 0,
	814, 795, 797, 798, 801, 805, 806, 807, 808, 809,
	811, 813, 817, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 816, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 753, 521, 522, 346, 347, 348,
	349, 803, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	825, 799, 824, 826, 827, 823, 828, 829, 810, 709,
	0, 757, 821, 820, 822, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 139, 370, 303, 542, 543, 788, 764, 765, 766,
	706, 767, 761, 762, 707, 763, 789, 755, 785, 786,
	734, 758, 768, 784, 769, 787, 790, 791, 830, 831,
	775, 759, 222, 832, 772, 792, 783, 782, 770, 756,
	793, 794, 741, 736, 773, 774, 760, 776, 777, 778,
	708, 737, 738, 739, 740, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	779, 751, 598, 467, 468, 578, 0, 0, 0, 0,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 704, 0, 0, 0, 298, 3655, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 742, 518,
	469, 389, 342, 536, 535, 0, 0, 804, 812, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 697,
	0, 0, 732, 781, 780, 719, 729, 0, 0, 271,
	197, 465, 583, 466, 720, 0, 721, 725, 728, 724,
	722, 723, 0, 796, 0, 0, 0, 0, 0, 0,
	689, 701, 0, 705, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 698, 699, 0,
	0, 0, 0, 752, 0, 700, 0, 0, 747, 726,
	730, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 727, 750, 754, 292, 818, 748, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 819, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 745, 0, 580, 0, 421, 0, 0,
	802, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 749, 0, 379, 360, 815, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 800, 356,
	546, 579, 471, 0, 814, 795, 797, 798, 801, 805,
	806, 807, 808, 809, 811, 813, 817, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 816, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 753, 521,
	522, 346, 347, 348, 349, 803, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 825, 799, 824, 826, 827, 823,
	828, 829, 810, 709, 0, 757, 821, 820, 822, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	788, 764, 765, 766, 706, 767, 761, 762, 707, 763,
	789, 755, 785, 786, 734, 758, 768, 784, 769, 787,
	790, 791, 830, 831, 775, 759, 222, 832, 772, 792,
	783, 782, 770, 756, 793, 794, 741, 736, 773, 774,
	760, 776, 777, 778, 708, 737, 738, 739, 740, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 779, 751, 598, 467, 468, 578,
	0, 0, 0, 0, 358, 0, 482, 515, 504, 587,
	470, 0, 0, 0, 0, 0, 0, 704, 0, 0,
	0, 298, 0, 0, 328, 519, 501, 511, 502, 487,
	488, 489, 496, 308, 490, 491, 492, 463, 493, 464,
	494, 495, 742, 518, 469, 389, 342, 536, 535, 0,
	0, 804, 812, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 697, 0, 0, 732, 781, 780, 719,
	729, 0, 0, 271, 197, 465, 583, 466, 720, 0,
	721, 725, 728, 724, 722, 723, 0, 796, 0, 0,
	0, 0, 0, 0, 689, 701, 0, 705, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 698, 699, 0, 0, 0, 0, 752, 0, 700,
	0, 0, 747, 726, 730, 0, 0, 0, 0, 261,
	394, 411, 272, 385, 424, 277, 392, 267, 357, 381,
	0, 0, 263, 409, 391, 339, 318, 319, 262, 0,
	376, 296, 310, 293, 355, 727, 750, 754, 292, 818,
	748, 419, 265, 0, 418, 354, 405, 410, 340, 334,
	264, 407, 338, 333, 322, 300, 819, 323, 324, 314,
	366, 332, 367, 315, 344, 343, 345, 0, 0, 0,
	0, 0, 447, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 577, 745, 0, 580,
	0, 421, 0, 0, 802, 0, 0, 0, 393, 0,
	0, 325, 0, 0, 0, 749, 0, 379, 360, 815,
	3562, 0, 377, 330, 406, 368, 412, 395, 420, 373,
	369, 256, 396, 295, 341, 268, 270, 290, 297, 299,
	301, 302, 350, 351, 363, 384, 397, 398, 399, 294,
	278, 378, 279, 312, 280, 257, 286, 284, 287, 386,
	288, 259, 364, 403, 0, 307, 374, 337, 260, 336,
	365, 402, 401, 269, 428, 434, 435, 523, 0, 440,
	601, 602, 603, 449, 454, 455, 456, 458, 459, 460,
	461, 524, 541, 508, 478, 442, 532, 475, 479, 480,
	544, 0, 0, 0, 433, 326, 327, 0, 305, 253,
	254, 597, 800, 356, 546, 579, 471, 0, 814, 795,
	797, 798, 801, 805, 806, 807, 808, 809, 811, 813,
	817, 596, 0, 525, 540, 599, 539, 593, 362, 0,
	383, 537, 484, 0, 529, 503, 0, 530, 499, 534,
	0, 473, 0, 390, 414, 426, 443, 446, 474, 559,
	560, 561, 258, 445, 563, 564, 565, 566, 567, 568,
	569, 562, 816, 506, 483, 509, 425, 486, 485, 0,
	0, 520, 753, 521, 522, 346, 347, 348, 349, 803,
	547, 276, 444, 372, 0, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 512, 513, 510, 604, 0, 570,
	571, 0, 0, 438, 439, 304, 311, 457, 313, 275,
	361, 306, 423, 320, 0, 450, 514, 451, 573, 576,
	574, 575, 353, 316, 317, 387, 321, 331, 375, 422,
	359, 380, 273, 413, 388, 335, 500, 527, 825, 799,
	824, 826, 827, 823, 828, 829, 810, 709, 0, 757,
	821, 820, 822, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 554, 553, 552, 551, 550,
	549, 548, 0, 0, 497, 400, 285, 250, 281, 282,
	289, 594, 591, 404, 595, 0, 255, 477, 329, 0,
	370, 303, 542, 543, 788, 764, 765, 766, 706, 767,
	761, 762, 707, 763, 789, 755, 785, 786, 734, 758,
	768, 784, 769, 787, 790, 791, 830, 831, 775, 759,
	222, 832, 772, 792, 783, 782, 770, 756, 793, 794,
	741, 736, 773, 774, 760, 776, 777, 778, 708, 737,
	738, 739, 740, 0, 0, 0, 429, 430, 431, 453,
	415, 476, 592, 0, 0, 0, 0, 0, 0, 0,
	526, 538, 572, 0, 581, 582, 584, 586, 779, 751,
	598, 467, 468, 578, 0, 0, 0, 0, 358, 0,
	482, 515, 504, 587, 470, 0, 0, 0, 0, 0,
	0, 704, 0, 0, 0, 298, 1694, 0, 328, 519,
	501, 511, 502, 487, 488, 489, 496, 308, 490, 491,
	492, 463, 493, 464, 494, 495, 742, 518, 469, 389,
	342, 536, 535, 0, 0, 804, 812, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 697, 0, 0,
	732, 781, 780, 719, 729, 0, 0, 271, 197, 465,
	583, 466, 720, 0, 721, 725, 728, 724, 722, 723,
	0, 796, 0, 0, 0, 0, 0, 0, 689, 701,
	0, 705, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 698, 699, 0, 0, 0,
	0, 752, 0, 700, 0, 0, 747, 726, 730, 0,
	0, 0, 0, 261, 394, 411, 272, 385, 424, 277,
	392, 267, 357, 381, 0, 0, 263, 409, 391, 339,
	318, 319, 262, 0, 376, 296, 310, 293, 355, 727,
	750, 754, 292, 818, 748, 419, 265, 0, 418, 354,
	405, 410, 340, 334, 264, 407, 338, 333, 322, 300,
	819, 323, 324, 314, 366, 332, 367, 315, 344, 343,
	345, 0, 0, 0, 0, 0, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	577, 745, 0, 580, 0, 421, 0, 0, 802, 0,
	0, 0, 393, 0, 0, 325, 0, 0, 0, 749,
	0, 379, 360, 815, 0, 0, 377, 330, 406, 368,
	412, 395, 420, 373, 369, 256, 396, 295, 341, 268,
	270, 290, 297, 299, 301, 302, 350, 351, 363, 384,
	397, 398, 399, 294, 278, 378, 279, 312, 280, 257,
	286, 284, 287, 386, 288, 259, 364, 403, 0, 307,
	374, 337, 260, 336, 365, 402, 401, 269, 428, 434,
	435, 523, 0, 440, 601, 602, 603, 449, 454, 455,
	456, 458, 459, 460, 461, 524, 541, 508, 478, 442,
	532, 475, 479, 480, 544, 0, 0, 0, 433, 326,
	327, 0, 305, 253, 254, 597, 800, 356, 546, 579,
	471, 0, 814, 795, 797, 798, 801, 805, 806, 807,
	808, 809, 811, 813, 817, 596, 0, 525, 540, 599,
	539, 593, 362, 0, 383, 537, 484, 0, 529, 503,
	0, 530, 499, 534, 0, 473, 0, 390, 414, 426,
	443, 446, 474, 559, 560, 561, 258, 445, 563, 564,
	565, 566, 567, 568, 569, 562, 816, 506, 483, 509,
	425, 486, 485, 0, 0, 520, 753, 521, 522, 346,
	347, 348, 349, 803, 547, 276, 444, 372, 0, 507,
	0, 0, 0, 0, 0, 0, 0, 0, 512, 513,
	510, 604, 0, 570, 571, 0, 0, 438, 439, 304,
	311, 457, 313, 275, 361, 306, 423, 320, 0, 450,
	514, 451, 573, 576, 574, 575, 353, 316, 317, 387,
	321, 331, 375, 422, 359, 380, 273, 413, 388, 335,
	500, 527, 825, 799, 824, 826, 827, 823, 828, 829,
	810, 709, 0, 757, 821, 820, 822, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 554,
	553, 552, 551, 550, 549, 548, 0, 0, 497, 400,
	285, 250, 281, 282, 289, 594, 591, 404, 595, 0,
	255, 477, 329, 0, 370, 303, 542, 543, 788, 764,
	765, 766, 706, 767, 761, 762, 707, 763, 789, 755,
	785, 786, 734, 758, 768, 784, 769, 787, 790, 791,
	830, 831, 775, 759, 222, 832, 772, 792, 783, 782,
	770, 756, 793, 794, 741, 736, 773, 774, 760, 776,
	777, 778, 708, 737, 738, 739, 740, 0, 0, 0,
	429, 430, 431, 453, 415, 476, 592, 0, 0, 0,
	0, 0, 0, 0, 526, 538, 572, 0, 581, 582,
	584, 586, 779, 751, 598, 467, 468, 578, 0, 0,
	0, 0, 358, 0, 482, 515, 504, 587, 470, 0,
	0, 0, 0, 0, 0, 704, 0, 0, 0, 298,
	0, 0, 328, 519, 501, 511, 502, 487, 488, 489,
	496, 308, 490, 491, 492, 463, 493, 464, 494, 495,
	742, 518, 469, 389, 342, 536, 535, 0, 0, 804,
	812, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 697, 0, 0, 732, 781, 780, 719, 729, 0,
	0, 271, 197, 465, 583, 466, 720, 0, 721, 725,
	728, 724, 722, 723, 0, 796, 0, 0, 0, 0,
	0, 0, 689, 701, 0, 705, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 698,
	699, 1434, 0, 0, 0, 752, 0, 700, 0, 0,
	747, 726, 730, 0, 0, 0, 0, 261, 394, 411,
	272, 385, 424, 277, 392, 267, 357, 381, 0, 0,
	263, 409, 391, 339, 318, 319, 262, 0, 376, 296,
	310, 293, 355, 727, 750, 754, 292, 818, 748, 419,
	265, 0, 418, 354, 405, 410, 340, 334, 264, 407,
	338, 333, 322, 300, 819, 323, 324, 314, 366, 332,
	367, 315, 344, 343, 345, 0, 0, 0, 0, 0,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 577, 745, 0, 580, 0, 421,
	0, 0, 802, 0, 0, 0, 393, 0, 0, 325,
	0, 0, 0, 749, 0, 379, 360, 815, 0, 0,
	377, 330, 406, 368, 412, 395, 420, 373, 369, 256,
	396, 295, 341, 268, 270, 290, 297, 299, 301, 302,
	350, 351, 363, 384, 397, 398, 399, 294, 278, 378,
	279, 312, 280, 257, 286, 284, 287, 386, 288, 259,
	364, 403, 0, 307, 374, 337, 260, 336, 365, 402,
	401, 269, 428, 434, 435, 523, 0, 440, 601, 602,
	603, 449, 454, 455, 456, 458, 459, 460, 461, 524,
	541, 508, 478, 442, 532, 475, 479, 480, 544, 0,
	0, 0, 433, 326, 327, 0, 305, 253, 254, 597,
	800, 356, 546, 579, 471, 0, 814, 795, 797, 798,
	801, 805, 806, 807, 808, 809, 811, 813, 817, 596,
	0, 525, 540, 599, 539, 593, 362, 0, 383, 537,
	484, 0, 529, 503, 0, 530, 499, 534, 0, 473,
	0, 390, 414, 426, 443, 446, 474, 559, 560, 561,
	258, 445, 563, 564, 565, 566, 567, 568, 569, 562,
	816, 506, 483, 509, 425, 486, 485, 0, 0, 520,
	753, 521, 522, 346, 347, 348, 349, 803, 547, 276,
	444, 372, 0, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 512, 513, 510, 604, 0, 570, 571, 0,
	0, 438, 439, 304, 311, 457, 313, 275, 361, 306,
	423, 320, 0, 450, 514, 451, 573, 576, 574, 575,
	353, 316, 317, 387, 321, 331, 375, 422, 359, 380,
	273, 413, 388, 335, 500, 527, 825, 799, 824, 826,
	827, 823, 828, 829, 810, 709, 0, 757, 821, 820,
	822, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 554, 553, 552, 551, 550, 549, 548,
	0, 0, 497, 400, 285, 250, 281, 282, 289, 594,
	591, 404, 595, 0, 255, 477, 329, 0, 370, 303,
	542, 543, 788, 764, 765, 766, 706, 767, 761, 762,
	707, 763, 789, 755, 785, 786, 734, 758, 768, 784,
	769, 787, 790, 791, 830, 831, 775, 759, 222, 832,
	772, 792, 783, 782, 770, 756, 793, 794, 741, 736,
	773, 774, 760, 776, 777, 778, 708, 737, 738, 739,
	740, 0, 0, 0, 429, 430, 431, 453, 415, 476,
	592, 0, 0, 0, 0, 0, 0, 0, 526, 538,
	572, 0, 581, 582, 584, 586, 779, 0, 598, 467,
	468, 578, 751, 0, 0, 2046, 0, 0, 0, 0,
	0, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 704, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 742,
	518, 469, 389, 342, 536, 535, 0, 0, 804, 812,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	697, 0, 0, 732, 781, 780, 719, 729, 0, 0,
	271, 197, 465, 583, 466, 720, 0, 721, 725, 728,
	724, 722, 723, 0, 796, 0, 0, 0, 0, 0,
	0, 689, 701, 0, 705, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 698, 699,
	0, 0, 0, 0, 752, 0, 700, 0, 0, 747,
	726, 730, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 727, 750, 754, 292, 818, 748, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 819, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 745, 0, 580, 0, 421, 0,
	0, 802, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 749, 0, 379, 360, 815, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 800,
	356, 546, 579, 471, 0, 814, 795, 797, 798, 801,
	805, 806, 807, 808, 809, 811, 813, 817, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 816,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 753,
	521, 522, 346, 347, 348, 349, 803, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 825, 799, 824, 826, 827,
	823, 828, 829, 810, 709, 0, 757, 821, 820, 822,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 788, 764, 765, 766, 706, 767, 761, 762, 707,
	763, 789, 755, 785, 786, 734, 758, 768, 784, 769,
	787, 790, 791, 830, 831, 775, 759, 222, 832, 772,
	792, 783, 782, 770, 756, 793, 794, 741, 736, 773,
	774, 760, 776, 777, 778, 708, 737, 738, 739, 740,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 779, 751, 598, 467, 468,
	578, 0, 0, 0, 0, 358, 0, 482, 515, 504,
	587, 470, 0, 0, 0, 0, 0, 0, 704, 0,
	0, 0, 298, 0, 0, 328, 519, 501, 511, 502,
	487, 488, 489, 496, 308, 490, 491, 492, 463, 493,
	464, 494, 495, 742, 518, 469, 389, 342, 536, 535,
	0, 0, 804, 812, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 697, 0, 0, 732, 781, 780,
	719, 729, 0, 0, 271, 197, 465, 583, 466, 720,
	0, 721, 725, 728, 724, 722, 723, 0, 796, 0,
	0, 0, 0, 0, 0, 689, 701, 0, 705, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 698, 699, 1687, 0, 0, 0, 752, 0,
	700, 0, 0, 747, 726, 730, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 727, 750, 754, 292,
	818, 748, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 819, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 745, 0,
	580, 0, 421, 0, 0, 802, 0, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 749, 0, 379, 360,
	815, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 523, 0,
	440, 601, 602, 603, 449, 454, 455, 456, 458, 459,
	460, 461, 524, 541, 508, 478, 442, 532, 475, 479,
	480, 544, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 597, 800, 356, 546, 579, 471, 0, 814,
	795, 797, 798, 801, 805, 806, 807, 808, 809, 811,
	813, 817, 596, 0, 525, 540, 599, 539, 593, 362,
	0, 383, 537, 484, 0, 529, 503, 0, 530, 499,
	534, 0, 473, 0, 390, 414, 426, 443, 446, 474,
	559, 560, 561, 258, 445, 563, 564, 565, 566, 567,
	568, 569, 562, 816, 506, 483, 509, 425, 486, 485,
	0, 0, 520, 753, 521, 522, 346, 347, 348, 349,
	803, 547, 276, 444, 372, 0, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 512, 513, 510, 604, 0,
	570, 571, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 514, 451, 573,
	576, 574, 575, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 500, 527, 825,
	799, 824, 826, 827, 823, 828, 829, 810, 709, 0,
	757, 821, 820, 822, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 554, 553, 552, 551,
	550, 549, 548, 0, 0, 497, 400, 285, 250, 281,
	282, 289, 594, 591, 404, 595, 0, 255, 477, 329,
	0, 370, 303, 542, 543, 788, 764, 765, 766, 706,
	767, 761, 762, 707, 763, 789, 755, 785, 786, 734,
	758, 768, 784, 769, 787, 790, 791, 830, 831, 775,
	759, 222, 832, 772, 792, 783, 782, 770, 756, 793,
	794, 741, 736, 773, 774, 760, 776, 777, 778, 708,
	737, 738, 739, 740, 0, 0, 0, 429, 430, 431,
	453, 415, 476, 592, 0, 0, 0, 0, 0, 0,
	0, 526, 538, 572, 0, 581, 582, 584, 586, 779,
	751, 598, 467, 468, 578, 0, 0, 0, 0, 358,
	0, 482, 515, 504, 587, 470, 0, 0, 0, 0,
	0, 0, 704, 0, 0, 0, 298, 0, 0, 328,
	519, 501, 511, 502, 487, 488, 489, 496, 308, 490,
	491, 492, 463, 493, 464, 494, 495, 742, 518, 469,
	389, 342, 536, 535, 0, 0, 804, 812, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 697, 0,
	0, 732, 781, 780, 719, 729, 0, 0, 271, 197,
	465, 583, 466, 720, 0, 721, 725, 728, 724, 722,
	723, 0, 796, 0, 0, 0, 0, 0, 0, 689,
	701, 0, 705, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 698, 699, 0, 0,
	0, 0, 752, 0, 700, 0, 0, 747, 726, 730,
	0, 0, 0, 0, 261, 394, 411, 272, 385, 424,
	277, 392, 267, 357, 381, 0, 0, 263, 409, 391,
	339, 318, 319, 262, 0, 376, 296, 310, 293, 355,
	727, 750, 754, 292, 818, 748, 419, 265, 0, 418,
	354, 405, 410, 340, 334, 264, 407, 338, 333, 322,
	300, 819, 323, 324, 314, 366, 332, 367, 315, 344,
	343, 345, 0, 0, 0, 0, 0, 447, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 577, 745, 0, 580, 0, 421, 0, 0, 802,
	0, 0, 0, 393, 0, 0, 325, 0, 0, 0,
	749, 0, 379, 360, 815, 0, 0, 377, 330, 406,
	368, 412, 395, 420, 373, 369, 256, 396, 295, 341,
	268, 270, 290, 297, 299, 301, 302, 350, 351, 363,
	384, 397, 398, 399, 294, 278, 378, 279, 312, 280,
	257, 286, 284, 287, 386, 288, 259, 364, 403, 0,
	307, 374, 337, 260, 336, 365, 402, 401, 269, 428,
	434, 435, 523, 0, 440, 601, 602, 603, 449, 454,
	455, 456, 458, 459, 460, 461, 524, 541, 508, 478,
	442, 532, 475, 479, 480, 544, 0, 0, 0, 433,
	326, 327, 0, 305, 253, 254, 597, 800, 356, 546,
	579, 471, 0, 814, 795, 797, 798, 801, 805, 806,
	807, 808, 809, 811, 813, 817, 596, 0, 525, 540,
	599, 539, 593, 362, 0, 383, 537, 484, 0, 529,
	503, 0, 530, 499, 534, 0, 473, 0, 390, 414,
	426, 443, 446, 474, 559, 560, 561, 258, 445, 563,
	564, 565, 566, 567, 568, 569, 562, 816, 506, 483,
	509, 425, 486, 485, 0, 0, 520, 753, 521, 522,
	346, 347, 348, 349, 803, 547, 276, 444, 372, 0,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 512,
	513, 510, 604, 0, 570, 571, 0, 0, 438, 439,
	304, 311, 457, 313, 275, 361, 306, 423, 320, 0,
	450, 514, 451, 573, 576, 574, 575, 353, 316, 317,
	387, 321, 331, 375, 422, 359, 380, 273, 413, 388,
	335, 500, 527, 825, 799, 824, 826, 827, 823, 828,
	829, 810, 709, 0, 757, 821, 820, 822, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	554, 553, 552, 551, 550, 549, 548, 0, 0, 497,
	400, 285, 250, 281, 282, 289, 594, 591, 404, 595,
	0, 255, 477, 329, 0, 370, 303, 542, 543, 788,
	764, 765, 766, 706, 767, 761, 762, 707, 763, 789,
	755, 785, 786, 734, 758, 768, 784, 769, 787, 790,
	791, 830, 831, 775, 759, 222, 832, 772, 792, 783,
	782, 770, 756, 793, 794, 741, 736, 773, 774, 760,
	776, 777, 778, 708, 737, 738, 739, 740, 0, 0,
	0, 429, 430, 431, 453, 415, 476, 592, 0, 0,
	0, 0, 0, 0, 0, 526, 538, 572, 0, 581,
	582, 584, 586, 779, 751, 598, 467, 468, 578, 0,
	0, 0, 0, 358, 0, 482, 515, 504, 587, 470,
	0, 0, 0, 0, 0, 0, 704, 0, 0, 0,
	298, 0, 0, 328, 519, 501, 511, 502, 487, 488,
	489, 496, 308, 490, 491, 492, 463, 493, 464, 494,
	495, 742, 518, 469, 389, 342, 536, 535, 0, 0,
	804, 812, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 697, 0, 0, 732, 781, 780, 719, 729,
	0, 0, 271, 197, 465, 583, 466, 2474, 0, 2475,
	725, 728, 724, 722, 723, 0, 796, 0, 0, 0,
	0, 0, 0, 689, 701, 0, 705, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	698, 699, 0, 0, 0, 0, 752, 0, 700, 0,
	0, 747, 726, 730, 0, 0, 0, 0, 261, 394,
	411, 272, 385, 424, 277, 392, 267, 357, 381, 0,
	0, 263, 409, 391, 339, 318, 319, 262, 0, 376,
	296, 310, 293, 355, 727, 750, 754, 292, 818, 748,
	419, 265, 0, 418, 354, 405, 410, 340, 334, 264,
	407, 338, 333, 322, 300, 819, 323, 324, 314, 366,
	332, 367, 315, 344, 343, 345, 0, 0, 0, 0,
	0, 447, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 577, 745, 0, 580, 0,
	421, 0, 0, 802, 0, 0, 0, 393, 0, 0,
	325, 0, 0, 0, 749, 0, 379, 360, 815, 0,
	0, 377, 330, 406, 368, 412, 395, 420, 373, 369,
	256, 396, 295, 341, 268, 270, 290, 297, 299, 301,
	302, 350, 351, 363, 384, 397, 398, 399, 294, 278,
	378, 279, 312, 280, 257, 286, 284, 287, 386, 288,
	259, 364, 403, 0, 307, 374, 337, 260, 336, 365,
	402, 401, 269, 428, 434, 435, 523, 0, 440, 601,
	602, 603, 449, 454, 455, 456, 458, 459, 460, 461,
	524, 541, 508, 478, 442, 532, 475, 479, 480, 544,
	0, 0, 0, 433, 326, 327, 0, 305, 253, 254,
	597, 800, 356, 546, 579, 471, 0, 814, 795, 797,
	798, 801, 805, 806, 807, 808, 809, 811, 813, 817,
	596, 0, 525, 540, 599, 539, 593, 362, 0, 383,
	537, 484, 0, 529, 503, 0, 530, 499, 534, 0,
	473, 0, 390, 414, 426, 443, 446, 474, 559, 560,
	561, 258, 445, 563, 564, 565, 566, 567, 568, 569,
	562, 816, 506, 483, 509, 425, 486, 485, 0, 0,
	520, 753, 521, 522, 346, 347, 348, 349, 803, 547,
	276, 444, 372, 0, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 512, 513, 510, 604, 0, 570, 571,
	0, 0, 438, 439, 304, 311, 457, 313, 275, 361,
	306, 423, 320, 0, 450, 514, 451, 573, 576, 574,
	575, 353, 316, 317, 387, 321, 331, 375, 422, 359,
	380, 273, 413, 388, 335, 500, 527, 825, 799, 824,
	826, 827, 823, 828, 829, 810, 709, 0, 757, 821,
	820, 822, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 554, 553, 552, 551, 550, 549,
	548, 0, 0, 497, 400, 285, 250, 281, 282, 289,
	594, 591, 404, 595, 0, 255, 477, 329, 0, 370,
	303, 542, 543, 788, 764, 765, 766, 706, 767, 761,
	762, 707, 763, 789, 755, 785, 786, 734, 758, 768,
	784, 769, 787, 790, 791, 830, 831, 775, 759, 222,
	832, 772, 792, 783, 782, 770, 756, 793, 794, 741,
	736, 773, 774, 760, 776, 777, 778, 708, 737, 738,
	739, 740, 0, 0, 0, 429, 430, 431, 453, 415,
	476, 592, 0, 0, 0, 0, 0, 0, 0, 526,
	538, 572, 0, 581, 582, 584, 586, 779, 751, 598,
	467, 468, 578, 0, 0, 0, 0, 358, 0, 482,
	515, 504, 587, 470, 0, 0, 1566, 0, 0, 0,
	704, 0, 0, 0, 298, 0, 0, 328, 519, 501,
	511, 502, 487, 488, 489, 496, 308, 490, 491, 492,
	463, 493, 464, 494, 495, 742, 518, 469, 389, 342,
	536, 535, 0, 0, 804, 812, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 697, 0, 0, 732,
	781, 780, 719, 729, 0, 0, 271, 197, 465, 583,
	466, 720, 0, 721, 725, 728, 724, 722, 723, 0,
	796, 0, 0, 0, 0, 0, 0, 0, 701, 0,
	705, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 698, 699, 0, 0, 0, 0,
	752, 0, 700, 0, 0, 747, 726, 730, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 727, 750,
	754, 292, 818, 748, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 819,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	745, 0, 580, 0, 421, 0, 0, 802, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 749, 0,
	379, 360, 815, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 1567, 1568,
	523, 0, 440, 601, 602, 603, 449, 454, 455, 456,
	458, 459, 460, 461, 524, 541, 508, 478, 442, 532,
	475, 479, 480, 544, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 597, 800, 356, 546, 579, 471,
	0, 814, 795, 797, 798, 801, 805, 806, 807, 808,
	809, 811, 813, 817, 596, 0, 525, 540, 599, 539,
	593, 362, 0, 383, 537, 484, 0, 529, 503, 0,
	530, 499, 534, 0, 473, 0, 390, 414, 426, 443,
	446, 474, 559, 560, 561, 258, 445, 563, 564, 565,
	566, 567, 568, 569, 562, 816, 506, 483, 509, 425,
	486, 485, 0, 0, 520, 753, 521, 522, 346, 347,
	348, 349, 803, 547, 276, 444, 372, 0, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 512, 513, 510,
	604, 0, 570, 571, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 514,
	451, 573, 576, 574, 575, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 500,
	527, 825, 799, 824, 826, 827, 823, 828, 829, 810,
	709, 0, 757, 821, 820, 822, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 554, 553,
	552, 551, 550, 549, 548, 0, 0, 497, 400, 285,
	250, 281, 282, 289, 594, 591, 404, 595, 0, 255,
	477, 329, 0, 370, 303, 542, 543, 788, 764, 765,
	766, 706, 767, 761, 762, 707, 763, 789, 755, 785,
	786, 734, 758, 768, 784, 769, 787, 790, 791, 830,
	831, 775, 759, 222, 832, 772, 792, 783, 782, 770,
	756, 793, 794, 741, 736, 773, 774, 760, 776, 777,
	778, 708, 737, 738, 739, 740, 0, 0, 0, 429,
	430, 431, 453, 415, 476, 592, 0, 0, 0, 0,
	0, 0, 0, 526, 538, 572, 0, 581, 582, 584,
	586, 779, 751, 598, 467, 468, 578, 0, 0, 0,
	0, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 704, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 742,
	518, 469, 389, 342, 536, 535, 0, 0, 804, 812,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	697, 0, 0, 732, 781, 780, 719, 729, 0, 0,
	271, 197, 465, 583, 466, 720, 0, 721, 725, 728,
	724, 722, 723, 0, 796, 0, 0, 0, 0, 0,
	0, 0, 701, 0, 705, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 698, 699,
	0, 0, 0, 0, 752, 0, 700, 0, 0, 747,
	726, 730, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 727, 750, 754, 292, 818, 748, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 819, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 745, 0, 580, 0, 421, 0,
	0, 802, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 749, 0, 379, 360, 815, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 800,
	356, 546, 579, 471, 0, 814, 795, 797, 798, 801,
	805, 806, 807, 808, 809, 811, 813, 817, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 816,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 753,
	521, 522, 346, 347, 348, 349, 803, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 825, 799, 824, 826, 827,
	823, 828, 829, 810, 709, 0, 757, 821, 820, 822,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 788, 764, 765, 766, 706, 767, 761, 762, 707,
	763, 789, 755, 785, 786, 734, 758, 768, 784, 769,
	787, 790, 791, 830, 831, 775, 759, 222, 832, 772,
	792, 783, 782, 770, 756, 793, 794, 741, 736, 773,
	774, 760, 776, 777, 778, 708, 737, 738, 739, 740,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 779, 751, 598, 467, 468,
	578, 0, 0, 0, 0, 358, 0, 482, 515, 504,
	587, 470, 0, 0, 0, 0, 0, 0, 704, 0,
	0, 0, 298, 0, 0, 328, 519, 501, 511, 502,
	487, 488, 489, 496, 308, 490, 491, 492, 463, 493,
	464, 494, 495, 742, 518, 469, 389, 342, 536, 535,
	0, 0, 804, 812, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 732, 781, 780,
	719, 729, 0, 0, 271, 197, 465, 583, 466, 720,
	0, 721, 725, 728, 724, 722, 723, 0, 796, 0,
	0, 0, 0, 0, 0, 689, 701, 0, 705, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 698, 699, 0, 0, 0, 0, 752, 0,
	700, 0, 0, 747, 726, 730, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 727, 750, 754, 292,
	818, 748, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 819, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 745, 0,
	580, 0, 421, 0, 0, 802, 0, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 749, 0, 379, 360,
	815, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 523, 0,
	440, 601, 602, 603, 449, 454, 455, 456, 458, 459,
	460, 461, 524, 541, 508, 478, 442, 532, 475, 479,
	480, 544, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 597, 800, 356, 546, 579, 471, 0, 814,
	795, 797, 798, 801, 805, 806, 807, 808, 809, 811,
	813, 817, 596, 0, 525, 540, 599, 539, 593, 362,
	0, 383, 537, 484, 0, 529, 503, 0, 530, 499,
	534, 0, 473, 0, 390, 414, 426, 443, 446, 474,
	559, 560, 561, 258, 445, 563, 564, 565, 566, 567,
	568, 569, 562, 816, 506, 483, 509, 425, 486, 485,
	0, 0, 520, 753, 521, 522, 346, 347, 348, 349,
	803, 547, 276, 444, 372, 0, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 512, 513, 510, 604, 0,
	570, 571, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 514, 451, 573,
	576, 574, 575, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 500, 527, 825,
	799, 824, 826, 827, 823, 828, 829, 810, 709, 0,
	757, 821, 820, 822, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 554, 553, 552, 551,
	550, 549, 548, 0, 0, 497, 400, 285, 250, 281,
	282, 289, 594, 591, 404, 595, 0, 255, 477, 329,
	0, 370, 303, 542, 543, 788, 764, 765, 766, 706,
	767, 761, 762, 707, 763, 789, 755, 785, 786, 734,
	758, 768, 784, 769, 787, 790, 791, 830, 831, 775,
	759, 222, 832, 772, 792, 783, 782, 770, 756, 793,
	794, 741, 736, 773, 774, 760, 776, 777, 778, 708,
	737, 738, 739, 740, 0, 0, 0, 429, 430, 431,
	453, 415, 476, 592, 0, 0, 0, 0, 0, 0,
	0, 526, 538, 572, 0, 581, 582, 584, 586, 779,
	0, 598, 467, 468, 578, 174, 51, 163, 138, 0,
	0, 0, 0, 0, 0, 358, 0, 482, 515, 504,
	587, 470, 0, 164, 0, 0, 0, 0, 0, 0,
	156, 0, 298, 0, 165, 328, 519, 501, 511, 502,
	487, 488, 489, 496, 308, 490, 491, 492, 463, 493,
	464, 494, 495, 115, 518, 469, 389, 342, 536, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 0, 168, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 271, 197, 465, 583, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 0, 408, 436, 292,
	427, 0, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 452, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 137, 162, 172, 0, 101, 0, 577, 0, 0,
	580, 0, 421, 0, 0, 189, 0, 0, 0, 393,
	0, 0, 325, 161, 155, 154, 437, 0, 379, 360,
	201, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 523, 0,
	440, 556, 557, 558, 449, 454, 455, 456, 458, 459,
	460, 461, 524, 541, 508, 478, 442, 532, 475, 479,
	480, 544, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 416, 291, 356, 546, 579, 471, 0, 533,
	472, 481, 283, 505, 517, 516, 352, 432, 192, 528,
	531, 462, 202, 0, 525, 540, 498, 539, 203, 362,
	0, 383, 537, 484, 0, 529, 503, 0, 530, 499,
	534, 0, 473, 0, 390, 414, 426, 443, 446, 474,
	559, 560, 561, 258, 445, 563, 564, 565, 566, 567,
	568, 569, 562, 417, 506, 483, 509, 425, 486, 485,
	0, 0, 520, 441, 521, 522, 346, 347, 348, 349,
	309, 547, 276, 444, 372, 113, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 512, 513, 510, 200, 0,
	570, 571, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 514, 451, 573,
	576, 574, 575, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 500, 527, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 554, 553, 552, 551,
	550, 549, 548, 0, 0, 497, 400, 285, 250, 281,
	282, 289, 371, 266, 404, 382, 0, 255, 477, 329,
	139, 370, 303, 542, 543, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 545,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 476, 204, 39, 190, 193, 195, 194, 0,
	49, 526, 538, 572, 5, 581, 582, 584, 586, 585,
	118, 205, 467, 468, 578, 358, 0, 482, 515, 504,
	587, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 328, 519, 501, 511, 502,
	487, 488, 489, 496, 308, 490, 491, 492, 463, 493,
	464, 494, 495, 0, 518, 469, 389, 342, 536, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1213, 0, 0, 196, 0, 0,
	719, 729, 0, 0, 271, 197, 465, 583, 466, 720,
	0, 721, 725, 728, 724, 722, 723, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 726, 0, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 727, 408, 436, 292,
	427, 0, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 452, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 0, 0,
	580, 0, 421, 0, 0, 0, 0, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 437, 0, 379, 360,
	600, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 523, 0,
	440, 601, 602, 603, 449, 454, 455, 456, 458, 459,
	460, 461, 524, 541, 508, 478, 442, 532, 475, 479,
	480, 544, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 597, 291, 356, 546, 579, 471, 0, 533,
	472, 481, 283, 505, 517, 516, 352, 432, 0, 528,
	531, 462, 596, 0, 525, 540, 599, 539, 593, 362,
	0, 383, 537, 484, 0, 529, 503, 0, 530, 499,
	534, 0, 473, 0, 390, 414, 426, 443, 446, 474,
	559, 560, 561, 258, 445, 563, 564, 565, 566, 567,
	568, 569, 562, 417, 506, 483, 509, 425, 486, 485,
	0, 0, 520, 441, 521, 522, 346, 347, 348, 349,
	309, 547, 276, 444, 372, 0, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 512, 513, 510, 604, 0,
	570, 571, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 514, 451, 573,
	576, 574, 575, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 500, 527, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 554, 553, 552, 551,
	550, 549, 548, 0, 0, 497, 400, 285, 250, 281,
	282, 289, 594, 591, 404, 595, 0, 255, 477, 329,
	0, 370, 303, 542, 543, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 545,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 476, 592, 0, 0, 0, 0, 0, 0,
	0, 526, 538, 572, 0, 581, 582, 584, 586, 585,
	0, 598, 467, 468, 578, 174, 51, 163, 138, 0,
	0, 0, 0, 0, 0, 358, 621, 482, 515, 504,
	587, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 328, 519, 501, 511, 502,
	487, 488, 489, 496, 308, 490, 491, 492, 463, 493,
	464, 494, 495, 0, 518, 469, 389, 342, 536, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 627,
	0, 0, 0, 0, 626, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 271, 197, 465, 583, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 0, 408, 436, 292,
	427, 0, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 452, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 625, 0, 577, 0, 0,
	580, 0, 421, 0, 0, 0, 0, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 437, 0, 379, 360,
	600, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 523, 0,
	440, 601, 602, 603, 449, 454, 455, 456, 458, 459,
	460, 461, 524, 541, 508, 478, 442, 532, 475, 479,
	480, 544, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 597, 291, 356, 546, 579, 471, 0, 533,
	472, 481, 283, 505, 517, 516, 352, 432, 0, 528,
	531, 462, 596, 0, 525, 540, 599, 539, 593, 362,
	0, 383, 537, 484, 0, 529, 503, 0, 530, 499,
	534, 0, 473, 0, 390, 414, 426, 443, 446, 474,
	559, 560, 561, 258, 445, 563, 564, 565, 566, 567,
	568, 569, 562, 417, 506, 483, 509, 425, 486, 485,
	0, 0, 520, 441, 521, 522, 346, 347, 348, 349,
	622, 624, 276, 444, 372, 635, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 512, 513, 510, 604, 0,
	570, 571, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 514, 451, 573,
	576, 574, 575, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 500, 527, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 554, 553, 552, 551,
	550, 549, 548, 0, 0, 497, 400, 285, 250, 281,
	282, 289, 594, 591, 404, 595, 0, 255, 477, 329,
	139, 370, 303, 542, 543, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 545,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 476, 592, 0, 0, 0, 0, 0, 0,
	0, 526, 538, 572, 0, 581, 582, 584, 586, 585,
	0, 598, 467, 468, 578, 358, 0, 482, 515, 504,
	587, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 328, 519, 501, 511, 502,
	487, 488, 489, 496, 308, 490, 491, 492, 463, 493,
	464, 494, 495, 0, 518, 469, 389, 342, 536, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 271, 197, 465, 583, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 2175,
	2178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 0, 408, 436, 292,
	427, 0, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 452, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 0, 0,
	580, 2179, 421, 0, 0, 0, 2174, 0, 2173, 393,
	2171, 2176, 325, 0, 0, 0, 437, 0, 379, 360,
	600, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 2177, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 523, 0,
	440, 601, 602, 603, 449, 454, 455, 456, 458, 459,
	460, 461, 524, 541, 508, 478, 442, 532, 475, 479,
	480, 544, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 597, 291, 356, 546, 579, 471, 0, 533,
	472, 481, 283, 505, 517, 516, 352, 432, 0, 528,
	531, 462, 596, 0, 525, 540, 599, 539, 593, 362,
	0, 383, 537, 484, 0, 529, 503, 0, 530, 499,
	534, 0, 473, 0, 390, 414, 426, 443, 446, 474,
	559, 560, 561, 258, 445, 563, 564, 565, 566, 567,
	568, 569, 562, 417, 506, 483, 509, 425, 486, 485,
	0, 0, 520, 441, 521, 522, 346, 347, 348, 349,
	309, 547, 276, 444, 372, 0, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 512, 513, 510, 604, 0,
	570, 571, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 514, 451, 573,
	576, 574, 575, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 500, 527, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 554, 553, 552, 551,
	550, 549, 548, 0, 0, 497, 400, 285, 250, 281,
	282, 289, 594, 591, 404, 595, 0, 255, 477, 329,
	0, 370, 303, 542, 543, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 545,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 476, 592, 0, 0, 0, 0, 0, 0,
	0, 526, 538, 572, 0, 581, 582, 584, 586, 585,
	0, 598, 467, 468, 578, 358, 0, 482, 515, 504,
	587, 470, 0, 1035, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 328, 519, 501, 511, 502,
	487, 488, 489, 496, 308, 490, 491, 492, 463, 493,
	464, 494, 495, 0, 518, 469, 389, 342, 536, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 271, 197, 465, 583, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1021, 0, 0, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 2324, 2327, 2328, 2329, 2330, 2331, 2332,
	0, 2337, 2333, 2334, 2335, 2336, 0, 2319, 2320, 2321,
	2322, 1019, 2303, 2325, 0, 2304, 354, 2305, 2306, 2307,
	2308, 2309, 2310, 2311, 2312, 2313, 2316, 2317, 2314, 2315,
	2323, 366, 332, 367, 315, 344, 343, 345, 1046, 1048,
	1050, 1052, 1055, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 0, 0,
	580, 0, 421, 0, 0, 0, 0, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 2318, 0, 379, 360,
	600, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 523, 0,
	440, 601, 602, 603, 449, 454, 455, 456, 458, 459,
	460, 461, 524, 541, 508, 478, 442, 532, 475, 479,
	480, 544, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 597, 291, 356, 546, 579, 471, 0, 533,
	472, 481, 283, 505, 517, 516, 352, 432, 0, 528,
	531, 462, 596, 0, 525, 540, 599, 539, 593, 362,
	0, 383, 537, 484, 0, 529, 503, 0, 530, 499,
	534, 0, 473, 0, 390, 414, 426, 443, 446, 474,
	559, 560, 561, 258, 445, 563, 564, 565, 566, 567,
	568, 569, 562, 417, 506, 483, 509, 425, 486, 485,
	0, 0, 520, 441, 521, 522, 346, 347, 348, 349,
	309, 547, 276, 444, 372, 0, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 512, 513, 510, 604, 0,
	570, 571, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 514, 451, 573,
	576, 574, 575, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 500, 527, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 554, 553, 552, 551,
	550, 549, 548, 0, 0, 497, 400, 285, 250, 281,
	282, 289, 594, 591, 404, 595, 0, 255, 2326, 329,
	0, 370, 303, 542, 543, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 545,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 476, 592, 0, 0, 0, 0, 0, 0,
	0, 526, 538, 572, 0, 581, 582, 584, 586, 585,
	0, 598, 467, 468, 578, 358, 0, 482, 515, 504,
	587, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 328, 519, 501, 511, 502,
	487, 488, 489, 496, 308, 490, 491, 492, 463, 493,
	464, 494, 495, 0, 518, 469, 389, 342, 536, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 271, 197, 465, 583, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	2196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 0, 408, 436, 292,
	427, 0, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 452, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 0, 0,
	580, 2195, 421, 0, 0, 0, 2201, 2198, 2200, 393,
	0, 2199, 325, 0, 0, 0, 437, 0, 379, 360,
	600, 0, 2193, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 523, 0,
	440, 601, 602, 603, 449, 454, 455, 456, 458, 459,
	460, 461, 524, 541, 508, 478, 442, 532, 475, 479,
	480, 544, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 597, 291, 356, 546, 579, 471, 0, 533,
	472, 481, 283, 505, 517, 516, 352, 432, 0, 528,
	531, 462, 596, 0, 525, 540, 599, 539, 593, 362,
	0, 383, 537, 484, 0, 529, 503, 0, 530, 499,
	534, 0, 473, 0, 390, 414, 426, 443, 446, 474,
	559, 560, 561, 258, 445, 563, 564, 565, 566, 567,
	568, 569, 562, 417, 506, 483, 509, 425, 486, 485,
	0, 0, 520, 441, 521, 522, 346, 347, 348, 349,
	309, 547, 276, 444, 372, 0, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 512, 513, 510, 604, 0,
	570, 571, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 514, 451, 573,
	576, 574, 575, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 500, 527, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 554, 553, 552, 551,
	550, 549, 548, 0, 0, 497, 400, 285, 250, 281,
	282, 289, 594, 591, 404, 595, 0, 255, 477, 329,
	0, 370, 303, 542, 543, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 545,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 476, 592, 0, 0, 0, 0, 0, 0,
	0, 526, 538, 572, 0, 581, 582, 584, 586, 585,
	0, 598, 467, 468, 578, 358, 0, 482, 515, 504,
	587, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 328, 519, 501, 511, 502,
	487, 488, 489, 496, 308, 490, 491, 492, 463, 493,
	464, 494, 495, 0, 518, 469, 389, 342, 536, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 271, 197, 465, 583, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	2196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 0, 408, 436, 292,
	427, 0, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 452, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 0, 0,
	580, 2195, 421, 0, 0, 0, 2201, 2198, 2200, 393,
	0, 2199, 325, 0, 0, 0, 437, 0, 379, 360,
	600, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 523, 0,
	440, 601, 602, 603, 449, 454, 455, 456, 458, 459,
	460, 461, 524, 541, 508, 478, 442, 532, 475, 479,
	480, 544, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 597, 291, 356, 546, 579, 471, 0, 533,
	472, 481, 283, 505, 517, 516, 352, 432, 0, 528,
	531, 462, 596, 0, 525, 540, 599, 539, 593, 362,
	0, 383, 537, 484, 0, 529, 503, 0, 530, 499,
	534, 0, 473, 0, 390, 414, 426, 443, 446, 474,
	559, 560, 561, 258, 445, 563, 564, 565, 566, 567,
	568, 569, 562, 417, 506, 483, 509, 425, 486, 485,
	0, 0, 520, 441, 521, 522, 346, 347, 348, 349,
	309, 547, 276, 444, 372, 0, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 512, 513, 510, 604, 0,
	570, 571, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 514, 451, 573,
	576, 574, 575, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 500, 527, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 554, 553, 552, 551,
	550, 549, 548, 0, 0, 497, 400, 285, 250, 281,
	282, 289, 594, 591, 404, 595, 0, 255, 477, 329,
	0, 370, 303, 542, 543, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 545,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 476, 592, 0, 0, 0, 0, 0, 0,
	0, 526, 538, 572, 0, 581, 582, 584, 586, 585,
	0, 598, 467, 468, 578, 358, 0, 482, 515, 504,
	587, 470, 0, 0, 0, 0, 0, 1924, 0, 0,
	0, 0, 298, 0, 0, 328, 519, 501, 511, 502,
	487, 488, 489, 496, 308, 490, 491, 492, 463, 493,
	464, 494, 495, 0, 518, 469, 389, 342, 536, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	1925, 0, 0, 0, 271, 197, 465, 583, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 1145, 1146, 1147, 1144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 0, 408, 436, 292,
	427, 0, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 452, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 0, 0,
	580, 0, 421, 0, 0, 0, 0, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 437, 0, 379, 360,
	600, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 523, 0,
	440, 601, 602, 603, 449, 454, 455, 456, 458, 459,
	460, 461, 524, 541, 508, 478, 442, 532, 475, 479,
	480, 544, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 597, 291, 356, 546, 579, 471, 0, 533,
	472, 481, 283, 505, 517, 516, 352, 432, 0, 528,
	531, 462, 596, 0, 525, 540, 599, 539, 593, 362,
	0, 383, 537, 484, 0, 529, 503, 0, 530, 499,
	534, 0, 473, 0, 390, 414, 426, 443, 446, 474,
	559, 560, 561, 258, 445, 563, 564, 565, 566, 567,
	568, 569, 562, 417, 506, 483, 509, 425, 486, 485,
	0, 0, 520, 441, 521, 522, 346, 347, 348, 349,
	309, 547, 276, 444, 372, 0, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 512, 513, 510, 604, 0,
	570, 571, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 514, 451, 573,
	576, 574, 575, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 500, 527, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 554, 553, 552, 551,
	550, 549, 548, 0, 0, 497, 400, 285, 250, 281,
	282, 289, 594, 591, 404, 595, 0, 255, 477, 329,
	0, 370, 303, 542, 543, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 545,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 476, 592, 0, 0, 0, 0, 0, 0,
	0, 526, 538, 572, 0, 581, 582, 584, 586, 585,
	174, 598, 467, 468, 578, 0, 0, 0, 0, 0,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 115, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 168,
	1968, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 139, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 174, 598, 467, 468, 578,
	0, 0, 0, 0, 0, 358, 0, 482, 515, 504,
	587, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 328, 519, 501, 511, 502,
	487, 488, 489, 496, 308, 490, 491, 492, 463, 493,
	464, 494, 495, 115, 518, 469, 389, 342, 536, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 168, 1959, 0, 196, 0, 0,
	0, 0, 0, 0, 271, 197, 465, 583, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 0, 408, 436, 292,
	427, 0, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 452, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 0, 0,
	580, 0, 421, 0, 0, 0, 0, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 437, 0, 379, 360,
	600, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 523, 0,
	440, 601, 602, 603, 449, 454, 455, 456, 458, 459,
	460, 461, 524, 541, 508, 478, 442, 532, 475, 479,
	480, 544, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 597, 291, 356, 546, 579, 471, 0, 533,
	472, 481, 283, 505, 517, 516, 352, 432, 0, 528,
	531, 462, 596, 0, 525, 540, 599, 539, 593, 362,
	0, 383, 537, 484, 0, 529, 503, 0, 530, 499,
	534, 0, 473, 0, 390, 414, 426, 443, 446, 474,
	559, 560, 561, 258, 445, 563, 564, 565, 566, 567,
	568, 569, 562, 417, 506, 483, 509, 425, 486, 485,
	0, 0, 520, 441, 521, 522, 346, 347, 348, 349,
	309, 547, 276, 444, 372, 0, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 512, 513, 510, 604, 0,
	570, 571, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 514, 451, 573,
	576, 574, 575, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 500, 527, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 554, 553, 552, 551,
	550, 549, 548, 0, 0, 497, 400, 285, 250, 281,
	282, 289, 594, 591, 404, 595, 0, 255, 477, 329,
	139, 370, 303, 542, 543, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 545,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 476, 592, 0, 0, 0, 0, 0, 0,
	0, 526, 538, 572, 0, 581, 582, 584, 586, 585,
	0, 598, 467, 468, 578, 358, 0, 482, 515, 504,
	587, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 952, 0, 328, 519, 501, 511, 502,
	487, 488, 489, 496, 308, 490, 491, 492, 463, 493,
	464, 494, 495, 0, 518, 469, 389, 342, 536, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 959, 960,
	0, 0, 0, 0, 271, 197, 465, 583, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 394, 947, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 0, 408, 436, 292,
	427, 937, 419, 265, 936, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 452, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 0, 0,
	580, 0, 421, 0, 0, 0, 0, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 437, 0, 379, 360,
	600, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	950, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 523, 0,
	440, 601, 602, 603, 449, 454, 455, 456, 458, 459,
	460, 461, 524, 541, 508, 478, 442, 532, 475, 479,
	480, 544, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 597, 291, 356, 546, 579, 471, 0, 533,
	472, 481, 283, 505, 517, 516, 352, 432, 0, 528,
	531, 462, 596, 0, 525, 540, 599, 539, 593, 362,
	0, 383, 537, 484, 0, 529, 503, 0, 530, 499,
	534, 0, 473, 0, 390, 414, 426, 443, 446, 474,
	559, 560, 561, 258, 445, 563, 564, 565, 566, 567,
	568, 951, 562, 417, 506, 483, 509, 425, 486, 485,
	0, 0, 520, 954, 521, 522, 346, 347, 348, 349,
	309, 547, 276, 444, 372, 0, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 512, 513, 510, 604, 0,
	570, 571, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 514, 451, 573,
	576, 574, 575, 961, 948, 957, 949, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 958, 500, 527, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 554, 553, 552, 551,
	550, 549, 548, 0, 0, 497, 400, 285, 250, 281,
	282, 289, 594, 591, 404, 595, 0, 255, 477, 329,
	0, 370, 303, 542, 543, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 545,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 476, 592, 0, 0, 0, 0, 0, 0,
	0, 526, 538, 572, 0, 581, 582, 584, 586, 585,
	174, 598, 467, 468, 578, 0, 0, 0, 0, 0,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 115, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1858,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 139, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 959, 960, 0, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 937, 419, 265, 936,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 961, 1877,
	957, 1878, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 958, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 2671,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 2674, 0,
	0, 2673, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 1401, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 1399, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1397, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 1395, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 1399, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1397, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3582, 0, 196, 781, 0, 0, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 1399, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1397, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 1399, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3243, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 2267, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 2269, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 2288, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 1399, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 781, 0, 0, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3601,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 3387, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 3512, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3239,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3402, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 3326, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 2885, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2901,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1858,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2998,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 2854, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2767,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 1399, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 2269, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 2596,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1988,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 0, 598, 467, 468, 578,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 0, 518,
	469, 389, 342, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 2344, 0, 0, 0, 271,
	197, 465, 583, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 580, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 600, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 291, 356,
	546, 579, 471, 0, 533, 472, 481, 283, 505, 517,
	516, 352, 432, 0, 528, 531, 462, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 417, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 441, 521,
	522, 346, 347, 348, 349, 309, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 545, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 585, 2133, 598, 467, 468, 578,
	0, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 358, 0, 482, 515, 504, 587, 470, 0, 1845,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 1399, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 1751, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 0, 421, 0,
	0, 1429, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 619, 580, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 891,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 609, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 1379, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 1377, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 684, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 643, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 644, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	663, 662, 669, 659, 0, 0, 245, 0, 0, 0,
	0, 0, 666, 667, 0, 668, 672, 0, 0, 654,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 677,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 655, 657, 656, 0,
	0, 0, 0, 0, 0, 0, 661, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 665, 0,
	0, 0, 0, 0, 0, 680, 0, 0, 0, 0,
	0, 0, 658, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 660, 664, 670, 0, 671, 673, 0, 0, 674,
	675, 676, 0, 0, 678, 679,
}

var yyPact = [...]int{
	296, -1000, -1000, -1000, -329, 13952, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42178,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42178,
	-322, 41578, 41578, -1000, -1000, 2357, -1000, 40378, 15162, 42178,
	373, 372, 42178, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 780, -1000, 44578, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 638, 4995, 43978, 10926, -246, -1000, 1329, -60, 2274,
	943, 949, 1002, 1002, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 4579, 813, 40978,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3364, 328, 813, 19972, 57, 56, 1329, 404, -118,
	-116, -132, 734, -1000, 1052, 282, 171, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10926, 10926,
	13952, -360, 13952, 10926, 42178, 42178, -1000, -1000, -1000, -1000,
	-322, 40378, 638, 4995, 10926, 2274, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -116, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -118, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -132, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 56, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4364, -1000,
	1474, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2774, 1473, 2265, 577, 42178,
	-1000, 1472, 577, -1000, -1000, -1000, 1329, 3183, -1000, 42178,
	42178, 127, 1628, -1000, 385, 353, 367, 256, 1470, -1000,
	-1000, -1000, -1000, -1000, -1000, 476, 3136, -1000, 42178, 42178,
	2800, 42178, -1000, 2110, 510, 3828, 2984, 1372, 783, 2843,
	-1000, -1000, 2773, -1000, 266, 196, 321, 466, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 258, -1000, 3058, -1000, -1000,
	242, -1000, -1000, 224, -1000, -1000, -1000, 55, -1000, -1000,
	-1000, -1000, -1000, -1000, -58, -1000, -1000, 970, 1724, 10926,
	1674, -1000, 2768, -1000, -1000, -1000, -1000, 6693, 12738, 12738,
	12738, 12738, -1000, -1000, 2579, 10926, 2771, 2770, 2769, 2767,
	-1000, -1000, -1000, -1000, -1000, -1000, 1467, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1787, -1000, -1000, -1000,
	13342, -1000, 2766, 2763, 2757, 2756, 2753, 2752, 2751, 2750,
	2749, 2748, 2735, 2733, 2721, 2720, 2476, 14552, 2719, 2264,
	2262, 2716, 2715, 2713, 2261, 2476, 2476, 2712, 2708, 2707,
	2706, 2694, 2679, 2678, 2666, 2665, 2664, 2649, 2648, 2647,
	2646, 2643, 2641, 2640, 2639, 2637, 2632, 2619, 2613, 2611,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1174, -1000, 2608, 3151, 2542, -1000, 3042,
	3027, 3025, 3022, -287, 2594, 1994, -1000, -1000, 82, -1000,
	-114, -1000, -1000, 930, -1000, 904, -1000, 42178, 42178, 174,
	761, 635, 635, 635, 635, 635, 741, 635, 3070, 779,
	773, 763, 758, 635, -77, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1627, 1622, 2869, 882, -1000, -1000, -1000, -1000,
	1283, 42178, -1000, 2534, 1529, 1529, 3068, 531, 527, 524,
	1529, 414, -1000, 1642, 1642, 1642, 1642, 1529, 409, 558,
	3073, 3073, 43, 1642, 47, 1529, 1529, 47, 1529, 1529,
	1645, 197, -297, -1000, -1000, -1000, -1000, 1642, 1642, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3053, 3052, 638, 638,
	42178, 172, 42178, 638, 638, 638, 676, -16, 43378, 42778,
	2110, 494, 492, 1293, 1689, -1000, 1534, 42178, 42178, 1534,
	1534, 22977, 22377, -1000, 42178, -1000, 3151, 2542, 2463, 1195,
	2458, 2542, -126, -129, -130, 638, 638, 638, 638, 638,
	211, 638, 638, 638, 638, 638, 42178, 42178, 39778, 638,
	638, 9109, 9109, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 13952, 2037, 1934, 169, -41, -321, 244, -1000,
	-1000, 42178, 2944, 202, -1000, -1000, -1000, 2483, -1000, 2525,
	2525, 2525, 2525, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2525, 2525, 2532, 2591, -1000, -1000, 2523, 2523,
	2523, 2483, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2527, 2527, 2531,
	2531, 2527, 42178, 10926, 42178, 2964, 392, 2590, -1000, 42178,
	381, 3151, 2962, 3073, 3112, -1000, -1000, 1464, 1993, 2260,
	-1000, 256, -1000, 369, 256, 1523, -1000, 955, -1000, -1000,
	-1000, -1000, -1000, 42178, -58, 394, -1000, -1000, 2258, 2588,
	-1000, 556, 1222, 1286, -1000, 279, 45057, 34377, 2110, 34377,
	42178, -1000, -1000, -1000, -1000, -1000, -1000, 53, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 246, -1000, 10926, 10926, 10926, 10926, 10926, -1000, 653,
	12134, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12738, 12738,
	12738, 12738, 12738, 12738, 12738, 12738, 12738, 12738, 12738, 12738,
	2575, 1603, 12738, 12738, 12738, 12738, 1195, 2871, 1287, 270,
	-1000, -1000, -1000, -1000, -1000, 1661, 1724, 10926, 10926, 10926,
	10926, 42178, -1000, -1000, 3820, 10926, 10926, 4404, 10926, 3018,
	10926, 10926, 10926, 2457, 5479, 42178, 10926, -1000, 2456, 2443,
	-1000, -1000, 1841, 10926, -1000, -1000, 10926, -1000, -1000, 10926,
	12738, 10926, -1000, -1000, -1000, 1251, 3018, 3018, 3018, 1607,
	10926, 10926, 3018, 3018, 3018, 1604, 3018, 3018, 3018, 3018,
	3018, 3018, 3018, 3018, 2434, 2429, 2427, 10322, 3073, -246,
	-1000, 8505, 2962, 3073, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -292, 2586, 42178, 2259, 2251, -342,
	-8, 935, 887, 915, -1000, 3014, -1000, 2584, 42178, 635,
	635, 635, -1000, 42178, 1696, 34377, 42178, 42178, 2110, 42178,
	42178, 42178, 635, 635, 635, 635, 42178, -1000, 2917, 34377,
	2889, 676, -1000, 42178, 1283, 3012, 42178, 3119, 12738, 12738,
	-1000, 39178, 1642, 1529, 1529, -1000, -1000, 42178, -1000, -1000,
	-1000, 1642, 42178, 1642, 1642, 3119, 1642, -1000, -1000, -1000,
	1529, 1529, -1000, -1000, 10926, -1000, -1000, 1642, 1642, -1000,
	-1000, 3119, 42178, 51, 3119, 3119, 20, -1000, -1000, -1000,
	1529, 42178, 42178, 635, 42178, -1000, 42178, 42178, -1000, -1000,
	42178, 42178, 3709, 42178, 38578, 3051, -1000, 34377, 42178, 42178,
	31977, -1000, 1196, -1000, -31, -1000, -10, -16, 1534, -16,
	1534, -1000, 555, 548, 21177, 489, 34377, 6083, -1000, -1000,
	1534, 1534, 6083, 6083, 1479, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1279, -1000, 212, 3073, -1000, -1000, -1000, -1000,
	-1000, 1992, 1991, 1989, 42178, 42178, 34377, 2110, 42178, 638,
	42178, 42178, 42178, 42178, 42178, -1000, 2580, 1463, -1000, 2982,
	42178, 42178, 1177, -1000, -1000, 18162, 1428, 1177, -1000, 1710,
	-1000, 10926, 13952, -267, 10926, 13952, 13952, 10926, 13952, -1000,
	10926, 199, -1000, -1000, -1000, -1000, 1987, -1000, 1957, -1000,
	-1000, -1000, -1000, -1000, 2247, 2247, -1000, 1954, -1000, -1000,
	-1000, -1000, 1951, -1000, -1000, 1950, -1000, -1000, -1000, 2420,
	970, -1000, 2243, 2842, -247, -1000, 19372, 42178, 42178, -1000,
	-1000, -247, -1000, 18767, 42178, 3073, -1000, -252, 2962, 10926,
	42178, -1000, 3065, -1000, -1000, 256, -1000, 374, 322, -1000,
	-1000, -1000, -1000, -1000, -1000, 1420, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1274, -1000, 42178, -1000, -1000,
	279, 34377, 36177, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	231, -1000, -1000, 176, -1000, 720, 179, 1521, -1000, -1000,
	178, 184, 132, 829, 1724, -1000, 1680, 1680, 1706, -1000,
	661, -1000, -1000, -1000, -1000, 2579, -1000, -1000, -1000, 2612,
	1883, -1000, 1641, 1641, 1488, 1488, 1488, 1488, 1488, 1560,
	1560, -1000, -1000, -1000, 6693, 2575, 12738, 12738, 12738, 12738,
	605, 605, 2598, 3885, -1000, 10926, 1700, -1000, 10926, 2418,
	1468, 2320, 1300, 1415, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2414, 2409, 2125, 3135, 2407, 10926,
	-1000, -1000, 1520, 1515, 1510, -1000, 2021, 9718, -1000, -1000,
	-1000, 2405, 1357, 2398, -1000, -1000, -1000, 2397, 1503, 1036,
	2395, 2178, 2394, 1236, 10926, 10926, 10926, 10926, 2392, 1501,
	1498, 10926, 10926, 10926, 10926, 2391, 10926, 10926, 10926, 10926,
	10926, 10926, 10926, 10926, 75, 75, 75, 1212, 1205, -1000,
	-1000, 1492, -1000, 1724, -1000, -1000, 2962, -1000, 2574, 1943,
	1204, -1000, -1000, -320, 2187, -1000, -1000, 926, 901, 907,
	42178, 1033, 2569, 42178, 42178, 42178, 194, -1000, 2972, 1127,
	-1000, 179, -69, 379, 980, 2798, 3128, -145, 42178, 42178,
	42178, 42178, 3010, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 37978, -1000, 2568, 1490, -1000, -1000, 10926, -1000, -1000,
	2794, 42178, 42178, 3119, 3119, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1642, 3119, 3119, 1456, 1529, 1642, -1000, -1000,
	1642, -1000, -1000, 1642, -1000, -1000, 1346, -1000, 42178, -1000,
	-1000, -1000, 3005, 2534, 1201, -1000, -1000, -1000, 3111, 844,
	566, 566, 832, 477, 3106, 16962, -1000, 1549, 937, 716,
	2920, 261, -1000, 1549, -192, 587, 1549, 1549, 1549, 1549,
	1549, 1549, 1549, 458, 454, 1549, 1549, 1549, 1549, 1549,
	1549, 1549, 1549, 1549, 1549, 1549, 947, 1549, 1549, 1549,
	1549, 1549, -1000, 1549, 2567, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 516, 188, 3050, 301, 299, 1127, 3049, 314,
	2994, 1153, -1000, -1000, -1000, -1000, 25377, 25377, 20577, 25377,
	-1000, 1528, -16, 13, -1000, -1000, 1196, 6083, 1196, 6083,
	-1000, -1000, 704, -1000, -1000, 980, -1000, 42178, 42178, -1000,
	-1000, 2566, 1617, -1000, -1000, 14552, -1000, 6083, 6083, -1000,
	-1000, 25977, 42178, -1000, -63, -1000, -51, 2962, -1000, -1000,
	-1000, 1190, -1000, -1000, 1194, 980, 2839, 42178, 1190, 1190,
	1190, -1000, -1000, 16362, 42178, 42178, -1000, -1000, 3119, 9109,
	-1000, 31977, -1000, -1000, 37377, -1000, 36777, 3119, 1653, -1000,
	13952, 1861, 164, -1000, 220, -324, 161, 1741, 160, 1724,
	-1000, -1000, 2390, 2389, 1487, -1000, 1478, 2388, 1476, 1475,
	-1000, 18, -1000, 2948, 998, -1000, 2565, -1000, 1442, 2879,
	-1000, 1184, -1000, 1602, 1435, -1000, 998, 1433, 2878, 1184,
	2962, 2241, -1000, 1178, -1000, 2138, 1342, 126, -1000, -1000,
	-1000, 42178, 2258, 1407, 36177, 1050, -1000, 703, 1339, 1338,
	-1000, 34377, 253, 34377, -1000, 34377, -1000, -1000, 358, -1000,
	42178, 2961, -1000, -1000, -1000, 2187, 1600, -345, 42178, -1000,
	-1000, -1000, -1000, -1000, 1398, -1000, 605, 605, 2598, 3735,
	-1000, 12738, -1000, 12738, 2847, 1635, -1000, 10926, 1851, 4273,
	10926, 4273, 826, 24177, 42178, -1000, -1000, 10926, 10926, -1000,
	2779, -1000, -1000, -1000, -1000, 10926, 10926, 2111, -1000, 42178,
	-1000, -1000, -1000, -1000, 24177, -1000, 12738, -1000, 10926, 1169,
	1169, 2775, 1387, 75, 75, 75, 2761, 2731, 2717, 1386,
	75, 2710, 2701, 2606, 2576, 2488, 2481, 2442, 2426, -1000,
	2563, -1000, -1000, 1783, 11530, 8505, -1000, -1000, 259, 1176,
	1942, 2239, 121, -1000, 1598, -1000, -1000, -1000, 889, 213,
	2377, 1175, -1000, -1000, 42178, -1000, -1000, -1000, 16362, 2534,
	2561, 2534, 94, 1549, -1000, 576, 34377, 490, -1000, 42178,
	1853, 1597, 2837, 700, 2943, 42178, 2560, 2558, 2557, 2552,
	3004, 364, 4426, 42178, 1156, -1000, 1337, 282, -1000, 42178,
	1724, -1000, 2110, -1000, 1529, -1000, -1000, 3119, -1000, -1000,
	10926, 10926, 3119, 1529, 1529, 1642, 42178, -1000, 364, 4426,
	2997, 3992, 530, 2184, -1000, 42178, -1000, -1000, -1000, 827,
	-1000, 878, 635, 42178, 1748, 878, 1747, 2536, -1000, -1000,
	42178, 42178, 42178, 42178, -1000, -1000, 42178, -1000, 42178, 42178,
	42178, 42178, 42178, 35577, -1000, 42178, 42178, -1000, 42178, 1746,
	42178, 1740, 2988, -1000, 1549, 1549, 856, -1000, -1000, 544,
	-1000, 35577, 1939, 1936, 1935, 1921, 2238, 2222, 2217, 1549,
	1549, 1920, 2209, 34977, 2203, 1098, 1915, 1906, 1903, 1909,
	2198, 1105, -1000, 2197, 1905, 1896, 1889, 42178, 2535, 2128,
	-1000, -1000, 94, 1549, 293, 42178, 1596, 576, 377, 2005,
	21777, 42178, 31977, 31977, 31977, 31977, -1000, 2857, 2782, -1000,
	2858, 2856, 2867, 42178, 31977, 2534, -1000, 34977, -1000, -1000,
	-1000, 1195, 1385, 2942, 951, 10926, -1000, -1000, -45, -34,
	-1000, -1000, -1000, 34377, 2193, 489, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3063, 42178, 42178, 630, 2376, 1162, -1000,
	-1000, -1000, 4426, 2525, 2525, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2525, 2525, 2532, -1000, -1000, 2523,
	2523, 2523, 2483, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2527, 2527, 2531, 2531, 2527, -1000, -1000,
	3078, -1000, 1144, -1000, -1000, 1330, -1000, 3078, 1665, -331,
	13952, 1658, 1606, -1000, 10926, 13952, 10926, -268, 269, -271,
	-1000, -1000, -1000, 2192, -1000, -1000, -1000, 1901, -1000, 1900,
	100, 138, 1738, -247, 8505, 378, 42178, -247, 42178, 8505,
	-1000, 42178, 368, -247, 3063, 18, 10926, 2897, -1000, -1000,
	42178, 1884, -1000, -1000, -1000, 3125, 34377, 2110, 1506, 33777,
	-1000, 237, -1000, 221, 536, 2191, -1000, 754, 120, 2189,
	2187, -1000, -1000, -1000, -1000, 12738, -1000, -1000, -1000, -1000,
	1724, 10926, 2375, -1000, 886, 886, 1878, 2373, 2352, -1000,
	2525, 2525, -1000, 2483, 2523, 2483, 886, 886, 2351, -1000,
	2052, 2396, -1000, 2354, 2340, 10926, -1000, 2344, 3626, 1290,
	-81, -221, 75, 75, -1000, -1000, -1000, -1000, 75, 75,
	75, 75, -1000, 75, 75, 75, 75, 75, 75, 75,
	75, 586, -135, -301, -136, -308, -1000, 2342, 1083, -1000,
	-1000, -1000, -1000, -1000, 4404, 1060, -1000, -1000, 2187, 2186,
	-1000, 2183, 2179, 1033, 4426, 2341, 2996, 15762, 2995, 2006,
	-1000, -1000, -1000, 33177, 498, -1000, -1000, -1000, 608, 275,
	1881, 509, -1000, 42178, 314, 2909, 1594, 2175, 42178, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2943, -1000, 875, 342,
	30777, 15762, 15762, 15762, 349, 346, 1631, -1000, 577, 1108,
	1317, 31977, 42178, -1000, 31377, 2339, -1000, 980, 3119, -1000,
	1724, 1724, -1000, 3119, 3119, 1529, -1000, 346, -1000, 349,
	-1000, 1025, 17562, 399, 415, 384, -1000, 559, -1000, -1000,
	570, 2919, 4426, -1000, 42178, -1000, 42178, -1000, 42178, 42178,
	635, 10926, 2919, 42178, 699, -1000, -1000, 1000, 343, 327,
	627, 627, 1059, -1000, 2952, -1000, -1000, 1057, -1000, -1000,
	-1000, -1000, 42178, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	24177, 24177, 3045, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2174, 2169, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 42178, 1383, -1000,
	1589, 2006, 33177, 1586, 1534, 2157, 498, 1853, 1574, -1000,
	2145, -1000, 1021, 42178, 42178, -1000, 1161, -1000, 1573, 2797,
	2815, 2797, -1000, -1000, -1000, -1000, 2724, -1000, 2502, -1000,
	-1000, 1161, -1000, -1000, -1000, -1000, -1000, 951, -1000, 3062,
	878, 878, 878, 2338, -1000, -1000, -1000, 1050, 2334, -1000,
	-1000, -1000, 3145, -1000, -1000, -1000, -1000, -1000, -1000, 16362,
	2934, 3116, 3104, 32577, 3116, -1000, -331, 1634, -1000, 1824,
	158, 1704, 42178, -1000, -1000, -1000, 2333, 2325, -254, 123,
	3103, 3101, 861, -1000, 2324, 1044, -247, -1000, -1000, 998,
	-1000, -1000, -1000, -247, -1000, 998, -1000, 100, -1000, -1000,
	2932, -1000, -1000, 2110, -1000, 216, -1000, -1000, -1000, -1000,
	-1000, -1000, 157, -1000, 42178, -1000, 1028, 119, -1000, 1724,
	-1000, -1000, -1000, -1000, -1000, 4273, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10926, -1000, -1000,
	-1000, 2335, -1000, -1000, 10926, 2322, 2142, 2319, 2140, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3151, -1000, 3097, 1376, 2318, 2309, 1367,
	2306, 2305, -1000, 10926, 2301, 4404, -1000, -1000, -1000, -1000,
	-1000, -1000, 787, 349, 2300, 1026, -1000, -1000, -1000, -1000,
	349, -1000, 2139, 167, -1000, -1000, -1000, 2131, 2129, 1869,
	-1000, -1000, 1880, 1301, 180, -1000, -1000, -1000, -1000, -1000,
	-1000, 2005, 1866, 1567, -357, -1000, 2522, -1000, 1549, 1549,
	1549, 42178, 1350, -1000, 1549, 1549, 2298, 2297, 2295, -146,
	545, 1554, 1553, -1000, 1868, 25377, 31977, 31377, 1113, -1000,
	1311, -1000, -1000, -1000, -1000, -1000, 3119, 545, -1000, 395,
	1867, 12738, 2520, 12738, 2519, 412, 2513, 1347, -1000, 42178,
	-1000, -1000, 42178, 3568, 2512, -1000, 2507, 2789, 383, 2505,
	2504, 42178, 2331, -1000, 2919, 42178, 647, 2927, -1000, -1000,
	-1000, 319, -1000, -1000, 417, -1000, 42178, -1000, 42178, -1000,
	1439, -1000, 24177, -1000, -1000, 1343, -1000, 2128, 2123, -1000,
	167, 2117, 6083, -1000, -1000, 2909, 2114, -1000, 42178, 1021,
	1021, 3151, 42178, 8505, -1000, -1000, 10926, 2503, -1000, 10926,
	-1000, -1000, -1000, -1000, -1000, 2501, 2941, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1659, -1000, 10926, 10926, -1000, -1000,
	623, 13952, -278, 265, -1000, -1000, -1000, -256, 2100, -1000,
	-1000, 3096, 2098, 2035, 42178, -1000, -1000, 998, 998, -254,
	-1000, -1000, 980, -1000, -1000, 20, 473, -1000, 2292, 2249,
	-1000, 2190, 75, -1000, 75, -1000, 201, 10926, -1000, 2097,
	-1000, -1000, -1000, 2092, -1000, -1000, 2149, -1000, 2284, 4426,
	-163, -146, 15762, -163, -1000, -1000, 344, -1000, -1000, 308,
	-1000, -1000, 1877, 542, -1000, -1000, -1000, 1566, 1770, 2056,
	28977, 24177, 24777, 2091, -1000, -1000, 30777, 1659, 1659, 4848,
	246, 4848, -1000, 2496, 956, 1552, -1000, 1860, -1000, 1858,
	-1000, 3119, 1113, 1311, -1000, -1000, 1502, -1000, 956, 2184,
	3094, -1000, 3123, 42178, 3076, 42178, 2494, 1565, 12738, -1000,
	570, 2873, -1000, -1000, 3568, -1000, -1000, 1765, 12738, -1000,
	-1000, 2085, 24777, 702, 1564, 1561, 712, 2491, -1000, 422,
	3141, -1000, -1000, -1000, 834, 2490, -1000, 1737, 1731, -1000,
	42178, -1000, 28977, 28977, 437, 437, 28977, 28977, 2485, 627,
	-1000, -1000, 12738, -1000, -1000, 1549, -1000, -1000, -1000, 1549,
	1354, -1000, -1000, -1000, -1000, -1000, -1000, 1866, -1000, -1000,
	3073, -1000, -1000, 1724, 42178, 1724, 30177, -1000, 3092, 3091,
	-1000, 1724, 970, -1000, -331, 42178, 42178, -258, 1854, -1000,
	2082, 114, -1000, -1000, 979, -256, -261, 89, 134, 1558,
	-1000, -1000, -1000, -1000, -1000, 2283, -1000, 529, -1000, -1000,
	-1000, 970, 2282, 2281, -1000, -1000, -142, -1000, -1000, 365,
	-1000, -1000, -1000, 521, 2079, -1000, -1000, 306, -1000, -1000,
	2077, -1000, -1000, 116, -1000, 1557, 1331, -1000, 2483, 10926,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 546, 4778,
	-1000, 937, -1000, 20, 546, 27777, 551, 263, -1000, 1848,
	-1000, -1000, 3151, -1000, 550, -1000, 396, -1000, 1325, -1000,
	1323, 29577, 1846, 2627, -1000, 4718, 677, -1000, -1000, 2598,
	-1000, -1000, -1000, -1000, -1000, -1000, 2072, 2071, -1000, -1000,
	-1000, -1000, -1000, 1842, 2480, -2, 3039, 2068, -1000, -1000,
	2479, 1280, 1263, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1258, 1243, 28977, -1000, -1000, 2598, 1835, 24177,
	1549, -1000, -1000, 1223, 1211, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2478, -1000, -1000, 3090, -258, -1000, 2064, 667,
	106, 134, -1000, 3087, 113, 3086, 3084, 2063, -1000, -1000,
	615, -249, 70, 66, 62, -1000, -1000, -1000, 10926, -1000,
	-1000, 42178, 421, -1000, -1000, -1000, 154, -1000, -1000, -1000,
	-1000, 2056, 2041, -1000, 28977, 2952, 2130, 387, 3081, 4848,
	-1000, 1549, -1000, 387, 1141, -1000, 1549, 1549, -1000, 362,
	-1000, 1525, -1000, 1832, -1000, 3073, -1000, 359, -1000, 389,
	-1000, -1000, -1000, 1134, -1000, -1000, -1000, 4718, 397, -1000,
	537, 2477, -1000, -1000, 2254, 10926, 2476, 1549, 2143, -138,
	28977, 2787, 2783, 2614, 2600, 1126, -1000, -1000, 24177, -1000,
	-1000, 28377, 42178, 2035, -1000, -1000, 2474, 1831, 123, 110,
	3080, -1000, 2035, 3077, 2035, 2035, 965, 1698, -1000, 88,
	83, 72, -1000, -1000, -1000, -1000, 493, -1000, 236, -1000,
	-1000, -1000, 267, -1000, -1000, 2952, -1000, 3075, 530, -1000,
	24177, -1000, -1000, 27777, 1659, 1659, -1000, -1000, 1829, -1000,
	-1000, -1000, -1000, 1822, -1000, -1000, -1000, 1125, -1000, 42178,
	740, 7901, -1000, 2004, -1000, 42178, -1000, 2814, -1000, 182,
	1117, 267, 437, 267, 437, 267, 437, 267, 437, 230,
	-1000, -1000, -1000, 1081, -1000, -1000, 3036, 23577, 97, -1000,
	-1000, -1000, 2036, -1000, 2035, -1000, -1000, -1000, 79, 615,
	-1000, -1000, -1000, 2034, -1000, -1000, -1000, -1000, 1549, 1549,
	2031, 2030, 335, -1000, -1000, -1000, 27177, 399, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 397, 4848, -1000, 7901, 1072,
	-1000, 1724, -1000, 627, -1000, -1000, 2813, 2780, 3124, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42178,
	-1000, 42178, -1000, 1068, -1000, -1000, -1000, 1306, -1000, -1000,
	-1000, -1000, 1548, -1000, -299, 1810, 1809, -1000, -1000, 42178,
	-1000, 42178, 395, -1000, 4848, 1066, -1000, 7901, -1000, -1000,
	3140, -1000, 3138, 802, 802, 267, 267, 267, 267, -1000,
	963, -1000, 1540, -1000, 26577, 42178, 2022, -1000, -1000, 2019,
	-1000, -1000, -1000, 1056, 2184, -1000, -1000, -1000, -1000, -1000,
	1808, 430, -1000, 42178, 7297, -1000, 1304, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1724, 42178, -1000,
}

var yyPgo = [...]int{
	0, 169, 3165, 252, 175, 3689, 77, 251, 225, 218,
	246, 3688, 3687, 3686, 2950, 2948, 3685, 3684, 3683, 3682,
	3680, 3679, 3678, 3677, 3674, 3673, 3672, 3671, 3669, 3668,
	3666, 3665, 3663, 3662, 3661, 3659, 3657, 3656, 3655, 3654,
	3653, 3651, 3650, 3649, 3648, 3644, 244, 3643, 3642, 3641,
	3640, 3639, 3635, 3634, 3633, 3632, 3627, 3624, 3623, 3621,
	3620, 3619, 3618, 3616, 3615, 3611, 3610, 3608, 3607, 3606,
	3605, 3604, 3603, 3599, 3598, 3597, 3596, 3595, 3594, 214,
	3592, 2943, 3591, 3590, 3585, 3584, 3579, 3577, 3573, 236,
	3572, 3571, 3569, 3568, 3567, 3563, 3562, 3561, 3560, 3559,
	3558, 231, 3557, 3554, 3552, 3550, 237, 3546, 229, 3545,
	173, 205, 3544, 3543, 3542, 3541, 3540, 3539, 233, 184,
	65, 3538, 46, 3536, 3535, 222, 3533, 148, 3532, 142,
	3528, 3524, 3523, 3521, 3520, 3519, 3517, 3516, 3515, 3514,
	3513, 3512, 3511, 3510, 3509, 3508, 95, 3505, 263, 3503,
	72, 3502, 3501, 126, 111, 204, 258, 2726, 257, 248,
	188, 178, 94, 3500, 2974, 3498, 157, 230, 155, 38,
	3494, 136, 3493, 261, 51, 34, 253, 138, 55, 160,
	125, 3492, 216, 112, 109, 3491, 3489, 135, 242, 180,
	3488, 103, 3487, 3486, 3485, 3484, 3483, 200, 183, 3482,
	3481, 129, 3479, 3478, 120, 3477, 78, 122, 168, 119,
	3476, 91, 124, 123, 127, 93, 3475, 71, 3473, 3472,
	3464, 3463, 182, 3462, 3461, 131, 70, 3459, 3458, 3455,
	68, 3454, 67, 3453, 66, 3452, 57, 3451, 3450, 3449,
	3448, 3447, 3445, 3444, 3443, 3442, 3441, 3440, 54, 3439,
	3431, 7, 13, 15, 3428, 24, 3427, 166, 3426, 3425,
	3423, 3422, 3419, 86, 88, 3418, 87, 164, 3415, 8,
	25, 74, 3413, 3412, 223, 250, 99, 153, 3411, 305,
	3410, 3406, 3404, 156, 3403, 661, 3402, 3401, 3400, 3399,
	3398, 3397, 105, 3396, 220, 41, 3395, 130, 137, 3393,
	36, 45, 197, 199, 3392, 3390, 3389, 249, 219, 96,
	235, 0, 3387, 147, 3385, 3384, 3383, 255, 3382, 228,
	221, 162, 240, 259, 212, 3381, 3376, 69, 3374, 158,
	31, 49, 134, 84, 21, 254, 3373, 948, 9, 190,
	3371, 209, 3369, 185, 16, 172, 139, 3368, 3367, 29,
	264, 3366, 3365, 3364, 128, 3363, 3361, 181, 81, 3360,
	3359, 3357, 3356, 35, 3355, 32, 12, 3354, 101, 3349,
	245, 3348, 217, 152, 179, 177, 154, 226, 232, 75,
	76, 3347, 1669, 150, 98, 14, 3346, 224, 3345, 163,
	118, 3344, 79, 3341, 243, 265, 210, 3340, 187, 10,
	44, 33, 28, 43, 11, 238, 198, 3339, 3337, 19,
	47, 3336, 117, 3334, 18, 3333, 3332, 61, 3, 3331,
	3330, 17, 20, 3329, 30, 208, 171, 121, 89, 62,
	3327, 3326, 48, 206, 3325, 146, 151, 159, 3324, 73,
	3322, 3321, 3319, 886, 3318, 256, 3317, 3316, 3313, 3312,
	3311, 3309, 3306, 3304, 3302, 3301, 107, 42, 3298, 3296,
	3295, 3294, 82, 141, 3293, 3292, 3291, 3290, 37, 132,
	3289, 23, 3288, 26, 27, 39, 3286, 102, 3285, 4,
	194, 3283, 3281, 5, 3280, 3279, 1, 2, 3278, 3277,
	133, 3276, 90, 22, 167, 106, 3275, 3274, 85, 213,
	145, 3254, 3251, 97, 241, 211, 3247, 100, 239, 260,
	3246, 215, 3245, 3244, 3243, 3242, 3241, 3240, 1102, 3239,
	3238, 247, 64, 92, 116, 3236, 3235, 3234, 83, 161,
	115, 113, 56, 80, 3233, 110, 201, 3231, 189, 3228,
	3227, 108, 3226, 3225, 3208, 3207, 192, 3204, 3202, 186,
	227, 3201, 3200, 304, 3199, 3198, 3197, 3195, 3181, 3174,
	3173, 3171, 3169, 3167, 234, 328, 3163,
}

//line mysql_sql.y:11199
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 559, 562, 562, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 116, 116, 115, 544, 544, 544, 545,
	545, 112, 134, 133, 136, 136, 135, 135, 132, 132,
	128, 131, 131, 130, 130, 129, 124, 126, 126, 125,
	127, 127, 113, 101, 114, 489, 489, 488, 488, 487,
	487, 440, 440, 486, 486, 486, 485, 485, 485, 484,
	484, 483, 483, 482, 482, 480, 480, 481, 479, 478,
	478, 478, 476, 476, 476, 472, 472, 474, 473, 473,
	475, 467, 467, 470, 470, 468, 468, 468, 468, 471,
	466, 466, 466, 465, 465, 100, 100, 100, 384, 384,
	99, 99, 398, 398, 398, 398, 398, 396, 396, 396,
	396, 396, 396, 395, 395, 394, 394, 399, 399, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 90,
	90, 90, 90, 90, 95, 95, 95, 550, 550, 549,
	549, 551, 551, 551, 551, 552, 552, 93, 93, 93,
	94, 393, 393, 393, 91, 92, 92, 383, 383, 388,
	388, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 392, 392, 392, 390, 390, 389,
	389, 391, 391, 84, 84, 84, 87, 86, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 85, 85, 85,
	85, 85, 85, 80, 80, 80, 80, 80, 79, 79,
	81, 81, 380, 380, 379, 96, 96, 97, 547, 547,
	546, 548, 548, 548, 548, 98, 104, 104, 104, 104,
	104, 104, 104, 103, 103, 106, 106, 105, 107, 89,
	89, 89, 89, 89, 89, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 514, 514,
	514, 516, 516, 315, 316, 563, 318, 314, 314, 314,
	510, 510, 511, 512, 513, 513, 513, 102, 11, 11,
	11, 11, 11, 11, 11, 11, 13, 78, 83, 83,
	256, 256, 261, 261, 262, 262, 262, 267, 267, 268,
	268, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 244, 244, 244, 239, 239, 239, 239,
	240, 240, 241, 241, 242, 242, 242, 242, 243, 243,
	308, 308, 263, 263, 263, 265, 265, 264, 260, 258,
	258, 258, 258, 258, 258, 258, 259, 259, 259, 259,
	266, 266, 76, 82, 82, 82, 527, 527, 77, 538,
	538, 443, 443, 329, 329, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 448, 449, 325, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 53, 56, 52, 52, 52, 369,
	369, 51, 564, 564, 303, 303, 64, 63, 55, 65,
	66, 67, 68, 69, 70, 50, 62, 62, 62, 62,
	62, 62, 62, 62, 73, 461, 461, 566, 566, 566,
	71, 72, 442, 442, 442, 61, 60, 59, 58, 57,
	57, 49, 49, 48, 48, 54, 140, 141, 141, 322,
	322, 322, 324, 324, 320, 565, 565, 412, 412, 323,
	323, 47, 47, 47, 47, 74, 321, 321, 302, 319,
	319, 319, 12, 12, 10, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 25,
	26, 28, 377, 377, 374, 27, 19, 18, 18, 22,
	21, 17, 17, 20, 23, 24, 24, 9, 9, 9,
	9, 14, 14, 15, 161, 161, 212, 212, 522, 522,
	518, 518, 519, 519, 519, 520, 520, 521, 521, 108,
	455, 455, 455, 455, 455, 455, 8, 183, 183, 454,
	454, 454, 454, 454, 454, 381, 381, 381, 499, 499,
	499, 500, 182, 182, 177, 177, 456, 456, 346, 501,
	501, 464, 464, 463, 463, 462, 462, 180, 180, 181,
	181, 164, 164, 119, 119, 469, 469, 469, 469, 477,
	477, 439, 439, 248, 248, 295, 295, 296, 296, 154,
	154, 155, 155, 155, 155, 155, 155, 553, 553, 554,
	555, 556, 556, 557, 557, 557, 558, 558, 558, 558,
	558, 507, 507, 509, 509, 508, 179, 179, 175, 175,
	176, 176, 176, 174, 174, 173, 172, 172, 171, 169,
	169, 169, 170, 170, 170, 187, 187, 157, 157, 157,
	156, 156, 156, 156, 156, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 158, 158, 515,
	515, 515, 444, 444, 444, 451, 451, 276, 276, 277,
	277, 275, 275, 159, 159, 160, 160, 160, 160, 274,
	274, 273, 162, 162, 168, 167, 167, 163, 163, 163,
	163, 284, 284, 283, 283, 283, 283, 111, 117, 117,
	118, 186, 186, 282, 281, 281, 281, 185, 185, 184,
	184, 178, 178, 166, 166, 166, 166, 280, 165, 278,
	543, 543, 542, 542, 541, 539, 539, 539, 540, 540,
	540, 540, 491, 491, 491, 491, 491, 309, 309, 309,
	313, 313, 312, 312, 312, 312, 312, 317, 7, 7,
	7, 7, 7, 7, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 38, 196, 197,
	39, 198, 198, 199, 199, 200, 200, 201, 202, 203,
	203, 203, 203, 37, 188, 188, 189, 189, 190, 190,
	191, 192, 192, 192, 195, 193, 194, 194, 561, 561,
	560, 36, 36, 29, 147, 147, 148, 148, 148, 150,
	150, 245, 245, 245, 149, 149, 151, 151, 151, 523,
	526, 524, 524, 528, 528, 528, 529, 529, 529, 529,
	530, 530, 30, 137, 142, 533, 533, 533, 532, 532,
	534, 534, 535, 535, 299, 299, 300, 300, 145, 146,
	146, 144, 139, 153, 153, 153, 153, 153, 138, 143,
	525, 531, 531, 531, 378, 378, 375, 376, 376, 373,
	372, 372, 372, 537, 537, 536, 536, 536, 310, 310,
	31, 368, 368, 370, 371, 371, 371, 362, 362, 362,
	362, 35, 366, 366, 367, 367, 367, 367, 367, 367,
	367, 363, 363, 365, 365, 361, 361, 361, 361, 361,
	361, 361, 34, 152, 152, 360, 360, 357, 357, 355,
	355, 356, 356, 354, 354, 354, 358, 358, 42, 75,
	43, 44, 45, 41, 359, 359, 33, 33, 33, 33,
	121, 120, 120, 120, 120, 120, 123, 123, 298, 298,
	297, 297, 122, 40, 224, 224, 431, 431, 426, 426,
	426, 426, 426, 446, 446, 446, 427, 427, 427, 428,
	428, 428, 430, 430, 430, 429, 429, 429, 429, 429,
	445, 445, 447, 447, 447, 400, 400, 401, 401, 401,
	404, 404, 418, 418, 419, 419, 417, 417, 424, 424,
	423, 423, 422, 422, 421, 421, 420, 420, 420, 420,
	415, 415, 414, 414, 402, 402, 402, 402, 402, 403,
	403, 403, 413, 413, 416, 416, 272, 272, 271, 271,
	232, 232, 233, 233, 270, 270, 230, 230, 231, 231,
	231, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 497, 497, 498, 235,
	235, 246, 246, 246, 246, 246, 246, 234, 234, 236,
	236, 213, 213, 211, 211, 204, 204, 205, 205, 206,
	206, 206, 210, 210, 209, 209, 209, 209, 207, 207,
	208, 208, 208, 208, 208, 208, 386, 386, 494, 494,
	495, 495, 490, 490, 490, 493, 493, 493, 493, 493,
	493, 493, 496, 496, 496, 492, 492, 214, 293, 293,
	293, 311, 311, 311, 311, 292, 292, 292, 229, 229,
	228, 228, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 385, 385, 326, 326, 327, 327,
	255, 254, 254, 254, 254, 254, 252, 253, 251, 251,
	251, 251, 251, 250, 250, 249, 249, 249, 364, 364,
	247, 247, 238, 238, 238, 237, 237, 237, 425, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 290, 290, 290, 291,
	291, 291, 291, 291, 291, 291, 291, 336, 336, 342,
	342, 506, 506, 505, 215, 215, 215, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 225, 225, 225, 409,
	409, 409, 409, 410, 410, 410, 410, 411, 411, 411,
	407, 407, 408, 408, 347, 348, 348, 452, 452, 453,
	453, 405, 405, 406, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 460, 460, 460, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 517, 517, 517, 502, 502, 502, 503,
	503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
	503, 504, 504, 504, 504, 504, 504, 504, 504, 504,
	504, 504, 504, 504, 504, 504, 504, 504, 288, 288,
	288, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 349, 349, 350, 350,
	457, 457, 457, 457, 457, 457, 458, 458, 459, 459,
	459, 459, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 334, 285, 285, 285, 351, 343, 343, 344, 344,
	345, 345, 337, 337, 337, 337, 337, 337, 338, 338,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 339, 339, 341, 341, 353, 353, 353, 352,
	352, 352, 352, 352, 352, 352, 227, 227, 227, 227,
	331, 331, 331, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 217, 217, 217, 217, 221,
	221, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 222, 222, 222, 222, 222,
	220, 220, 220, 220, 220, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 109, 110, 110, 219, 294, 294, 432,
	432, 435, 435, 433, 433, 434, 436, 436, 436, 437,
	437, 437, 438, 438, 438, 441, 441, 301, 301, 301,
	307, 307, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 4, 0, 1, 1, 0,
	1, 5, 2, 2, 6, 9, 6, 9, 4, 7,
	8, 0, 1, 1, 2, 4, 6, 1, 2, 4,
	0, 2, 10, 10, 2, 0, 2, 1, 3, 3,
	3, 0, 2, 1, 3, 5, 0, 2, 3, 1,
	3, 1, 1, 1, 3, 1, 1, 1, 1, 0,
	3, 3, 0, 3, 3, 0, 1, 3, 0, 1,
	3, 0, 2, 1, 2, 3, 4, 3, 3, 1,
	0, 1, 1, 0, 1, 8, 5, 7, 0, 3,
	8, 5, 1, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 4, 1, 3, 1,
	2, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	2, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	1, 1, 2, 2, 1, 1, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 4, 4, 1, 3, 3,
	1, 2, 2, 2, 1, 2, 2, 3, 4, 4,
	6, 1, 1, 1, 2, 4, 6, 1, 4, 1,
	3, 3, 4, 4, 4, 4, 3, 3, 2, 4,
	4, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 2, 2, 0, 1,
	4, 2, 4, 1, 5, 3, 2, 1, 2, 2,
	4, 4, 5, 2, 1, 3, 4, 4, 1, 2,
	9, 7, 1, 3, 3, 1, 1, 3, 1, 3,
	2, 1, 2, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 2, 4, 3, 3, 1,
	1, 1, 1, 1, 1, 2, 3, 4, 7, 2,
	3, 3, 4, 5, 3, 4, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 1, 1, 1, 1, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 10, 7, 4, 4,
	1, 3, 1, 6, 3, 3, 3, 1, 1, 1,
	3, 2, 4, 5, 5, 6, 5, 5, 3, 2,
	2, 1, 3, 4, 3, 7, 5, 8, 2, 2,
	1, 3, 2, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 2, 1, 3, 2, 1, 2,
	2, 1, 2, 3, 2, 2, 3, 6, 3, 3,
	1, 1, 7, 7, 8, 8, 0, 4, 7, 0,
	3, 0, 2, 0, 1, 1, 1, 1, 4, 2,
	2, 3, 3, 4, 5, 3, 4, 4, 2, 2,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 2, 5, 5, 0,
	2, 7, 0, 1, 0, 1, 5, 5, 3, 3,
	2, 4, 4, 4, 4, 4, 1, 1, 1, 3,
	3, 1, 1, 1, 6, 0, 1, 1, 1, 1,
	5, 5, 0, 1, 1, 3, 3, 3, 4, 6,
	7, 4, 4, 7, 8, 3, 3, 3, 4, 0,
	2, 2, 0, 2, 2, 1, 1, 1, 1, 0,
	1, 4, 4, 5, 4, 3, 1, 3, 1, 1,
	3, 5, 2, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 4, 1, 3, 1, 4, 6, 6, 4, 4,
	4, 4, 4, 3, 6, 3, 5, 1, 1, 2,
	2, 11, 8, 9, 1, 3, 2, 4, 0, 2,
	0, 1, 1, 1, 1, 0, 1, 0, 1, 4,
	2, 1, 5, 4, 4, 2, 5, 1, 3, 2,
	1, 5, 4, 4, 2, 0, 5, 4, 0, 1,
	3, 3, 1, 3, 1, 3, 1, 3, 4, 0,
	1, 0, 1, 1, 3, 1, 1, 0, 4, 1,
	3, 2, 1, 0, 8, 0, 4, 7, 4, 0,
	2, 0, 2, 0, 2, 0, 4, 1, 3, 1,
	1, 6, 4, 5, 7, 4, 5, 0, 1, 3,
	8, 0, 6, 0, 4, 6, 1, 1, 1, 1,
	1, 2, 3, 1, 3, 6, 0, 3, 0, 1,
	2, 4, 4, 0, 1, 3, 1, 3, 3, 0,
	1, 1, 0, 2, 2, 0, 2, 3, 3, 3,
	1, 3, 3, 3, 3, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 7, 7, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 2, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 3, 1, 1, 1, 4, 4, 4,
	3, 2, 2, 2, 3, 2, 3, 4, 1, 3,
	4, 0, 2, 1, 1, 2, 2, 0, 1, 2,
	4, 1, 3, 1, 3, 2, 3, 1, 4, 3,
	0, 1, 1, 2, 5, 2, 2, 2, 0, 2,
	3, 3, 0, 1, 3, 1, 3, 0, 1, 2,
	1, 1, 0, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 1,
	7, 1, 3, 0, 1, 1, 3, 1, 3, 0,
	1, 1, 1, 14, 1, 3, 0, 1, 1, 3,
	1, 1, 2, 4, 1, 1, 1, 1, 0, 1,
	2, 9, 9, 7, 1, 2, 3, 3, 3, 0,
	4, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	4, 1, 1, 3, 4, 3, 0, 1, 1, 1,
	0, 2, 7, 8, 8, 0, 3, 3, 0, 3,
	0, 3, 0, 5, 1, 3, 0, 3, 3, 0,
	2, 9, 6, 0, 2, 2, 3, 3, 4, 4,
	1, 0, 2, 2, 1, 3, 2, 1, 3, 2,
	1, 3, 2, 0, 1, 3, 4, 3, 1, 1,
	4, 1, 3, 1, 1, 1, 1, 0, 1, 1,
	1, 11, 0, 2, 3, 3, 2, 2, 3, 1,
	1, 1, 3, 3, 4, 0, 2, 2, 2, 2,
	2, 2, 6, 0, 4, 1, 1, 0, 3, 0,
	1, 1, 2, 4, 4, 4, 0, 1, 8, 2,
	4, 4, 4, 9, 0, 2, 11, 9, 11, 8,
	2, 2, 9, 4, 5, 3, 0, 4, 1, 3,
	0, 3, 5, 10, 0, 2, 0, 2, 0, 3,
	2, 4, 3, 0, 2, 1, 0, 2, 3, 0,
	2, 3, 0, 2, 1, 0, 3, 2, 4, 3,
	0, 1, 0, 1, 1, 0, 6, 0, 3, 5,
	0, 4, 0, 3, 1, 3, 4, 5, 0, 3,
	1, 3, 2, 3, 1, 2, 0, 4, 6, 5,
	0, 2, 0, 2, 4, 5, 4, 5, 1, 5,
	6, 5, 0, 3, 0, 1, 1, 3, 3, 3,
	0, 4, 1, 3, 3, 3, 0, 1, 1, 3,
	2, 3, 3, 3, 4, 4, 3, 3, 3, 3,
	4, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 5, 4, 1, 3, 3, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 0, 1, 1, 3, 1,
	1, 1, 1, 1, 7, 9, 7, 9, 2, 1,
	7, 9, 7, 9, 8, 5, 0, 1, 0, 1,
	1, 1, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 3, 1, 3,
	5, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 2, 1, 2, 2, 1, 1, 2, 2, 2,
	3, 3, 2, 2, 1, 5, 6, 4, 1, 1,
	1, 5, 4, 1, 1, 2, 0, 1, 1, 2,
	5, 0, 1, 1, 2, 2, 3, 3, 1, 1,
	2, 2, 2, 0, 1, 2, 2, 2, 0, 3,
	0, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 3, 5, 2, 2, 2,
	2, 1, 1, 2, 5, 6, 8, 6, 6, 6,
	1, 1, 1, 1, 1, 1, 4, 4, 4, 7,
	9, 7, 7, 7, 9, 7, 7, 0, 2, 0,
	1, 1, 2, 4, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 2, 2, 2, 0, 1, 1, 1,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 5, 0, 1, 3, 0, 1, 0, 2, 0,
	2, 0, 1, 6, 8, 8, 6, 6, 5, 5,
	5, 6, 6, 6, 6, 5, 6, 6, 6, 6,
	6, 6, 6, 6, 1, 1, 1, 4, 4, 6,
	8, 6, 4, 5, 4, 4, 4, 3, 4, 6,
	6, 7, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	8, 4, 2, 3, 2, 4, 2, 2, 4, 6,
	2, 2, 4, 6, 4, 2, 0, 1, 2, 3,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 3, 0, 1, 1, 3,
	1, 3, 3, 3, 3, 3, 2, 1, 1, 1,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	1, 3, 4, 4, 5, 4, 5, 3, 4, 5,
	6, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 2, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 4, 1, 2, 3, 5, 1, 1, 3, 0,
	1, 0, 3, 0, 3, 3, 0, 3, 5, 0,
	3, 5, 0, 1, 1, 0, 1, 1, 2, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -559, -562, -2, -5, 612, -1, -4, -110, -84,
	-7, -112, -113, -8, -108, -9, -10, -12, -88, -103,
	-105, -107, -106, -46, -11, -102, -79, -80, -90, -96,
	-99, -100, -101, -114, -109, -111, -154, -115, -116, 602,
	-85, -86, -87, -32, -31, -30, -29, -137, -142, 608,
	446, 14, 495, -14, -15, -507, -16, 258, -314, -315,
	-316, -318, -563, -47, -48, -49, -57, -58, -59, -60,
	-61, -71, -72, -73, -50, -51, -52, -55, -53, -64,
	-63, -65, -66, -67, -68, -69, -70, -54, -140, -141,
	-74, -56, -75, -77, -76, -82, -78, -83, -139, -144,
	-13, 233, -81, 76, -91, -92, -93, -94, -95, -97,
	-98, 370, 376, 433, 601, 61, -155, -157, 618, 619,
	158, 159, 161, 162, -33, -34, -35, -36, -37, -38,
	-40, -39, -41, -42, -43, -44, -45, 229, 16, 538,
	-17, -20, -18, -21, -19, -27, -28, -26, -23, -25,
	-138, -24, -143, -22, 253, 252, 38, 319, 320, 321,
	374, 251, 230, 15, 31, 42, 350, -156, 82, 530,
	531, 533, 231, -158, 13, 623, -6, -3, -2, -124,
	-128, -132, -135, -136, -133, -134, -4, -110, 116, 243,
	603, -311, 366, 604, 606, 605, 85, 93, -304, -306,
	446, 258, 370, 376, 601, 619, 543, 544, 545, 546,
	547, 548, 549, 550, 552, 553, 554, 555, 556, 557,
	558, 568, 569, 559, 560, 561, 562, 563, 564, 565,
	566, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 498, 588, 589, 590, 591,
	526, 551, 587, 348, 349, 535, 270, 294, 401, 300,
	307, 158, 177, 171, 199, 191, 531, 166, 274, 312,
	275, 92, 161, 481, 106, 458, 430, 164, 289, 291,
	293, 527, 528, 360, 296, 525, 295, 297, 299, 529,
	276, 351, 187, 182, 288, 272, 180, 277, 40, 278,
	204, 279, 280, 540, 454, 347, 460, 304, 52, 428,
	181, 455, 292, 457, 208, 212, 472, 473, 175, 176,
	462, 475, 203, 206, 207, 250, 344, 345, 43, 537,
	262, 476, 210, 202, 198, 484, 308, 306, 201, 174,
	197, 273, 65, 214, 213, 215, 424, 425, 426, 427,
	281, 282, 364, 471, 194, 183, 352, 167, 23, 479,
	257, 459, 377, 283, 301, 309, 209, 211, 264, 269,
	539, 530, 432, 268, 305, 477, 179, 261, 290, 256,
	480, 168, 533, 379, 284, 162, 298, 474, 483, 64,
	392, 173, 165, 247, 159, 266, 271, 285, 286, 287,
	524, 311, 310, 302, 532, 195, 263, 200, 185, 172,
	196, 160, 265, 482, 393, 599, 350, 411, 193, 190,
	267, 240, 478, 461, 163, 415, 394, 188, 313, 595,
	596, 597, 365, 343, 314, 315, 186, 254, 452, 453,
	318, 421, 334, 395, 431, 402, 396, 221, 222, 322,
	464, 466, 205, 598, 323, 324, 325, 456, 326, 327,
	328, 329, 369, 56, 58, 94, 96, 620, 621, 63,
	29, 355, 358, 390, 397, 336, 600, 536, 333, 337,
	338, 359, 25, 413, 381, 417, 416, 48, 49, 50,
	53, 54, 55, 57, 59, 60, 51, 523, 374, 387,
	485, 45, 47, 384, 27, 361, 412, 434, 332, 414,
	445, 46, 443, 444, 465, 26, 363, 362, 62, 44,
	420, 422, 423, 316, 330, 372, 609, 486, 367, 383,
	386, 368, 335, 357, 388, 67, 66, 380, 610, 375,
	373, 331, 541, 542, 339, 567, 353, 429, 520, 519,
	518, 517, 516, 515, 514, 513, 319, 320, 321, 398,
	399, 400, 410, 403, 404, 405, 406, 407, 408, 409,
	448, 449, 611, 467, 469, 470, 468, 235, 622, 354,
	238, 613, 614, 95, 615, 617, 616, 28, -391, -389,
	-311, 531, 601, 376, 530, 533, 370, 350, 619, 374,
	258, 319, 320, 321, 446, -198, -311, 622, -164, 39,
	-211, -311, -164, -81, -15, -14, -156, -157, -211, 237,
	-319, 24, 428, -89, 429, 233, 82, 77, -311, -9,
	-101, -8, -108, -79, -154, 433, -317, -311, 319, 319,
	-317, 237, -311, 268, 409, -443, 243, -395, -368, 269,
	-394, -370, -397, -371, 32, 229, 231, 230, 265, 16,
	374, 239, 14, 13, 375, 251, 25, 26, 28, 15,
	376, 378, 29, 379, 382, 383, 384, 42, 387, 388,
	258, 85, 93, 88, 276, -197, -311, -345, -337, 113,
	-340, -332, -333, -335, -486, -480, -330, 82, 140, 141,
	148, 114, -334, -425, 36, 116, 547, 551, 587, 496,
	-286, -287, -288, -289, -290, -291, -311, -481, -479, 88,
	97, 99, 103, 104, 102, 100, 152, 184, 101, 89,
	153, -157, 85, -502, 557, -305, 580, 588, 589, 590,
	591, 579, 61, -450, -459, 236, -457, 151, 189, 254,
	185, 14, 146, 421, 186, 554, 576, 498, 558, 568,
	583, 549, 550, 552, 544, 545, 546, 548, 559, 561,
	575, -460, 571, 581, 582, 567, 584, 585, 586, 617,
	87, 86, 574, 573, 560, 555, 556, 562, 543, 553,
	563, 564, 572, 577, 578, 358, 106, 359, 360, 488,
	351, 361, 243, 428, 70, 362, 363, 364, 365, 366,
	495, 367, 71, 368, 357, 258, 411, 369, 188, 205,
	500, 499, 501, 492, 489, 487, 490, 491, 493, 494,
	565, 566, 570, -117, -118, 593, -553, -279, -554, 6,
	7, 8, 9, -555, 153, -544, 430, 539, 88, 163,
	160, -382, 163, 112, 168, 167, -382, 322, 264, -359,
	-147, 348, 411, 326, 94, 268, -362, -360, 527, -445,
	316, 312, 288, 238, 109, -148, 248, 247, 107, 488,
	236, 385, 307, 56, 58, -518, -519, 226, 227, 228,
	-509, 521, -508, -311, 360, 96, 27, 237, 371, 264,
	466, 464, 465, 467, 468, 469, 470, -62, -461, -442,
	461, 460, -323, 453, 459, 451, 463, 454, 349, 328,
	327, 229, 613, 528, 522, -301, 395, 431, 485, 486,
	372, 432, 472, 474, 455, 106, 192, 189, 238, 240,
	237, 348, 488, 411, 94, 326, -518, 160, 472, 474,
	268, 409, 41, -388, 421, -387, -389, 473, 484, 86,
	87, 471, -301, 106, 452, 452, -553, -279, -155, -157,
	-111, -507, 529, 529, 529, 238, 348, 411, 268, 239,
	237, 524, 527, 240, 488, 236, 319, 371, 264, 326,
	94, -444, -515, 32, -451, 223, 224, 225, 33, 34,
	-1, 120, 623, -337, -337, -6, 626, -6, -337, -311,
	-311, 155, -217, -221, -218, -220, -219, -223, -222, 189,
	190, 151, 193, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 206, 207, 204, 31, 205, 254, 185, 186,
	187, 188, 208, 171, 191, 536, 216, 172, 217, 173,
	218, 174, 219, 175, 176, 220, 177, 180, 181, 182,
	183, 179, 154, 82, 154, 88, -180, 260, -211, 154,
	-180, -553, -173, -174, 11, -211, -292, -311, 430, 123,
	-89, 77, -89, 429, 77, -510, -511, -512, -514, 233,
	429, 428, -106, 154, 276, 17, -317, -317, 80, -211,
	-370, 268, -395, -368, 36, 79, 155, 241, 155, 79,
	82, 372, 348, 411, 373, 488, 237, 385, 240, 268,
	386, 348, 411, 237, 240, 488, 268, 348, 237, 240,
	411, 268, 386, 451, 452, 240, 27, 377, 380, 381,
	452, -465, 484, 155, 112, 109, 110, 111, -337, 130,
	-352, 123, 124, 125, 126, 127, 128, 129, 137, 136,
	147, 140, 141, 142, 143, 144, 145, 146, 138, 139,
	133, 113, 131, 135, 132, 115, -157, -337, -345, 61,
	-335, -335, -335, -335, -425, -342, -337, 82, 82, 82,
	82, 154, 100, 88, -337, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, -458, 82, 82,
	-349, -350, 82, 82, -330, -292, 82, 88, 88, 82,
	82, 82, 88, -350, -350, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, -174, 155,
	-173, 82, -173, -174, -158, -157, 32, 33, 32, 33,
	32, 33, 32, 33, -556, 610, 82, 97, 620, 221,
	477, 538, 166, 167, 168, -196, -311, -198, 371, 240,
	524, 240, -148, -357, 243, -357, -357, -357, -357, 239,
	-357, 24, 237, 237, 237, 237, -357, 495, 123, 123,
	59, -520, 170, 155, -509, -179, 82, -322, 131, 135,
	-322, 24, 266, 266, 266, -322, 306, -564, -565, 17,
	133, -320, -565, -320, -320, -322, -566, 239, 462, 43,
	267, 266, -175, -176, 22, -175, 456, 452, -412, 457,
	458, -324, -565, -323, -322, -322, -323, -322, -322, -322,
	32, 237, 240, 488, 326, 614, -564, -564, 31, 31,
	-443, -443, -211, -443, 522, -302, -311, -443, -443, -443,
	-521, 242, -550, -549, 475, -552, 477, 160, -389, 160,
	-389, -370, 268, 268, 155, 123, 24, -390, 123, 134,
	-389, -389, -390, -390, -234, 41, -310, 151, -311, 88,
	-234, 41, -547, -546, -211, -174, -158, -157, 83, 83,
	83, 532, 532, 532, -443, -443, -443, -443, -443, -445,
	-443, -443, -443, -443, -443, -317, -188, -311, -198, 243,
	-443, -443, -159, -160, 142, -337, -311, -159, -3, -126,
	-125, 117, 118, 120, 604, 366, 603, 607, 601, -389,
	41, -438, 393, 392, -432, -434, 82, -433, 82, -433,
	-433, -433, -433, -433, 82, 82, -435, 82, -435, -435,
	-432, -436, 82, -436, -437, 82, -437, -436, -311, -343,
	-345, -311, 39, -454, 61, -154, 82, 31, 82, -311,
	-455, 61, -154, 82, 31, -174, -119, 39, -176, 21,
	154, 97, 88, -106, -89, 77, -106, 83, 155, -513,
	103, 104, -516, 203, 195, -311, -104, 88, -7, -8,
	-9, -10, -46, -79, -154, -482, -480, 82, 32, 420,
	79, 17, -396, 237, 488, 371, 264, 240, 348, -394,
	-377, -374, -372, -310, -370, -373, -372, -399, -292, 452,
	-120, 435, 434, 318, -337, -337, -337, -337, -337, 102,
	113, 343, 103, 104, -332, -353, 32, 314, 315, -333,
	-333, -333, -333, -333, -333, -333, -333, -333, -333, -333,
	-333, -341, -351, -425, 82, 133, 131, 135, 132, 115,
	-335, -335, -333, -333, 83, 155, -506, -505, 117, -337,
	-337, -337, -337, -311, -503, -504, 502, 503, 504, 505,
	506, 507, 508, 509, 510, 511, 512, 362, 357, 363,
	361, 351, 369, 364, 365, 188, 519, 520, 513, 514,
	515, 516, 517, 518, -343, -343, -337, -503, -343, -285,
	33, 32, -345, -345, -345, 83, -337, -517, 341, 340,
	342, -177, -311, -343, 83, 83, 83, 97, -345, -345,
	-343, -333, -343, -504, -285, -285, -285, -285, 142, -345,
	-345, -285, -285, -285, -285, 142, -285, -285, -285, -285,
	-285, -285, -285, -285, 83, 83, 83, 142, -345, -175,
	-118, -463, -462, -337, 41, -119, -176, -557, 611, 82,
	-292, -545, 88, 88, 624, 478, 479, 164, 167, 166,
	35, 82, -188, -357, -357, -357, -523, -311, 113, -378,
	-375, -372, -311, -311, -368, -311, -311, -211, -357, -357,
	-357, -357, -211, -245, 53, 54, 55, -372, -149, 56,
	57, -521, -508, 35, -178, -311, -275, 18, -335, -335,
	-372, 268, -564, -322, -322, -303, -302, -324, -319, -324,
	-324, -275, -320, -322, -322, -337, -324, -320, -275, -311,
	452, -275, -275, -412, -322, -321, -311, -321, -357, -302,
	-303, -303, -211, -211, -256, -261, -257, -262, 260, 234,
	355, 356, 232, 230, 11, 231, -269, 307, -358, 496,
	-240, -241, 77, 42, -243, 258, 397, 390, 270, 274,
	92, 275, 430, 276, 239, 278, 279, 280, 295, 297,
	250, 281, 282, 283, 421, 284, 159, 296, 285, 286,
	287, 373, -235, 6, 329, 41, 51, 52, 444, 443,
	541, 538, 271, -523, -523, 31, 31, -378, -311, -311,
	-167, -162, -166, -163, -168, -278, -280, -165, 82, -211,
	-157, -311, 155, 476, 478, 479, -550, -390, -550, -390,
	32, 420, -393, 420, 32, -368, -387, 472, 474, -383,
	88, 421, -373, -392, 79, 151, -462, -390, -390, -392,
	-392, 150, 155, -548, 477, 478, 226, -175, 97, 97,
	97, -213, -211, -523, -377, -368, -311, -443, -213, -213,
	-213, -311, -311, 82, 154, 36, -311, -311, -274, 155,
	-273, 17, -312, -311, 35, 88, 154, -274, -127, -125,
	119, -337, -6, 603, -337, -6, -6, -337, -6, -337,
	-441, 394, 97, 97, -294, 88, -294, 97, 97, 97,
	83, 88, -381, 79, -456, -346, -501, 593, -182, 83,
	-177, -499, -500, -177, -181, -311, -456, -182, 83, -499,
	-175, 594, -119, -172, -171, -337, -311, 24, -106, -89,
	-511, 154, 155, -178, -396, -376, -373, -398, 142, -311,
	-384, 155, 538, 627, 86, 241, -537, -536, 412, 83,
	155, -466, 242, 495, 88, 624, 428, 221, 222, 102,
	343, 103, 104, -425, -345, -341, -335, -335, -333, -333,
	-339, 255, -339, 112, -337, -336, -505, 119, -337, 35,
	155, 35, 155, 80, 154, 83, 83, 17, 17, 83,
	-337, 83, 83, 83, 83, 17, 17, -337, 83, 154,
	83, 83, 83, 83, 80, 83, 155, 83, 155, -345,
	-345, -337, -345, 83, 83, 83, -337, -337, -337, -345,
	83, -337, -337, -337, -337, -337, -337, -337, -337, -406,
	447, -406, -406, 155, 155, 155, 83, -119, 82, 97,
	155, 621, -298, -297, 88, 165, 168, 168, 167, -197,
	-199, -200, -201, -202, -203, 133, 156, 157, 82, -211,
	-211, -211, -526, 398, 36, -538, 155, 41, -536, 488,
	-145, 318, -361, 80, -152, 17, 538, -211, -211, -211,
	-211, -224, 35, 17, -161, -212, -311, 82, 83, 155,
	-337, -369, 80, -311, -303, -275, -275, -324, -275, -275,
	155, 23, -322, -324, -324, -320, 154, -302, -431, 35,
	-179, 155, 21, 260, -210, -308, -207, -209, 245, -327,
	-208, 248, -495, 246, 244, 107, 249, 303, 108, 239,
	-308, -308, 245, -244, 241, 35, -308, -259, 239, 346,
	303, 246, 21, 260, -258, 239, 108, -311, 245, 249,
	246, 244, -307, 123, -301, 150, 241, 43, 373, -307,
	542, 260, -307, -307, -307, -307, -307, -307, -307, 277,
	277, -307, -307, -307, -307, -307, -307, -307, -307, -307,
	-307, -307, 160, -307, -307, -307, -307, -307, -307, 82,
	272, 273, -527, 398, 31, 354, 354, -538, 31, -153,
	348, 31, -281, -282, -283, -284, 68, 72, 74, 69,
	70, 71, 75, 31, 155, -309, -313, 35, -311, 88,
	-309, -157, -162, -167, -309, 82, -549, -551, 480, 477,
	483, -392, -392, 241, 82, 123, -392, -392, 41, -310,
	-546, 484, 478, -119, 155, 79, -213, -189, -190, -191,
	-192, -217, -292, 190, 193, 195, 196, 197, 198, 199,
	200, 201, 202, 203, 206, 207, 204, 205, 254, 185,
	186, 187, 188, 208, 171, 191, 536, 172, 173, 174,
	175, 176, 177, 180, 181, 182, 183, 179, -311, -198,
	-275, -160, -162, -311, 88, -311, 142, -275, 120, -6,
	118, -131, -130, -129, 121, 601, 607, 120, 120, 120,
	83, 83, 83, 155, 83, 83, 83, 155, 83, 155,
	-469, 457, 40, 155, 82, 83, 155, 61, 155, 123,
	83, 155, 83, 61, -119, 88, 155, -169, 37, 38,
	154, 430, -311, -480, 83, -398, 155, 241, 154, 154,
	-374, 376, -310, -376, 21, 538, -292, 39, -298, 123,
	624, -311, 83, -339, -339, 112, -335, -332, 83, 120,
	-337, 118, -215, -217, 392, 393, -337, -215, -216, -222,
	151, 189, 254, 188, 187, 185, 392, 393, -234, -311,
	-337, -337, 83, -337, -337, 17, -311, -234, -333, -337,
	-174, -174, 83, 83, -405, -406, -405, -405, 83, 83,
	83, 83, -405, 83, 83, 83, 83, 83, 83, 83,
	83, 82, 97, 99, 97, 99, -462, -558, 63, 609,
	62, 420, 102, 308, 155, 97, 88, 625, 155, 123,
	168, 384, 83, 155, -292, -189, -179, 82, -179, -529,
	459, 400, 410, -307, -329, -328, 350, 42, -448, 421,
	406, 407, -375, 268, -311, -535, 95, 123, 79, 333,
	337, 338, 334, 335, 336, -355, -356, -354, -358, -523,
	82, 82, 82, 82, 35, -426, 323, -217, -211, -161,
	-311, 17, 155, -522, 154, -1, -311, -368, -322, -275,
	-337, -337, -275, -322, -322, -324, -311, -426, -217, 35,
	-257, 234, 231, -402, 305, 306, -403, -416, 308, -418,
	82, -214, -292, -208, -494, -495, -357, -311, 108, -494,
	108, 82, -214, -292, -292, -260, -321, -292, -311, -311,
	-311, -311, -265, -264, -292, -267, 32, -268, -311, -311,
	-311, -311, 108, -311, 108, -239, 41, 48, 49, 50,
	-307, -307, 192, -242, 41, 420, 422, 423, -267, 97,
	97, 97, 97, 88, 88, 88, -307, -307, 97, 88,
	-313, 88, -496, 167, 45, 46, 97, 97, 97, 97,
	41, 88, -246, 41, 288, 292, 289, 290, 291, 88,
	97, 41, 97, 41, 97, 41, -311, 82, -497, -498,
	88, -529, -307, 354, -389, 123, -329, -534, 318, -146,
	92, 32, -183, 234, 231, -523, -380, -379, -292, -166,
	-166, -166, -166, 68, 68, 68, 73, 68, 73, 68,
	-283, -380, -168, -179, -313, 83, -543, -542, -541, -539,
	76, 242, 77, -343, 477, 481, 482, -376, -325, 88,
	-383, -187, 24, -211, -211, -447, 298, 299, 83, 155,
	-217, -277, 19, 154, -277, 116, -6, -127, -129, -337,
	-6, -337, 603, 366, 604, 88, 97, 97, -477, 441,
	436, 438, 108, -346, -464, -463, 61, -154, -177, -456,
	-500, -462, -311, 61, -154, -456, -187, -469, -171, -170,
	44, -311, 97, 17, -373, -368, 142, 142, -311, 377,
	-384, 88, 399, 88, 237, 625, 88, -298, -332, -337,
	83, -225, 176, 175, -225, 35, 83, 83, -433, -433,
	-432, -435, -432, -225, -225, 83, 83, 24, 83, 83,
	83, -337, 83, 83, 155, -452, 497, -453, 569, -405,
	-405, -405, -405, -405, -405, -405, -405, -405, -405, -405,
	-405, -405, -405, -348, -347, 260, 442, 616, 616, 442,
	616, 616, 83, 155, -503, 155, -297, 88, 88, 88,
	-201, -217, 83, 35, -204, -205, -206, -214, -207, -209,
	35, -530, 92, -524, 88, -311, -531, 92, 401, 153,
	352, 41, 402, 403, 418, 347, 97, 97, 408, -525,
	-311, -153, -533, 52, 123, 88, -211, -354, -301, 150,
	279, 326, -272, -271, -311, 88, -204, -204, -204, -154,
	-427, 325, 21, 97, 141, -180, 80, 154, -162, -212,
	-311, 142, 83, -275, -275, -275, -322, -427, -154, -414,
	309, 82, -412, 82, -412, 108, 334, -419, -417, 260,
	-263, 45, 47, -217, -492, -311, -490, -492, -311, -490,
	-490, -357, -337, -263, -214, 241, 31, 231, -266, 331,
	332, 337, -385, 304, 113, -385, 155, -169, 155, -311,
	-234, -234, 31, 88, 88, -213, 83, 155, 123, -530,
	-524, 123, -390, 88, -531, -535, 123, 88, 155, -183,
	-183, -275, 155, 123, -185, -184, 79, 80, -186, 79,
	-184, 68, 68, -275, -541, -540, 24, -495, -495, -495,
	83, 83, 15, -191, 41, -276, 20, 21, 142, -276,
	120, 118, 120, 120, -311, 83, 83, -439, 595, -473,
	-475, 436, 21, 21, 15, 242, 83, -456, -456, -477,
	45, 46, -368, -384, 421, -211, 155, 625, -215, -337,
	83, -337, 83, 88, 83, 88, -174, 21, 83, 155,
	83, 83, 83, 155, 83, 83, -337, 83, -503, 235,
	-154, 83, 155, -154, 88, -528, 412, 88, 88, 97,
	41, 97, 153, 404, -449, -146, -532, 92, 123, 624,
	82, -307, -307, -307, -311, 83, 155, -307, -307, 83,
	83, 83, -232, 538, -428, 259, 97, 141, 97, 141,
	97, -309, -162, -311, -275, -522, 154, -275, -428, -404,
	310, 97, -333, 82, -333, 82, -413, 307, 82, 83,
	155, -311, -292, -229, -228, -226, 102, 113, 41, 390,
	-227, 92, 150, 293, 296, 295, 271, 294, -255, -326,
	79, 396, 331, 332, -358, 595, 526, 244, 107, 108,
	378, -327, 82, 82, 80, 313, 82, 82, -492, 83,
	-263, -292, 41, -266, 41, 344, 304, -264, -311, 150,
	-234, 83, -498, 88, -528, 88, -392, -533, 88, -523,
	-174, -379, -462, -337, 82, -337, 82, 68, 11, 19,
	-330, -337, -345, 243, -6, 604, 366, -248, 596, 88,
	21, 88, -471, 88, -380, -439, -122, -467, -412, 276,
	83, 83, 83, -405, -405, -408, -407, -411, 442, 305,
	450, -345, 88, 88, 83, 83, -193, -217, -150, 538,
	-232, -206, -150, 21, 538, 351, 41, 97, 41, 405,
	123, 103, 104, -299, -300, 88, -363, -365, -292, 82,
	-234, -236, -310, 151, 88, -271, -330, -330, -230, -231,
	-269, -358, -121, -120, -230, 82, -429, 159, 97, 141,
	97, 97, -275, -275, -429, -418, 21, 83, -399, 83,
	-399, 82, 123, -333, -417, -420, 61, -226, 102, -333,
	88, -236, -237, 41, 292, 288, 123, 123, -238, 41,
	272, 273, -247, 82, 303, 15, 192, 82, 108, 108,
	-211, -363, -363, -493, 333, 334, 335, 339, 337, 338,
	336, -493, -363, -363, 82, -386, -385, -333, -307, -307,
	150, -532, -175, -178, -491, -311, 244, 21, 21, -311,
	-311, -295, 597, 97, 88, 438, -248, -440, 598, -476,
	441, -470, -468, 436, 437, 438, 439, 123, 83, -410,
	115, 404, 408, -331, -334, 97, 99, 184, 153, 83,
	83, 537, -151, 60, 484, 88, 399, 88, 351, 88,
	625, 155, 123, 83, 155, -432, -337, -400, 260, 155,
	-269, -301, -122, -400, -233, -270, -311, 88, -446, 167,
	324, 538, 97, 141, 97, -174, -430, 167, 324, -403,
	83, 83, 83, -399, 97, 83, -424, -421, 82, -269,
	262, 133, 88, 88, 97, 82, -457, 31, 88, -364,
	82, 83, 83, 83, 83, -363, 97, -234, -307, 83,
	83, 155, 82, 21, -295, 88, -478, 242, -474, -475,
	440, -468, 21, 438, 21, 21, 88, -409, -410, 408,
	-331, -334, 593, 448, 448, 448, -195, -311, 303, 421,
	-300, 88, -366, -365, -169, 83, -401, 312, 21, -269,
	-307, -401, 83, 155, -307, -307, 324, 97, 141, 97,
	-175, 324, -415, 311, 83, -424, -269, -423, -422, 310,
	263, 82, 83, -337, -349, -307, 83, -250, -249, 534,
	-363, -366, 80, -366, 80, -366, 80, -366, 80, 83,
	-234, -311, 244, -296, -311, -471, -485, 82, 97, -473,
	-472, -474, 21, -471, 21, -471, -471, -123, 155, 112,
	449, 449, 449, -194, 35, 443, 377, -367, 250, 344,
	345, 92, 538, 331, 332, -169, 21, -402, -234, -270,
	-330, -330, 97, 97, 83, 155, -311, 259, 82, -344,
	-338, -337, 259, 83, -311, -254, -252, -253, 79, 455,
	301, 302, 83, -493, -493, -493, -493, -255, 83, 155,
	-489, 31, 83, -484, -483, -293, -479, -311, 441, 442,
	88, -471, 445, -409, 88, -307, -307, 88, 88, 330,
	-292, 82, -414, -422, -421, -344, 83, 155, -385, -253,
	79, -252, 79, 16, 15, -366, -366, -366, -366, -311,
	-488, -487, -486, 83, 155, 154, 123, -561, -560, 615,
	97, 97, -311, -399, -404, 83, -338, -251, 298, 299,
	31, 167, -251, 155, 123, -483, -311, 88, 88, 83,
	-418, 102, 41, 300, -487, 41, -337, 154, -311,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 0,
	263, 264, 265, 858, 859, 860, 861, 862, 863, 0,
	0, 0, 0, 617, 618, 0, 584, 0, 0, 0,
	0, 0, 0, 474, 475, 476, 477, 478, 479, 480,
	481, 482, 483, 484, 485, 486, 487, 488, 489, 490,
	491, 492, 493, 494, 495, 496, 497, 498, 499, 500,
	501, 502, 503, 358, 359, 360, 361, 362, 363, 364,
	365, 0, 288, 284, 209, 210, 211, 212, 213, 295,
	296, 451, 0, 0, 0, 0, 699, -2, 56, 0,
	277, 0, 268, 268, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, -2, 630, 0,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	595, 596, 597, 598, 347, 348, 349, 343, 344, 346,
	345, -2, 0, 630, 0, 0, 0, 707, 0, 0,
	0, 0, 0, 750, 772, 23, 0, 7, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 0, 0,
	19, 0, 19, 0, 0, 0, 1251, 1252, 1253, 1254,
	2024, 1994, -2, 1768, 1745, 1919, 2053, 2054, 2055, 2056,
	2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066,
	2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076,
	2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086,
	2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096,
	2097, 2098, 2099, 1702, 1703, 1704, 1705, 1706, 1707, 1708,
	1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718,
	1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728,
	1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738,
	1739, 1740, 1741, 1742, 1743, 1744, 1746, 1747, 1748, 1749,
	1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759,
	1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
	1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
	1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
	1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
	1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
	1831, 1832, 1833, 1835, 1836, 1837, 1838, 1839, 1840, 1841,
	1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851,
	1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861,
	1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871,
	1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881,
	1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891,
	1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
	1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
	1912, 1913, 1914, 1915, 1916, 1917, 1918, 1920, 1921, 1922,
	1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932,
	1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942,
	1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, -2, 1952,
	1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962,
	1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972,
	1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982,
	1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992,
	1993, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
	2004, 2005, 2006, 2007, 2008, 2009, -2, -2, -2, 2013,
	2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023,
	2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
	2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 0, 261,
	259, 1715, 1745, 1768, 1822, 1833, 1834, 1868, 1919, 1951,
	1994, 2010, 2011, 2012, 2024, 0, 881, 0, 677, 0,
	682, 1203, 677, 289, 619, 620, 707, 733, 582, 0,
	325, 0, 1759, 329, 2001, 0, 0, 0, 579, 319,
	320, 321, 322, 323, 324, 0, 0, 857, 0, 0,
	315, 0, 283, 1824, 2023, 0, 0, 0, 0, 0,
	153, 991, 155, 993, 159, 166, 0, 0, 171, 172,
	175, 176, 177, 178, 179, 0, 183, 0, 185, 188,
	0, 190, 191, 0, 194, 195, 196, 0, 206, 207,
	208, 994, 995, 996, -2, 84, 879, 1673, 1560, 0,
	1567, 1580, 1591, 1331, 1332, 1333, 1334, 0, 0, 0,
	0, 0, 1341, 1342, 0, 1369, 2057, 2098, 2099, 0,
	1350, 1351, 1352, 1353, 1354, 1355, 93, 105, 106, 1613,
	1614, 1615, 1616, 1617, 1618, 1619, 0, 1621, 1622, 1623,
	1531, 1318, 1251, 0, 2066, 0, 2088, 2093, 2094, 2095,
	2096, 2087, 0, 0, 1516, 0, 1506, 0, 0, -2,
	-2, 0, 0, 1893, -2, 2063, 2084, 2092, 2067, 2068,
	2091, 2059, 2060, 2061, 2054, 2055, 2056, 2058, 2070, 2072,
	2083, 0, 2079, 2089, 2090, 1999, 0, 0, 0, 2040,
	107, 108, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1527,
	-2, -2, 1530, -2, 1533, -2, -2, -2, -2, 1538,
	1539, -2, 1541, -2, -2, -2, -2, -2, -2, -2,
	1518, 1519, 1520, 1521, 1510, 1511, 1512, 1513, 1514, 1515,
	-2, -2, -2, 733, 808, 0, 733, 0, 708, 755,
	758, 761, 764, 711, 0, 0, 57, 58, 0, 278,
	279, 267, 269, 0, 273, 0, 266, 0, 0, 0,
	0, 1027, 1027, 1027, 1027, 1027, 0, 1027, 0, 0,
	0, 0, 0, 1027, 0, 914, 998, 999, 1000, 1025,
	1026, 1091, 0, 0, 0, 635, 631, 632, 633, 634,
	721, 0, 723, 726, 559, 559, 506, 0, 0, 0,
	559, 0, 520, 512, 0, 0, 0, 559, 0, 0,
	728, 728, 0, 562, 569, 559, 559, -2, 559, 559,
	559, 0, 0, 1039, 526, 527, 528, 512, 512, 531,
	532, 533, 543, 544, 570, 1697, 0, 0, 451, 451,
	0, 451, 0, 451, 451, 451, 637, 1863, 1766, 1839,
	1824, 2023, 0, 234, 1893, 239, 0, 1767, 1786, 0,
	0, 1804, 0, -2, 0, 305, 733, 0, 0, 707,
	0, 0, 0, 0, 0, 451, 451, 451, 451, 451,
	1090, 451, 451, 451, 451, 451, 0, 0, 0, 451,
	451, 0, 0, 773, 774, 769, 770, 771, 775, 776,
	5, 6, 19, 0, 0, 0, 0, 0, 0, 63,
	62, 0, 1674, 1692, 1626, 1627, 1628, 1679, 1630, 1683,
	1683, 1683, 1683, 1659, 1660, 1661, 1662, 1663, 1664, 1665,
	1666, 1667, 1683, 1683, 0, 0, 1672, 1650, 1681, 1681,
	1681, 1679, 1676, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
	1638, 1639, 1640, 1641, 1642, 1643, 1644, 1686, 1686, 1689,
	1689, 1686, 0, 1556, 0, 0, 0, 0, 681, 0,
	0, 733, -2, 0, 0, 583, 326, 1255, 0, 0,
	330, 0, 331, 0, 0, 0, 350, 0, 353, 338,
	339, 340, 334, 0, 133, 0, 317, 318, 0, 0,
	285, 0, 0, 0, 452, 0, 0, 0, 0, 0,
	0, 163, 160, 167, 170, 180, 187, 0, 199, 201,
	204, 161, 168, 173, 174, 181, 202, 162, 164, 165,
	169, 203, 205, 182, 186, 200, 184, 189, 192, 193,
	198, 0, 134, 0, 0, 0, 0, 0, 1566, 0,
	0, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 1560, 0, 0,
	1337, 1338, 1339, 1340, 1343, 0, 1370, 0, 0, 0,
	0, 0, 1620, 1624, 0, 1556, 1556, 0, 1556, 1552,
	0, 0, 0, 0, 0, 0, 1556, 1492, 0, 0,
	1494, 1507, 0, 0, 1496, 1497, 0, 1500, 1501, 1556,
	0, 1556, 1505, 1488, 1489, 0, 1552, 1552, 1552, 1552,
	0, 0, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
	1552, 1552, 1552, 1552, 0, 0, 0, 0, 728, 0,
	734, 0, -2, 0, 752, 754, 756, 757, 759, 760,
	762, 763, 765, 766, 713, 0, 0, 59, 0, 0,
	0, 0, 271, 0, 276, 0, 878, 0, 0, 1027,
	1027, 1027, 915, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1027, 1027, 1027, 1027, 0, 1045, 0, 0,
	0, 637, 636, 0, 722, 0, 0, 781, 0, 0,
	505, 0, 512, 559, 559, 518, 519, 514, 513, 565,
	566, 562, 0, 562, 562, 781, 0, 537, 538, 539,
	559, 559, 545, 729, 0, 546, 547, 562, 0, 567,
	568, 781, 0, 0, 781, 781, 0, 555, 556, 557,
	559, 0, 0, 1027, 0, 575, 514, 514, 1698, 1699,
	0, 0, 1036, 0, 0, 0, 578, 0, 0, 0,
	0, 638, 214, 217, 0, 220, 0, 1863, 0, 1863,
	0, 227, 0, 0, 0, 0, 0, 0, 257, 258,
	0, 0, 0, 0, 248, 251, 1197, 1198, 988, 989,
	252, 253, 297, 298, 0, 728, 751, 753, 747, 748,
	749, 0, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 0, 0, 0, 613, 0, 894, 615, 0,
	0, 0, 789, 783, 785, 852, 93, 789, 8, 80,
	77, 0, 19, 0, 0, 19, 19, 0, 19, 262,
	0, 1695, 1693, 1694, 1629, 1680, 0, 1655, 0, 1656,
	1657, 1658, 1668, 1669, 0, 0, 1651, 0, 1652, 1653,
	1654, 1645, 0, 1646, 1647, 0, 1648, 1649, 260, 0,
	1557, 882, 0, 655, 669, 650, 0, 658, 0, 1204,
	639, 669, 641, 0, 658, 728, 705, 0, 683, 0,
	0, 327, 0, 335, 332, 0, 336, 0, 0, 352,
	354, 355, 356, 341, 342, 580, 313, 314, 306, 307,
	308, 309, 310, 311, 312, 316, 103, 0, 286, 287,
	0, 0, 0, 147, 148, 149, 150, 151, 152, 154,
	138, 602, 604, 980, 992, 0, 983, 0, 157, 197,
	130, 0, 0, 0, 1561, 1562, 1563, 1564, 1565, 1570,
	0, 1572, 1574, 1576, 1578, 0, 1596, -2, -2, 1319,
	1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329,
	1330, 1581, 1594, 1595, 0, 0, 0, 0, 0, 0,
	1592, 1592, 1587, 0, 1335, 0, 1367, 1371, 0, 0,
	0, 0, 0, 94, 1551, 1459, 1460, 1461, 1462, 1463,
	1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
	1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
	1484, 1485, 1486, 1487, 0, 0, 1560, 0, 0, 0,
	1553, 1554, 0, 0, 0, 1447, 0, 0, 1453, 1454,
	1455, 0, 664, 0, 1517, 1493, 1508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 807,
	809, 0, 673, 675, 676, 702, 683, 709, 0, 0,
	0, 55, 60, 0, 1060, 280, 281, 0, 0, 275,
	0, -2, 0, 0, 0, 0, 0, 929, 0, 449,
	974, 0, 0, 0, 990, 1015, 1023, 0, 0, 0,
	0, 0, 1064, 916, 921, 922, 923, 917, 918, 924,
	925, 0, 724, 0, 0, 821, 504, 0, 560, 561,
	509, 1824, 514, 781, 781, 521, 515, 522, 564, 523,
	524, 525, 562, 781, 781, 730, 559, 562, 548, 563,
	562, 551, 552, 0, 558, 571, 576, 572, 0, 574,
	529, 530, 1066, 726, 368, 369, 370, 372, 0, 420,
	420, 420, 403, 420, 0, 0, 391, 1700, 0, 0,
	0, 0, 400, 1700, 0, 0, 1700, 1700, 1700, 1700,
	1700, 1700, 1700, 0, 0, 1700, 1700, 1700, 1700, 1700,
	1700, 1700, 1700, 1700, 1700, 1700, 0, 1700, 1700, 1700,
	1700, 1700, 1183, 1700, 0, 1037, 410, 411, 412, 413,
	418, 419, 0, 446, 0, 0, 0, 449, 0, 963,
	794, 0, 795, 796, 792, 823, 847, 847, 0, 847,
	827, 1203, 0, 0, 225, 226, 215, 0, 216, 0,
	228, 229, 0, 231, 232, 233, 240, 1766, 1839, 235,
	237, 0, 0, 241, 254, 255, 256, 0, 0, 246,
	247, 0, 0, 300, 301, 303, 0, 683, 1040, 1041,
	1042, 599, 1201, 600, 601, 605, 0, 0, 608, 609,
	610, 611, 612, 896, 0, 0, 968, 969, 781, 0,
	790, 0, 786, 853, 0, 855, 0, 781, 0, 78,
	19, 0, 71, 68, 0, 0, 0, 0, 0, 1675,
	1625, 1696, 0, 0, 0, 1677, 0, 0, 0, 0,
	61, 685, 646, 0, 649, 666, 0, 670, 0, 0,
	662, 654, 659, 0, 0, 679, 640, 0, 0, 645,
	683, 0, 706, 735, 736, 739, 1256, 0, 337, 333,
	351, 0, 0, 0, 0, 141, 977, 0, 142, 146,
	136, 0, 0, 0, 982, 0, 979, 984, 0, 156,
	0, 0, 131, 132, 1051, 1060, 0, 0, 0, 1571,
	1573, 1575, 1577, 1579, 0, 1582, 1592, 1592, 1588, 0,
	1583, 0, 1585, 0, 1561, 0, 1372, 0, 0, 0,
	0, 0, 0, 0, 0, 1437, 1438, 0, 0, 1442,
	0, 1444, 1445, 1446, 1448, 0, 0, 0, 1452, 0,
	1491, 1509, 1495, 1498, 0, 1502, 0, 1504, 0, 733,
	733, 0, 0, 1411, 1411, 1411, 0, 0, 0, 0,
	1411, 0, 0, 0, 0, 0, 0, 0, 0, 1356,
	0, 1357, 1358, 0, 0, 0, 810, 703, 0, 0,
	0, 0, 0, 1058, 0, 282, 270, 272, 0, 0,
	0, 884, 885, 887, 0, 890, 891, 892, 896, 726,
	0, 726, 936, 1700, 1028, 453, 0, 0, 976, 0,
	952, 0, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 1068, 0, 0, 0, 624, 628, 23, 727, 0,
	782, 507, 0, 508, 559, 516, 517, 781, 540, 541,
	0, 0, 781, 559, 559, 562, 0, 573, 1068, 0,
	0, 1036, 1134, 1102, 381, 0, 1212, 1213, 421, 0,
	1219, 1228, 1027, 1288, 0, 1228, 0, 0, 1230, 1231,
	0, 0, 0, 0, 404, 405, 0, 390, 0, 0,
	0, 0, 0, 0, 389, 0, 0, 431, 0, 0,
	0, 0, 0, 1701, 1700, 1700, 0, 398, 399, 0,
	402, 0, 0, 0, 0, 0, 0, 0, 0, 1700,
	1700, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1174, 0, 0, 0, 0, 0, 0, 0,
	1189, 1190, 936, 1700, 0, 0, 0, 453, 950, 959,
	0, 0, 0, 0, 0, 0, 814, 0, 0, 813,
	0, 0, 0, 0, 0, 726, 848, 0, 850, 851,
	825, -2, 0, 794, 830, 1556, 218, 219, 0, 0,
	224, 242, 244, 0, 0, 0, 243, 245, 249, 250,
	299, 302, 304, 745, 0, 0, 1092, 0, 897, 898,
	900, 901, 0, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1750, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 895, 616,
	779, 784, 791, 854, 856, 94, 787, 779, 0, 81,
	19, 80, 72, 73, 0, 19, 0, 0, 0, 0,
	1685, 1684, 1670, 0, 1671, 1682, 1687, 0, 1690, 0,
	689, 0, 0, 669, 671, 0, 0, 669, 0, 0,
	678, 0, 0, 669, 745, 685, 0, 742, 740, 741,
	0, 0, 581, 104, 357, 0, 0, 0, 0, 0,
	603, 0, 981, 138, 0, 0, 158, 0, 0, 0,
	1060, 1055, 1555, 1584, 1586, 0, 1593, 1589, 1336, 1344,
	1368, 0, 0, 1374, 1386, 1386, 0, 0, 0, 1377,
	1683, 1683, 1380, 1679, 1681, 1679, 1386, 1386, 0, 95,
	0, 0, 1443, 0, 0, 0, 665, 0, 0, 0,
	1407, 1409, 1411, 1411, 1418, 1412, 1419, 1420, 1411, 1411,
	1411, 1411, 1425, 1411, 1411, 1411, 1411, 1411, 1411, 1411,
	1411, 1405, 0, 0, 1614, 1615, 674, 0, 0, 716,
	717, 718, 719, 720, 0, 0, 53, 54, 1060, 0,
	274, 0, 0, 889, 0, 0, 0, 1205, 0, 940,
	937, 938, 939, 0, 971, 454, 455, 456, 457, 0,
	0, 0, 975, 0, 963, 945, 0, 0, 0, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, -2, 1031, 0, 0,
	0, 1205, 1205, 1205, 0, 1076, 0, 1065, 677, 0,
	-2, 0, 0, 626, 0, 0, 822, 510, 781, 534,
	731, 732, 549, 781, 781, 559, 577, 1076, 1067, 0,
	371, 420, 0, 1122, 0, 0, 1128, 0, 1135, 374,
	0, 422, 0, 1218, 1245, 1229, 1245, 1289, 1245, 1245,
	1027, 0, 422, 0, 0, 392, 428, 0, 0, 0,
	0, 0, 388, 425, 739, 375, 377, 378, 379, 429,
	430, 432, 0, 434, 435, 394, 406, 407, 408, 409,
	0, 0, 0, 401, 414, 415, 416, 417, 376, 1151,
	1152, 1153, 1156, 1157, 1158, 1159, 0, 0, 1162, 1163,
	1164, 1165, 1166, 1242, 1243, 1244, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1191, 1192, 1193, 1194, 1195, 1196, 1175,
	1176, 1177, 1178, 1179, 1180, 1181, 1182, 0, 0, 1186,
	0, 940, 0, 0, 0, 0, 971, 952, 0, 962,
	0, 964, 965, 0, 0, 647, 781, 292, 0, 817,
	811, 0, 800, 815, 816, 803, 0, 805, 0, 801,
	802, 781, 793, 824, 849, 826, 829, 831, 832, 838,
	0, 0, 0, 0, 221, 222, 223, 230, 0, 473,
	236, 701, 0, 1202, 606, 607, 1093, 1094, 614, 0,
	902, 777, 0, 0, 777, 76, 79, 0, 74, 0,
	0, 0, 0, 66, 64, 1678, 0, 0, 691, 118,
	0, 0, 0, 667, 0, 672, 669, 653, 663, 652,
	660, 661, 680, 669, 644, 643, 704, 689, 737, 738,
	0, 1257, 328, 0, 978, 138, 143, 144, 145, 139,
	137, 985, 0, 987, 0, 1053, 0, 0, 1590, 1373,
	1345, 1375, 1387, 1388, 1376, 0, 1347, 1348, 1378, 1379,
	1381, 1382, 1383, 1384, 1385, 1349, 1439, 0, 1441, 1449,
	1450, 0, 1499, 1503, 0, 0, 0, 0, 0, 1416,
	1417, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1429, 1430,
	1431, 1432, 1433, 733, 1406, 0, 0, 0, 0, 0,
	0, 0, 714, 0, 0, 0, 1059, 1061, 877, 880,
	886, 888, 0, 0, 0, 1206, 1207, 1209, 1210, 1211,
	0, 913, 0, 0, 931, 932, 942, 0, 0, 0,
	459, 460, 0, 0, 0, 472, 468, 469, 470, 450,
	970, 959, 948, 0, 0, 958, 0, 1032, 1700, 1700,
	1700, 0, 0, 1136, 1700, 1700, 0, 0, 0, 1140,
	1079, 0, 0, 1070, 0, 847, 0, 0, 781, 625,
	628, 629, 725, 511, 553, 550, 781, 1079, 367, 1100,
	0, 0, 0, 0, 0, 1132, 0, 0, 1104, 0,
	393, 423, 0, -2, 0, 1246, 0, 1232, 1246, 0,
	0, 1245, 0, 382, 422, 0, 0, 0, 436, 440,
	441, 0, 438, 1284, 0, 439, 0, 427, 0, 433,
	1154, 1155, 0, 1160, 1161, 0, 1185, 0, 0, 442,
	0, 0, 0, 443, 448, 945, 0, 960, 0, 966,
	967, 733, 0, 0, 797, 818, 0, 0, 798, 0,
	799, 804, 806, 291, 833, 0, 0, 835, 836, 837,
	828, 238, 746, 899, 0, 767, 0, 0, 788, 768,
	0, 19, 0, 0, 69, 1688, 1691, 693, 0, 690,
	119, 0, 0, 0, 0, 657, 668, 651, 642, 691,
	743, 744, 140, 135, 986, 121, 0, 1054, 0, 0,
	1451, 0, 1411, 1408, 1411, 1410, 1402, 0, 1359, 0,
	1361, 1362, 1363, 0, 1365, 1366, 0, 712, 0, 0,
	919, 1140, 0, 919, 941, 930, 0, 972, 973, 0,
	461, 462, 0, 465, 471, 943, 944, 0, 0, 956,
	0, 0, 0, 0, 1024, 1038, 0, 0, 0, -2,
	0, -2, 1049, 0, 1085, 0, 1077, 0, 1069, 0,
	1072, 781, 781, -2, 622, 627, 0, 554, 1085, 1102,
	0, 1123, 0, 0, 0, 0, 0, 0, 0, 1103,
	0, 1116, 424, 1247, -2, 1260, 1262, 0, 1037, 1265,
	1266, 0, 0, 0, 0, 0, 0, 1310, 1274, 0,
	0, 1278, 1279, 1280, 0, 0, 1283, 0, 1608, 1609,
	0, 1287, 0, 0, 0, 0, 0, 0, 0, 1226,
	383, 384, 0, 386, 387, 1700, 1285, 426, 380, 1700,
	396, 1184, 1187, 1188, 447, 444, 445, 948, 951, 648,
	728, 293, 294, 819, 0, 812, 842, 839, 0, 0,
	903, 778, 780, 70, 75, 0, 0, 695, 0, 692,
	0, 686, 688, 129, 656, 693, 91, 112, 0, 0,
	1346, 1440, 1490, 1414, 1415, 0, 1403, 0, 1397, 1398,
	1399, 1404, 0, 0, 715, 710, 0, 905, 912, 926,
	1043, 1208, 911, 0, 0, 458, 463, 0, 466, 467,
	0, 946, 947, 0, 954, 0, 0, 1011, 1679, 0,
	1033, 1034, 1199, 1200, 1035, 1137, 1138, 1139, 1095, -2,
	1148, 0, 1047, 121, 1095, 0, 1073, 0, 1080, 0,
	1078, 1071, 733, 623, 1082, 373, 1134, 1124, 0, 1126,
	0, 0, 0, 0, 1105, -2, 0, 1261, 1263, 1264,
	1267, 1268, 1269, 1315, 1316, 1317, 0, 0, 1272, 1312,
	1313, 1314, 1273, 0, 0, 0, 0, 0, 1606, 1607,
	1308, 0, 0, 1233, 1235, 1236, 1237, 1238, 1239, 1240,
	1241, 1234, 0, 0, 0, 1225, 1227, 385, 0, 0,
	1700, 961, 290, 0, 0, 843, 845, 840, 841, 65,
	67, 82, 0, 694, 120, 0, 695, 83, 0, 109,
	0, 122, 123, 0, 0, 0, 0, 0, 1413, 1400,
	0, 0, 0, 0, 0, 1610, 1611, 1612, 0, 1360,
	1364, 0, 0, 927, 928, 933, 0, 935, 464, 949,
	953, 956, 0, 1002, 0, 739, 0, 1097, 0, 1036,
	1150, 1700, 1050, 1097, 0, 1142, 1700, 1700, 1063, 0,
	1075, 0, 1087, 0, 1081, 728, 366, 0, 1084, 1120,
	1125, 1127, 1129, 0, 1133, 1131, 1106, -2, 0, 1114,
	0, 0, 1270, 1271, 0, 0, 1506, 1700, 0, 1303,
	0, 1002, 1002, 1002, 1002, 0, 437, 395, 0, 820,
	834, 0, 0, 0, 684, 92, 96, 0, 118, 115,
	0, 124, 0, 0, 0, 0, 1056, 0, 1389, 0,
	0, 0, 1393, 1394, 1395, 1396, 0, 904, 0, 934,
	955, 957, 1001, 1012, 1013, 739, 1046, 0, 1134, 1149,
	0, 1048, 1141, 0, 0, 0, 1074, 1086, 0, 1089,
	621, 1083, 1101, 0, 1130, 1107, 1115, 0, 1110, 0,
	0, 0, 1311, 0, 1277, 0, 1282, 1291, 1304, 0,
	0, 1214, 0, 1216, 0, 1220, 0, 1222, 0, 0,
	397, 844, 846, 0, 697, 687, 85, 0, 0, 113,
	114, 116, 0, 125, 0, 127, 128, 1052, 0, 0,
	1390, 1391, 1392, 0, 906, 907, 920, 1003, 1700, 1700,
	0, 0, 0, 1009, 1010, 1014, 0, 1122, 1154, 1143,
	1144, 1145, 1088, 1121, 1109, 0, -2, 1117, 0, 0,
	1558, 1568, 1569, 1275, 1281, 1290, 1292, 1293, 0, 1305,
	1306, 1307, 1309, 1002, 1002, 1002, 1002, 1224, 696, 0,
	1062, 0, 97, 0, 99, 101, 102, 1248, 110, 111,
	117, 126, 0, 1401, 908, 0, 0, 1006, 1007, 0,
	1098, 0, 1100, 1111, -2, 0, 1119, 0, 1276, 1294,
	0, 1295, 0, 0, 0, 1215, 1217, 1221, 1223, 698,
	86, 87, 0, 98, 0, 0, 0, 893, 909, 0,
	1004, 1005, 1008, 0, 1102, 1118, 1559, 1296, 1298, 1299,
	0, 0, 1297, 0, 0, 100, 1249, 1057, 910, 1099,
	1096, 1300, 1302, 1301, 88, 89, 90, 0, 1250,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 114, 3, 3, 3, 145, 137, 3,
	82, 83, 142, 140, 155, 141, 154, 143, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 626, 623,
	124, 123, 125, 3, 627, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 147, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 624, 136, 625, 148,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	115, 116, 117, 118, 119, 120, 121, 122, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 138, 139,
	144, 146, 149, 150, 151, 152, 153, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:796
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:803
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:809
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:817
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:823
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:827
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:842
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:846
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:852
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:857
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:861
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:893
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:901
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp:   yyDollar[2].str,
				IsS3:        false,
				Dir:         yyDollar[4].str,
				Parallelism: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:910
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp: yyDollar[2].str,
				IsS3:      true,
				Option:    yyDollar[5].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:920
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:940
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:946
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:953
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:961
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:967
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:976
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:986
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:994
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1002
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1010
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1020
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1028
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1038
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1045
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1054
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1064
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1068
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1074
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1078
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1084
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1093
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1103
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1107
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1113
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1122
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1126
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1132
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1153
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1166
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1173
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1177
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1183
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1187
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1193
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1200
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1208
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1212
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1226
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1230
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1234
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1239
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1243
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1247
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1253
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1262
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1273
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1277
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1283
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1287
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1293
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1297
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1303
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1327
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1346
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1350
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1354
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1359
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1363
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1372
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1382
		{
			yyVAL.str = ""
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1389
		{
			yyVAL.str = yyDollar[3].str
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1394
		{
			yyVAL.str = "\n"
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1401
		{
			yyVAL.str = yyDollar[3].str
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1406
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1410
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1438
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1442
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1448
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1456
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1476
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1495
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1520
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1524
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1528
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1533
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1537
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1543
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1556
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1567
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1580
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1584
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1594
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1607
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1620
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1626
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1632
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1639
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1647
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1656
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1660
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1664
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1668
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1672
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1676
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1683
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1687
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1693
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1700
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1709
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1713
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1719
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1723
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1727
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1731
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1735
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1739
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1743
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1747
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1751
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1755
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1759
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1763
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1767
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1771
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1775
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1779
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1783
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1787
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1791
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1795
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1799
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1803
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1807
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1811
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1815
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1819
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1823
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1827
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1831
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1835
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1839
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1843
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1847
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1851
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1855
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1859
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1863
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1867
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1871
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1875
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1879
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1883
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1887
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1891
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1895
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1899
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1903
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1907
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1911
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1915
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1928
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1935
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1942
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1952
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1956
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:1962
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:1969
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1977
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1981
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1985
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1989
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:1995
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:1999
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2005
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2012
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2019
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2028
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2058
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2062
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2066
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2072
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2078
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2082
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2089
		{
			yyVAL.str = yyDollar[3].str
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2095
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2099
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2105
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2113
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2122
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2131
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2139
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2147
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2170
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2193
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2200
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2207
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2215
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2222
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2229
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2238
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2242
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2246
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2252
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2256
		{
			yyVAL.str = yyDollar[1].str
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2262
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2266
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2272
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2276
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2287
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2293
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2298
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2302
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2306
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2310
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2314
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2318
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2322
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2326
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2330
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2336
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2340
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2344
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2348
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2353
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2358
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2364
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2377
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2390
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2403
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2416
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2432
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2439
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2450
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2461
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2465
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2471
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2481
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2487
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2491
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2497
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2503
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2507
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2511
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2515
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2521
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2533
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2539
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2543
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2549
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2553
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2559
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2565
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2576
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2582
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2586
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2590
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2594
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2598
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2602
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2610
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2618
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2628
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2640
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2644
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2652
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2660
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2699
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2703
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2709
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2715
		{
			yyVAL.str = yyDollar[1].str
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2720
		{
			yyVAL.str = "true"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2721
		{
			yyVAL.str = "false"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2722
		{
			yyVAL.str = yyDollar[1].str
		}
	case 357:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2727
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2744
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2767
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2777
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2784
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2793
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2797
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2803
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2807
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			partitionDef := &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2826
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2836
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2852
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2870
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2874
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2880
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2884
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2890
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2896
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2904
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2914
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2922
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2932
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr *tree.AttributeDefault
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2942
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr *tree.AttributeDefault
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2952
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2959
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2963
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2967
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2971
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2975
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2982
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2988
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2992
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2996
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3000
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3004
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3008
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3012
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3016
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3021
		{
			yyVAL.str = ""
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3052
		{
			yyVAL.str = ""
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3056
		{
			yyVAL.str = string("COLUMN")
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3061
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3067
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3073
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3081
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3085
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3091
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3099
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3106
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3112
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3118
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3124
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3130
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3137
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3144
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3152
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3158
		{
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = int64(yyDollar[6].item.(int64))
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3165
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3171
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3179
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3183
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3190
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3208
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3222
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3236
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3249
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3255
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3266
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3279
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3283
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3288
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3292
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3297
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3301
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3317
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3321
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3325
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3329
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3333
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3337
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3341
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryDefault{}
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3345
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryCount{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3349
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalDefault{}
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3353
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalCount{Value: yyDollar[4].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3357
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentNone{}
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3361
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentDefault{}
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3365
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentOptional{}
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3369
		{
			yyLOCAL = &tree.UserMiscOptionFailedLoginAttempts{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3373
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeCount{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3377
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeUnbounded{}
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3383
		{
			yyVAL.item = nil
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3388
		{
			yyVAL.item = nil
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3429
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3438
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3446
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3450
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3454
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{tree.NewRole(yyDollar[5].cstrUnion().Compare())}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3463
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3467
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3473
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3478
		{
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3482
		{
		}
	case 516:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3487
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3497
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3507
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3515
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3521
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3527
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3533
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3539
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3545
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3551
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3560
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3564
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3568
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3572
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3576
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3580
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3584
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3588
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3594
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3603
		{
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3605
		{
		}
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3614
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3624
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3633
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3637
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3641
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3647
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3653
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3659
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3665
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3674
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3684
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3696
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3700
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3706
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3718
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3732
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3738
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3745
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3749
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3754
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3758
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3762
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3767
		{
			yyVAL.str = ""
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3771
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3777
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3790
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3794
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3800
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3805
		{
			yyLOCAL = &tree.ShowCreateView{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3809
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3813
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3819
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3825
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3829
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3835
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3841
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3845
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3849
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3855
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3859
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3884
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3892
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3900
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3908
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3912
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3918
		{
			yyLOCAL = &tree.User{
				Username: yyDollar[1].usernameRecordUnion().Username,
				Hostname: yyDollar[1].usernameRecordUnion().Hostname,
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3927
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3935
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3944
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3950
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3958
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3966
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3974
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3980
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3988
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3994
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4002
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4008
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4018
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4023
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4030
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4046
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4059
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4070
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4074
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4080
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4085
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4092
		{
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4094
		{
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4097
		{
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4106
		{
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4110
		{
		}
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4115
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4124
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4131
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4137
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4145
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4152
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4159
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4179
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4189
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4193
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4199
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4206
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4212
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4220
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4227
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4234
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4253
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4257
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4261
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4266
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4270
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4274
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4280
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4289
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4293
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4299
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4303
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4309
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4313
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4319
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4324
		{
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4328
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4335
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4339
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4346
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4351
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4355
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4361
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4365
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4371
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4375
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4380
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4384
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4397
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4408
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4419
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4441
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4464
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4472
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4481
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4485
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4498
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4502
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4507
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4511
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4518
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4523
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4530
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4536
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4540
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4544
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4548
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4552
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4556
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4561
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4565
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4571
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4581
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4596
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4600
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4614
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4618
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4624
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4633
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4637
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4641
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4645
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4649
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4655
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4662
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4671
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4675
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4681
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4689
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4693
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4698
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4702
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4708
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4712
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4716
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4721
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4725
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4731
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4737
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4741
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:4747
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4752
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4756
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4760
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4765
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4769
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4773
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4778
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4782
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4790
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4794
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4798
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4812
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4816
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4826
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4836
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4846
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4858
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4866
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4874
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4883
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4891
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4899
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4907
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4915
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4923
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4931
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4939
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4947
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4957
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4968
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4982
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4986
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4990
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4995
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4999
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5003
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5012
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5016
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5021
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5025
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5030
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5034
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5040
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5044
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5050
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5054
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5059
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5063
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5068
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5076
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5082
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5090
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5098
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5108
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5114
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5123
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5132
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5141
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5151
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5155
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5165
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5169
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5173
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5177
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5183
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5193
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5197
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5203
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5209
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5213
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5219
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5225
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5229
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5233
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5239
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5243
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5249
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5253
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5259
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5263
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5269
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5273
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5283
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5296
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5302
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5308
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:  tree.FuncName2ResolvableFunctionReference(name),
					Exprs: yyDollar[3].exprsUnion(),
					Type:  tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5321
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5332
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5339
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5343
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5349
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5359
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5363
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5367
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5372
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5376
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5380
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5384
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5389
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5393
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5397
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5401
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5405
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5410
		{
			yyVAL.str = ""
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5414
		{
			yyVAL.str = yyDollar[1].str
		}
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5418
		{
			yyVAL.str = yyDollar[2].str
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5424
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5430
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5434
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5438
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5442
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5446
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5452
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 877:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5491
		{
			yyLOCAL = &tree.CreateExtension{
				Language: yyDollar[3].str,
				Name:     tree.Identifier(yyDollar[5].str),
				Filename: tree.Identifier(yyDollar[7].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5501
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5507
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 880:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5513
		{
			yyLOCAL = &tree.CreateProcedure{
				Name: yyDollar[3].procNameUnion(),
				Args: yyDollar[5].procArgsUnion(),
				Body: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5523
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5528
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5534
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5541
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5545
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5551
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5557
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5562
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5566
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5570
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5574
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5581
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				return 1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				return 1
			}

			yyLOCAL = &tree.CreateFunction{
				Replace:    yyDollar[2].sourceOptionalUnion(),
				Name:       yyDollar[4].functionNameUnion(),
				Args:       yyDollar[6].funcArgsUnion(),
				ReturnType: yyDollar[9].funcReturnUnion(),
				Language:   yyDollar[11].str,
				Import:     yyDollar[12].boolValUnion(),
				Body:       yyDollar[13].str,
				Handler:    yyDollar[14].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5605
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5610
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5616
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5623
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5627
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5633
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5639
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5643
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5647
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5653
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5659
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5665
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5669
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5675
		{
			yyVAL.str = ""
		}
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5682
		{
			yyVAL.str = yyDollar[2].str
		}
	case 911:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5688
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5697
		{
			yyLOCAL = &tree.CreateView{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5709
		{
			yyLOCAL = &tree.CreateAccount{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         yyDollar[4].str,
				AuthOption:   yyDollar[5].accountAuthOptionUnion(),
				StatusOption: yyDollar[6].accountStatusUnion(),
				Comment:      yyDollar[7].accountCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5721
		{
			yyVAL.str = yyDollar[1].str
		}
	case 915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5725
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5731
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 917:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5735
		{
			yyVAL.str = "DEFINER = "
		}
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5739
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 919:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5744
		{
			yyVAL.str = ""
		}
	case 920:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:5748
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5762
		{
			yyVAL.str = ""
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5770
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 930:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:5776
		{
			yyLOCAL = tree.AccountAuthOption{
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5786
		{
			yyVAL.str = yyDollar[1].str
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5790
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 933:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5796
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5803
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5809
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5817
		{
			yyLOCAL = tree.AccountStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5823
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusOpen,
			}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5830
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusSuspend,
			}
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5837
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusRestricted,
			}
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5845
		{
			yyLOCAL = tree.AccountComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5851
		{
			yyLOCAL = tree.AccountComment{
				Exist:   true,
				Comment: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5860
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Users:              yyDollar[4].usersUnion(),
				Role:               yyDollar[5].accountRoleUnion(),
				MiscOpt:            yyDollar[6].userMiscOptionUnion(),
				CommentOrAttribute: yyDollar[7].accountCommentOrAttributeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5872
		{
			yyLOCAL = &tree.CreatePublication{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Database:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				AccountsSet: yyDollar[7].accountsSetOptionUnion(),
				Comment:     yyDollar[8].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5884
		{
			yyLOCAL = &tree.CreateStage{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Url:         yyDollar[5].str,
				Credentials: yyDollar[6].stageCredentialsUnion(),
				Status:      yyDollar[7].stageStatusUnion(),
				Comment:     yyDollar[8].stageCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5896
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5902
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5909
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5917
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5923
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5931
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5937
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:5945
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:5951
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5960
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5964
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5969
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5973
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5980
		{
			yyVAL.str = yyDollar[3].str
		}
	case 959:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5985
		{
			yyVAL.str = ""
		}
	case 960:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5989
		{
			yyVAL.str = yyDollar[2].str
		}
	case 961:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5995
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6008
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var comment = yyDollar[6].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, comment)
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6017
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6021
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6027
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6033
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6039
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6048
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6056
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6064
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 971:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6069
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6075
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: true,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6083
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: false,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6189
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6193
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6199
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6209
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6213
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6219
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6229
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6233
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6237
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6242
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6246
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6252
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6259
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6265
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6274
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 990:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6281
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6290
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6294
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6300
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6314
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6318
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6322
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6327
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6331
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6335
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6339
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6345
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = &tree.IndexOption{IType: tree.INDEX_TYPE_INVALID}
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Table:       yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6366
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6370
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6396
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6400
		{
			yyLOCAL = &tree.IndexOption{AlgoParamList: int64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6404
		{
			yyLOCAL = &tree.IndexOption{AlgoParamVectorOpType: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6408
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6412
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6416
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6420
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6426
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6430
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6436
		{
			// Order is parsed but just ignored as MySQL dtree.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6441
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6446
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6450
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6454
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6458
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6462
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6466
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6470
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6476
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Name:               tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SubscriptionOption: yyDollar[5].subscriptionOptionUnion(),
				CreateOptions:      yyDollar[6].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6487
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6491
		{
			yyLOCAL = &tree.SubscriptionOption{From: tree.Identifier(yyDollar[2].str), Publication: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6501
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6505
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6510
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6514
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6520
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6524
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6530
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6534
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6538
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6543
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6547
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6553
		{
			yyLOCAL = &tree.CreateConnector{
				TableName: yyDollar[4].tableNameUnion(),
				Options:   yyDollar[7].connectorOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6562
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6568
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6586
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6604
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6622
		{
			yyLOCAL = &tree.CreateSource{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				SourceName:  yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Options:     yyDollar[9].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6633
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6637
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6643
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6655
		{
			yyLOCAL = &tree.CreateTable{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Param:       yyDollar[9].loadParamUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6664
		{
			yyLOCAL = &tree.CreateTable{
				IsClusterTable:  true,
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6676
		{
			yyLOCAL = &tree.CreateTable{
				IsDynamicTable: true,
				IfNotExists:    yyDollar[4].ifNotExistsUnion(),
				Table:          *yyDollar[5].tableNameUnion(),
				AsSource:       yyDollar[7].selectUnion(),
				DTOptions:      yyDollar[8].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6687
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6694
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6704
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6717
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6725
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6734
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6743
		{
			yyVAL.str = ""
		}
	case 1057:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6747
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6753
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6757
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6762
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6766
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:6773
		{
			yyLOCAL = &tree.TailParameter{
				Fields:       yyDollar[1].fieldsUnion(),
				Lines:        yyDollar[2].linesUnion(),
				IgnoredLines: uint64(yyDollar[3].int64ValUnion()),
				ColumnList:   yyDollar[4].loadColumnsUnion(),
				Assignments:  yyDollar[5].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6784
		{
			yyLOCAL = &tree.CreateSequence{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        yyDollar[4].tableNameUnion(),
				Type:        yyDollar[5].columnTypeUnion(),
				IncrementBy: yyDollar[6].incrementByOptionUnion(),
				MinValue:    yyDollar[7].minValueOptionUnion(),
				MaxValue:    yyDollar[8].maxValueOptionUnion(),
				StartWith:   yyDollar[9].startWithOptionUnion(),
				Cycle:       yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6797
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6811
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6815
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6819
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6825
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6829
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6836
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6843
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6850
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6857
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6861
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6865
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6869
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6873
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6880
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6887
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6891
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6898
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6905
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6909
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6915
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6921
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6925
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6932
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6939
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6946
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6953
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6957
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6962
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6966
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6970
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:6975
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:6979
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:6989
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:6993
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()},
			}

		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7000
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: yyDollar[4].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7007
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7011
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7020
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7024
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7030
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7034
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7040
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7049
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7059
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7063
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7069
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7073
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7079
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7086
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7095
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7099
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7104
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7108
		{
			expr := tree.NewMaxValue()
			yyLOCAL = &tree.ValuesLessThan{ValueList: tree.Exprs{expr}}
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7113
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7117
		{
			yyLOCAL = &tree.ValuesIn{ValueList: yyDollar[4].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7122
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7126
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7136
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7140
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7151
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7159
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7167
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7175
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7186
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:    yyDollar[1].boolValUnion(),
					Algorithm: yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7195
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7205
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7215
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7219
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7224
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7228
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7234
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7238
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7244
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7248
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7253
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7257
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7263
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7267
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7273
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7277
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7282
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7286
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7292
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7296
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7300
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7306
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7310
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7314
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7318
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7322
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7326
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7330
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7335
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7339
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7343
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7347
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7351
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7355
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7359
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7363
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7367
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7371
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7375
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7379
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7383
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7387
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7391
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7395
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7399
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7403
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7407
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7411
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7415
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7419
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7423
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7427
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7431
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7435
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7439
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7443
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7449
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7453
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:7459
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7465
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7469
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7475
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7479
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7483
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7487
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7491
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7495
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7509
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7513
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7522
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7527
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7533
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7540
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7544
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7550
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7554
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7558
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7564
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7568
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7574
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7583
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7592
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7625
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7660
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7674
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7680
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7689
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7698
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7707
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7716
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7726
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7734
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7740
		{
			yyVAL.str = ""
		}
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7744
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7754
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7760
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7766
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7787
		{
			yyVAL.str = ""
		}
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7791
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:7797
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7803
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7807
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7811
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7817
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7821
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7825
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7829
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7835
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7839
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7843
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7848
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7852
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7858
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7862
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7868
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7872
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7876
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7880
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7884
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7888
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7893
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7897
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7901
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7905
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7909
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7913
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7917
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7921
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7925
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7929
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7942
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7946
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7950
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7954
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7958
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7962
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7968
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7972
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7977
		{
			yyVAL.str = ""
		}
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7981
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7987
		{
			yyVAL.str = ""
		}
	case 1289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7991
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1290:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:7997
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8009
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8016
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8023
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8030
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8037
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8046
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8052
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8058
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8062
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8066
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8070
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8074
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8079
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8086
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8090
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8094
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8099
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8103
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8108
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8112
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8128
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8134
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8138
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8142
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8146
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8150
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8154
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8158
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8162
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8166
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8170
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8174
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8178
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8182
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8188
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8192
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8196
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8200
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8204
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8208
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8212
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8216
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8220
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8224
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8228
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8232
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8237
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8245
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8249
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8253
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8257
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8261
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8270
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8274
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8278
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8282
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8286
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8290
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8296
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8304
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8312
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8322
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8332
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8342
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8351
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8361
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8371
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8381
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8390
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8400
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8404
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8409
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8413
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8419
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8423
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:8429
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8438
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1375:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8450
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8467
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8484
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8497
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8510
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8522
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8536
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8551
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8566
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8583
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8598
		{
		}
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8605
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8609
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8613
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8619
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8623
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8627
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8631
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8637
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8641
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8645
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8651
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8659
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8669
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8673
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8680
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8685
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8689
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8694
		{
			yyVAL.str = ","
		}
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8698
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8703
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8707
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1411:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8712
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8719
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8745
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8756
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8767
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8777
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8787
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8797
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8806
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8815
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8825
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8835
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8845
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8855
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8865
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8875
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8885
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8895
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8905
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8915
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8925
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8935
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8954
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8962
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8970
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8978
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8986
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8996
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9004
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9013
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9021
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9029
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9037
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9045
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9056
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9066
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9078
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9089
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9111
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9147
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9159
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9171
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9182
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9190
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9197
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9204
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9216
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9224
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9234
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9244
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9252
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9263
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9272
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9281
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9289
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9299
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9307
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9317
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9321
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9327
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9331
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9350
		{
		}
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9352
		{
		}
	case 1551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9393
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9404
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9408
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9412
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:9418
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9423
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9427
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9433
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9437
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9443
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9447
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9454
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9458
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9462
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9470
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9474
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9478
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9483
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9487
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9493
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9497
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9501
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9505
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9509
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9513
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9517
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9521
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9525
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9529
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9537
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9541
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9545
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9549
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9553
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9557
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9561
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9565
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9569
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9573
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9579
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9583
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9589
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9593
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9600
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9604
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9608
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9614
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9618
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9622
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9626
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9630
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9634
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9638
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9644
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9648
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9652
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9656
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9662
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9675
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9680
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9686
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9690
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9703
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9708
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9712
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9716
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9720
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9724
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9731
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9735
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9739
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9743
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9750
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9761
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9766
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9772
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9784
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9796
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9808
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9821
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9834
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9847
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9860
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9873
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9886
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9899
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9912
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9925
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9938
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9953
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9980
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10022
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10058
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10094
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10111
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10123
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10143
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10163
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10183
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10199
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10212
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10225
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10238
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10251
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10263
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10275
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10287
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10299
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10311
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10323
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10335
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10347
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10359
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10372
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10385
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10398
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10411
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10426
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10434
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10443
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10453
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10476
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10481
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10487
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10494
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10498
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10503
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10507
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10513
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10519
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10526
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10533
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10542
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10549
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10556
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10565
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10569
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10573
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10579
		{
		}
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10581
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10591
		{
			yyVAL.str = ""
		}
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10595
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
