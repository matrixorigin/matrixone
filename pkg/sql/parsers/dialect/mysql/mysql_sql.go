// Code generated by goyacc -o mysql_sql.go -c mysql mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const DISTINCTROW = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const SUBQUERY_AS_EXPR = 57395
const ID = 57396
const AT_ID = 57397
const AT_AT_ID = 57398
const STRING = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const INTEGRAL = 57404
const HEX = 57405
const HEXNUM = 57406
const BIT_LITERAL = 57407
const FLOAT = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const EMPTY_FROM_CLAUSE = 57412
const LOWER_THAN_CHARSET = 57413
const CHARSET = 57414
const UNIQUE = 57415
const KEY = 57416
const OR = 57417
const XOR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const LE = 57427
const GE = 57428
const NE = 57429
const NULL_SAFE_EQUAL = 57430
const IS = 57431
const LIKE = 57432
const REGEXP = 57433
const IN = 57434
const ASSIGNMENT = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const BEGIN = 57445
const START = 57446
const TRANSACTION = 57447
const COMMIT = 57448
const ROLLBACK = 57449
const WORK = 57450
const CONSISTENT = 57451
const SNAPSHOT = 57452
const CHAIN = 57453
const NO = 57454
const RELEASE = 57455
const BIT = 57456
const TINYINT = 57457
const SMALLINT = 57458
const MEDIUMINT = 57459
const INT = 57460
const INTEGER = 57461
const BIGINT = 57462
const INTNUM = 57463
const REAL = 57464
const DOUBLE = 57465
const FLOAT_TYPE = 57466
const DECIMAL = 57467
const NUMERIC = 57468
const TIME = 57469
const TIMESTAMP = 57470
const DATETIME = 57471
const YEAR = 57472
const CHAR = 57473
const VARCHAR = 57474
const BOOL = 57475
const CHARACTER = 57476
const VARBINARY = 57477
const NCHAR = 57478
const TEXT = 57479
const TINYTEXT = 57480
const MEDIUMTEXT = 57481
const LONGTEXT = 57482
const BLOB = 57483
const TINYBLOB = 57484
const MEDIUMBLOB = 57485
const LONGBLOB = 57486
const JSON = 57487
const ENUM = 57488
const GEOMETRY = 57489
const POINT = 57490
const LINESTRING = 57491
const POLYGON = 57492
const GEOMETRYCOLLECTION = 57493
const MULTIPOINT = 57494
const MULTILINESTRING = 57495
const MULTIPOLYGON = 57496
const INT1 = 57497
const INT2 = 57498
const INT3 = 57499
const INT4 = 57500
const INT8 = 57501
const CREATE = 57502
const ALTER = 57503
const DROP = 57504
const RENAME = 57505
const ANALYZE = 57506
const ADD = 57507
const SCHEMA = 57508
const TABLE = 57509
const INDEX = 57510
const VIEW = 57511
const TO = 57512
const IGNORE = 57513
const IF = 57514
const PRIMARY = 57515
const COLUMN = 57516
const CONSTRAINT = 57517
const SPATIAL = 57518
const FULLTEXT = 57519
const FOREIGN = 57520
const KEY_BLOCK_SIZE = 57521
const SHOW = 57522
const DESCRIBE = 57523
const EXPLAIN = 57524
const DATE = 57525
const ESCAPE = 57526
const REPAIR = 57527
const OPTIMIZE = 57528
const TRUNCATE = 57529
const MAXVALUE = 57530
const PARTITION = 57531
const REORGANIZE = 57532
const LESS = 57533
const THAN = 57534
const PROCEDURE = 57535
const TRIGGER = 57536
const STATUS = 57537
const VARIABLES = 57538
const ROLE = 57539
const PROXY = 57540
const AVG_ROW_LENGTH = 57541
const STORAGE = 57542
const DISK = 57543
const MEMORY = 57544
const CHECKSUM = 57545
const COMPRESSION = 57546
const DATA = 57547
const DIRECTORY = 57548
const DELAY_KEY_WRITE = 57549
const ENCRYPTION = 57550
const ENGINE = 57551
const MAX_ROWS = 57552
const MIN_ROWS = 57553
const PACK_KEYS = 57554
const ROW_FORMAT = 57555
const STATS_AUTO_RECALC = 57556
const STATS_PERSISTENT = 57557
const STATS_SAMPLE_PAGES = 57558
const DYNAMIC = 57559
const COMPRESSED = 57560
const REDUNDANT = 57561
const COMPACT = 57562
const FIXED = 57563
const COLUMN_FORMAT = 57564
const AUTO_RANDOM = 57565
const RESTRICT = 57566
const CASCADE = 57567
const ACTION = 57568
const PARTIAL = 57569
const SIMPLE = 57570
const CHECK = 57571
const ENFORCED = 57572
const RANGE = 57573
const LIST = 57574
const ALGORITHM = 57575
const LINEAR = 57576
const PARTITIONS = 57577
const SUBPARTITION = 57578
const SUBPARTITIONS = 57579
const TYPE = 57580
const PROPERTIES = 57581
const PARSER = 57582
const VISIBLE = 57583
const INVISIBLE = 57584
const BTREE = 57585
const HASH = 57586
const RTREE = 57587
const BSI = 57588
const ZONEMAP = 57589
const EXPIRE = 57590
const ACCOUNT = 57591
const UNLOCK = 57592
const DAY = 57593
const NEVER = 57594
const SECOND = 57595
const ASCII = 57596
const COALESCE = 57597
const COLLATION = 57598
const HOUR = 57599
const MICROSECOND = 57600
const MINUTE = 57601
const MONTH = 57602
const QUARTER = 57603
const REPEAT = 57604
const REVERSE = 57605
const ROW_COUNT = 57606
const WEEK = 57607
const REVOKE = 57608
const FUNCTION = 57609
const PRIVILEGES = 57610
const TABLESPACE = 57611
const EXECUTE = 57612
const SUPER = 57613
const GRANT = 57614
const OPTION = 57615
const REFERENCES = 57616
const REPLICATION = 57617
const SLAVE = 57618
const CLIENT = 57619
const USAGE = 57620
const RELOAD = 57621
const FILE = 57622
const TEMPORARY = 57623
const ROUTINE = 57624
const EVENT = 57625
const SHUTDOWN = 57626
const NULLX = 57627
const AUTO_INCREMENT = 57628
const APPROXNUM = 57629
const SIGNED = 57630
const UNSIGNED = 57631
const ZEROFILL = 57632
const USER = 57633
const IDENTIFIED = 57634
const CIPHER = 57635
const ISSUER = 57636
const X509 = 57637
const SUBJECT = 57638
const SAN = 57639
const REQUIRE = 57640
const SSL = 57641
const NONE = 57642
const PASSWORD = 57643
const MAX_QUERIES_PER_HOUR = 57644
const MAX_UPDATES_PER_HOUR = 57645
const MAX_CONNECTIONS_PER_HOUR = 57646
const MAX_USER_CONNECTIONS = 57647
const FORMAT = 57648
const CONNECTION = 57649
const LOAD = 57650
const INFILE = 57651
const TERMINATED = 57652
const OPTIONALLY = 57653
const ENCLOSED = 57654
const ESCAPED = 57655
const STARTING = 57656
const LINES = 57657
const DATABASES = 57658
const TABLES = 57659
const EXTENDED = 57660
const FULL = 57661
const PROCESSLIST = 57662
const FIELDS = 57663
const COLUMNS = 57664
const OPEN = 57665
const ERRORS = 57666
const WARNINGS = 57667
const INDEXES = 57668
const NAMES = 57669
const GLOBAL = 57670
const SESSION = 57671
const ISOLATION = 57672
const LEVEL = 57673
const READ = 57674
const WRITE = 57675
const ONLY = 57676
const REPEATABLE = 57677
const COMMITTED = 57678
const UNCOMMITTED = 57679
const SERIALIZABLE = 57680
const LOCAL = 57681
const EXCEPT = 57682
const CURRENT_TIMESTAMP = 57683
const DATABASE = 57684
const CURRENT_TIME = 57685
const LOCALTIME = 57686
const LOCALTIMESTAMP = 57687
const UTC_DATE = 57688
const UTC_TIME = 57689
const UTC_TIMESTAMP = 57690
const REPLACE = 57691
const CONVERT = 57692
const SEPARATOR = 57693
const CURRENT_DATE = 57694
const CURRENT_USER = 57695
const CURRENT_ROLE = 57696
const MATCH = 57697
const AGAINST = 57698
const BOOLEAN = 57699
const LANGUAGE = 57700
const WITH = 57701
const QUERY = 57702
const EXPANSION = 57703
const ADDDATE = 57704
const BIT_AND = 57705
const BIT_OR = 57706
const BIT_XOR = 57707
const CAST = 57708
const COUNT = 57709
const APPROX_COUNT_DISTINCT = 57710
const APPROX_PERCENTILE = 57711
const CURDATE = 57712
const CURTIME = 57713
const DATE_ADD = 57714
const DATE_SUB = 57715
const EXTRACT = 57716
const GROUP_CONCAT = 57717
const MAX = 57718
const MID = 57719
const MIN = 57720
const NOW = 57721
const POSITION = 57722
const SESSION_USER = 57723
const STD = 57724
const STDDEV = 57725
const STDDEV_POP = 57726
const STDDEV_SAMP = 57727
const SUBDATE = 57728
const SUBSTR = 57729
const SUBSTRING = 57730
const SUM = 57731
const SYSDATE = 57732
const SYSTEM_USER = 57733
const TRANSLATE = 57734
const TRIM = 57735
const VARIANCE = 57736
const VAR_POP = 57737
const VAR_SAMP = 57738
const AVG = 57739
const ROW = 57740
const UNUSED = 57741

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"INTEGRAL",
	"HEX",
	"HEXNUM",
	"BIT_LITERAL",
	"FLOAT",
	"NULL",
	"TRUE",
	"FALSE",
	"EMPTY_FROM_CLAUSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"TYPE",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"ZONEMAP",
	"EXPIRE",
	"ACCOUNT",
	"UNLOCK",
	"DAY",
	"NEVER",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"CONNECTION",
	"LOAD",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"DATABASES",
	"TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EXCEPT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT_DISTINCT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"ROW",
	"UNUSED",
	"';'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:5813

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	17, 318,
	-2, 309,
	-1, 56,
	185, 455,
	-2, 491,
	-1, 65,
	212, 234,
	213, 234,
	-2, 254,
	-1, 304,
	58, 1198,
	418, 1198,
	-2, 92,
	-1, 323,
	58, 618,
	418, 618,
	-2, 453,
	-1, 324,
	58, 446,
	418, 446,
	-2, 454,
	-1, 330,
	17, 319,
	-2, 311,
	-1, 560,
	54, 736,
	-2, 1236,
	-1, 561,
	54, 737,
	-2, 1237,
	-1, 562,
	54, 738,
	-2, 1238,
	-1, 569,
	54, 795,
	-2, 1203,
	-1, 570,
	54, 797,
	-2, 1214,
	-1, 709,
	1, 481,
	417, 481,
	-2, 488,
	-1, 818,
	17, 318,
	-2, 676,
	-1, 860,
	119, 919,
	-2, 917,
	-1, 862,
	119, 400,
	-2, 914,
	-1, 863,
	119, 401,
	-2, 915,
	-1, 1051,
	1, 482,
	417, 482,
	-2, 488,
	-1, 1414,
	1, 528,
	206, 528,
	417, 528,
	-2, 488,
	-1, 1416,
	246, 643,
	-2, 624,
	-1, 1512,
	1, 529,
	206, 529,
	417, 529,
	-2, 488,
	-1, 1540,
	246, 643,
	-2, 625,
	-1, 1910,
	55, 503,
	56, 503,
	-2, 488,
	-1, 1914,
	55, 503,
	56, 503,
	-2, 488,
	-1, 1926,
	55, 507,
	56, 507,
	-2, 488,
	-1, 1929,
	55, 508,
	56, 508,
	-2, 488,
}

const yyPrivate = 57344

const yyLast = 16056

var yyAct = [...]int{
	701, 1099, 1916, 1914, 1913, 1921, 1887, 573, 1860, 1509,
	692, 1100, 571, 1757, 590, 1831, 1552, 1876, 1815, 1733,
	522, 1816, 1711, 1791, 81, 1670, 488, 280, 1507, 758,
	1041, 1665, 1721, 1574, 291, 1645, 84, 1409, 430, 1327,
	81, 293, 520, 1541, 1479, 380, 475, 1226, 1480, 325,
	325, 1482, 1573, 1323, 746, 549, 689, 1491, 80, 1300,
	1343, 1487, 1508, 1328, 1201, 1461, 1360, 1305, 1332, 842,
	1359, 1044, 381, 1010, 1259, 286, 857, 860, 530, 851,
	81, 843, 653, 852, 1133, 492, 1195, 739, 686, 714,
	572, 1516, 1052, 284, 19, 703, 51, 661, 582, 331,
	599, 52, 330, 1101, 1098, 300, 300, 687, 542, 743,
	1317, 715, 716, 275, 405, 1024, 432, 1016, 295, 278,
	791, 760, 373, 513, 297, 678, 1031, 52, 418, 296,
	287, 447, 77, 845, 75, 1437, 1027, 499, 1749, 1301,
	1182, 374, 1196, 1774, 1189, 467, 495, 733, 360, 395,
	394, 728, 729, 350, 487, 1803, 458, 486, 489, 490,
	489, 490, 718, 695, 500, 462, 1819, 1820, 327, 1835,
	390, 19, 387, 1663, 391, 389, 531, 1741, 52, 393,
	342, 1666, 1667, 1668, 1669, 1744, 497, 1801, 1789, 699,
	1306, 1307, 1308, 1309, 1168, 1344, 410, 1204, 1202, 1199,
	1203, 1205, 740, 1198, 1197, 1204, 1202, 1347, 1203, 1205,
	1029, 361, 1644, 1027, 1561, 1560, 449, 460, 461, 1557,
	1505, 1425, 459, 1399, 448, 1656, 1470, 1805, 1474, 1798,
	679, 1650, 769, 770, 768, 1906, 1444, 1448, 1450, 1452,
	1454, 1455, 1457, 453, 1371, 1369, 1370, 1346, 1922, 1439,
	1440, 1441, 1442, 1423, 1424, 1445, 681, 1426, 1818, 1427,
	1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1443,
	1748, 454, 1473, 392, 1842, 81, 409, 1447, 1449, 1451,
	1453, 1456, 1800, 1759, 1849, 408, 81, 344, 1722, 1723,
	1724, 1726, 1725, 1207, 1208, 1209, 1210, 341, 340, 1310,
	1639, 1755, 1756, 457, 1759, 1438, 1782, 1897, 357, 1735,
	1608, 1607, 434, 1333, 1336, 1630, 329, 1765, 336, 384,
	414, 496, 1190, 509, 396, 1634, 1807, 1808, 435, 456,
	680, 1917, 1751, 1752, 485, 484, 1923, 1888, 1596, 1260,
	404, 476, 498, 451, 1739, 444, 1186, 1075, 1035, 478,
	407, 1336, 1400, 480, 285, 452, 455, 1489, 1488, 1213,
	1224, 1471, 1073, 1072, 1071, 450, 503, 501, 502, 731,
	325, 363, 730, 732, 1070, 362, 381, 381, 381, 365,
	52, 1901, 1864, 477, 1303, 479, 1879, 1234, 1180, 439,
	1179, 1167, 386, 440, 1161, 1215, 1696, 1065, 545, 412,
	1039, 1009, 345, 773, 655, 803, 526, 652, 527, 544,
	413, 1806, 335, 406, 658, 753, 409, 81, 81, 81,
	81, 1293, 1337, 525, 1148, 662, 300, 1330, 367, 366,
	514, 1331, 1334, 471, 436, 437, 438, 523, 482, 489,
	490, 515, 1295, 493, 325, 325, 409, 325, 434, 1883,
	1750, 1874, 434, 354, 1318, 693, 1026, 1301, 481, 1337,
	741, 355, 1469, 343, 435, 325, 325, 470, 435, 1214,
	676, 489, 490, 1046, 706, 1734, 325, 464, 325, 1446,
	709, 700, 81, 1335, 704, 1880, 1030, 512, 508, 533,
	1769, 446, 1294, 524, 1163, 1077, 723, 648, 325, 708,
	1183, 300, 519, 694, 52, 491, 1025, 494, 468, 1014,
	325, 381, 1472, 325, 1635, 1636, 711, 516, 517, 518,
	1632, 721, 411, 532, 1631, 747, 483, 710, 754, 1204,
	1202, 747, 1203, 1205, 300, 1095, 768, 325, 325, 757,
	81, 770, 768, 724, 675, 771, 1096, 663, 664, 665,
	666, 384, 1641, 697, 3, 674, 1640, 511, 774, 1465,
	1460, 761, 1103, 1102, 705, 1625, 300, 1896, 1235, 691,
	712, 713, 682, 698, 759, 719, 364, 762, 820, 536,
	537, 538, 539, 540, 720, 332, 725, 1707, 819, 696,
	1705, 1602, 1912, 1893, 300, 1843, 707, 1877, 1878, 1140,
	717, 1697, 1699, 1700, 1701, 1698, 521, 1865, 1895, 352,
	827, 353, 360, 1138, 1139, 1137, 351, 349, 348, 356,
	742, 358, 359, 1706, 386, 755, 1704, 1215, 737, 752,
	1042, 1043, 402, 738, 436, 437, 438, 523, 283, 12,
	749, 750, 751, 436, 437, 438, 523, 368, 1839, 1108,
	849, 849, 854, 769, 770, 768, 756, 1812, 388, 1787,
	1011, 436, 437, 438, 1411, 1737, 856, 1038, 821, 822,
	823, 824, 1736, 390, 1703, 1713, 862, 818, 1691, 769,
	770, 768, 825, 769, 770, 768, 797, 1264, 281, 6,
	1263, 1690, 863, 524, 806, 807, 808, 809, 810, 803,
	1536, 840, 524, 1689, 1037, 310, 1686, 309, 313, 305,
	1702, 81, 1693, 769, 770, 768, 12, 1111, 280, 301,
	1412, 1680, 1677, 832, 1054, 1067, 1113, 769, 770, 768,
	320, 282, 5, 848, 325, 1676, 761, 777, 778, 779,
	780, 781, 782, 1012, 775, 1055, 390, 1673, 1692, 1915,
	391, 1588, 762, 855, 325, 1587, 389, 1586, 52, 1518,
	1792, 747, 747, 747, 1655, 545, 6, 81, 1585, 769,
	770, 768, 861, 1092, 1093, 1582, 544, 1008, 1405, 1404,
	1089, 1090, 1091, 1021, 1241, 1403, 769, 770, 768, 1402,
	300, 1109, 1110, 1288, 1056, 1057, 1058, 1068, 656, 1106,
	1059, 1053, 1837, 1811, 1390, 1712, 1061, 1797, 1063, 5,
	1082, 1776, 1034, 1763, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 769, 770, 768, 1142,
	1143, 1062, 1097, 717, 1064, 1151, 840, 1060, 1146, 769,
	770, 768, 1088, 436, 437, 438, 1085, 1762, 1694, 1687,
	1683, 1153, 1074, 1682, 1681, 1646, 1627, 1227, 1413, 1078,
	1079, 1080, 801, 811, 812, 804, 805, 806, 807, 808,
	809, 810, 803, 1086, 1315, 1926, 303, 302, 306, 1314,
	1522, 1313, 1312, 1036, 308, 1385, 836, 835, 834, 1104,
	1105, 1526, 1107, 657, 1237, 1931, 312, 1114, 1115, 1116,
	1117, 1904, 1118, 1119, 1120, 1784, 1141, 769, 770, 768,
	683, 1515, 1135, 1379, 1783, 1517, 1519, 1521, 1770, 1523,
	1524, 1525, 1527, 1528, 1529, 1531, 1532, 1533, 1534, 1925,
	1924, 1361, 1658, 1149, 1166, 769, 770, 768, 1033, 1907,
	1903, 1902, 1152, 1267, 1154, 1155, 1237, 1266, 814, 1657,
	817, 1537, 1033, 1891, 1371, 1369, 1370, 1033, 1890, 1366,
	1378, 1365, 1364, 1362, 815, 816, 813, 1499, 802, 801,
	811, 812, 804, 805, 806, 807, 808, 809, 810, 803,
	1377, 1535, 769, 770, 768, 1498, 307, 311, 684, 1497,
	315, 685, 1863, 1862, 317, 318, 319, 1478, 1514, 321,
	322, 1414, 769, 770, 768, 1592, 1826, 1391, 1894, 1348,
	1169, 1592, 1821, 1530, 409, 1363, 1084, 1809, 1882, 1520,
	1592, 1780, 1376, 662, 1592, 1779, 1174, 1270, 325, 1175,
	1268, 325, 1177, 1265, 409, 76, 325, 23, 39, 24,
	1193, 1592, 1778, 1185, 769, 770, 768, 1246, 1007, 1191,
	1192, 1243, 704, 802, 801, 811, 812, 804, 805, 806,
	807, 808, 809, 810, 803, 1236, 1221, 804, 805, 806,
	807, 808, 809, 810, 803, 1223, 325, 1150, 1375, 1592,
	1777, 1374, 677, 73, 81, 81, 534, 1184, 811, 812,
	804, 805, 806, 807, 808, 809, 810, 803, 76, 1212,
	769, 770, 768, 769, 770, 768, 1768, 1767, 1659, 1242,
	463, 1173, 1172, 1238, 442, 389, 1239, 1240, 1229, 1230,
	1367, 1368, 1718, 1719, 1187, 1276, 1247, 1248, 1249, 1250,
	1251, 1252, 1253, 1544, 766, 1181, 1194, 441, 1254, 1718,
	1717, 442, 1217, 1053, 1211, 1871, 73, 1218, 1237, 1219,
	1156, 334, 1257, 1258, 1220, 1222, 1415, 1262, 1661, 1660,
	849, 333, 1280, 849, 1225, 1228, 1283, 1271, 1547, 747,
	1592, 1591, 1289, 1027, 1542, 747, 1392, 1011, 764, 325,
	1555, 1556, 654, 325, 325, 1543, 1373, 325, 1286, 1233,
	802, 801, 811, 812, 804, 805, 806, 807, 808, 809,
	810, 803, 535, 444, 1287, 1171, 1394, 81, 769, 770,
	768, 1162, 1275, 1237, 1380, 1237, 1372, 409, 1282, 1548,
	1237, 1245, 1255, 1927, 1358, 1013, 1326, 1237, 1244, 1256,
	1279, 1357, 443, 390, 81, 1353, 1135, 818, 1272, 1296,
	1298, 1316, 1281, 1278, 1284, 1285, 769, 770, 768, 1355,
	1291, 1290, 1277, 769, 770, 768, 1356, 1171, 1170, 52,
	76, 1144, 23, 39, 24, 1311, 76, 1292, 1165, 1164,
	1159, 1158, 1033, 1032, 1145, 1299, 444, 1084, 769, 770,
	768, 1040, 1389, 769, 770, 768, 510, 76, 1873, 1867,
	650, 1850, 1847, 647, 1554, 1845, 1329, 1786, 325, 1731,
	1716, 1338, 1339, 1714, 1353, 1709, 1340, 1387, 73, 1352,
	1388, 1653, 1652, 1651, 649, 1648, 1638, 1384, 1623, 1481,
	1568, 1550, 1567, 1483, 1319, 1320, 1492, 1494, 1466, 1407,
	1459, 1381, 1136, 1216, 1386, 73, 1176, 1157, 1076, 1069,
	1410, 841, 839, 1549, 1551, 838, 1393, 837, 833, 792,
	830, 1383, 654, 1477, 1395, 828, 826, 73, 800, 799,
	1408, 798, 1476, 420, 423, 424, 425, 421, 796, 422,
	426, 1398, 1401, 795, 794, 1406, 1855, 793, 790, 1463,
	789, 420, 423, 424, 425, 421, 788, 422, 426, 787,
	786, 1458, 785, 1422, 1853, 1557, 784, 325, 325, 1464,
	1462, 81, 1462, 1468, 747, 783, 659, 1545, 409, 1484,
	1485, 1486, 651, 445, 1017, 1018, 409, 1513, 1649, 1049,
	1817, 1206, 1083, 1467, 76, 1326, 23, 39, 24, 1495,
	1490, 1020, 465, 294, 671, 1506, 1911, 669, 1496, 672,
	1023, 1022, 670, 673, 64, 424, 425, 1501, 71, 668,
	667, 1869, 1160, 1502, 1503, 1828, 1558, 528, 1504, 529,
	1054, 1575, 1577, 1302, 1575, 1575, 1562, 40, 1047, 1538,
	1565, 1566, 73, 1564, 1396, 1563, 1042, 1043, 1581, 727,
	428, 1397, 469, 326, 1569, 1570, 1571, 1572, 398, 400,
	401, 1103, 1102, 473, 474, 1576, 802, 801, 811, 812,
	804, 805, 806, 807, 808, 809, 810, 803, 1868, 1836,
	1793, 1790, 1580, 415, 1746, 1598, 1578, 1579, 1745, 1743,
	1674, 1475, 1594, 1584, 420, 423, 424, 425, 421, 1351,
	422, 426, 472, 1590, 334, 333, 1350, 1232, 67, 68,
	654, 69, 70, 1178, 333, 1857, 1856, 1857, 274, 1856,
	427, 346, 1, 844, 1593, 850, 1710, 1626, 81, 1827,
	1859, 1785, 1601, 1830, 589, 574, 1738, 1662, 1788, 1410,
	1740, 1664, 1589, 1188, 466, 1273, 1274, 611, 601, 829,
	1558, 1577, 602, 646, 1624, 399, 1628, 600, 1583, 1345,
	339, 397, 1642, 409, 347, 56, 66, 74, 1643, 38,
	1675, 1559, 1493, 1112, 1647, 1147, 1920, 1910, 1886, 1866,
	1758, 1500, 1905, 1799, 1654, 65, 63, 62, 1848, 1841,
	1754, 1595, 1708, 298, 1672, 1599, 1600, 734, 1603, 1604,
	1605, 1606, 434, 504, 1609, 1610, 1611, 1612, 1613, 1614,
	1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 435, 409,
	1688, 371, 409, 409, 409, 1671, 802, 801, 811, 812,
	804, 805, 806, 807, 808, 809, 810, 803, 1732, 378,
	660, 1304, 1200, 1045, 1028, 688, 299, 1720, 1747, 1715,
	1728, 1729, 1730, 1727, 802, 801, 811, 812, 804, 805,
	806, 807, 808, 809, 810, 803, 1742, 337, 1048, 338,
	1051, 48, 1050, 776, 1753, 1134, 831, 49, 547, 581,
	81, 575, 1678, 1679, 1342, 1341, 1553, 409, 1684, 1685,
	722, 1760, 1761, 26, 429, 1382, 1771, 767, 858, 83,
	1066, 859, 409, 1832, 588, 587, 586, 585, 419, 1766,
	417, 416, 290, 50, 759, 1775, 802, 801, 811, 812,
	804, 805, 806, 807, 808, 809, 810, 803, 289, 1231,
	1781, 1349, 763, 765, 1814, 1813, 1772, 1773, 1637, 1794,
	1795, 1695, 1633, 1629, 1269, 1764, 1512, 1511, 1539, 1540,
	1546, 1421, 1802, 1804, 1417, 1419, 1420, 1834, 1418, 1416,
	1324, 1810, 1325, 1322, 1321, 1019, 1015, 846, 853, 403,
	702, 1833, 78, 1822, 1823, 1824, 1825, 288, 1087, 541,
	72, 11, 18, 17, 1844, 16, 1846, 1838, 47, 1840,
	802, 801, 811, 812, 804, 805, 806, 807, 808, 809,
	810, 803, 1851, 46, 45, 1854, 1861, 1852, 44, 15,
	8, 43, 42, 1858, 41, 14, 409, 13, 409, 37,
	36, 35, 34, 33, 32, 693, 1870, 693, 1872, 1796,
	31, 30, 29, 1875, 1834, 1885, 28, 27, 9, 55,
	54, 53, 20, 21, 409, 1881, 22, 61, 1833, 1884,
	60, 59, 1889, 693, 1892, 58, 57, 25, 10, 7,
	1861, 1898, 4, 2, 0, 1900, 0, 0, 0, 0,
	0, 0, 1908, 0, 0, 0, 0, 0, 0, 0,
	1909, 0, 0, 0, 0, 0, 0, 1919, 0, 1918,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1930,
	1929, 1928, 1919, 976, 962, 0, 924, 978, 896, 912,
	986, 914, 915, 950, 874, 933, 207, 910, 866, 899,
	900, 868, 907, 869, 897, 926, 152, 895, 965, 936,
	177, 984, 179, 0, 0, 236, 192, 0, 0, 929,
	967, 931, 955, 923, 951, 882, 944, 979, 911, 948,
	980, 0, 0, 0, 0, 436, 437, 438, 0, 0,
	0, 0, 135, 0, 0, 0, 0, 0, 947, 972,
	909, 0, 0, 883, 977, 930, 949, 0, 867, 945,
	0, 872, 875, 985, 970, 904, 905, 0, 0, 0,
	0, 0, 0, 0, 927, 932, 952, 920, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 901, 0, 940,
	0, 0, 0, 877, 873, 0, 925, 0, 126, 241,
	255, 136, 232, 269, 140, 239, 132, 206, 228, 128,
	253, 238, 189, 171, 172, 127, 0, 223, 150, 163,
	147, 204, 974, 975, 146, 272, 876, 263, 130, 131,
	262, 203, 250, 254, 190, 184, 129, 252, 188, 183,
	175, 154, 167, 216, 182, 217, 168, 194, 193, 195,
	996, 997, 998, 999, 1000, 881, 0, 902, 953, 0,
	865, 961, 968, 922, 265, 971, 919, 918, 1003, 0,
	1002, 240, 1004, 1005, 176, 966, 898, 908, 903, 906,
	226, 209, 973, 939, 214, 224, 180, 251, 218, 256,
	242, 264, 956, 219, 122, 243, 149, 191, 133, 134,
	145, 151, 153, 155, 156, 200, 201, 212, 231, 244,
	245, 246, 148, 141, 225, 142, 165, 143, 123, 233,
	144, 124, 213, 249, 1001, 162, 221, 187, 125, 186,
	215, 248, 247, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 159, 864, 260, 0, 205, 963, 870,
	880, 878, 916, 941, 942, 943, 988, 958, 960, 959,
	987, 229, 0, 0, 0, 0, 0, 170, 211, 0,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 871, 0, 237, 258, 271, 261, 917, 889, 928,
	270, 892, 890, 957, 891, 946, 989, 196, 197, 198,
	199, 913, 139, 937, 921, 990, 991, 992, 993, 994,
	995, 894, 969, 158, 164, 0, 166, 138, 210, 161,
	268, 173, 202, 169, 234, 174, 181, 222, 267, 208,
	227, 137, 257, 235, 185, 160, 888, 893, 887, 934,
	935, 981, 982, 983, 954, 879, 964, 884, 886, 885,
	938, 121, 607, 178, 266, 220, 157, 0, 0, 0,
	0, 0, 207, 0, 0, 0, 0, 0, 583, 0,
	0, 0, 152, 748, 0, 0, 177, 0, 179, 0,
	0, 236, 192, 0, 0, 0, 0, 623, 631, 0,
	0, 0, 0, 1006, 259, 744, 0, 0, 576, 0,
	0, 548, 613, 612, 591, 0, 1261, 0, 135, 592,
	0, 597, 0, 593, 596, 594, 595, 0, 0, 615,
	0, 0, 0, 0, 0, 546, 580, 802, 801, 811,
	812, 804, 805, 806, 807, 808, 809, 810, 803, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	578, 0, 0, 0, 0, 608, 0, 579, 0, 0,
	745, 0, 598, 0, 126, 241, 255, 136, 232, 269,
	140, 239, 132, 206, 228, 128, 253, 238, 189, 171,
	172, 127, 0, 223, 150, 163, 147, 204, 605, 606,
	146, 570, 603, 263, 130, 131, 262, 203, 250, 254,
	190, 184, 129, 252, 188, 183, 175, 154, 167, 216,
	182, 217, 168, 194, 193, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 0, 621, 0, 0, 0, 240, 0, 0,
	176, 0, 0, 0, 604, 0, 226, 209, 634, 0,
	214, 224, 180, 251, 218, 256, 242, 264, 0, 219,
	122, 243, 149, 191, 133, 134, 145, 151, 153, 155,
	156, 200, 201, 212, 231, 244, 245, 246, 148, 141,
	225, 142, 165, 143, 123, 233, 144, 124, 213, 249,
	0, 162, 221, 187, 125, 186, 215, 248, 247, 273,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 159,
	0, 260, 619, 205, 633, 614, 616, 617, 620, 624,
	625, 626, 627, 628, 630, 632, 635, 229, 0, 0,
	0, 0, 0, 170, 211, 0, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 237,
	258, 271, 569, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 609, 196, 197, 198, 199, 622, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 158,
	164, 0, 166, 138, 210, 161, 268, 173, 202, 169,
	234, 174, 181, 222, 267, 208, 227, 137, 257, 235,
	185, 160, 641, 618, 640, 642, 643, 639, 644, 645,
	629, 584, 0, 637, 636, 638, 0, 121, 0, 178,
	266, 220, 157, 85, 550, 551, 552, 553, 554, 555,
	556, 93, 557, 95, 96, 97, 98, 558, 100, 559,
	102, 103, 104, 560, 561, 562, 563, 109, 110, 111,
	564, 565, 114, 115, 116, 117, 566, 567, 568, 607,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 0, 0, 583, 0, 0, 0, 152,
	1899, 0, 0, 177, 0, 179, 0, 0, 236, 192,
	0, 0, 0, 0, 623, 631, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 576, 0, 0, 548, 613,
	612, 591, 0, 0, 0, 135, 592, 0, 597, 0,
	593, 596, 594, 595, 0, 0, 615, 0, 0, 0,
	0, 0, 546, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 577, 578, 0, 0,
	0, 0, 608, 0, 579, 0, 0, 610, 0, 598,
	0, 126, 241, 255, 136, 232, 269, 140, 239, 132,
	206, 228, 128, 253, 238, 189, 171, 172, 127, 0,
	223, 150, 163, 147, 204, 605, 606, 146, 570, 603,
	263, 130, 131, 262, 203, 250, 254, 190, 184, 129,
	252, 188, 183, 175, 154, 167, 216, 182, 217, 168,
	194, 193, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 265, 0, 0,
	621, 0, 0, 0, 240, 0, 0, 176, 0, 0,
	0, 604, 0, 226, 209, 634, 0, 214, 224, 180,
	251, 218, 256, 242, 264, 0, 219, 122, 243, 149,
	191, 133, 134, 145, 151, 153, 155, 156, 200, 201,
	212, 231, 244, 245, 246, 148, 141, 225, 142, 165,
	143, 123, 233, 144, 124, 213, 249, 0, 162, 221,
	187, 125, 186, 215, 248, 247, 273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 159, 0, 260, 619,
	205, 633, 614, 616, 617, 620, 624, 625, 626, 627,
	628, 630, 632, 635, 229, 0, 0, 0, 0, 0,
	170, 211, 0, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 237, 258, 271, 569,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 609,
	196, 197, 198, 199, 622, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 158, 164, 0, 166,
	138, 210, 161, 268, 173, 202, 169, 234, 174, 181,
	222, 267, 208, 227, 137, 257, 235, 185, 160, 641,
	618, 640, 642, 643, 639, 644, 645, 629, 584, 0,
	637, 636, 638, 0, 121, 0, 178, 266, 220, 157,
	85, 550, 551, 552, 553, 554, 555, 556, 93, 557,
	95, 96, 97, 98, 558, 100, 559, 102, 103, 104,
	560, 561, 562, 563, 109, 110, 111, 564, 565, 114,
	115, 116, 117, 566, 567, 568, 607, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 0, 0,
	0, 0, 583, 0, 0, 0, 152, 748, 0, 0,
	177, 0, 179, 0, 0, 236, 192, 0, 0, 0,
	0, 623, 631, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 576, 0, 0, 548, 613, 612, 591, 0,
	0, 0, 135, 592, 0, 597, 0, 593, 596, 594,
	595, 0, 0, 615, 0, 0, 0, 0, 0, 546,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 578, 0, 0, 0, 0, 608,
	0, 579, 0, 0, 610, 0, 598, 0, 126, 241,
	255, 136, 232, 269, 140, 239, 132, 206, 228, 128,
	253, 238, 189, 171, 172, 127, 0, 223, 150, 163,
	147, 204, 605, 606, 146, 570, 603, 263, 130, 131,
	262, 203, 250, 254, 190, 184, 129, 252, 188, 183,
	175, 154, 167, 216, 182, 217, 168, 194, 193, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 621, 0, 0,
	0, 240, 0, 0, 176, 0, 0, 0, 604, 0,
	226, 209, 634, 0, 214, 224, 180, 251, 218, 256,
	242, 264, 0, 219, 122, 243, 149, 191, 133, 134,
	145, 151, 153, 155, 156, 200, 201, 212, 231, 244,
	245, 246, 148, 141, 225, 142, 165, 143, 123, 233,
	144, 124, 213, 249, 0, 162, 221, 187, 125, 186,
	215, 248, 247, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 159, 0, 260, 619, 205, 633, 614,
	616, 617, 620, 624, 625, 626, 627, 628, 630, 632,
	635, 229, 0, 0, 0, 0, 0, 170, 211, 0,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 237, 258, 271, 569, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 609, 196, 197, 198,
	199, 622, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 158, 164, 0, 166, 138, 210, 161,
	268, 173, 202, 169, 234, 174, 181, 222, 267, 208,
	227, 137, 257, 235, 185, 160, 641, 618, 640, 642,
	643, 639, 644, 645, 629, 584, 0, 637, 636, 638,
	0, 121, 0, 178, 266, 220, 157, 85, 550, 551,
	552, 553, 554, 555, 556, 93, 557, 95, 96, 97,
	98, 558, 100, 559, 102, 103, 104, 560, 561, 562,
	563, 109, 110, 111, 564, 565, 114, 115, 116, 117,
	566, 567, 568, 76, 259, 607, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 0, 0, 0,
	0, 583, 0, 0, 0, 152, 0, 0, 0, 177,
	0, 179, 0, 0, 236, 192, 0, 0, 0, 0,
	623, 631, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 576, 0, 0, 548, 613, 612, 591, 0, 0,
	0, 135, 592, 0, 597, 0, 593, 596, 594, 595,
	0, 0, 615, 0, 0, 0, 0, 0, 546, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 578, 0, 0, 0, 0, 608, 0,
	579, 0, 0, 610, 0, 598, 0, 126, 241, 255,
	136, 232, 269, 140, 239, 132, 206, 228, 128, 253,
	238, 189, 171, 172, 127, 0, 223, 150, 163, 147,
	204, 605, 606, 146, 570, 603, 263, 130, 131, 262,
	203, 250, 254, 190, 184, 129, 252, 188, 183, 175,
	154, 167, 216, 182, 217, 168, 194, 193, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 0, 0, 621, 0, 0, 0,
	240, 0, 0, 176, 0, 0, 0, 604, 0, 226,
	209, 634, 0, 214, 224, 180, 251, 218, 256, 242,
	264, 0, 219, 122, 243, 149, 191, 133, 134, 145,
	151, 153, 155, 156, 200, 201, 212, 231, 244, 245,
	246, 148, 141, 225, 142, 165, 143, 123, 233, 144,
	124, 213, 249, 0, 162, 221, 187, 125, 186, 215,
	248, 247, 273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 159, 0, 260, 619, 205, 633, 614, 616,
	617, 620, 624, 625, 626, 627, 628, 630, 632, 635,
	229, 0, 0, 0, 0, 0, 170, 211, 0, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 237, 258, 271, 569, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 609, 196, 197, 198, 199,
	622, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 158, 164, 0, 166, 138, 210, 161, 268,
	173, 202, 169, 234, 174, 181, 222, 267, 208, 227,
	137, 257, 235, 185, 160, 641, 618, 640, 642, 643,
	639, 644, 645, 629, 584, 0, 637, 636, 638, 0,
	121, 0, 178, 266, 220, 157, 85, 550, 551, 552,
	553, 554, 555, 556, 93, 557, 95, 96, 97, 98,
	558, 100, 559, 102, 103, 104, 560, 561, 562, 563,
	109, 110, 111, 564, 565, 114, 115, 116, 117, 566,
	567, 568, 607, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 0, 0, 0, 0, 583, 0,
	0, 0, 152, 0, 0, 0, 177, 0, 179, 0,
	0, 236, 192, 0, 0, 0, 0, 623, 631, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 576, 0,
	0, 548, 613, 612, 591, 0, 0, 0, 135, 592,
	0, 597, 0, 593, 596, 594, 595, 0, 0, 615,
	0, 0, 0, 0, 0, 546, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	578, 543, 0, 0, 0, 608, 0, 579, 0, 0,
	610, 0, 598, 0, 126, 241, 255, 136, 232, 269,
	140, 239, 132, 206, 228, 128, 253, 238, 189, 171,
	172, 127, 0, 223, 150, 163, 147, 204, 605, 606,
	146, 570, 603, 263, 130, 131, 262, 203, 250, 254,
	190, 184, 129, 252, 188, 183, 175, 154, 167, 216,
	182, 217, 168, 194, 193, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 0, 621, 0, 0, 0, 240, 0, 0,
	176, 0, 0, 0, 604, 0, 226, 209, 634, 0,
	214, 224, 180, 251, 218, 256, 242, 264, 0, 219,
	122, 243, 149, 191, 133, 134, 145, 151, 153, 155,
	156, 200, 201, 212, 231, 244, 245, 246, 148, 141,
	225, 142, 165, 143, 123, 233, 144, 124, 213, 249,
	0, 162, 221, 187, 125, 186, 215, 248, 247, 273,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 159,
	0, 260, 619, 205, 633, 614, 616, 617, 620, 624,
	625, 626, 627, 628, 630, 632, 635, 229, 0, 0,
	0, 0, 0, 170, 211, 0, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 237,
	258, 271, 569, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 609, 196, 197, 198, 199, 622, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 158,
	164, 0, 166, 138, 210, 161, 268, 173, 202, 169,
	234, 174, 181, 222, 267, 208, 227, 137, 257, 235,
	185, 160, 641, 618, 640, 642, 643, 639, 644, 645,
	629, 584, 0, 637, 636, 638, 0, 121, 0, 178,
	266, 220, 157, 85, 550, 551, 552, 553, 554, 555,
	556, 93, 557, 95, 96, 97, 98, 558, 100, 559,
	102, 103, 104, 560, 561, 562, 563, 109, 110, 111,
	564, 565, 114, 115, 116, 117, 566, 567, 568, 607,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 0, 0, 583, 0, 0, 0, 152,
	0, 0, 0, 177, 0, 179, 0, 0, 236, 192,
	0, 0, 0, 0, 623, 631, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 576, 0, 0, 548, 613,
	612, 591, 0, 0, 0, 135, 592, 0, 597, 0,
	593, 596, 594, 595, 0, 0, 615, 0, 0, 0,
	0, 0, 546, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 577, 578, 0, 0,
	0, 0, 608, 0, 579, 0, 0, 610, 0, 598,
	0, 126, 241, 255, 136, 232, 269, 140, 239, 132,
	206, 228, 128, 253, 238, 189, 171, 172, 127, 0,
	223, 150, 163, 147, 204, 605, 606, 146, 570, 603,
	263, 130, 131, 262, 203, 250, 254, 190, 184, 129,
	252, 188, 183, 175, 154, 167, 216, 182, 217, 168,
	194, 193, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 265, 0, 0,
	621, 0, 0, 0, 240, 0, 0, 176, 0, 0,
	0, 604, 0, 226, 209, 634, 0, 214, 224, 180,
	251, 218, 256, 242, 264, 0, 219, 122, 243, 149,
	191, 133, 134, 145, 151, 153, 155, 156, 200, 201,
	212, 231, 244, 245, 246, 148, 141, 225, 142, 165,
	143, 123, 233, 144, 124, 213, 249, 0, 162, 221,
	187, 125, 186, 215, 248, 247, 273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 159, 0, 260, 619,
	205, 633, 614, 616, 617, 620, 624, 625, 626, 627,
	628, 630, 632, 635, 229, 0, 0, 0, 0, 0,
	170, 211, 0, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 237, 258, 271, 569,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 609,
	196, 197, 198, 199, 622, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 158, 164, 0, 166,
	138, 210, 161, 268, 173, 202, 169, 234, 174, 181,
	222, 267, 208, 227, 137, 257, 235, 185, 160, 641,
	618, 640, 642, 643, 639, 644, 645, 629, 584, 0,
	637, 636, 638, 0, 121, 0, 178, 266, 220, 157,
	85, 550, 551, 552, 553, 554, 555, 556, 93, 557,
	95, 96, 97, 98, 558, 100, 559, 102, 103, 104,
	560, 561, 562, 563, 109, 110, 111, 564, 565, 114,
	115, 116, 117, 566, 567, 568, 607, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 0, 0,
	0, 0, 583, 0, 0, 0, 152, 0, 0, 0,
	177, 0, 179, 0, 0, 236, 192, 0, 0, 0,
	0, 623, 631, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 576, 0, 0, 548, 613, 612, 591, 0,
	0, 0, 135, 592, 0, 597, 0, 593, 596, 594,
	595, 0, 0, 615, 0, 0, 0, 0, 0, 0,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 578, 0, 0, 0, 0, 608,
	0, 579, 0, 0, 610, 0, 598, 0, 126, 241,
	255, 136, 232, 269, 140, 239, 132, 206, 228, 128,
	253, 238, 189, 171, 172, 127, 0, 223, 150, 163,
	147, 204, 605, 606, 146, 570, 603, 263, 130, 131,
	262, 203, 250, 254, 190, 184, 129, 252, 188, 183,
	175, 154, 167, 216, 182, 217, 168, 194, 193, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 621, 0, 0,
	0, 240, 0, 0, 176, 0, 0, 0, 604, 0,
	226, 209, 634, 0, 214, 224, 180, 251, 218, 256,
	242, 264, 0, 219, 122, 243, 149, 191, 133, 134,
	145, 151, 153, 155, 156, 200, 201, 212, 231, 244,
	245, 246, 148, 141, 225, 142, 165, 143, 123, 233,
	144, 124, 213, 249, 0, 162, 221, 187, 125, 186,
	215, 248, 247, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 159, 0, 260, 619, 205, 633, 614,
	616, 617, 620, 624, 625, 626, 627, 628, 630, 632,
	635, 229, 0, 0, 0, 0, 0, 170, 211, 0,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 237, 258, 271, 569, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 609, 196, 197, 198,
	199, 622, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 158, 164, 0, 166, 138, 210, 161,
	268, 173, 202, 169, 234, 174, 181, 222, 267, 208,
	227, 137, 257, 235, 185, 160, 641, 618, 640, 642,
	643, 639, 644, 645, 629, 584, 0, 637, 636, 638,
	0, 121, 0, 178, 266, 220, 157, 85, 550, 551,
	552, 553, 554, 555, 556, 93, 557, 95, 96, 97,
	98, 558, 100, 559, 102, 103, 104, 560, 561, 562,
	563, 109, 110, 111, 564, 565, 114, 115, 116, 117,
	566, 567, 568, 607, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 0, 0, 0, 583,
	0, 0, 0, 152, 0, 0, 0, 177, 0, 179,
	0, 0, 236, 192, 0, 0, 0, 0, 623, 631,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 548, 613, 612, 591, 0, 0, 0, 135,
	592, 0, 597, 0, 593, 596, 594, 595, 0, 0,
	615, 0, 0, 0, 0, 0, 546, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	577, 578, 0, 0, 0, 0, 608, 0, 579, 0,
	0, 610, 0, 598, 0, 126, 241, 255, 136, 232,
	269, 140, 239, 132, 206, 228, 128, 253, 238, 189,
	171, 172, 127, 0, 223, 150, 163, 147, 204, 605,
	606, 146, 570, 603, 263, 130, 131, 262, 203, 250,
	254, 190, 184, 129, 252, 188, 183, 175, 154, 167,
	216, 182, 217, 168, 194, 193, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 265, 0, 0, 621, 0, 0, 0, 240, 0,
	0, 176, 0, 0, 0, 604, 0, 226, 209, 634,
	0, 214, 224, 180, 251, 218, 256, 242, 264, 0,
	219, 122, 243, 149, 191, 133, 134, 145, 151, 153,
	155, 156, 200, 201, 212, 231, 244, 245, 246, 148,
	141, 225, 142, 165, 143, 123, 233, 144, 124, 213,
	249, 0, 162, 221, 187, 125, 186, 215, 248, 247,
	273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	159, 0, 260, 619, 205, 633, 614, 616, 617, 620,
	624, 625, 626, 627, 628, 630, 632, 635, 229, 0,
	0, 0, 0, 0, 170, 211, 0, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	237, 258, 271, 569, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 609, 196, 197, 198, 199, 622, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	158, 164, 0, 166, 138, 210, 161, 268, 173, 202,
	169, 234, 174, 181, 222, 267, 208, 227, 137, 257,
	235, 185, 160, 641, 618, 640, 642, 643, 639, 644,
	645, 629, 584, 0, 637, 636, 638, 0, 121, 0,
	178, 266, 220, 157, 85, 550, 551, 552, 553, 554,
	555, 556, 93, 557, 95, 96, 97, 98, 558, 100,
	559, 102, 103, 104, 560, 561, 562, 563, 109, 110,
	111, 564, 565, 114, 115, 116, 117, 566, 567, 568,
	310, 259, 309, 313, 305, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 152, 0, 0, 320, 177, 0, 179, 0,
	0, 236, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 324, 0, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 241, 255, 136, 232, 269,
	140, 239, 132, 206, 228, 128, 253, 238, 189, 171,
	172, 127, 0, 223, 150, 163, 147, 204, 0, 0,
	146, 272, 0, 263, 130, 131, 262, 203, 250, 254,
	190, 184, 129, 252, 188, 183, 175, 154, 167, 216,
	182, 217, 168, 194, 193, 195, 0, 0, 0, 0,
	0, 303, 302, 306, 0, 0, 0, 0, 0, 308,
	265, 0, 0, 0, 0, 0, 0, 240, 0, 0,
	176, 312, 0, 0, 0, 0, 226, 209, 0, 0,
	214, 224, 180, 251, 218, 304, 242, 264, 0, 328,
	122, 243, 149, 191, 133, 134, 145, 151, 153, 155,
	156, 200, 201, 212, 231, 244, 245, 246, 148, 141,
	225, 142, 165, 143, 123, 233, 144, 124, 213, 249,
	0, 162, 221, 187, 125, 186, 215, 248, 247, 273,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 159,
	0, 260, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 229, 0, 0,
	0, 307, 311, 314, 211, 315, 316, 0, 0, 317,
	318, 319, 0, 0, 321, 322, 0, 0, 0, 237,
	258, 271, 261, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 196, 197, 198, 199, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 158,
	164, 0, 166, 138, 210, 161, 268, 173, 202, 169,
	234, 174, 181, 222, 267, 208, 227, 137, 257, 235,
	185, 160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 178,
	266, 220, 157, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 310,
	259, 309, 313, 305, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 152, 0, 0, 320, 177, 0, 179, 0, 0,
	236, 192, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	323, 0, 0, 324, 0, 0, 0, 135, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 241, 255, 136, 232, 269, 140,
	239, 132, 206, 228, 128, 253, 238, 189, 171, 172,
	127, 0, 223, 150, 163, 147, 204, 0, 0, 146,
	272, 0, 263, 130, 131, 262, 203, 250, 254, 190,
	184, 129, 252, 188, 183, 175, 154, 167, 216, 182,
	217, 168, 194, 193, 195, 0, 0, 0, 0, 0,
	303, 302, 306, 0, 0, 0, 0, 0, 308, 265,
	0, 0, 0, 0, 0, 0, 240, 0, 0, 176,
	312, 0, 0, 0, 0, 226, 209, 0, 0, 214,
	224, 180, 251, 218, 304, 242, 264, 0, 219, 122,
	243, 149, 191, 133, 134, 145, 151, 153, 155, 156,
	200, 201, 212, 231, 244, 245, 246, 148, 141, 225,
	142, 165, 143, 123, 233, 144, 124, 213, 249, 0,
	162, 221, 187, 125, 186, 215, 248, 247, 273, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 159, 0,
	260, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 229, 0, 0, 0,
	307, 311, 314, 211, 315, 316, 0, 0, 317, 318,
	319, 0, 0, 321, 322, 0, 0, 0, 237, 258,
	271, 261, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 196, 197, 198, 199, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 158, 164,
	0, 166, 138, 210, 161, 268, 173, 202, 169, 234,
	174, 181, 222, 267, 208, 227, 137, 257, 235, 185,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 178, 266,
	220, 157, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 207, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 0,
	0, 0, 177, 0, 179, 0, 0, 236, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1333, 1336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 241, 255, 136, 232, 269, 140, 239, 132, 206,
	228, 128, 253, 238, 189, 171, 172, 127, 0, 223,
	150, 163, 147, 204, 0, 0, 146, 272, 0, 263,
	130, 131, 262, 203, 250, 254, 190, 184, 129, 252,
	188, 183, 175, 154, 167, 216, 182, 217, 168, 194,
	193, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1337, 265, 0, 0, 0,
	1330, 0, 1329, 240, 1331, 1334, 176, 0, 0, 0,
	0, 0, 226, 209, 0, 0, 214, 224, 180, 251,
	218, 256, 242, 264, 0, 219, 122, 243, 149, 191,
	133, 134, 145, 151, 153, 155, 156, 200, 201, 212,
	231, 244, 245, 246, 148, 141, 225, 142, 165, 143,
	123, 233, 144, 124, 213, 249, 1335, 162, 221, 187,
	125, 186, 215, 248, 247, 273, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 159, 0, 260, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 229, 0, 0, 0, 0, 0, 170,
	211, 0, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 237, 258, 271, 261, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 196,
	197, 198, 199, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 158, 164, 0, 166, 138,
	210, 161, 268, 173, 202, 169, 234, 174, 181, 222,
	267, 208, 227, 137, 257, 235, 185, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 178, 266, 220, 157, 85,
	86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 76, 259, 23, 39, 24,
	0, 0, 0, 0, 0, 0, 0, 207, 276, 0,
	0, 0, 0, 0, 0, 0, 0, 152, 0, 0,
	0, 177, 0, 179, 0, 0, 236, 192, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	241, 255, 136, 232, 269, 140, 239, 132, 206, 228,
	128, 253, 238, 189, 171, 172, 127, 0, 223, 150,
	163, 147, 204, 0, 0, 146, 272, 0, 263, 130,
	131, 262, 203, 250, 254, 190, 184, 129, 252, 188,
	183, 175, 154, 167, 216, 182, 217, 168, 194, 193,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 265, 0, 0, 0, 0,
	0, 0, 240, 0, 0, 176, 0, 0, 0, 0,
	0, 226, 209, 0, 0, 214, 224, 180, 251, 218,
	256, 242, 264, 0, 219, 122, 243, 149, 191, 133,
	134, 145, 151, 153, 155, 156, 200, 201, 212, 231,
	244, 245, 246, 148, 141, 225, 142, 165, 143, 123,
	233, 144, 124, 213, 249, 0, 162, 221, 187, 125,
	186, 215, 248, 247, 273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 159, 0, 260, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 229, 0, 0, 0, 0, 0, 170, 211,
	0, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 237, 258, 271, 261, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 196, 197,
	198, 199, 277, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 158, 164, 0, 166, 138, 210,
	161, 268, 173, 202, 169, 234, 174, 181, 222, 267,
	208, 227, 137, 257, 235, 185, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 178, 266, 220, 157, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 207, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 152, 370, 0, 0, 177, 0,
	179, 0, 0, 236, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 382, 383, 0, 0, 0, 0,
	135, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 384, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 241, 255, 136,
	232, 269, 140, 239, 132, 206, 228, 128, 253, 238,
	189, 171, 172, 127, 0, 223, 150, 163, 147, 204,
	0, 0, 146, 272, 386, 263, 130, 385, 262, 203,
	250, 254, 190, 184, 129, 252, 188, 183, 175, 154,
	167, 216, 182, 217, 168, 194, 193, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 0, 0, 0, 0, 240,
	0, 0, 176, 0, 0, 0, 0, 0, 226, 209,
	0, 0, 214, 224, 180, 251, 218, 256, 242, 264,
	369, 219, 122, 243, 149, 191, 133, 134, 145, 151,
	153, 155, 156, 200, 201, 212, 231, 244, 245, 246,
	148, 141, 225, 142, 165, 143, 123, 233, 144, 124,
	213, 249, 0, 162, 221, 187, 125, 186, 215, 248,
	247, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 159, 0, 260, 0, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 229,
	0, 0, 0, 0, 0, 170, 211, 0, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 237, 258, 271, 261, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 372, 196, 197, 198, 199, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 158, 164, 0, 166, 138, 210, 161, 268, 173,
	379, 375, 376, 174, 181, 222, 267, 208, 227, 137,
	257, 235, 377, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 178, 266, 220, 157, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 207, 259, 0, 0, 0, 772, 0, 0, 0,
	0, 152, 0, 0, 0, 177, 0, 179, 0, 0,
	236, 192, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 769, 770, 768, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 241, 255, 136, 232, 269, 140,
	239, 132, 206, 228, 128, 253, 238, 189, 171, 172,
	127, 0, 223, 150, 163, 147, 204, 0, 0, 146,
	272, 0, 263, 130, 131, 262, 203, 250, 254, 190,
	184, 129, 252, 188, 183, 175, 154, 167, 216, 182,
	217, 168, 194, 193, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	0, 0, 0, 0, 0, 0, 240, 0, 0, 176,
	0, 0, 0, 0, 0, 226, 209, 0, 0, 214,
	224, 180, 251, 218, 256, 242, 264, 0, 219, 122,
	243, 149, 191, 133, 134, 145, 151, 153, 155, 156,
	200, 201, 212, 231, 244, 245, 246, 148, 141, 225,
	142, 165, 143, 123, 233, 144, 124, 213, 249, 0,
	162, 221, 187, 125, 186, 215, 248, 247, 273, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 159, 0,
	260, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 229, 0, 0, 0,
	0, 0, 170, 211, 0, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 237, 258,
	271, 261, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 196, 197, 198, 199, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 158, 164,
	0, 166, 138, 210, 161, 268, 173, 202, 169, 234,
	174, 181, 222, 267, 208, 227, 137, 257, 235, 185,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 178, 266,
	220, 157, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 207, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 0,
	0, 0, 177, 0, 179, 0, 0, 236, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 382, 383,
	0, 0, 0, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 241, 255, 136, 232, 269, 140, 239, 132, 206,
	228, 128, 253, 238, 189, 171, 172, 127, 0, 223,
	150, 163, 147, 204, 0, 0, 146, 272, 386, 263,
	130, 385, 262, 203, 250, 254, 190, 184, 129, 252,
	188, 183, 175, 154, 167, 216, 182, 217, 168, 194,
	193, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 0, 0, 0,
	0, 0, 0, 240, 0, 0, 176, 0, 0, 0,
	0, 0, 226, 209, 0, 0, 214, 224, 180, 251,
	218, 256, 242, 264, 0, 219, 122, 243, 149, 191,
	133, 134, 145, 151, 153, 155, 156, 200, 201, 212,
	231, 244, 245, 246, 148, 141, 225, 142, 165, 143,
	123, 233, 144, 124, 213, 249, 0, 162, 221, 187,
	125, 186, 215, 248, 247, 273, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 159, 0, 260, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 229, 0, 0, 0, 0, 0, 170,
	211, 0, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 237, 258, 271, 261, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 196,
	197, 198, 199, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 158, 164, 0, 166, 138,
	210, 161, 268, 173, 379, 375, 376, 174, 181, 222,
	267, 208, 227, 137, 257, 235, 377, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 178, 266, 220, 157, 85,
	86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 207, 259, 505, 0, 0,
	0, 0, 0, 0, 0, 152, 506, 0, 0, 177,
	0, 179, 0, 0, 236, 192, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 323, 0, 0, 324, 0, 0,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 241, 255,
	136, 232, 269, 140, 239, 132, 206, 228, 128, 253,
	238, 189, 171, 172, 127, 0, 223, 150, 163, 147,
	204, 0, 0, 146, 272, 0, 263, 130, 131, 262,
	203, 250, 254, 190, 184, 129, 252, 188, 183, 175,
	154, 167, 216, 182, 217, 168, 194, 193, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 0, 0, 0, 0, 0, 0,
	240, 0, 0, 176, 0, 0, 0, 0, 0, 226,
	209, 0, 0, 214, 224, 180, 251, 218, 256, 242,
	264, 0, 219, 122, 243, 149, 191, 133, 134, 145,
	151, 153, 155, 156, 200, 201, 212, 231, 244, 245,
	246, 148, 141, 225, 142, 165, 143, 123, 233, 144,
	124, 213, 249, 0, 162, 221, 187, 125, 186, 215,
	248, 247, 273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 159, 0, 260, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 0, 170, 211, 0, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 237, 258, 271, 261, 0, 0, 0, 270,
	0, 0, 0, 0, 507, 0, 196, 197, 198, 199,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 158, 164, 0, 166, 138, 210, 161, 268,
	173, 202, 169, 234, 174, 181, 222, 267, 208, 227,
	137, 257, 235, 185, 160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 178, 266, 220, 157, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 76, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 152, 0, 0, 0, 177, 0,
	179, 0, 0, 236, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 0, 847, 82, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 241, 255, 136,
	232, 269, 140, 239, 132, 206, 228, 128, 253, 238,
	189, 171, 172, 127, 0, 223, 150, 163, 147, 204,
	0, 0, 146, 272, 0, 263, 130, 131, 262, 203,
	250, 254, 190, 184, 129, 252, 188, 183, 175, 154,
	167, 216, 182, 217, 168, 194, 193, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 0, 0, 0, 0, 240,
	0, 0, 176, 0, 0, 0, 0, 0, 226, 209,
	0, 0, 214, 224, 180, 251, 218, 256, 242, 264,
	0, 219, 122, 243, 149, 191, 133, 134, 145, 151,
	153, 155, 156, 200, 201, 212, 231, 244, 245, 246,
	148, 141, 225, 142, 165, 143, 123, 233, 144, 124,
	213, 249, 0, 162, 221, 187, 125, 186, 215, 248,
	247, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 159, 0, 260, 0, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 229,
	0, 0, 0, 0, 0, 170, 211, 0, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 237, 258, 271, 261, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 158, 164, 0, 166, 138, 210, 161, 268, 173,
	202, 169, 234, 174, 181, 222, 267, 208, 227, 137,
	257, 235, 185, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 178, 266, 220, 157, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 207, 259, 736, 0, 0, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 177, 0, 179, 0, 0,
	236, 192, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	323, 0, 0, 324, 0, 0, 0, 135, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 241, 255, 136, 232, 269, 140,
	239, 132, 206, 228, 128, 253, 238, 189, 171, 172,
	127, 0, 223, 150, 163, 147, 204, 0, 0, 146,
	272, 0, 263, 130, 131, 262, 203, 250, 254, 190,
	184, 129, 252, 188, 183, 175, 154, 167, 216, 182,
	217, 168, 194, 193, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	0, 0, 0, 0, 0, 0, 240, 0, 0, 176,
	0, 0, 0, 0, 0, 226, 209, 0, 0, 214,
	224, 180, 251, 218, 256, 242, 264, 0, 219, 122,
	243, 149, 191, 133, 134, 145, 151, 153, 155, 156,
	200, 201, 212, 231, 244, 245, 246, 148, 141, 225,
	142, 165, 143, 123, 233, 144, 124, 213, 249, 0,
	162, 221, 187, 125, 186, 215, 248, 247, 273, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 159, 0,
	260, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 229, 0, 0, 0,
	0, 0, 170, 211, 0, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 237, 258,
	271, 261, 0, 0, 0, 270, 0, 0, 0, 0,
	735, 0, 196, 197, 198, 199, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 158, 164,
	0, 166, 138, 210, 161, 268, 173, 202, 169, 234,
	174, 181, 222, 267, 208, 227, 137, 257, 235, 185,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 178, 266,
	220, 157, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 207, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 0,
	0, 0, 177, 0, 179, 0, 0, 236, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1829, 82, 613, 0,
	0, 0, 0, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 241, 255, 136, 232, 269, 140, 239, 132, 206,
	228, 128, 253, 238, 189, 171, 172, 127, 0, 223,
	150, 163, 147, 204, 0, 0, 146, 272, 0, 263,
	130, 131, 262, 203, 250, 254, 190, 184, 129, 252,
	188, 183, 175, 154, 167, 216, 182, 217, 168, 194,
	193, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 0, 0, 0,
	0, 0, 0, 240, 0, 0, 176, 0, 0, 0,
	0, 0, 226, 209, 0, 0, 214, 224, 180, 251,
	218, 256, 242, 264, 0, 219, 122, 243, 149, 191,
	133, 134, 145, 151, 153, 155, 156, 200, 201, 212,
	231, 244, 245, 246, 148, 141, 225, 142, 165, 143,
	123, 233, 144, 124, 213, 249, 0, 162, 221, 187,
	125, 186, 215, 248, 247, 273, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 159, 0, 260, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 229, 0, 0, 0, 0, 0, 170,
	211, 0, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 237, 258, 271, 261, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 196,
	197, 198, 199, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 158, 164, 0, 166, 138,
	210, 161, 268, 173, 202, 169, 234, 174, 181, 222,
	267, 208, 227, 137, 257, 235, 185, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 178, 266, 220, 157, 85,
	86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 207, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 152, 0, 0, 0, 177,
	0, 179, 0, 0, 236, 192, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 690, 0, 0,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 241, 255,
	136, 232, 269, 140, 239, 132, 206, 228, 128, 253,
	238, 189, 171, 172, 127, 0, 223, 150, 163, 147,
	204, 0, 0, 146, 272, 0, 263, 130, 131, 262,
	203, 250, 254, 190, 184, 129, 252, 188, 183, 175,
	154, 167, 216, 182, 217, 168, 194, 193, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 0, 0, 0, 0, 0, 0,
	240, 0, 0, 176, 0, 0, 0, 0, 0, 226,
	209, 0, 0, 214, 224, 180, 251, 218, 256, 242,
	264, 0, 219, 122, 243, 149, 191, 133, 134, 145,
	151, 153, 155, 156, 200, 201, 212, 231, 244, 245,
	246, 148, 141, 225, 142, 165, 143, 123, 233, 144,
	124, 213, 249, 0, 162, 221, 187, 125, 186, 215,
	248, 247, 273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 159, 0, 260, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 0, 170, 211, 0, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 237, 258, 271, 261, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 1297, 196, 197, 198, 199,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 158, 164, 0, 166, 138, 210, 161, 268,
	173, 202, 169, 234, 174, 181, 222, 267, 208, 227,
	137, 257, 235, 185, 160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 178, 266, 220, 157, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 207, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 152, 1081, 0, 0, 177, 0, 179, 0,
	0, 236, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 690, 0, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 241, 255, 136, 232, 269,
	140, 239, 132, 206, 228, 128, 253, 238, 189, 171,
	172, 127, 0, 223, 150, 163, 147, 204, 0, 0,
	146, 272, 0, 263, 130, 131, 262, 203, 250, 254,
	190, 184, 129, 252, 188, 183, 175, 154, 167, 216,
	182, 217, 168, 194, 193, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 0, 0, 0, 0, 0, 240, 0, 0,
	176, 0, 0, 0, 0, 0, 226, 209, 0, 0,
	214, 224, 180, 251, 218, 256, 242, 264, 0, 219,
	122, 243, 149, 191, 133, 134, 145, 151, 153, 155,
	156, 200, 201, 212, 231, 244, 245, 246, 148, 141,
	225, 142, 165, 143, 123, 233, 144, 124, 213, 249,
	0, 162, 221, 187, 125, 186, 215, 248, 247, 273,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 159,
	0, 260, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 229, 0, 0,
	0, 0, 0, 170, 211, 0, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 237,
	258, 271, 261, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 196, 197, 198, 199, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 158,
	164, 0, 166, 138, 210, 161, 268, 173, 202, 169,
	234, 174, 181, 222, 267, 208, 227, 137, 257, 235,
	185, 160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 178,
	266, 220, 157, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 207,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 152,
	0, 0, 0, 177, 0, 179, 0, 0, 236, 192,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 613,
	0, 0, 0, 0, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 241, 255, 136, 232, 269, 140, 239, 132,
	206, 228, 128, 253, 238, 189, 171, 172, 127, 0,
	223, 150, 163, 147, 204, 0, 0, 146, 272, 0,
	263, 130, 131, 262, 203, 250, 254, 190, 184, 129,
	252, 188, 183, 175, 154, 167, 216, 182, 217, 168,
	194, 193, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 265, 0, 0,
	0, 0, 0, 0, 240, 0, 0, 176, 0, 0,
	0, 0, 0, 226, 209, 0, 0, 214, 224, 180,
	251, 218, 256, 242, 264, 0, 219, 122, 243, 149,
	191, 133, 134, 145, 151, 153, 155, 156, 200, 201,
	212, 231, 244, 245, 246, 148, 141, 225, 142, 165,
	143, 123, 233, 144, 124, 213, 249, 0, 162, 221,
	187, 125, 186, 215, 248, 247, 273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 159, 0, 260, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 229, 0, 0, 0, 0, 0,
	170, 211, 0, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 237, 258, 271, 261,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	196, 197, 198, 199, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 158, 164, 0, 166,
	138, 210, 161, 268, 173, 202, 169, 234, 174, 181,
	222, 267, 208, 227, 137, 257, 235, 185, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 178, 266, 220, 157,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 207, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 152, 0, 0, 0,
	177, 0, 179, 0, 0, 236, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 241,
	255, 136, 232, 269, 140, 239, 132, 206, 228, 128,
	253, 238, 189, 171, 172, 127, 0, 223, 150, 163,
	147, 204, 0, 0, 146, 272, 0, 263, 130, 131,
	262, 203, 250, 254, 190, 184, 129, 252, 188, 183,
	175, 154, 167, 216, 182, 217, 168, 194, 193, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 0, 0, 0,
	0, 240, 0, 0, 176, 0, 0, 0, 0, 0,
	226, 209, 0, 0, 214, 224, 180, 251, 218, 256,
	242, 264, 0, 219, 122, 243, 149, 191, 133, 134,
	145, 151, 153, 155, 156, 200, 201, 212, 231, 244,
	245, 246, 148, 141, 225, 142, 165, 143, 123, 233,
	144, 124, 213, 249, 0, 162, 221, 187, 125, 186,
	215, 248, 247, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 159, 0, 260, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 229, 0, 0, 0, 0, 0, 170, 211, 0,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 237, 258, 271, 261, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 196, 197, 198,
	199, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 158, 164, 0, 166, 138, 210, 161,
	268, 173, 202, 169, 234, 174, 181, 222, 267, 208,
	227, 137, 257, 235, 185, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 178, 266, 220, 157, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 207, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 152, 0, 0, 0, 177, 0, 179,
	0, 0, 236, 192, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 690, 0, 0, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 241, 255, 136, 232,
	269, 140, 239, 132, 206, 228, 128, 253, 238, 189,
	171, 172, 127, 0, 223, 150, 163, 147, 204, 0,
	0, 146, 272, 0, 263, 130, 131, 262, 203, 250,
	254, 190, 184, 129, 252, 188, 183, 175, 154, 167,
	216, 182, 217, 168, 194, 193, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 265, 0, 0, 0, 0, 0, 0, 240, 0,
	0, 176, 0, 0, 0, 0, 0, 226, 209, 0,
	0, 214, 224, 180, 251, 218, 256, 242, 264, 0,
	219, 122, 243, 149, 191, 133, 134, 145, 151, 153,
	155, 156, 200, 201, 212, 231, 244, 245, 246, 148,
	141, 225, 142, 165, 143, 123, 233, 144, 124, 213,
	249, 0, 162, 221, 187, 125, 186, 215, 248, 247,
	273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	159, 0, 260, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 229, 0,
	0, 0, 0, 0, 170, 211, 0, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	237, 258, 271, 261, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 196, 197, 198, 199, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	158, 164, 0, 166, 138, 210, 161, 268, 173, 202,
	169, 234, 174, 181, 222, 267, 208, 227, 137, 257,
	235, 185, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	178, 266, 220, 157, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	207, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	152, 0, 0, 0, 177, 0, 179, 0, 0, 236,
	192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1354,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 241, 255, 136, 232, 269, 140, 239,
	132, 206, 228, 128, 253, 238, 189, 171, 172, 127,
	0, 223, 150, 163, 147, 204, 0, 0, 146, 272,
	0, 263, 130, 131, 262, 203, 250, 254, 190, 184,
	129, 252, 188, 183, 175, 154, 167, 216, 182, 217,
	168, 194, 193, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 265, 0,
	0, 0, 0, 0, 0, 240, 0, 0, 176, 0,
	0, 0, 0, 0, 226, 209, 0, 0, 214, 224,
	180, 251, 218, 256, 242, 264, 0, 219, 122, 243,
	149, 191, 133, 134, 145, 151, 153, 155, 156, 200,
	201, 212, 231, 244, 245, 246, 148, 141, 225, 142,
	165, 143, 123, 233, 144, 124, 213, 249, 0, 162,
	221, 187, 125, 186, 215, 248, 247, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 159, 0, 260,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	0, 170, 211, 0, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 237, 258, 271,
	261, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 196, 197, 198, 199, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 158, 164, 0,
	166, 138, 210, 161, 268, 173, 202, 169, 234, 174,
	181, 222, 267, 208, 227, 137, 257, 235, 185, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 178, 266, 220,
	157, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 207, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 152, 0, 0,
	0, 177, 0, 179, 0, 0, 236, 192, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	241, 255, 136, 232, 269, 140, 239, 132, 206, 228,
	128, 253, 238, 189, 171, 172, 127, 0, 223, 150,
	163, 147, 204, 0, 0, 146, 272, 0, 263, 130,
	131, 262, 203, 250, 254, 190, 184, 129, 252, 188,
	183, 175, 154, 167, 216, 182, 217, 168, 194, 193,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 0, 0, 0, 0,
	0, 0, 240, 0, 0, 176, 0, 0, 0, 0,
	0, 226, 209, 0, 0, 214, 224, 180, 251, 218,
	256, 242, 264, 0, 219, 122, 243, 149, 191, 133,
	134, 145, 151, 153, 155, 156, 200, 201, 212, 231,
	244, 245, 246, 148, 141, 225, 142, 165, 143, 123,
	233, 144, 124, 213, 249, 0, 162, 221, 187, 125,
	186, 215, 248, 247, 273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 159, 0, 260, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 229, 0, 0, 0, 0, 0, 170, 211,
	0, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 237, 258, 271, 261, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 196, 197,
	198, 199, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 158, 164, 0, 166, 138, 210,
	161, 268, 173, 202, 169, 234, 174, 181, 222, 267,
	208, 227, 137, 257, 235, 185, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 178, 266, 220, 157, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 207, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 152, 0, 0, 0, 177, 0,
	179, 0, 0, 236, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 241, 255, 136,
	232, 269, 140, 239, 132, 206, 228, 128, 253, 238,
	189, 171, 172, 127, 0, 223, 150, 163, 147, 204,
	0, 0, 146, 272, 0, 263, 130, 131, 262, 203,
	250, 254, 190, 184, 129, 252, 188, 183, 175, 154,
	167, 216, 182, 217, 168, 194, 193, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 0, 0, 0, 0, 240,
	0, 0, 176, 0, 0, 0, 0, 0, 226, 209,
	0, 0, 214, 224, 180, 251, 218, 256, 242, 264,
	0, 219, 122, 243, 149, 191, 133, 134, 145, 151,
	153, 155, 156, 200, 201, 212, 231, 244, 245, 246,
	148, 141, 225, 142, 165, 143, 123, 233, 144, 124,
	213, 249, 0, 162, 221, 187, 125, 186, 215, 248,
	247, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 159, 0, 260, 0, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 229,
	0, 0, 0, 0, 0, 170, 211, 0, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 237, 258, 271, 261, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 158, 164, 0, 166, 138, 210, 161, 268, 173,
	202, 169, 234, 174, 181, 222, 267, 208, 227, 137,
	257, 235, 185, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 178, 266, 220, 157, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 207, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 177, 0, 179, 0, 0,
	236, 192, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	323, 0, 0, 324, 0, 0, 0, 135, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 241, 255, 136, 232, 269, 140,
	239, 132, 206, 228, 128, 253, 238, 189, 171, 172,
	127, 0, 223, 150, 163, 147, 204, 0, 0, 146,
	272, 0, 263, 130, 131, 262, 203, 250, 254, 190,
	184, 129, 252, 188, 183, 175, 154, 167, 216, 182,
	217, 168, 194, 193, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	0, 0, 0, 0, 0, 0, 240, 0, 0, 176,
	0, 0, 0, 0, 0, 226, 209, 0, 0, 214,
	224, 180, 251, 218, 256, 242, 264, 0, 219, 122,
	243, 149, 191, 133, 134, 145, 151, 153, 155, 156,
	200, 201, 212, 231, 244, 245, 246, 148, 141, 225,
	142, 165, 143, 123, 233, 144, 124, 213, 249, 0,
	162, 221, 187, 125, 186, 215, 248, 247, 273, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 159, 0,
	260, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 229, 0, 0, 0,
	0, 0, 170, 211, 0, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 237, 258,
	271, 261, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 196, 197, 198, 199, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 158, 164,
	0, 166, 138, 210, 161, 268, 173, 202, 169, 234,
	174, 181, 222, 267, 208, 227, 137, 257, 235, 185,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 178, 266,
	220, 157, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 207, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 0,
	0, 0, 177, 0, 179, 0, 0, 236, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	690, 0, 0, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 241, 255, 136, 232, 269, 140, 239, 132, 206,
	228, 128, 253, 238, 189, 171, 172, 127, 0, 223,
	150, 163, 147, 204, 0, 0, 146, 272, 0, 263,
	130, 131, 262, 203, 250, 254, 190, 184, 129, 252,
	188, 183, 175, 154, 167, 216, 182, 217, 168, 194,
	193, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 0, 0, 0,
	0, 0, 0, 240, 0, 0, 176, 0, 0, 0,
	0, 0, 226, 209, 0, 0, 214, 224, 180, 251,
	218, 256, 242, 264, 0, 219, 122, 243, 149, 191,
	133, 134, 145, 151, 153, 155, 156, 200, 201, 212,
	231, 244, 245, 246, 148, 141, 225, 142, 165, 143,
	123, 233, 144, 124, 213, 249, 0, 162, 221, 187,
	125, 186, 215, 248, 247, 273, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 159, 0, 260, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 229, 0, 0, 0, 0, 0, 170,
	211, 0, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 237, 258, 271, 726, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 196,
	197, 198, 199, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 158, 164, 0, 166, 138,
	210, 161, 268, 173, 202, 169, 234, 174, 181, 222,
	267, 208, 227, 137, 257, 235, 185, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 178, 266, 220, 157, 85,
	86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 207, 259, 0, 0, 0,
	0, 0, 0, 0, 79, 152, 0, 0, 0, 177,
	0, 179, 0, 0, 236, 192, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 241, 255,
	136, 232, 269, 140, 239, 132, 206, 228, 128, 253,
	238, 189, 171, 172, 127, 0, 223, 150, 163, 147,
	204, 0, 0, 146, 272, 0, 263, 130, 131, 262,
	203, 250, 254, 190, 184, 129, 252, 188, 183, 175,
	154, 167, 216, 182, 217, 168, 194, 193, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 0, 0, 0, 0, 0, 0,
	240, 0, 0, 176, 0, 0, 0, 0, 0, 226,
	209, 0, 0, 214, 224, 180, 251, 218, 256, 242,
	264, 0, 219, 122, 243, 149, 191, 133, 134, 145,
	151, 153, 155, 156, 200, 201, 212, 231, 244, 245,
	246, 148, 141, 225, 142, 165, 143, 123, 233, 144,
	124, 213, 249, 0, 162, 221, 187, 125, 186, 215,
	248, 247, 273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 159, 0, 260, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 0, 170, 211, 0, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 237, 258, 271, 261, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 196, 197, 198, 199,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 158, 164, 0, 166, 138, 210, 161, 268,
	173, 202, 169, 234, 174, 181, 222, 267, 208, 227,
	137, 257, 235, 185, 160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 178, 266, 220, 157, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 207, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 152, 0, 0, 0, 177, 0, 179, 0,
	0, 236, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 241, 255, 136, 232, 269,
	140, 239, 132, 206, 228, 128, 253, 238, 189, 171,
	172, 127, 0, 223, 150, 163, 147, 204, 0, 0,
	146, 272, 0, 263, 130, 131, 262, 203, 250, 254,
	190, 184, 129, 252, 188, 183, 175, 154, 167, 216,
	182, 217, 168, 194, 193, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 0, 0, 0, 0, 0, 240, 0, 0,
	176, 0, 0, 0, 0, 0, 226, 209, 0, 0,
	214, 224, 180, 251, 218, 256, 242, 264, 0, 219,
	122, 243, 149, 191, 133, 134, 145, 151, 153, 155,
	156, 200, 201, 212, 231, 244, 245, 246, 148, 141,
	225, 142, 165, 143, 123, 233, 144, 124, 213, 249,
	0, 162, 221, 187, 125, 186, 215, 248, 247, 273,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 159,
	0, 260, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 229, 0, 0,
	0, 0, 0, 170, 211, 0, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 237,
	258, 271, 261, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 196, 197, 198, 199, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 158,
	164, 0, 166, 138, 210, 161, 268, 173, 202, 169,
	234, 174, 181, 222, 267, 208, 227, 137, 257, 235,
	185, 160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 178,
	266, 220, 157, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 207,
	259, 0, 0, 0, 431, 0, 0, 0, 0, 152,
	0, 0, 0, 177, 0, 179, 0, 0, 236, 192,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 436, 437,
	438, 433, 0, 0, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 241, 255, 136, 232, 269, 140, 239, 132,
	206, 228, 128, 253, 238, 189, 171, 172, 127, 0,
	223, 150, 163, 147, 204, 0, 0, 146, 272, 0,
	263, 130, 131, 262, 203, 250, 254, 190, 184, 129,
	252, 188, 183, 175, 154, 167, 216, 182, 217, 168,
	194, 193, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 265, 0, 0,
	0, 0, 0, 0, 240, 0, 0, 176, 0, 0,
	0, 0, 0, 226, 209, 0, 0, 214, 224, 180,
	251, 218, 256, 242, 264, 0, 219, 122, 243, 149,
	191, 133, 134, 145, 151, 153, 155, 156, 200, 201,
	212, 231, 244, 245, 246, 148, 141, 225, 142, 165,
	143, 123, 233, 144, 124, 213, 249, 0, 162, 221,
	187, 125, 186, 215, 248, 247, 273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 159, 0, 260, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 229, 0, 0, 0, 0, 0,
	170, 211, 0, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 237, 258, 271, 261,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	196, 197, 198, 199, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 158, 164, 0, 166,
	138, 210, 161, 268, 173, 202, 169, 234, 174, 181,
	222, 267, 208, 227, 137, 257, 235, 185, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 0, 0, 121, 0, 178, 266, 220, 157,
	152, 0, 0, 0, 177, 0, 179, 0, 0, 236,
	192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 436,
	437, 438, 433, 0, 0, 0, 135, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 241, 255, 136, 232, 269, 140, 239,
	132, 206, 228, 128, 253, 238, 189, 171, 172, 127,
	0, 223, 150, 163, 147, 204, 0, 0, 146, 272,
	0, 263, 130, 131, 262, 203, 250, 254, 190, 184,
	129, 252, 188, 183, 175, 154, 167, 216, 182, 217,
	168, 194, 193, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 265, 0,
	0, 0, 0, 0, 0, 240, 0, 0, 176, 0,
	0, 0, 0, 0, 226, 209, 0, 0, 214, 224,
	180, 251, 218, 256, 242, 264, 0, 219, 122, 243,
	149, 191, 133, 134, 145, 151, 153, 155, 156, 200,
	201, 212, 231, 244, 245, 246, 148, 141, 225, 142,
	165, 143, 123, 233, 144, 124, 213, 249, 0, 162,
	221, 187, 125, 186, 215, 248, 247, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 159, 0, 260,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	0, 170, 211, 0, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 237, 258, 271,
	261, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 196, 197, 198, 199, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 158, 164, 0,
	166, 138, 210, 161, 268, 173, 202, 169, 234, 174,
	181, 222, 267, 208, 227, 137, 257, 235, 185, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 0, 0, 121, 0, 178, 266, 220,
	157, 152, 0, 0, 0, 177, 0, 179, 0, 0,
	236, 192, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	436, 437, 438, 0, 0, 0, 0, 135, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 241, 255, 136, 232, 269, 140,
	239, 132, 206, 228, 128, 253, 238, 189, 171, 172,
	127, 0, 223, 150, 163, 147, 204, 0, 0, 146,
	272, 0, 263, 130, 131, 262, 203, 250, 254, 190,
	184, 129, 252, 188, 183, 175, 154, 167, 216, 182,
	217, 168, 194, 193, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	0, 0, 0, 0, 0, 0, 240, 0, 0, 176,
	0, 0, 0, 0, 0, 226, 209, 0, 0, 214,
	224, 180, 251, 218, 256, 242, 264, 0, 219, 122,
	243, 149, 191, 133, 134, 145, 151, 153, 155, 156,
	200, 201, 212, 231, 244, 245, 246, 148, 141, 225,
	142, 165, 143, 123, 233, 144, 124, 213, 249, 0,
	162, 221, 187, 125, 186, 215, 248, 247, 273, 0,
	0, 0, 0, 0, 0, 0, 0, 1536, 159, 0,
	260, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 229, 0, 0, 0,
	0, 1054, 170, 211, 0, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 237, 258,
	271, 261, 0, 0, 0, 270, 1536, 1597, 0, 0,
	0, 0, 196, 197, 198, 199, 1518, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 158, 164,
	1054, 166, 138, 210, 161, 268, 173, 202, 169, 234,
	174, 181, 222, 267, 208, 227, 137, 257, 235, 185,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1518, 121, 0, 178, 266,
	220, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1522, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1526, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1515, 0,
	0, 0, 1517, 1519, 1521, 0, 1523, 1524, 1525, 1527,
	1528, 1529, 1531, 1532, 1533, 1534, 1522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1526, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1537, 0,
	0, 0, 0, 0, 0, 0, 0, 1515, 0, 0,
	0, 1517, 1519, 1521, 0, 1523, 1524, 1525, 1527, 1528,
	1529, 1531, 1532, 1533, 1534, 0, 0, 0, 1535, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1514, 0, 1537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1530, 0, 0, 0, 0, 0, 1520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1535, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1514, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1530,
	0, 0, 0, 0, 0, 1520,
}

var yyPact = [...]int{
	1418, -1000, -285, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 13927, 1537, -1000, 6769, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 170, 12339,
	14324, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5963, 5554,
	94, -1000, 1529, -1000, -1000, -1000, 104, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 276, -97, 250, 249, 299,
	299, 7166, 1529, 1281, -35, -1000, 1468, 1418, 134, 14324,
	-1000, 294, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 12339, 14324, -128, 433, -1000, 1254,
	291, -1000, -1000, -1000, -1000, 14324, 1483, -1000, -1000, -1000,
	1457, 14721, 1281, -1000, 1086, 1221, -1000, -1000, 1359, -1000,
	73, -61, -83, 57, -1000, -1000, 115, -1000, -1000, -1000,
	-1000, -1000, -30, -1000, -68, -1000, -76, -1000, -1000, -1000,
	-169, -1000, -1000, -1000, -1000, -1000, 1059, 290, 1381, -211,
	-1000, 1465, 1281, 1516, 1473, 152, 152, 164, 152, 169,
	-1000, -1000, -1000, -1000, -1000, -1000, 427, 122, -1000, -1000,
	-180, -188, 346, -188, -38, -1000, -1000, -1000, -1000, -1000,
	-1000, 153, -1000, -212, -1000, 239, -1000, 236, -1000, 8357,
	109, 1231, 468, -1000, 341, 14324, 14324, 14324, 341, 577,
	377, 289, -1000, -1000, -1000, 1427, 1429, 1465, 1281, -1000,
	1030, 1146, 153, 153, 153, 153, 153, 3924, -1000, -1000,
	-1000, -1000, -1000, 1260, 1358, -1000, 14324, 1340, -1000, 285,
	733, 833, -1000, 14324, 1352, 14324, 12339, 12339, 12339, 12339,
	-1000, 1409, 1408, -1000, 1396, 1393, 1402, 15423, -1000, -1000,
	-1000, 15072, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1026,
	1529, 46, 699, 11545, 13133, 14324, 11545, -1000, -1000, -1000,
	-1000, -1000, -171, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 46, 11545, 11545, -137, -1000, -1000, 4331,
	-1000, -1000, 4331, -1000, -1000, 11545, 393, 13133, 786, 14324,
	152, 14324, -1000, -1000, 346, 346, -1000, 427, 427, -1000,
	-1000, -172, 1528, 4738, -178, 14324, 152, 13530, 1455, -199,
	246, 240, 245, -1000, -1000, -210, -1000, -1000, 1148, 9163,
	7960, 142, 11545, 2294, -1000, -1000, 341, 341, 341, 2294,
	300, -1000, -1000, -1000, -1000, -1000, -1000, 14324, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11545, 13133, 14324, 14324,
	15423, 1123, -1000, -1000, 7563, 284, 4331, 648, 1351, -1000,
	1342, 1338, 1336, 1335, 1332, 1326, 1324, 1295, 1323, 1320,
	-1000, -1000, -1000, 1319, 1314, 1295, 1307, 1305, 1304, -1000,
	-1000, 867, -1000, -1000, -1000, -1000, 3517, 4738, 4738, 4738,
	4738, -1000, -1000, 1303, 1302, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5145, -1000,
	1301, 1296, 1295, 1294, 828, 827, 826, 1293, 1291, 1288,
	4738, 1287, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -282, -1000, 8766,
	14324, 14324, -1000, 1520, 4331, 1928, -1000, 1029, 282, 14324,
	1170, -1000, 420, 1363, 1380, 1363, -1000, -1000, -1000, -1000,
	1400, -1000, 1399, -1000, -1000, -1000, -1000, -1000, 399, -1000,
	-1000, -1000, -1000, -1000, -68, -76, 1118, -1000, -99, 68,
	-1000, -1000, 1217, -1000, -1000, -1000, 399, 1118, 161, 823,
	649, 281, 1226, -1000, 605, 158, 1444, 1148, 1367, 1431,
	14324, 1528, 1528, 1528, 346, 15423, 427, 14324, 427, -1000,
	-1000, 427, -1000, 278, 14324, 158, 1285, -1000, -1000, -1000,
	247, 234, 233, 13133, 160, -1000, -1000, 1148, -1000, -1000,
	-1000, 1284, 406, -1000, -1000, 4738, -1000, 575, -1000, 2294,
	2294, 2294, -1000, 10354, -1000, 1118, 1148, 1371, 1222, -1000,
	-1000, -1000, -1000, 1528, 3924, -1000, 12339, -1000, 4331, 4331,
	4331, -1000, 14324, 12736, -1000, 465, 4738, -1000, -1000, -1000,
	-1000, -1000, -1000, 4331, 1471, 1471, 1471, 4331, 542, 4331,
	4331, -1000, 661, 1471, 1471, 1471, 1471, -1000, 1471, 1471,
	1471, 4738, 4738, 4738, 4738, 4738, 4738, 4738, 4738, 4738,
	4738, 4738, 4738, 1278, 516, 4738, 4738, 4738, 1146, 1205,
	1219, -1000, -1000, -1000, -1000, -1000, 4331, 154, 4331, -1000,
	1021, -1000, -1000, 4331, -1000, -1000, -1000, 4331, 4738, 4331,
	-1000, 1471, 1095, -1000, 1283, -1000, 1215, 1419, -1000, 275,
	1156, -1000, 405, 1213, -1000, 1465, 575, -1000, 272, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -130, -1000, 14324,
	1202, -1000, 1520, 14324, 4331, -1000, -1000, 4331, 1282, -1000,
	4331, -1000, -1000, -1000, 1532, 271, 269, 11545, -1000, 124,
	11545, -1000, -1000, 14324, 159, 11545, -44, 4331, 4331, 14324,
	4331, -1000, -1000, -1000, -234, -1000, -113, -1000, 1370, 33,
	-1000, 1431, -1000, 244, -1000, 1279, -1000, -1000, -1000, 1528,
	-1000, 346, -1000, 346, 427, 14324, -1000, -1000, -234, 1019,
	-1000, -1000, -1000, 230, 1148, 11545, 797, 142, -1000, -1000,
	-1000, -1000, -1000, 14324, 14324, 1524, -1000, 1134, 1322, -1000,
	462, 456, -1000, 268, -1000, -1000, 498, -1000, 1009, 1093,
	575, 4331, -1000, -1000, 4331, 4331, 761, 4331, 995, 1172,
	1165, -1000, 991, -1000, 4331, 4331, 4331, 4331, 4331, 4331,
	4331, 985, 760, -1000, 587, 587, 293, 293, 293, 293,
	293, 962, 962, -1000, -1000, -1000, 3517, 1278, 4738, 4738,
	4738, 138, 1583, 2276, -1000, 4331, 635, -1000, -1000, 977,
	-1000, 891, 974, 1719, 971, 4331, -282, 3108, 1092, 14324,
	-282, 14324, 14324, 3108, -1000, 14324, -1000, 1928, 728, -1000,
	-1000, 14324, 1465, -1000, 575, 575, 14324, 575, 11545, 314,
	385, -1000, 9957, 11545, -1000, -1000, 11545, 81, 1436, -1000,
	-1000, 575, 575, 265, -1000, -1000, -129, -1000, -1000, -1000,
	219, -1000, 822, 821, 819, 814, 14324, -1000, -1000, -1000,
	-1000, -1000, 365, 365, 365, 1427, 6360, -1000, 1528, 1528,
	346, -1000, -71, -102, -1000, 1118, 953, -1000, -1000, -1000,
	-1000, 1522, 1513, 12339, 11942, -1000, -1000, 4331, 1200, 1175,
	1168, 815, 1160, -1000, -1000, -1000, -1000, 1130, 1025, 1022,
	966, 924, 904, 857, 1158, -1000, 138, 1583, 1645, -1000,
	4738, 4738, 829, 815, 586, -1000, -1000, 586, -1000, 4738,
	-1000, 748, -1000, 951, 1121, -1000, -282, -1000, -1000, 1095,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1150, 1118, -1000, -1000, -1000, -1000, 11545, 1458, 158,
	-1000, -66, 168, 14324, -129, -1000, 724, 720, 714, 713,
	-105, -1000, -1000, -1000, -1000, -1000, 1275, 586, -1000, 604,
	798, 945, 1101, -1000, -1000, -1000, 105, 237, -1000, 14324,
	483, 274, 152, 274, 482, 1274, -1000, -1000, -1000, -1000,
	1528, -1000, -71, -1000, 195, 243, -37, 1505, -1000, -1000,
	4331, 4331, 1322, -1000, -1000, 575, -1000, -1000, -1000, 941,
	-1000, 1265, 1269, -1000, 1265, 1265, 1265, 222, 222, 1272,
	1273, 1272, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 4738, -1000, -1000, -1000, 933, 929, 911, 1555,
	-1000, -1000, 3108, 1095, -1000, -1000, 11545, 11545, -237, -70,
	14324, -1000, -1000, -1000, -1000, -1000, -1000, 11148, -1000, -1000,
	-1000, -1000, -1000, -1000, 15731, 6360, 1104, -91, -1000, -1000,
	-1000, 1265, -1000, 1269, 1265, 1265, 1265, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1268, 1266, -1000, 1265,
	1265, 1265, 1265, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14324, 14324, -1000, 14324, 14324, 152, 4331, -1000, -1000, -1000,
	-1000, 710, -1000, -1000, -1000, 797, 575, 1093, -1000, -1000,
	-1000, 703, -1000, 692, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 690, -1000, 686, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -178, 1115, -1000, 1265,
	4331, 132, 15682, -1000, 365, 365, 476, 365, 365, 365,
	365, 88, 87, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 1264, -1000, -1000,
	1104, -1000, -1000, 495, 4738, -1000, -1000, 796, 604, 286,
	296, 1262, -1000, 54, 479, 475, -1000, 14324, -1000, -95,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 795, 795, -1000,
	-1000, -1000, -1000, 1261, 1366, -24, 1259, -1000, 1258, 1257,
	14324, 708, -43, -1000, -1000, 893, 876, 1053, 1103, -159,
	-146, -1000, 11148, 1451, 691, -1000, 1504, 15731, -1000, 670,
	657, 365, 365, 656, 794, 793, 790, 365, 365, 641,
	789, 15072, 638, 626, 613, 683, 788, 367, 645, 561,
	558, 14324, 1251, 745, -1000, -1000, 1583, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 610, 1249,
	-1000, -1000, 1246, -1000, -1000, 1084, -1000, 1067, 11148, 28,
	28, 11148, 11148, 11148, 1245, 228, -1000, -1000, -1000, 607,
	-1000, 600, 156, -154, -146, -1000, 1503, -144, 1502, 1498,
	74, -1000, -1000, 1451, 53, -1000, -1000, -1000, 586, 586,
	-1000, -1000, -1000, -1000, 787, 753, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 100, 14324,
	1051, -1000, 401, 862, 4331, -229, 11148, -1000, 751, -1000,
	1024, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 986, 969,
	965, 11148, -1000, -1000, -1000, 59, 858, 849, 1243, 594,
	-139, 1495, -1000, 700, 1494, 700, 700, -1000, 365, 747,
	-28, -1000, -1000, -1000, 30, 133, 101, -1000, 150, -1000,
	-1000, -1000, -1000, -1000, -1000, 108, 961, -1000, 745, 743,
	-1000, 601, 1369, -1000, -78, 956, -1000, -1000, -1000, -1000,
	-1000, 950, -1000, -1000, -1000, 1425, 9560, -163, -1000, 1493,
	742, -1000, -1000, 700, -1000, -1000, 583, -1000, 786, 21,
	530, 4738, 1241, 4738, 1238, 34, 1237, -1000, -1000, -1000,
	-1000, -1000, 228, -1000, -1000, 1343, 1325, 1536, -1000, -1000,
	-1000, -1000, 74, 74, 74, 74, -72, -1000, 14324, -1000,
	937, -1000, -1000, -1000, 263, -1000, 547, -1000, -1000, -1000,
	-1000, 1235, 1492, -1000, 1395, 14324, 1089, 14324, 1234, 362,
	4738, -1000, -1000, 1538, -1000, 1539, 356, 356, -1000, 963,
	-1000, 360, -1000, 10751, 14324, -1000, -1000, 131, 32, -1000,
	902, -1000, 897, 14324, 528, 952, -1000, -1000, -1000, 538,
	64, -1000, 14324, 2701, -1000, 262, 885, -1000, 844, -19,
	-1000, -1000, 883, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	575, 14324, -1000, 131, 1403, -1000, 527, -1000, -1000, -1000,
	695, 123, -1000, -1000, 695, -5, -1000, 127, -1000, -1000,
	874, -1000, 818, 1169, -1000, -5, 15731, 4331, -1000, 15731,
	839, -1000,
}

var yyPgo = [...]int{
	0, 554, 1893, 1892, 731, 688, 1889, 1888, 1887, 1886,
	1885, 1881, 1880, 1877, 1876, 1873, 1872, 1871, 1870, 1869,
	1868, 1867, 1866, 1862, 1861, 1860, 1854, 1853, 1852, 1851,
	1850, 1849, 638, 1847, 1845, 1844, 1842, 1841, 1840, 119,
	1839, 1838, 1834, 1833, 1818, 1815, 1813, 1812, 1811, 93,
	96, 1810, 100, 134, 1809, 108, 1808, 75, 130, 1807,
	1802, 30, 95, 1800, 102, 99, 78, 176, 83, 73,
	1799, 1798, 1797, 117, 1796, 1795, 1794, 1793, 53, 1792,
	63, 34, 29, 1790, 70, 1789, 1788, 1786, 1785, 1784,
	66, 1781, 61, 43, 1780, 1779, 1778, 1777, 1776, 42,
	1775, 37, 1773, 1772, 1771, 1768, 1767, 1766, 17, 18,
	21, 1765, 1764, 16, 2, 1763, 1762, 82, 1761, 1759,
	1758, 585, 1742, 1741, 1740, 128, 1738, 103, 1737, 1736,
	1735, 1734, 9, 1733, 35, 1731, 45, 1730, 1729, 77,
	36, 110, 76, 1728, 1727, 1724, 116, 20, 56, 0,
	121, 38, 1723, 113, 112, 1720, 85, 153, 89, 47,
	1716, 39, 60, 1715, 1714, 1711, 55, 12, 1709, 90,
	11, 74, 1708, 84, 104, 1, 81, 1706, 120, 1705,
	1703, 92, 1702, 1700, 46, 91, 1699, 1698, 1697, 28,
	1679, 62, 25, 1678, 118, 124, 1676, 1675, 1674, 107,
	88, 71, 1673, 1672, 64, 1671, 86, 67, 97, 1670,
	576, 1669, 87, 59, 19, 1668, 122, 1651, 141, 123,
	109, 1633, 1627, 129, 1433, 125, 1623, 115, 10, 1621,
	1620, 13, 1619, 26, 1618, 1613, 1612, 1610, 6, 1609,
	1608, 1607, 3, 5, 1606, 4, 98, 1605, 1603, 44,
	51, 48, 57, 1602, 1601, 1598, 1594, 186, 1591, 1590,
	1589, 1588, 1587, 1585, 1583, 69, 1582, 1579, 1578, 1577,
	54, 1576, 1575, 1574, 1573, 1572, 31, 1571, 23, 1570,
	1568, 1567, 1566, 14, 1565, 1564, 15, 1563, 1561, 7,
	8, 1560, 1559, 52, 33, 32, 65, 68, 1556, 22,
	1555, 79, 1553, 1552, 1551, 111, 1550,
}

//line mysql_sql.y:5813
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) intervalTypeUnion() tree.IntervalType {
	v, _ := st.union.(tree.IntervalType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 303, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 47, 292, 292, 291, 291, 290, 290, 289, 289,
	289, 288, 288, 288, 287, 287, 286, 286, 284, 284,
	285, 283, 282, 282, 281, 281, 279, 279, 280, 280,
	275, 275, 277, 277, 276, 276, 276, 276, 278, 274,
	274, 274, 273, 273, 46, 46, 46, 213, 213, 45,
	45, 227, 227, 227, 227, 227, 225, 225, 225, 225,
	224, 224, 223, 223, 228, 228, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 40,
	40, 40, 40, 43, 44, 221, 221, 221, 221, 221,
	222, 222, 222, 41, 42, 42, 212, 212, 217, 217,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 211, 211, 220, 220, 220, 219, 219, 218, 218,
	34, 34, 34, 37, 36, 210, 210, 210, 210, 210,
	210, 210, 210, 35, 35, 35, 35, 35, 35, 33,
	33, 32, 209, 209, 208, 39, 39, 39, 39, 38,
	38, 38, 38, 38, 38, 38, 152, 152, 152, 48,
	7, 31, 31, 257, 257, 163, 163, 164, 164, 162,
	162, 162, 162, 162, 162, 260, 261, 159, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 30, 304,
	304, 304, 28, 29, 256, 256, 256, 27, 26, 25,
	24, 24, 23, 22, 22, 156, 156, 158, 158, 154,
	305, 305, 233, 233, 157, 157, 21, 21, 155, 155,
	137, 153, 153, 153, 6, 8, 8, 8, 8, 8,
	13, 12, 11, 10, 9, 5, 4, 264, 264, 264,
	264, 264, 264, 300, 300, 300, 301, 72, 72, 68,
	68, 265, 265, 176, 302, 302, 272, 272, 271, 271,
	270, 270, 70, 70, 71, 71, 60, 60, 49, 49,
	50, 50, 50, 66, 66, 67, 67, 67, 65, 65,
	64, 63, 63, 62, 61, 61, 61, 52, 52, 51,
	51, 51, 51, 51, 121, 121, 121, 53, 258, 258,
	258, 263, 263, 118, 118, 119, 119, 117, 117, 54,
	54, 55, 55, 55, 55, 116, 116, 115, 56, 56,
	57, 57, 59, 59, 59, 59, 126, 126, 125, 125,
	125, 125, 75, 75, 124, 123, 123, 123, 74, 74,
	73, 73, 69, 69, 58, 58, 122, 306, 306, 120,
	145, 145, 145, 151, 151, 144, 144, 144, 150, 150,
	146, 146, 147, 147, 147, 3, 3, 3, 16, 16,
	16, 14, 206, 206, 205, 205, 207, 207, 207, 207,
	201, 201, 202, 202, 202, 202, 203, 203, 203, 204,
	204, 204, 204, 200, 200, 199, 197, 197, 197, 198,
	198, 198, 198, 198, 198, 148, 148, 15, 194, 194,
	195, 195, 195, 196, 196, 188, 188, 188, 188, 19,
	192, 192, 193, 193, 193, 193, 193, 189, 189, 191,
	191, 187, 187, 187, 187, 187, 18, 186, 186, 184,
	184, 182, 182, 183, 183, 181, 181, 181, 185, 185,
	17, 259, 259, 229, 229, 232, 232, 239, 239, 240,
	240, 238, 238, 245, 245, 244, 244, 243, 243, 242,
	242, 241, 241, 236, 236, 235, 235, 230, 230, 230,
	230, 230, 231, 231, 234, 234, 237, 237, 97, 97,
	98, 98, 98, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 298, 298, 299, 100, 100, 100, 104, 104,
	104, 104, 104, 104, 99, 99, 99, 101, 101, 101,
	82, 82, 81, 81, 76, 76, 77, 77, 78, 78,
	79, 79, 80, 80, 80, 80, 80, 80, 215, 215,
	296, 296, 297, 297, 293, 293, 293, 295, 295, 295,
	295, 295, 294, 294, 83, 133, 133, 133, 149, 149,
	149, 132, 132, 132, 96, 96, 95, 95, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 214, 214, 160, 160, 161, 161, 113, 111, 111,
	112, 112, 112, 112, 109, 110, 108, 108, 108, 108,
	108, 107, 107, 106, 106, 106, 190, 190, 105, 105,
	103, 103, 103, 102, 102, 102, 246, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 92, 92,
	92, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 269, 269, 269, 128,
	130, 130, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 177, 177, 178, 178, 266, 266,
	266, 266, 266, 266, 267, 267, 268, 268, 268, 268,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 168, 127,
	127, 127, 247, 179, 174, 174, 175, 175, 170, 170,
	170, 170, 170, 172, 172, 172, 172, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 171, 171, 173, 173,
	180, 180, 180, 180, 180, 180, 94, 94, 94, 94,
	248, 165, 165, 165, 165, 165, 165, 165, 85, 85,
	85, 85, 89, 89, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 90, 90,
	90, 88, 88, 88, 88, 88, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 87, 134, 134, 249, 249, 250, 250, 251, 252,
	252, 253, 253, 253, 254, 254, 254, 255, 255, 136,
	136, 136, 141, 141, 135, 135, 142, 142, 143, 143,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138,
}

var yyR2 = [...]int{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 14, 0, 2, 1, 3, 3, 3, 1, 3,
	5, 0, 2, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 0, 3, 0, 3, 0, 3, 0, 3,
	0, 2, 1, 2, 3, 4, 3, 3, 1, 0,
	1, 1, 0, 1, 9, 4, 7, 0, 3, 7,
	4, 1, 3, 3, 3, 1, 0, 1, 1, 1,
	1, 3, 1, 4, 1, 3, 1, 2, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 2, 1, 1, 1, 3,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 6, 3, 1, 1, 1, 1,
	1, 1, 1, 2, 4, 6, 1, 4, 1, 3,
	3, 4, 4, 4, 3, 2, 4, 4, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 1, 2, 2, 0, 4, 2, 4, 1,
	5, 3, 2, 1, 2, 2, 4, 4, 5, 2,
	1, 7, 1, 3, 3, 1, 1, 1, 1, 2,
	3, 4, 7, 2, 5, 3, 1, 1, 1, 6,
	1, 7, 9, 0, 2, 0, 1, 1, 2, 2,
	2, 1, 4, 2, 2, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 5, 1,
	1, 1, 5, 5, 0, 1, 1, 2, 2, 3,
	6, 7, 4, 7, 8, 0, 2, 0, 2, 2,
	1, 1, 1, 1, 0, 1, 4, 5, 1, 3,
	1, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	4, 4, 6, 4, 4, 6, 4, 2, 1, 5,
	4, 4, 2, 0, 1, 3, 3, 1, 3, 1,
	3, 1, 3, 4, 0, 1, 0, 1, 1, 3,
	1, 1, 0, 4, 1, 3, 2, 1, 1, 1,
	3, 2, 3, 0, 1, 2, 4, 4, 0, 1,
	3, 1, 3, 2, 0, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 1, 2, 2, 7, 0, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 2, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 3,
	1, 1, 4, 4, 4, 3, 2, 2, 2, 3,
	2, 3, 0, 2, 1, 1, 2, 2, 0, 1,
	2, 4, 1, 3, 1, 3, 3, 0, 1, 2,
	0, 1, 2, 1, 1, 0, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 0, 2, 1, 2, 2, 2, 2, 2,
	0, 1, 2, 2, 2, 2, 1, 3, 2, 2,
	2, 2, 2, 1, 3, 2, 1, 3, 2, 0,
	3, 3, 5, 5, 4, 1, 1, 4, 1, 3,
	1, 3, 2, 1, 1, 0, 1, 1, 1, 11,
	0, 2, 3, 2, 3, 1, 1, 1, 3, 3,
	4, 0, 2, 2, 2, 2, 5, 1, 1, 0,
	3, 0, 1, 1, 2, 4, 4, 4, 0, 1,
	10, 0, 1, 0, 6, 0, 4, 0, 3, 1,
	3, 4, 5, 0, 3, 1, 3, 2, 3, 1,
	2, 0, 6, 0, 2, 0, 2, 4, 5, 4,
	5, 1, 6, 5, 0, 3, 0, 1, 0, 1,
	1, 3, 2, 3, 3, 4, 4, 3, 3, 3,
	3, 4, 4, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	5, 4, 1, 3, 3, 0, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 0, 1, 1, 3, 1, 1,
	2, 1, 7, 7, 7, 7, 8, 5, 0, 1,
	0, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 0, 1, 3, 1, 3, 5, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 2, 1, 2,
	2, 1, 1, 2, 2, 2, 2, 2, 1, 5,
	6, 1, 2, 0, 1, 1, 2, 5, 0, 1,
	1, 1, 2, 2, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 2, 2, 2, 0, 3, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 3, 5, 2, 2, 2, 2, 1,
	1, 2, 6, 6, 6, 1, 1, 1, 1, 1,
	2, 2, 1, 2, 2, 2, 2, 2, 0, 1,
	1, 5, 4, 4, 5, 5, 5, 5, 4, 5,
	5, 5, 5, 5, 5, 5, 1, 1, 1, 4,
	2, 2, 4, 2, 2, 4, 6, 2, 2, 2,
	4, 6, 4, 2, 0, 1, 2, 3, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 1, 3, 0, 1, 1, 3, 3, 3,
	3, 2, 1, 3, 4, 3, 1, 3, 4, 4,
	5, 3, 4, 5, 6, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 1, 1, 3, 0, 1, 0, 3, 3, 0,
	5, 0, 3, 5, 0, 1, 1, 0, 1, 1,
	2, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int{
	-1000, -303, -2, -1, -3, -4, -5, -6, -38, -20,
	-7, -48, -32, -33, -34, -40, -45, -46, -47, -49,
	-16, -15, -14, 8, 10, -8, -152, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, 181, 9,
	49, -35, -36, -37, -41, -42, -43, -44, 283, 289,
	325, -50, -52, -17, -18, -19, 177, -9, -10, -11,
	-12, -13, 199, 198, 26, 197, 178, 120, 121, 123,
	124, 30, -51, 54, 179, -53, 6, 417, -60, 27,
	-81, -149, 57, -138, -140, 379, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 392, 393,
	394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	404, 405, 406, 407, 408, 409, 410, 411, 412, 413,
	414, 373, 216, 240, 243, 250, 120, 137, 131, 158,
	150, 151, 128, 220, 221, 64, 123, 353, 339, 324,
	126, 235, 237, 239, 242, 222, 146, 142, 234, 218,
	140, 223, 28, 224, 163, 225, 226, 378, 335, 265,
	357, 341, 247, 141, 336, 238, 338, 164, 168, 345,
	289, 135, 136, 343, 347, 162, 196, 32, 375, 34,
	208, 348, 166, 161, 157, 356, 251, 249, 160, 134,
	156, 219, 38, 170, 169, 171, 319, 320, 321, 322,
	227, 228, 344, 153, 143, 269, 129, 18, 351, 203,
	340, 290, 229, 244, 206, 252, 165, 167, 210, 215,
	377, 248, 349, 139, 207, 236, 202, 352, 130, 283,
	292, 230, 124, 241, 346, 355, 37, 305, 133, 127,
	193, 121, 212, 217, 231, 232, 233, 254, 253, 245,
	154, 209, 159, 132, 155, 122, 211, 354, 306, 416,
	267, 308, 152, 149, 213, 186, 376, 350, 342, 125,
	312, 307, 147, 255, 11, -153, 19, 323, -39, 181,
	-149, -5, -4, -32, -49, 184, -57, -58, -59, -120,
	-122, -81, 54, -149, -224, -194, -223, -195, -226, -196,
	-148, 20, 178, 177, 211, 10, 179, 287, 185, 8,
	6, 288, 197, 9, 289, 291, 292, 295, 296, 297,
	31, 300, 301, 57, 60, -149, -224, -194, 215, 222,
	-64, -65, -121, 15, 5, 308, 214, -188, -186, -259,
	194, 193, 76, 359, 183, 298, -304, -256, 342, 341,
	-157, 340, 333, 335, 177, 185, 343, 32, 345, 346,
	336, 308, 125, 122, -210, 80, 130, 129, -210, 214,
	29, -217, 318, -216, -218, 345, 346, 356, -211, 344,
	-136, -149, 58, 59, 75, 151, 148, -65, -121, -64,
	-50, -52, 308, 214, 185, 184, 359, -258, 20, -263,
	21, 22, -1, -70, 206, -81, 119, -57, -132, -149,
	324, 89, -39, 119, -81, 30, -123, -124, -125, -126,
	41, 45, 47, 42, 43, 44, 48, -306, 23, -145,
	-151, 23, -146, 60, -147, -140, 57, 58, 59, -50,
	-52, 51, 55, 11, 55, 54, 418, 58, 285, 299,
	308, 286, 298, 186, 214, 299, 214, 333, 186, 290,
	293, 294, 334, 51, 187, 51, -273, 356, -67, 17,
	-53, -52, 16, 20, 21, -184, 189, -184, 185, -184,
	184, -305, 11, 99, 213, 212, 337, 334, -233, 338,
	339, -157, -156, 97, -157, 184, 359, -257, 189, 349,
	376, 128, 129, 130, -221, 20, 29, 317, -194, 214,
	55, 89, 19, -219, 89, 100, -218, -218, -218, -219,
	-99, 29, -147, 60, 116, -99, 29, 119, 30, 30,
	-66, -67, -53, -52, 56, 56, -257, -257, -257, -257,
	-257, -54, -55, 107, -170, -149, 81, -172, 57, -166,
	380, 381, 382, 383, 384, 385, 386, 388, 393, 395,
	399, 400, 401, 402, 406, 407, 412, 413, 414, 308,
	147, -167, -169, -289, -284, -165, 54, 105, 106, 113,
	82, -168, -246, 24, 367, -128, -129, -130, -131, -285,
	-283, 60, 65, 69, 71, 72, 70, 67, 118, -52,
	-262, -268, -266, 148, 200, 144, 145, 8, 111, 318,
	116, -269, 59, 58, 271, 75, 272, 273, 359, 268,
	274, 189, 323, 43, 275, 276, 277, 278, 279, 366,
	280, 44, 281, 270, 204, 282, 370, 369, 371, 363,
	360, 358, 361, 362, 364, 365, -264, 33, -49, 54,
	30, 54, -149, -117, 12, 119, 65, 60, -149, 54,
	-209, -208, -132, -58, -58, -58, -58, 41, 41, 41,
	46, 41, 46, 41, -125, -146, -151, 56, -225, 184,
	284, 210, -223, 211, 289, 292, -200, -199, -197, -148,
	60, -195, -228, -132, -148, 334, -225, -200, -199, 326,
	-170, -149, -63, -62, -170, -200, 81, -194, -147, -149,
	-184, -81, -156, -156, -158, -305, -154, -305, 334, -117,
	-169, -233, -155, -149, -184, -200, 308, 24, 350, 351,
	126, 129, 128, 357, -222, 317, 20, -194, -216, -212,
	60, 318, -199, -220, 51, 116, -270, -170, 29, -219,
	-219, -219, -220, 115, -149, -200, -194, -149, -82, -81,
	-150, -147, -140, -116, 55, -115, 11, -144, 80, 78,
	79, -149, 23, 119, -170, 96, -180, 89, 90, 91,
	92, 93, 94, 54, 54, 54, 54, 54, 54, 54,
	54, -178, 54, 54, 54, 54, 54, -178, 54, 54,
	54, 102, 101, 112, 105, 106, 107, 108, 109, 110,
	111, 103, 104, 99, 81, 97, 98, 83, -52, -170,
	-175, -169, -169, -169, -169, -246, 54, -170, 54, -267,
	54, -177, -178, 54, 60, 60, 60, 54, 54, 54,
	-169, 54, -265, -176, -302, 415, -72, 56, -68, -149,
	-300, -301, -68, -71, -149, -65, -170, -142, -143, -135,
	-139, -146, -147, -140, 266, 182, 20, 80, 23, 25,
	271, 303, 83, 116, 16, 84, 148, 115, 273, 367,
	272, 177, 47, 75, 369, 371, 370, 360, 358, 310,
	314, 316, 313, 359, 333, 29, 10, 26, 198, 21,
	22, 109, 179, 200, 87, 88, 201, 24, 199, 72,
	19, 50, 11, 323, 13, 14, 274, 309, 189, 188,
	99, 326, 185, 45, 8, 118, 27, 96, 311, 41,
	77, 43, 97, 17, 361, 362, 31, 325, 372, 205,
	111, 275, 276, 277, 48, 81, 317, 70, 51, 78,
	15, 46, 98, 180, 366, 44, 214, 315, 279, 281,
	280, 183, 6, 270, 368, 30, 197, 42, 184, 334,
	86, 187, 71, 204, 144, 145, 5, 76, 9, 49,
	52, 363, 364, 365, 33, 85, 12, 282, 278, 318,
	327, 328, 329, 330, 331, 332, 172, 173, 174, 175,
	176, 246, 192, 190, 194, 195, 415, 19, -39, 119,
	-69, -149, -117, 55, 89, -74, -73, 51, 52, -75,
	51, -73, 41, 41, -227, 107, 57, 55, -198, 309,
	418, 58, 56, 55, -227, 187, 60, 55, 18, 119,
	55, -61, 25, 26, -201, -202, 315, 24, -187, 52,
	-182, -183, -181, -185, 29, -81, -117, -117, -117, -156,
	-150, -158, -153, -158, -154, 119, -137, -149, -201, 54,
	127, 130, 130, 129, -194, 187, 54, 89, -220, -220,
	-220, 29, -148, 51, 55, -117, -55, -56, -57, -170,
	-170, -170, -149, -149, 107, 70, 81, -166, -174, -175,
	-170, -127, 21, 20, -127, -127, -170, -127, 107, -175,
	-175, 56, -248, 65, -127, -127, -127, -127, -127, -127,
	-127, -167, -167, -167, -167, -167, -167, -167, -167, -167,
	-167, -167, -167, -173, -179, -246, 54, 99, 97, 98,
	83, -169, -167, -167, 56, 55, -170, -247, 270, -174,
	56, -175, -174, -167, -174, -127, 55, 54, 56, 55,
	33, 119, 55, 89, 56, 55, -66, 119, 324, -149,
	56, 55, -65, -208, -170, -170, 54, -170, 11, 119,
	119, -199, 16, 376, -148, -132, 187, -200, -274, 188,
	366, -170, -170, -149, -62, -206, 376, 317, 316, 312,
	-203, -204, 311, 313, 310, 314, 51, 260, 261, 262,
	263, -181, -136, 115, 225, 151, 54, -117, -156, -156,
	-158, -149, -206, 56, 130, -200, -159, 60, -212, -81,
	-81, -119, 13, 55, 119, 70, 56, 55, -170, -170,
	-170, 23, -175, 56, 56, 56, 56, -170, -170, -170,
	-170, -170, -170, -170, -175, -173, -169, -167, -167, -171,
	201, 80, -170, 55, 52, 56, 56, 52, 56, 55,
	56, -170, -176, -272, -271, -270, 33, -49, -68, -265,
	-149, -301, -270, -149, -142, -139, -147, -140, 65, -149,
	-66, -69, -200, 107, 107, 57, -148, 318, -148, -200,
	-213, 376, 27, 119, -205, -207, 319, 320, 321, 322,
	80, -204, 60, 60, 60, 60, -81, -141, 89, -141,
	-141, -76, -77, -78, -83, -79, -132, -161, -80, 192,
	190, 194, -297, 76, 195, 246, 77, 185, -117, -117,
	-156, -163, -164, -162, 266, -260, 318, 309, 56, -118,
	14, 16, -57, -149, 107, -170, 56, 56, 56, -84,
	-90, 116, 148, 200, 147, 146, 144, 305, 306, 140,
	141, 139, 56, 56, 56, 56, 56, 56, 56, 56,
	56, -171, 80, -169, -166, 56, -84, -99, -99, -167,
	56, 56, 55, -265, 56, -148, 16, 23, -201, 289,
	184, -207, 65, 65, 65, 65, -204, 54, -99, -101,
	-147, 60, 116, 60, 56, 55, -85, -89, -86, -88,
	-87, -91, -90, 148, 149, 116, 152, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 30, 200, 144,
	145, 146, 147, 164, 131, 150, 374, 172, 132, 173,
	133, 174, 134, 175, 135, 136, 176, 137, -80, -149,
	77, -296, -297, -184, -296, 77, 54, -117, -162, 267,
	31, 118, 269, 29, 265, 16, -170, -175, 56, -249,
	-251, 54, -250, 54, -249, -249, -249, -92, 136, 135,
	-92, -252, 54, -253, 54, -252, -166, 56, 56, 56,
	56, -270, -148, -148, -213, 290, -81, -189, -191, -132,
	54, -97, -98, -114, 303, 216, -185, 220, 64, 221,
	324, 222, 185, 224, 225, 226, 196, 227, 228, 229,
	318, 230, 231, 232, 233, 286, 5, 256, -78, -96,
	-95, -93, 70, 81, 29, 303, -94, 64, 115, 239,
	217, 240, -113, -160, 190, 76, 77, 291, -161, -254,
	306, 305, -249, -250, -251, -249, -249, 54, 54, -249,
	-249, -249, -249, -293, -294, -149, -294, -149, -293, -293,
	-184, -170, 65, -261, -159, 65, 65, 65, 65, -275,
	-233, 56, 55, -249, -170, -229, 206, 55, -114, -141,
	-141, -136, 115, -141, -141, -141, -141, 223, 223, -141,
	-141, -141, -141, -141, -141, -141, -141, -141, -141, -141,
	-141, -141, -141, 54, -93, 70, -167, 60, -101, -102,
	29, 238, 234, -103, 29, 218, 219, -105, 54, 246,
	77, 77, -81, -255, 307, -134, 60, -134, 54, 52,
	255, 54, 54, 54, -294, 56, 268, 56, 56, 55,
	56, 55, -281, 332, -277, -276, 327, 328, 329, 330,
	-192, -191, -61, 56, 16, -114, 65, 65, -141, -141,
	65, 60, 60, 60, -141, -141, 65, 60, -151, 65,
	65, 65, 65, 29, 60, -104, 29, 234, 238, 235,
	236, 237, 65, 29, 65, 29, 65, 29, -149, 54,
	-298, -299, 60, 65, 54, -190, 54, 56, 55, 56,
	-189, -295, 260, 261, 262, 264, 263, -295, -189, -189,
	-189, 54, -215, -214, 247, 81, 65, 65, -282, 188,
	-279, 331, -276, 16, 329, 16, 16, -193, 196, 64,
	376, 258, 259, -61, -230, 248, 249, -231, -237, 251,
	-99, -99, 60, 60, -100, 217, -82, 56, 55, 89,
	56, -170, -107, -106, 372, -189, 60, 56, 56, 56,
	56, -189, 247, 56, 56, -288, 54, 65, -280, 327,
	16, -278, 60, 16, -278, -278, -141, 60, 257, -235,
	252, 54, -233, 54, -233, 77, 261, 218, 219, 56,
	-299, 60, 56, -111, -112, -109, -110, 51, 336, 244,
	245, 56, -192, -192, -192, -192, 56, -292, 30, 56,
	-287, -286, -133, -283, -149, 332, 16, 60, -278, 65,
	-147, -232, 253, 65, -167, 54, -167, 54, -234, 250,
	54, -214, -110, 51, -109, 51, 10, 9, -113, -291,
	-290, -289, 56, 55, 119, 60, -239, 54, 16, 56,
	-228, 56, -228, 54, 89, -167, -108, 241, 242, 30,
	129, -108, 55, 89, -286, -149, -240, -238, 206, -231,
	56, 56, -228, 65, 56, 70, 29, 243, -290, 29,
	-170, 119, 56, 55, 57, -236, 254, 56, -149, -238,
	-241, 33, 65, -245, -242, 54, -114, 208, -245, -114,
	-244, -243, 253, 209, 56, 55, 57, 54, -243, -242,
	-175, 56,
}

var yyDef = [...]int{
	20, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	405, 406, 407, 0, 0, 264, 0, 218, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 200, 0, 0,
	180, 160, 161, 162, 119, 120, 121, 122, 0, 0,
	0, 308, -2, 408, 409, 410, -2, 265, 266, 267,
	268, 269, 196, 197, 198, -2, 0, 173, 0, 165,
	165, 0, 318, 0, 0, 329, 338, 20, 302, 0,
	307, 582, 618, 619, 620, 1216, 1217, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240,
	1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250,
	1251, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
	1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
	1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
	1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
	1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131,
	1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
	1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
	1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161,
	1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
	1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 0, 189, 0, 0, 193, 0,
	261, 185, 186, 187, 188, 0, 0, 360, 361, 384,
	387, 390, 0, 179, 0, 0, 80, 448, 82, 450,
	0, 86, 88, 89, -2, 93, 94, 95, 96, 97,
	98, 99, 0, 101, 1112, 103, 1172, 106, 107, 108,
	0, 117, 118, -2, -2, 445, 0, 0, 1161, 62,
	-2, 0, 0, 0, 334, 479, 479, 0, 479, 0,
	456, 457, 458, 477, 478, 492, 0, 0, 237, 238,
	0, 254, 245, 254, 0, 229, 230, 231, 235, 236,
	255, 203, 174, 175, 164, 0, 169, 0, 163, 0,
	0, 133, 0, 138, 0, 1111, 1176, 1127, 0, 1144,
	0, 158, 151, 152, 909, 1073, 0, 313, 0, 319,
	0, 318, 203, 203, 203, 203, 203, 0, 339, 340,
	341, 342, 3, 0, 0, 306, 0, 347, 190, 621,
	0, 0, 195, 0, 0, 0, 0, 0, 0, 0,
	375, 0, 0, 374, 0, 0, 0, 0, 388, 389,
	391, 0, 393, 394, 400, 401, 402, 403, 404, 0,
	318, 76, 0, 0, 0, 0, 0, 452, 87, 116,
	90, 91, 0, 111, 113, 115, 114, 100, 112, 102,
	104, 105, 110, 76, 0, 0, 0, 63, 312, 0,
	331, 333, 0, 335, 336, 0, 0, 0, 0, 0,
	479, 0, 250, 251, 245, 245, 239, 247, 0, 252,
	253, 0, 347, 0, 0, 0, 479, 0, 0, 0,
	0, 167, 0, 172, 123, 128, 126, 127, 129, 0,
	0, 0, 0, 0, 156, 157, 0, 0, 0, 0,
	145, 148, 574, 575, 576, 149, 150, 0, 910, 911,
	310, 314, 330, 332, 327, 328, 0, 0, 0, 0,
	0, 355, 349, 351, 395, 28, 0, 812, 618, 816,
	1217, 1218, 1219, 1220, 1221, 1222, 1223, 1225, 1230, 1232,
	-2, -2, -2, 1239, 1243, 1244, 1249, 1250, 1251, -2,
	-2, 825, 689, 690, 691, 692, 0, 0, 0, 0,
	0, 699, 700, 0, 0, 705, 706, 707, 708, 38,
	39, 841, 842, 843, 844, 845, 846, 847, 779, 676,
	0, 764, 754, 0, 774, 792, 793, 0, 0, 0,
	0, 0, 40, 41, 770, 771, 772, 773, 775, 776,
	777, 778, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 794, 796, 766, 767, 768, 769,
	758, 759, 760, 761, 762, 763, 276, 294, 278, 0,
	283, 0, 583, 318, 0, 0, 191, 0, 262, 0,
	347, 182, 0, 378, 372, 0, 365, 376, 377, 368,
	0, 370, 0, 366, 367, 385, 392, 386, 0, 77,
	78, 79, 81, 92, 0, 0, 70, 433, 439, 436,
	446, 449, 0, 84, 451, 109, 0, 65, 0, 0,
	315, 28, 320, 321, 324, 420, 0, 447, 471, -2,
	0, 347, 347, 347, 245, 0, 247, 0, 247, 242,
	246, 0, 256, 258, 0, 420, 1203, 204, 176, 177,
	0, 0, 171, 0, 0, 130, 131, 132, 139, 134,
	136, 0, 0, 140, 153, 154, 155, 300, 301, 0,
	0, 0, 144, 0, 159, 270, 271, 0, 273, 580,
	274, 398, 399, 347, 0, 356, 0, 352, 0, 0,
	0, 396, 0, 0, 811, 0, 0, 830, 831, 832,
	833, 834, 835, 804, 799, 799, 799, 0, 799, 0,
	0, 740, 0, 799, 799, 799, 799, 741, 799, 799,
	799, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 806,
	0, 695, 696, 697, 698, 701, 0, 0, 804, 743,
	0, 744, 755, 0, 747, 748, 749, 804, 0, 804,
	753, 799, 277, 291, 0, 295, 0, 0, 287, 289,
	282, 284, 0, 0, 304, 313, 348, 622, 0, 916,
	-2, 918, -2, -2, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 0, 194, 0,
	0, 382, 318, 0, 0, 362, 379, 0, 0, 363,
	0, 364, 369, 371, 0, 71, 75, 0, 435, 0,
	0, 438, 83, 0, 0, 0, 59, 0, 0, 0,
	0, 323, 325, 326, 412, 421, 0, 480, 0, 0,
	476, -2, 483, 0, 489, 0, 228, 232, 233, 347,
	248, 245, 249, 245, 247, 0, 257, 260, 412, 0,
	178, 166, 168, 0, 125, 0, 0, 0, 141, 142,
	143, 146, 147, 0, 0, 345, 350, 357, 358, 808,
	809, 810, 397, 29, 353, 813, 0, 815, 0, 805,
	806, 0, 800, 801, 0, 0, 0, 0, 0, 0,
	0, 756, 0, 840, 0, 0, 0, 0, 0, 0,
	0, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 817, 828, 829, 0, 0, 0, 0,
	0, 826, 821, 0, 693, 0, 0, 798, 802, 0,
	765, 0, 0, 0, 0, 0, 294, 296, 0, 0,
	294, 0, 0, 0, 303, 0, 275, 0, 0, 263,
	199, 0, 313, 183, 184, 380, 0, 373, 0, 0,
	0, 434, 0, 0, 437, 85, 0, 67, 0, 60,
	61, 316, 317, 29, 322, 411, 0, 422, 423, 424,
	425, 426, 0, 0, 0, 0, 0, 472, 473, 474,
	475, 484, 912, 912, 912, 0, 584, 240, 347, 347,
	245, 259, 205, 0, 170, 124, 0, 217, 135, 272,
	581, 343, 0, 0, 0, 814, 739, 0, 0, 0,
	0, 0, 0, 728, 722, 723, 757, 0, 0, 0,
	0, 0, 0, 0, 0, 818, 826, 822, 0, 819,
	0, 0, 807, 0, 0, 742, 745, 0, 750, 0,
	752, 0, 292, 0, 297, 298, 294, 281, 288, 280,
	290, 285, 286, 305, 623, 917, 914, 915, 192, 383,
	181, 0, 69, 72, 73, 74, 440, 0, 441, 420,
	66, 0, 0, 0, 413, 414, 0, 0, 0, 0,
	0, 428, 429, 430, 431, 432, 0, 0, 913, 0,
	0, 0, 585, 586, 588, 589, 0, 0, 591, 645,
	0, 600, 479, 600, 0, 0, 602, 603, 243, 241,
	347, 201, 206, 207, 0, 211, 0, 0, 137, 337,
	0, 0, 359, 30, 354, 807, 724, 725, 726, 0,
	709, 894, 896, 712, 894, 894, 894, 718, 718, 899,
	901, 899, 727, 729, 730, 733, 731, 734, 735, 721,
	803, 820, 0, 827, 823, 694, 0, 0, 0, 0,
	732, 293, 0, 279, 381, 444, 0, 0, 67, 0,
	0, 415, 416, 417, 418, 419, 427, 0, 485, 486,
	577, 578, 579, 487, -2, 0, -2, 904, 849, 850,
	851, 894, 853, 896, 0, 894, 894, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 0, 0, 871, 894,
	894, 894, 894, 891, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 590, 646,
	612, 612, 601, 612, 612, 479, 0, 244, 208, 209,
	210, 0, 213, 214, 216, 0, 344, 346, 702, 710,
	895, 0, 711, 0, 713, 714, 715, 716, 719, 720,
	717, 868, 0, 869, 0, 870, 824, 703, 704, 746,
	751, 299, 442, 443, 64, 68, 50, 0, 467, 894,
	0, 493, -2, 530, 912, 912, 0, 912, 912, 912,
	912, 0, 0, 912, 912, 912, 912, 912, 912, 912,
	912, 912, 912, 912, 912, 912, 912, 0, 587, 614,
	-2, 626, 628, 0, 0, 631, 632, 0, 0, 0,
	0, 668, 638, 0, 0, 838, 839, 0, 644, 907,
	905, 906, 852, 876, 877, 878, 879, 0, 0, 872,
	873, 874, 875, 0, 604, 613, 0, 613, 0, 0,
	612, 0, 0, 215, 202, 0, 0, 0, 0, 44,
	0, 460, 0, 324, 0, 490, 0, 488, 532, 0,
	0, 912, 912, 0, 0, 0, 0, 912, 912, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 629, 630, 633, 634, 635,
	673, 674, 675, 636, 670, 671, 672, 637, 0, 0,
	836, 837, 666, 848, 908, 0, 892, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 212, 898, 897, 0,
	902, 0, 42, 46, 51, 52, 0, 0, 0, 0,
	459, 468, 469, 324, 526, 531, 533, 534, 0, 0,
	537, 538, 539, 540, 0, 0, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 568, 569, 570, 571,
	572, 573, 553, 554, 555, 556, 557, 558, 565, 0,
	0, 562, 0, 0, 0, 661, 0, 889, 0, 890,
	0, 605, 607, 608, 609, 610, 611, 606, 0, 0,
	0, 0, 597, 599, 641, 0, 0, 0, 31, 0,
	48, 0, 53, 0, 0, 0, 0, 461, 912, 0,
	0, 465, 466, 470, 515, 0, 0, 521, 0, 527,
	535, 536, 541, 542, 559, 0, 0, 561, 0, 0,
	669, 0, 648, 662, 0, 0, 893, 460, 460, 460,
	460, 0, 642, 900, 903, 22, 0, 0, 45, 0,
	0, 54, 58, 0, 56, 57, 0, 463, 0, 495,
	0, 0, 0, 0, 0, 524, 0, 566, 567, 560,
	563, 564, 639, 647, 649, 650, 651, 0, 663, 664,
	665, 667, 592, 593, 594, 595, 0, 21, 0, 32,
	0, 34, 36, 37, 615, 43, 0, 47, 55, 462,
	464, 497, 0, 516, 0, 0, 0, 0, 0, 0,
	0, 640, 652, 0, 653, 0, 0, 0, 596, 23,
	24, 0, 33, 0, 0, 49, 494, 0, 526, 517,
	0, 519, 0, 0, 0, 0, 654, 656, 657, 0,
	0, 655, 0, 0, 35, 616, 0, 499, 0, 513,
	518, 520, 0, 525, 523, 658, 660, 659, 25, 26,
	27, 0, 498, 0, 511, 496, 0, 522, 617, 500,
	-2, 0, 514, 501, -2, 0, 509, 0, 502, 510,
	0, 505, 0, 0, 504, 0, -2, 0, 506, -2,
	0, 512,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 110, 102, 3,
	54, 56, 107, 105, 55, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 417,
	90, 89, 91, 3, 418, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:473
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:479
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:502
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:506
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 21:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:512
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				File:              yyDollar[5].str,
				DuplicateHandling: yyDollar[6].duplicateKeyUnion(),
				Table:             yyDollar[9].tableNameUnion(),
				Fields:            yyDollar[10].fieldsUnion(),
				Lines:             yyDollar[11].linesUnion(),
				IgnoredLines:      uint64(yyDollar[12].int64ValUnion()),
				ColumnList:        yyDollar[13].loadColumnsUnion(),
				Assignments:       yyDollar[14].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:527
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:531
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:537
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:541
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:547
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:554
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:563
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:567
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:571
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:576
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:580
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:584
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:590
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:599
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:610
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:614
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:620
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:624
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:630
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:654
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:673
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:677
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:682
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:686
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:694
		{
			yyVAL.str = ""
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:698
		{
			yyVAL.str = yyDollar[3].str
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:703
		{
			yyVAL.str = "\n"
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:707
		{
			yyVAL.str = yyDollar[3].str
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:712
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:716
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:740
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:744
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:750
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:756
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:774
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:791
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:814
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:818
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:822
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:827
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:831
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:837
		{
			yyLOCAL = &tree.Grant{
				Privileges:  yyDollar[2].privilegesUnion(),
				ObjType:     yyDollar[4].objectTypeUnion(),
				Level:       yyDollar[5].privilegeLevelUnion(),
				Users:       yyDollar[7].usersUnion(),
				GrantOption: yyDollar[9].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:847
		{
			yyLOCAL = &tree.Grant{
				IsGrantRole:      true,
				RolesInGrantRole: yyDollar[2].rolesUnion(),
				Users:            yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:855
		{
			yyLOCAL = &tree.Grant{
				IsProxy:     true,
				ProxyUser:   yyDollar[4].userUnion(),
				Users:       yyDollar[6].usersUnion(),
				GrantOption: yyDollar[7].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:865
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:869
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:879
		{
			yyLOCAL = &tree.Revoke{
				Privileges: yyDollar[2].privilegesUnion(),
				ObjType:    yyDollar[4].objectTypeUnion(),
				Level:      yyDollar[5].privilegeLevelUnion(),
				Users:      yyDollar[7].usersUnion(),
				Roles:      nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:889
		{
			yyLOCAL = &tree.Revoke{
				IsRevokeRole:      true,
				RolesInRevokeRole: yyDollar[2].rolesUnion(),
				Users:             yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:899
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:905
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_GLOBAL,
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:911
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
				DbName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:918
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				DbName:  yyDollar[1].str,
				TabName: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:926
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:934
		{
			yyLOCAL = tree.OBJECT_TYPE_NONE
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:938
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:942
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:946
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:952
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:956
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:962
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:969
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:978
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:982
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:988
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:992
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:996
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1000
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1004
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1008
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1012
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1016
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1020
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1024
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1028
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1032
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1036
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1040
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1044
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1048
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1052
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1056
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1060
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1064
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1068
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1072
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1076
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1080
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1084
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1088
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1092
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1096
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1100
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1104
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1108
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1112
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1116
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1128
		{
			yyLOCAL = yyDollar[3].setRoleUnion()
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1134
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1142
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL_EXCEPT, Roles: yyDollar[3].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1146
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_DEFAULT, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1150
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1154
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1158
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1164
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1168
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1172
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1178
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1184
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1188
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:1195
		{
			yyVAL.str = yyDollar[3].str
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1201
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1205
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1211
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1219
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1228
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1236
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1244
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1267
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumVal(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1274
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumVal(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1281
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     yyDollar[1].str,
				Value:    tree.NewNumVal(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false),
				Reserved: tree.NewNumVal(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1289
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1296
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumVal(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1303
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1316
		{
			yyLOCAL = tree.NewNumVal(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1320
		{
			yyLOCAL = tree.NewNumVal(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1324
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1330
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1334
		{
			yyVAL.str = yyDollar[1].str
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1341
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1352
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1358
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1363
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1367
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1371
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1375
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1379
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1383
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1387
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1391
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1397
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1401
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1405
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1409
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1414
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1419
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1425
		{
			yyLOCAL = &tree.Use{Name: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1429
		{
			yyLOCAL = &tree.Use{}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1435
		{
			yyLOCAL = &tree.Update{
				Table:   yyDollar[2].tableExprUnion(),
				Exprs:   yyDollar[4].updateExprsUnion(),
				Where:   yyDollar[5].whereUnion(),
				OrderBy: yyDollar[6].orderByUnion(),
				Limit:   yyDollar[7].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1448
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1452
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1458
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1467
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1473
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1478
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1483
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1487
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1491
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "row")
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1495
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[5].statementUnion(), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1499
		{
			yyLOCAL = tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "")
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1510
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1520
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: false,
				Users:      yyDollar[4].usersUnion(),
				TlsOpts:    yyDollar[5].tlsOptionsUnion(),
				ResOpts:    yyDollar[6].resourceOptionsUnion(),
				MiscOpts:   yyDollar[7].userMiscOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1531
		{
			auth := &tree.User{
				AuthString: yyDollar[9].str,
				ByAuth:     true,
			}
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: true,
				UserFunc:   auth,
			}
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1544
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1548
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1553
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1557
		{
			yyLOCAL = yyDollar[1].userMiscOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1563
		{
			yyLOCAL = []tree.UserMiscOption{yyDollar[1].userMiscOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1567
		{
			yyLOCAL = append(yyDollar[1].userMiscOptionsUnion(), yyDollar[2].userMiscOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1573
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1577
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1581
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1585
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1589
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1593
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1599
		{
			yyVAL.item = nil
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1604
		{
			yyVAL.item = nil
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1625
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: *yyDollar[4].tableNameUnion(),
				Where:     yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1639
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1649
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1658
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1662
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1666
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1672
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1678
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1684
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1690
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1700
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1712
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1718
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1730
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1743
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1747
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1752
		{
			yyVAL.str = ""
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:1756
		{
			yyVAL.str = yyDollar[2].str
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1762
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1775
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1779
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1785
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1789
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1795
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1799
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1808
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1812
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1816
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].str, yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1832
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1841
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1850
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].str),
				TableName: *yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1860
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1866
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].str), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1872
		{
			yyLOCAL = &tree.Delete{
				Table:   yyDollar[3].tableExprUnion(),
				Where:   yyDollar[4].whereUnion(),
				OrderBy: yyDollar[5].orderByUnion(),
				Limit:   yyDollar[6].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1887
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:1896
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:1903
		{
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(yyDollar[1].selectUnion(), nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:1909
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:1917
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:1924
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(yyDollar[4].selectUnion(), nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:1931
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:1950
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:1954
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:1958
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:1964
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:1973
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:1977
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1983
		{
			yyVAL.str = yyDollar[1].str
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1987
		{
			yyVAL.str = yyDollar[3].str
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:1993
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:1997
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2003
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2008
		{
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2012
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2019
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2023
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2030
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2035
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2039
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2045
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2049
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2055
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2059
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2066
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2072
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion()}
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2076
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion()}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2080
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion()}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2085
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2089
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2095
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2099
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2103
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2108
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2112
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2118
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2124
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2128
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:2134
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2139
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2143
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2147
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2154
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2158
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2164
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2168
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2178
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2188
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2198
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2210
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2218
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2226
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2236
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2248
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2252
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2256
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2265
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2269
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2274
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2278
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2283
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2287
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2293
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2297
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2303
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2307
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: tree.UnrestrictedIdentifier(yyDollar[2].str)}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2311
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2315
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].str, yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2321
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier("dual"), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2329
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2335
		{
			yyLOCAL = &tree.From{
				Tables: yyDollar[2].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2343
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2347
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2357
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2366
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2376
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2385
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2395
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2399
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2409
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2413
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2417
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2421
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2427
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2431
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2437
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2443
		{
			yyVAL.str = ""
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2447
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2451
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2457
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2461
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2467
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2471
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2477
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2481
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2487
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2491
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[3].str),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:2503
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2508
		{
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2509
		{
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:2513
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2525
		{
			yyVAL.str = ""
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2529
		{
			yyVAL.str = yyDollar[1].str
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2533
		{
			yyVAL.str = yyDollar[2].str
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2542
		{
			yyVAL.str = ""
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2546
		{
			yyVAL.str = yyDollar[1].str
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2550
		{
			yyVAL.str = yyDollar[2].str
		}
	case 411:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2579
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Users:       yyDollar[4].usersUnion(),
				TlsOpts:     yyDollar[5].tlsOptionsUnion(),
				ResOpts:     yyDollar[6].resourceOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2589
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2593
		{
			yyLOCAL = yyDollar[2].resourceOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2599
		{
			yyLOCAL = []tree.ResourceOption{yyDollar[1].resourceOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2603
		{
			yyLOCAL = append(yyDollar[1].resourceOptionsUnion(), yyDollar[2].resourceOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2609
		{
			yyLOCAL = &tree.ResourceOptionMaxQueriesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2613
		{
			yyLOCAL = &tree.ResourceOptionMaxUpdatesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2617
		{
			yyLOCAL = &tree.ResourceOptionMaxConnectionPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2621
		{
			yyLOCAL = &tree.ResourceOptionMaxUserConnections{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2627
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2634
		{
			t := &tree.TlsOptionNone{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2639
		{
			t := &tree.TlsOptionSSL{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2644
		{
			t := &tree.TlsOptionX509{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2649
		{
			yyLOCAL = yyDollar[2].tlsOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2655
		{
			yyLOCAL = []tree.TlsOption{yyDollar[1].tlsOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2659
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[3].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2663
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[2].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:2669
		{
			yyLOCAL = &tree.TlsOptionIssuer{Issuer: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:2673
		{
			yyLOCAL = &tree.TlsOptionSubject{Subject: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:2677
		{
			yyLOCAL = &tree.TlsOptionCipher{Cipher: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:2681
		{
			yyLOCAL = &tree.TlsOptionSan{San: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:2687
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:2691
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:2697
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthPlugin: yyDollar[2].authRecordUnion().AuthPlugin,
				AuthString: yyDollar[2].authRecordUnion().AuthString,
				HashString: yyDollar[2].authRecordUnion().HashString,
				ByAuth:     yyDollar[2].authRecordUnion().ByAuth,
			}
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:2710
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:2714
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:2718
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:2723
		{
			yyLOCAL = &tree.AuthRecord{}
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:2727
		{
			yyLOCAL = &tree.AuthRecord{
				AuthString: yyDollar[3].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:2734
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:2740
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				AuthString: yyDollar[5].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:2748
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				HashString: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:2755
		{
			yyLOCAL = &tree.AuthRecord{
				HashString: yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2767
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:2776
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:2780
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:2786
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: "%"}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:2790
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:2794
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:2803
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:2807
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:2811
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:2815
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2821
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].str),
				Table:       *yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:2840
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:2844
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:2866
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:2870
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:2874
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:2878
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:2882
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:2888
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:2892
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:2898
		{
			// Order is parsed but just ignored as MySQL did.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:2903
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:2908
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:2912
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:2916
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:2920
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:2924
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2930
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:   yyDollar[3].ifNotExistsUnion(),
				Name:          tree.Identifier(yyDollar[4].str),
				CreateOptions: yyDollar[5].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2944
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2948
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:2953
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:2957
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:2963
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:2967
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:2973
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:2977
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:2981
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2986
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2990
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2996
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3008
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3012
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3017
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3021
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3031
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3035
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3044
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3048
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3054
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3058
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3064
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3073
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3083
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3087
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3093
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3097
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3103
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3110
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3119
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3123
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3128
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3132
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3137
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3141
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3151
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3155
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3166
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3174
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3182
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3190
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3201
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3211
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3221
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3225
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3230
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3234
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3239
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3243
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3249
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3253
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3257
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3263
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3267
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3271
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3275
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3279
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3283
		{
			yyLOCAL = tree.NewTableOptionComment(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3287
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3291
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3295
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3299
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3303
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3307
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3311
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3315
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3319
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3323
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3327
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3331
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3335
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3339
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3343
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3347
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3351
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3355
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3359
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3363
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3367
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].str, yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3371
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3375
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3382
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3386
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:3392
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3397
		{
			yyVAL.str = ""
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3401
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3405
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3411
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3415
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3419
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3423
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3427
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3431
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3447
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3451
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3460
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3465
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3471
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3478
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3482
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3488
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3492
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3498
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.Name = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3508
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3514
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3523
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3532
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invail the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3555
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3564
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3574
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3582
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3588
		{
			yyVAL.str = ""
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3592
		{
			yyVAL.str = yyDollar[1].str
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3602
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3608
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3614
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3628
		{
			yyVAL.str = ""
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:3635
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:3641
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:3645
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:3649
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:3660
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:3664
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:3668
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:3673
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:3677
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:3683
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:3687
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:3693
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:3697
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:3701
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:3705
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:3709
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:3713
		{
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false))
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:3717
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:3721
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:3725
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:3729
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:3733
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:3737
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:3741
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3751
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3755
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3760
		{
			yyVAL.str = ""
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3764
		{
			yyVAL.str = yyDollar[1].str
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3770
		{
			yyVAL.str = ""
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3774
		{
			yyVAL.str = yyDollar[2].str
		}
	case 647:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:3780
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:3791
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:3801
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:3808
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:3815
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:3822
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:3831
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:3837
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:3843
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:3847
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:3851
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:3855
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:3859
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:3864
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:3871
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:3875
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:3879
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3884
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3888
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3893
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3897
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:3913
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3919
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3923
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3927
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3931
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3935
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3939
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3943
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3947
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3951
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3955
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3959
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3963
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3967
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3973
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3977
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3981
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3985
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3989
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3993
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:3997
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4001
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4005
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4009
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4013
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4017
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4022
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4026
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4030
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumVal(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4039
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4043
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4047
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4051
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4058
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4071
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4084
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4096
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4110
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          0,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4125
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4140
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4153
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4168
		{
		}
	case 721:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4174
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4183
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4191
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4199
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4208
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4217
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4226
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[4].exprsUnion(),
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4235
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumVal(constant.MakeString("*"), "*", false)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4244
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4253
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4262
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4271
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4280
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4289
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4298
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4314
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4332
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4344
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4358
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4366
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4373
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4385
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4393
		{
			cn := tree.NewNumVal(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4404
		{
			val := tree.NewNumVal(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4413
		{
			val := tree.NewNumVal(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4422
		{
			val := tree.NewNumVal(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4431
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4439
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4449
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4457
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4466
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4470
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4476
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4480
		{
			yyLOCAL = yyDollar[2].numValUnion()
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4493
		{
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4495
		{
		}
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4535
		{
			yyLOCAL = &tree.IntervalExpr{
				Expr: yyDollar[2].exprUnion(),
				Type: yyDollar[3].intervalTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:4543
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:4547
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:4551
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IntervalType
//line mysql_sql.y:4557
		{
			yyLOCAL = tree.INTERVAL_TYPE_SECOND
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:4563
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4568
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4572
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4578
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4582
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4589
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4593
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4597
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4601
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4605
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4611
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4615
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4619
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4626
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4630
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4634
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4638
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4642
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4646
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4650
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4654
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4660
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4664
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4670
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4674
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:4681
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:4685
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:4689
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:4693
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:4697
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:4701
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4708
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4712
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4716
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4720
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.NumVal
//line mysql_sql.y:4726
		{
			ival, errStr := util.GetInt64(yyDollar[1].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			if ival > 0 {
				yyLOCAL = tree.NewNumValWithResInt(constant.MakeInt64(ival), yylex.(*Lexer).scanner.LastToken, false, ival)
			} else {
				yyLOCAL = tree.NewNumValWithResInt(constant.MakeInt64(ival), yylex.(*Lexer).scanner.LastToken, true, ival)
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4741
		{
			yyLOCAL = tree.NewNumVal(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false)
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4745
		{
			ival := util.GetUint64(yyDollar[1].item)
			yyLOCAL = tree.NewNumVal(constant.MakeUint64(ival), yylex.(*Lexer).scanner.LastToken, false)
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4750
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithResFoalt(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, fval)
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4755
		{
			yyLOCAL = tree.NewNumVal(constant.MakeBool(true), "", false)
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4759
		{
			yyLOCAL = tree.NewNumVal(constant.MakeBool(false), "", false)
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4763
		{
			yyLOCAL = tree.NewNumVal(constant.MakeUnknown(), "", false)
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4767
		{
			ival := util.GetUint64(yyDollar[1].item)
			yyLOCAL = tree.NewNumVal(constant.MakeUint64(ival), yylex.(*Lexer).scanner.LastToken, false)
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4777
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4788
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4793
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4799
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4811
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4823
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4835
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4848
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4861
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4874
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4887
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4900
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4913
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4926
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4939
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4952
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4965
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4980
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5003
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 53 {
				yylex.Error("For float(M), M must between 0 and 53.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5051
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5068
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5080
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5095
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          0,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5110
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          0,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5125
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5141
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5154
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5167
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5180
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5193
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5205
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5217
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5229
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5241
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5253
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5265
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5277
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5289
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5301
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5314
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5329
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5352
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5357
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:5363
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:5369
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:5373
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:5379
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:5385
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:5392
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:5401
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:5408
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:5415
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5424
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5428
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5432
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5438
		{
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5440
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5450
		{
			yyVAL.str = ""
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5454
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
