// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const DATALINK = 57526
const BLOB = 57527
const TINYBLOB = 57528
const MEDIUMBLOB = 57529
const LONGBLOB = 57530
const JSON = 57531
const ENUM = 57532
const UUID = 57533
const VECF32 = 57534
const VECF64 = 57535
const GEOMETRY = 57536
const POINT = 57537
const LINESTRING = 57538
const POLYGON = 57539
const GEOMETRYCOLLECTION = 57540
const MULTIPOINT = 57541
const MULTILINESTRING = 57542
const MULTIPOLYGON = 57543
const INT1 = 57544
const INT2 = 57545
const INT3 = 57546
const INT4 = 57547
const INT8 = 57548
const S3OPTION = 57549
const STAGEOPTION = 57550
const SQL_SMALL_RESULT = 57551
const SQL_BIG_RESULT = 57552
const SQL_BUFFER_RESULT = 57553
const LOW_PRIORITY = 57554
const HIGH_PRIORITY = 57555
const DELAYED = 57556
const CREATE = 57557
const ALTER = 57558
const DROP = 57559
const RENAME = 57560
const ANALYZE = 57561
const ADD = 57562
const RETURNS = 57563
const SCHEMA = 57564
const TABLE = 57565
const SEQUENCE = 57566
const INDEX = 57567
const VIEW = 57568
const TO = 57569
const IGNORE = 57570
const IF = 57571
const PRIMARY = 57572
const COLUMN = 57573
const CONSTRAINT = 57574
const SPATIAL = 57575
const FULLTEXT = 57576
const FOREIGN = 57577
const KEY_BLOCK_SIZE = 57578
const SHOW = 57579
const DESCRIBE = 57580
const EXPLAIN = 57581
const DATE = 57582
const ESCAPE = 57583
const REPAIR = 57584
const OPTIMIZE = 57585
const TRUNCATE = 57586
const MAXVALUE = 57587
const PARTITION = 57588
const REORGANIZE = 57589
const LESS = 57590
const THAN = 57591
const PROCEDURE = 57592
const TRIGGER = 57593
const STATUS = 57594
const VARIABLES = 57595
const ROLE = 57596
const PROXY = 57597
const AVG_ROW_LENGTH = 57598
const STORAGE = 57599
const DISK = 57600
const MEMORY = 57601
const CHECKSUM = 57602
const COMPRESSION = 57603
const DATA = 57604
const DIRECTORY = 57605
const DELAY_KEY_WRITE = 57606
const ENCRYPTION = 57607
const ENGINE = 57608
const MAX_ROWS = 57609
const MIN_ROWS = 57610
const PACK_KEYS = 57611
const ROW_FORMAT = 57612
const STATS_AUTO_RECALC = 57613
const STATS_PERSISTENT = 57614
const STATS_SAMPLE_PAGES = 57615
const DYNAMIC = 57616
const COMPRESSED = 57617
const REDUNDANT = 57618
const COMPACT = 57619
const FIXED = 57620
const COLUMN_FORMAT = 57621
const AUTO_RANDOM = 57622
const ENGINE_ATTRIBUTE = 57623
const SECONDARY_ENGINE_ATTRIBUTE = 57624
const INSERT_METHOD = 57625
const RESTRICT = 57626
const CASCADE = 57627
const ACTION = 57628
const PARTIAL = 57629
const SIMPLE = 57630
const CHECK = 57631
const ENFORCED = 57632
const RANGE = 57633
const LIST = 57634
const ALGORITHM = 57635
const LINEAR = 57636
const PARTITIONS = 57637
const SUBPARTITION = 57638
const SUBPARTITIONS = 57639
const CLUSTER = 57640
const TYPE = 57641
const ANY = 57642
const SOME = 57643
const EXTERNAL = 57644
const LOCALFILE = 57645
const URL = 57646
const PREPARE = 57647
const DEALLOCATE = 57648
const RESET = 57649
const EXTENSION = 57650
const RETENTION = 57651
const PERIOD = 57652
const INCREMENT = 57653
const CYCLE = 57654
const MINVALUE = 57655
const PUBLICATION = 57656
const SUBSCRIPTIONS = 57657
const PUBLICATIONS = 57658
const PROPERTIES = 57659
const PARSER = 57660
const VISIBLE = 57661
const INVISIBLE = 57662
const BTREE = 57663
const HASH = 57664
const RTREE = 57665
const BSI = 57666
const IVFFLAT = 57667
const MASTER = 57668
const ZONEMAP = 57669
const LEADING = 57670
const BOTH = 57671
const TRAILING = 57672
const UNKNOWN = 57673
const LISTS = 57674
const OP_TYPE = 57675
const REINDEX = 57676
const EXPIRE = 57677
const ACCOUNT = 57678
const ACCOUNTS = 57679
const UNLOCK = 57680
const DAY = 57681
const NEVER = 57682
const PUMP = 57683
const MYSQL_COMPATIBILITY_MODE = 57684
const UNIQUE_CHECK_ON_AUTOINCR = 57685
const MODIFY = 57686
const CHANGE = 57687
const SECOND = 57688
const ASCII = 57689
const COALESCE = 57690
const COLLATION = 57691
const HOUR = 57692
const MICROSECOND = 57693
const MINUTE = 57694
const MONTH = 57695
const QUARTER = 57696
const REPEAT = 57697
const REVERSE = 57698
const ROW_COUNT = 57699
const WEEK = 57700
const REVOKE = 57701
const FUNCTION = 57702
const PRIVILEGES = 57703
const TABLESPACE = 57704
const EXECUTE = 57705
const SUPER = 57706
const GRANT = 57707
const OPTION = 57708
const REFERENCES = 57709
const REPLICATION = 57710
const SLAVE = 57711
const CLIENT = 57712
const USAGE = 57713
const RELOAD = 57714
const FILE = 57715
const TEMPORARY = 57716
const ROUTINE = 57717
const EVENT = 57718
const SHUTDOWN = 57719
const NULLX = 57720
const AUTO_INCREMENT = 57721
const APPROXNUM = 57722
const SIGNED = 57723
const UNSIGNED = 57724
const ZEROFILL = 57725
const ENGINES = 57726
const LOW_CARDINALITY = 57727
const AUTOEXTEND_SIZE = 57728
const ADMIN_NAME = 57729
const RANDOM = 57730
const SUSPEND = 57731
const ATTRIBUTE = 57732
const HISTORY = 57733
const REUSE = 57734
const CURRENT = 57735
const OPTIONAL = 57736
const FAILED_LOGIN_ATTEMPTS = 57737
const PASSWORD_LOCK_TIME = 57738
const UNBOUNDED = 57739
const SECONDARY = 57740
const RESTRICTED = 57741
const USER = 57742
const IDENTIFIED = 57743
const CIPHER = 57744
const ISSUER = 57745
const X509 = 57746
const SUBJECT = 57747
const SAN = 57748
const REQUIRE = 57749
const SSL = 57750
const NONE = 57751
const PASSWORD = 57752
const SHARED = 57753
const EXCLUSIVE = 57754
const MAX_QUERIES_PER_HOUR = 57755
const MAX_UPDATES_PER_HOUR = 57756
const MAX_CONNECTIONS_PER_HOUR = 57757
const MAX_USER_CONNECTIONS = 57758
const FORMAT = 57759
const VERBOSE = 57760
const CONNECTION = 57761
const TRIGGERS = 57762
const PROFILES = 57763
const LOAD = 57764
const INLINE = 57765
const INFILE = 57766
const TERMINATED = 57767
const OPTIONALLY = 57768
const ENCLOSED = 57769
const ESCAPED = 57770
const STARTING = 57771
const LINES = 57772
const ROWS = 57773
const IMPORT = 57774
const DISCARD = 57775
const JSONTYPE = 57776
const MODUMP = 57777
const OVER = 57778
const PRECEDING = 57779
const FOLLOWING = 57780
const GROUPS = 57781
const DATABASES = 57782
const TABLES = 57783
const SEQUENCES = 57784
const EXTENDED = 57785
const FULL = 57786
const PROCESSLIST = 57787
const FIELDS = 57788
const COLUMNS = 57789
const OPEN = 57790
const ERRORS = 57791
const WARNINGS = 57792
const INDEXES = 57793
const SCHEMAS = 57794
const NODE = 57795
const LOCKS = 57796
const ROLES = 57797
const TABLE_NUMBER = 57798
const COLUMN_NUMBER = 57799
const TABLE_VALUES = 57800
const TABLE_SIZE = 57801
const NAMES = 57802
const GLOBAL = 57803
const PERSIST = 57804
const SESSION = 57805
const ISOLATION = 57806
const LEVEL = 57807
const READ = 57808
const WRITE = 57809
const ONLY = 57810
const REPEATABLE = 57811
const COMMITTED = 57812
const UNCOMMITTED = 57813
const SERIALIZABLE = 57814
const LOCAL = 57815
const EVENTS = 57816
const PLUGINS = 57817
const CURRENT_TIMESTAMP = 57818
const DATABASE = 57819
const CURRENT_TIME = 57820
const LOCALTIME = 57821
const LOCALTIMESTAMP = 57822
const UTC_DATE = 57823
const UTC_TIME = 57824
const UTC_TIMESTAMP = 57825
const REPLACE = 57826
const CONVERT = 57827
const SEPARATOR = 57828
const TIMESTAMPDIFF = 57829
const CURRENT_DATE = 57830
const CURRENT_USER = 57831
const CURRENT_ROLE = 57832
const SECOND_MICROSECOND = 57833
const MINUTE_MICROSECOND = 57834
const MINUTE_SECOND = 57835
const HOUR_MICROSECOND = 57836
const HOUR_SECOND = 57837
const HOUR_MINUTE = 57838
const DAY_MICROSECOND = 57839
const DAY_SECOND = 57840
const DAY_MINUTE = 57841
const DAY_HOUR = 57842
const YEAR_MONTH = 57843
const SQL_TSI_HOUR = 57844
const SQL_TSI_DAY = 57845
const SQL_TSI_WEEK = 57846
const SQL_TSI_MONTH = 57847
const SQL_TSI_QUARTER = 57848
const SQL_TSI_YEAR = 57849
const SQL_TSI_SECOND = 57850
const SQL_TSI_MINUTE = 57851
const RECURSIVE = 57852
const CONFIG = 57853
const DRAINER = 57854
const SOURCE = 57855
const STREAM = 57856
const HEADERS = 57857
const CONNECTOR = 57858
const CONNECTORS = 57859
const DAEMON = 57860
const PAUSE = 57861
const CANCEL = 57862
const TASK = 57863
const RESUME = 57864
const MATCH = 57865
const AGAINST = 57866
const BOOLEAN = 57867
const LANGUAGE = 57868
const WITH = 57869
const QUERY = 57870
const EXPANSION = 57871
const WITHOUT = 57872
const VALIDATION = 57873
const UPGRADE = 57874
const RETRY = 57875
const ADDDATE = 57876
const BIT_AND = 57877
const BIT_OR = 57878
const BIT_XOR = 57879
const CAST = 57880
const COUNT = 57881
const APPROX_COUNT = 57882
const APPROX_COUNT_DISTINCT = 57883
const SERIAL_EXTRACT = 57884
const APPROX_PERCENTILE = 57885
const CURDATE = 57886
const CURTIME = 57887
const DATE_ADD = 57888
const DATE_SUB = 57889
const EXTRACT = 57890
const GROUP_CONCAT = 57891
const MAX = 57892
const MID = 57893
const MIN = 57894
const NOW = 57895
const POSITION = 57896
const SESSION_USER = 57897
const STD = 57898
const STDDEV = 57899
const MEDIAN = 57900
const CLUSTER_CENTERS = 57901
const KMEANS = 57902
const STDDEV_POP = 57903
const STDDEV_SAMP = 57904
const SUBDATE = 57905
const SUBSTR = 57906
const SUBSTRING = 57907
const SUM = 57908
const SYSDATE = 57909
const SYSTEM_USER = 57910
const TRANSLATE = 57911
const TRIM = 57912
const VARIANCE = 57913
const VAR_POP = 57914
const VAR_SAMP = 57915
const AVG = 57916
const RANK = 57917
const ROW_NUMBER = 57918
const DENSE_RANK = 57919
const BIT_CAST = 57920
const BITMAP_BIT_POSITION = 57921
const BITMAP_BUCKET_NUMBER = 57922
const BITMAP_COUNT = 57923
const BITMAP_CONSTRUCT_AGG = 57924
const BITMAP_OR_AGG = 57925
const NEXTVAL = 57926
const SETVAL = 57927
const CURRVAL = 57928
const LASTVAL = 57929
const ARROW = 57930
const ROW = 57931
const OUTFILE = 57932
const HEADER = 57933
const MAX_FILE_SIZE = 57934
const FORCE_QUOTE = 57935
const PARALLEL = 57936
const STRICT = 57937
const UNUSED = 57938
const BINDINGS = 57939
const DO = 57940
const DECLARE = 57941
const LOOP = 57942
const WHILE = 57943
const LEAVE = 57944
const ITERATE = 57945
const UNTIL = 57946
const CALL = 57947
const PREV = 57948
const SLIDING = 57949
const FILL = 57950
const SPBEGIN = 57951
const BACKEND = 57952
const SERVERS = 57953
const HANDLER = 57954
const PERCENT = 57955
const SAMPLE = 57956
const MO_TS = 57957
const PITR = 57958
const CDC = 57959
const KILL = 57960
const BACKUP = 57961
const FILESYSTEM = 57962
const PARALLELISM = 57963
const RESTORE = 57964
const QUERY_RESULT = 57965

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12438

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 133,
	11, 774,
	22, 774,
	-2, 767,
	-1, 156,
	240, 1183,
	242, 1082,
	-2, 1129,
	-1, 183,
	43, 597,
	242, 597,
	269, 604,
	270, 604,
	468, 597,
	-2, 632,
	-1, 223,
	644, 1942,
	-2, 507,
	-1, 525,
	644, 2062,
	-2, 392,
	-1, 583,
	644, 2121,
	-2, 390,
	-1, 584,
	644, 2122,
	-2, 391,
	-1, 585,
	644, 2123,
	-2, 393,
	-1, 718,
	321, 176,
	440, 176,
	441, 176,
	-2, 1847,
	-1, 784,
	83, 1633,
	-2, 1998,
	-1, 785,
	83, 1651,
	-2, 1969,
	-1, 789,
	83, 1652,
	-2, 1997,
	-1, 822,
	83, 1560,
	-2, 2195,
	-1, 823,
	83, 1561,
	-2, 2194,
	-1, 824,
	83, 1562,
	-2, 2184,
	-1, 825,
	83, 2156,
	-2, 2177,
	-1, 826,
	83, 2157,
	-2, 2178,
	-1, 827,
	83, 2158,
	-2, 2186,
	-1, 828,
	83, 2159,
	-2, 2166,
	-1, 829,
	83, 2160,
	-2, 2175,
	-1, 830,
	83, 2161,
	-2, 2187,
	-1, 831,
	83, 2162,
	-2, 2188,
	-1, 832,
	83, 2163,
	-2, 2193,
	-1, 833,
	83, 2164,
	-2, 2198,
	-1, 834,
	83, 2165,
	-2, 2199,
	-1, 835,
	83, 1629,
	-2, 2036,
	-1, 836,
	83, 1630,
	-2, 1831,
	-1, 837,
	83, 1631,
	-2, 2045,
	-1, 838,
	83, 1632,
	-2, 1840,
	-1, 840,
	83, 1635,
	-2, 1848,
	-1, 841,
	83, 1636,
	-2, 2069,
	-1, 843,
	83, 1639,
	-2, 1867,
	-1, 845,
	83, 1641,
	-2, 2081,
	-1, 846,
	83, 1642,
	-2, 2080,
	-1, 847,
	83, 1643,
	-2, 1911,
	-1, 848,
	83, 1644,
	-2, 1993,
	-1, 851,
	83, 1647,
	-2, 2092,
	-1, 853,
	83, 1649,
	-2, 2095,
	-1, 854,
	83, 1650,
	-2, 2097,
	-1, 855,
	83, 1653,
	-2, 2105,
	-1, 856,
	83, 1654,
	-2, 1978,
	-1, 857,
	83, 1655,
	-2, 2023,
	-1, 858,
	83, 1656,
	-2, 1988,
	-1, 859,
	83, 1657,
	-2, 2013,
	-1, 870,
	83, 1538,
	-2, 2189,
	-1, 871,
	83, 1539,
	-2, 2190,
	-1, 872,
	83, 1540,
	-2, 2191,
	-1, 971,
	463, 632,
	464, 632,
	-2, 598,
	-1, 1021,
	125, 1831,
	136, 1831,
	156, 1831,
	-2, 1805,
	-1, 1138,
	22, 801,
	-2, 750,
	-1, 1244,
	11, 774,
	22, 774,
	-2, 1418,
	-1, 1326,
	22, 801,
	-2, 750,
	-1, 1670,
	83, 1704,
	-2, 1995,
	-1, 1671,
	83, 1705,
	-2, 1996,
	-1, 1840,
	84, 954,
	-2, 960,
	-1, 2286,
	108, 1121,
	152, 1121,
	191, 1121,
	194, 1121,
	282, 1121,
	-2, 1114,
	-1, 2441,
	11, 774,
	22, 774,
	-2, 895,
	-1, 2474,
	84, 1791,
	157, 1791,
	-2, 1980,
	-1, 2475,
	84, 1791,
	157, 1791,
	-2, 1979,
	-1, 2476,
	84, 1767,
	157, 1767,
	-2, 1966,
	-1, 2477,
	84, 1768,
	157, 1768,
	-2, 1971,
	-1, 2478,
	84, 1769,
	157, 1769,
	-2, 1899,
	-1, 2479,
	84, 1770,
	157, 1770,
	-2, 1893,
	-1, 2480,
	84, 1771,
	157, 1771,
	-2, 1821,
	-1, 2481,
	84, 1772,
	157, 1772,
	-2, 1968,
	-1, 2482,
	84, 1773,
	157, 1773,
	-2, 1897,
	-1, 2483,
	84, 1774,
	157, 1774,
	-2, 1892,
	-1, 2484,
	84, 1775,
	157, 1775,
	-2, 1881,
	-1, 2485,
	84, 1791,
	157, 1791,
	-2, 1882,
	-1, 2486,
	84, 1791,
	157, 1791,
	-2, 1883,
	-1, 2488,
	84, 1780,
	157, 1780,
	-2, 2013,
	-1, 2489,
	84, 1757,
	157, 1757,
	-2, 1998,
	-1, 2490,
	84, 1789,
	157, 1789,
	-2, 1969,
	-1, 2491,
	84, 1789,
	157, 1789,
	-2, 1997,
	-1, 2492,
	84, 1789,
	157, 1789,
	-2, 1849,
	-1, 2493,
	84, 1787,
	157, 1787,
	-2, 1988,
	-1, 2494,
	84, 1784,
	157, 1784,
	-2, 1872,
	-1, 2495,
	83, 1738,
	84, 1738,
	157, 1738,
	398, 1738,
	399, 1738,
	400, 1738,
	-2, 1820,
	-1, 2496,
	83, 1739,
	84, 1739,
	157, 1739,
	398, 1739,
	399, 1739,
	400, 1739,
	-2, 1822,
	-1, 2497,
	83, 1740,
	84, 1740,
	157, 1740,
	398, 1740,
	399, 1740,
	400, 1740,
	-2, 2041,
	-1, 2498,
	83, 1742,
	84, 1742,
	157, 1742,
	398, 1742,
	399, 1742,
	400, 1742,
	-2, 1970,
	-1, 2499,
	83, 1744,
	84, 1744,
	157, 1744,
	398, 1744,
	399, 1744,
	400, 1744,
	-2, 1951,
	-1, 2500,
	83, 1746,
	84, 1746,
	157, 1746,
	398, 1746,
	399, 1746,
	400, 1746,
	-2, 1898,
	-1, 2501,
	83, 1748,
	84, 1748,
	157, 1748,
	398, 1748,
	399, 1748,
	400, 1748,
	-2, 1877,
	-1, 2502,
	83, 1749,
	84, 1749,
	157, 1749,
	398, 1749,
	399, 1749,
	400, 1749,
	-2, 1878,
	-1, 2503,
	83, 1751,
	84, 1751,
	157, 1751,
	398, 1751,
	399, 1751,
	400, 1751,
	-2, 1819,
	-1, 2504,
	84, 1794,
	157, 1794,
	398, 1794,
	399, 1794,
	400, 1794,
	-2, 1854,
	-1, 2505,
	84, 1794,
	157, 1794,
	398, 1794,
	399, 1794,
	400, 1794,
	-2, 1868,
	-1, 2506,
	84, 1797,
	157, 1797,
	398, 1797,
	399, 1797,
	400, 1797,
	-2, 1850,
	-1, 2507,
	84, 1797,
	157, 1797,
	398, 1797,
	399, 1797,
	400, 1797,
	-2, 1914,
	-1, 2508,
	84, 1794,
	157, 1794,
	398, 1794,
	399, 1794,
	400, 1794,
	-2, 1935,
	-1, 2721,
	108, 1121,
	152, 1121,
	191, 1121,
	194, 1121,
	282, 1121,
	-2, 1115,
	-1, 2739,
	81, 694,
	157, 694,
	-2, 1299,
	-1, 3153,
	194, 1121,
	306, 1386,
	-2, 1358,
	-1, 3332,
	108, 1121,
	152, 1121,
	191, 1121,
	194, 1121,
	-2, 1239,
	-1, 3334,
	108, 1121,
	152, 1121,
	191, 1121,
	194, 1121,
	-2, 1239,
	-1, 3346,
	81, 694,
	157, 694,
	-2, 1299,
	-1, 3367,
	194, 1121,
	306, 1386,
	-2, 1359,
	-1, 3516,
	108, 1121,
	152, 1121,
	191, 1121,
	194, 1121,
	-2, 1240,
	-1, 3544,
	84, 1201,
	157, 1201,
	-2, 1121,
	-1, 3682,
	84, 1201,
	157, 1201,
	-2, 1121,
	-1, 3838,
	84, 1205,
	157, 1205,
	-2, 1121,
	-1, 3885,
	84, 1206,
	157, 1206,
	-2, 1121,
}

const yyPrivate = 57344

const yyLast = 51599

var yyAct = [...]int{
	751, 728, 3931, 753, 3905, 2769, 212, 3924, 3842, 1926,
	1650, 3448, 3352, 3741, 3849, 3848, 2366, 3841, 3682, 3139,
	3798, 3767, 737, 2772, 3722, 3244, 3381, 3172, 3660, 1486,
	730, 2563, 2763, 3627, 3245, 3716, 1279, 3572, 3503, 1646,
	3681, 3745, 3504, 1421, 3501, 3600, 619, 781, 1139, 2766,
	1020, 3651, 2681, 3452, 1563, 3314, 1427, 3723, 3725, 3443,
	637, 3319, 643, 643, 1873, 726, 3525, 2742, 643, 660,
	669, 3513, 37, 669, 1653, 3096, 1697, 3368, 2333, 3110,
	3148, 3518, 3483, 3242, 3070, 2878, 3335, 2020, 3304, 2879,
	2034, 2877, 2017, 2792, 1133, 3099, 2472, 2858, 3168, 65,
	1984, 1711, 3150, 3337, 3157, 2435, 2057, 2874, 3284, 2598,
	2132, 2941, 2090, 197, 3230, 2470, 2336, 2901, 3210, 677,
	2710, 3077, 1886, 3081, 3075, 3119, 2297, 2265, 3068, 3071,
	720, 3073, 3156, 3072, 1397, 1479, 2722, 681, 2241, 1552,
	1129, 666, 3045, 2128, 2240, 2115, 2988, 2524, 2542, 2098,
	1559, 2063, 1567, 2013, 2914, 1803, 2924, 1390, 2099, 944,
	725, 2127, 132, 1987, 2436, 1985, 2423, 36, 2699, 2418,
	2694, 2091, 1574, 2774, 1014, 2334, 1916, 2794, 2734, 208,
	8, 207, 7, 6, 2296, 2286, 1849, 1526, 619, 2468,
	1077, 1644, 1595, 1495, 636, 2129, 1464, 2329, 729, 719,
	2277, 2139, 1704, 1635, 1410, 1649, 15, 2631, 33, 1431,
	1684, 738, 212, 1564, 212, 1152, 1068, 1069, 2162, 27,
	618, 2094, 1885, 643, 16, 1578, 2097, 2079, 727, 1533,
	2053, 674, 1845, 1643, 980, 1463, 23, 1013, 2443, 1848,
	14, 2419, 652, 1406, 655, 943, 1461, 1430, 1824, 1517,
	1712, 1422, 683, 684, 108, 24, 874, 17, 10, 198,
	1525, 2630, 668, 941, 194, 920, 966, 926, 1324, 1280,
	680, 3732, 876, 3645, 190, 664, 2666, 662, 2136, 877,
	1212, 1213, 1214, 1211, 2666, 2666, 1065, 2445, 665, 3349,
	3126, 1029, 2958, 661, 2957, 1212, 1213, 1214, 1211, 2146,
	1212, 1213, 1214, 1211, 1134, 3476, 3322, 1135, 1393, 663,
	3237, 2586, 1816, 2527, 195, 61, 186, 157, 1540, 639,
	2530, 1061, 2528, 1000, 2525, 1064, 1575, 1066, 1536, 1060,
	196, 638, 187, 1061, 934, 672, 935, 2239, 1061, 178,
	648, 1343, 896, 188, 894, 1587, 1047, 3055, 2245, 1817,
	2249, 1346, 1357, 3040, 1026, 3037, 3038, 3035, 3916, 1028,
	1134, 1444, 131, 1810, 1339, 1538, 1586, 1212, 1213, 1214,
	1211, 2658, 2656, 915, 3441, 2937, 8, 118, 7, 2935,
	1059, 2068, 644, 3711, 191, 3607, 3601, 929, 3444, 925,
	3243, 2112, 3727, 2093, 875, 3015, 1212, 1213, 1214, 1211,
	2085, 1274, 2374, 3823, 195, 61, 186, 157, 3488, 1174,
	2572, 195, 2133, 2660, 3667, 2287, 195, 3484, 1048, 3336,
	2288, 886, 1573, 3632, 1352, 195, 61, 186, 157, 2580,
	3778, 1828, 1825, 2728, 1503, 195, 195, 1351, 1349, 896,
	894, 895, 1030, 893, 865, 906, 864, 866, 867, 679,
	868, 869, 1365, 1582, 1593, 3013, 195, 721, 3668, 2144,
	1382, 139, 140, 1024, 141, 142, 2872, 2281, 995, 993,
	1025, 994, 2462, 195, 191, 2683, 1819, 195, 61, 186,
	157, 2726, 891, 1579, 1590, 1353, 191, 1209, 2030, 1604,
	1042, 1037, 1032, 1036, 1040, 191, 195, 2463, 195, 2907,
	3634, 2908, 2909, 1996, 2960, 1581, 1592, 195, 61, 186,
	157, 1440, 2543, 2684, 1441, 1997, 1998, 931, 1045, 924,
	1900, 2949, 1035, 722, 1636, 989, 191, 1640, 928, 927,
	887, 2729, 1202, 156, 184, 193, 185, 116, 3039, 3036,
	1465, 1147, 1467, 191, 131, 909, 131, 191, 1652, 916,
	3465, 1639, 721, 1830, 1831, 183, 177, 176, 2449, 1001,
	2696, 2448, 67, 3820, 2450, 1207, 191, 1418, 191, 923,
	2697, 1428, 1429, 1043, 3143, 3730, 1023, 191, 1022, 3852,
	3853, 997, 1046, 1616, 3730, 3811, 1364, 3873, 933, 3729,
	1426, 3729, 3810, 922, 1425, 1428, 1429, 921, 3141, 3728,
	3809, 3728, 1443, 908, 1033, 2228, 3909, 3910, 3816, 914,
	1539, 1537, 3714, 2942, 697, 696, 703, 693, 3246, 2695,
	2661, 3800, 3800, 179, 180, 181, 700, 701, 1044, 702,
	706, 912, 2943, 687, 2944, 3246, 3803, 1641, 3604, 2148,
	2004, 643, 643, 711, 1656, 999, 3825, 3826, 2567, 1144,
	3371, 3738, 643, 1143, 2685, 2813, 189, 3259, 3305, 3821,
	3822, 1638, 3717, 3718, 3719, 3720, 2140, 1631, 1034, 932,
	3312, 669, 669, 3092, 643, 1155, 1142, 127, 3493, 2076,
	2014, 182, 2978, 128, 2409, 195, 61, 186, 157, 3383,
	3464, 2276, 1546, 1545, 932, 913, 2686, 2702, 3466, 3082,
	1205, 1206, 3374, 3393, 3619, 3818, 3620, 2976, 3636, 3637,
	1204, 2577, 182, 3369, 1071, 2145, 2372, 1177, 3391, 3392,
	2008, 1155, 998, 3442, 3370, 2936, 156, 1625, 193, 666,
	666, 1454, 3090, 1062, 1063, 2659, 3851, 1252, 1067, 1366,
	129, 2864, 2028, 2029, 2411, 1041, 1200, 1201, 183, 1150,
	3641, 2412, 2413, 60, 1342, 191, 3086, 3731, 1029, 3644,
	3622, 3375, 3262, 1655, 1654, 1442, 1416, 3490, 3288, 2679,
	2982, 2665, 930, 2465, 715, 1135, 1135, 717, 1637, 2417,
	889, 1038, 716, 1143, 1039, 1136, 2123, 1199, 3087, 3088,
	1135, 3621, 3171, 3408, 635, 3760, 2134, 2134, 3880, 2134,
	3108, 3619, 62, 3620, 3089, 3405, 1284, 2680, 3145, 3120,
	1588, 919, 2959, 1283, 2246, 1818, 1169, 3672, 890, 3614,
	3664, 1026, 2151, 2153, 2154, 3755, 1028, 2956, 2735, 1061,
	667, 1029, 2167, 688, 690, 689, 2135, 137, 192, 1061,
	138, 1061, 1061, 695, 3097, 158, 1135, 1061, 1061, 2860,
	58, 667, 2147, 2404, 3824, 699, 3390, 3622, 2337, 3666,
	671, 996, 714, 664, 664, 662, 662, 3169, 3170, 692,
	3084, 2526, 670, 1157, 1156, 2870, 665, 665, 1662, 1665,
	1666, 661, 661, 3379, 1049, 1031, 2283, 3398, 3621, 1663,
	3746, 1345, 62, 1347, 1026, 678, 1158, 663, 663, 1028,
	1541, 1146, 1148, 667, 3046, 3376, 3380, 3378, 3377, 1362,
	637, 907, 905, 62, 3762, 3353, 130, 45, 1138, 1157,
	1156, 1137, 1322, 59, 875, 1327, 3768, 5, 1025, 1166,
	3635, 3489, 2657, 1162, 1163, 158, 134, 135, 1826, 3140,
	136, 1182, 158, 944, 1184, 3385, 3386, 158, 3360, 1168,
	2768, 1253, 2581, 1820, 1428, 1429, 158, 3098, 2261, 892,
	1131, 1248, 1249, 1250, 1251, 62, 158, 158, 2352, 3098,
	1189, 3297, 1185, 1190, 2332, 2355, 1405, 3673, 1428, 1429,
	3665, 694, 698, 704, 3631, 705, 707, 158, 3093, 708,
	709, 710, 1417, 3393, 712, 713, 643, 3174, 2979, 1456,
	934, 1192, 935, 643, 158, 3372, 619, 619, 158, 1424,
	2701, 3384, 3295, 3083, 2339, 3615, 619, 619, 2015, 3724,
	1490, 1490, 3817, 643, 3638, 2764, 2765, 158, 2768, 158,
	1626, 192, 2354, 1627, 2005, 3059, 2407, 3146, 158, 3296,
	2814, 3409, 2815, 2816, 669, 1518, 637, 3737, 3494, 3563,
	1492, 1529, 1529, 2465, 1178, 3942, 2384, 2383, 1246, 1488,
	1488, 1632, 212, 1295, 1296, 990, 2152, 2705, 2706, 3455,
	1160, 619, 3085, 1497, 2842, 3558, 2708, 2353, 1475, 3552,
	1180, 1474, 2704, 1187, 1399, 3573, 3574, 3575, 3579, 3577,
	3578, 3576, 1183, 1186, 2714, 2717, 2718, 2719, 2715, 2716,
	3169, 3170, 2405, 2406, 1363, 1420, 1419, 1149, 1167, 3106,
	1403, 667, 3615, 1402, 2007, 1401, 3616, 3769, 1179, 3686,
	3652, 1455, 1664, 1571, 3149, 1130, 3840, 3034, 1576, 2375,
	3338, 1547, 2332, 3439, 1358, 1585, 679, 1243, 3797, 1462,
	2349, 3389, 1328, 1174, 3165, 1326, 3050, 1188, 992, 1374,
	691, 991, 2338, 1484, 1485, 2573, 2454, 2340, 3249, 2370,
	1614, 2903, 2905, 1194, 1412, 1413, 1195, 1407, 1411, 1411,
	1411, 2137, 2003, 62, 1490, 1982, 1490, 1143, 3201, 1368,
	1469, 1471, 2671, 1822, 2342, 2981, 1594, 1367, 1380, 3173,
	1482, 1483, 1407, 1407, 1197, 1181, 1379, 2919, 2920, 1378,
	1651, 3927, 1580, 1377, 1002, 673, 1389, 3298, 3166, 1591,
	3565, 2341, 938, 939, 940, 2811, 158, 3388, 1550, 3285,
	1553, 1554, 666, 936, 1191, 1387, 1445, 1446, 2676, 1029,
	1173, 2254, 1555, 1556, 1624, 1432, 1029, 1356, 1435, 3107,
	1519, 1833, 2260, 2163, 1490, 1542, 1834, 1215, 990, 3685,
	1561, 1562, 2149, 2150, 933, 1245, 1396, 2990, 2989, 1359,
	1360, 1710, 1473, 1404, 1255, 1369, 1370, 1371, 1372, 1373,
	1414, 1375, 1584, 1569, 3474, 1759, 1193, 1381, 1433, 1434,
	3052, 1436, 1437, 1698, 1438, 2253, 1052, 1057, 1058, 1263,
	1498, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680,
	1681, 1682, 1683, 1510, 648, 3839, 1516, 1695, 1696, 3559,
	3560, 1832, 1530, 990, 2606, 1198, 2343, 2256, 2255, 1648,
	897, 1531, 1609, 1610, 2843, 2845, 2846, 2847, 2844, 3554,
	2904, 992, 1566, 3553, 991, 1570, 1354, 1355, 2396, 3928,
	1196, 1143, 1121, 1117, 1118, 1119, 1120, 1821, 2611, 2348,
	2610, 2609, 2607, 2346, 898, 1768, 664, 2369, 662, 3526,
	1837, 1838, 1633, 1629, 1812, 1518, 1801, 3125, 1744, 665,
	1846, 1490, 1851, 1852, 661, 1854, 1456, 643, 1667, 1645,
	901, 1622, 643, 3938, 1602, 1490, 1619, 1605, 3250, 944,
	663, 1597, 1874, 1398, 1603, 1398, 992, 2833, 2834, 991,
	3943, 1490, 1618, 2268, 1140, 2672, 1823, 1456, 3807, 1210,
	1003, 3167, 660, 1804, 1613, 2279, 1623, 1621, 2608, 1620,
	1617, 2197, 3207, 1612, 2196, 1642, 2269, 2270, 1647, 2465,
	3933, 900, 1899, 1758, 3203, 903, 902, 1741, 1742, 1172,
	1745, 1906, 1906, 2741, 1456, 3922, 1456, 1456, 1760, 1686,
	643, 643, 1174, 1973, 1846, 1977, 2142, 3887, 1490, 1980,
	1981, 1767, 1994, 1769, 3860, 1770, 1771, 1772, 1693, 1694,
	3854, 3925, 3926, 754, 764, 2433, 2545, 619, 3836, 1490,
	1054, 1055, 1056, 755, 3788, 756, 760, 763, 759, 757,
	758, 3301, 1903, 879, 880, 881, 882, 1210, 1855, 1212,
	1213, 1214, 1211, 3934, 1171, 1140, 643, 1846, 1490, 3950,
	2039, 1853, 643, 643, 643, 677, 677, 3261, 3888, 1807,
	2233, 2832, 2049, 2050, 2051, 2052, 2740, 2056, 1876, 2058,
	3888, 2278, 2434, 1928, 3207, 3763, 212, 3861, 761, 212,
	212, 2031, 212, 3648, 3751, 3011, 1975, 1634, 1773, 1891,
	1210, 3837, 2572, 1212, 1213, 1214, 1211, 3648, 3178, 2612,
	2613, 879, 880, 881, 882, 1898, 1909, 3176, 1901, 1902,
	762, 1501, 3044, 3042, 1528, 1528, 1850, 2023, 2024, 1808,
	1802, 1172, 1759, 1759, 2101, 2434, 3705, 2312, 2922, 3704,
	1866, 3699, 3698, 1759, 1759, 2688, 1749, 1750, 1751, 2173,
	2117, 2434, 2041, 2042, 2043, 2000, 1880, 2002, 2142, 1765,
	2662, 1407, 1766, 2009, 1841, 3697, 3696, 3752, 2021, 2022,
	1892, 3676, 2016, 1877, 1878, 1411, 3675, 2562, 3647, 1779,
	1780, 1874, 1897, 1870, 1871, 1490, 2131, 1411, 2111, 2550,
	2176, 1875, 884, 1746, 3414, 1882, 2038, 2133, 1800, 2067,
	3362, 1323, 2070, 2071, 1888, 2073, 1995, 1580, 1887, 3706,
	1889, 1890, 2301, 1850, 3648, 3648, 2741, 2054, 1910, 1911,
	1212, 1213, 1214, 1211, 1896, 1212, 1213, 1214, 1211, 666,
	2103, 1029, 1905, 1907, 1029, 2325, 1974, 1174, 3648, 3648,
	2238, 2232, 1029, 2231, 2142, 2125, 2204, 1979, 2124, 2142,
	1983, 3648, 3328, 2107, 1999, 3277, 2001, 2026, 1388, 3680,
	884, 1883, 1884, 1645, 2010, 3273, 2175, 2465, 1842, 1843,
	1844, 2311, 1701, 3363, 2339, 2342, 1476, 3935, 1893, 1894,
	1857, 1858, 1859, 1860, 1657, 1658, 1659, 1660, 1661, 2036,
	2096, 2037, 3349, 3186, 1026, 2926, 2044, 2045, 1904, 1028,
	2743, 2096, 2898, 2033, 2637, 1026, 2629, 2160, 2161, 2588,
	1028, 2062, 2064, 1226, 1225, 1235, 1236, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1227, 3329, 1702, 3311, 3278, 2570,
	1706, 1707, 1708, 1709, 2575, 2574, 2081, 1029, 3274, 1743,
	2113, 2566, 2558, 2319, 2192, 1908, 2552, 1753, 1226, 1225,
	1235, 1236, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1227,
	2102, 2547, 2539, 664, 2108, 662, 3187, 2199, 2243, 2244,
	2110, 2247, 2177, 2121, 2250, 2434, 665, 1210, 2537, 1210,
	2535, 661, 1210, 2122, 2533, 2300, 2061, 2126, 2234, 2211,
	720, 2119, 2210, 643, 643, 643, 2047, 663, 1599, 1805,
	1026, 2120, 2301, 1260, 2195, 1028, 1159, 2343, 643, 643,
	643, 643, 2338, 2332, 2337, 2548, 2335, 2340, 1227, 2553,
	1127, 2298, 1122, 2186, 3589, 2185, 2184, 3412, 2327, 2141,
	2155, 1243, 2304, 1456, 2548, 2540, 2025, 1606, 3944, 1449,
	1450, 3130, 1452, 1453, 899, 1457, 1458, 1459, 1394, 2157,
	1686, 2538, 1395, 2534, 1748, 1747, 2169, 2534, 2301, 1456,
	2973, 2233, 1210, 2164, 1408, 1210, 3121, 3756, 2158, 2159,
	2525, 2341, 1879, 1748, 1747, 3913, 2361, 1210, 1505, 1506,
	1507, 1508, 1509, 1478, 1511, 1512, 1513, 1514, 1515, 1439,
	2339, 2342, 1521, 1522, 1523, 1524, 1210, 1895, 1210, 1210,
	2373, 3527, 2142, 2376, 2377, 2378, 2379, 2380, 2381, 2382,
	1607, 3757, 2385, 2386, 2387, 2388, 2389, 2390, 2391, 2392,
	2393, 2394, 2395, 3341, 2397, 2398, 2399, 2400, 2401, 2368,
	2402, 3339, 2367, 1906, 1230, 1231, 1232, 1233, 1234, 1227,
	2438, 2438, 1994, 2438, 3122, 3528, 2316, 3235, 3733, 2595,
	2318, 2235, 2320, 1805, 2227, 2229, 2230, 1705, 1805, 1805,
	1480, 3646, 619, 619, 2156, 3611, 1785, 3342, 2306, 2307,
	1143, 1481, 2519, 3556, 3555, 3340, 1490, 643, 2309, 2310,
	3541, 2321, 1409, 3497, 1477, 1778, 3321, 904, 3123, 2262,
	1394, 643, 3208, 1284, 1395, 3199, 3193, 1143, 2509, 637,
	1283, 2331, 2280, 2330, 3188, 1529, 3101, 1994, 2066, 2867,
	2514, 2069, 2516, 2866, 2072, 2460, 212, 2074, 1692, 2712,
	2473, 2324, 2667, 2343, 2585, 2551, 2065, 2456, 2338, 2332,
	2337, 2106, 2335, 2340, 1689, 1691, 1688, 2105, 1690, 2104,
	1384, 1029, 2442, 2451, 1383, 2452, 2440, 1145, 2444, 2928,
	1836, 2205, 2206, 3808, 2208, 2305, 2555, 1705, 2317, 2170,
	1534, 2215, 2065, 1411, 2457, 2458, 1214, 1211, 2344, 2345,
	1211, 2350, 2116, 2568, 3568, 2564, 2565, 2131, 3567, 2945,
	2803, 2467, 2801, 3845, 1490, 1763, 1490, 2341, 1490, 2780,
	2308, 2778, 3547, 1143, 3918, 2314, 3498, 3499, 2315, 3917,
	1764, 2587, 3941, 2650, 1026, 2651, 3864, 2513, 3835, 1028,
	1212, 1213, 1214, 1211, 3491, 3309, 2582, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1227, 2578, 1262, 1490, 2615, 2520,
	2414, 1212, 1213, 1214, 1211, 3834, 1469, 1471, 2511, 1261,
	3236, 3758, 2446, 2622, 2854, 2852, 2682, 2518, 1490, 1212,
	1213, 1214, 1211, 3701, 3689, 2313, 2614, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1216, 3940, 1488, 3679, 3315, 3669,
	2461, 3602, 3492, 3310, 2464, 2166, 3530, 2623, 2850, 2171,
	1212, 1213, 1214, 1211, 3744, 3529, 2839, 1488, 3354, 3343,
	3308, 3238, 2512, 2510, 2711, 3189, 2669, 2670, 3091, 3320,
	2673, 2969, 2853, 2851, 2626, 2627, 1212, 1213, 1214, 1211,
	2940, 1212, 1213, 1214, 1211, 2624, 2939, 2529, 1143, 2599,
	2183, 2599, 1143, 2837, 1212, 1213, 1214, 1211, 2190, 1490,
	2836, 2835, 1456, 2597, 2603, 2827, 2849, 2621, 1977, 2821,
	2820, 2689, 2584, 2698, 2838, 2473, 2739, 2819, 2818, 2579,
	2207, 2663, 2745, 2541, 2560, 2212, 2213, 2214, 2453, 2237,
	2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226,
	2755, 2654, 2571, 2569, 2084, 2576, 2593, 2083, 2082, 3937,
	1143, 1212, 1213, 1214, 1211, 2078, 2077, 2032, 2777, 1645,
	2521, 1212, 1213, 1214, 1211, 1143, 1143, 1143, 1906, 1829,
	1535, 1143, 1827, 2787, 2788, 2789, 2790, 1143, 2797, 1600,
	2798, 2799, 2727, 2800, 1341, 2802, 2605, 3076, 2723, 2783,
	2784, 3639, 3640, 1472, 2786, 3936, 2797, 2589, 2590, 2724,
	2793, 1212, 1213, 1214, 1211, 2809, 2810, 3449, 2438, 1029,
	1125, 2736, 2592, 3911, 3879, 1212, 1213, 1214, 1211, 3878,
	2825, 2826, 2855, 1534, 2709, 715, 2040, 1928, 717, 3875,
	3004, 3814, 619, 716, 3813, 3628, 2756, 3795, 1977, 3740,
	2758, 1143, 1994, 1994, 1994, 1994, 2863, 3502, 3721, 3712,
	2691, 3538, 2693, 3693, 1143, 1994, 3775, 3688, 2438, 3687,
	3643, 2746, 3630, 2748, 2880, 3629, 3603, 1124, 2751, 3549,
	3509, 3495, 2775, 3477, 3475, 1490, 2775, 2880, 3472, 2771,
	2861, 2690, 3469, 3468, 3447, 2707, 643, 643, 3445, 3422,
	3003, 3419, 2632, 2633, 2782, 2730, 3536, 3416, 2638, 8,
	2738, 7, 2859, 2744, 1850, 1226, 1225, 1235, 1236, 1228,
	1229, 1230, 1231, 1232, 1233, 1234, 1227, 1212, 1213, 1214,
	1211, 2757, 2760, 3307, 3771, 3306, 766, 133, 3303, 2773,
	3293, 3286, 133, 2779, 3270, 3268, 3196, 2785, 2992, 2894,
	3195, 3190, 212, 3184, 1805, 3183, 1805, 212, 3102, 3063,
	1226, 1225, 1235, 1236, 1228, 1229, 1230, 1231, 1232, 1233,
	1234, 1227, 3062, 3058, 1992, 1805, 1805, 3056, 3054, 1759,
	3051, 1759, 2829, 2817, 2955, 1235, 1236, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1227, 2754, 3049, 2968, 2242, 2983,
	2923, 2980, 649, 1490, 2174, 133, 2975, 2938, 1528, 2862,
	2912, 2848, 2188, 2868, 2840, 2830, 2865, 2881, 2882, 2883,
	2884, 2172, 2828, 2896, 1212, 1213, 1214, 1211, 2895, 2893,
	2824, 2823, 2897, 2822, 2677, 2675, 642, 642, 2668, 2664,
	2913, 2561, 650, 2257, 2747, 1554, 2910, 2252, 2906, 2251,
	2950, 821, 820, 2752, 2753, 1555, 1556, 3470, 2554, 2248,
	2557, 2961, 3787, 2087, 1804, 2929, 2080, 1835, 1815, 2954,
	2933, 2180, 1561, 1562, 1814, 3624, 1601, 1029, 1504, 2187,
	1212, 1213, 1214, 1211, 1212, 1213, 1214, 1211, 1029, 1392,
	1569, 1350, 2952, 1348, 2997, 1291, 2999, 1212, 1213, 1214,
	1211, 2931, 2962, 3053, 2930, 2927, 1212, 1213, 1214, 1211,
	1287, 3057, 1286, 1128, 888, 3060, 3061, 3623, 3612, 2776,
	2977, 3471, 3456, 1143, 2596, 3334, 3333, 2602, 1027, 3079,
	2953, 3332, 2948, 133, 2616, 2617, 3300, 2951, 2965, 3095,
	2964, 2972, 2619, 2620, 643, 2963, 2971, 2946, 133, 1566,
	133, 3282, 1570, 3280, 3279, 3276, 3111, 1143, 2625, 3275,
	643, 2984, 1143, 1143, 3010, 1212, 1213, 1214, 1211, 3269,
	3267, 1994, 2298, 3458, 3129, 3251, 2995, 2996, 2991, 3241,
	3240, 3226, 2985, 3225, 3131, 3066, 1657, 1805, 3041, 3000,
	3001, 2998, 3009, 2361, 3043, 3002, 2994, 650, 2993, 2987,
	1212, 1213, 1214, 1211, 3105, 3155, 2921, 3158, 2687, 3158,
	3158, 2536, 2532, 2531, 1143, 3457, 3065, 2216, 1226, 1225,
	1235, 1236, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1227,
	2209, 3114, 3179, 2723, 2203, 3048, 3118, 2202, 3047, 2201,
	1490, 1490, 1212, 1213, 1214, 1211, 3064, 2200, 3175, 2198,
	2194, 3142, 3144, 2193, 3402, 3177, 1029, 2191, 1029, 2182,
	2179, 2178, 3138, 1029, 2086, 2749, 2750, 1798, 1797, 3180,
	3181, 3127, 1212, 1213, 1214, 1211, 3133, 1796, 1762, 1488,
	1488, 1212, 1213, 1214, 1211, 3113, 1761, 643, 3104, 1029,
	3116, 3117, 1752, 195, 3079, 186, 157, 195, 3128, 3153,
	1502, 1500, 2770, 1456, 3863, 1281, 1977, 1977, 3124, 3154,
	3770, 3707, 3132, 3137, 3695, 3163, 3690, 3134, 3135, 1026,
	3016, 3017, 3265, 2331, 1028, 2330, 3018, 3019, 3020, 3021,
	1549, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030,
	3031, 3159, 3160, 3164, 3583, 3566, 3562, 3540, 3524, 1212,
	1213, 1214, 1211, 1143, 3432, 3430, 3400, 2615, 3399, 3396,
	3395, 3361, 3358, 191, 3356, 3323, 3239, 191, 2591, 1560,
	1551, 1565, 1774, 1775, 1776, 1777, 2473, 3185, 1781, 1782,
	1783, 1784, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
	1794, 1795, 1226, 1225, 1235, 1236, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1227, 1568, 3217, 3007, 1557, 1391, 3893,
	3006, 2856, 643, 3204, 3205, 3192, 2781, 3191, 2732, 2731,
	3198, 2725, 3197, 2692, 2649, 3202, 3005, 2546, 2455, 2403,
	2299, 3194, 3215, 1212, 1213, 1214, 1211, 1212, 1213, 1214,
	1211, 2271, 2236, 3206, 1687, 3891, 2648, 191, 3219, 1453,
	3222, 3223, 3224, 1212, 1213, 1214, 1211, 2046, 1840, 3218,
	2647, 1811, 1630, 1583, 1558, 1340, 3785, 2646, 3228, 1325,
	1321, 1320, 3234, 1212, 1213, 1214, 1211, 1319, 1318, 2932,
	2645, 2934, 2058, 3290, 1317, 1316, 3292, 1212, 1213, 1214,
	1211, 1315, 3252, 3136, 1212, 1213, 1214, 1211, 1314, 1313,
	1805, 1312, 1311, 3253, 1310, 1805, 3254, 1212, 1213, 1214,
	1211, 3271, 1309, 3258, 1308, 1307, 2116, 2644, 1306, 2599,
	2425, 2429, 2430, 2431, 2426, 1305, 2427, 2432, 643, 1977,
	2428, 1304, 3263, 1303, 1302, 3211, 3212, 2643, 3257, 3327,
	1301, 1300, 3294, 1299, 1212, 1213, 1214, 1211, 1298, 1297,
	1294, 2986, 3324, 3325, 3326, 2438, 1994, 3346, 3330, 3331,
	1293, 1292, 1290, 3161, 1212, 1213, 1214, 1211, 1289, 1288,
	3299, 2642, 1285, 1278, 1277, 3008, 3283, 3302, 1275, 1274,
	3364, 1273, 1272, 1143, 1271, 1270, 3287, 1269, 3289, 1268,
	1267, 1266, 3155, 133, 133, 1027, 1143, 1029, 1212, 1213,
	1214, 1211, 1265, 1264, 1029, 1259, 3365, 1143, 1258, 3411,
	1257, 1256, 1176, 1490, 1126, 642, 1132, 2641, 3316, 3404,
	3783, 3781, 3397, 2303, 2285, 1164, 1141, 3348, 3850, 3214,
	2793, 2713, 643, 2466, 1977, 2089, 3318, 3355, 1143, 3357,
	1175, 3216, 3413, 2887, 1212, 1213, 1214, 1211, 1165, 2640,
	2890, 3434, 1488, 2888, 2639, 2891, 3345, 2886, 2889, 3435,
	3344, 2880, 3394, 2885, 117, 3387, 3545, 212, 1244, 2559,
	2892, 3351, 2430, 2431, 64, 2549, 1212, 1213, 1214, 1211,
	1143, 1212, 1213, 1214, 1211, 3426, 3423, 1385, 1868, 1869,
	3436, 63, 3347, 3100, 2544, 3406, 3401, 3403, 3255, 3256,
	3410, 3350, 2967, 2880, 1863, 1864, 1865, 2371, 3433, 2636,
	3151, 3418, 3152, 3407, 3229, 3415, 1966, 3420, 2165, 3473,
	1543, 3417, 3424, 2583, 3421, 3425, 3428, 3427, 3480, 1596,
	645, 1577, 1143, 2258, 2635, 3162, 1212, 1213, 1214, 1211,
	646, 3454, 1226, 1225, 1235, 1236, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1227, 1143, 1490, 1490, 647, 2564, 2565,
	3111, 1212, 1213, 1214, 1211, 3450, 2048, 1170, 3451, 3074,
	3067, 2759, 3517, 2634, 3517, 2733, 2323, 3505, 3478, 3479,
	3440, 2294, 1872, 1839, 3507, 1748, 1747, 1143, 3534, 1143,
	3902, 3511, 3512, 3692, 1488, 1698, 3182, 3537, 2415, 3539,
	1212, 1213, 1214, 1211, 1336, 1337, 1490, 1334, 1335, 2410,
	1651, 2805, 1651, 2628, 1329, 3487, 3486, 3485, 2806, 2807,
	2808, 1978, 3496, 1448, 643, 3482, 1143, 1143, 1332, 1333,
	1143, 1143, 3508, 1330, 1331, 3514, 3522, 1203, 3521, 3510,
	1212, 1213, 1214, 1211, 3348, 1698, 1447, 3221, 3533, 3505,
	3505, 2915, 2259, 3505, 3505, 3587, 2118, 3542, 1400, 3588,
	3585, 1874, 1029, 3594, 3570, 3571, 3580, 3548, 3581, 3582,
	1376, 2103, 3598, 3599, 3543, 3546, 3394, 1423, 3870, 3387,
	3868, 3828, 3550, 2925, 3805, 1490, 3804, 3802, 3747, 3708,
	2618, 1732, 3597, 3596, 3535, 3446, 3272, 3248, 3247, 3232,
	3591, 3586, 2356, 2326, 1598, 3625, 3231, 1398, 3291, 3531,
	3532, 3895, 3894, 3590, 3610, 2594, 3618, 1212, 1213, 1214,
	1211, 2970, 2674, 2287, 1488, 3592, 1226, 1225, 1235, 1236,
	1228, 1229, 1230, 1231, 1232, 1233, 1234, 1227, 2181, 1344,
	3609, 3605, 1212, 1213, 1214, 1211, 1700, 1161, 3894, 3895,
	944, 3613, 3617, 3564, 3227, 3661, 3655, 1140, 3264, 3459,
	1415, 3460, 1499, 199, 3, 3266, 649, 72, 2, 3914,
	1451, 1143, 3915, 1212, 1213, 1214, 1211, 1460, 1, 2655,
	1809, 3678, 3642, 2420, 3684, 1338, 883, 878, 1466, 3438,
	3649, 2447, 2027, 1494, 1651, 1813, 3281, 1496, 133, 3656,
	885, 2899, 3454, 2900, 3658, 3657, 879, 880, 881, 882,
	3670, 1140, 3220, 2902, 1143, 3674, 2678, 2138, 3653, 1490,
	2425, 2429, 2430, 2431, 2426, 2869, 2427, 2432, 2408, 3467,
	2428, 2275, 3094, 1386, 937, 1754, 3703, 3505, 1611, 1051,
	1154, 1608, 3691, 1153, 1151, 1029, 1703, 768, 3702, 2092,
	2857, 2831, 3700, 3593, 3901, 3930, 3862, 1728, 1488, 3904,
	1628, 752, 3796, 3736, 1725, 3713, 133, 3726, 1727, 1724,
	1726, 1730, 1731, 133, 3866, 3715, 1729, 3608, 2143, 1143,
	1208, 3709, 2947, 962, 809, 779, 133, 1276, 1589, 3014,
	3012, 1053, 778, 3313, 3748, 2703, 2918, 3663, 133, 1050,
	963, 2075, 3505, 3749, 3710, 3606, 1544, 1548, 3753, 3754,
	2322, 3743, 3671, 3766, 3734, 3544, 3147, 2767, 1572, 3761,
	3739, 3742, 3765, 3359, 3463, 3461, 1143, 3462, 685, 2006,
	3750, 617, 1011, 3584, 1490, 2088, 686, 3790, 3793, 3774,
	3780, 3782, 3784, 3786, 3759, 2302, 3819, 3694, 1805, 3505,
	3794, 917, 2284, 3764, 918, 910, 2721, 2720, 3773, 1668,
	1217, 1685, 1805, 3789, 3779, 3429, 3032, 3033, 3431, 1254,
	724, 2168, 2700, 1488, 3382, 2911, 71, 70, 69, 3799,
	1490, 3801, 68, 3661, 220, 3437, 770, 219, 3626, 3500,
	3792, 3906, 750, 749, 748, 747, 3812, 746, 745, 3838,
	2424, 2422, 2421, 1989, 1988, 3846, 3827, 2055, 3109, 3830,
	3829, 3831, 2796, 2791, 3832, 3833, 1917, 1915, 2351, 1488,
	1735, 1736, 1737, 1738, 1739, 1740, 1733, 1734, 1225, 1235,
	1236, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1227, 2358,
	1914, 3847, 3776, 3777, 3869, 3859, 3871, 3872, 3561, 3855,
	3867, 3856, 2841, 3857, 3865, 3858, 3453, 1862, 2347, 1143,
	1934, 3726, 2812, 3874, 1931, 1930, 2804, 3876, 3877, 3557,
	3551, 1962, 3659, 1732, 3516, 3366, 3367, 3373, 3684, 3883,
	2293, 1076, 3881, 1072, 1074, 1075, 1073, 3885, 3886, 3884,
	2604, 3200, 3900, 3890, 3908, 3892, 2328, 3907, 3069, 3896,
	3897, 3898, 3899, 3889, 2267, 2266, 2264, 950, 2263, 1361,
	3735, 3919, 3912, 1143, 3815, 3481, 2471, 2469, 1123, 3213,
	3209, 2100, 2114, 3920, 2966, 3765, 3921, 3923, 1990, 1986,
	2871, 2416, 3633, 3929, 3932, 1867, 1651, 911, 2282, 41,
	115, 105, 195, 61, 186, 157, 174, 56, 173, 55,
	113, 1856, 171, 54, 100, 99, 1861, 3939, 112, 169,
	187, 53, 204, 203, 206, 3908, 3946, 178, 3907, 3945,
	205, 188, 202, 2522, 2523, 3932, 3947, 947, 948, 201,
	1532, 3951, 200, 3806, 3520, 873, 44, 43, 990, 175,
	131, 42, 106, 57, 40, 39, 38, 34, 1993, 13,
	12, 35, 22, 21, 1615, 118, 20, 26, 32, 31,
	126, 125, 191, 30, 124, 123, 122, 121, 120, 119,
	29, 19, 48, 47, 1912, 1913, 46, 9, 111, 109,
	28, 110, 107, 103, 101, 83, 82, 81, 96, 1728,
	95, 94, 93, 92, 91, 89, 1725, 90, 961, 80,
	1727, 1724, 1726, 1730, 1731, 79, 78, 77, 1729, 76,
	3650, 98, 104, 102, 87, 97, 88, 86, 85, 84,
	75, 992, 133, 74, 991, 133, 133, 1238, 133, 1242,
	2035, 73, 155, 154, 153, 152, 2035, 2035, 2035, 139,
	140, 151, 141, 142, 149, 1239, 1241, 1237, 150, 1240,
	1226, 1225, 1235, 1236, 1228, 1229, 1230, 1231, 1232, 1233,
	1234, 1227, 976, 148, 147, 146, 145, 144, 1027, 143,
	951, 133, 49, 50, 51, 52, 165, 164, 166, 1027,
	168, 170, 167, 172, 162, 160, 163, 161, 159, 66,
	11, 114, 18, 133, 25, 4, 0, 953, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 184, 193, 185, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1263, 0, 0, 0,
	0, 0, 0, 183, 177, 176, 0, 0, 0, 0,
	67, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721,
	1722, 1723, 1735, 1736, 1737, 1738, 1739, 1740, 1733, 1734,
	0, 0, 975, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1244, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3772, 0, 946, 0, 0, 0,
	0, 179, 180, 181, 0, 0, 0, 952, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 981, 0, 0, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 182,
	0, 128, 0, 0, 0, 0, 0, 982, 986, 697,
	696, 703, 693, 0, 3843, 0, 0, 0, 0, 0,
	0, 700, 701, 0, 702, 706, 0, 969, 687, 967,
	971, 989, 0, 0, 0, 968, 965, 964, 711, 970,
	955, 956, 954, 957, 958, 959, 960, 0, 987, 0,
	988, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	0, 983, 984, 0, 0, 0, 0, 1963, 0, 0,
	0, 60, 1924, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 715, 0, 3843, 717, 0, 0, 0, 0,
	716, 0, 0, 0, 0, 0, 0, 0, 979, 0,
	0, 0, 1966, 1933, 978, 0, 0, 2272, 2273, 2274,
	0, 0, 1967, 1968, 0, 0, 0, 0, 0, 974,
	62, 0, 2289, 2290, 2291, 2292, 0, 0, 0, 0,
	0, 0, 3843, 0, 0, 0, 0, 0, 1932, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1940, 137, 192, 0, 138, 0,
	0, 0, 0, 158, 0, 0, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3949, 0,
	0, 0, 0, 0, 0, 0, 0, 977, 0, 0,
	0, 1963, 0, 949, 945, 0, 1924, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2441, 0,
	0, 0, 1956, 0, 0, 0, 0, 0, 688, 690,
	689, 0, 0, 0, 130, 45, 1966, 1933, 695, 0,
	0, 59, 0, 0, 0, 0, 1967, 1968, 0, 0,
	699, 0, 0, 0, 134, 135, 0, 714, 136, 0,
	0, 0, 0, 0, 692, 0, 0, 0, 682, 0,
	0, 0, 1932, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1993, 0, 0, 0, 0, 1940, 0,
	0, 1496, 133, 0, 1923, 1925, 1922, 0, 1919, 0,
	0, 0, 0, 1944, 0, 2035, 0, 0, 0, 1212,
	1213, 1214, 1211, 0, 1950, 0, 0, 0, 0, 0,
	0, 0, 1935, 0, 1918, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1938, 1972, 0, 0, 1939, 1941,
	1943, 0, 1945, 1946, 1947, 1951, 1952, 1953, 1955, 1958,
	1959, 1960, 0, 0, 0, 0, 1956, 0, 0, 1948,
	1957, 1949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1927, 0, 0, 0, 0, 694, 698, 704, 0,
	705, 707, 0, 0, 708, 709, 710, 0, 1732, 712,
	713, 0, 0, 0, 0, 1964, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1920, 1921, 0, 0, 0, 0, 1923, 2762,
	1922, 0, 2761, 0, 0, 0, 0, 1944, 0, 0,
	1961, 0, 0, 0, 0, 0, 0, 0, 1950, 0,
	0, 0, 0, 0, 0, 0, 0, 1937, 0, 0,
	0, 0, 0, 0, 1936, 0, 0, 0, 1938, 1972,
	0, 0, 1939, 1941, 1943, 0, 1945, 1946, 1947, 1951,
	1952, 1953, 1955, 1958, 1959, 1960, 0, 0, 1954, 0,
	0, 0, 0, 1948, 1957, 1949, 0, 1942, 0, 0,
	0, 0, 0, 0, 0, 1927, 0, 0, 0, 0,
	1970, 1969, 1095, 0, 0, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 1964,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 691, 0, 0, 0, 0,
	0, 0, 0, 0, 1728, 0, 1920, 1921, 0, 0,
	2737, 1725, 0, 1929, 0, 1727, 1724, 1726, 1730, 1731,
	0, 0, 0, 1729, 1961, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1937, 0, 0, 0, 0, 0, 0, 1936, 0,
	0, 0, 0, 0, 0, 1965, 0, 0, 1971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1954, 0, 0, 0, 0, 0, 0, 0,
	0, 1942, 0, 0, 1080, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 1970, 1969, 0, 0, 1993, 1993,
	1993, 1993, 0, 0, 1103, 1107, 1109, 1111, 1113, 1114,
	1116, 1993, 1121, 1117, 1118, 1119, 1120, 0, 1098, 1099,
	1100, 1101, 1078, 1079, 1104, 0, 1081, 0, 1083, 1084,
	1085, 1086, 1082, 1087, 1088, 1089, 1090, 1091, 1094, 1096,
	1092, 1093, 1102, 0, 0, 0, 0, 1929, 0, 0,
	1106, 1108, 1110, 1112, 1115, 0, 1713, 1714, 1715, 1716,
	1717, 1718, 1719, 1720, 1721, 1722, 1723, 1735, 1736, 1737,
	1738, 1739, 1740, 1733, 1734, 0, 0, 0, 0, 0,
	2916, 2917, 0, 0, 0, 0, 0, 0, 1097, 1965,
	0, 0, 1971, 1095, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 1080, 0,
	0, 0, 1070, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 1103, 1107,
	1109, 1111, 1113, 1114, 1116, 133, 1121, 1117, 1118, 1119,
	1120, 0, 1098, 1099, 1100, 1101, 1078, 1079, 1104, 0,
	1081, 0, 1083, 1084, 1085, 1086, 1082, 1087, 1088, 1089,
	1090, 1091, 1094, 1096, 1092, 1093, 1102, 0, 0, 0,
	0, 0, 0, 0, 1106, 1108, 1110, 1112, 1115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1097, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2600,
	2601, 0, 0, 0, 0, 1103, 1107, 1109, 1111, 1113,
	1114, 1116, 0, 1121, 1117, 1118, 1119, 1120, 0, 1098,
	1099, 1100, 1101, 1078, 1079, 1104, 0, 1081, 0, 1083,
	1084, 1085, 1086, 1082, 1087, 1088, 1089, 1090, 1091, 1094,
	1096, 1092, 1093, 1102, 0, 0, 0, 0, 0, 0,
	0, 1106, 1108, 1110, 1112, 1115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 697, 696, 703, 693,
	0, 0, 0, 1027, 0, 133, 1963, 0, 700, 701,
	133, 702, 706, 195, 0, 687, 0, 1993, 0, 1097,
	0, 0, 0, 0, 0, 711, 0, 0, 3103, 0,
	0, 0, 0, 0, 0, 3515, 133, 0, 0, 0,
	0, 1966, 0, 0, 3115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 715,
	0, 0, 717, 1105, 0, 0, 0, 716, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1940, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1956, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2035, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 688, 690, 689, 0, 0,
	0, 0, 0, 0, 0, 695, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 699, 0, 0,
	0, 0, 1944, 0, 714, 0, 0, 0, 0, 0,
	0, 692, 0, 1950, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1938, 1972, 0, 0, 1939, 1941, 1943,
	0, 1945, 1946, 1947, 1951, 1952, 1953, 1955, 1958, 1959,
	1960, 0, 0, 0, 0, 0, 3260, 0, 1948, 1957,
	1949, 0, 0, 0, 1105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1964, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 694, 698, 704, 0, 705, 707, 0,
	0, 708, 709, 710, 0, 0, 712, 713, 0, 1961,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1937, 0, 0, 0,
	0, 0, 1993, 1936, 0, 0, 0, 0, 0, 0,
	0, 0, 2035, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1954, 0, 0,
	0, 0, 0, 0, 0, 0, 1942, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 2035, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 691, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3519, 0, 0, 0, 0, 0,
	786, 0, 0, 0, 0, 0, 0, 0, 0, 385,
	0, 509, 542, 531, 615, 497, 0, 0, 0, 0,
	0, 0, 739, 0, 0, 0, 325, 0, 0, 355,
	546, 528, 538, 529, 514, 515, 516, 523, 335, 517,
	518, 519, 489, 520, 490, 521, 522, 777, 545, 496,
	414, 369, 563, 562, 0, 0, 844, 852, 0, 133,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 731,
	0, 0, 767, 821, 820, 754, 764, 0, 0, 298,
	218, 491, 611, 493, 492, 755, 0, 756, 760, 763,
	759, 757, 758, 0, 836, 0, 0, 0, 0, 0,
	0, 723, 735, 0, 740, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 732, 733,
	0, 0, 0, 0, 787, 0, 734, 0, 0, 782,
	761, 765, 0, 0, 0, 0, 288, 420, 437, 299,
	410, 450, 304, 417, 294, 384, 407, 0, 3569, 290,
	435, 416, 366, 345, 346, 289, 0, 402, 323, 337,
	320, 382, 762, 785, 789, 319, 858, 783, 445, 292,
	0, 444, 381, 431, 436, 367, 361, 0, 291, 433,
	365, 360, 349, 327, 859, 350, 351, 341, 393, 359,
	394, 342, 371, 370, 372, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 780, 0, 608, 0, 447,
	0, 0, 842, 0, 0, 0, 419, 0, 0, 352,
	0, 0, 133, 784, 0, 405, 387, 855, 0, 0,
	403, 357, 432, 395, 438, 421, 446, 399, 396, 283,
	422, 322, 368, 295, 297, 317, 324, 326, 328, 329,
	377, 378, 390, 409, 423, 424, 425, 321, 305, 404,
	306, 339, 307, 284, 313, 311, 314, 411, 315, 286,
	391, 429, 0, 334, 400, 364, 287, 363, 392, 428,
	427, 296, 454, 460, 461, 550, 0, 466, 631, 632,
	633, 475, 0, 0, 480, 481, 482, 484, 485, 486,
	487, 551, 568, 535, 505, 468, 559, 502, 506, 507,
	571, 1756, 1755, 1757, 459, 353, 354, 0, 332, 280,
	281, 626, 840, 383, 573, 606, 607, 498, 0, 854,
	835, 837, 838, 841, 845, 846, 847, 848, 849, 851,
	853, 857, 625, 0, 552, 567, 629, 566, 622, 389,
	0, 408, 564, 511, 0, 556, 530, 0, 557, 526,
	561, 0, 500, 0, 415, 440, 452, 469, 472, 501,
	586, 587, 588, 285, 471, 590, 591, 592, 593, 594,
	595, 596, 589, 856, 533, 510, 536, 451, 513, 512,
	0, 0, 547, 788, 548, 549, 373, 374, 375, 376,
	843, 574, 303, 470, 398, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 537, 634, 0,
	597, 598, 0, 0, 464, 465, 331, 338, 483, 340,
	302, 388, 333, 449, 347, 0, 476, 541, 477, 600,
	603, 601, 602, 380, 343, 344, 412, 348, 358, 401,
	448, 386, 406, 300, 439, 413, 362, 527, 554, 865,
	839, 864, 866, 867, 863, 868, 869, 850, 744, 0,
	795, 861, 860, 862, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 581, 580, 579, 578,
	577, 576, 575, 0, 0, 524, 426, 312, 274, 308,
	309, 316, 623, 620, 430, 624, 0, 282, 504, 356,
	0, 397, 330, 569, 570, 0, 0, 828, 802, 803,
	804, 741, 805, 799, 800, 742, 801, 829, 793, 825,
	826, 769, 796, 806, 824, 807, 827, 830, 831, 870,
	871, 813, 797, 246, 872, 810, 832, 823, 822, 808,
	794, 833, 834, 776, 771, 811, 812, 798, 816, 817,
	818, 743, 790, 791, 792, 814, 815, 772, 773, 774,
	775, 0, 0, 0, 455, 456, 457, 479, 0, 441,
	503, 621, 0, 0, 0, 0, 0, 0, 0, 553,
	565, 599, 0, 609, 610, 612, 614, 819, 616, 418,
	786, 0, 627, 494, 495, 628, 605, 0, 736, 385,
	0, 509, 542, 531, 615, 497, 0, 0, 0, 0,
	0, 0, 739, 0, 0, 0, 325, 1806, 0, 355,
	546, 528, 538, 529, 514, 515, 516, 523, 335, 517,
	518, 519, 489, 520, 490, 521, 522, 777, 545, 496,
	414, 369, 563, 562, 0, 0, 844, 852, 0, 0,
	0, 0, 0, 0, 0, 0, 2018, 0, 0, 731,
	0, 0, 767, 821, 820, 754, 764, 0, 0, 298,
	218, 491, 611, 493, 492, 755, 0, 756, 760, 763,
	759, 757, 758, 0, 836, 0, 0, 0, 0, 0,
	0, 723, 735, 0, 740, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 732, 733,
	0, 0, 0, 0, 787, 0, 734, 0, 0, 2019,
	761, 765, 0, 0, 0, 0, 288, 420, 437, 299,
	410, 450, 304, 417, 294, 384, 407, 0, 0, 290,
	435, 416, 366, 345, 346, 289, 0, 402, 323, 337,
	320, 382, 762, 785, 789, 319, 858, 783, 445, 292,
	0, 444, 381, 431, 436, 367, 361, 0, 291, 433,
	365, 360, 349, 327, 859, 350, 351, 341, 393, 359,
	394, 342, 371, 370, 372, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 780, 0, 608, 0, 447,
	0, 0, 842, 0, 0, 0, 419, 0, 0, 352,
	0, 0, 0, 784, 0, 405, 387, 855, 0, 0,
	403, 357, 432, 395, 438, 421, 446, 399, 396, 283,
	422, 322, 368, 295, 297, 317, 324, 326, 328, 329,
	377, 378, 390, 409, 423, 424, 425, 321, 305, 404,
	306, 339, 307, 284, 313, 311, 314, 411, 315, 286,
	391, 429, 0, 334, 400, 364, 287, 363, 392, 428,
	427, 296, 454, 460, 461, 550, 0, 466, 631, 632,
	633, 475, 0, 0, 480, 481, 482, 484, 485, 486,
	487, 551, 568, 535, 505, 468, 559, 502, 506, 507,
	571, 0, 0, 0, 459, 353, 354, 0, 332, 280,
	281, 626, 840, 383, 573, 606, 607, 498, 0, 854,
	835, 837, 838, 841, 845, 846, 847, 848, 849, 851,
	853, 857, 625, 0, 552, 567, 629, 566, 622, 389,
	0, 408, 564, 511, 0, 556, 530, 0, 557, 526,
	561, 0, 500, 0, 415, 440, 452, 469, 472, 501,
	586, 587, 588, 285, 471, 590, 591, 592, 593, 594,
	595, 596, 589, 856, 533, 510, 536, 451, 513, 512,
	0, 0, 547, 788, 548, 549, 373, 374, 375, 376,
	843, 574, 303, 470, 398, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 537, 634, 0,
	597, 598, 0, 0, 464, 465, 331, 338, 483, 340,
	302, 388, 333, 449, 347, 0, 476, 541, 477, 600,
	603, 601, 602, 380, 343, 344, 412, 348, 358, 401,
	448, 386, 406, 300, 439, 413, 362, 527, 554, 865,
	839, 864, 866, 867, 863, 868, 869, 850, 744, 0,
	795, 861, 860, 862, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 581, 580, 579, 578,
	577, 576, 575, 0, 0, 524, 426, 312, 274, 308,
	309, 316, 623, 620, 430, 624, 0, 282, 504, 356,
	0, 397, 330, 569, 570, 0, 0, 828, 802, 803,
	804, 741, 805, 799, 800, 742, 801, 829, 793, 825,
	826, 769, 796, 806, 824, 807, 827, 830, 831, 870,
	871, 813, 797, 246, 872, 810, 832, 823, 822, 808,
	794, 833, 834, 776, 771, 811, 812, 798, 816, 817,
	818, 743, 790, 791, 792, 814, 815, 772, 773, 774,
	775, 0, 0, 0, 455, 456, 457, 479, 0, 441,
	503, 621, 0, 0, 0, 0, 0, 0, 0, 553,
	565, 599, 0, 609, 610, 612, 614, 819, 616, 418,
	195, 786, 627, 494, 495, 628, 605, 0, 736, 0,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 0, 325, 0, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 1247, 545,
	496, 414, 369, 563, 562, 0, 0, 844, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 767, 821, 820, 754, 764, 0, 0,
	298, 218, 491, 611, 493, 492, 755, 0, 756, 760,
	763, 759, 757, 758, 0, 836, 0, 0, 0, 0,
	0, 0, 723, 735, 0, 740, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 732,
	733, 0, 0, 0, 0, 787, 0, 734, 0, 0,
	782, 761, 765, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 762, 785, 789, 319, 858, 783, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 859, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 780, 0, 608, 0,
	447, 0, 0, 842, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 784, 0, 405, 387, 855, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 631,
	632, 633, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 626, 840, 383, 573, 606, 607, 498, 0,
	854, 835, 837, 838, 841, 845, 846, 847, 848, 849,
	851, 853, 857, 625, 0, 552, 567, 629, 566, 622,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 856, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 788, 548, 549, 373, 374, 375,
	376, 843, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 634,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	865, 839, 864, 866, 867, 863, 868, 869, 850, 744,
	0, 795, 861, 860, 862, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 623, 620, 430, 624, 0, 282, 504,
	356, 158, 397, 330, 569, 570, 0, 0, 828, 802,
	803, 804, 741, 805, 799, 800, 742, 801, 829, 793,
	825, 826, 769, 796, 806, 824, 807, 827, 830, 831,
	870, 871, 813, 797, 246, 872, 810, 832, 823, 822,
	808, 794, 833, 834, 776, 771, 811, 812, 798, 816,
	817, 818, 743, 790, 791, 792, 814, 815, 772, 773,
	774, 775, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 621, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 819, 616,
	418, 786, 0, 627, 494, 495, 628, 605, 0, 736,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 0, 325, 3948, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 777, 545,
	496, 414, 369, 563, 562, 0, 0, 844, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 767, 821, 820, 754, 764, 0, 0,
	298, 218, 491, 611, 493, 492, 755, 0, 756, 760,
	763, 759, 757, 758, 0, 836, 0, 0, 0, 0,
	0, 0, 723, 735, 0, 740, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 732,
	733, 0, 0, 0, 0, 787, 0, 734, 0, 0,
	782, 761, 765, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 762, 785, 789, 319, 858, 783, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 859, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 780, 0, 608, 0,
	447, 0, 0, 842, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 784, 0, 405, 387, 855, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 631,
	632, 633, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 626, 840, 383, 573, 606, 607, 498, 0,
	854, 835, 837, 838, 841, 845, 846, 847, 848, 849,
	851, 853, 857, 625, 0, 552, 567, 629, 566, 622,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 856, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 788, 548, 549, 373, 374, 375,
	376, 843, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 634,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	865, 839, 864, 866, 867, 863, 868, 869, 850, 744,
	0, 795, 861, 860, 862, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 623, 620, 430, 624, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 828, 802,
	803, 804, 741, 805, 799, 800, 742, 801, 829, 793,
	825, 826, 769, 796, 806, 824, 807, 827, 830, 831,
	870, 871, 813, 797, 246, 872, 810, 832, 823, 822,
	808, 794, 833, 834, 776, 771, 811, 812, 798, 816,
	817, 818, 743, 790, 791, 792, 814, 815, 772, 773,
	774, 775, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 621, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 819, 616,
	418, 786, 0, 627, 494, 495, 628, 605, 0, 736,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 0, 325, 0, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 777, 545,
	496, 414, 369, 563, 562, 0, 0, 844, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 767, 821, 820, 754, 764, 0, 0,
	298, 218, 491, 611, 493, 492, 755, 0, 756, 760,
	763, 759, 757, 758, 0, 836, 0, 0, 0, 0,
	0, 0, 723, 735, 0, 740, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 732,
	733, 0, 0, 0, 0, 787, 0, 734, 0, 0,
	782, 761, 765, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 762, 785, 789, 319, 858, 783, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 859, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 780, 0, 608, 0,
	447, 0, 0, 842, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 784, 0, 405, 387, 855, 3844,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 631,
	632, 633, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 626, 840, 383, 573, 606, 607, 498, 0,
	854, 835, 837, 838, 841, 845, 846, 847, 848, 849,
	851, 853, 857, 625, 0, 552, 567, 629, 566, 622,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 856, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 788, 548, 549, 373, 374, 375,
	376, 843, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 634,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	865, 839, 864, 866, 867, 863, 868, 869, 850, 744,
	0, 795, 861, 860, 862, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 623, 620, 430, 624, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 828, 802,
	803, 804, 741, 805, 799, 800, 742, 801, 829, 793,
	825, 826, 769, 796, 806, 824, 807, 827, 830, 831,
	870, 871, 813, 797, 246, 872, 810, 832, 823, 822,
	808, 794, 833, 834, 776, 771, 811, 812, 798, 816,
	817, 818, 743, 790, 791, 792, 814, 815, 772, 773,
	774, 775, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 621, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 819, 616,
	418, 786, 0, 627, 494, 495, 628, 605, 0, 736,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 0, 325, 1806, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 777, 545,
	496, 414, 369, 563, 562, 0, 0, 844, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 767, 821, 820, 754, 764, 0, 0,
	298, 218, 491, 611, 493, 492, 755, 0, 756, 760,
	763, 759, 757, 758, 0, 836, 0, 0, 0, 0,
	0, 0, 723, 735, 0, 740, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 732,
	733, 0, 0, 0, 0, 787, 0, 734, 0, 0,
	782, 761, 765, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 762, 785, 789, 319, 858, 783, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 859, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 780, 0, 608, 0,
	447, 0, 0, 842, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 784, 0, 405, 387, 855, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 631,
	632, 633, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 626, 840, 383, 573, 606, 607, 498, 0,
	854, 835, 837, 838, 841, 845, 846, 847, 848, 849,
	851, 853, 857, 625, 0, 552, 567, 629, 566, 622,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 856, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 788, 548, 549, 373, 374, 375,
	376, 843, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 634,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	865, 839, 864, 866, 867, 863, 868, 869, 850, 744,
	0, 795, 861, 860, 862, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 623, 620, 430, 624, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 828, 802,
	803, 804, 741, 805, 799, 800, 742, 801, 829, 793,
	825, 826, 769, 796, 806, 824, 807, 827, 830, 831,
	870, 871, 813, 797, 246, 872, 810, 832, 823, 822,
	808, 794, 833, 834, 776, 771, 811, 812, 798, 816,
	817, 818, 743, 790, 791, 792, 814, 815, 772, 773,
	774, 775, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 621, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 819, 616,
	418, 786, 0, 627, 494, 495, 628, 605, 0, 736,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 0, 325, 0, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 777, 545,
	496, 414, 369, 563, 562, 0, 0, 844, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 767, 821, 820, 754, 764, 0, 0,
	298, 218, 491, 611, 493, 492, 755, 0, 756, 760,
	763, 759, 757, 758, 0, 836, 0, 0, 0, 0,
	0, 0, 723, 735, 0, 740, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 732,
	733, 1527, 0, 0, 0, 787, 0, 734, 0, 0,
	782, 761, 765, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 762, 785, 789, 319, 858, 783, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 859, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 780, 0, 608, 0,
	447, 0, 0, 842, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 784, 0, 405, 387, 855, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 631,
	632, 633, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 626, 840, 383, 573, 606, 607, 498, 0,
	854, 835, 837, 838, 841, 845, 846, 847, 848, 849,
	851, 853, 857, 625, 0, 552, 567, 629, 566, 622,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 856, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 788, 548, 549, 373, 374, 375,
	376, 843, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 634,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	865, 839, 864, 866, 867, 863, 868, 869, 850, 744,
	0, 795, 861, 860, 862, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 623, 620, 430, 624, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 828, 802,
	803, 804, 741, 805, 799, 800, 742, 801, 829, 793,
	825, 826, 769, 796, 806, 824, 807, 827, 830, 831,
	870, 871, 813, 797, 246, 872, 810, 832, 823, 822,
	808, 794, 833, 834, 776, 771, 811, 812, 798, 816,
	817, 818, 743, 790, 791, 792, 814, 815, 772, 773,
	774, 775, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 621, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 819, 616,
	418, 0, 0, 627, 494, 495, 628, 605, 786, 736,
	0, 2189, 0, 0, 0, 0, 0, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	739, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 777, 545, 496, 414, 369,
	563, 562, 0, 0, 844, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	767, 821, 820, 754, 764, 0, 0, 298, 218, 491,
	611, 493, 492, 755, 0, 756, 760, 763, 759, 757,
	758, 0, 836, 0, 0, 0, 0, 0, 0, 723,
	735, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 733, 0, 0,
	0, 0, 787, 0, 734, 0, 0, 782, 761, 765,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	762, 785, 789, 319, 858, 783, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 859, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 780, 0, 608, 0, 447, 0, 0,
	842, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 784, 0, 405, 387, 855, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	840, 383, 573, 606, 607, 498, 0, 854, 835, 837,
	838, 841, 845, 846, 847, 848, 849, 851, 853, 857,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 856, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 788, 548, 549, 373, 374, 375, 376, 843, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 865, 839, 864,
	866, 867, 863, 868, 869, 850, 744, 0, 795, 861,
	860, 862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 828, 802, 803, 804, 741,
	805, 799, 800, 742, 801, 829, 793, 825, 826, 769,
	796, 806, 824, 807, 827, 830, 831, 870, 871, 813,
	797, 246, 872, 810, 832, 823, 822, 808, 794, 833,
	834, 776, 771, 811, 812, 798, 816, 817, 818, 743,
	790, 791, 792, 814, 815, 772, 773, 774, 775, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 819, 616, 418, 786, 0,
	627, 494, 495, 628, 605, 0, 736, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	739, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 777, 545, 496, 414, 369,
	563, 562, 0, 0, 844, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	767, 821, 820, 754, 764, 0, 0, 298, 218, 491,
	611, 493, 492, 755, 0, 756, 760, 763, 759, 757,
	758, 0, 836, 0, 0, 0, 0, 0, 0, 723,
	735, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 733, 1799, 0,
	0, 0, 787, 0, 734, 0, 0, 782, 761, 765,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	762, 785, 789, 319, 858, 783, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 859, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 780, 0, 608, 0, 447, 0, 0,
	842, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 784, 0, 405, 387, 855, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	840, 383, 573, 606, 607, 498, 0, 854, 835, 837,
	838, 841, 845, 846, 847, 848, 849, 851, 853, 857,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 856, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 788, 548, 549, 373, 374, 375, 376, 843, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 865, 839, 864,
	866, 867, 863, 868, 869, 850, 744, 0, 795, 861,
	860, 862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 828, 802, 803, 804, 741,
	805, 799, 800, 742, 801, 829, 793, 825, 826, 769,
	796, 806, 824, 807, 827, 830, 831, 870, 871, 813,
	797, 246, 872, 810, 832, 823, 822, 808, 794, 833,
	834, 776, 771, 811, 812, 798, 816, 817, 818, 743,
	790, 791, 792, 814, 815, 772, 773, 774, 775, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 819, 616, 418, 786, 0,
	627, 494, 495, 628, 605, 0, 736, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	739, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 777, 545, 496, 414, 369,
	563, 562, 0, 0, 844, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	767, 821, 820, 754, 764, 0, 0, 298, 218, 491,
	611, 493, 492, 755, 0, 756, 760, 763, 759, 757,
	758, 0, 836, 0, 0, 0, 0, 0, 0, 723,
	735, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 733, 0, 0,
	0, 0, 787, 0, 734, 0, 0, 782, 761, 765,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	762, 785, 789, 319, 858, 783, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 859, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 780, 0, 608, 0, 447, 0, 0,
	842, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 784, 0, 405, 387, 855, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	840, 383, 573, 606, 607, 498, 0, 854, 835, 837,
	838, 841, 845, 846, 847, 848, 849, 851, 853, 857,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 856, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 788, 548, 549, 373, 374, 375, 376, 843, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 865, 839, 864,
	866, 867, 863, 868, 869, 850, 744, 0, 795, 861,
	860, 862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 828, 802, 803, 804, 741,
	805, 799, 800, 742, 801, 829, 793, 825, 826, 769,
	796, 806, 824, 807, 827, 830, 831, 870, 871, 813,
	797, 246, 872, 810, 832, 823, 822, 808, 794, 833,
	834, 776, 771, 811, 812, 798, 816, 817, 818, 743,
	790, 791, 792, 814, 815, 772, 773, 774, 775, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 819, 616, 418, 786, 0,
	627, 494, 495, 628, 605, 0, 736, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	739, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 777, 545, 496, 414, 369,
	563, 562, 0, 0, 844, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	767, 821, 820, 754, 764, 0, 0, 298, 218, 491,
	611, 493, 492, 2652, 0, 2653, 760, 763, 759, 757,
	758, 0, 836, 0, 0, 0, 0, 0, 0, 723,
	735, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 733, 0, 0,
	0, 0, 787, 0, 734, 0, 0, 782, 761, 765,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	762, 785, 789, 319, 858, 783, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 859, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 780, 0, 608, 0, 447, 0, 0,
	842, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 784, 0, 405, 387, 855, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	840, 383, 573, 606, 607, 498, 0, 854, 835, 837,
	838, 841, 845, 846, 847, 848, 849, 851, 853, 857,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 856, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 788, 548, 549, 373, 374, 375, 376, 843, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 865, 839, 864,
	866, 867, 863, 868, 869, 850, 744, 0, 795, 861,
	860, 862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 828, 802, 803, 804, 741,
	805, 799, 800, 742, 801, 829, 793, 825, 826, 769,
	796, 806, 824, 807, 827, 830, 831, 870, 871, 813,
	797, 246, 872, 810, 832, 823, 822, 808, 794, 833,
	834, 776, 771, 811, 812, 798, 816, 817, 818, 743,
	790, 791, 792, 814, 815, 772, 773, 774, 775, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 819, 616, 418, 786, 0,
	627, 494, 495, 628, 605, 0, 736, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 1669, 0, 0, 0,
	739, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 777, 545, 496, 414, 369,
	563, 562, 0, 0, 844, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	767, 821, 820, 754, 764, 0, 0, 298, 218, 491,
	611, 493, 492, 755, 0, 756, 760, 763, 759, 757,
	758, 0, 836, 0, 0, 0, 0, 0, 0, 0,
	735, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 733, 0, 0,
	0, 0, 787, 0, 734, 0, 0, 782, 761, 765,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	762, 785, 789, 319, 858, 783, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 859, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 780, 0, 608, 0, 447, 0, 0,
	842, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 784, 0, 405, 387, 855, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 1670, 1671, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	840, 383, 573, 606, 607, 498, 0, 854, 835, 837,
	838, 841, 845, 846, 847, 848, 849, 851, 853, 857,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 856, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 788, 548, 549, 373, 374, 375, 376, 843, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 865, 839, 864,
	866, 867, 863, 868, 869, 850, 744, 0, 795, 861,
	860, 862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 828, 802, 803, 804, 741,
	805, 799, 800, 742, 801, 829, 793, 825, 826, 769,
	796, 806, 824, 807, 827, 830, 831, 870, 871, 813,
	797, 246, 872, 810, 832, 823, 822, 808, 794, 833,
	834, 776, 771, 811, 812, 798, 816, 817, 818, 743,
	790, 791, 792, 814, 815, 772, 773, 774, 775, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 819, 616, 418, 786, 0,
	627, 494, 495, 628, 605, 0, 736, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	739, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 777, 545, 496, 414, 369,
	563, 562, 0, 0, 844, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	767, 821, 820, 754, 764, 0, 0, 298, 218, 491,
	611, 493, 492, 755, 0, 756, 760, 763, 759, 757,
	758, 0, 836, 0, 0, 0, 0, 0, 0, 0,
	735, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 733, 0, 0,
	0, 0, 787, 0, 734, 0, 0, 782, 761, 765,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	762, 785, 789, 319, 858, 783, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 859, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 780, 0, 608, 0, 447, 0, 0,
	842, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 784, 0, 405, 387, 855, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	840, 383, 573, 606, 607, 498, 0, 854, 835, 837,
	838, 841, 845, 846, 847, 848, 849, 851, 853, 857,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 856, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 788, 548, 549, 373, 374, 375, 376, 843, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 865, 839, 864,
	866, 867, 863, 868, 869, 850, 744, 0, 795, 861,
	860, 862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 828, 802, 803, 804, 741,
	805, 799, 800, 742, 801, 829, 793, 825, 826, 769,
	796, 806, 824, 807, 827, 830, 831, 870, 871, 813,
	797, 246, 872, 810, 832, 823, 822, 808, 794, 833,
	834, 776, 771, 811, 812, 798, 816, 817, 818, 743,
	790, 791, 792, 814, 815, 772, 773, 774, 775, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 819, 616, 418, 786, 0,
	627, 494, 495, 628, 605, 0, 736, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	739, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 777, 545, 496, 414, 369,
	563, 562, 0, 0, 844, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	767, 821, 820, 754, 764, 0, 0, 298, 218, 491,
	611, 493, 492, 755, 0, 756, 760, 763, 759, 757,
	758, 0, 836, 0, 0, 0, 0, 0, 0, 723,
	735, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 733, 0, 0,
	0, 0, 787, 0, 734, 0, 0, 782, 761, 765,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	762, 785, 789, 319, 858, 783, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 859, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 780, 0, 608, 0, 447, 0, 0,
	842, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 784, 0, 405, 387, 855, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	840, 383, 573, 606, 607, 498, 0, 854, 835, 837,
	838, 841, 845, 846, 847, 848, 849, 851, 853, 857,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 856, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 788, 548, 549, 373, 374, 375, 376, 843, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 865, 839, 864,
	866, 867, 863, 868, 869, 850, 744, 0, 795, 861,
	860, 862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 828, 802, 803, 804, 741,
	805, 799, 800, 742, 801, 829, 793, 825, 826, 769,
	796, 806, 824, 807, 827, 830, 831, 870, 871, 813,
	797, 246, 872, 810, 832, 823, 822, 808, 794, 833,
	834, 776, 771, 811, 812, 798, 816, 817, 818, 743,
	790, 791, 792, 814, 815, 772, 773, 774, 775, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 819, 616, 418, 0, 0,
	627, 494, 495, 628, 605, 0, 736, 195, 61, 186,
	157, 0, 0, 0, 0, 0, 0, 385, 0, 509,
	542, 531, 615, 497, 0, 187, 0, 0, 0, 0,
	0, 0, 178, 0, 325, 0, 188, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 131, 545, 496, 414, 369,
	563, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 298, 218, 491,
	611, 493, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	0, 434, 462, 319, 453, 0, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 478, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 156, 184, 193, 185,
	116, 0, 604, 0, 0, 608, 0, 447, 0, 0,
	210, 0, 0, 0, 419, 0, 0, 352, 183, 177,
	176, 463, 0, 405, 387, 222, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 583, 584, 585, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 442,
	318, 383, 573, 606, 607, 498, 0, 560, 499, 508,
	310, 532, 544, 543, 379, 458, 213, 555, 558, 488,
	223, 0, 552, 567, 525, 566, 224, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 443, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 467, 548, 549, 373, 374, 375, 376, 336, 574,
	303, 470, 398, 129, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 221, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	228, 293, 430, 229, 0, 282, 504, 356, 158, 397,
	330, 569, 570, 58, 0, 230, 231, 232, 233, 234,
	235, 236, 237, 275, 238, 239, 240, 241, 242, 243,
	244, 247, 248, 249, 250, 251, 252, 253, 254, 572,
	245, 246, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 0, 0, 0, 276,
	277, 278, 279, 0, 0, 270, 271, 272, 273, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 225,
	45, 211, 214, 216, 215, 0, 59, 553, 565, 599,
	5, 609, 610, 612, 614, 613, 616, 418, 195, 134,
	226, 494, 495, 227, 605, 0, 0, 0, 385, 0,
	509, 542, 531, 615, 497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 325, 0, 0, 355, 546,
	528, 538, 529, 514, 515, 516, 523, 335, 517, 518,
	519, 489, 520, 490, 521, 522, 131, 545, 496, 414,
	369, 563, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 217, 0, 0, 0, 0, 0, 0, 298, 218,
	491, 611, 493, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 2339, 2342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 420, 437, 299, 410,
	450, 304, 417, 294, 384, 407, 0, 0, 290, 435,
	416, 366, 345, 346, 289, 0, 402, 323, 337, 320,
	382, 0, 434, 462, 319, 453, 0, 445, 292, 0,
	444, 381, 431, 436, 367, 361, 0, 291, 433, 365,
	360, 349, 327, 478, 350, 351, 341, 393, 359, 394,
	342, 371, 370, 372, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 608, 2343, 447, 0,
	0, 0, 2338, 0, 2337, 419, 2335, 2340, 352, 0,
	0, 0, 463, 0, 405, 387, 630, 0, 0, 403,
	357, 432, 395, 438, 421, 446, 399, 396, 283, 422,
	322, 368, 295, 297, 317, 324, 326, 328, 329, 377,
	378, 390, 409, 423, 424, 425, 321, 305, 404, 306,
	339, 307, 284, 313, 311, 314, 411, 315, 286, 391,
	429, 2341, 334, 400, 364, 287, 363, 392, 428, 427,
	296, 454, 460, 461, 550, 0, 466, 631, 632, 633,
	475, 0, 0, 480, 481, 482, 484, 485, 486, 487,
	551, 568, 535, 505, 468, 559, 502, 506, 507, 571,
	0, 0, 0, 459, 353, 354, 0, 332, 280, 281,
	626, 318, 383, 573, 606, 607, 498, 0, 560, 499,
	508, 310, 532, 544, 543, 379, 458, 0, 555, 558,
	488, 625, 0, 552, 567, 629, 566, 622, 389, 0,
	408, 564, 511, 0, 556, 530, 0, 557, 526, 561,
	0, 500, 0, 415, 440, 452, 469, 472, 501, 586,
	587, 588, 285, 471, 590, 591, 592, 593, 594, 595,
	596, 589, 443, 533, 510, 536, 451, 513, 512, 0,
	0, 547, 467, 548, 549, 373, 374, 375, 376, 336,
	574, 303, 470, 398, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 539, 540, 537, 634, 0, 597,
	598, 0, 0, 464, 465, 331, 338, 483, 340, 302,
	388, 333, 449, 347, 0, 476, 541, 477, 600, 603,
	601, 602, 380, 343, 344, 412, 348, 358, 401, 448,
	386, 406, 300, 439, 413, 362, 527, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 581, 580, 579, 578, 577,
	576, 575, 0, 0, 524, 426, 312, 274, 308, 309,
	316, 623, 620, 430, 624, 0, 282, 504, 356, 158,
	397, 330, 569, 570, 0, 0, 230, 231, 232, 233,
	234, 235, 236, 237, 275, 238, 239, 240, 241, 242,
	243, 244, 247, 248, 249, 250, 251, 252, 253, 254,
	572, 245, 246, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 0, 0, 0,
	276, 277, 278, 279, 0, 0, 270, 271, 272, 273,
	0, 0, 0, 455, 456, 457, 479, 0, 441, 503,
	621, 0, 0, 0, 0, 0, 0, 0, 553, 565,
	599, 0, 609, 610, 612, 614, 613, 616, 418, 0,
	0, 627, 494, 495, 628, 605, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 325, 0, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 0, 545, 496, 414, 369, 563,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1282, 0, 0, 217,
	0, 0, 754, 764, 0, 0, 298, 218, 491, 611,
	493, 492, 755, 0, 756, 760, 763, 759, 757, 758,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 761, 0, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 762,
	434, 462, 319, 453, 0, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 478, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 608, 0, 447, 0, 0, 0,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	463, 0, 405, 387, 630, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 631, 632, 633, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 626, 318,
	383, 573, 606, 607, 498, 0, 560, 499, 508, 310,
	532, 544, 543, 379, 458, 0, 555, 558, 488, 625,
	0, 552, 567, 629, 566, 622, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	443, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	467, 548, 549, 373, 374, 375, 376, 336, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 634, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 623,
	620, 430, 624, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 230, 231, 232, 233, 234, 235,
	236, 237, 275, 238, 239, 240, 241, 242, 243, 244,
	247, 248, 249, 250, 251, 252, 253, 254, 572, 245,
	246, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 0, 0, 0, 276, 277,
	278, 279, 0, 0, 270, 271, 272, 273, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 621, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 613, 616, 418, 0, 0, 627,
	494, 495, 628, 605, 195, 61, 186, 157, 0, 0,
	0, 0, 0, 0, 385, 653, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 0, 545, 496, 414, 369, 563, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 659, 0,
	0, 0, 0, 0, 658, 0, 0, 217, 0, 0,
	0, 0, 0, 0, 298, 218, 491, 611, 493, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 0, 434, 462,
	319, 453, 0, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 478,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 657, 0, 604,
	0, 0, 608, 0, 447, 0, 0, 0, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 463, 0,
	405, 387, 630, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 631, 632, 633, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 626, 318, 383, 573,
	606, 607, 498, 0, 560, 499, 508, 310, 532, 544,
	543, 379, 458, 0, 555, 558, 488, 625, 0, 552,
	567, 629, 566, 622, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 443, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 467, 548,
	549, 373, 374, 375, 376, 654, 656, 303, 470, 398,
	667, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 634, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 623, 620, 430,
	624, 0, 282, 504, 356, 158, 397, 330, 569, 570,
	0, 0, 230, 231, 232, 233, 234, 235, 236, 237,
	275, 238, 239, 240, 241, 242, 243, 244, 247, 248,
	249, 250, 251, 252, 253, 254, 572, 245, 246, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 0, 0, 0, 276, 277, 278, 279,
	0, 0, 270, 271, 272, 273, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 621, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 613, 616, 418, 0, 0, 627, 494, 495,
	628, 605, 385, 0, 509, 542, 531, 615, 497, 0,
	1095, 0, 0, 0, 0, 0, 0, 0, 0, 325,
	0, 0, 355, 546, 528, 538, 529, 514, 515, 516,
	523, 335, 517, 518, 519, 489, 520, 490, 521, 522,
	0, 545, 496, 414, 369, 563, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 298, 218, 491, 611, 493, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 0, 0, 0, 288,
	420, 437, 299, 410, 450, 304, 417, 294, 384, 407,
	0, 0, 2495, 2498, 2499, 2500, 2501, 2502, 2503, 0,
	2508, 2504, 2505, 2506, 2507, 0, 2490, 2491, 2492, 2493,
	1078, 2474, 2496, 0, 2475, 381, 2476, 2477, 2478, 2479,
	1082, 2480, 2481, 2482, 2483, 2484, 2487, 2488, 2485, 2486,
	2494, 393, 359, 394, 342, 371, 370, 372, 1106, 1108,
	1110, 1112, 1115, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	608, 0, 447, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 352, 0, 0, 0, 2489, 0, 405, 387,
	630, 0, 0, 403, 357, 432, 395, 438, 421, 446,
	399, 396, 283, 422, 322, 368, 295, 297, 317, 324,
	326, 328, 329, 377, 378, 390, 409, 423, 424, 425,
	321, 305, 404, 306, 339, 307, 284, 313, 311, 314,
	411, 315, 286, 391, 429, 0, 334, 400, 364, 287,
	363, 392, 428, 427, 296, 454, 460, 461, 550, 0,
	466, 631, 632, 633, 475, 0, 0, 480, 481, 482,
	484, 485, 486, 487, 551, 568, 535, 505, 468, 559,
	502, 506, 507, 571, 0, 0, 0, 459, 353, 354,
	0, 332, 280, 281, 626, 318, 383, 573, 606, 607,
	498, 0, 560, 499, 508, 310, 532, 544, 543, 379,
	458, 0, 555, 558, 488, 625, 0, 552, 567, 629,
	566, 622, 389, 0, 408, 564, 511, 0, 556, 530,
	0, 557, 526, 561, 0, 500, 0, 415, 440, 452,
	469, 472, 501, 586, 587, 588, 285, 471, 590, 591,
	592, 593, 594, 595, 596, 589, 443, 533, 510, 536,
	451, 513, 512, 0, 0, 547, 467, 548, 549, 373,
	374, 375, 376, 336, 574, 303, 470, 398, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	537, 634, 0, 597, 598, 0, 0, 464, 465, 331,
	338, 483, 340, 302, 388, 333, 449, 347, 0, 476,
	541, 477, 600, 603, 601, 602, 380, 343, 344, 412,
	348, 358, 401, 448, 386, 406, 300, 439, 413, 362,
	527, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 581,
	580, 579, 578, 577, 576, 575, 0, 0, 524, 426,
	312, 274, 308, 309, 316, 623, 620, 430, 624, 0,
	282, 2497, 356, 0, 397, 330, 569, 570, 0, 0,
	230, 231, 232, 233, 234, 235, 236, 237, 275, 238,
	239, 240, 241, 242, 243, 244, 247, 248, 249, 250,
	251, 252, 253, 254, 572, 245, 246, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 0, 0, 0, 276, 277, 278, 279, 0, 0,
	270, 271, 272, 273, 0, 0, 0, 455, 456, 457,
	479, 0, 441, 503, 621, 0, 0, 0, 0, 0,
	0, 0, 553, 565, 599, 0, 609, 610, 612, 614,
	613, 616, 418, 0, 0, 627, 494, 495, 628, 605,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 325, 0, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 0, 545,
	496, 414, 369, 563, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 0, 0, 0, 0,
	298, 218, 491, 611, 493, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 2339, 2342, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 0, 434, 462, 319, 453, 0, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 478, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 0, 0, 608, 2343,
	447, 0, 0, 0, 2338, 0, 2337, 419, 2335, 2340,
	352, 0, 0, 0, 463, 0, 405, 387, 630, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 2341, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 631,
	632, 633, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 626, 318, 383, 573, 606, 607, 498, 0,
	560, 499, 508, 310, 532, 544, 543, 379, 458, 0,
	555, 558, 488, 625, 0, 552, 567, 629, 566, 622,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 443, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 467, 548, 549, 373, 374, 375,
	376, 336, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 634,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 623, 620, 430, 624, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 230, 231,
	232, 233, 234, 235, 236, 237, 275, 238, 239, 240,
	241, 242, 243, 244, 247, 248, 249, 250, 251, 252,
	253, 254, 572, 245, 246, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 0,
	0, 0, 276, 277, 278, 279, 0, 0, 270, 271,
	272, 273, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 621, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 613, 616,
	418, 0, 0, 627, 494, 495, 628, 605, 385, 0,
	509, 542, 531, 615, 497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 325, 0, 0, 355, 546,
	528, 538, 529, 514, 515, 516, 523, 335, 517, 518,
	519, 489, 520, 490, 521, 522, 0, 545, 496, 414,
	369, 563, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 0, 0, 298, 218,
	491, 611, 493, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 2360, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 420, 437, 299, 410,
	450, 304, 417, 294, 384, 407, 0, 0, 290, 435,
	416, 366, 345, 346, 289, 0, 402, 323, 337, 320,
	382, 0, 434, 462, 319, 453, 0, 445, 292, 0,
	444, 381, 431, 436, 367, 361, 0, 291, 433, 365,
	360, 349, 327, 478, 350, 351, 341, 393, 359, 394,
	342, 371, 370, 372, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 608, 2359, 447, 0,
	0, 0, 2365, 2362, 2364, 419, 0, 2363, 352, 0,
	0, 0, 463, 0, 405, 387, 630, 0, 2357, 403,
	357, 432, 395, 438, 421, 446, 399, 396, 283, 422,
	322, 368, 295, 297, 317, 324, 326, 328, 329, 377,
	378, 390, 409, 423, 424, 425, 321, 305, 404, 306,
	339, 307, 284, 313, 311, 314, 411, 315, 286, 391,
	429, 0, 334, 400, 364, 287, 363, 392, 428, 427,
	296, 454, 460, 461, 550, 0, 466, 631, 632, 633,
	475, 0, 0, 480, 481, 482, 484, 485, 486, 487,
	551, 568, 535, 505, 468, 559, 502, 506, 507, 571,
	0, 0, 0, 459, 353, 354, 0, 332, 280, 281,
	626, 318, 383, 573, 606, 607, 498, 0, 560, 499,
	508, 310, 532, 544, 543, 379, 458, 0, 555, 558,
	488, 625, 0, 552, 567, 629, 566, 622, 389, 0,
	408, 564, 511, 0, 556, 530, 0, 557, 526, 561,
	0, 500, 0, 415, 440, 452, 469, 472, 501, 586,
	587, 588, 285, 471, 590, 591, 592, 593, 594, 595,
	596, 589, 443, 533, 510, 536, 451, 513, 512, 0,
	0, 547, 467, 548, 549, 373, 374, 375, 376, 336,
	574, 303, 470, 398, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 539, 540, 537, 634, 0, 597,
	598, 0, 0, 464, 465, 331, 338, 483, 340, 302,
	388, 333, 449, 347, 0, 476, 541, 477, 600, 603,
	601, 602, 380, 343, 344, 412, 348, 358, 401, 448,
	386, 406, 300, 439, 413, 362, 527, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 581, 580, 579, 578, 577,
	576, 575, 0, 0, 524, 426, 312, 274, 308, 309,
	316, 623, 620, 430, 624, 0, 282, 504, 356, 0,
	397, 330, 569, 570, 0, 0, 230, 231, 232, 233,
	234, 235, 236, 237, 275, 238, 239, 240, 241, 242,
	243, 244, 247, 248, 249, 250, 251, 252, 253, 254,
	572, 245, 246, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 0, 0, 0,
	276, 277, 278, 279, 0, 0, 270, 271, 272, 273,
	0, 0, 0, 455, 456, 457, 479, 0, 441, 503,
	621, 0, 0, 0, 0, 0, 0, 0, 553, 565,
	599, 0, 609, 610, 612, 614, 613, 616, 418, 0,
	0, 627, 494, 495, 628, 605, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 325, 0, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 0, 545, 496, 414, 369, 563,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 217,
	0, 0, 0, 0, 0, 0, 298, 218, 491, 611,
	493, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 2360, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 0,
	434, 462, 319, 453, 0, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 478, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 608, 2359, 447, 0, 0, 0,
	2365, 2362, 2364, 419, 0, 2363, 352, 0, 0, 0,
	463, 0, 405, 387, 630, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 631, 632, 633, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 626, 318,
	383, 573, 606, 607, 498, 0, 560, 499, 508, 310,
	532, 544, 543, 379, 458, 0, 555, 558, 488, 625,
	0, 552, 567, 629, 566, 622, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	443, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	467, 548, 549, 373, 374, 375, 376, 336, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 634, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 623,
	620, 430, 624, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 230, 231, 232, 233, 234, 235,
	236, 237, 275, 238, 239, 240, 241, 242, 243, 244,
	247, 248, 249, 250, 251, 252, 253, 254, 572, 245,
	246, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 0, 0, 0, 276, 277,
	278, 279, 0, 0, 270, 271, 272, 273, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 621, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 613, 616, 418, 0, 0, 627,
	494, 495, 628, 605, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 2059, 0, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 0, 545, 496, 414, 369, 563, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	2060, 0, 0, 0, 298, 218, 491, 611, 493, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 1212, 1213, 1214, 1211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 0, 434, 462,
	319, 453, 0, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 478,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 608, 0, 447, 0, 0, 0, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 463, 0,
	405, 387, 630, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 631, 632, 633, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 626, 318, 383, 573,
	606, 607, 498, 0, 560, 499, 508, 310, 532, 544,
	543, 379, 458, 0, 555, 558, 488, 625, 0, 552,
	567, 629, 566, 622, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 443, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 467, 548,
	549, 373, 374, 375, 376, 336, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 634, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 623, 620, 430,
	624, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 230, 231, 232, 233, 234, 235, 236, 237,
	275, 238, 239, 240, 241, 242, 243, 244, 247, 248,
	249, 250, 251, 252, 253, 254, 572, 245, 246, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 0, 0, 0, 276, 277, 278, 279,
	0, 0, 270, 271, 272, 273, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 621, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 613, 616, 418, 195, 0, 627, 494, 495,
	628, 605, 0, 0, 0, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 131, 545, 496, 414, 369, 563, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 2109, 0, 217, 0,
	0, 0, 0, 0, 0, 298, 218, 491, 611, 493,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 0, 434,
	462, 319, 453, 0, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	478, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 0, 608, 0, 447, 0, 0, 0, 0,
	0, 0, 419, 0, 0, 352, 0, 0, 0, 463,
	0, 405, 387, 630, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 631, 632, 633, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 626, 318, 383,
	573, 606, 607, 498, 0, 560, 499, 508, 310, 532,
	544, 543, 379, 458, 0, 555, 558, 488, 625, 0,
	552, 567, 629, 566, 622, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 443,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 467,
	548, 549, 373, 374, 375, 376, 336, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 634, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 623, 620,
	430, 624, 0, 282, 504, 356, 158, 397, 330, 569,
	570, 0, 0, 230, 231, 232, 233, 234, 235, 236,
	237, 275, 238, 239, 240, 241, 242, 243, 244, 247,
	248, 249, 250, 251, 252, 253, 254, 572, 245, 246,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 0, 0, 0, 276, 277, 278,
	279, 0, 0, 270, 271, 272, 273, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 621, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 613, 616, 418, 195, 0, 627, 494,
	495, 628, 605, 0, 0, 0, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 325, 0, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 131, 545, 496, 414, 369, 563,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 2095, 0, 217,
	0, 0, 0, 0, 0, 0, 298, 218, 491, 611,
	493, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 0,
	434, 462, 319, 453, 0, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 478, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 608, 0, 447, 0, 0, 0,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	463, 0, 405, 387, 630, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 631, 632, 633, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 626, 318,
	383, 573, 606, 607, 498, 0, 560, 499, 508, 310,
	532, 544, 543, 379, 458, 0, 555, 558, 488, 625,
	0, 552, 567, 629, 566, 622, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	443, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	467, 548, 549, 373, 374, 375, 376, 336, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 634, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 623,
	620, 430, 624, 0, 282, 504, 356, 158, 397, 330,
	569, 570, 0, 0, 230, 231, 232, 233, 234, 235,
	236, 237, 275, 238, 239, 240, 241, 242, 243, 244,
	247, 248, 249, 250, 251, 252, 253, 254, 572, 245,
	246, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 0, 0, 0, 276, 277,
	278, 279, 0, 0, 270, 271, 272, 273, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 621, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 613, 616, 418, 0, 0, 627,
	494, 495, 628, 605, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 325, 1010, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 0, 545, 496, 414, 369, 563, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 1017, 1018,
	0, 0, 0, 0, 298, 218, 491, 611, 493, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1021,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 420, 1004, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 0, 434, 462,
	319, 453, 992, 445, 292, 991, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 478,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 608, 0, 447, 0, 0, 0, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 463, 0,
	405, 387, 630, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 1008, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 631, 632, 633, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 626, 318, 383, 573,
	606, 607, 498, 0, 560, 499, 508, 310, 532, 544,
	543, 379, 458, 0, 555, 558, 488, 625, 0, 552,
	567, 629, 566, 622, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 1009, 589, 443, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 1012, 548,
	549, 373, 374, 375, 376, 336, 574, 1007, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 634, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 1019, 1005,
	1015, 1006, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 1016, 527, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 623, 620, 430,
	624, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 230, 231, 232, 233, 234, 235, 236, 237,
	275, 238, 239, 240, 241, 242, 243, 244, 247, 248,
	249, 250, 251, 252, 253, 254, 572, 245, 246, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 0, 0, 0, 276, 277, 278, 279,
	0, 0, 270, 271, 272, 273, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 621, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 613, 616, 418, 195, 0, 627, 494, 495,
	628, 605, 0, 0, 0, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 131, 545, 496, 414, 369, 563, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1991, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 298, 218, 491, 611, 493,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 0, 434,
	462, 319, 453, 0, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	478, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 0, 608, 0, 447, 0, 0, 0, 0,
	0, 0, 419, 0, 0, 352, 0, 0, 0, 463,
	0, 405, 387, 630, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 631, 632, 633, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 626, 318, 383,
	573, 606, 607, 498, 0, 560, 499, 508, 310, 532,
	544, 543, 379, 458, 0, 555, 558, 488, 625, 0,
	552, 567, 629, 566, 622, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 443,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 467,
	548, 549, 373, 374, 375, 376, 336, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 634, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 623, 620,
	430, 624, 0, 282, 504, 356, 158, 397, 330, 569,
	570, 0, 0, 230, 231, 232, 233, 234, 235, 236,
	237, 275, 238, 239, 240, 241, 242, 243, 244, 247,
	248, 249, 250, 251, 252, 253, 254, 572, 245, 246,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 0, 0, 0, 276, 277, 278,
	279, 0, 0, 270, 271, 272, 273, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 621, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 613, 616, 418, 0, 0, 627, 494,
	495, 628, 605, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 0, 545, 496, 414, 369, 563, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 1017, 1018, 0,
	0, 0, 0, 298, 218, 491, 611, 493, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1021, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 0, 434, 462, 319,
	453, 992, 445, 292, 991, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 478, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 0,
	0, 608, 0, 447, 0, 0, 0, 0, 0, 0,
	419, 0, 0, 352, 0, 0, 0, 463, 0, 405,
	387, 630, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 631, 632, 633, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 626, 318, 383, 573, 606,
	607, 498, 0, 560, 499, 508, 310, 532, 544, 543,
	379, 458, 0, 555, 558, 488, 625, 0, 552, 567,
	629, 566, 622, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 443, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 467, 548, 549,
	373, 374, 375, 376, 336, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 634, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 1019, 2011, 1015,
	2012, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	1016, 527, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 623, 620, 430, 624,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 230, 231, 232, 233, 234, 235, 236, 237, 275,
	238, 239, 240, 241, 242, 243, 244, 247, 248, 249,
	250, 251, 252, 253, 254, 572, 245, 246, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 0, 0, 0, 276, 277, 278, 279, 0,
	0, 270, 271, 272, 273, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 621, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 613, 616, 418, 0, 0, 627, 494, 495, 628,
	605, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	2873, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 0,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 0, 0, 0, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 0,
	445, 292, 0, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 2876, 0, 0, 2875, 604, 0, 0, 608,
	0, 447, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 463, 0, 405, 387, 630,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 399,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	631, 632, 633, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 626, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 625, 0, 552, 567, 629, 566,
	622, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 467, 548, 549, 373, 374,
	375, 376, 336, 574, 303, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	634, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 380, 343, 344, 412, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 362, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 623, 620, 430, 624, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 621, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 0, 0, 627, 494, 495, 628, 605, 385,
	0, 509, 542, 531, 615, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 325, 1493, 0, 355,
	546, 528, 538, 529, 514, 515, 516, 523, 335, 517,
	518, 519, 489, 520, 490, 521, 522, 0, 545, 496,
	414, 369, 563, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 1491, 0, 0, 0, 298,
	218, 491, 611, 493, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	0, 0, 0, 0, 0, 0, 288, 420, 437, 299,
	410, 450, 304, 417, 294, 384, 407, 0, 0, 290,
	435, 416, 366, 345, 346, 289, 0, 402, 323, 337,
	320, 382, 0, 434, 462, 319, 453, 0, 445, 292,
	0, 444, 381, 431, 436, 367, 361, 0, 291, 433,
	365, 360, 349, 327, 478, 350, 351, 341, 393, 359,
	394, 342, 371, 370, 372, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 0, 0, 608, 0, 447,
	0, 0, 0, 0, 0, 0, 419, 0, 0, 352,
	0, 0, 0, 463, 0, 405, 387, 630, 0, 0,
	403, 357, 432, 395, 438, 421, 446, 399, 396, 283,
	422, 322, 368, 295, 297, 317, 324, 326, 328, 329,
	377, 378, 390, 409, 423, 424, 425, 321, 305, 404,
	306, 339, 307, 284, 313, 311, 314, 411, 315, 286,
	391, 429, 0, 334, 400, 364, 287, 363, 392, 428,
	427, 296, 454, 460, 461, 550, 0, 466, 631, 632,
	633, 475, 0, 0, 480, 481, 482, 484, 485, 486,
	487, 551, 568, 535, 505, 468, 559, 502, 506, 507,
	571, 0, 0, 0, 459, 353, 354, 0, 332, 280,
	281, 626, 318, 383, 573, 606, 607, 498, 0, 560,
	499, 508, 310, 532, 544, 543, 379, 458, 0, 555,
	558, 488, 625, 0, 552, 567, 629, 566, 622, 389,
	0, 408, 564, 511, 0, 556, 530, 0, 557, 526,
	561, 0, 500, 0, 415, 440, 452, 469, 472, 501,
	586, 587, 588, 285, 471, 590, 591, 592, 593, 594,
	595, 596, 589, 443, 533, 510, 536, 451, 513, 512,
	0, 0, 547, 467, 548, 549, 373, 374, 375, 376,
	336, 574, 303, 470, 398, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 537, 634, 0,
	597, 598, 0, 0, 464, 465, 331, 338, 483, 340,
	302, 388, 333, 449, 347, 0, 476, 541, 477, 600,
	603, 601, 602, 380, 343, 344, 412, 348, 358, 401,
	448, 386, 406, 300, 439, 413, 362, 527, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 581, 580, 579, 578,
	577, 576, 575, 0, 0, 524, 426, 312, 274, 308,
	309, 316, 623, 620, 430, 624, 0, 282, 504, 356,
	0, 397, 330, 569, 570, 0, 0, 230, 231, 232,
	233, 234, 235, 236, 237, 275, 238, 239, 240, 241,
	242, 243, 244, 247, 248, 249, 250, 251, 252, 253,
	254, 572, 245, 246, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 0, 0,
	0, 276, 277, 278, 279, 0, 0, 270, 271, 272,
	273, 0, 0, 0, 455, 456, 457, 479, 0, 441,
	503, 621, 0, 0, 0, 0, 0, 0, 0, 553,
	565, 599, 0, 609, 610, 612, 614, 613, 616, 418,
	0, 0, 627, 494, 495, 628, 605, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 325, 1487, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 0, 545, 496, 414, 369,
	563, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 1491, 0, 0, 0, 298, 218, 491,
	611, 493, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	0, 434, 462, 319, 453, 0, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 478, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 0, 608, 0, 447, 0, 0,
	0, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 463, 0, 405, 387, 630, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	318, 383, 573, 606, 607, 498, 0, 560, 499, 508,
	310, 532, 544, 543, 379, 458, 0, 555, 558, 488,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 443, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 467, 548, 549, 373, 374, 375, 376, 336, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 230, 231, 232, 233, 234,
	235, 236, 237, 275, 238, 239, 240, 241, 242, 243,
	244, 247, 248, 249, 250, 251, 252, 253, 254, 572,
	245, 246, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 0, 0, 0, 276,
	277, 278, 279, 0, 0, 270, 271, 272, 273, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 613, 616, 418, 0, 0,
	627, 494, 495, 628, 605, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 0, 545, 496, 414, 369, 563, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3903, 0, 217, 821,
	0, 0, 0, 0, 0, 298, 218, 491, 611, 493,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 0, 434,
	462, 319, 453, 0, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	478, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 0, 608, 0, 447, 0, 0, 0, 0,
	0, 0, 419, 0, 0, 352, 0, 0, 0, 463,
	0, 405, 387, 630, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 631, 632, 633, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 626, 318, 383,
	573, 606, 607, 498, 0, 560, 499, 508, 310, 532,
	544, 543, 379, 458, 0, 555, 558, 488, 625, 0,
	552, 567, 629, 566, 622, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 443,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 467,
	548, 549, 373, 374, 375, 376, 336, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 634, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 623, 620,
	430, 624, 0, 282, 504, 356, 0, 397, 330, 569,
	570, 0, 0, 230, 231, 232, 233, 234, 235, 236,
	237, 275, 238, 239, 240, 241, 242, 243, 244, 247,
	248, 249, 250, 251, 252, 253, 254, 572, 245, 246,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 0, 0, 0, 276, 277, 278,
	279, 0, 0, 270, 271, 272, 273, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 621, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 613, 616, 418, 0, 0, 627, 494,
	495, 628, 605, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 0, 545, 496, 414, 369, 563, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 1491,
	0, 0, 0, 298, 218, 491, 611, 493, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1489, 0, 0, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 0, 434, 462, 319,
	453, 0, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 478, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 0,
	0, 608, 0, 447, 0, 0, 0, 0, 0, 0,
	419, 0, 0, 352, 0, 0, 0, 463, 0, 405,
	387, 630, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 631, 632, 633, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 626, 318, 383, 573, 606,
	607, 498, 0, 560, 499, 508, 310, 532, 544, 543,
	379, 458, 0, 555, 558, 488, 625, 0, 552, 567,
	629, 566, 622, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 443, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 467, 548, 549,
	373, 374, 375, 376, 336, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 634, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 623, 620, 430, 624,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 230, 231, 232, 233, 234, 235, 236, 237, 275,
	238, 239, 240, 241, 242, 243, 244, 247, 248, 249,
	250, 251, 252, 253, 254, 572, 245, 246, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 0, 0, 0, 276, 277, 278, 279, 0,
	0, 270, 271, 272, 273, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 621, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 613, 616, 418, 0, 0, 627, 494, 495, 628,
	605, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 0,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 0, 0, 0, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 0,
	445, 292, 0, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 608,
	0, 447, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 463, 0, 405, 387, 630,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 399,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	631, 632, 633, 475, 2404, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 626, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 625, 0, 552, 567, 629, 566,
	622, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 467, 548, 549, 373, 374,
	375, 376, 336, 574, 303, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	634, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 380, 343, 344, 412, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 362, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 942, 0, 524, 426, 312,
	274, 308, 309, 316, 623, 620, 430, 624, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 621, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 0, 0, 627, 494, 495, 628, 605, 385,
	0, 509, 542, 531, 615, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 325, 0, 0, 355,
	546, 528, 538, 529, 514, 515, 516, 523, 335, 517,
	518, 519, 489, 520, 490, 521, 522, 0, 545, 496,
	414, 369, 563, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 1491, 0, 0, 0, 298,
	218, 491, 611, 493, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1699,
	0, 0, 0, 0, 0, 0, 288, 420, 437, 299,
	410, 450, 304, 417, 294, 384, 407, 0, 0, 290,
	435, 416, 366, 345, 346, 289, 0, 402, 323, 337,
	320, 382, 0, 434, 462, 319, 453, 0, 445, 292,
	0, 444, 381, 431, 436, 367, 361, 0, 291, 433,
	365, 360, 349, 327, 478, 350, 351, 341, 393, 359,
	394, 342, 371, 370, 372, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 0, 0, 608, 0, 447,
	0, 0, 0, 0, 0, 0, 419, 0, 0, 352,
	0, 0, 0, 463, 0, 405, 387, 630, 0, 0,
	403, 357, 432, 395, 438, 421, 446, 399, 396, 283,
	422, 322, 368, 295, 297, 317, 324, 326, 328, 329,
	377, 378, 390, 409, 423, 424, 425, 321, 305, 404,
	306, 339, 307, 284, 313, 311, 314, 411, 315, 286,
	391, 429, 0, 334, 400, 364, 287, 363, 392, 428,
	427, 296, 454, 460, 461, 550, 0, 466, 631, 632,
	633, 475, 0, 0, 480, 481, 482, 484, 485, 486,
	487, 551, 568, 535, 505, 468, 559, 502, 506, 507,
	571, 0, 0, 0, 459, 353, 354, 0, 332, 280,
	281, 626, 318, 383, 573, 606, 607, 498, 0, 560,
	499, 508, 310, 532, 544, 543, 379, 458, 0, 555,
	558, 488, 625, 0, 552, 567, 629, 566, 622, 389,
	0, 408, 564, 511, 0, 556, 530, 0, 557, 526,
	561, 0, 500, 0, 415, 440, 452, 469, 472, 501,
	586, 587, 588, 285, 471, 590, 591, 592, 593, 594,
	595, 596, 589, 443, 533, 510, 536, 451, 513, 512,
	0, 0, 547, 467, 548, 549, 373, 374, 375, 376,
	336, 574, 303, 470, 398, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 537, 634, 0,
	597, 598, 0, 0, 464, 465, 331, 338, 483, 340,
	302, 388, 333, 449, 347, 0, 476, 541, 477, 600,
	603, 601, 602, 380, 343, 344, 412, 348, 358, 401,
	448, 386, 406, 300, 439, 413, 362, 527, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 581, 580, 579, 578,
	577, 576, 575, 0, 0, 524, 426, 312, 274, 308,
	309, 316, 623, 620, 430, 624, 0, 282, 504, 356,
	0, 397, 330, 569, 570, 0, 0, 230, 231, 232,
	233, 234, 235, 236, 237, 275, 238, 239, 240, 241,
	242, 243, 244, 247, 248, 249, 250, 251, 252, 253,
	254, 572, 245, 246, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 0, 0,
	0, 276, 277, 278, 279, 0, 0, 270, 271, 272,
	273, 0, 0, 0, 455, 456, 457, 479, 0, 441,
	503, 621, 0, 0, 0, 0, 0, 0, 0, 553,
	565, 599, 0, 609, 610, 612, 614, 613, 616, 418,
	0, 0, 627, 494, 495, 628, 605, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 2437,
	0, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 0, 545, 496, 414, 369,
	563, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 2439, 0, 0, 0, 298, 218, 491,
	611, 493, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	0, 434, 462, 319, 453, 0, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 478, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 0, 608, 0, 447, 0, 0,
	0, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 463, 0, 405, 387, 630, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	318, 383, 573, 606, 607, 498, 0, 560, 499, 508,
	310, 532, 544, 543, 379, 458, 0, 555, 558, 488,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 443, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 467, 548, 549, 373, 374, 375, 376, 336, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 230, 231, 232, 233, 234,
	235, 236, 237, 275, 238, 239, 240, 241, 242, 243,
	244, 247, 248, 249, 250, 251, 252, 253, 254, 572,
	245, 246, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 0, 0, 0, 276,
	277, 278, 279, 0, 0, 270, 271, 272, 273, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 613, 616, 418, 0, 0,
	627, 494, 495, 628, 605, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 2059, 0, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 0, 545, 496, 414, 369, 563, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 2060, 0, 0, 0, 298, 218, 491, 611, 493,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 0, 434,
	462, 319, 453, 0, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	478, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 0, 608, 0, 447, 0, 0, 0, 0,
	0, 0, 419, 0, 0, 352, 0, 0, 0, 463,
	0, 405, 387, 630, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 631, 632, 633, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 626, 318, 383,
	573, 606, 607, 498, 0, 560, 499, 508, 310, 532,
	544, 543, 379, 458, 0, 555, 558, 488, 625, 0,
	552, 567, 629, 566, 622, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 443,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 467,
	548, 549, 373, 374, 375, 376, 336, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 634, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 623, 620,
	430, 624, 0, 282, 504, 356, 0, 397, 330, 569,
	570, 0, 0, 230, 231, 232, 233, 234, 235, 236,
	237, 275, 238, 239, 240, 241, 242, 243, 244, 247,
	248, 249, 250, 251, 252, 253, 254, 572, 245, 246,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 0, 0, 0, 276, 277, 278,
	279, 0, 0, 270, 271, 272, 273, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 621, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 613, 616, 418, 0, 0, 627, 494,
	495, 628, 605, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 0, 545, 496, 414, 369, 563, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 3078,
	3080, 0, 0, 298, 218, 491, 611, 493, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 0, 434, 462, 319,
	453, 0, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 478, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 0,
	0, 608, 0, 447, 0, 0, 0, 0, 0, 0,
	419, 0, 0, 352, 0, 0, 0, 463, 0, 405,
	387, 630, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 631, 632, 633, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 626, 318, 383, 573, 606,
	607, 498, 0, 560, 499, 508, 310, 532, 544, 543,
	379, 458, 0, 555, 558, 488, 625, 0, 552, 567,
	629, 566, 622, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 443, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 467, 548, 549,
	373, 374, 375, 376, 336, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 634, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 623, 620, 430, 624,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 230, 231, 232, 233, 234, 235, 236, 237, 275,
	238, 239, 240, 241, 242, 243, 244, 247, 248, 249,
	250, 251, 252, 253, 254, 572, 245, 246, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 0, 0, 0, 276, 277, 278, 279, 0,
	0, 270, 271, 272, 273, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 621, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 613, 616, 418, 0, 0, 627, 494, 495, 628,
	605, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 2459,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 0,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 0, 1491, 0, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 0,
	445, 292, 0, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 608,
	0, 447, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 463, 0, 405, 387, 630,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 399,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	631, 632, 633, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 626, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 625, 0, 552, 567, 629, 566,
	622, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 467, 548, 549, 373, 374,
	375, 376, 336, 574, 303, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	634, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 380, 343, 344, 412, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 362, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 623, 620, 430, 624, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 621, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 0, 0, 627, 494, 495, 628, 605, 385,
	0, 509, 542, 531, 615, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 641, 325, 0, 0, 355,
	546, 528, 538, 529, 514, 515, 516, 523, 335, 517,
	518, 519, 489, 520, 490, 521, 522, 0, 545, 496,
	414, 369, 563, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 0, 0, 0, 0, 298,
	218, 491, 611, 493, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 420, 437, 299,
	410, 450, 304, 417, 294, 384, 407, 0, 0, 290,
	435, 416, 366, 345, 346, 289, 0, 402, 323, 337,
	320, 382, 0, 434, 462, 319, 453, 0, 445, 292,
	0, 444, 381, 431, 436, 367, 361, 0, 291, 433,
	365, 360, 349, 327, 478, 350, 351, 341, 393, 359,
	394, 342, 371, 370, 372, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 0, 0, 608, 0, 447,
	0, 640, 0, 0, 0, 0, 419, 0, 0, 352,
	0, 0, 0, 463, 0, 405, 387, 630, 0, 0,
	403, 357, 432, 395, 438, 421, 446, 399, 396, 283,
	422, 322, 368, 295, 297, 317, 324, 326, 328, 329,
	377, 378, 390, 409, 423, 424, 425, 321, 305, 404,
	306, 339, 307, 284, 313, 311, 314, 411, 315, 286,
	391, 429, 0, 334, 400, 364, 287, 363, 392, 428,
	427, 296, 454, 460, 461, 550, 0, 466, 631, 632,
	633, 475, 0, 0, 480, 481, 482, 484, 485, 486,
	487, 551, 568, 535, 505, 468, 559, 502, 506, 507,
	571, 0, 0, 0, 459, 353, 354, 0, 332, 280,
	281, 626, 318, 383, 573, 606, 607, 498, 0, 560,
	499, 508, 310, 532, 544, 543, 379, 458, 0, 555,
	558, 488, 625, 0, 552, 567, 629, 566, 622, 389,
	0, 408, 564, 511, 0, 556, 530, 0, 557, 526,
	561, 0, 500, 0, 415, 440, 452, 469, 472, 501,
	586, 587, 588, 285, 471, 590, 591, 592, 593, 594,
	595, 596, 589, 443, 533, 510, 536, 451, 513, 512,
	0, 0, 547, 467, 548, 549, 373, 374, 375, 376,
	336, 574, 303, 470, 398, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 537, 634, 0,
	597, 598, 0, 0, 464, 465, 331, 338, 483, 340,
	302, 388, 333, 449, 347, 0, 476, 541, 477, 600,
	603, 601, 602, 380, 343, 344, 412, 348, 358, 401,
	448, 386, 406, 300, 439, 413, 362, 527, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 581, 580, 579, 578,
	577, 576, 575, 0, 0, 524, 426, 312, 274, 308,
	309, 316, 623, 620, 430, 624, 0, 282, 504, 356,
	0, 397, 330, 569, 570, 0, 0, 230, 231, 232,
	233, 234, 235, 236, 237, 275, 238, 239, 240, 241,
	242, 243, 244, 247, 248, 249, 250, 251, 252, 253,
	254, 572, 245, 246, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 0, 0,
	0, 276, 277, 278, 279, 0, 0, 270, 271, 272,
	273, 0, 0, 0, 455, 456, 457, 479, 0, 441,
	503, 621, 0, 0, 0, 0, 0, 0, 0, 553,
	565, 599, 0, 609, 610, 612, 614, 613, 616, 418,
	0, 0, 627, 494, 495, 628, 605, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 0, 545, 496, 414, 369,
	563, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 821, 0, 0, 0, 0, 0, 298, 218, 491,
	611, 493, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	0, 434, 462, 319, 453, 0, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 478, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 0, 608, 0, 447, 0, 0,
	0, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 463, 0, 405, 387, 630, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	318, 383, 573, 606, 607, 498, 0, 560, 499, 508,
	310, 532, 544, 543, 379, 458, 0, 555, 558, 488,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 443, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 467, 548, 549, 373, 374, 375, 376, 336, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 230, 231, 232, 233, 234,
	235, 236, 237, 275, 238, 239, 240, 241, 242, 243,
	244, 247, 248, 249, 250, 251, 252, 253, 254, 572,
	245, 246, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 0, 0, 0, 276,
	277, 278, 279, 0, 0, 270, 271, 272, 273, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 613, 616, 418, 0, 0,
	627, 494, 495, 628, 605, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 0, 545, 496, 414, 369, 563, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3882, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 298, 218, 491, 611, 493,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 0, 434,
	462, 319, 453, 0, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	478, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 0, 608, 0, 447, 0, 0, 0, 0,
	0, 0, 419, 0, 0, 352, 0, 0, 0, 463,
	0, 405, 387, 630, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 631, 632, 633, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 626, 318, 383,
	573, 606, 607, 498, 0, 560, 499, 508, 310, 532,
	544, 543, 379, 458, 0, 555, 558, 488, 625, 0,
	552, 567, 629, 566, 622, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 443,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 467,
	548, 549, 373, 374, 375, 376, 336, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 634, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 623, 620,
	430, 624, 0, 282, 504, 356, 0, 397, 330, 569,
	570, 0, 0, 230, 231, 232, 233, 234, 235, 236,
	237, 275, 238, 239, 240, 241, 242, 243, 244, 247,
	248, 249, 250, 251, 252, 253, 254, 572, 245, 246,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 0, 0, 0, 276, 277, 278,
	279, 0, 0, 270, 271, 272, 273, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 621, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 613, 616, 418, 0, 0, 627, 494,
	495, 628, 605, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 0, 545, 496, 414, 369, 563, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 3662,
	0, 0, 0, 298, 218, 491, 611, 493, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 0, 434, 462, 319,
	453, 0, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 478, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 0,
	0, 608, 0, 447, 0, 0, 0, 0, 0, 0,
	419, 0, 0, 352, 0, 0, 0, 463, 0, 405,
	387, 630, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 631, 632, 633, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 626, 318, 383, 573, 606,
	607, 498, 0, 560, 499, 508, 310, 532, 544, 543,
	379, 458, 0, 555, 558, 488, 625, 0, 552, 567,
	629, 566, 622, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 443, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 467, 548, 549,
	373, 374, 375, 376, 336, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 634, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 623, 620, 430, 624,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 230, 231, 232, 233, 234, 235, 236, 237, 275,
	238, 239, 240, 241, 242, 243, 244, 247, 248, 249,
	250, 251, 252, 253, 254, 572, 245, 246, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 0, 0, 0, 276, 277, 278, 279, 0,
	0, 270, 271, 272, 273, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 621, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 613, 616, 418, 0, 0, 627, 494, 495, 628,
	605, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 0,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 0, 0, 0, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 0,
	445, 292, 0, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 608,
	0, 447, 0, 0, 0, 3791, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 463, 0, 405, 387, 630,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 399,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	631, 632, 633, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 626, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 625, 0, 552, 567, 629, 566,
	622, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 467, 548, 549, 373, 374,
	375, 376, 336, 574, 303, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	634, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 380, 343, 344, 412, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 362, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 623, 620, 430, 624, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 621, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 0, 0, 627, 494, 495, 628, 605, 385,
	0, 509, 542, 531, 615, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 325, 0, 0, 355,
	546, 528, 538, 529, 514, 515, 516, 523, 335, 517,
	518, 519, 489, 520, 490, 521, 522, 0, 545, 496,
	414, 369, 563, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3506,
	0, 0, 217, 0, 0, 0, 0, 0, 0, 298,
	218, 491, 611, 493, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 420, 437, 299,
	410, 450, 304, 417, 294, 384, 407, 0, 0, 290,
	435, 416, 366, 345, 346, 289, 0, 402, 323, 337,
	320, 382, 0, 434, 462, 319, 453, 0, 445, 292,
	0, 444, 381, 431, 436, 367, 361, 0, 291, 433,
	365, 360, 349, 327, 478, 350, 351, 341, 393, 359,
	394, 342, 371, 370, 372, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 0, 0, 608, 0, 447,
	0, 0, 0, 0, 0, 0, 419, 0, 0, 352,
	0, 0, 0, 463, 0, 405, 387, 630, 0, 0,
	403, 357, 432, 395, 438, 421, 446, 399, 396, 283,
	422, 322, 368, 295, 297, 317, 324, 326, 328, 329,
	377, 378, 390, 409, 423, 424, 425, 321, 305, 404,
	306, 339, 307, 284, 313, 311, 314, 411, 315, 286,
	391, 429, 0, 334, 400, 364, 287, 363, 392, 428,
	427, 296, 454, 460, 461, 550, 0, 466, 631, 632,
	633, 475, 0, 0, 480, 481, 482, 484, 485, 486,
	487, 551, 568, 535, 505, 468, 559, 502, 506, 507,
	571, 0, 0, 0, 459, 353, 354, 0, 332, 280,
	281, 626, 318, 383, 573, 606, 607, 498, 0, 560,
	499, 508, 310, 532, 544, 543, 379, 458, 0, 555,
	558, 488, 625, 0, 552, 567, 629, 566, 622, 389,
	0, 408, 564, 511, 0, 556, 530, 0, 557, 526,
	561, 0, 500, 0, 415, 440, 452, 469, 472, 501,
	586, 587, 588, 285, 471, 590, 591, 592, 593, 594,
	595, 596, 589, 443, 533, 510, 536, 451, 513, 512,
	0, 0, 547, 467, 548, 549, 373, 374, 375, 376,
	336, 574, 303, 470, 398, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 537, 634, 0,
	597, 598, 0, 0, 464, 465, 331, 338, 483, 340,
	302, 388, 333, 449, 347, 0, 476, 541, 477, 600,
	603, 601, 602, 380, 343, 344, 412, 348, 358, 401,
	448, 386, 406, 300, 439, 413, 362, 527, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 581, 580, 579, 578,
	577, 576, 575, 0, 0, 524, 426, 312, 274, 308,
	309, 316, 623, 620, 430, 624, 0, 282, 504, 356,
	0, 397, 330, 569, 570, 0, 0, 230, 231, 232,
	233, 234, 235, 236, 237, 275, 238, 239, 240, 241,
	242, 243, 244, 247, 248, 249, 250, 251, 252, 253,
	254, 572, 245, 246, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 0, 0,
	0, 276, 277, 278, 279, 0, 0, 270, 271, 272,
	273, 0, 0, 0, 455, 456, 457, 479, 0, 441,
	503, 621, 0, 0, 0, 0, 0, 0, 0, 553,
	565, 599, 0, 609, 610, 612, 614, 613, 616, 418,
	0, 0, 627, 494, 495, 628, 605, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 0, 545, 496, 414, 369,
	563, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3677, 0,
	217, 0, 0, 0, 0, 0, 0, 298, 218, 491,
	611, 493, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	0, 434, 462, 319, 453, 0, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 478, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 0, 608, 0, 447, 0, 0,
	0, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 463, 0, 405, 387, 630, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	318, 383, 573, 606, 607, 498, 0, 560, 499, 508,
	310, 532, 544, 543, 379, 458, 0, 555, 558, 488,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 443, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 467, 548, 549, 373, 374, 375, 376, 336, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 230, 231, 232, 233, 234,
	235, 236, 237, 275, 238, 239, 240, 241, 242, 243,
	244, 247, 248, 249, 250, 251, 252, 253, 254, 572,
	245, 246, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 0, 0, 0, 276,
	277, 278, 279, 0, 0, 270, 271, 272, 273, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 613, 616, 418, 0, 0,
	627, 494, 495, 628, 605, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 0, 545, 496, 414, 369, 563, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 298, 218, 491, 611, 493,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 0, 434,
	462, 319, 453, 0, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	478, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 0, 608, 0, 447, 0, 0, 0, 3595,
	0, 0, 419, 0, 0, 352, 0, 0, 0, 463,
	0, 405, 387, 630, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 631, 632, 633, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 626, 318, 383,
	573, 606, 607, 498, 0, 560, 499, 508, 310, 532,
	544, 543, 379, 458, 0, 555, 558, 488, 625, 0,
	552, 567, 629, 566, 622, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 443,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 467,
	548, 549, 373, 374, 375, 376, 336, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 634, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 623, 620,
	430, 624, 0, 282, 504, 356, 0, 397, 330, 569,
	570, 0, 0, 230, 231, 232, 233, 234, 235, 236,
	237, 275, 238, 239, 240, 241, 242, 243, 244, 247,
	248, 249, 250, 251, 252, 253, 254, 572, 245, 246,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 0, 0, 0, 276, 277, 278,
	279, 0, 0, 270, 271, 272, 273, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 621, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 613, 616, 418, 0, 0, 627, 494,
	495, 628, 605, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 0, 545, 496, 414, 369, 563, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 3112,
	0, 0, 0, 298, 218, 491, 611, 493, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 0, 434, 462, 319,
	453, 0, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 478, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 0,
	0, 608, 0, 447, 0, 0, 0, 0, 0, 0,
	419, 0, 0, 352, 0, 0, 0, 463, 0, 405,
	387, 630, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 631, 632, 633, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 626, 318, 383, 573, 606,
	607, 498, 0, 560, 499, 508, 310, 532, 544, 543,
	379, 458, 0, 555, 558, 488, 625, 0, 552, 567,
	629, 566, 622, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 443, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 467, 548, 549,
	373, 374, 375, 376, 336, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 634, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 623, 620, 430, 624,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 230, 231, 232, 233, 234, 235, 236, 237, 275,
	238, 239, 240, 241, 242, 243, 244, 247, 248, 249,
	250, 251, 252, 253, 254, 572, 245, 246, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 0, 0, 0, 276, 277, 278, 279, 0,
	0, 270, 271, 272, 273, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 621, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 613, 616, 418, 0, 0, 627, 494, 495, 628,
	605, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 0,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 0, 0, 0, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 0,
	445, 292, 0, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 608,
	0, 447, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 463, 0, 405, 387, 630,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 399,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	631, 632, 633, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 626, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 625, 0, 552, 567, 629, 566,
	622, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 467, 548, 549, 373, 374,
	375, 376, 336, 574, 303, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	634, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 380, 343, 344, 412, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 362, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 623, 620, 430, 624, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 621, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 0, 0, 627, 494, 495, 628, 605, 385,
	0, 509, 542, 531, 615, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 325, 0, 0, 355,
	546, 528, 538, 529, 514, 515, 516, 523, 335, 517,
	518, 519, 489, 520, 490, 521, 522, 0, 545, 496,
	414, 369, 563, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1991,
	0, 0, 217, 0, 0, 0, 0, 0, 0, 298,
	218, 491, 611, 493, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 420, 437, 299,
	410, 450, 304, 417, 294, 384, 407, 0, 0, 290,
	435, 416, 366, 345, 346, 289, 0, 402, 323, 337,
	320, 382, 0, 434, 462, 319, 453, 0, 445, 292,
	0, 444, 381, 431, 436, 367, 361, 0, 291, 433,
	365, 360, 349, 327, 478, 350, 351, 341, 393, 359,
	394, 342, 371, 370, 372, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 0, 0, 608, 0, 447,
	0, 0, 0, 0, 0, 0, 419, 0, 0, 352,
	0, 0, 0, 463, 0, 405, 387, 630, 0, 0,
	403, 357, 432, 395, 438, 421, 446, 399, 396, 283,
	422, 322, 368, 295, 297, 317, 324, 326, 328, 329,
	377, 378, 390, 409, 423, 424, 425, 321, 305, 404,
	306, 339, 307, 284, 313, 311, 314, 411, 315, 286,
	391, 429, 0, 334, 400, 364, 287, 363, 392, 428,
	427, 296, 454, 460, 461, 550, 0, 466, 631, 632,
	633, 475, 0, 0, 480, 481, 482, 484, 485, 486,
	487, 551, 568, 535, 505, 468, 559, 502, 506, 507,
	571, 0, 0, 0, 459, 353, 354, 0, 332, 280,
	281, 626, 318, 383, 573, 606, 607, 498, 0, 560,
	499, 508, 310, 532, 544, 543, 379, 458, 0, 555,
	558, 488, 625, 0, 552, 567, 629, 566, 622, 389,
	0, 408, 564, 511, 0, 556, 530, 0, 557, 526,
	561, 0, 500, 0, 415, 440, 452, 469, 472, 501,
	586, 587, 588, 285, 471, 590, 591, 592, 593, 594,
	595, 596, 589, 443, 533, 510, 536, 451, 513, 512,
	0, 0, 547, 467, 548, 549, 373, 374, 375, 376,
	336, 574, 303, 470, 398, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 537, 634, 0,
	597, 598, 0, 0, 464, 465, 331, 338, 483, 340,
	302, 388, 333, 449, 347, 0, 476, 541, 477, 600,
	603, 601, 602, 380, 343, 344, 412, 348, 358, 401,
	448, 386, 406, 300, 439, 413, 362, 527, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 581, 580, 579, 578,
	577, 576, 575, 0, 0, 524, 426, 312, 274, 308,
	309, 316, 623, 620, 430, 624, 0, 282, 504, 356,
	0, 397, 330, 569, 570, 0, 0, 230, 231, 232,
	233, 234, 235, 236, 237, 275, 238, 239, 240, 241,
	242, 243, 244, 247, 248, 249, 250, 251, 252, 253,
	254, 572, 245, 246, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 0, 0,
	0, 276, 277, 278, 279, 0, 0, 270, 271, 272,
	273, 0, 0, 0, 455, 456, 457, 479, 0, 441,
	503, 621, 0, 0, 0, 0, 0, 0, 0, 553,
	565, 599, 0, 609, 610, 612, 614, 613, 616, 418,
	0, 0, 627, 494, 495, 628, 605, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 3317, 0, 0, 0,
	0, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 0, 545, 496, 414, 369,
	563, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 298, 218, 491,
	611, 493, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	0, 434, 462, 319, 453, 0, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 478, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 0, 608, 0, 447, 0, 0,
	0, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 463, 0, 405, 387, 630, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	318, 383, 573, 606, 607, 498, 0, 560, 499, 508,
	310, 532, 544, 543, 379, 458, 0, 555, 558, 488,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 443, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 467, 548, 549, 373, 374, 375, 376, 336, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 230, 231, 232, 233, 234,
	235, 236, 237, 275, 238, 239, 240, 241, 242, 243,
	244, 247, 248, 249, 250, 251, 252, 253, 254, 572,
	245, 246, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 0, 0, 0, 276,
	277, 278, 279, 0, 0, 270, 271, 272, 273, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 613, 616, 418, 0, 0,
	627, 494, 495, 628, 605, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 0, 545, 496, 414, 369, 563, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 298, 218, 491, 611, 493,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3233, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 0, 434,
	462, 319, 453, 0, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	478, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 0, 608, 0, 447, 0, 0, 0, 0,
	0, 0, 419, 0, 0, 352, 0, 0, 0, 463,
	0, 405, 387, 630, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 631, 632, 633, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 626, 318, 383,
	573, 606, 607, 498, 0, 560, 499, 508, 310, 532,
	544, 543, 379, 458, 0, 555, 558, 488, 625, 0,
	552, 567, 629, 566, 622, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 443,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 467,
	548, 549, 373, 374, 375, 376, 336, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 634, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 623, 620,
	430, 624, 0, 282, 504, 356, 0, 397, 330, 569,
	570, 0, 0, 230, 231, 232, 233, 234, 235, 236,
	237, 275, 238, 239, 240, 241, 242, 243, 244, 247,
	248, 249, 250, 251, 252, 253, 254, 572, 245, 246,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 0, 0, 0, 276, 277, 278,
	279, 0, 0, 270, 271, 272, 273, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 621, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 613, 616, 418, 0, 0, 627, 494,
	495, 628, 605, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 0, 545, 496, 414, 369, 563, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 0,
	0, 0, 0, 298, 218, 491, 611, 493, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2974, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 0, 434, 462, 319,
	453, 0, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 478, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 0,
	0, 608, 0, 447, 0, 0, 0, 0, 0, 0,
	419, 0, 0, 352, 0, 0, 0, 463, 0, 405,
	387, 630, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 631, 632, 633, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 626, 318, 383, 573, 606,
	607, 498, 0, 560, 499, 508, 310, 532, 544, 543,
	379, 458, 0, 555, 558, 488, 625, 0, 552, 567,
	629, 566, 622, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 443, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 467, 548, 549,
	373, 374, 375, 376, 336, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 634, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 623, 620, 430, 624,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 230, 231, 232, 233, 234, 235, 236, 237, 275,
	238, 239, 240, 241, 242, 243, 244, 247, 248, 249,
	250, 251, 252, 253, 254, 572, 245, 246, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 0, 0, 0, 276, 277, 278, 279, 0,
	0, 270, 271, 272, 273, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 621, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 613, 616, 418, 0, 0, 627, 494, 495, 628,
	605, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 0,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 0, 1491, 0, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 0,
	445, 292, 0, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 608,
	0, 447, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 463, 0, 405, 387, 630,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 399,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	631, 632, 633, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 626, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 625, 0, 552, 567, 629, 566,
	622, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 467, 548, 549, 373, 374,
	375, 376, 336, 574, 303, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	634, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 380, 343, 344, 412, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 362, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 623, 620, 430, 624, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 621, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 0, 0, 627, 494, 495, 628, 605, 385,
	0, 509, 542, 531, 615, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 325, 0, 0, 355,
	546, 528, 538, 529, 514, 515, 516, 523, 335, 517,
	518, 519, 489, 520, 490, 521, 522, 0, 545, 496,
	414, 369, 563, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 2439, 0, 0, 0, 298,
	218, 491, 611, 493, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 420, 437, 299,
	410, 450, 304, 417, 294, 384, 407, 0, 0, 290,
	435, 416, 366, 345, 346, 289, 0, 402, 323, 337,
	320, 382, 0, 434, 462, 319, 453, 0, 445, 292,
	0, 444, 381, 431, 436, 367, 361, 0, 291, 433,
	365, 360, 349, 327, 478, 350, 351, 341, 393, 359,
	394, 342, 371, 370, 372, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 0, 0, 608, 0, 447,
	0, 0, 0, 0, 0, 0, 419, 0, 0, 352,
	0, 0, 0, 463, 0, 405, 387, 630, 0, 0,
	403, 357, 432, 395, 438, 421, 446, 399, 396, 283,
	422, 322, 368, 295, 297, 317, 324, 326, 328, 329,
	377, 378, 390, 409, 423, 424, 425, 321, 305, 404,
	306, 339, 307, 284, 313, 311, 314, 411, 315, 286,
	391, 429, 0, 334, 400, 364, 287, 363, 392, 428,
	427, 296, 454, 460, 461, 550, 0, 466, 631, 632,
	633, 475, 0, 0, 480, 481, 482, 484, 485, 486,
	487, 551, 568, 535, 505, 468, 559, 502, 506, 507,
	571, 0, 0, 0, 459, 353, 354, 0, 332, 280,
	281, 626, 318, 383, 573, 606, 607, 498, 0, 560,
	499, 508, 310, 532, 544, 543, 379, 458, 0, 555,
	558, 488, 625, 0, 552, 567, 629, 566, 622, 389,
	0, 408, 564, 511, 0, 556, 530, 0, 557, 526,
	561, 0, 500, 0, 415, 440, 452, 469, 472, 501,
	586, 587, 588, 285, 471, 590, 591, 592, 593, 594,
	595, 596, 589, 443, 533, 510, 536, 451, 513, 512,
	0, 0, 547, 467, 548, 549, 373, 374, 375, 376,
	336, 574, 303, 470, 398, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 537, 634, 0,
	597, 598, 0, 0, 464, 465, 331, 338, 483, 340,
	302, 388, 333, 449, 347, 0, 476, 541, 477, 600,
	603, 601, 602, 380, 343, 344, 412, 348, 358, 401,
	448, 386, 406, 300, 439, 413, 362, 527, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 581, 580, 579, 578,
	577, 576, 575, 0, 0, 524, 426, 312, 274, 308,
	309, 316, 623, 620, 430, 624, 0, 282, 504, 356,
	0, 397, 330, 569, 570, 0, 0, 230, 231, 232,
	233, 234, 235, 236, 237, 275, 238, 239, 240, 241,
	242, 243, 244, 247, 248, 249, 250, 251, 252, 253,
	254, 572, 245, 246, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 0, 0,
	0, 276, 277, 278, 279, 0, 0, 270, 271, 272,
	273, 0, 0, 0, 455, 456, 457, 479, 0, 441,
	503, 621, 0, 0, 0, 0, 0, 0, 0, 553,
	565, 599, 0, 609, 610, 612, 614, 613, 616, 418,
	0, 0, 627, 494, 495, 628, 605, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 2795, 0, 0, 0,
	0, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 0, 545, 496, 414, 369,
	563, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 298, 218, 491,
	611, 493, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	0, 434, 462, 319, 453, 0, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 478, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 0, 608, 0, 447, 0, 0,
	0, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 463, 0, 405, 387, 630, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	318, 383, 573, 606, 607, 498, 0, 560, 499, 508,
	310, 532, 544, 543, 379, 458, 0, 555, 558, 488,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 443, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 467, 548, 549, 373, 374, 375, 376, 336, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 230, 231, 232, 233, 234,
	235, 236, 237, 275, 238, 239, 240, 241, 242, 243,
	244, 247, 248, 249, 250, 251, 252, 253, 254, 572,
	245, 246, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 0, 0, 0, 276,
	277, 278, 279, 0, 0, 270, 271, 272, 273, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 613, 616, 418, 0, 0,
	627, 494, 495, 628, 605, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 0, 545, 496, 414, 369, 563, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 298, 218, 491, 611, 493,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 0, 434,
	462, 319, 453, 0, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	478, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 0, 608, 0, 447, 0, 0, 0, 0,
	0, 0, 419, 0, 0, 352, 0, 0, 0, 463,
	0, 405, 387, 630, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 631, 632, 633, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 626, 318, 383,
	573, 606, 607, 498, 0, 560, 499, 508, 310, 532,
	544, 543, 379, 458, 0, 555, 558, 488, 625, 0,
	552, 567, 629, 566, 622, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 443,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 467,
	548, 549, 373, 374, 375, 376, 336, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 634, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 623, 620,
	430, 624, 0, 282, 504, 356, 0, 397, 330, 569,
	570, 0, 0, 230, 231, 232, 233, 234, 235, 236,
	237, 275, 238, 239, 240, 241, 242, 243, 244, 247,
	248, 249, 250, 251, 252, 253, 254, 572, 245, 246,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 0, 0, 0, 276, 277, 278,
	279, 0, 0, 270, 271, 272, 273, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 621, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 613, 616, 418, 0, 0, 627, 494,
	495, 628, 605, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 0, 545, 496, 414, 369, 563, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 2556,
	0, 0, 0, 298, 218, 491, 611, 493, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 0, 434, 462, 319,
	453, 0, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 478, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 0,
	0, 608, 0, 447, 0, 0, 0, 0, 0, 0,
	419, 0, 0, 352, 0, 0, 0, 463, 0, 405,
	387, 630, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 631, 632, 633, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 626, 318, 383, 573, 606,
	607, 498, 0, 560, 499, 508, 310, 532, 544, 543,
	379, 458, 0, 555, 558, 488, 625, 0, 552, 567,
	629, 566, 622, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 443, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 467, 548, 549,
	373, 374, 375, 376, 336, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 634, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 623, 620, 430, 624,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 230, 231, 232, 233, 234, 235, 236, 237, 275,
	238, 239, 240, 241, 242, 243, 244, 247, 248, 249,
	250, 251, 252, 253, 254, 572, 245, 246, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 0, 0, 0, 276, 277, 278, 279, 0,
	0, 270, 271, 272, 273, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 621, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 613, 616, 418, 0, 0, 627, 494, 495, 628,
	605, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 0,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 0, 0, 0, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2517, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 0,
	445, 292, 0, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 608,
	0, 447, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 463, 0, 405, 387, 630,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 399,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	631, 632, 633, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 626, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 625, 0, 552, 567, 629, 566,
	622, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 467, 548, 549, 373, 374,
	375, 376, 336, 574, 303, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	634, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 380, 343, 344, 412, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 362, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 623, 620, 430, 624, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 621, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 0, 0, 627, 494, 495, 628, 605, 385,
	0, 509, 542, 531, 615, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 325, 0, 0, 355,
	546, 528, 538, 529, 514, 515, 516, 523, 335, 517,
	518, 519, 489, 520, 490, 521, 522, 0, 545, 496,
	414, 369, 563, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 2515, 0, 0, 0, 298,
	218, 491, 611, 493, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 420, 437, 299,
	410, 450, 304, 417, 294, 384, 407, 0, 0, 290,
	435, 416, 366, 345, 346, 289, 0, 402, 323, 337,
	320, 382, 0, 434, 462, 319, 453, 0, 445, 292,
	0, 444, 381, 431, 436, 367, 361, 0, 291, 433,
	365, 360, 349, 327, 478, 350, 351, 341, 393, 359,
	394, 342, 371, 370, 372, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 0, 0, 608, 0, 447,
	0, 0, 0, 0, 0, 0, 419, 0, 0, 352,
	0, 0, 0, 463, 0, 405, 387, 630, 0, 0,
	403, 357, 432, 395, 438, 421, 446, 399, 396, 283,
	422, 322, 368, 295, 297, 317, 324, 326, 328, 329,
	377, 378, 390, 409, 423, 424, 425, 321, 305, 404,
	306, 339, 307, 284, 313, 311, 314, 411, 315, 286,
	391, 429, 0, 334, 400, 364, 287, 363, 392, 428,
	427, 296, 454, 460, 461, 550, 0, 466, 631, 632,
	633, 475, 0, 0, 480, 481, 482, 484, 485, 486,
	487, 551, 568, 535, 505, 468, 559, 502, 506, 507,
	571, 0, 0, 0, 459, 353, 354, 0, 332, 280,
	281, 626, 318, 383, 573, 606, 607, 498, 0, 560,
	499, 508, 310, 532, 544, 543, 379, 458, 0, 555,
	558, 488, 625, 0, 552, 567, 629, 566, 622, 389,
	0, 408, 564, 511, 0, 556, 530, 0, 557, 526,
	561, 0, 500, 0, 415, 440, 452, 469, 472, 501,
	586, 587, 588, 285, 471, 590, 591, 592, 593, 594,
	595, 596, 589, 443, 533, 510, 536, 451, 513, 512,
	0, 0, 547, 467, 548, 549, 373, 374, 375, 376,
	336, 574, 303, 470, 398, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 537, 634, 0,
	597, 598, 0, 0, 464, 465, 331, 338, 483, 340,
	302, 388, 333, 449, 347, 0, 476, 541, 477, 600,
	603, 601, 602, 380, 343, 344, 412, 348, 358, 401,
	448, 386, 406, 300, 439, 413, 362, 527, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 581, 580, 579, 578,
	577, 576, 575, 0, 0, 524, 426, 312, 274, 308,
	309, 316, 623, 620, 430, 624, 0, 282, 504, 356,
	0, 397, 330, 569, 570, 0, 0, 230, 231, 232,
	233, 234, 235, 236, 237, 275, 238, 239, 240, 241,
	242, 243, 244, 247, 248, 249, 250, 251, 252, 253,
	254, 572, 245, 246, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 0, 0,
	0, 276, 277, 278, 279, 0, 0, 270, 271, 272,
	273, 0, 0, 0, 455, 456, 457, 479, 0, 441,
	503, 621, 0, 0, 0, 0, 0, 0, 0, 553,
	565, 599, 0, 609, 610, 612, 614, 613, 616, 418,
	0, 2295, 627, 494, 495, 628, 605, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 0, 545, 496, 414, 369,
	563, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 298, 218, 491,
	611, 493, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	0, 434, 462, 319, 453, 0, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 478, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 0, 608, 0, 447, 0, 0,
	0, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 463, 0, 405, 387, 630, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	318, 383, 573, 606, 607, 498, 0, 560, 499, 508,
	310, 532, 544, 543, 379, 458, 0, 555, 558, 488,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 443, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 467, 548, 549, 373, 374, 375, 376, 336, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 230, 231, 232, 233, 234,
	235, 236, 237, 275, 238, 239, 240, 241, 242, 243,
	244, 247, 248, 249, 250, 251, 252, 253, 254, 572,
	245, 246, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 0, 0, 0, 276,
	277, 278, 279, 0, 0, 270, 271, 272, 273, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 613, 616, 418, 0, 0,
	627, 494, 495, 628, 605, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 0, 545, 496, 414, 369, 563, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 0, 1847, 0, 0, 298, 218, 491, 611, 493,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 0, 434,
	462, 319, 453, 0, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	478, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 0, 608, 0, 447, 0, 0, 0, 0,
	0, 0, 419, 0, 0, 352, 0, 0, 0, 463,
	0, 405, 387, 630, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 631, 632, 633, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 626, 318, 383,
	573, 606, 607, 498, 0, 560, 499, 508, 310, 532,
	544, 543, 379, 458, 0, 555, 558, 488, 625, 0,
	552, 567, 629, 566, 622, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 443,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 467,
	548, 549, 373, 374, 375, 376, 336, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 634, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 623, 620,
	430, 624, 0, 282, 504, 356, 0, 397, 330, 569,
	570, 0, 0, 230, 231, 232, 233, 234, 235, 236,
	237, 275, 238, 239, 240, 241, 242, 243, 244, 247,
	248, 249, 250, 251, 252, 253, 254, 572, 245, 246,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 0, 0, 0, 276, 277, 278,
	279, 0, 0, 270, 271, 272, 273, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 621, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 613, 616, 418, 0, 0, 627, 494,
	495, 628, 605, 385, 0, 509, 542, 531, 615, 497,
	0, 1976, 0, 0, 0, 0, 0, 0, 0, 0,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 0, 545, 496, 414, 369, 563, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 0,
	0, 0, 0, 298, 218, 491, 611, 493, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 0, 434, 462, 319,
	453, 0, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 478, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 0,
	0, 608, 0, 447, 0, 0, 0, 0, 0, 0,
	419, 0, 0, 352, 0, 0, 0, 463, 0, 405,
	387, 630, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 631, 632, 633, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 626, 318, 383, 573, 606,
	607, 498, 0, 560, 499, 508, 310, 532, 544, 543,
	379, 458, 0, 555, 558, 488, 625, 0, 552, 567,
	629, 566, 622, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 443, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 467, 548, 549,
	373, 374, 375, 376, 336, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 634, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 623, 620, 430, 624,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 230, 231, 232, 233, 234, 235, 236, 237, 275,
	238, 239, 240, 241, 242, 243, 244, 247, 248, 249,
	250, 251, 252, 253, 254, 572, 245, 246, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 0, 0, 0, 276, 277, 278, 279, 0,
	0, 270, 271, 272, 273, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 621, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 613, 616, 418, 0, 0, 627, 494, 495, 628,
	605, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 0,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 0, 1491, 0, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 0,
	445, 292, 0, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 608,
	0, 447, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 463, 0, 405, 387, 630,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 1881,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	631, 632, 633, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 626, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 625, 0, 552, 567, 629, 566,
	622, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 467, 548, 549, 373, 374,
	375, 376, 336, 574, 303, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	634, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 380, 343, 344, 412, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 362, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 623, 620, 430, 624, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 621, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 0, 0, 627, 494, 495, 628, 605, 385,
	0, 509, 542, 531, 615, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 325, 0, 0, 355,
	546, 528, 538, 529, 514, 515, 516, 523, 335, 517,
	518, 519, 489, 520, 490, 521, 522, 0, 545, 496,
	414, 369, 563, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 0, 0, 0, 0, 298,
	218, 491, 611, 493, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 420, 437, 299,
	410, 450, 304, 417, 294, 384, 407, 0, 0, 290,
	435, 416, 366, 345, 346, 289, 0, 402, 323, 337,
	320, 382, 0, 434, 462, 319, 453, 0, 445, 292,
	0, 444, 381, 431, 436, 367, 361, 0, 291, 433,
	365, 360, 349, 327, 478, 350, 351, 341, 393, 359,
	394, 342, 371, 370, 372, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 0, 0, 608, 0, 447,
	0, 0, 1520, 0, 0, 0, 419, 0, 0, 352,
	0, 0, 0, 463, 0, 405, 387, 630, 0, 0,
	403, 357, 432, 395, 438, 421, 446, 399, 396, 283,
	422, 322, 368, 295, 297, 317, 324, 326, 328, 329,
	377, 378, 390, 409, 423, 424, 425, 321, 305, 404,
	306, 339, 307, 284, 313, 311, 314, 411, 315, 286,
	391, 429, 0, 334, 400, 364, 287, 363, 392, 428,
	427, 296, 454, 460, 461, 550, 0, 466, 631, 632,
	633, 475, 0, 0, 480, 481, 482, 484, 485, 486,
	487, 551, 568, 535, 505, 468, 559, 502, 506, 507,
	571, 0, 0, 0, 459, 353, 354, 0, 332, 280,
	281, 626, 318, 383, 573, 606, 607, 498, 0, 560,
	499, 508, 310, 532, 544, 543, 379, 458, 0, 555,
	558, 488, 625, 0, 552, 567, 629, 566, 622, 389,
	0, 408, 564, 511, 0, 556, 530, 0, 557, 526,
	561, 0, 500, 0, 415, 440, 452, 469, 472, 501,
	586, 587, 588, 285, 471, 590, 591, 592, 593, 594,
	595, 596, 589, 443, 533, 510, 536, 451, 513, 512,
	0, 0, 547, 467, 548, 549, 373, 374, 375, 376,
	336, 574, 303, 470, 398, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 537, 634, 0,
	597, 598, 0, 0, 464, 465, 331, 338, 483, 340,
	302, 388, 333, 449, 347, 0, 476, 541, 477, 600,
	603, 601, 602, 380, 343, 344, 412, 348, 358, 401,
	448, 386, 406, 300, 439, 413, 362, 527, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 581, 580, 579, 578,
	577, 576, 575, 0, 0, 524, 426, 312, 274, 308,
	309, 316, 623, 620, 430, 624, 0, 282, 504, 356,
	0, 397, 330, 569, 570, 0, 0, 230, 231, 232,
	233, 234, 235, 236, 237, 275, 238, 239, 240, 241,
	242, 243, 244, 247, 248, 249, 250, 251, 252, 253,
	254, 572, 245, 246, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 0, 0,
	0, 276, 277, 278, 279, 0, 0, 270, 271, 272,
	273, 0, 0, 0, 455, 456, 457, 479, 0, 441,
	503, 621, 0, 0, 0, 0, 0, 0, 0, 553,
	565, 599, 0, 609, 610, 612, 614, 613, 616, 418,
	0, 0, 627, 494, 495, 628, 605, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 641, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 0, 545, 496, 414, 369,
	563, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 298, 218, 491,
	611, 493, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	0, 434, 462, 319, 453, 0, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 478, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 0, 608, 0, 447, 0, 0,
	0, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 463, 0, 405, 387, 630, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	318, 383, 573, 606, 607, 498, 0, 560, 499, 508,
	310, 532, 544, 543, 379, 458, 0, 555, 558, 488,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 443, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 467, 548, 549, 373, 374, 375, 376, 336, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 230, 231, 232, 233, 234,
	235, 236, 237, 275, 238, 239, 240, 241, 242, 243,
	244, 247, 248, 249, 250, 251, 252, 253, 254, 572,
	245, 246, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 0, 0, 0, 276,
	277, 278, 279, 0, 0, 270, 271, 272, 273, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 613, 616, 418, 0, 0,
	627, 494, 495, 628, 605, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 0, 545, 496, 414, 369, 563, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 298, 218, 491, 611, 493,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 0, 434,
	462, 319, 453, 0, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	478, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 651, 608, 0, 447, 0, 0, 0, 0,
	0, 0, 419, 0, 0, 352, 0, 0, 0, 463,
	0, 405, 387, 630, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 631, 632, 633, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 626, 318, 383,
	573, 606, 607, 498, 0, 560, 499, 508, 310, 532,
	544, 543, 379, 458, 0, 555, 558, 488, 625, 0,
	552, 567, 629, 566, 622, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 443,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 467,
	548, 549, 373, 374, 375, 376, 336, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 634, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 623, 620,
	430, 624, 0, 282, 504, 356, 0, 397, 330, 569,
	570, 0, 0, 230, 231, 232, 233, 234, 235, 236,
	237, 275, 238, 239, 240, 241, 242, 243, 244, 247,
	248, 249, 250, 251, 252, 253, 254, 572, 245, 246,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 0, 0, 0, 276, 277, 278,
	279, 0, 0, 270, 271, 272, 273, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 621, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 613, 616, 418, 0, 0, 627, 494,
	495, 628, 605, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 0, 545, 496, 414, 369, 563, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 0,
	0, 0, 0, 298, 218, 491, 611, 493, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 0, 434, 462, 319,
	453, 0, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 478, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 0,
	0, 608, 0, 447, 0, 0, 0, 0, 0, 0,
	419, 0, 0, 352, 0, 0, 0, 463, 0, 405,
	387, 630, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 631, 632, 633, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 626, 318, 383, 573, 606,
	607, 498, 0, 560, 499, 508, 310, 532, 544, 543,
	379, 458, 0, 555, 558, 488, 625, 0, 552, 567,
	629, 566, 622, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 443, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 467, 548, 549,
	373, 374, 375, 376, 336, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 634, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 942, 0, 524,
	426, 312, 274, 308, 309, 316, 623, 620, 430, 624,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 230, 231, 232, 233, 234, 235, 236, 237, 275,
	238, 239, 240, 241, 242, 243, 244, 247, 248, 249,
	250, 251, 252, 253, 254, 572, 245, 246, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 0, 0, 0, 276, 277, 278, 279, 0,
	0, 270, 271, 272, 273, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 621, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 613, 616, 418, 0, 0, 627, 494, 495, 628,
	605, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 0,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 0, 0, 0, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 0,
	445, 292, 0, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 608,
	0, 447, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 463, 0, 405, 387, 630,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 399,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	631, 632, 633, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 626, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 625, 0, 552, 567, 629, 566,
	622, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 467, 548, 549, 373, 374,
	375, 376, 336, 574, 303, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	634, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 380, 343, 344, 412, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 362, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 623, 620, 430, 624, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 621, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 0, 0, 627, 494, 495, 628, 605, 385,
	0, 509, 542, 531, 615, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 325, 0, 0, 355,
	546, 528, 538, 529, 514, 515, 516, 523, 335, 517,
	518, 519, 489, 520, 490, 521, 522, 0, 545, 496,
	414, 369, 563, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 0, 0, 0, 0, 298,
	218, 491, 611, 493, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 420, 1470, 299,
	410, 450, 304, 417, 294, 384, 407, 0, 0, 290,
	435, 416, 366, 345, 346, 289, 0, 402, 323, 337,
	320, 382, 0, 434, 462, 319, 453, 0, 445, 292,
	0, 444, 381, 431, 436, 367, 361, 0, 291, 433,
	365, 360, 349, 327, 478, 350, 351, 341, 393, 359,
	394, 342, 371, 370, 372, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 0, 0, 608, 0, 447,
	0, 0, 0, 0, 0, 0, 419, 0, 0, 352,
	0, 0, 0, 463, 0, 405, 387, 630, 0, 0,
	403, 357, 432, 395, 438, 421, 446, 399, 396, 283,
	422, 322, 368, 295, 297, 317, 324, 326, 328, 329,
	377, 378, 390, 409, 423, 424, 425, 321, 305, 404,
	306, 339, 307, 284, 313, 311, 314, 411, 315, 286,
	391, 429, 0, 334, 400, 364, 287, 363, 392, 428,
	427, 296, 454, 460, 461, 550, 0, 466, 631, 632,
	633, 475, 0, 0, 480, 481, 482, 484, 485, 486,
	487, 551, 568, 535, 505, 468, 559, 502, 506, 507,
	571, 0, 0, 0, 459, 353, 354, 0, 332, 280,
	281, 626, 318, 383, 573, 606, 607, 498, 0, 560,
	499, 508, 310, 532, 544, 543, 379, 458, 0, 555,
	558, 488, 625, 0, 552, 567, 629, 566, 622, 389,
	0, 408, 564, 511, 0, 556, 530, 0, 557, 526,
	561, 0, 500, 0, 415, 440, 452, 469, 472, 501,
	586, 587, 588, 285, 471, 590, 591, 592, 593, 594,
	595, 596, 589, 443, 533, 510, 536, 451, 513, 512,
	0, 0, 547, 467, 548, 549, 373, 374, 375, 376,
	336, 574, 303, 470, 398, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 537, 634, 0,
	597, 598, 0, 0, 464, 465, 331, 338, 483, 340,
	302, 388, 333, 449, 347, 0, 476, 541, 477, 600,
	603, 601, 602, 380, 343, 344, 412, 348, 358, 401,
	448, 386, 406, 300, 439, 413, 362, 527, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 581, 580, 579, 578,
	577, 576, 575, 0, 0, 524, 426, 312, 274, 308,
	309, 316, 623, 620, 430, 624, 0, 282, 504, 356,
	0, 397, 330, 569, 570, 0, 0, 230, 231, 232,
	233, 234, 235, 236, 237, 275, 238, 239, 240, 241,
	242, 243, 244, 247, 248, 249, 250, 251, 252, 253,
	254, 572, 245, 246, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 0, 0,
	0, 276, 277, 278, 279, 0, 0, 270, 271, 272,
	273, 0, 0, 0, 455, 456, 457, 479, 0, 441,
	503, 621, 0, 0, 0, 0, 0, 0, 0, 553,
	565, 599, 0, 609, 610, 612, 614, 613, 616, 418,
	0, 0, 627, 494, 495, 628, 605, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 0, 545, 496, 414, 369,
	563, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 298, 218, 491,
	611, 493, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 420, 1468, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	0, 434, 462, 319, 453, 0, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 478, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 0, 608, 0, 447, 0, 0,
	0, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 463, 0, 405, 387, 630, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	318, 383, 573, 606, 607, 498, 0, 560, 499, 508,
	310, 532, 544, 543, 379, 458, 0, 555, 558, 488,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 443, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 467, 548, 549, 373, 374, 375, 376, 336, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 230, 231, 232, 233, 234,
	235, 236, 237, 275, 238, 239, 240, 241, 242, 243,
	244, 247, 248, 249, 250, 251, 252, 253, 254, 572,
	245, 246, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 0, 0, 0, 276,
	277, 278, 279, 0, 0, 270, 271, 272, 273, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 613, 616, 418, 0, 0,
	627, 494, 495, 628, 605, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 0, 545, 496, 414, 369, 563, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 298, 218, 491, 611, 493,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 0, 434,
	462, 319, 453, 0, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	478, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 0, 608, 0, 447, 0, 0, 0, 0,
	0, 0, 419, 0, 0, 352, 0, 0, 0, 463,
	0, 405, 387, 630, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 718, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 631, 632, 633, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 626, 318, 383,
	573, 606, 607, 498, 0, 560, 499, 508, 310, 532,
	544, 543, 379, 458, 0, 555, 558, 488, 625, 0,
	552, 567, 629, 566, 622, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 443,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 467,
	548, 549, 373, 374, 375, 376, 336, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 634, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 623, 620,
	430, 624, 0, 282, 504, 356, 0, 397, 330, 569,
	570, 0, 0, 230, 231, 232, 233, 234, 235, 236,
	237, 275, 238, 239, 240, 241, 242, 243, 244, 247,
	248, 249, 250, 251, 252, 253, 254, 572, 245, 246,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 0, 0, 0, 276, 277, 278,
	279, 0, 0, 270, 271, 272, 273, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 621, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 613, 616, 418, 0, 0, 627, 494,
	495, 628, 605, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 0, 545, 496, 414, 369, 563, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 0,
	0, 0, 0, 298, 218, 491, 611, 493, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 0, 434, 462, 319,
	453, 0, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 478, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 0,
	0, 608, 0, 447, 0, 0, 0, 0, 0, 0,
	419, 0, 0, 352, 0, 0, 0, 463, 0, 405,
	387, 630, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 675, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 631, 632, 633, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 626, 318, 383, 573, 606,
	607, 498, 0, 560, 499, 508, 310, 532, 544, 543,
	379, 458, 0, 555, 558, 488, 625, 0, 552, 567,
	629, 566, 622, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 676, 589, 443, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 467, 548, 549,
	373, 374, 375, 376, 336, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 634, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 623, 620, 430, 624,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 230, 231, 232, 233, 234, 235, 236, 237, 275,
	238, 239, 240, 241, 242, 243, 244, 247, 248, 249,
	250, 251, 252, 253, 254, 572, 245, 246, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 0, 0, 0, 276, 277, 278, 279, 1963,
	0, 270, 271, 272, 273, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 621, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 613, 616, 418, 1966, 0, 627, 494, 495, 628,
	605, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1963, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3683, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1940, 0, 1966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1963, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1940, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1966, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3654, 0, 0, 0, 1956, 0,
	0, 0, 0, 0, 0, 0, 0, 1940, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1944, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1950, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1938, 1972, 0, 0,
	1939, 1941, 1943, 0, 1945, 1946, 1947, 1951, 1952, 1953,
	1955, 1958, 1959, 1960, 0, 1956, 0, 0, 0, 1944,
	0, 1948, 1957, 1949, 0, 0, 0, 0, 0, 0,
	1950, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1938, 1972, 0, 0, 1939, 1941, 1943, 1964, 1945, 1946,
	1947, 1951, 1952, 1953, 1955, 1958, 1959, 1960, 0, 0,
	0, 0, 0, 0, 0, 1948, 1957, 1949, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1944, 0, 0, 0,
	0, 0, 1961, 0, 0, 0, 0, 1950, 0, 0,
	0, 1964, 0, 0, 0, 0, 0, 0, 0, 1937,
	0, 0, 0, 0, 0, 0, 1936, 1938, 1972, 0,
	0, 1939, 1941, 1943, 0, 1945, 1946, 1947, 1951, 1952,
	1953, 1955, 1958, 1959, 1960, 0, 0, 0, 0, 0,
	1954, 0, 1948, 1957, 1949, 0, 1961, 0, 0, 1942,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1937, 0, 0, 0, 0, 0, 0,
	1936, 0, 0, 0, 0, 0, 0, 0, 1964, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1954, 0, 0, 0, 0, 0,
	0, 0, 0, 1942, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1937, 0, 0, 0, 0, 0, 0, 1936, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3523, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1954, 0, 0, 0, 0, 0, 0, 0, 0,
	1942, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3523, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3523,
}

var yyPact = [...]int{
	301, -1000, -1000, -1000, -311, 14464, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 47858, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 441, 47858,
	-309, 29936, 46004, -1000, -1000, 2850, -1000, 46622, 16331, 47858,
	550, 538, 47858, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 965, -1000, 50330, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 890, 4276, 49712,
	11354, -212, -1000, 1555, -15, 2595, 465, -191, -193, 1155,
	1192, 1266, 1266, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 278, 983, 47240, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3850, 228, 964, 983, 21281, 120, 118,
	1555, 483, -93, 251, -1000, 1254, 3899, 207, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11354,
	11354, 14464, -358, 14464, 11354, 47858, 47858, -1000, -1000, -1000,
	-1000, -309, 46622, 890, 4276, 11354, 2595, 465, -191, -193,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -93, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 118, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 4885, -1000, 1716,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2358, 3101, 1714, 2594, 862,
	46004, 47858, -1000, 148, 862, -1000, -1000, -1000, 1555, 3570,
	-1000, 47858, 47858, 213, 1972, -1000, 464, 672, 485, 332,
	1700, -1000, -1000, -1000, -1000, -1000, -1000, 791, 3500, -1000,
	47858, 47858, 3114, 47858, -1000, 2319, 837, -1000, 5213, 3301,
	1424, 986, 3130, -1000, -1000, 3099, -1000, 339, 701, 730,
	923, 434, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 289,
	-1000, 3380, -1000, -1000, 327, -1000, -1000, 314, -1000, -1000,
	-1000, 107, -1000, -1000, -1000, -1000, -1000, -1000, -3, -1000,
	-1000, 1252, 2731, 11354, 2082, -1000, 3932, 1729, -1000, -1000,
	-1000, 7007, 13214, 13214, 13214, 13214, 47858, -1000, -1000, 2934,
	11354, 3098, 3097, 3095, 3092, -1000, -1000, -1000, -1000, -1000,
	-1000, 1697, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2087, -1000, -1000, -1000, 13834, -1000, 3090, 3089, 3078,
	3077, 3076, 3074, 3072, 3071, 3069, 3068, 3066, 3065, 3061,
	3060, 2792, 15703, 3059, 2593, 2591, 3056, 3055, 3049, 2576,
	3048, 3047, 3037, 2792, 2792, 3036, 3035, 3030, 3028, 3027,
	3021, 3020, 3018, 3012, 3005, 3002, 3001, 2999, 2991, 2989,
	2988, 2986, 2985, 2978, 2972, 2971, 2965, 2964, 2958, 2957,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1494, -1000, 2956, 3516, 2854, -1000, 3371,
	3366, 3345, 3342, -260, 2952, 2265, -1000, -1000, 117, 3492,
	47858, -282, 47858, 2574, -100, 2572, -101, -1000, -59, -1000,
	-1000, 1168, -1000, 1067, -1000, 888, 888, 888, 47858, 47858,
	209, 944, 888, 888, 888, 888, 888, 907, 888, 3416,
	963, 959, 956, 948, 888, -41, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1969, 1965, 3198, 1053, -1000, -1000, -1000,
	-1000, 1551, 47858, -1000, 2895, 2570, 1765, 1765, 3459, 3459,
	3404, 846, 844, 841, 1765, 667, -1000, 1897, 1897, 1897,
	1897, 1765, 524, 836, 3425, 3425, 132, 1897, 64, 1765,
	1765, 64, 1765, 1765, -1000, 1907, 271, -267, -1000, -1000,
	-1000, -1000, 1897, 1897, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3385, 3362, 890, 890, 47858, 890, 203, 47858, 890,
	890, 890, 47858, 894, 59, 49094, 48476, 2287, 2319, 810,
	807, 1569, 1909, -1000, 1885, 47858, 47858, 1885, 1885, 24374,
	23756, -1000, 47858, -1000, 3516, 2854, 2787, 1487, 2786, 2854,
	-104, 2559, 890, 890, 890, 890, 890, 303, 890, 890,
	890, 890, 890, 47858, 47858, 45386, 890, 890, 890, 890,
	9487, 9487, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 14464, 2284, 2230, 206, -7, -303, 285, -1000, -1000,
	47858, 3249, 294, -1000, -1000, -1000, 2817, -1000, 2857, 2857,
	2857, 2857, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2857, 2857, 2894, 2951, -1000, -1000, 2856, 2856,
	2856, 2817, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2858, 2858, 2891,
	2891, 2858, 47858, -122, -1000, -1000, 11354, 47858, 3262, 422,
	2950, 862, -1000, -1000, 47858, 178, 423, 3516, 3260, 3425,
	3453, -1000, -1000, 1692, 2260, 2557, -1000, 332, -1000, 412,
	332, 1803, -1000, 1217, -1000, -1000, -1000, -1000, -1000, 47858,
	-3, 494, -1000, -1000, 2534, 2949, -1000, 635, 1282, 1530,
	-1000, 284, 601, 38588, 2319, 38588, 47858, -1000, -1000, -1000,
	-1000, -1000, -1000, 90, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 323, -1000,
	11354, 11354, 11354, 11354, 11354, -1000, 774, 12594, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 13214, 13214, 13214, 13214, 13214,
	13214, 13214, 13214, 13214, 13214, 13214, 13214, 2931, 1951, 13214,
	13214, 13214, 13214, 26846, 1487, 3432, 1565, 318, 1729, 1729,
	1729, 1729, 11354, -1000, 1888, 2731, 11354, 11354, 11354, 11354,
	47858, -1000, -1000, 4478, 11354, 11354, 3653, 11354, 3323, 11354,
	11354, 11354, 2778, 5766, 47858, 11354, -1000, 2772, 2764, -1000,
	-1000, 2051, 11354, -1000, -1000, 11354, -1000, -1000, 11354, 13214,
	11354, -1000, 11354, 11354, 11354, -1000, -1000, 3271, 3323, 3323,
	3323, 1891, 11354, 11354, 3323, 3323, 3323, 1872, 3323, 3323,
	3323, 3323, 3323, 3323, 3323, 3323, 3323, 3323, 2763, 2754,
	2753, 10734, 3425, -212, -1000, 8867, 3260, 3425, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -262, 2948,
	47858, 2555, 2549, -330, 182, 459, 47858, 1166, 400, 2253,
	-107, 2250, 69, 1145, 1072, 1078, -1000, 2548, 1985, 47858,
	47858, 3318, -1000, 2945, 47858, 888, 888, 888, -1000, 43532,
	38588, 47858, 47858, 2319, 47858, 47858, 47858, 888, 888, 888,
	888, 47858, -1000, 3221, 38588, 3202, 894, -1000, 47858, 1551,
	3317, 47858, 400, 3459, 13214, 13214, -1000, -1000, 11354, -1000,
	44768, 1897, 1765, 1765, -1000, -1000, 47858, -1000, -1000, -1000,
	1897, 47858, 1897, 1897, 3459, 1897, -1000, -1000, -1000, 1765,
	1765, -1000, -1000, 11354, -1000, -1000, 1897, 1897, -1000, -1000,
	3459, 47858, 62, 3459, 3459, 108, -1000, -1000, -1000, 1765,
	47858, 47858, 888, 47858, -1000, 47858, 47858, -1000, -1000, 47858,
	47858, 4341, 47858, 43532, 44150, 3360, -1000, 38588, 47858, 47858,
	931, 36116, -1000, 1499, -1000, 21, -1000, 31, 59, 1885,
	59, 1885, 928, -1000, 608, 688, 22520, 591, 38588, 6386,
	-1000, -1000, 1885, 1885, 6386, 6386, 1734, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1550, -1000, 259, 3425, -1000, -1000,
	-1000, -1000, -1000, 2238, 400, 47858, 43532, 38588, 2319, 47858,
	890, 47858, 47858, 47858, 47858, 47858, -1000, 2944, 1690, -1000,
	3300, 47858, 47858, 47858, 47858, 1510, -1000, -1000, 19421, 1680,
	1510, -1000, 1991, -1000, 11354, 14464, -236, 11354, 14464, 14464,
	11354, 14464, -1000, 11354, 279, -1000, -1000, -1000, -1000, 2237,
	-1000, 2236, -1000, -1000, -1000, -1000, -1000, 2547, 2547, -1000,
	2229, -1000, -1000, -1000, -1000, 2228, -1000, -1000, 2225, -1000,
	-1000, -1000, -1000, -150, 2750, 1252, -1000, 2544, 3125, -213,
	-1000, 20663, 47858, 47858, 422, -335, 1964, 1962, 1956, -1000,
	-213, -1000, 20042, 47858, 3425, -1000, -216, 3260, 11354, 47858,
	-1000, 3402, -1000, -1000, 332, -1000, 391, 439, -1000, -1000,
	-1000, -1000, -1000, -1000, 1677, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 433, -95, -96, 1541, -1000,
	47858, -1000, -1000, 284, 38588, 40442, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 255, -1000, -1000, 191, -1000, 927, 248,
	1795, -1000, -1000, 214, 210, 205, 1028, 2731, -1000, 2003,
	2003, 2006, -1000, 718, -1000, -1000, -1000, -1000, 2934, -1000,
	-1000, -1000, 2415, 3659, -1000, 1840, 1840, 1719, 1719, 1719,
	1719, 1719, 2025, 2025, -1000, -1000, -1000, 7007, 2931, 13214,
	13214, 13214, 13214, 985, 985, 3358, 3174, -1000, -1000, -1000,
	-1000, 11354, 189, 1988, -1000, 11354, 2556, 1442, 2539, 1559,
	1666, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2747, 2746, 2624, 3491, 2745, 11354, -1000, -1000, 1792,
	1791, 1789, -1000, 2565, 10114, -1000, -1000, -1000, 2743, 1638,
	2739, -1000, -1000, -1000, 2736, 1770, 1340, 2735, 1660, 2733,
	2725, 2723, 2720, 1539, 11354, 11354, 11354, 11354, 2716, 1758,
	1755, 11354, 11354, 11354, 11354, 2703, 11354, 11354, 11354, 11354,
	11354, 11354, 11354, 11354, 11354, 11354, 152, 152, 152, 1536,
	1534, -1000, -1000, 1754, -1000, 2731, -1000, -1000, 3260, -1000,
	2929, 2210, 1533, -1000, -1000, -301, 2479, 47858, 47858, 181,
	47858, 2540, -283, 47858, -1000, -1000, 2530, -1000, 2528, -1000,
	-1000, -1000, 1118, 1061, 1148, 2524, 3267, 3398, 934, 47858,
	1268, 2928, 47858, 47858, 47858, 287, -1000, -1000, 1374, -1000,
	248, -27, 565, 1295, 3113, 3476, -124, 47858, 47858, 47858,
	47858, 3316, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	42914, -1000, 2917, 1751, -1000, -1000, -1000, 1729, 1729, 2731,
	3112, 47858, 47858, 3459, 3459, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1897, 3459, 3459, 1564, 1765, 1897, -1000, -1000,
	1897, -335, -1000, 1897, -1000, -335, 1637, -335, 47858, -1000,
	-1000, -1000, 3311, 2895, 1528, -1000, -1000, -1000, 3452, 1615,
	884, 884, 1105, 726, 3451, 18185, -1000, 1857, 1205, 915,
	3234, 337, -1000, 1857, -146, 866, 1857, 1857, 1857, 1857,
	1857, 1857, 1857, 777, 776, 1857, 1857, 1857, 1857, 1857,
	1857, 1857, 1857, 1857, 1857, 1857, 1176, 1857, 1857, 1857,
	1857, 1857, -1000, 1857, 2916, 527, -1000, -1000, -1000, -1000,
	-1000, -1000, 827, 728, 280, 3348, 385, -1000, 392, 1374,
	3337, 426, 47858, 3522, 1444, -1000, -1000, -1000, -1000, 27464,
	27464, 21902, 27464, -1000, 204, 59, 75, -1000, -1000, 1499,
	6386, 1499, 6386, 2209, -1000, -1000, 912, -1000, -1000, 1295,
	-1000, 47858, 47858, -1000, -1000, 2915, 1952, -1000, -1000, 15703,
	-1000, 6386, 6386, -1000, -1000, 29318, 47858, -1000, -18, -1000,
	13, 3260, -1000, -1000, 1272, -1000, -1000, 1490, 1295, 3123,
	47858, 1272, 1272, 1272, -1000, -1000, 16949, 47858, 47858, -1000,
	-1000, -1000, -1000, 3459, 9487, -1000, 36116, -1000, -1000, 42296,
	-1000, 41678, 3459, 1900, -1000, 14464, 2220, 201, -1000, 256,
	-308, 200, 2145, 198, 2731, -1000, -1000, 2699, 2698, 1750,
	-1000, 1746, 2697, 1744, 1728, 2204, -1000, 49, -1000, 3224,
	1319, -1000, 2914, -1000, 1727, 3184, -1000, 1482, -1000, 1950,
	1712, -1000, -1000, -1000, 11354, 41060, 11354, 1319, 1708, 3178,
	1482, 3260, 2522, -1000, 1470, -1000, 2088, 1635, 212, -1000,
	-1000, -1000, 47858, 890, 2534, 1695, 40442, 1395, -1000, 911,
	1629, 1628, -1000, 38588, 329, 38588, -1000, 38588, -1000, -1000,
	408, -1000, 47858, 3254, -1000, -1000, -1000, 2479, 1949, -331,
	47858, -1000, -1000, -1000, -1000, -1000, 1675, -1000, 985, 985,
	3358, 2824, -1000, 13214, -1000, 13214, 3401, -1000, 1877, -1000,
	11354, 2163, 4761, 11354, 4761, 1161, 25610, 47858, -1000, -1000,
	11354, 11354, -1000, 3376, -1000, -1000, -1000, -1000, 11354, 11354,
	2270, -1000, 47858, -1000, -1000, -1000, -1000, 25610, -1000, 13214,
	-1000, -1000, -1000, -1000, 11354, 1393, 1393, 3299, 1672, 152,
	152, 152, 3259, 3220, 3195, 1670, 152, 3140, 3135, 3103,
	3057, 3023, 3003, 2966, 2953, 2946, 2932, -1000, 2911, -1000,
	-1000, 2054, 11974, 8867, -1000, -1000, 309, 1453, 2202, 2520,
	128, -1000, 1947, -1000, 2519, 47858, 47858, 1165, -1000, 47858,
	3475, -1000, 2516, -1000, -1000, -1000, 1058, 2515, -1000, 454,
	2097, 160, 306, 2694, 1438, -1000, -1000, 47858, -1000, -1000,
	-1000, 16949, 2895, 2910, 2895, 154, 1857, 655, 38588, 805,
	-1000, 47858, 2148, 1944, 3121, 756, 3245, 47858, 2908, 398,
	2906, 2905, 3310, 500, 4992, 47858, 1509, -1000, 1594, 3899,
	-1000, 47858, -1000, 2319, -1000, 1765, -1000, -1000, 3459, -1000,
	-1000, 11354, 11354, 3459, 1765, 1765, -1000, 1897, -1000, 47858,
	-1000, -335, 500, 4992, 3306, 4475, 717, 2789, -1000, 47858,
	-1000, -1000, -1000, 905, -1000, 1074, 888, 47858, 2031, 1074,
	2029, 2903, -1000, -1000, 47858, 47858, 47858, 47858, -1000, -1000,
	47858, -1000, 47858, 47858, 47858, 47858, 47858, 39824, -1000, 47858,
	47858, -1000, 47858, 2022, 47858, 2020, 3340, -1000, 1857, 1857,
	1021, -1000, -1000, 614, -1000, 39824, 2199, 2198, 2191, 2190,
	2514, 2512, 2511, 1857, 1857, 2186, 2503, 39206, 2496, 1352,
	2182, 2181, 2174, 2195, 2495, 1033, -1000, 2492, 2187, 2154,
	2153, 47858, 2898, 2393, 522, -1000, -1000, 2097, 154, 1857,
	382, 47858, 1938, 1934, 655, 554, -28, 23138, -1000, -1000,
	47858, 36116, 36116, 36116, 36116, -1000, 3165, 3159, 3145, -1000,
	3155, 3152, 3172, 47858, 36116, 2895, -1000, 39206, -1000, -1000,
	-1000, 1487, 1668, 3022, 1085, 11354, -1000, -1000, 16, 14,
	-1000, -1000, -1000, -1000, 38588, 2491, 591, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3397, 47858, 47858, 896, 2692, 1431,
	-1000, -1000, -1000, 4992, 2857, 2857, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2857, 2857, 2894, -1000, -1000,
	2856, 2856, 2856, 2817, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2858, 2858, 2891, 2891, 2858, -1000,
	-1000, 3434, -1000, 1428, -1000, -1000, 1589, -1000, 3434, 1981,
	-320, 14464, 1955, 1797, -1000, 11354, 14464, 11354, -238, 353,
	-243, -1000, -1000, -1000, 2488, -1000, -1000, -1000, 2167, -1000,
	2161, -1000, 166, 190, 2019, -213, 8867, 460, 47858, -213,
	47858, 8867, -1000, 47858, 184, -349, -351, 169, 443, -213,
	3397, 49, 11354, 3228, -1000, -1000, 47858, 2152, -1000, -1000,
	-1000, 3474, 38588, 2319, 1766, 37970, -1000, 324, -1000, 253,
	593, 2482, -1000, 945, 127, 2480, 2479, -1000, -1000, -1000,
	-1000, 13214, 1729, -1000, -1000, -1000, 2731, 11354, 2685, -1000,
	1080, 1080, 2483, 2684, 2682, -1000, 2857, 2857, -1000, 2817,
	2856, 2817, 1080, 1080, 2681, -1000, 2386, 2912, -1000, 2896,
	2892, 11354, -1000, 2678, 2650, 1388, -48, -182, 152, 152,
	-1000, -1000, -1000, -1000, 152, 152, 152, 152, -1000, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 864,
	-91, -275, -92, -277, -1000, 2674, 1416, -1000, -1000, -1000,
	-1000, -1000, 3653, 1415, 588, 588, 2479, 2477, -1000, 902,
	2461, 1113, 47858, 2459, -286, -1000, -1000, 2458, -1000, -1000,
	47858, 2454, -1000, 727, 47858, 47858, 2453, 2440, 1268, 4992,
	2671, 3305, 17567, 3304, 2274, -1000, -1000, -1000, 28700, 606,
	-1000, -1000, -1000, 715, 380, 2149, 574, -1000, 47858, 604,
	3211, 1931, 2439, 47858, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3245, -1000, 957, 469, 34880, 15085, -1000, 403, 47858,
	-1000, 17567, 17567, 403, 479, 1895, -1000, 862, 1286, 134,
	36116, 47858, -1000, 35498, 2670, -1000, 1295, 3459, -1000, 2731,
	2731, -335, 3459, 3459, 1765, -1000, -1000, 479, -1000, 403,
	-1000, 1831, 18803, 627, 515, 491, -1000, 698, -1000, -1000,
	861, 3235, 4992, -1000, 47858, -1000, 47858, -1000, 47858, 47858,
	888, 11354, 3235, 47858, 900, -1000, 1177, 531, 450, 882,
	882, 1410, -1000, 3291, -1000, -1000, 1401, -1000, -1000, -1000,
	-1000, 47858, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 25610,
	25610, 3335, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2436, 2434, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 47858, 1659, -1000, 1929,
	2146, 2432, 2274, 28700, 1921, 1885, 2431, 2427, 606, 2148,
	1920, 938, 47858, -1000, 1277, 47858, 47858, -1000, 1377, -1000,
	1917, 3025, 3119, 3025, -1000, -1000, -1000, -1000, -1000, 3143,
	-1000, 2907, -1000, -1000, 1377, -1000, -1000, -1000, -1000, -1000,
	1085, -1000, 3393, 1074, 1074, 1074, 2669, -1000, -1000, -1000,
	1395, 2667, -1000, -1000, -1000, 3509, -1000, -1000, -1000, -1000,
	-1000, -1000, 16949, 3243, 3456, 3448, 37352, 3456, -1000, -320,
	1875, -1000, 2070, 188, 2119, 47858, -1000, -1000, -1000, 2666,
	2665, -218, 193, 3447, 3446, 1143, -1000, 2661, 1363, -213,
	-1000, -1000, 1319, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-213, -1000, 1319, -1000, 166, -1000, -1000, 3223, -1000, -1000,
	2319, -1000, 252, -1000, -1000, -1000, -1000, -1000, -1000, 230,
	-1000, 47858, -1000, 1360, 119, -1000, 2731, -1000, -1000, -1000,
	-1000, -1000, 4761, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11354, -1000, -1000, -1000, 2808, -1000,
	-1000, 11354, 2656, 2426, 2655, 2425, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3516, -1000, 3445, 1631, 2645, 2641, 1621, 2640,
	2639, -1000, 11354, 2637, 3653, 1031, 2422, 1031, -1000, -1000,
	415, 28082, 47858, 3461, -1000, 47858, 2421, -1000, -1000, 2097,
	704, 731, -1000, -1000, -1000, -1000, 969, 403, 2622, 1334,
	-1000, -1000, -1000, -1000, 403, -1000, 2419, 240, -1000, -1000,
	-1000, -1000, 2416, 2414, 2141, -1000, -1000, 2124, 1622, 260,
	-1000, -1000, -1000, -1000, -1000, -1000, 2125, 47858, 36734, 2156,
	1911, -336, -1000, 2852, -1000, 1857, 1857, 1857, 47858, 1618,
	-1000, 1857, 1857, 2617, -1000, -1000, 2612, 2611, -125, 868,
	1882, 1874, -1000, 2140, 27464, 36116, 35498, 1375, -1000, 1586,
	-1000, -1000, -1000, -1000, -1000, -1000, 3459, 868, -1000, 602,
	2139, 13214, 2851, 13214, 2849, 638, 2848, 1566, -1000, 47858,
	-1000, -1000, 47858, 609, 2847, -1000, 2846, 3111, 571, 2845,
	2843, 47858, 2740, -1000, 3235, 47858, 764, 3242, -1000, -1000,
	-1000, 444, -1000, -1000, 734, -1000, 47858, -1000, 47858, -1000,
	1725, -1000, 25610, -1000, -1000, 1560, -1000, 2393, 2388, 3653,
	-1000, -1000, 240, 2382, 6386, -1000, -1000, -1000, 3211, 2380,
	2125, 47858, -1000, 47858, 1277, 1277, 3516, 47858, 8867, -1000,
	-1000, 11354, 2842, -1000, 11354, -1000, -1000, -1000, -1000, -1000,
	2841, 3210, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1384,
	-1000, 11354, 11354, -1000, -1000, 887, 14464, -244, 351, -1000,
	-1000, -1000, -221, 2379, -1000, -1000, 3444, 2375, 2298, 47858,
	-1000, -1000, 1319, 1319, -218, -1000, -1000, 1295, -1000, -1000,
	1140, 790, -1000, 2608, 2701, -1000, 2659, 152, -1000, 152,
	-1000, 242, 11354, -1000, 2374, -1000, -1000, -1000, 2373, -1000,
	-1000, 2543, -1000, 2607, -1000, 2369, -1000, -1000, 47858, -1000,
	-1000, 1107, 2365, -337, 2364, 2097, 2097, 47858, 4992, -127,
	-125, 17567, -127, -1000, -1000, 387, -1000, -1000, 411, -1000,
	-1000, 2123, 637, -1000, -1000, 2362, 616, -1000, 1277, -1000,
	1908, 2041, 2338, 33026, 25610, 26846, 2361, -1000, -1000, 34880,
	1384, 1384, 5230, 323, 51054, -1000, 2835, 1198, 1852, -1000,
	2136, -1000, 2127, -1000, 3459, 1375, 133, -1000, -1000, 1747,
	-1000, 1198, 2789, 3443, -1000, 2392, 47858, 2347, 47858, 2834,
	1905, 13214, -1000, 861, 3175, -1000, -1000, 609, -1000, -1000,
	2038, 13214, -1000, -1000, 2360, 26846, 1038, 1899, 1898, 1034,
	2833, -1000, 743, 3508, -1000, -1000, -1000, 1016, 2832, -1000,
	2018, 2014, -1000, 47858, -1000, 33026, 33026, 747, 747, 33026,
	33026, 2831, 882, -1000, -1000, 13214, -1000, -1000, 1857, -1000,
	-1000, -1000, 1857, 1722, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2156, -1000, -1000, 1272, -1000, 3425, -1000, -1000, 2731,
	47858, 2731, 34262, -1000, 3442, 3441, -1000, 2731, 1252, -1000,
	-320, 47858, 47858, -224, 2122, -1000, 2357, 194, -1000, -1000,
	1265, -221, -226, 108, 25610, 1890, -1000, -1000, -1000, -1000,
	-1000, 2604, -1000, 702, -1000, -1000, -1000, 1252, 2603, 2561,
	-1000, -1000, -1000, -1000, 47858, -1000, 2326, -1000, 2356, 2353,
	676, -120, -1000, -1000, 440, -1000, -1000, -1000, 619, 2282,
	-1000, -1000, 394, -1000, -1000, -1000, 2125, 2351, -1000, -1000,
	116, -1000, 1886, 1544, -1000, 2817, 11354, -1000, -1000, -1000,
	-1000, -1000, -1000, 857, -1000, 403, 50977, -1000, 1205, 26228,
	-1000, 1140, 857, 527, 31790, 651, 315, -1000, 2120, -1000,
	-1000, 3516, -1000, 648, -1000, 639, -1000, 1542, -1000, 1537,
	33644, 2118, 1625, -1000, 50923, 984, -1000, -1000, 3358, -1000,
	-1000, -1000, -1000, -1000, -1000, 2350, 2348, -1000, -1000, -1000,
	-1000, -1000, 2105, 2803, -49, 3332, 2344, -1000, -1000, 2801,
	1532, 1531, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1508, 1507, 33026, -1000, -1000, 3358, 2104, 25610, 1857,
	-1000, -1000, 1505, 1502, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2798, -1000, -1000, 3438, -224, -229, 2340, 165, 220,
	-1000, 2339, -1000, -1000, 605, -214, 147, 135, 121, -1000,
	-1000, -1000, 11354, -1000, -1000, -1000, 114, -1000, 1873, -1000,
	-1000, 2097, 47858, 741, -1000, -1000, -1000, -1000, 224, -1000,
	-1000, -1000, -1000, -1000, -1000, 2338, 2330, -1000, 33026, 3291,
	2150, 575, 3437, -1000, 51054, -1000, 1857, -1000, 575, 1460,
	-1000, 1857, 1857, -1000, 496, -1000, 1818, -1000, 2092, -1000,
	3425, -1000, 466, -1000, 600, -1000, -1000, -1000, 1451, -1000,
	-1000, -1000, 50923, 613, -1000, 851, 2797, -1000, -1000, 2420,
	11354, 2792, 1857, 2352, -110, 33026, 3110, 3109, 2955, 2551,
	1400, -1000, -1000, 25610, -1000, -1000, 32408, 47858, 2298, -1000,
	-1000, 2328, -1000, 893, 176, 220, -1000, 3436, 192, 3435,
	3433, 1251, 1989, -1000, 145, 137, 130, -1000, -1000, -1000,
	-1000, -1000, 2326, 2325, 2322, 573, -1000, 322, -1000, -1000,
	-1000, 310, -1000, -1000, 3291, -1000, 3430, 717, -1000, 25610,
	-1000, -1000, 31790, 1384, 1384, -1000, -1000, 2086, -1000, -1000,
	-1000, -1000, 2059, -1000, -1000, -1000, 1394, -1000, 47858, 1043,
	8247, -1000, 2049, -1000, 47858, -1000, 3118, -1000, 275, 1386,
	310, 747, 310, 747, 310, 747, 310, 747, 319, -1000,
	-1000, -1000, 1380, -1000, -1000, -1000, 2791, 2057, 193, 175,
	3429, -1000, 2298, 3427, 2298, 2298, -1000, 136, 605, -1000,
	-1000, -1000, -1000, -1000, -1000, 2320, -1000, -1000, -1000, -1000,
	1857, 1857, 2310, 2305, 463, -1000, -1000, -1000, 31172, 627,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 613, 51054, -1000,
	8247, 1373, -1000, 2731, -1000, 882, -1000, -1000, 2935, 2899,
	3466, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 47858, 3329, 24992, 159, -1000, -1000, -1000, 2304, -1000,
	2298, -1000, -1000, 1800, -1000, -271, 2050, 2045, -1000, -1000,
	47858, -1000, 47858, 602, -1000, 51054, 1361, -1000, 8247, -1000,
	-1000, 3504, -1000, 3502, 1170, 1170, 310, 310, 310, 310,
	-1000, -1000, 47858, -1000, 1346, -1000, -1000, -1000, 1571, -1000,
	-1000, -1000, -1000, 2286, -1000, -1000, 2240, -1000, -1000, -1000,
	1299, 2789, -1000, -1000, -1000, -1000, -1000, 2111, 752, -1000,
	1243, -1000, 1763, -1000, 30554, 47858, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 47858, 7627, -1000, 1353, -1000, -1000, 2731,
	47858, -1000,
}

var yyPgo = [...]int{
	0, 183, 3533, 259, 181, 4115, 113, 258, 240, 224,
	257, 4114, 4112, 4111, 4110, 3261, 3244, 4109, 4108, 4107,
	4106, 4105, 4104, 4103, 4102, 4101, 4100, 4098, 4097, 4096,
	4095, 4094, 4093, 4092, 4089, 4087, 4086, 4085, 4084, 4083,
	4068, 4064, 4061, 4055, 4054, 4053, 4052, 255, 4051, 4043,
	4040, 4039, 4038, 4037, 4036, 4035, 4034, 4033, 4032, 4031,
	4029, 4027, 4026, 4025, 4019, 4018, 4017, 4015, 4014, 4013,
	4012, 4011, 4010, 4008, 4007, 4006, 4005, 4004, 4003, 254,
	4002, 4001, 219, 4000, 3234, 3999, 3998, 3997, 3996, 3993,
	3992, 3991, 244, 3990, 3989, 3988, 3987, 3986, 3985, 3984,
	3983, 3981, 3980, 3979, 3978, 208, 3977, 3976, 3974, 3973,
	236, 3972, 206, 3971, 179, 167, 3970, 3969, 3967, 3966,
	3965, 3964, 3963, 3962, 3961, 3959, 3957, 3956, 3955, 256,
	192, 74, 3954, 53, 3953, 3952, 229, 3950, 151, 3949,
	147, 3944, 3943, 3942, 3940, 3934, 3933, 3932, 3931, 3929,
	3928, 3925, 3924, 3923, 3922, 3920, 3919, 3918, 3917, 3916,
	3911, 3910, 3909, 3908, 55, 3907, 267, 3905, 82, 3902,
	185, 3901, 75, 3900, 72, 162, 274, 2506, 264, 260,
	187, 184, 100, 3899, 319, 3898, 165, 238, 163, 31,
	3894, 145, 3892, 268, 48, 43, 251, 158, 64, 157,
	140, 3891, 221, 107, 118, 3890, 3889, 154, 3888, 249,
	189, 3887, 115, 3886, 3885, 3884, 3880, 3879, 199, 194,
	3878, 3876, 127, 3875, 3874, 94, 128, 3868, 84, 133,
	175, 131, 3866, 2544, 126, 90, 3861, 129, 109, 3860,
	96, 3856, 3855, 3854, 3853, 190, 3851, 3850, 146, 77,
	3847, 3846, 3845, 71, 3844, 86, 3842, 29, 3841, 76,
	3840, 3839, 3836, 3835, 3834, 3832, 3830, 3828, 3827, 3826,
	3822, 3818, 59, 3813, 3812, 7, 15, 14, 3811, 26,
	3810, 176, 3809, 3788, 169, 3787, 3786, 102, 93, 3783,
	98, 177, 3782, 9, 28, 79, 3778, 3777, 230, 134,
	114, 156, 3774, 279, 3773, 3772, 3771, 166, 3770, 1643,
	3768, 3767, 3765, 3764, 3763, 3762, 23, 3761, 1, 227,
	45, 3760, 138, 144, 3759, 44, 33, 3758, 50, 122,
	222, 142, 108, 3757, 3756, 3754, 16, 197, 105, 39,
	0, 106, 231, 164, 3752, 3748, 3747, 262, 3746, 242,
	204, 241, 308, 266, 247, 3745, 3744, 78, 3742, 168,
	30, 58, 160, 65, 22, 228, 3741, 523, 8, 218,
	3740, 210, 3739, 172, 17, 326, 171, 3737, 3736, 36,
	269, 3731, 3730, 3729, 136, 3727, 3726, 352, 81, 3725,
	3724, 3722, 3721, 38, 3717, 42, 13, 3716, 137, 3715,
	253, 3706, 205, 143, 191, 186, 161, 233, 239, 89,
	85, 3705, 1894, 153, 110, 27, 3703, 237, 3702, 174,
	135, 3701, 92, 3699, 252, 270, 203, 3698, 195, 10,
	51, 41, 32, 49, 12, 261, 207, 3697, 3695, 24,
	57, 3694, 56, 3693, 19, 3689, 3688, 52, 3687, 80,
	5, 3686, 3685, 18, 21, 3683, 40, 211, 178, 125,
	103, 66, 3682, 3680, 54, 139, 3677, 150, 213, 152,
	3676, 83, 3675, 3674, 3671, 3670, 895, 3669, 265, 3667,
	3666, 3665, 3663, 3662, 3661, 3660, 3659, 225, 3658, 112,
	47, 3657, 3655, 3654, 3653, 87, 155, 3652, 3650, 3648,
	3647, 35, 148, 3645, 11, 3644, 25, 20, 34, 3635,
	111, 3632, 3, 198, 3631, 3630, 4, 3629, 3626, 2,
	3625, 3624, 132, 3623, 104, 37, 173, 116, 3621, 3620,
	97, 226, 149, 3619, 3617, 101, 250, 202, 3616, 99,
	245, 263, 3614, 215, 3613, 3611, 3610, 3609, 3608, 3605,
	1223, 3604, 3603, 246, 67, 91, 3602, 232, 121, 3601,
	3598, 88, 170, 124, 123, 61, 95, 3595, 120, 201,
	3587, 200, 3586, 248, 3583, 3582, 117, 3573, 3571, 3570,
	3565, 193, 3563, 3562, 196, 235, 3561, 3558, 272, 3557,
	3556, 3555, 3550, 3549, 3548, 3542, 3539, 3538, 3537, 243,
	209, 3530,
}

//line mysql_sql.y:12438
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 594, 597, 597, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 120,
	120, 331, 331, 332, 332, 122, 327, 327, 326, 326,
	123, 124, 125, 573, 573, 126, 127, 156, 572, 572,
	158, 158, 158, 158, 158, 447, 121, 121, 121, 121,
	121, 162, 162, 162, 162, 162, 119, 579, 579, 579,
	580, 580, 116, 145, 144, 147, 147, 146, 146, 143,
	143, 139, 142, 142, 141, 141, 140, 135, 137, 137,
	136, 138, 138, 117, 105, 118, 521, 521, 520, 520,
	519, 519, 472, 472, 473, 473, 318, 318, 318, 518,
	518, 518, 517, 517, 516, 516, 515, 515, 513, 513,
	514, 512, 511, 511, 511, 509, 509, 509, 505, 505,
	507, 506, 506, 508, 500, 500, 503, 503, 501, 501,
	501, 501, 504, 499, 499, 499, 498, 498, 104, 104,
	104, 414, 414, 103, 103, 428, 428, 428, 428, 428,
	426, 426, 426, 426, 426, 426, 425, 425, 424, 424,
	429, 429, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 93, 93, 93, 93, 93, 93, 98,
	98, 98, 99, 585, 585, 584, 584, 586, 586, 586,
	586, 587, 587, 96, 96, 96, 97, 423, 423, 423,
	94, 95, 95, 413, 413, 418, 418, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	422, 422, 422, 420, 420, 419, 419, 421, 421, 87,
	87, 87, 90, 89, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 88, 88, 88, 88, 88, 88, 83,
	83, 83, 83, 83, 82, 82, 84, 84, 410, 410,
	409, 100, 100, 101, 582, 582, 581, 583, 583, 583,
	583, 102, 108, 108, 108, 108, 108, 108, 108, 108,
	107, 107, 110, 110, 109, 111, 92, 92, 92, 92,
	92, 92, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 546, 546, 546, 548, 548,
	345, 346, 598, 348, 344, 344, 344, 542, 542, 543,
	544, 545, 545, 545, 106, 14, 208, 208, 446, 446,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 13,
	81, 86, 86, 86, 280, 280, 285, 285, 161, 286,
	286, 286, 291, 291, 292, 292, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 267, 267,
	267, 262, 262, 262, 262, 263, 263, 264, 264, 265,
	265, 265, 265, 266, 266, 337, 337, 287, 287, 287,
	289, 289, 288, 284, 282, 282, 282, 282, 282, 282,
	282, 283, 283, 283, 283, 290, 290, 79, 85, 85,
	85, 85, 560, 560, 80, 571, 571, 476, 476, 359,
	359, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 481, 482, 355,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 54, 57, 58, 160, 53, 53,
	53, 399, 399, 52, 599, 599, 330, 330, 67, 66,
	56, 68, 69, 70, 71, 72, 73, 51, 65, 65,
	65, 65, 65, 65, 65, 65, 76, 494, 494, 601,
	601, 601, 74, 75, 475, 475, 475, 64, 63, 62,
	61, 60, 60, 50, 50, 49, 49, 55, 151, 59,
	152, 152, 352, 352, 352, 354, 354, 350, 600, 600,
	442, 442, 353, 353, 48, 48, 48, 48, 77, 351,
	351, 329, 349, 349, 349, 12, 12, 10, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 26, 27, 29, 407, 407,
	404, 28, 20, 19, 19, 23, 22, 18, 18, 21,
	24, 25, 25, 9, 9, 9, 9, 15, 15, 16,
	181, 181, 234, 234, 554, 554, 550, 550, 551, 551,
	551, 552, 552, 553, 553, 112, 488, 488, 488, 488,
	488, 488, 8, 8, 203, 203, 487, 487, 487, 487,
	487, 487, 411, 411, 411, 531, 531, 531, 532, 202,
	202, 197, 197, 489, 489, 376, 533, 533, 497, 497,
	496, 496, 495, 495, 200, 200, 201, 201, 184, 184,
	130, 130, 502, 502, 502, 502, 510, 510, 471, 471,
	272, 272, 320, 320, 321, 321, 174, 174, 175, 175,
	175, 175, 175, 175, 588, 588, 589, 590, 591, 591,
	592, 592, 592, 593, 593, 593, 593, 593, 539, 539,
	541, 541, 540, 199, 199, 195, 195, 196, 196, 196,
	194, 194, 193, 192, 192, 191, 189, 189, 189, 190,
	190, 190, 207, 207, 177, 177, 177, 176, 176, 176,
	176, 176, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 178, 178, 547, 547, 547, 477,
	477, 477, 484, 484, 300, 300, 301, 301, 299, 299,
	179, 179, 180, 180, 180, 180, 298, 298, 297, 182,
	182, 188, 187, 187, 183, 183, 183, 183, 308, 308,
	307, 307, 307, 307, 115, 128, 128, 129, 206, 206,
	306, 305, 305, 305, 305, 205, 205, 204, 204, 198,
	198, 186, 186, 186, 186, 304, 185, 302, 578, 578,
	577, 577, 576, 574, 574, 574, 575, 575, 575, 575,
	523, 523, 523, 523, 523, 338, 338, 338, 343, 343,
	341, 341, 341, 341, 341, 347, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 39, 217,
	218, 40, 219, 219, 220, 220, 221, 221, 222, 223,
	224, 224, 224, 224, 38, 209, 209, 210, 210, 211,
	211, 212, 213, 213, 213, 216, 214, 215, 215, 596,
	596, 595, 37, 37, 30, 165, 165, 166, 166, 166,
	168, 168, 268, 268, 268, 167, 167, 169, 169, 169,
	555, 557, 557, 559, 558, 558, 558, 561, 561, 561,
	561, 561, 562, 562, 562, 562, 563, 563, 31, 148,
	148, 172, 172, 153, 566, 566, 566, 565, 565, 567,
	567, 568, 568, 324, 324, 325, 325, 163, 164, 164,
	155, 150, 171, 171, 171, 171, 171, 173, 173, 236,
	236, 149, 154, 157, 159, 556, 564, 564, 564, 408,
	408, 405, 406, 406, 403, 402, 402, 402, 570, 570,
	569, 569, 569, 339, 339, 32, 398, 398, 400, 401,
	401, 401, 392, 392, 392, 392, 36, 396, 396, 397,
	397, 397, 397, 397, 397, 397, 393, 393, 395, 395,
	391, 391, 391, 391, 391, 391, 391, 35, 170, 170,
	390, 390, 387, 387, 385, 385, 386, 386, 384, 384,
	384, 388, 388, 43, 78, 44, 45, 46, 42, 389,
	389, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 132, 131, 131, 131, 131, 131, 134, 134, 323,
	323, 322, 322, 133, 269, 269, 41, 247, 247, 463,
	463, 458, 458, 458, 458, 458, 479, 479, 479, 459,
	459, 459, 460, 460, 460, 462, 462, 462, 461, 461,
	461, 461, 461, 478, 478, 480, 480, 480, 430, 430,
	431, 431, 431, 434, 434, 450, 450, 451, 451, 449,
	449, 456, 456, 455, 455, 454, 454, 453, 453, 452,
	452, 452, 452, 445, 445, 444, 444, 432, 432, 432,
	432, 432, 433, 433, 433, 443, 443, 448, 448, 296,
	296, 295, 295, 255, 255, 256, 256, 294, 294, 253,
	253, 254, 254, 254, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	529, 529, 530, 258, 258, 270, 270, 270, 270, 270,
	270, 257, 257, 259, 259, 235, 235, 233, 233, 225,
	225, 225, 225, 225, 226, 226, 227, 227, 228, 228,
	228, 232, 232, 231, 231, 231, 231, 229, 229, 230,
	230, 230, 230, 230, 230, 416, 416, 526, 526, 527,
	527, 522, 522, 522, 525, 525, 525, 525, 525, 525,
	525, 528, 528, 528, 524, 524, 237, 317, 317, 317,
	340, 340, 340, 340, 342, 316, 316, 316, 252, 252,
	251, 251, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 415, 415, 356, 356, 357, 357,
	279, 278, 278, 278, 278, 278, 276, 277, 275, 275,
	275, 275, 275, 274, 274, 273, 273, 273, 394, 394,
	271, 271, 261, 261, 261, 260, 260, 260, 457, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 314, 314,
	314, 315, 315, 315, 315, 315, 315, 315, 315, 366,
	366, 372, 372, 538, 538, 537, 238, 238, 238, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 248, 248,
	248, 439, 439, 439, 439, 440, 440, 440, 440, 441,
	441, 441, 437, 437, 438, 438, 377, 378, 378, 485,
	485, 486, 486, 435, 435, 436, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 493, 493,
	493, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 549, 549, 549,
	534, 534, 534, 535, 535, 535, 535, 535, 535, 535,
	535, 535, 535, 535, 535, 536, 536, 536, 536, 536,
	536, 536, 536, 536, 536, 536, 536, 536, 536, 536,
	536, 536, 312, 312, 312, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 379, 379, 380, 380, 490, 490, 490,
	490, 490, 490, 491, 491, 492, 492, 492, 492, 483,
	483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
	483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
	483, 483, 483, 483, 483, 483, 483, 483, 364, 309,
	309, 309, 381, 373, 373, 374, 374, 375, 375, 367,
	367, 367, 367, 367, 367, 368, 368, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 369,
	369, 371, 371, 383, 383, 383, 382, 382, 382, 382,
	382, 382, 382, 250, 250, 250, 250, 361, 361, 361,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 240, 240, 240, 240, 244, 244, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 245, 245, 245, 245, 245, 243, 243, 243,
	243, 243, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 113, 114, 114, 242, 319, 319, 464, 464, 467,
	467, 465, 465, 466, 468, 468, 468, 469, 469, 469,
	470, 470, 470, 474, 474, 328, 328, 328, 336, 336,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	4, 4, 4, 1, 2, 5, 6, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 5, 7, 9, 8, 6, 4, 0, 1, 1,
	0, 1, 5, 2, 2, 6, 9, 6, 9, 4,
	7, 8, 0, 1, 1, 2, 4, 6, 1, 2,
	4, 0, 2, 10, 11, 2, 0, 2, 1, 3,
	3, 3, 0, 2, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 5, 1, 3, 3, 1, 2, 2, 2,
	1, 2, 2, 3, 4, 4, 6, 1, 1, 1,
	2, 4, 6, 1, 4, 1, 3, 3, 4, 4,
	4, 4, 3, 3, 2, 4, 4, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 2, 2, 0, 1, 4, 2, 4, 1,
	5, 3, 2, 1, 2, 2, 4, 4, 5, 2,
	1, 3, 4, 4, 1, 2, 9, 7, 1, 3,
	3, 1, 1, 3, 1, 3, 2, 1, 2, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 2, 4, 3, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 4, 7, 2, 3, 3, 4,
	5, 3, 4, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	1, 1, 1, 1, 6, 4, 1, 1, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 10,
	7, 4, 4, 5, 1, 3, 1, 6, 7, 3,
	3, 3, 1, 1, 1, 3, 2, 4, 5, 5,
	6, 5, 5, 3, 2, 2, 1, 3, 4, 3,
	7, 5, 8, 2, 2, 1, 3, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 0, 1, 2,
	1, 3, 2, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 6, 3, 3, 1, 1, 7, 7, 7,
	8, 8, 0, 4, 7, 0, 3, 0, 2, 0,
	1, 1, 1, 1, 4, 2, 2, 3, 3, 4,
	5, 3, 4, 4, 2, 2, 2, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 3, 3, 2, 5,
	5, 0, 2, 7, 0, 1, 0, 1, 5, 5,
	3, 3, 2, 4, 4, 4, 4, 4, 1, 1,
	1, 3, 3, 1, 1, 1, 6, 0, 1, 1,
	1, 1, 5, 5, 0, 1, 1, 3, 3, 3,
	4, 7, 7, 5, 4, 7, 8, 3, 3, 2,
	3, 4, 0, 2, 2, 0, 2, 2, 1, 1,
	1, 1, 0, 1, 5, 5, 6, 4, 3, 1,
	3, 1, 1, 3, 5, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 4, 1, 3,
	1, 4, 6, 6, 4, 4, 4, 4, 4, 3,
	6, 3, 5, 1, 1, 2, 2, 11, 8, 9,
	1, 3, 2, 4, 0, 2, 0, 1, 1, 1,
	1, 0, 1, 0, 1, 4, 2, 1, 5, 4,
	4, 2, 5, 5, 1, 3, 2, 1, 5, 4,
	4, 2, 0, 5, 4, 0, 1, 3, 3, 1,
	3, 1, 3, 1, 3, 4, 0, 1, 0, 1,
	1, 3, 1, 1, 0, 4, 1, 3, 2, 1,
	0, 8, 0, 4, 7, 4, 0, 2, 0, 2,
	0, 2, 0, 4, 1, 3, 1, 1, 6, 4,
	5, 7, 4, 5, 0, 1, 3, 8, 0, 6,
	0, 4, 6, 1, 1, 1, 1, 1, 2, 3,
	1, 3, 6, 0, 3, 0, 1, 2, 4, 4,
	0, 1, 3, 1, 3, 3, 0, 1, 1, 0,
	2, 2, 0, 2, 3, 3, 3, 1, 3, 3,
	3, 3, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 7, 7, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 2,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	3, 1, 1, 1, 4, 4, 4, 3, 2, 2,
	2, 3, 2, 3, 4, 1, 3, 4, 0, 2,
	1, 1, 2, 2, 2, 0, 1, 2, 4, 1,
	3, 1, 3, 2, 3, 1, 4, 3, 0, 1,
	1, 2, 5, 2, 2, 2, 0, 2, 3, 3,
	0, 1, 3, 1, 3, 0, 1, 2, 1, 1,
	0, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	1, 7, 1, 3, 0, 1, 1, 3, 1, 3,
	0, 1, 1, 1, 14, 1, 3, 0, 1, 1,
	3, 1, 1, 2, 4, 1, 1, 1, 1, 0,
	1, 2, 9, 9, 7, 1, 2, 3, 3, 3,
	0, 4, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 4, 1, 1, 1, 3, 3, 4,
	3, 3, 0, 1, 1, 1, 0, 2, 7, 8,
	10, 2, 2, 8, 0, 3, 3, 0, 3, 0,
	3, 0, 5, 1, 3, 0, 3, 3, 0, 2,
	9, 8, 0, 2, 2, 3, 3, 0, 2, 0,
	2, 4, 4, 4, 4, 1, 0, 2, 2, 1,
	3, 2, 1, 3, 2, 1, 3, 2, 0, 1,
	3, 4, 3, 1, 1, 4, 1, 3, 1, 1,
	1, 1, 0, 1, 1, 1, 11, 0, 2, 3,
	3, 2, 2, 3, 1, 1, 1, 3, 3, 4,
	0, 2, 2, 2, 2, 2, 2, 6, 0, 4,
	1, 1, 0, 3, 0, 1, 1, 2, 4, 4,
	4, 0, 1, 8, 2, 4, 4, 4, 9, 0,
	2, 11, 9, 11, 8, 6, 9, 7, 10, 7,
	6, 2, 2, 9, 4, 5, 3, 0, 4, 1,
	3, 0, 3, 6, 0, 2, 10, 0, 2, 0,
	2, 0, 3, 2, 4, 3, 0, 2, 1, 0,
	2, 3, 0, 2, 3, 0, 2, 1, 0, 3,
	2, 4, 3, 0, 1, 0, 1, 1, 0, 6,
	0, 3, 5, 0, 4, 0, 3, 1, 3, 4,
	5, 0, 3, 1, 3, 2, 3, 1, 2, 0,
	4, 6, 5, 0, 2, 0, 2, 4, 5, 4,
	5, 1, 5, 6, 5, 0, 3, 0, 1, 1,
	3, 3, 3, 0, 4, 1, 3, 3, 3, 0,
	1, 1, 3, 2, 3, 3, 3, 4, 4, 3,
	3, 3, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 5, 4, 5,
	1, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 4, 0,
	5, 5, 5, 5, 0, 1, 1, 3, 1, 1,
	1, 1, 1, 7, 9, 7, 9, 2, 1, 7,
	9, 7, 9, 8, 5, 0, 1, 0, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 3, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 2, 1, 2, 2, 1, 1, 2, 2, 2,
	3, 3, 2, 2, 1, 5, 6, 4, 1, 1,
	1, 5, 4, 1, 1, 2, 0, 1, 1, 2,
	5, 0, 1, 1, 2, 2, 3, 3, 1, 1,
	2, 2, 2, 0, 1, 2, 2, 2, 0, 3,
	0, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 3, 5, 2, 2, 2,
	2, 4, 1, 1, 2, 5, 6, 8, 6, 6,
	6, 1, 1, 1, 1, 1, 1, 3, 4, 4,
	4, 7, 9, 7, 7, 7, 9, 7, 7, 0,
	2, 0, 1, 1, 2, 4, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 2, 2, 2, 0, 1,
	1, 1, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 5, 0, 1, 3, 0, 1, 0,
	2, 0, 2, 0, 1, 6, 8, 8, 6, 6,
	5, 5, 5, 6, 6, 6, 6, 5, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 1, 1,
	1, 4, 4, 6, 8, 6, 4, 5, 4, 4,
	4, 3, 4, 6, 6, 7, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 8, 4, 2, 3, 2, 4,
	2, 2, 4, 6, 2, 2, 4, 6, 4, 2,
	4, 4, 4, 0, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 3, 0, 1, 1, 3, 1, 3, 3,
	3, 3, 3, 2, 1, 1, 1, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 1, 3, 4,
	4, 5, 4, 5, 3, 4, 5, 6, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 2, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 4,
	1, 2, 3, 5, 1, 1, 3, 0, 1, 0,
	3, 0, 3, 3, 0, 3, 5, 0, 3, 5,
	0, 1, 1, 0, 1, 1, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -594, -597, -2, -5, 626, -1, -4, -114, -87,
	-7, -14, -116, -117, -8, -112, -9, -10, -12, -91,
	-107, -109, -111, -110, -47, -11, -106, -82, -83, -93,
	-100, -103, -104, -105, -118, -113, -115, -174, -119, -120,
	-121, -162, -124, -126, -127, 616, -88, -89, -90, -33,
	-32, -31, -30, -148, -153, -156, -158, -122, 549, 622,
	452, 14, 501, -15, -16, -539, -17, 261, -344, -345,
	-346, -348, -598, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -151,
	-152, -77, -57, -78, -58, -160, -123, -80, -79, -85,
	-81, -86, -150, -155, -13, -161, 236, -84, 76, -94,
	-95, -96, -97, -98, -99, -101, -102, 376, 382, 439,
	615, 61, -175, -177, 635, 636, 639, 536, 539, 160,
	161, 163, 164, -34, -35, -36, -37, -38, -39, -41,
	-40, -42, -43, -44, -45, -46, 232, 16, 544, -18,
	-21, -19, -22, -20, -28, -29, -27, -24, -26, -149,
	-25, -154, -23, -157, -159, -125, 256, 255, 38, 322,
	323, 324, 380, 254, 233, 235, 15, 31, 42, 355,
	-176, 83, 537, 234, -178, 13, 641, -6, -3, -2,
	-135, -139, -143, -146, -147, -144, -145, -4, -114, 118,
	246, 617, -340, 372, 618, 620, 619, 86, 94, -333,
	-335, 452, 261, 376, 382, 615, 636, 639, 536, 539,
	551, 552, 553, 554, 555, 556, 557, 558, 560, 561,
	562, 563, 564, 565, 566, 576, 577, 567, 568, 569,
	570, 571, 572, 573, 574, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, 504,
	601, 602, 603, 604, 532, 559, 595, 596, 597, 598,
	353, 354, 541, 273, 297, 407, 303, 310, 160, 179,
	173, 202, 193, 537, 168, 277, 315, 278, 93, 163,
	487, 108, 464, 436, 166, 292, 294, 296, 533, 534,
	366, 299, 531, 298, 300, 302, 535, 279, 356, 189,
	184, 291, 275, 182, 280, 40, 281, 207, 282, 283,
	546, 460, 352, 466, 307, 52, 434, 183, 461, 295,
	463, 211, 215, 478, 479, 177, 178, 468, 481, 206,
	209, 210, 253, 349, 350, 43, 543, 265, 482, 213,
	205, 200, 490, 311, 309, 204, 176, 199, 276, 65,
	217, 216, 218, 430, 431, 432, 433, 284, 285, 370,
	477, 196, 185, 357, 169, 23, 485, 260, 465, 383,
	286, 304, 312, 212, 214, 267, 272, 545, 438, 271,
	308, 483, 181, 264, 293, 259, 486, 170, 385, 287,
	164, 301, 480, 489, 64, 398, 175, 167, 633, 250,
	161, 269, 274, 288, 289, 290, 530, 314, 313, 305,
	538, 197, 266, 203, 187, 174, 198, 162, 268, 488,
	399, 613, 355, 417, 195, 192, 270, 243, 484, 467,
	165, 421, 400, 190, 316, 608, 609, 610, 371, 348,
	317, 318, 188, 257, 458, 459, 321, 427, 339, 401,
	437, 408, 402, 224, 225, 325, 470, 472, 208, 611,
	328, 329, 330, 462, 331, 332, 333, 334, 375, 56,
	58, 95, 98, 97, 637, 638, 63, 29, 361, 364,
	396, 403, 341, 614, 542, 338, 342, 343, 365, 25,
	419, 387, 423, 422, 48, 49, 50, 53, 54, 55,
	57, 59, 60, 51, 529, 380, 393, 491, 45, 47,
	390, 27, 367, 418, 440, 337, 420, 451, 46, 449,
	450, 471, 26, 369, 368, 62, 44, 426, 428, 429,
	319, 335, 378, 623, 492, 373, 389, 392, 374, 340,
	363, 394, 67, 66, 386, 624, 381, 379, 336, 547,
	548, 344, 575, 358, 435, 526, 525, 524, 523, 522,
	521, 520, 519, 322, 323, 324, 404, 405, 406, 416,
	409, 410, 411, 412, 413, 414, 415, 454, 455, 625,
	473, 475, 476, 474, 238, 640, 359, 360, 241, 627,
	628, 96, 629, 631, 630, 28, 632, -421, -419, -340,
	537, 615, 382, 536, 539, 376, 355, 636, 639, 380,
	261, 322, 323, 324, 452, 353, -219, -340, 640, -184,
	245, 39, -233, -340, -184, -84, -16, -15, -176, -177,
	-233, 240, -349, 24, 434, -92, 435, 236, 83, 77,
	-340, -9, -105, -8, -112, -82, -174, 439, -347, -340,
	322, 322, -347, 240, -342, 271, 415, -340, -476, 246,
	-425, -398, 272, -424, -400, -427, -401, 32, 232, 234,
	233, 549, 268, 16, 380, 242, 14, 13, 381, 254,
	25, 26, 28, 15, 382, 384, 29, 385, 388, 389,
	390, 42, 393, 394, 261, 86, 94, 89, 279, -218,
	-340, -375, -367, 115, -370, -362, -363, -365, -318, -513,
	-360, 83, 142, 143, 150, 116, 642, -364, -457, 36,
	118, 555, 559, 595, 502, -310, -311, -312, -313, -314,
	-315, -340, -514, -512, 89, 99, 101, 105, 106, 104,
	102, 154, 186, 103, 90, 155, -177, 86, -534, 565,
	-334, 588, 601, 602, 603, 604, 587, 61, -483, -492,
	239, -490, 153, 191, 257, 187, 14, 148, 427, 188,
	596, 597, 598, 562, 584, 504, 566, 576, 591, 557,
	558, 560, 552, 553, 554, 556, 567, 569, 583, -493,
	579, 589, 590, 575, 599, 600, 592, 593, 594, 631,
	88, 87, 582, 581, 568, 563, 564, 570, 551, 561,
	571, 572, 580, 585, 586, 364, 108, 365, 366, 494,
	356, 367, 246, 434, 70, 368, 369, 370, 371, 372,
	501, 373, 71, 374, 363, 261, 417, 375, 190, 208,
	506, 505, 507, 498, 495, 493, 496, 497, 499, 500,
	573, 574, 578, -128, -129, 606, -588, -303, -589, 6,
	7, 8, 9, -590, 155, -579, 436, 545, 89, 315,
	353, 17, 494, 634, 535, 634, 535, 165, 162, -412,
	165, 114, 170, 169, -412, 634, 167, 633, 325, 267,
	-389, -165, 353, 417, 331, 95, 271, -392, -390, 533,
	-478, 319, 315, 291, 241, 111, -166, 251, 250, 109,
	494, 239, 391, 310, 56, 58, -550, -551, 229, 230,
	231, -541, 527, -540, -340, 634, 366, 97, 98, 633,
	27, 240, 377, 267, 472, 470, 471, 473, 474, 475,
	476, -65, -494, -475, 467, 466, -353, 459, 465, 457,
	469, 460, 354, 333, 549, 332, 232, 627, 534, 528,
	-328, 401, 437, 491, 492, 378, 438, 478, 480, 461,
	108, 194, 191, 241, 243, 240, 633, 353, 494, 417,
	95, 331, 240, -550, 162, 478, 480, 436, 271, 415,
	41, -418, 427, -417, -419, 479, 490, 87, 88, 477,
	-328, 108, 458, 458, -588, -303, -175, -177, -115, -539,
	535, 634, 241, 353, 417, 271, 242, 240, 530, 533,
	243, 494, 239, 322, 377, 267, 331, 95, 167, 633,
	-477, -547, 32, -484, 226, 227, 228, 33, 34, -1,
	122, 641, -367, -367, -6, 644, -6, -367, -340, -340,
	157, -240, -244, -241, -243, -242, -246, -245, 191, 192,
	153, 195, 201, 197, 198, 199, 200, 202, 203, 204,
	205, 206, 209, 210, 207, 31, 208, 257, 187, 188,
	189, 190, 211, 173, 193, 542, 219, 174, 220, 175,
	221, 176, 222, 177, 178, 223, 179, 182, 183, 184,
	185, 181, 156, -208, 89, 32, 83, 156, 89, -200,
	263, -184, -233, -225, 156, 642, -200, -588, -193, -194,
	11, -233, -316, -340, 436, 125, -92, 77, -92, 435,
	77, -542, -543, -544, -546, 236, 435, 434, -110, 156,
	279, 17, -347, -347, 81, -233, -400, 271, -425, -398,
	36, 80, 157, 244, 157, 80, 83, 378, 353, 417,
	379, 494, 240, 391, 243, 271, 392, 353, 417, 240,
	243, 494, 271, 353, 240, 243, 417, 271, 392, 353,
	457, 458, 243, 27, 383, 386, 387, 458, -498, 490,
	157, 114, 111, 112, 113, -367, 132, -382, 125, 126,
	127, 128, 129, 130, 131, 139, 138, 149, 142, 143,
	144, 145, 146, 147, 148, 140, 141, 135, 115, 133,
	137, 134, 117, 152, -177, -367, -375, 61, -365, -365,
	-365, -365, -340, -457, -372, -367, 83, 83, 83, 83,
	156, 102, 89, -367, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, -491, 83, 83, -379,
	-380, 83, 83, -360, -316, 83, 89, 89, 83, 83,
	83, 89, 83, 83, 83, -380, -380, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, -194, 157, -193, 83, -193, -194, -178, -177,
	32, 33, 32, 33, 32, 33, 32, 33, -591, 624,
	83, 99, 637, 224, 17, -340, 633, -340, 89, 538,
	89, 538, 483, 544, 168, 169, 170, -387, 246, -387,
	-387, -217, -340, -219, 377, 243, 530, 243, -166, -387,
	-387, -387, -387, -387, 242, -387, 24, 240, 240, 240,
	240, -387, 501, 125, 125, 59, -552, 172, 157, -541,
	-199, 83, 89, -352, 133, 137, -352, -299, 18, -299,
	24, 269, 269, 269, -352, 309, -599, -600, 17, 135,
	-350, -600, -350, -350, -352, -601, 242, 468, 43, 270,
	269, -195, -196, 22, -195, 462, 458, -442, 463, 464,
	-354, -600, -353, -352, -352, -353, -352, -352, -352, 32,
	240, 243, 494, 331, 628, -599, -599, 31, 31, -476,
	-476, -233, -476, -476, 528, -329, -340, -476, -476, -476,
	-233, -553, 245, -585, -584, 481, -587, 483, 162, -419,
	162, -419, 86, -400, 271, 271, 157, 125, 24, -420,
	125, 136, -419, -419, -420, -420, -257, 41, -339, 153,
	-340, 89, -257, 41, -582, -581, -233, -194, -178, -177,
	84, 84, 84, 538, 89, -476, -476, -476, -476, -476,
	-478, -476, -476, -476, -476, -476, -347, -209, -340, -219,
	246, -476, -476, -476, -476, -179, -180, 144, -367, -340,
	-179, -3, -137, -136, 119, 120, 122, 618, 372, 617,
	621, 615, -419, 41, -470, 399, 398, -464, -466, 83,
	-465, 83, -465, -465, -465, -465, -465, 83, 83, -467,
	83, -467, -467, -464, -468, 83, -468, -469, 83, -469,
	-468, -340, -446, 544, -373, -375, -340, 39, -487, 61,
	-174, 83, 31, 83, -200, -340, 188, 167, 632, -488,
	61, -174, 83, 31, -194, -130, 39, -196, 21, 156,
	99, 89, -110, -92, 77, -110, 84, 157, -545, 105,
	106, -548, 206, 197, -340, -108, 89, -7, -8, -9,
	-10, -47, -82, -79, -174, 233, 536, 539, -515, -513,
	83, 32, 426, 80, 17, -426, 240, 494, 377, 267,
	243, 353, -424, -407, -404, -402, -339, -400, -403, -402,
	-429, -316, 458, -131, 441, 440, 321, -367, -367, -367,
	-367, -367, 104, 115, 348, 105, 106, -362, -383, 32,
	317, 318, -363, -363, -363, -363, -363, -363, -363, -363,
	-363, -363, -363, -363, -371, -381, -457, 83, 135, 133,
	137, 134, 117, -365, -365, -363, -363, -259, -339, 153,
	84, 157, -367, -538, -537, 119, -367, -367, -367, -367,
	-340, -535, -536, 508, 509, 510, 511, 512, 513, 514,
	515, 516, 517, 518, 368, 363, 369, 367, 356, 375,
	370, 371, 190, 525, 526, 519, 520, 521, 522, 523,
	524, -373, -373, -367, -535, -373, -309, 33, 32, -375,
	-375, -375, 84, -367, -549, 346, 345, 347, -197, -340,
	-373, 84, 84, 84, 99, -375, -375, -373, -363, -373,
	-373, -373, -373, -536, -309, -309, -309, -309, 144, -375,
	-375, -309, -309, -309, -309, 144, -309, -309, -309, -309,
	-309, -309, -309, -309, -309, -309, 84, 84, 84, 144,
	-375, -195, -129, -496, -495, -367, 41, -130, -196, -592,
	625, 83, -316, -580, 89, 89, 642, 167, 633, 17,
	494, -340, 17, 240, -573, 32, 538, 99, 538, 99,
	484, 485, 166, 169, 168, 89, 115, -340, -340, 35,
	83, -209, -387, -387, -387, -557, -340, 90, -408, -405,
	-402, -340, -340, -398, -340, -329, -233, -387, -387, -387,
	-387, -233, -268, 53, 54, 55, -402, -167, 56, 57,
	-553, -540, 35, -198, -340, -573, -299, -365, -365, -367,
	-402, 271, -599, -352, -352, -330, -329, -354, -349, -354,
	-354, -299, -350, -352, -352, -367, -354, -350, -299, -340,
	458, -299, -299, -442, -352, -351, -340, -351, -387, -329,
	-330, -330, -233, -233, -280, -285, -281, -286, 263, 237,
	361, 362, 235, 233, 11, 234, -293, 310, -388, 502,
	-263, -264, 77, 42, -266, 261, 403, 396, 273, 277,
	93, 278, 436, 279, 242, 281, 282, 283, 298, 300,
	253, 284, 285, 286, 427, 287, 161, 299, 288, 289,
	290, 379, -258, 6, 334, 544, 41, 51, 52, 450,
	449, 547, 274, -340, -557, -555, 31, -340, 31, -408,
	-340, -340, 244, -187, -182, -186, -183, -188, -302, -304,
	-185, 83, -233, -177, -340, 157, 482, 484, 485, -585,
	-420, -585, -420, 244, 32, 426, -423, 426, 32, -398,
	-417, 478, 480, -413, 89, 427, -403, -422, 80, 153,
	-495, -420, -420, -422, -422, 152, 157, -583, 483, 484,
	229, -195, 99, -573, -235, -233, -557, -407, -398, -340,
	-476, -235, -235, -235, -342, -342, 83, 156, 36, -340,
	-340, -340, -340, -298, 157, -297, 17, -341, -340, 35,
	89, 156, -298, -138, -136, 121, -367, -6, 617, -367,
	-6, -6, -367, -6, -367, -474, 400, 99, 99, -319,
	89, -319, 99, 99, 99, 550, 84, 89, -411, 80,
	-489, -376, -533, 606, -202, 84, -197, -531, -532, -197,
	-201, -340, -487, -225, 125, 125, 125, -489, -202, 84,
	-531, -195, 607, -130, -192, -191, -367, -340, 24, -110,
	-92, -543, 156, 353, 157, -198, -426, -406, -403, -428,
	144, -340, -414, 157, 544, 645, 87, 244, -570, -569,
	418, 84, 157, -499, 245, 501, 89, 642, 434, 224,
	225, 104, 348, 105, 106, -457, -375, -371, -365, -365,
	-363, -363, -369, 258, -369, 114, -367, 643, -366, -537,
	121, -367, 35, 157, 35, 157, 81, 156, 84, 84,
	17, 17, 84, -367, 84, 84, 84, 84, 17, 17,
	-367, 84, 156, 84, 84, 84, 84, 81, 84, 157,
	84, 84, 84, 84, 157, -375, -375, -367, -375, 84,
	84, 84, -367, -367, -367, -375, 84, -367, -367, -367,
	-367, -367, -367, -367, -367, -367, -367, -436, 453, -436,
	-436, 157, 157, 157, 84, -130, 83, 99, 157, 638,
	-323, -322, 89, -340, -340, 167, 633, -340, 89, 633,
	-340, 89, 89, 167, 170, 170, 169, 89, 36, 24,
	308, 24, -218, -220, -221, -222, -223, -224, 135, 158,
	159, 83, -233, -233, -233, -559, 404, -571, 157, 41,
	-569, 494, -163, 321, -391, 81, -170, 17, 544, -233,
	-233, -233, -233, -247, 35, 17, -181, -234, -340, 83,
	84, 157, -399, 81, -340, -330, -299, -299, -354, -299,
	-299, 157, 23, -352, -354, -354, -225, -350, -225, 156,
	-225, -329, -463, 35, -199, 157, 21, 263, -232, -337,
	-229, -231, 248, -357, -230, 251, -527, 249, 247, 109,
	252, 306, 110, 242, -337, -337, 248, -267, 244, 35,
	-337, -283, 242, 351, 306, 249, 21, 263, -282, 242,
	110, -340, 248, 252, 249, 247, -336, 125, -328, 152,
	244, 43, 379, -336, 548, 263, -336, -336, -336, -336,
	-336, -336, -336, 280, 280, -336, -336, -336, -336, -336,
	-336, -336, -336, -336, -336, -336, 162, -336, -336, -336,
	-336, -336, -336, 83, 326, 275, 276, 308, -560, 404,
	31, 359, 359, 360, -571, 31, -171, 353, -284, -351,
	31, -305, -306, -307, -308, 68, 72, 74, 78, 69,
	70, 71, 75, 31, 157, -338, -343, 35, -340, 89,
	-338, -177, -182, -187, -338, 83, -584, -586, 486, 483,
	489, -422, -422, 99, 244, 83, 125, -422, -422, 41,
	-339, -581, 490, 484, -130, 157, 80, -235, -210, -211,
	-212, -213, -240, -316, 192, 195, 197, 198, 199, 200,
	202, 203, 204, 205, 206, 209, 210, 207, 208, 257,
	187, 188, 189, 190, 211, 173, 193, 542, 174, 175,
	176, 177, 178, 179, 182, 183, 184, 185, 181, -340,
	-219, -299, -180, -182, -340, 89, -340, 144, -299, 122,
	-6, 120, -142, -141, -140, 123, 615, 621, 122, 122,
	122, 84, 84, 84, 157, 84, 84, 84, 157, 84,
	157, 99, -502, 463, 40, 157, 83, 84, 157, 61,
	157, 125, 84, 157, -367, -340, 89, -367, 84, 61,
	-130, 89, 157, -189, 37, 38, 156, 436, -340, -513,
	84, -428, 157, 244, 156, 156, -404, 382, -339, -406,
	21, 544, -316, 39, -323, 125, 642, -340, 84, -369,
	-369, 114, -365, -362, 84, 122, -367, 120, -238, -240,
	398, 399, -367, -238, -239, -245, 153, 191, 257, 190,
	189, 187, 398, 399, -257, -340, -367, -367, 84, -367,
	-367, 17, -340, -257, -363, -367, -194, -194, 84, 84,
	-435, -436, -435, -435, 84, 84, 84, 84, -435, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 83,
	99, 101, 99, 101, -495, -593, 63, 623, 62, 426,
	104, 311, 157, 99, 89, 643, 157, 125, 89, -340,
	-340, 17, 240, -340, 17, 89, 170, 89, -572, 315,
	353, -447, 99, 315, 353, 494, 390, 84, 157, -316,
	-210, -199, 83, -199, -562, 465, 406, 416, -336, -359,
	-358, 355, 42, -481, 427, 412, 413, -405, 271, -329,
	-568, 96, 125, 80, 338, 342, 343, 339, 340, 341,
	-385, -386, -384, -388, -555, 83, 83, -174, 35, 133,
	-170, 83, 83, 35, -458, 328, -240, -233, -181, -340,
	17, 157, -554, 156, -1, -340, -398, -352, -299, -367,
	-367, -299, -352, -352, -354, -340, -225, -458, -240, 35,
	-281, 237, 234, -432, 308, 309, -433, -448, 311, -450,
	83, -237, -316, -230, -526, -527, -387, -340, 110, -526,
	110, 83, -237, -316, -316, -284, -316, -340, -340, -340,
	-340, -289, -288, -316, -291, 32, -292, -340, -340, -340,
	-340, 110, -340, 110, -262, 41, 48, 49, 50, -336,
	-336, 194, -265, 41, 426, 428, 429, -291, 99, 99,
	99, 99, 89, 89, 89, -336, -336, 99, 89, -343,
	89, -528, 169, 45, 46, 99, 99, 99, 99, 41,
	89, -270, 41, 291, 295, 292, 293, 294, 89, 99,
	41, 99, 41, 99, 41, -340, 83, -529, -530, 89,
	327, -447, -562, -336, 359, -419, 125, 125, -359, -567,
	321, -173, 494, 32, -203, 237, 234, -555, -410, -409,
	-316, -186, -186, -186, -186, 68, 68, 68, 68, 73,
	68, 73, 68, -307, -410, -188, -199, -343, 84, -578,
	-577, -576, -574, 76, 245, 77, -373, 483, 487, 488,
	-406, -355, 89, -413, -207, 24, -233, -233, -480, 301,
	302, 84, 157, -240, -301, 19, 156, -301, 118, -6,
	-138, -140, -367, -6, -367, 617, 372, 618, 89, 99,
	99, -510, 447, 442, 444, 110, -376, -497, -496, 61,
	-174, -197, -489, -532, -495, -340, 643, 643, 643, 643,
	61, -174, -489, -207, -502, -191, -190, 44, -340, 99,
	17, -403, -398, 144, 144, -340, 383, -414, 89, 405,
	89, 240, 643, 89, -323, -362, -367, 84, -248, 178,
	177, -248, 35, 84, 84, -465, -465, -464, -467, -464,
	-248, -248, 84, 84, 24, 84, 84, 84, -367, 84,
	84, 157, -485, 503, -486, 577, -435, -435, -435, -435,
	-435, -435, -435, -435, -435, -435, -435, -435, -435, -435,
	-435, -435, -378, -377, 263, 448, 630, 630, 448, 630,
	630, 84, 157, -535, 157, -331, 316, -331, -322, 89,
	244, 89, 167, -340, 89, 633, 89, -340, 89, 308,
	-340, -340, 89, 89, -222, -240, 84, 35, -226, -227,
	-228, -237, -229, -231, 35, -563, 93, -558, 89, -340,
	90, -564, 93, 407, 155, 357, 41, 408, 409, 424,
	352, 99, 99, 414, -556, -340, -172, 240, 353, -566,
	52, 125, 89, -233, -384, -328, 152, 282, 331, -296,
	-295, -340, 89, -226, -174, -233, -226, -226, -174, -459,
	330, 21, 99, 143, -200, 81, 156, -182, -234, -340,
	144, 84, -299, -225, -299, -299, -352, -459, -174, -444,
	312, 83, -442, 83, -442, 110, 339, -451, -449, 263,
	-287, 45, 47, -240, -524, -340, -522, -524, -340, -522,
	-522, -387, -367, -287, -237, 244, 31, 234, -290, 336,
	337, 342, -415, 307, 115, -415, 157, -189, 157, -340,
	-257, -257, 31, 89, 89, -235, 84, 157, 125, 99,
	89, -563, -558, 125, -420, 89, 89, -564, -568, 125,
	-236, 240, -329, 157, -203, -203, -299, 157, 125, -205,
	-204, 80, 81, -206, 80, -204, 68, 68, -299, -576,
	-575, 24, -527, -527, -527, 84, 84, 15, -212, 41,
	-300, 20, 21, 144, -300, 122, 120, 122, 122, -340,
	84, 84, -471, 608, -506, -508, 442, 21, 21, 15,
	245, 84, -489, -489, -510, 45, 46, -398, -414, 427,
	-233, 157, 643, -238, -367, 84, -367, 84, 89, 84,
	89, -194, 21, 84, 157, 84, 84, 84, 157, 84,
	84, -367, 84, -535, -332, 188, 89, -332, 353, -341,
	-340, 17, -340, 89, -447, 308, 308, 240, 238, -174,
	84, 157, -174, 89, -561, 418, 89, 89, 99, 41,
	99, 155, 410, -482, -164, 93, -235, 32, -203, -565,
	93, 125, 642, 83, -336, -336, -336, -340, 84, 157,
	-336, -336, 84, 84, 84, -255, 544, -460, 262, 99,
	143, 99, 143, 99, -338, -182, -340, -299, -554, 156,
	-299, -460, -434, 313, 99, -363, 83, -363, 83, -443,
	310, 83, 84, 157, -340, -316, -252, -251, -249, 104,
	115, 41, 396, -250, 93, 152, 296, 299, 298, 274,
	297, -279, -356, 80, 402, 336, 337, -388, 608, 532,
	247, 109, 110, 384, -357, 83, 83, 81, 316, 83,
	83, -524, 84, -287, -316, 41, -290, 41, 349, 307,
	-288, -340, 152, -257, 84, -530, 89, -535, -561, 89,
	-422, -566, 89, -164, -235, -555, -194, -409, -495, -367,
	83, -367, 83, 68, 11, 19, -360, -367, -375, 246,
	-6, 618, 372, -272, 609, 89, 21, 89, -504, 89,
	-410, -471, -133, -269, -328, 279, 84, 84, 84, -435,
	-435, -438, -437, -441, 448, 308, 456, -375, 89, 89,
	84, 84, 89, -340, 167, 89, 642, 89, -447, -447,
	-340, -214, -240, -168, 544, -255, -228, -168, 21, 544,
	356, 41, 99, 41, 411, 89, -172, 125, 105, 106,
	-324, -325, 89, -393, -395, -316, 83, -257, -259, 89,
	-295, -360, -360, -253, -174, 35, -254, -293, -388, 544,
	-132, -131, -253, 544, 83, -461, 161, 99, 143, 99,
	99, -299, -299, -461, -450, 21, 84, -429, 84, -429,
	83, 125, -363, -449, -452, 61, -249, 104, -363, 89,
	-259, -260, 41, 295, 291, 125, 125, -261, 41, 275,
	276, -271, 83, 306, 15, 194, 83, 110, 110, -233,
	-393, -393, -525, 338, 339, 340, 344, 342, 343, 341,
	-525, -393, -393, 83, -416, -415, -363, -336, -336, 152,
	-565, -195, -198, -523, -340, 247, 21, 21, -340, -340,
	-320, 610, 99, 89, 444, -272, -472, 611, -500, -442,
	-257, 125, 84, -440, 117, 410, 414, -361, -364, 99,
	101, 186, 155, 84, 84, -340, -327, -326, 89, 89,
	89, 308, 543, -169, 60, 490, 89, 90, 405, 89,
	90, 356, -164, 89, 643, 157, 125, 84, 157, -464,
	-367, -430, 263, -174, 157, -293, -328, -133, -430, -256,
	-294, -340, 89, -479, 169, 329, 544, 99, 143, 99,
	-194, -462, 169, 329, -433, 84, 84, 84, -429, 99,
	84, -456, -453, 83, -293, 265, 135, 89, 89, 99,
	83, -490, 31, 89, -394, 83, 84, 84, 84, 84,
	-393, 99, -257, -336, 84, 84, 157, 83, 21, -320,
	-473, 612, 89, -509, 447, -503, -501, 442, 443, 444,
	445, 89, -439, -440, 414, -361, -364, 606, 454, 454,
	454, 643, 157, 125, -447, -216, -340, 306, 427, -325,
	89, -396, -395, -189, 84, -431, 315, 21, -293, -336,
	-431, 84, 157, -336, -336, 329, 99, 143, 99, -195,
	329, -445, 314, 84, -456, -293, -455, -454, 313, 266,
	83, 84, -367, -379, -336, 84, -274, -273, 540, -393,
	-396, 81, -396, 81, -396, 81, -396, 81, 84, -257,
	-340, 247, -321, -340, -504, 89, -511, 245, -507, -508,
	446, -501, 21, 444, 21, 21, -134, 157, 114, 455,
	455, 455, -326, 89, 89, -215, 35, 449, 383, -397,
	253, 349, 350, 93, 544, 336, 337, -189, 21, -432,
	-257, -294, -360, -360, 99, 99, 84, 157, -340, 262,
	83, -374, -368, -367, 262, 84, -340, -278, -276, -277,
	80, 461, 304, 305, 84, -525, -525, -525, -525, -279,
	84, 157, -518, 83, 99, -506, -505, -507, 21, -504,
	21, -504, -504, 451, -439, 89, -336, -336, 89, 89,
	335, -316, 83, -444, -454, -453, -374, 84, 157, -415,
	-277, 80, -276, 80, 16, 15, -396, -396, -396, -396,
	-340, -521, 31, 84, -517, -516, -317, -512, -340, 447,
	448, 89, -504, 125, -596, -595, 629, 99, 99, -340,
	-429, -434, 84, -368, -275, 301, 302, 31, 169, -275,
	-520, -519, -318, 84, 157, 156, 89, 89, 84, -450,
	104, 41, 303, 157, 125, -516, -340, -519, 41, -367,
	156, -340,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 309, 310, 311, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 0, 0,
	0, 0, 0, 683, 684, 0, 647, 0, 0, 0,
	0, 0, 0, 530, 531, 532, 533, 534, 535, 536,
	537, 538, 539, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 0, 334, 330, 253,
	254, 255, 256, 257, 258, 341, 342, 507, 0, 0,
	0, 0, 766, -2, 97, 0, 0, 0, 0, 323,
	0, 314, 314, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, -2, 696, 0, 648,
	649, 650, 651, 652, 653, 654, 655, 656, 657, 658,
	659, 660, 661, 662, 663, 664, 394, 395, 396, 390,
	391, 393, 392, -2, 0, 0, 696, 0, 0, 0,
	774, 0, 0, 0, 817, 839, 23, 0, 7, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	0, 19, 0, 19, 0, 0, 0, 1350, 1351, 1352,
	1353, 2135, 2105, -2, 1876, 1853, 2029, 2030, 1930, 1941,
	2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175,
	2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185,
	2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195,
	2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205,
	2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215,
	1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819,
	1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829,
	1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839,
	1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849,
	1850, 1851, 1852, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
	1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870,
	1871, 1872, 1873, 1874, 1875, 1877, 1878, 1879, 1880, 1881,
	1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891,
	1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
	1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
	1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
	1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1931, 1932,
	1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1943, 1944,
	1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
	1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964,
	1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974,
	1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
	1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
	1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
	2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
	2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024,
	2025, 2026, 2027, 2028, 2031, 2032, 2033, 2034, 2035, 2036,
	2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,
	2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
	2057, 2058, 2059, 2060, 2061, -2, 2063, 2064, 2065, 2066,
	2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076,
	2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086,
	2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096,
	2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2106, 2107,
	2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117,
	2118, 2119, 2120, -2, -2, -2, 2124, 2125, 2126, 2127,
	2128, 2129, 2130, 2131, 2132, 2133, 2134, 2136, 2137, 2138,
	2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148,
	2149, 2150, 2151, 2152, 2153, 2154, 2155, 0, 307, 305,
	1823, 1853, 1876, 1930, 1941, 1942, 1977, 2029, 2030, 2062,
	2105, 2121, 2122, 2123, 2135, 0, 0, 952, 0, 744,
	0, 0, 749, 1299, 744, 335, 685, 686, 774, 800,
	645, 0, 372, 0, 1867, 376, 2112, 0, 0, 0,
	642, 366, 367, 368, 369, 370, 371, 0, 0, 925,
	0, 0, 362, 0, 329, 1932, 2134, 1354, 0, 0,
	0, 0, 0, 196, 1076, 198, 1078, 202, 210, 0,
	0, 0, 215, 216, 219, 220, 221, 222, 223, 0,
	227, 0, 229, 232, 0, 234, 235, 0, 238, 239,
	240, 0, 250, 251, 252, 1079, 1080, 1081, -2, 125,
	950, 1781, 1667, 0, 1674, 1687, 1698, 1431, 1432, 1433,
	1434, 0, 0, 0, 0, 0, 0, 1442, 1443, 0,
	1471, 2170, 2211, 2212, 0, 1451, 1452, 1453, 1454, 1455,
	1456, 136, 148, 149, 1720, 1721, 1722, 1723, 1724, 1725,
	1726, 0, 1728, 1729, 1730, 1638, 1418, 1350, 0, 2179,
	0, 2201, 2206, 2207, 2208, 2209, 2200, 0, 0, 1623,
	0, 1613, 0, 0, -2, -2, 0, 0, 2002, -2,
	2213, 2214, 2215, 2176, 2197, 2205, 2180, 2181, 2204, 2172,
	2173, 2174, 2167, 2168, 2169, 2171, 2183, 2185, 2196, 0,
	2192, 2202, 2203, 2110, 0, 0, 0, 0, 0, 2152,
	150, 151, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1634,
	-2, -2, 1637, -2, 1640, -2, -2, -2, -2, 1645,
	1646, -2, 1648, -2, -2, -2, -2, -2, -2, -2,
	1625, 1626, 1627, 1628, 1617, 1618, 1619, 1620, 1621, 1622,
	-2, -2, -2, 800, 875, 0, 800, 0, 775, 822,
	825, 828, 831, 778, 0, 0, 98, 99, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 324, 325, 313,
	315, 0, 319, 0, 312, 1112, 1112, 1112, 0, 0,
	0, 0, 1112, 1112, 1112, 1112, 1112, 0, 1112, 0,
	0, 0, 0, 0, 1112, 0, 985, 1083, 1084, 1085,
	1110, 1111, 1184, 0, 0, 0, 701, 697, 698, 699,
	700, 788, 0, 790, 793, 0, 622, 622, 848, 848,
	568, 0, 0, 0, 622, 0, 582, 574, 0, 0,
	0, 622, 0, 0, 795, 795, 0, 625, 632, 622,
	622, -2, 622, 622, 619, 622, 0, 0, 1124, 588,
	589, 590, 574, 574, 593, 594, 595, 605, 606, 633,
	1805, 0, 0, 507, 507, 0, 507, 507, 0, 507,
	507, 507, 0, 703, 1972, 1874, 1947, 1833, 1932, 2134,
	0, 280, 2002, 285, 0, 1875, 1894, 0, 0, 1912,
	0, -2, 0, 351, 800, 0, 0, 774, 0, 0,
	0, 0, 507, 507, 507, 507, 507, 1183, 507, 507,
	507, 507, 507, 0, 0, 0, 507, 507, 507, 507,
	0, 0, 840, 841, 836, 837, 838, 842, 843, 5,
	6, 19, 0, 0, 0, 0, 0, 0, 104, 103,
	0, 1782, 1800, 1733, 1734, 1735, 1787, 1737, 1791, 1791,
	1791, 1791, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1791, 1791, 0, 0, 1780, 1757, 1789, 1789,
	1789, 1787, 1784, 1738, 1739, 1740, 1741, 1742, 1743, 1744,
	1745, 1746, 1747, 1748, 1749, 1750, 1751, 1794, 1794, 1797,
	1797, 1794, 0, 408, 406, 407, 1663, 0, 0, 0,
	0, 744, 748, 1297, 0, 0, 0, 800, -2, 0,
	0, 646, 373, 1355, 0, 0, 377, 0, 378, 0,
	0, 0, 397, 0, 400, 385, 386, 387, 381, 0,
	176, 0, 364, 365, 0, 0, 331, 0, 0, 0,
	508, 0, 0, 0, 0, 0, 0, 207, 203, 211,
	214, 224, 231, 0, 243, 245, 248, 204, 212, 217,
	218, 225, 246, 205, 208, 209, 213, 247, 249, 206,
	226, 230, 244, 228, 233, 236, 237, 242, 0, 177,
	0, 0, 0, 0, 0, 1673, 0, 0, 1706, 1707,
	1708, 1709, 1710, 1711, 1712, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 1667, 0, 0, 1437, 1438,
	1439, 1440, 0, 1444, 0, 1472, 0, 0, 0, 0,
	0, 1727, 1731, 0, 1663, 1663, 0, 1663, 1659, 0,
	0, 0, 0, 0, 0, 1663, 1596, 0, 0, 1598,
	1614, 0, 0, 1600, 1601, 0, 1604, 1605, 1663, 0,
	1663, 1609, 1663, 1663, 1663, 1592, 1593, 0, 1659, 1659,
	1659, 1659, 0, 0, 1659, 1659, 1659, 1659, 1659, 1659,
	1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 0, 0,
	0, 0, 795, 0, 801, 0, -2, 0, 819, 821,
	823, 824, 826, 827, 829, 830, 832, 833, 780, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 322, 0, 0, 0,
	0, 0, 949, 0, 0, 1112, 1112, 1112, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 1112, 1112, 1112,
	1112, 0, 1130, 0, 0, 0, 703, 702, 0, 789,
	0, 0, 0, 848, 0, 0, 565, 566, 0, 567,
	0, 574, 622, 622, 580, 581, 576, 575, 628, 629,
	625, 0, 625, 625, 848, 0, 599, 600, 601, 622,
	622, 607, 796, 0, 608, 609, 625, 0, 630, 631,
	848, 0, 0, 848, 848, 0, 617, 618, 620, 622,
	0, 0, 1112, 0, 638, 576, 576, 1806, 1807, 0,
	0, 1121, 0, 0, 0, 0, 641, 0, 0, 0,
	0, 0, 704, 259, 263, 0, 266, 0, 1972, 0,
	1972, 0, 0, 273, 0, 0, 0, 0, 0, 0,
	303, 304, 0, 0, 0, 0, 294, 297, 1291, 1292,
	1073, 1074, 298, 299, 343, 344, 0, 795, 818, 820,
	814, 815, 816, 0, 0, 0, 0, 0, 0, 0,
	507, 0, 0, 0, 0, 0, 679, 0, 965, 681,
	0, 0, 0, 0, 0, 856, 850, 852, 920, 136,
	856, 8, 121, 118, 0, 19, 0, 0, 19, 19,
	0, 19, 308, 0, 1803, 1801, 1802, 1736, 1788, 0,
	1762, 0, 1763, 1764, 1765, 1776, 1777, 0, 0, 1758,
	0, 1759, 1760, 1761, 1752, 0, 1753, 1754, 0, 1755,
	1756, 306, 405, 0, 0, 1664, 953, 0, 722, 736,
	717, 0, 725, 0, 0, 1299, 0, 0, 0, 705,
	736, 707, 0, 725, 795, 772, 0, 750, 0, 0,
	374, 0, 382, 379, 0, 383, 0, 0, 399, 401,
	402, 403, 388, 389, 643, 360, 361, 352, 353, 354,
	355, 356, 357, 358, 359, 0, 0, 0, 363, 146,
	0, 332, 333, 0, 0, 0, 190, 191, 192, 193,
	194, 195, 197, 181, 668, 670, 1065, 1077, 0, 1068,
	0, 200, 241, 173, 0, 0, 0, 1668, 1669, 1670,
	1671, 1672, 1677, 0, 1679, 1681, 1683, 1685, 0, 1703,
	-2, -2, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
	1427, 1428, 1429, 1430, 1688, 1701, 1702, 0, 0, 0,
	0, 0, 0, 1699, 1699, 1694, 0, 1457, 1293, 1294,
	1435, 0, 0, 1469, 1473, 0, 0, 0, 0, 0,
	137, 1658, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
	1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580,
	1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
	1591, 0, 0, 1667, 0, 0, 0, 1660, 1661, 0,
	0, 0, 1551, 0, 0, 1557, 1558, 1559, 0, 731,
	0, 1624, 1597, 1615, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 876, 0, 740, 742, 743, 769, 750, 776,
	0, 0, 0, 96, 101, 0, 1151, 0, 0, 0,
	0, 0, 0, 0, 71, 73, 0, 1125, 0, 1127,
	326, 327, 0, 0, 321, 0, 0, 0, 0, 0,
	-2, 0, 0, 0, 0, 0, 1001, 1002, 505, 1059,
	0, 0, 0, 1075, 1100, 1108, 0, 0, 0, 0,
	0, 1157, 987, 992, 993, 994, 988, 989, 995, 996,
	0, 791, 0, 0, 889, 70, 564, 623, 624, 849,
	571, 1932, 576, 848, 848, 583, 577, 584, 627, 585,
	586, 587, 625, 848, 848, 797, 622, 625, 610, 626,
	625, 1299, 614, 0, 621, 1299, 639, 1299, 0, 637,
	591, 592, 1159, 793, 421, 422, 424, 426, 0, 475,
	475, 475, 458, 475, 0, 0, 446, 1808, 0, 0,
	0, 0, 455, 1808, 0, 0, 1808, 1808, 1808, 1808,
	1808, 1808, 1808, 0, 0, 1808, 1808, 1808, 1808, 1808,
	1808, 1808, 1808, 1808, 1808, 1808, 0, 1808, 1808, 1808,
	1808, 1808, 1276, 1808, 0, 474, 1122, 465, 466, 467,
	468, 473, 0, 0, 502, 0, 0, 1000, 0, 505,
	0, 1042, 0, 861, 0, 862, 863, 859, 891, 915,
	915, 0, 915, 895, 1299, 0, 0, 271, 272, 260,
	0, 261, 0, 0, 274, 275, 0, 277, 278, 279,
	286, 1874, 1947, 281, 283, 0, 0, 287, 300, 301,
	302, 0, 0, 292, 293, 0, 0, 346, 347, 349,
	0, 750, 1126, 72, 665, 1295, 666, 667, 671, 0,
	0, 674, 675, 676, 677, 678, 967, 0, 0, 1051,
	1052, 1053, 1054, 848, 0, 857, 0, 853, 921, 0,
	923, 0, 848, 0, 119, 19, 0, 112, 109, 0,
	0, 0, 0, 0, 1783, 1732, 1804, 0, 0, 0,
	1785, 0, 0, 0, 0, 0, 102, 752, 712, 0,
	716, 733, 0, 737, 0, 0, 729, 721, 726, 0,
	0, 746, 713, 1298, 0, 0, 0, 706, 0, 0,
	711, 750, 0, 773, 802, 803, 806, 1356, 0, 384,
	380, 398, 0, 507, 0, 0, 0, 184, 1062, 0,
	185, 189, 179, 0, 0, 0, 1067, 0, 1064, 1069,
	0, 199, 0, 0, 174, 175, 1142, 1151, 0, 0,
	0, 1678, 1680, 1682, 1684, 1686, 0, 1689, 1699, 1699,
	1695, 0, 1690, 0, 1692, 0, 1668, 1441, 0, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 1541, 1542,
	0, 0, 1546, 0, 1548, 1549, 1550, 1552, 0, 0,
	0, 1556, 0, 1595, 1616, 1599, 1602, 0, 1606, 0,
	1608, 1610, 1611, 1612, 0, 800, 800, 0, 0, 1513,
	1513, 1513, 0, 0, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1458, 0, 1459,
	1460, 0, 0, 0, 877, 770, 0, 0, 0, 0,
	0, 1149, 0, 86, 0, 0, 0, 0, 91, 0,
	0, 74, 75, 328, 316, 318, 0, 0, 1113, 0,
	0, 0, 0, 0, 955, 956, 958, 0, 961, 962,
	963, 967, 793, 0, 793, 1012, 1808, 509, 0, 0,
	1061, 0, 1031, 0, 0, 0, -2, 0, 0, 1108,
	0, 0, 0, 1161, 0, 0, 0, 690, 694, 23,
	794, 0, 569, 0, 570, 622, 578, 579, 848, 602,
	603, 0, 0, 848, 622, 622, 613, 625, 634, 0,
	635, 1299, 1161, 0, 0, 1121, 1227, 1195, 436, 0,
	1311, 1312, 476, 0, 1318, 1327, 1112, 1388, 0, 1327,
	0, 0, 1329, 1330, 0, 0, 0, 0, 459, 460,
	0, 445, 0, 0, 0, 0, 0, 0, 444, 0,
	0, 486, 0, 0, 0, 0, 0, 1809, 1808, 1808,
	0, 453, 454, 0, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 1808, 1808, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1267, 0, 0, 0,
	0, 0, 0, 0, 0, 1283, 1284, 0, 1012, 1808,
	0, 0, 0, 0, 509, 1029, 1047, 0, 423, 483,
	0, 0, 0, 0, 0, 881, 0, 0, 0, 880,
	0, 0, 0, 0, 0, 793, 916, 0, 918, 919,
	893, -2, 0, 861, 898, 1663, 264, 265, 0, 0,
	270, 288, 290, 262, 0, 0, 0, 289, 291, 295,
	296, 345, 348, 350, 812, 0, 0, 1185, 0, 968,
	969, 971, 972, 0, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1858, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 966,
	682, 846, 851, 858, 922, 924, 137, 854, 846, 0,
	122, 19, 121, 113, 114, 0, 19, 0, 0, 0,
	0, 1793, 1792, 1778, 0, 1779, 1790, 1795, 0, 1798,
	0, 409, 756, 0, 0, 736, 738, 0, 0, 736,
	0, 0, 745, 0, 0, 0, 0, 0, 0, 736,
	812, 752, 0, 809, 807, 808, 0, 0, 644, 147,
	404, 0, 0, 0, 0, 0, 669, 0, 1066, 181,
	0, 0, 201, 0, 0, 0, 1151, 1146, 1662, 1691,
	1693, 0, 1700, 1696, 1436, 1445, 1470, 0, 0, 1476,
	1488, 1488, 0, 0, 0, 1479, 1791, 1791, 1482, 1787,
	1789, 1787, 1488, 1488, 0, 138, 0, 0, 1547, 0,
	0, 0, 732, 0, 0, 0, 1509, 1511, 1513, 1513,
	1520, 1514, 1521, 1522, 1513, 1513, 1513, 1513, 1527, 1513,
	1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1507,
	0, 0, 1721, 1722, 741, 0, 0, 783, 784, 785,
	786, 787, 0, 0, 61, 61, 1151, 0, 95, 87,
	0, 0, 0, 0, 0, 76, 320, 0, 77, 78,
	0, 0, 85, 0, 0, 0, 0, 0, 960, 0,
	0, 0, 1304, 0, 1016, 1013, 1014, 1015, 0, 1056,
	510, 511, 512, 513, 0, 0, 0, 1060, 0, 0,
	1024, 0, 0, 0, 1101, 1102, 1103, 1104, 1105, 1106,
	1107, -2, 1116, 0, 0, 0, 1304, 1135, 0, 0,
	1140, 1304, 1304, 0, 1169, 0, 1158, 744, 0, -2,
	0, 0, 692, 0, 0, 890, 572, 848, 596, 798,
	799, 1299, 848, 848, 622, 640, 636, 1169, 1160, 0,
	425, 475, 0, 1215, 0, 0, 1221, 0, 1228, 429,
	0, 477, 0, 1317, 1344, 1328, 1344, 1389, 1344, 1344,
	1112, 0, 477, 0, 0, 447, 0, 0, 0, 0,
	0, 443, 480, 806, 430, 432, 433, 434, 484, 485,
	487, 0, 489, 490, 449, 461, 462, 463, 464, 0,
	0, 0, 456, 469, 470, 471, 472, 431, 1244, 1245,
	1246, 1249, 1250, 1251, 1252, 0, 0, 1255, 1256, 1257,
	1258, 1259, 1341, 1342, 1343, 1260, 1261, 1262, 1263, 1264,
	1265, 1266, 1285, 1286, 1287, 1288, 1289, 1290, 1268, 1269,
	1270, 1271, 1272, 1273, 1274, 1275, 0, 0, 1280, 0,
	0, 0, 1016, 0, 0, 0, 0, 0, 1056, 1031,
	0, 1049, 0, 1043, 1044, 0, 0, 714, 848, 338,
	0, 885, 878, 0, 867, 882, 883, 884, 870, 0,
	872, 0, 868, 869, 848, 860, 892, 917, 894, 897,
	899, 900, 906, 0, 0, 0, 0, 267, 268, 269,
	276, 0, 529, 282, 768, 0, 1296, 672, 673, 1186,
	1187, 680, 0, 973, 844, 0, 0, 844, 117, 120,
	0, 115, 0, 0, 0, 0, 107, 105, 1786, 0,
	0, 758, 161, 0, 0, 0, 734, 0, 739, 736,
	720, 730, 719, 727, 728, 747, 1300, 1301, 1302, 1303,
	736, 710, 709, 771, 756, 804, 805, 0, 1357, 375,
	0, 1063, 181, 186, 187, 188, 182, 180, 1070, 0,
	1072, 0, 1144, 0, 0, 1697, 1475, 1446, 1477, 1489,
	1490, 1478, 0, 1448, 1449, 1480, 1481, 1483, 1484, 1485,
	1486, 1487, 1450, 1543, 0, 1545, 1553, 1554, 0, 1603,
	1607, 0, 0, 0, 0, 0, 1518, 1519, 1523, 1524,
	1525, 1526, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535,
	1536, 1537, 800, 1508, 0, 0, 0, 0, 0, 0,
	0, 781, 0, 0, 0, 63, 0, 63, 1150, 1152,
	0, 920, 0, 0, 92, 0, 0, 79, 80, 0,
	0, 0, 948, 951, 957, 959, 0, 0, 0, 1305,
	1306, 1308, 1309, 1310, 0, 984, 0, 0, 1004, 1005,
	1006, 1018, 0, 0, 0, 515, 516, 0, 0, 0,
	528, 524, 525, 526, 506, 1055, 1038, 0, 0, 1027,
	0, 0, 1037, 0, 1117, 1808, 1808, 1808, 0, 0,
	1229, 1808, 1808, 0, 1137, 1139, 0, 0, 1233, 1172,
	0, 0, 1163, 0, 915, 0, 0, 848, 691, 694,
	695, 792, 573, 611, 615, 612, 848, 1172, 420, 1193,
	0, 0, 0, 0, 0, 1225, 0, 0, 1197, 0,
	448, 478, 0, -2, 0, 1345, 0, 1331, 1345, 0,
	0, 1344, 0, 437, 477, 0, 0, 0, 491, 495,
	496, 0, 493, 1384, 0, 494, 0, 482, 0, 488,
	1247, 1248, 0, 1253, 1254, 0, 1278, 0, 0, 0,
	428, 497, 0, 0, 0, 498, 499, 504, 1024, 0,
	1038, 0, 1048, 0, 1045, 1046, 800, 0, 0, 864,
	886, 0, 0, 865, 0, 866, 871, 873, 337, 901,
	0, 0, 903, 904, 905, 896, 284, 813, 970, 0,
	834, 0, 0, 855, 835, 0, 19, 0, 0, 110,
	1796, 1799, 760, 0, 757, 162, 0, 0, 0, 0,
	724, 735, 718, 708, 758, 810, 811, 183, 178, 1071,
	1154, 0, 1145, 0, 0, 1555, 0, 1513, 1510, 1513,
	1512, 1504, 0, 1461, 0, 1463, 1464, 1465, 0, 1467,
	1468, 0, 779, 0, 59, 0, 62, 60, 0, 94,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 990,
	1233, 0, 990, 1017, 1003, 0, 1057, 1058, 0, 517,
	518, 0, 521, 527, 1019, 0, 0, 1021, 1022, 1023,
	0, 0, 1035, 0, 0, 0, 0, 1109, 1123, 0,
	0, 0, -2, 0, -2, 1134, 0, 1178, 0, 1170,
	0, 1162, 0, 1165, 848, 848, -2, 688, 693, 0,
	616, 1178, 1195, 0, 1216, 0, 0, 0, 0, 0,
	0, 0, 1196, 0, 1209, 479, 1346, -2, 1360, 1362,
	0, 1122, 1365, 1366, 0, 0, 0, 0, 0, 0,
	1410, 1374, 0, 0, 1378, 1379, 1380, 0, 0, 1383,
	0, 1715, 1716, 0, 1387, 0, 0, 0, 0, 0,
	0, 0, 1325, 438, 439, 0, 441, 442, 1808, 1385,
	481, 435, 1808, 451, 1277, 1281, 1282, 1279, 503, 500,
	501, 1027, 1030, 1041, 1050, 715, 795, 339, 340, 887,
	0, 879, 910, 907, 0, 0, 974, 845, 847, 111,
	116, 0, 0, 762, 0, 759, 0, 753, 755, 172,
	723, 760, 132, 164, 0, 0, 1447, 1544, 1594, 1516,
	1517, 0, 1505, 0, 1499, 1500, 1501, 1506, 0, 0,
	782, 777, 64, 90, 0, 93, 68, 81, 0, 0,
	0, 0, 976, 983, 997, 1128, 1307, 982, 0, 0,
	514, 519, 0, 522, 523, 1039, 1038, 0, 1025, 1026,
	0, 1033, 0, 0, 1096, 1787, 0, 1118, 1119, 1120,
	1230, 1231, 1232, 1188, 1136, 0, -2, 1241, 0, 0,
	1132, 1154, 1188, 0, 0, 1166, 0, 1173, 0, 1171,
	1164, 800, 689, 1175, 427, 1227, 1217, 0, 1219, 0,
	0, 0, 0, 1198, -2, 0, 1361, 1363, 1364, 1367,
	1368, 1369, 1415, 1416, 1417, 0, 0, 1372, 1412, 1413,
	1414, 1373, 0, 0, 0, 0, 0, 1713, 1714, 1408,
	0, 0, 1332, 1334, 1335, 1336, 1337, 1338, 1339, 1340,
	1333, 0, 0, 0, 1324, 1326, 440, 0, 0, 1808,
	1040, 336, 0, 0, 911, 913, 908, 909, 106, 108,
	123, 0, 761, 163, 0, 762, 134, 0, 155, 0,
	1155, 0, 1515, 1502, 0, 0, 0, 0, 0, 1717,
	1718, 1719, 0, 1462, 1466, 89, 0, 66, 0, 82,
	83, 0, 0, 0, 998, 999, 1007, 1008, 0, 1010,
	1011, 520, 1020, 1028, 1032, 1035, 0, 1087, 0, 806,
	0, 1190, 0, 1138, 1121, 1243, 1808, 1141, 1190, 0,
	1235, 1808, 1808, 1156, 0, 1168, 0, 1180, 0, 1174,
	795, 419, 0, 1177, 1213, 1218, 1220, 1222, 0, 1226,
	1224, 1199, -2, 0, 1207, 0, 0, 1370, 1371, 0,
	0, 1613, 1808, 0, 1403, 0, 1087, 1087, 1087, 1087,
	0, 492, 450, 0, 888, 902, 0, 0, 0, 751,
	124, 0, 133, 152, 0, 165, 166, 0, 0, 0,
	0, 1147, 0, 1491, 0, 0, 0, 1495, 1496, 1497,
	1498, 65, 68, 0, 0, 0, 975, 0, 1009, 1034,
	1036, 1086, 1097, 1098, 806, 1131, 0, 1227, 1242, 0,
	1133, 1234, 0, 0, 0, 1167, 1179, 0, 1182, 687,
	1176, 1194, 0, 1223, 1200, 1208, 0, 1203, 0, 0,
	0, 1411, 0, 1377, 0, 1382, 1391, 1404, 0, 0,
	1313, 0, 1315, 0, 1319, 0, 1321, 0, 0, 452,
	912, 914, 0, 764, 754, 135, 139, 0, 161, 158,
	0, 167, 0, 0, 0, 0, 1143, 0, 0, 1492,
	1493, 1494, 67, 69, 84, 0, 977, 978, 991, 1088,
	1808, 1808, 0, 0, 0, 1094, 1095, 1099, 0, 1215,
	1247, 1236, 1237, 1238, 1181, 1214, 1202, 0, -2, 1210,
	0, 0, 1665, 1675, 1676, 1375, 1381, 1390, 1392, 1393,
	0, 1405, 1406, 1407, 1409, 1087, 1087, 1087, 1087, 1323,
	763, 0, 126, 0, 0, 156, 157, 159, 0, 168,
	0, 170, 171, 0, 1503, 979, 0, 0, 1091, 1092,
	0, 1191, 0, 1193, 1204, -2, 0, 1212, 0, 1376,
	1394, 0, 1395, 0, 0, 0, 1314, 1316, 1320, 1322,
	765, 1153, 0, 140, 0, 142, 144, 145, 1347, 153,
	154, 160, 169, 0, 964, 980, 0, 1089, 1090, 1093,
	0, 1195, 1211, 1666, 1396, 1398, 1399, 0, 0, 1397,
	127, 128, 0, 141, 0, 0, 1148, 981, 1192, 1189,
	1400, 1402, 1401, 0, 0, 143, 1348, 129, 130, 131,
	0, 1349,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 644, 641,
	126, 125, 127, 3, 645, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 642, 138, 643, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:825
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:832
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:838
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:846
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:852
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:856
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:871
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:875
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:881
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:886
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:890
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:923
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:937
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:948
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:960
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:964
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:969
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:973
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:979
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    yyDollar[4].str,
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:993
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:997
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1001
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1005
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1012
		{
			yyLOCAL = &tree.ShowCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1021
		{
			yyLOCAL = &tree.PauseCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1030
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].str, yyDollar[4].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1036
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1043
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1052
		{
			yyLOCAL = &tree.ResumeCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1061
		{
			yyLOCAL = &tree.RestartCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1070
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1080
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1090
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1102
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1112
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1122
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1133
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1144
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1158
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1166
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1174
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1182
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1191
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1201
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1213
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1221
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1230
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1240
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1250
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1260
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1280
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1286
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1293
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1301
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1307
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1316
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1326
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1334
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1342
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1350
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1360
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1368
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1378
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1385
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1394
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1404
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1408
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1414
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1418
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1424
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1433
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1443
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1447
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1453
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1462
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1466
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1472
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1493
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1507
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1514
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1518
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1524
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1528
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1534
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1541
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1549
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1553
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1565
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1569
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1583
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1587
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1592
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1599
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1603
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1607
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1613
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1622
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1633
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1637
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1643
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1647
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1653
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1657
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1663
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1687
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1706
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1710
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1714
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1719
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1723
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1732
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1742
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1749
		{
			yyVAL.str = yyDollar[3].str
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1754
		{
			yyVAL.str = "\n"
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1761
		{
			yyVAL.str = yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1766
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1770
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1798
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1802
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1808
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1816
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1836
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1855
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1880
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1884
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1888
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1893
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1897
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1903
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1916
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1927
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1940
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1944
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1954
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1967
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1980
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1986
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1992
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2000
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2010
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2020
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2024
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2028
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2032
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2036
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2040
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2047
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2051
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2057
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2064
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2073
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2077
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2083
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2087
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2091
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2095
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2099
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2103
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2107
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2111
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2115
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2119
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2123
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2127
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2131
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2135
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2139
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2143
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2147
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2151
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2155
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2159
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2163
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2167
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2171
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2175
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2179
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2183
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2187
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2191
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2195
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2199
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2203
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2207
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2211
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2215
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2219
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2223
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2227
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2231
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2235
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2239
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2243
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2247
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2251
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2255
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2259
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2263
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2267
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2271
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2275
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2279
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2283
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2297
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2304
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2311
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2320
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2338
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2342
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2348
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2355
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2363
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2367
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2371
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2375
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2381
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2385
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2391
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2398
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2405
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2414
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2444
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2448
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2452
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2458
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2464
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2468
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2475
		{
			yyVAL.str = yyDollar[3].str
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2481
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2485
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2491
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2499
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2508
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2517
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2525
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2533
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2556
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2579
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2586
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2593
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2601
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2608
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2615
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2624
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2628
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2632
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2638
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2642
		{
			yyVAL.str = yyDollar[1].str
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2648
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2652
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2658
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2662
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2673
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2679
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2684
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2688
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2692
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2696
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2700
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2704
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2708
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2712
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2716
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2722
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2726
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2730
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2734
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2739
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2744
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2750
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2763
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2776
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2789
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2802
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2818
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2825
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2836
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2847
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2851
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2857
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2867
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2873
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2877
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2883
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2889
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2893
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2897
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2901
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2907
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2920
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2926
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2930
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2936
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2940
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2946
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2952
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2963
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2969
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2973
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2977
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2981
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2985
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2989
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2997
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3005
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3015
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3027
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3031
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3039
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3047
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3086
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3090
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3096
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3102
		{
			yyVAL.str = yyDollar[1].str
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3107
		{
			yyVAL.str = "true"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3108
		{
			yyVAL.str = "false"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3109
		{
			yyVAL.str = yyDollar[1].str
		}
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3114
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3120
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3129
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3136
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3144
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3148
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3172
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3195
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3205
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3212
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3219
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[5].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3229
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3233
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3239
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3243
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3267
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3277
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3287
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3303
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3321
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3325
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3331
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3335
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3341
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3347
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3355
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3365
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3373
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3383
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3393
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3403
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3410
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3414
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3418
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3422
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3426
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3433
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3439
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3443
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3447
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3451
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3455
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3459
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3463
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3467
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3472
		{
			yyVAL.str = ""
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3503
		{
			yyVAL.str = ""
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3507
		{
			yyVAL.str = string("COLUMN")
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3512
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3518
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3524
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3532
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3536
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3542
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3550
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3557
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3563
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3569
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3575
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3581
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3588
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3595
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3603
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3609
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3621
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3627
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3635
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3639
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3646
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3664
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3679
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3694
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3709
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3722
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3728
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3739
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3752
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3756
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3764
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3768
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3773
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3777
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3793
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3797
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3801
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3805
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3812
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3816
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3820
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3824
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3831
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3835
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3842
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3846
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3850
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3854
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3861
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3868
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3874
		{
			yyVAL.item = nil
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3879
		{
			yyVAL.item = nil
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3924
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3933
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3941
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3949
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3957
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3961
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3965
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				&tree.Role{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3976
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3980
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3986
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3991
		{
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3995
		{
		}
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4000
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4010
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4020
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4028
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4034
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4040
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4046
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4052
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4058
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4064
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4073
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4077
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4081
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4085
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4089
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4093
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4097
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4101
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4107
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4116
		{
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4118
		{
		}
	case 602:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4127
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4137
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4146
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4150
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4154
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4160
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4166
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4172
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4178
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4187
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4198
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4210
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4218
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4224
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4236
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4250
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4256
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4262
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4269
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4273
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4278
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4282
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4286
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4291
		{
			yyVAL.str = ""
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4295
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4301
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4316
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4320
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4326
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4334
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4341
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4349
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4355
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4361
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4366
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4374
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4380
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4385
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4391
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4397
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4401
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4429
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4437
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4445
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4453
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4457
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4463
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4476
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4484
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4493
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4499
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4507
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4515
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4523
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4529
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4537
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4543
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4551
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4557
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4567
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4572
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4579
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4595
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4608
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4619
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4623
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4629
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4635
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4644
		{
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4646
		{
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4649
		{
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4658
		{
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4662
		{
		}
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4667
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4676
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4683
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4689
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4697
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4704
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4711
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4731
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4739
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4749
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4753
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4759
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4766
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4772
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4780
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4787
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4794
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4813
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4817
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4821
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4826
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4830
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4834
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4840
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4849
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4853
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4859
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4863
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4869
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4873
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4879
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4884
		{
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4888
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4895
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4899
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4906
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4911
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4915
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4921
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4925
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4931
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4935
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4940
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4944
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4957
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4968
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4979
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5001
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5024
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5032
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5041
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5045
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5058
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5062
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5067
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5071
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5078
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5083
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5090
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5096
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5100
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5104
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5108
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5112
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5116
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5121
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5125
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5131
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5141
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5156
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5160
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5174
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5178
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5184
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5193
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5197
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5201
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5205
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5209
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5215
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5222
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5231
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5235
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5241
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5249
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5253
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5258
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5262
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5268
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5272
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5276
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5281
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5285
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5291
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5297
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5301
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5307
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5312
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5316
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5320
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5325
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5329
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5333
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5338
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5342
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5350
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5354
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5358
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5372
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5376
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5386
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5396
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5406
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5418
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5426
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5434
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5443
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5451
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5459
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5467
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5475
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5483
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5491
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5499
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5507
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5517
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5528
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5542
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5546
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5550
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 839:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5555
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5559
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5563
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5572
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5576
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5581
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5585
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5590
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5594
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5600
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5604
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5610
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5614
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5618
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5622
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5627
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5635
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5641
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5649
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5657
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5667
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5673
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5682
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5691
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5700
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5710
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5714
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5724
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5728
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5732
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 873:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5736
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 874:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5742
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5752
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5756
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5762
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5768
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5772
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5778
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5784
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5788
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5792
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5796
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 885:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5802
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5806
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5812
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5816
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5822
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5826
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5832
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5836
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5846
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5859
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5865
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5871
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5885
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5896
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5903
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5907
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5913
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5923
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5927
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5931
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5936
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5940
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5944
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5948
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5953
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5957
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5961
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5965
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5969
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5974
		{
			yyVAL.str = ""
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5978
		{
			yyVAL.str = yyDollar[1].str
		}
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5982
		{
			yyVAL.str = yyDollar[2].str
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5988
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5992
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 920:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5997
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6001
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6005
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6009
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6013
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6019
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 948:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6061
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6074
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6080
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 951:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6086
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6099
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6104
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6111
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6118
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6122
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6128
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6134
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6139
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6143
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6147
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6151
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6158
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6191
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6196
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6203
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6210
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6214
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6220
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6226
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6230
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6234
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6240
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6246
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6252
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6256
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6262
		{
			yyVAL.str = ""
		}
	case 981:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6269
		{
			yyVAL.str = yyDollar[2].str
		}
	case 982:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6275
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6290
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6307
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6324
		{
			yyVAL.str = yyDollar[1].str
		}
	case 986:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6328
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 987:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6334
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 988:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6338
		{
			yyVAL.str = "DEFINER = "
		}
	case 989:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6342
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 990:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6347
		{
			yyVAL.str = ""
		}
	case 991:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6351
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 997:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6365
		{
			yyVAL.str = ""
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6373
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6379
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6384
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6390
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6403
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6408
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6413
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6419
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6426
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6433
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6440
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6447
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6455
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6461
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6468
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6475
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6483
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6489
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6498
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6515
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6531
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6550
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6556
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6565
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6583
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6589
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6596
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6604
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6610
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6618
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6624
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6632
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6638
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6647
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6651
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6656
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6660
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6667
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1038:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6672
		{
			yyVAL.str = ""
		}
	case 1039:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6676
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1040:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6682
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6695
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6706
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6710
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6716
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6722
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6728
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6735
		{
			yyVAL.str = ""
		}
	case 1048:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6739
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1049:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6744
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6748
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6754
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6762
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6770
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6778
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6786
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1056:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6791
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6803
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6814
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6923
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6927
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6933
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6946
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6950
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6956
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6969
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6973
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6977
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6982
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6986
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6992
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6999
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7005
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7014
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1075:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7021
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7032
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7036
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7042
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7051
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7055
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7059
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7064
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7068
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7072
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7076
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7082
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7113
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7117
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7143
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7149
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7161
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7167
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7173
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7179
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7185
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7193
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7197
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7203
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7217
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7231
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7235
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7239
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7243
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7247
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7251
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7255
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7261
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7276
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7280
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7291
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7295
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7300
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7304
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7310
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7314
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7320
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7329
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7338
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7344
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7348
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7354
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7365
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7371
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7389
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7407
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7425
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7441
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7445
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7454
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7466
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7475
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7487
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7497
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7507
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7518
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7528
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7539
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7547
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7558
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7565
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7575
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7588
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7596
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7605
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7614
		{
			yyVAL.str = ""
		}
	case 1148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7618
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7624
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7628
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7633
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7637
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7644
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7656
		{
			yyVAL.str = ""
		}
	case 1155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7660
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1156:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7666
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7687
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7701
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7705
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7709
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7715
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7719
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7726
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7733
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7740
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7747
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7751
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7755
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7759
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7763
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7770
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7777
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7781
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7788
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7795
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7799
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7805
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7811
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7815
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7822
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7829
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7836
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7843
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7847
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7852
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7856
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7860
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7865
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7869
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7882
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7886
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7894
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7902
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7906
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7918
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7922
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7928
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7932
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7938
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7951
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7965
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7969
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7975
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7979
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7985
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7994
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8005
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8009
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8014
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8018
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8024
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8029
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8037
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8041
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8051
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8055
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8066
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8074
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8082
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8090
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8101
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8110
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8120
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8130
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8134
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8139
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8143
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8149
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8153
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8159
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8168
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8178
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8182
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8188
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8192
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8198
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8207
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8217
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8221
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8227
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8231
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8235
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8241
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8245
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8249
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8253
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8257
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8261
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8265
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8270
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8274
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8278
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8282
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8286
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8290
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8294
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8298
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8302
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8306
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8310
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8314
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8318
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8324
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8330
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8334
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8338
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8342
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8346
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8352
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8358
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8364
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8370
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8376
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8382
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8386
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8390
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8394
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8399
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8410
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8414
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8420
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8431
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8435
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8441
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8445
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8449
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8453
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8457
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8461
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8475
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8479
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8488
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8494
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8502
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8506
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8513
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8522
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8530
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8538
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8545
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8549
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8555
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8559
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8563
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8569
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8573
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8579
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8592
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8605
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8644
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8684
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8698
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8704
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8717
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8730
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8743
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8756
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8771
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8781
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8787
		{
			yyVAL.str = ""
		}
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8791
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8801
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8807
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8813
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8834
		{
			yyVAL.str = ""
		}
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8838
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8844
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8850
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8854
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8859
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8867
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8871
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8875
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8879
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8885
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8891
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8895
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8900
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8907
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8911
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8917
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8921
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8927
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8931
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8935
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8939
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8943
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8947
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8952
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8956
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8960
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8964
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8968
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8972
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8976
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8980
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8984
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8988
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9002
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9006
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9010
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9014
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9018
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9022
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9028
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9032
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9037
		{
			yyVAL.str = ""
		}
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9041
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9047
		{
			yyVAL.str = ""
		}
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9051
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1390:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9057
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9074
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9081
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9088
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9095
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9102
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9111
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9117
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9123
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9127
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9131
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9135
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9139
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9144
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9151
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9155
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9159
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9164
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9168
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9173
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9177
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9193
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9199
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9203
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9207
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9211
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9215
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9219
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9223
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9227
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9231
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9235
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9239
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9243
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9247
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9253
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9257
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9261
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9265
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9269
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9273
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9277
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9281
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9285
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9289
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9331
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9335
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9339
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9344
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9352
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9356
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9360
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9364
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9368
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9378
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9382
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9386
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9390
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9394
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9398
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9402
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9408
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9417
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9426
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9437
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9447
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9457
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9466
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9476
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9486
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9496
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9505
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9515
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9519
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9524
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9528
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9534
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9538
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9544
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9553
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9565
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9582
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9599
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9612
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9625
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9637
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9651
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9666
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9681
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9698
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9713
		{
		}
	case 1492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9720
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9724
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9728
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9734
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9738
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9742
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9746
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9752
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9756
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9760
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9766
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9774
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9784
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9788
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9795
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9800
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9804
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9809
		{
			yyVAL.str = ","
		}
	case 1510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9813
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9818
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9822
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1513:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9827
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9834
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9860
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9872
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9884
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9895
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9906
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9917
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9927
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9937
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9948
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9959
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9970
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9981
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9992
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10003
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10014
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10025
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10036
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10047
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10058
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10069
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10080
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10091
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10109
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10118
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10127
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10136
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10145
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10156
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10165
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10175
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10184
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10193
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10202
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10211
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10223
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10234
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10247
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10259
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10282
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1592:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10318
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10331
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10344
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10356
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10365
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10373
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10381
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10394
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10403
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10414
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10425
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10434
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10446
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10456
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10466
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10475
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10486
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10495
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10505
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10514
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10523
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10533
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10537
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10543
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10547
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10566
		{
		}
	case 1624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10568
		{
		}
	case 1658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10609
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10621
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10625
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10629
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10635
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10640
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10644
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10650
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10654
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10660
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10664
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10671
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10675
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10679
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10688
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10692
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10696
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10701
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10705
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10711
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10715
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10719
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10723
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10727
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10731
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10735
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10739
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10743
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10747
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10755
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10759
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10763
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10767
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10771
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10775
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10779
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10783
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10787
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10791
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10797
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10801
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10807
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10811
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10818
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10822
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10826
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10832
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10836
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10840
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10844
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10848
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10852
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10856
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10862
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10866
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10870
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10874
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10880
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10893
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10898
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10904
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10908
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10921
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10926
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10930
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10934
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10938
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10942
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10949
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10953
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10957
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10961
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10968
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10979
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10984
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10990
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11002
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11014
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11026
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11039
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11052
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11065
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11078
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11091
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11104
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11117
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11130
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11143
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11156
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11171
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11198
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11240
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11276
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11312
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11329
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11341
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11361
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11381
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11401
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11417
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11430
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11443
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11456
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11469
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11481
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11493
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11505
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11517
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11529
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11541
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11553
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11565
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11577
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11589
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11602
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11615
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11628
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11641
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11656
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11664
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11673
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11683
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11706
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11711
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11717
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11724
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11728
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11733
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11737
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11743
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11749
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11756
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11763
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11772
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11779
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11786
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11795
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11799
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11803
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11809
		{
		}
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11811
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11821
		{
			yyVAL.str = ""
		}
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11825
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
