// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const OF = 57367
const CONNECT = 57368
const MANAGE = 57369
const GRANTS = 57370
const OWNERSHIP = 57371
const REFERENCE = 57372
const LOWER_THAN_SET = 57373
const SET = 57374
const ALL = 57375
const DISTINCT = 57376
const DISTINCTROW = 57377
const AS = 57378
const EXISTS = 57379
const ASC = 57380
const DESC = 57381
const INTO = 57382
const DUPLICATE = 57383
const DEFAULT = 57384
const LOCK = 57385
const KEYS = 57386
const NULLS = 57387
const FIRST = 57388
const LAST = 57389
const AFTER = 57390
const INSTANT = 57391
const INPLACE = 57392
const COPY = 57393
const DISABLE = 57394
const ENABLE = 57395
const UNDEFINED = 57396
const MERGE = 57397
const TEMPTABLE = 57398
const DEFINER = 57399
const INVOKER = 57400
const SQL = 57401
const SECURITY = 57402
const CASCADED = 57403
const VALUES = 57404
const NEXT = 57405
const VALUE = 57406
const SHARE = 57407
const MODE = 57408
const SQL_NO_CACHE = 57409
const SQL_CACHE = 57410
const JOIN = 57411
const STRAIGHT_JOIN = 57412
const LEFT = 57413
const RIGHT = 57414
const INNER = 57415
const OUTER = 57416
const CROSS = 57417
const NATURAL = 57418
const USE = 57419
const FORCE = 57420
const CENTROIDX = 57421
const APPLY = 57422
const DEDUP = 57423
const LOWER_THAN_ON = 57424
const ON = 57425
const USING = 57426
const SUBQUERY_AS_EXPR = 57427
const LOWER_THAN_STRING = 57428
const ID = 57429
const AT_ID = 57430
const AT_AT_ID = 57431
const STRING = 57432
const VALUE_ARG = 57433
const LIST_ARG = 57434
const COMMENT = 57435
const COMMENT_KEYWORD = 57436
const QUOTE_ID = 57437
const STAGE = 57438
const CREDENTIALS = 57439
const STAGES = 57440
const SNAPSHOTS = 57441
const INTEGRAL = 57442
const HEX = 57443
const FLOAT = 57444
const HEXNUM = 57445
const BIT_LITERAL = 57446
const NULL = 57447
const TRUE = 57448
const FALSE = 57449
const LOWER_THAN_CHARSET = 57450
const CHARSET = 57451
const UNIQUE = 57452
const KEY = 57453
const OR = 57454
const PIPE_CONCAT = 57455
const XOR = 57456
const AND = 57457
const NOT = 57458
const BETWEEN = 57459
const CASE = 57460
const WHEN = 57461
const THEN = 57462
const ELSE = 57463
const END = 57464
const ELSEIF = 57465
const LOWER_THAN_EQ = 57466
const LE = 57467
const GE = 57468
const NE = 57469
const NULL_SAFE_EQUAL = 57470
const IS = 57471
const LIKE = 57472
const REGEXP = 57473
const IN = 57474
const ASSIGNMENT = 57475
const ILIKE = 57476
const SHIFT_LEFT = 57477
const SHIFT_RIGHT = 57478
const DIV = 57479
const MOD = 57480
const UNARY = 57481
const COLLATE = 57482
const BINARY = 57483
const UNDERSCORE_BINARY = 57484
const INTERVAL = 57485
const OUT = 57486
const INOUT = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const WORK = 57493
const CONSISTENT = 57494
const SNAPSHOT = 57495
const SAVEPOINT = 57496
const CHAIN = 57497
const NO = 57498
const RELEASE = 57499
const PRIORITY = 57500
const QUICK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const DECIMAL_VALUE = 57515
const TIME = 57516
const TIMESTAMP = 57517
const DATETIME = 57518
const YEAR = 57519
const CHAR = 57520
const VARCHAR = 57521
const BOOL = 57522
const CHARACTER = 57523
const VARBINARY = 57524
const NCHAR = 57525
const TEXT = 57526
const TINYTEXT = 57527
const MEDIUMTEXT = 57528
const LONGTEXT = 57529
const DATALINK = 57530
const BLOB = 57531
const TINYBLOB = 57532
const MEDIUMBLOB = 57533
const LONGBLOB = 57534
const JSON = 57535
const ENUM = 57536
const UUID = 57537
const VECF32 = 57538
const VECF64 = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const INT1 = 57548
const INT2 = 57549
const INT3 = 57550
const INT4 = 57551
const INT8 = 57552
const S3OPTION = 57553
const STAGEOPTION = 57554
const SQL_SMALL_RESULT = 57555
const SQL_BIG_RESULT = 57556
const SQL_BUFFER_RESULT = 57557
const SQL_CALC_FOUND_ROWS = 57558
const LOW_PRIORITY = 57559
const HIGH_PRIORITY = 57560
const DELAYED = 57561
const CREATE = 57562
const ALTER = 57563
const DROP = 57564
const RENAME = 57565
const ANALYZE = 57566
const PHYPLAN = 57567
const ADD = 57568
const RETURNS = 57569
const SCHEMA = 57570
const TABLE = 57571
const SEQUENCE = 57572
const INDEX = 57573
const VIEW = 57574
const TO = 57575
const IGNORE = 57576
const IF = 57577
const PRIMARY = 57578
const COLUMN = 57579
const CONSTRAINT = 57580
const SPATIAL = 57581
const FULLTEXT = 57582
const FOREIGN = 57583
const KEY_BLOCK_SIZE = 57584
const SHOW = 57585
const DESCRIBE = 57586
const EXPLAIN = 57587
const DATE = 57588
const ESCAPE = 57589
const REPAIR = 57590
const OPTIMIZE = 57591
const TRUNCATE = 57592
const MAXVALUE = 57593
const PARTITION = 57594
const REORGANIZE = 57595
const LESS = 57596
const THAN = 57597
const PROCEDURE = 57598
const TRIGGER = 57599
const STATUS = 57600
const VARIABLES = 57601
const ROLE = 57602
const PROXY = 57603
const AVG_ROW_LENGTH = 57604
const STORAGE = 57605
const DISK = 57606
const MEMORY = 57607
const CHECKSUM = 57608
const COMPRESSION = 57609
const DATA = 57610
const DIRECTORY = 57611
const DELAY_KEY_WRITE = 57612
const ENCRYPTION = 57613
const ENGINE = 57614
const MAX_ROWS = 57615
const MIN_ROWS = 57616
const PACK_KEYS = 57617
const ROW_FORMAT = 57618
const STATS_AUTO_RECALC = 57619
const STATS_PERSISTENT = 57620
const STATS_SAMPLE_PAGES = 57621
const DYNAMIC = 57622
const COMPRESSED = 57623
const REDUNDANT = 57624
const COMPACT = 57625
const FIXED = 57626
const COLUMN_FORMAT = 57627
const AUTO_RANDOM = 57628
const ENGINE_ATTRIBUTE = 57629
const SECONDARY_ENGINE_ATTRIBUTE = 57630
const INSERT_METHOD = 57631
const RESTRICT = 57632
const CASCADE = 57633
const ACTION = 57634
const PARTIAL = 57635
const SIMPLE = 57636
const CHECK = 57637
const ENFORCED = 57638
const RANGE = 57639
const LIST = 57640
const ALGORITHM = 57641
const LINEAR = 57642
const PARTITIONS = 57643
const SUBPARTITION = 57644
const SUBPARTITIONS = 57645
const CLUSTER = 57646
const TYPE = 57647
const ANY = 57648
const SOME = 57649
const EXTERNAL = 57650
const LOCALFILE = 57651
const URL = 57652
const PREPARE = 57653
const DEALLOCATE = 57654
const RESET = 57655
const EXTENSION = 57656
const RETENTION = 57657
const PERIOD = 57658
const CLONE = 57659
const MO = 57660
const BRANCH = 57661
const LOG = 57662
const REVERT = 57663
const REBASE = 57664
const DIFF = 57665
const INCREMENT = 57666
const CYCLE = 57667
const MINVALUE = 57668
const PUBLICATION = 57669
const SUBSCRIPTIONS = 57670
const PUBLICATIONS = 57671
const PROPERTIES = 57672
const PARSER = 57673
const VISIBLE = 57674
const INVISIBLE = 57675
const BTREE = 57676
const HASH = 57677
const RTREE = 57678
const BSI = 57679
const IVFFLAT = 57680
const MASTER = 57681
const HNSW = 57682
const ZONEMAP = 57683
const LEADING = 57684
const BOTH = 57685
const TRAILING = 57686
const UNKNOWN = 57687
const LISTS = 57688
const OP_TYPE = 57689
const REINDEX = 57690
const EF_SEARCH = 57691
const EF_CONSTRUCTION = 57692
const M = 57693
const ASYNC = 57694
const EXPIRE = 57695
const ACCOUNT = 57696
const ACCOUNTS = 57697
const UNLOCK = 57698
const DAY = 57699
const NEVER = 57700
const PUMP = 57701
const MYSQL_COMPATIBILITY_MODE = 57702
const UNIQUE_CHECK_ON_AUTOINCR = 57703
const MODIFY = 57704
const CHANGE = 57705
const SECOND = 57706
const ASCII = 57707
const COALESCE = 57708
const COLLATION = 57709
const HOUR = 57710
const MICROSECOND = 57711
const MINUTE = 57712
const MONTH = 57713
const QUARTER = 57714
const REPEAT = 57715
const REVERSE = 57716
const ROW_COUNT = 57717
const WEEK = 57718
const REVOKE = 57719
const FUNCTION = 57720
const PRIVILEGES = 57721
const TABLESPACE = 57722
const EXECUTE = 57723
const SUPER = 57724
const GRANT = 57725
const OPTION = 57726
const REFERENCES = 57727
const REPLICATION = 57728
const SLAVE = 57729
const CLIENT = 57730
const USAGE = 57731
const RELOAD = 57732
const FILE = 57733
const TEMPORARY = 57734
const ROUTINE = 57735
const EVENT = 57736
const SHUTDOWN = 57737
const NULLX = 57738
const AUTO_INCREMENT = 57739
const APPROXNUM = 57740
const SIGNED = 57741
const UNSIGNED = 57742
const ZEROFILL = 57743
const ENGINES = 57744
const LOW_CARDINALITY = 57745
const AUTOEXTEND_SIZE = 57746
const ADMIN_NAME = 57747
const RANDOM = 57748
const SUSPEND = 57749
const ATTRIBUTE = 57750
const HISTORY = 57751
const REUSE = 57752
const CURRENT = 57753
const OPTIONAL = 57754
const FAILED_LOGIN_ATTEMPTS = 57755
const PASSWORD_LOCK_TIME = 57756
const UNBOUNDED = 57757
const SECONDARY = 57758
const RESTRICTED = 57759
const USER = 57760
const IDENTIFIED = 57761
const CIPHER = 57762
const ISSUER = 57763
const X509 = 57764
const SUBJECT = 57765
const SAN = 57766
const REQUIRE = 57767
const SSL = 57768
const NONE = 57769
const PASSWORD = 57770
const SHARED = 57771
const EXCLUSIVE = 57772
const MAX_QUERIES_PER_HOUR = 57773
const MAX_UPDATES_PER_HOUR = 57774
const MAX_CONNECTIONS_PER_HOUR = 57775
const MAX_USER_CONNECTIONS = 57776
const FORMAT = 57777
const VERBOSE = 57778
const CONNECTION = 57779
const TRIGGERS = 57780
const PROFILES = 57781
const LOAD = 57782
const INLINE = 57783
const INFILE = 57784
const TERMINATED = 57785
const OPTIONALLY = 57786
const ENCLOSED = 57787
const ESCAPED = 57788
const STARTING = 57789
const LINES = 57790
const ROWS = 57791
const IMPORT = 57792
const DISCARD = 57793
const JSONTYPE = 57794
const MODUMP = 57795
const OVER = 57796
const PRECEDING = 57797
const FOLLOWING = 57798
const GROUPS = 57799
const DATABASES = 57800
const TABLES = 57801
const SEQUENCES = 57802
const EXTENDED = 57803
const FULL = 57804
const PROCESSLIST = 57805
const FIELDS = 57806
const COLUMNS = 57807
const OPEN = 57808
const ERRORS = 57809
const WARNINGS = 57810
const INDEXES = 57811
const SCHEMAS = 57812
const NODE = 57813
const LOCKS = 57814
const ROLES = 57815
const TABLE_NUMBER = 57816
const COLUMN_NUMBER = 57817
const TABLE_VALUES = 57818
const TABLE_SIZE = 57819
const NAMES = 57820
const GLOBAL = 57821
const PERSIST = 57822
const SESSION = 57823
const ISOLATION = 57824
const LEVEL = 57825
const READ = 57826
const WRITE = 57827
const ONLY = 57828
const REPEATABLE = 57829
const COMMITTED = 57830
const UNCOMMITTED = 57831
const SERIALIZABLE = 57832
const LOCAL = 57833
const EVENTS = 57834
const PLUGINS = 57835
const CURRENT_TIMESTAMP = 57836
const DATABASE = 57837
const CURRENT_TIME = 57838
const LOCALTIME = 57839
const LOCALTIMESTAMP = 57840
const UTC_DATE = 57841
const UTC_TIME = 57842
const UTC_TIMESTAMP = 57843
const REPLACE = 57844
const CONVERT = 57845
const SEPARATOR = 57846
const TIMESTAMPDIFF = 57847
const CURRENT_DATE = 57848
const CURRENT_USER = 57849
const CURRENT_ROLE = 57850
const SECOND_MICROSECOND = 57851
const MINUTE_MICROSECOND = 57852
const MINUTE_SECOND = 57853
const HOUR_MICROSECOND = 57854
const HOUR_SECOND = 57855
const HOUR_MINUTE = 57856
const DAY_MICROSECOND = 57857
const DAY_SECOND = 57858
const DAY_MINUTE = 57859
const DAY_HOUR = 57860
const YEAR_MONTH = 57861
const SQL_TSI_HOUR = 57862
const SQL_TSI_DAY = 57863
const SQL_TSI_WEEK = 57864
const SQL_TSI_MONTH = 57865
const SQL_TSI_QUARTER = 57866
const SQL_TSI_YEAR = 57867
const SQL_TSI_SECOND = 57868
const SQL_TSI_MINUTE = 57869
const RECURSIVE = 57870
const CONFIG = 57871
const DRAINER = 57872
const SOURCE = 57873
const STREAM = 57874
const HEADERS = 57875
const CONNECTOR = 57876
const CONNECTORS = 57877
const DAEMON = 57878
const PAUSE = 57879
const CANCEL = 57880
const TASK = 57881
const RESUME = 57882
const MATCH = 57883
const AGAINST = 57884
const BOOLEAN = 57885
const LANGUAGE = 57886
const WITH = 57887
const QUERY = 57888
const EXPANSION = 57889
const WITHOUT = 57890
const VALIDATION = 57891
const UPGRADE = 57892
const RETRY = 57893
const ADDDATE = 57894
const BIT_AND = 57895
const BIT_OR = 57896
const BIT_XOR = 57897
const CAST = 57898
const COUNT = 57899
const APPROX_COUNT = 57900
const APPROX_COUNT_DISTINCT = 57901
const SERIAL_EXTRACT = 57902
const APPROX_PERCENTILE = 57903
const CURDATE = 57904
const CURTIME = 57905
const DATE_ADD = 57906
const DATE_SUB = 57907
const EXTRACT = 57908
const GROUP_CONCAT = 57909
const MAX = 57910
const MID = 57911
const MIN = 57912
const NOW = 57913
const POSITION = 57914
const SESSION_USER = 57915
const STD = 57916
const STDDEV = 57917
const MEDIAN = 57918
const CLUSTER_CENTERS = 57919
const KMEANS = 57920
const STDDEV_POP = 57921
const STDDEV_SAMP = 57922
const SUBDATE = 57923
const SUBSTR = 57924
const SUBSTRING = 57925
const SUM = 57926
const SYSDATE = 57927
const SYSTEM_USER = 57928
const TRANSLATE = 57929
const TRIM = 57930
const VARIANCE = 57931
const VAR_POP = 57932
const VAR_SAMP = 57933
const AVG = 57934
const RANK = 57935
const ROW_NUMBER = 57936
const DENSE_RANK = 57937
const BIT_CAST = 57938
const BITMAP_BIT_POSITION = 57939
const BITMAP_BUCKET_NUMBER = 57940
const BITMAP_COUNT = 57941
const BITMAP_CONSTRUCT_AGG = 57942
const BITMAP_OR_AGG = 57943
const NEXTVAL = 57944
const SETVAL = 57945
const CURRVAL = 57946
const LASTVAL = 57947
const ARROW = 57948
const ROW = 57949
const OUTFILE = 57950
const HEADER = 57951
const MAX_FILE_SIZE = 57952
const FORCE_QUOTE = 57953
const PARALLEL = 57954
const STRICT = 57955
const UNUSED = 57956
const BINDINGS = 57957
const DO = 57958
const DECLARE = 57959
const LOOP = 57960
const WHILE = 57961
const LEAVE = 57962
const ITERATE = 57963
const UNTIL = 57964
const CALL = 57965
const PREV = 57966
const SLIDING = 57967
const FILL = 57968
const SPBEGIN = 57969
const BACKEND = 57970
const SERVERS = 57971
const HANDLER = 57972
const PERCENT = 57973
const SAMPLE = 57974
const MO_TS = 57975
const PITR = 57976
const RECOVERY_WINDOW = 57977
const INTERNAL = 57978
const CDC = 57979
const GROUPING = 57980
const SETS = 57981
const CUBE = 57982
const ROLLUP = 57983
const LOGSERVICE = 57984
const REPLICAS = 57985
const STORES = 57986
const SETTINGS = 57987
const KILL = 57988
const BACKUP = 57989
const FILESYSTEM = 57990
const PARALLELISM = 57991
const RESTORE = 57992
const QUERY_RESULT = 57993

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"OF",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CENTROIDX",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"SAVEPOINT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"SQL_CALC_FOUND_ROWS",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"CLONE",
	"MO",
	"BRANCH",
	"LOG",
	"REVERT",
	"REBASE",
	"DIFF",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"HNSW",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EF_SEARCH",
	"EF_CONSTRUCTION",
	"M",
	"ASYNC",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"RECOVERY_WINDOW",
	"INTERNAL",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:13071

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 143,
	11, 817,
	22, 817,
	-2, 810,
	-1, 169,
	246, 1263,
	248, 1147,
	-2, 1202,
	-1, 196,
	44, 640,
	248, 640,
	275, 647,
	276, 647,
	486, 640,
	-2, 675,
	-1, 236,
	672, 2040,
	-2, 539,
	-1, 550,
	672, 2164,
	-2, 414,
	-1, 608,
	672, 2223,
	-2, 412,
	-1, 609,
	672, 2224,
	-2, 413,
	-1, 610,
	672, 2225,
	-2, 415,
	-1, 751,
	327, 182,
	458, 182,
	459, 182,
	-2, 1938,
	-1, 818,
	86, 1722,
	-2, 2100,
	-1, 819,
	86, 1741,
	-2, 2071,
	-1, 823,
	86, 1742,
	-2, 2099,
	-1, 857,
	86, 1649,
	-2, 2304,
	-1, 858,
	86, 1650,
	-2, 2303,
	-1, 859,
	86, 1651,
	-2, 2293,
	-1, 860,
	86, 2265,
	-2, 2286,
	-1, 861,
	86, 2266,
	-2, 2287,
	-1, 862,
	86, 2267,
	-2, 2295,
	-1, 863,
	86, 2268,
	-2, 2275,
	-1, 864,
	86, 2269,
	-2, 2284,
	-1, 865,
	86, 2270,
	-2, 2296,
	-1, 866,
	86, 2271,
	-2, 2297,
	-1, 867,
	86, 2272,
	-2, 2302,
	-1, 868,
	86, 2273,
	-2, 2307,
	-1, 869,
	86, 2274,
	-2, 2308,
	-1, 870,
	86, 1718,
	-2, 2138,
	-1, 871,
	86, 1719,
	-2, 1922,
	-1, 872,
	86, 1720,
	-2, 2147,
	-1, 873,
	86, 1721,
	-2, 1931,
	-1, 875,
	86, 1724,
	-2, 1939,
	-1, 877,
	86, 1726,
	-2, 2171,
	-1, 879,
	86, 1729,
	-2, 1960,
	-1, 881,
	86, 1731,
	-2, 2183,
	-1, 882,
	86, 1732,
	-2, 2182,
	-1, 883,
	86, 1733,
	-2, 2007,
	-1, 884,
	86, 1734,
	-2, 2095,
	-1, 887,
	86, 1737,
	-2, 2194,
	-1, 889,
	86, 1739,
	-2, 2197,
	-1, 890,
	86, 1740,
	-2, 2199,
	-1, 891,
	86, 1743,
	-2, 2207,
	-1, 892,
	86, 1744,
	-2, 2080,
	-1, 893,
	86, 1745,
	-2, 2125,
	-1, 894,
	86, 1746,
	-2, 2090,
	-1, 895,
	86, 1747,
	-2, 2115,
	-1, 906,
	86, 1627,
	-2, 2298,
	-1, 907,
	86, 1628,
	-2, 2299,
	-1, 908,
	86, 1629,
	-2, 2300,
	-1, 1013,
	481, 675,
	482, 675,
	-2, 641,
	-1, 1064,
	128, 1922,
	139, 1922,
	159, 1922,
	-2, 1895,
	-1, 1185,
	22, 844,
	-2, 793,
	-1, 1295,
	11, 817,
	22, 817,
	-2, 1504,
	-1, 1379,
	22, 844,
	-2, 793,
	-1, 1741,
	86, 1794,
	-2, 2097,
	-1, 1742,
	86, 1795,
	-2, 2098,
	-1, 2359,
	87, 1017,
	-2, 1023,
	-1, 2375,
	111, 1194,
	155, 1194,
	195, 1194,
	198, 1194,
	288, 1194,
	-2, 1187,
	-1, 2540,
	11, 817,
	22, 817,
	-2, 958,
	-1, 2574,
	87, 1881,
	160, 1881,
	-2, 2082,
	-1, 2575,
	87, 1881,
	160, 1881,
	-2, 2081,
	-1, 2576,
	87, 1857,
	160, 1857,
	-2, 2068,
	-1, 2577,
	87, 1858,
	160, 1858,
	-2, 2073,
	-1, 2578,
	87, 1859,
	160, 1859,
	-2, 1995,
	-1, 2579,
	87, 1860,
	160, 1860,
	-2, 1988,
	-1, 2580,
	87, 1861,
	160, 1861,
	-2, 1912,
	-1, 2581,
	87, 1862,
	160, 1862,
	-2, 2070,
	-1, 2582,
	87, 1863,
	160, 1863,
	-2, 1993,
	-1, 2583,
	87, 1864,
	160, 1864,
	-2, 1987,
	-1, 2584,
	87, 1865,
	160, 1865,
	-2, 1975,
	-1, 2585,
	87, 1881,
	160, 1881,
	-2, 1976,
	-1, 2586,
	87, 1881,
	160, 1881,
	-2, 1977,
	-1, 2588,
	87, 1870,
	160, 1870,
	-2, 2115,
	-1, 2589,
	87, 1847,
	160, 1847,
	-2, 2100,
	-1, 2590,
	87, 1879,
	160, 1879,
	-2, 2071,
	-1, 2591,
	87, 1879,
	160, 1879,
	-2, 2099,
	-1, 2592,
	87, 1879,
	160, 1879,
	-2, 1940,
	-1, 2593,
	87, 1877,
	160, 1877,
	-2, 2090,
	-1, 2594,
	87, 1874,
	160, 1874,
	-2, 1965,
	-1, 2595,
	86, 1828,
	87, 1828,
	160, 1828,
	416, 1828,
	417, 1828,
	418, 1828,
	-2, 1911,
	-1, 2596,
	86, 1829,
	87, 1829,
	160, 1829,
	416, 1829,
	417, 1829,
	418, 1829,
	-2, 1913,
	-1, 2597,
	86, 1830,
	87, 1830,
	160, 1830,
	416, 1830,
	417, 1830,
	418, 1830,
	-2, 2143,
	-1, 2598,
	86, 1832,
	87, 1832,
	160, 1832,
	416, 1832,
	417, 1832,
	418, 1832,
	-2, 2072,
	-1, 2599,
	86, 1834,
	87, 1834,
	160, 1834,
	416, 1834,
	417, 1834,
	418, 1834,
	-2, 2050,
	-1, 2600,
	86, 1836,
	87, 1836,
	160, 1836,
	416, 1836,
	417, 1836,
	418, 1836,
	-2, 1994,
	-1, 2601,
	86, 1838,
	87, 1838,
	160, 1838,
	416, 1838,
	417, 1838,
	418, 1838,
	-2, 1971,
	-1, 2602,
	86, 1839,
	87, 1839,
	160, 1839,
	416, 1839,
	417, 1839,
	418, 1839,
	-2, 1972,
	-1, 2603,
	86, 1841,
	87, 1841,
	160, 1841,
	416, 1841,
	417, 1841,
	418, 1841,
	-2, 1910,
	-1, 2604,
	87, 1884,
	160, 1884,
	416, 1884,
	417, 1884,
	418, 1884,
	-2, 1945,
	-1, 2605,
	87, 1884,
	160, 1884,
	416, 1884,
	417, 1884,
	418, 1884,
	-2, 1961,
	-1, 2606,
	87, 1887,
	160, 1887,
	416, 1887,
	417, 1887,
	418, 1887,
	-2, 1941,
	-1, 2607,
	87, 1887,
	160, 1887,
	416, 1887,
	417, 1887,
	418, 1887,
	-2, 2010,
	-1, 2608,
	87, 1884,
	160, 1884,
	416, 1884,
	417, 1884,
	418, 1884,
	-2, 2032,
	-1, 2837,
	111, 1194,
	155, 1194,
	195, 1194,
	198, 1194,
	288, 1194,
	-2, 1188,
	-1, 2857,
	84, 737,
	160, 737,
	-2, 1378,
	-1, 3294,
	198, 1194,
	312, 1467,
	-2, 1439,
	-1, 3491,
	111, 1194,
	155, 1194,
	195, 1194,
	198, 1194,
	-2, 1319,
	-1, 3494,
	111, 1194,
	155, 1194,
	195, 1194,
	198, 1194,
	-2, 1319,
	-1, 3506,
	84, 737,
	160, 737,
	-2, 1378,
	-1, 3527,
	198, 1194,
	312, 1467,
	-2, 1440,
	-1, 3685,
	111, 1194,
	155, 1194,
	195, 1194,
	198, 1194,
	-2, 1320,
	-1, 3711,
	87, 1281,
	160, 1281,
	-2, 1194,
	-1, 3860,
	87, 1281,
	160, 1281,
	-2, 1194,
	-1, 4033,
	87, 1285,
	160, 1285,
	-2, 1194,
	-1, 4088,
	87, 1286,
	160, 1286,
	-2, 1194,
}

const yyPrivate = 57344

const yyLast = 55585

var yyAct = [...]int{
	785, 761, 4141, 787, 4110, 2888, 225, 4133, 1642, 4037,
	1721, 3512, 4043, 3611, 4044, 3314, 4036, 3929, 3280, 3860,
	2120, 3952, 3907, 770, 3987, 3739, 3390, 3541, 3838, 2882,
	2009, 3805, 3898, 763, 3391, 1331, 3859, 3673, 3930, 1486,
	3773, 815, 2794, 2885, 3472, 3908, 1063, 651, 3829, 1186,
	3615, 1717, 3910, 1492, 3477, 1781, 3606, 1954, 1768, 1180,
	1554, 2426, 3289, 3692, 669, 2860, 675, 675, 3528, 3682,
	3250, 1724, 675, 693, 702, 3235, 3655, 702, 3211, 3687,
	3495, 3003, 759, 3388, 3004, 3442, 210, 3238, 2107, 3464,
	2572, 2122, 3002, 37, 2980, 2104, 2911, 3309, 3291, 3497,
	3298, 2069, 2799, 2534, 3433, 2145, 2219, 3072, 2999, 1786,
	2570, 2429, 3032, 2177, 2699, 3218, 2825, 3216, 2664, 3353,
	3212, 3297, 3214, 1969, 3213, 2990, 1547, 3260, 710, 2387,
	1176, 2838, 142, 3180, 36, 1631, 2203, 3209, 3120, 2333,
	753, 758, 714, 3046, 1627, 2332, 2624, 2642, 2186, 1879,
	2185, 2215, 2178, 2150, 1635, 944, 1620, 2214, 2073, 2535,
	2100, 2070, 1451, 1632, 2518, 2814, 699, 2913, 2809, 2513,
	2893, 2427, 984, 1999, 221, 8, 2386, 2375, 220, 7,
	6, 1930, 2249, 1715, 2852, 2568, 2216, 1782, 1720, 1664,
	1594, 762, 668, 1563, 1124, 1532, 1526, 2366, 1057, 752,
	1775, 651, 1418, 1968, 771, 1706, 2369, 1496, 2736, 1461,
	1202, 1643, 2422, 1755, 2184, 2166, 1601, 2181, 1646, 707,
	1926, 1714, 1056, 1531, 2542, 225, 1929, 225, 69, 1115,
	1116, 2514, 983, 1528, 1585, 684, 675, 910, 1787, 1475,
	1487, 716, 1095, 1022, 27, 650, 203, 24, 717, 1457,
	25, 17, 1495, 960, 15, 10, 981, 1008, 1401, 1377,
	966, 23, 211, 701, 760, 671, 207, 1332, 912, 713,
	913, 1112, 2223, 1471, 3917, 3826, 1783, 1263, 1264, 1265,
	1262, 16, 1263, 1264, 1265, 1262, 992, 2772, 2772, 14,
	1263, 1264, 1265, 1262, 2772, 2544, 3399, 3509, 33, 3089,
	3267, 3088, 1181, 2233, 3644, 3480, 1182, 2687, 3383, 2630,
	1090, 1111, 2628, 1113, 2627, 2625, 680, 698, 1892, 1608,
	1604, 1107, 1108, 209, 670, 2331, 1530, 697, 1396, 1454,
	1455, 1456, 676, 932, 3885, 1370, 930, 1069, 2121, 1071,
	705, 1657, 2337, 1042, 1108, 3190, 2341, 1893, 1399, 1108,
	3175, 3173, 754, 3172, 694, 3170, 4122, 1509, 988, 989,
	1886, 1392, 696, 1606, 687, 3604, 3068, 3066, 1181, 1032,
	2155, 695, 3893, 3780, 208, 65, 199, 170, 3774, 3607,
	3389, 2200, 1091, 1326, 8, 2764, 2762, 3912, 7, 2180,
	1106, 911, 3149, 200, 1263, 1264, 1265, 1262, 2172, 2467,
	191, 4147, 3906, 4119, 201, 1263, 1264, 1265, 1262, 208,
	3845, 3788, 3621, 1261, 1225, 3660, 1409, 922, 4072, 2673,
	2220, 3656, 3496, 141, 2681, 208, 65, 199, 170, 2766,
	2378, 1641, 3904, 1072, 931, 3813, 3455, 929, 127, 2717,
	3963, 3786, 208, 65, 199, 170, 1402, 204, 1571, 1406,
	754, 1405, 1404, 1034, 3846, 932, 1033, 1085, 1080, 1075,
	1079, 1083, 930, 1073, 3147, 208, 1443, 2997, 208, 65,
	199, 170, 1067, 1906, 1068, 1655, 2231, 1410, 208, 65,
	199, 170, 204, 712, 1650, 1088, 2370, 208, 2562, 1078,
	1673, 1037, 1035, 208, 1036, 1018, 1260, 1654, 204, 208,
	3815, 1895, 2563, 1904, 993, 927, 1662, 3040, 3041, 208,
	65, 199, 170, 208, 1647, 204, 2084, 2085, 1908, 1909,
	208, 65, 199, 170, 150, 151, 923, 152, 153, 2117,
	1426, 995, 154, 3174, 3039, 155, 1659, 3171, 1649, 2083,
	1086, 204, 3092, 1194, 3284, 856, 1505, 1687, 3080, 1506,
	2643, 204, 2459, 1962, 1424, 2549, 1089, 1533, 2548, 1535,
	1661, 2550, 141, 208, 1491, 1031, 204, 1983, 1490, 1493,
	1494, 1483, 204, 1723, 974, 2793, 975, 2789, 1707, 1493,
	1494, 1711, 204, 1076, 2811, 1197, 204, 208, 1258, 1043,
	3282, 2377, 1066, 204, 2812, 1065, 3915, 4001, 169, 197,
	206, 198, 125, 1017, 1015, 1710, 2320, 1087, 1607, 1605,
	2845, 3915, 141, 4008, 3914, 955, 1039, 3914, 4000, 4047,
	4048, 196, 190, 189, 3913, 3999, 3913, 3631, 71, 969,
	1014, 965, 3896, 4071, 4114, 4115, 204, 1821, 3073, 2767,
	3992, 1253, 987, 2810, 1508, 3392, 3074, 1077, 3075, 3989,
	2791, 3392, 2786, 994, 1027, 901, 3989, 900, 902, 903,
	2843, 904, 905, 3899, 3900, 3901, 3902, 3777, 2668, 1727,
	1200, 1191, 2235, 675, 675, 2935, 1425, 1023, 1960, 3926,
	1041, 1205, 1208, 3406, 675, 1190, 2091, 947, 1702, 192,
	193, 194, 169, 197, 206, 198, 149, 3465, 2101, 2227,
	2790, 3470, 2787, 1712, 702, 702, 2991, 675, 2501, 3110,
	2846, 3665, 2365, 1024, 1028, 196, 3231, 2163, 1614, 1613,
	972, 3817, 3818, 2796, 1084, 1256, 1257, 1709, 3553, 4010,
	2465, 3108, 195, 1011, 202, 1009, 1013, 1031, 1255, 1907,
	1118, 1010, 1007, 1006, 2232, 1012, 997, 998, 996, 999,
	1000, 1001, 1002, 2678, 1029, 137, 1030, 1040, 1228, 195,
	1081, 138, 971, 1082, 964, 1395, 2765, 1025, 1026, 1905,
	1303, 3605, 2508, 968, 967, 1481, 3067, 1519, 3225, 3630,
	3822, 2095, 699, 699, 699, 3916, 3825, 3632, 4046, 2817,
	3642, 1205, 1208, 2985, 956, 2503, 2115, 2116, 3409, 3114,
	1726, 1725, 3662, 4015, 1021, 2771, 3437, 1183, 1182, 925,
	1020, 1182, 1507, 1182, 963, 3767, 2221, 1190, 139, 1961,
	2511, 2221, 2221, 2338, 1069, 1016, 1071, 1250, 1894, 1427,
	667, 64, 2565, 973, 3090, 3568, 3622, 748, 962, 3087,
	750, 2792, 961, 2788, 1708, 749, 4080, 2254, 949, 3850,
	1335, 3842, 1108, 1108, 1220, 2222, 1108, 3236, 1108, 926,
	3312, 954, 3313, 1092, 1108, 1108, 1074, 1251, 1252, 700,
	3844, 2504, 2505, 1733, 1736, 1737, 2238, 2240, 2241, 1182,
	66, 2234, 1199, 3286, 1734, 3248, 700, 3261, 952, 3310,
	3311, 3945, 1207, 1206, 3223, 3565, 1038, 1069, 3940, 1071,
	2853, 933, 2995, 1019, 704, 3768, 703, 2372, 2848, 990,
	991, 3558, 985, 2626, 3181, 147, 205, 986, 148, 2377,
	1072, 911, 700, 171, 1609, 3787, 972, 1398, 62, 1400,
	3931, 66, 3947, 698, 698, 698, 2887, 3513, 1178, 1493,
	1494, 1185, 1414, 697, 697, 697, 1417, 3816, 66, 1184,
	1423, 1068, 953, 700, 1209, 1656, 3661, 1217, 171, 1375,
	1196, 1189, 1380, 2763, 700, 2682, 4012, 1213, 1214, 1403,
	694, 694, 694, 3953, 171, 3281, 1297, 1304, 696, 696,
	696, 1219, 3237, 984, 66, 1493, 1494, 695, 695, 695,
	3520, 171, 1470, 1072, 140, 46, 1896, 974, 2432, 975,
	928, 63, 1207, 1206, 3451, 5, 3316, 3811, 1240, 1697,
	205, 1241, 1698, 1482, 171, 66, 3650, 171, 3851, 3448,
	3843, 2356, 3199, 2499, 144, 145, 66, 171, 146, 970,
	1299, 1300, 1301, 1302, 3229, 2992, 171, 3569, 675, 1243,
	3111, 1521, 171, 3237, 4009, 675, 3232, 1489, 171, 651,
	651, 2102, 3819, 1193, 1195, 1198, 4017, 4018, 171, 651,
	651, 3925, 171, 1558, 1558, 3796, 675, 3797, 959, 171,
	4013, 4014, 3450, 4021, 4020, 4019, 4022, 2936, 2445, 2937,
	2938, 4153, 2565, 3791, 2425, 2448, 3730, 702, 1586, 669,
	3226, 3227, 2477, 1336, 1597, 1347, 1348, 2092, 3666, 1703,
	2883, 2884, 2507, 2887, 2476, 3618, 3228, 1211, 2823, 225,
	1543, 3224, 171, 1542, 1556, 1556, 1218, 1565, 651, 2816,
	1468, 3799, 3287, 1467, 1560, 2497, 2498, 1466, 1735, 1485,
	1484, 2239, 3954, 1238, 3719, 4035, 171, 3830, 3290, 2431,
	3864, 1177, 2447, 3796, 2433, 3797, 3169, 2468, 3498, 2425,
	1420, 1421, 3602, 3798, 3395, 1430, 1431, 1432, 1433, 1434,
	1419, 1436, 3725, 1294, 1520, 2227, 712, 1442, 948, 3986,
	1639, 946, 1379, 4136, 1529, 1644, 2820, 2821, 3034, 3036,
	1381, 3443, 1653, 1245, 3306, 2442, 1246, 1552, 1553, 1428,
	1225, 2819, 2094, 1807, 3185, 2446, 2674, 1239, 2434, 3799,
	1463, 3315, 3310, 3311, 2554, 2463, 2224, 1472, 1476, 1476,
	1476, 1685, 1429, 2435, 1248, 2090, 1688, 3740, 3741, 3742,
	3746, 3744, 3745, 3747, 3743, 1558, 2067, 1558, 1190, 3051,
	3052, 3798, 1472, 1472, 1663, 1416, 2376, 1435, 1460, 1450,
	3344, 1477, 1478, 3732, 1453, 3458, 1469, 1537, 1539, 3113,
	2777, 1898, 1441, 1479, 3307, 1440, 973, 1550, 1551, 1615,
	1439, 1498, 1499, 1438, 1501, 1502, 1044, 1503, 1497, 4016,
	1648, 1500, 2250, 3863, 1242, 706, 976, 1660, 2933, 2924,
	1224, 1587, 1618, 3434, 1621, 1622, 2925, 2926, 2927, 1408,
	699, 1629, 1630, 699, 699, 1558, 1623, 1624, 1510, 1511,
	1541, 978, 979, 980, 2236, 2237, 1696, 2658, 1244, 1652,
	1448, 2357, 1190, 1785, 4137, 1911, 1610, 4034, 2783, 680,
	2955, 2956, 1637, 1912, 1032, 1816, 1817, 1834, 1820, 1634,
	2351, 2350, 1638, 1572, 1578, 1566, 1835, 1598, 2829, 2833,
	2834, 2835, 2830, 2832, 2831, 2349, 1769, 1249, 2436, 1842,
	1584, 1844, 3035, 1845, 1846, 1847, 3122, 3121, 1413, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753,
	1754, 1599, 1247, 1803, 945, 1766, 1767, 3640, 1719, 3187,
	1800, 2964, 1411, 1412, 1802, 1799, 1801, 1805, 1806, 3721,
	3396, 3792, 1804, 3720, 1190, 3793, 2348, 1910, 934, 2441,
	1897, 3726, 3727, 2439, 1900, 1072, 1902, 1700, 1034, 2489,
	1738, 1033, 1072, 1716, 935, 1877, 1913, 1915, 3693, 1916,
	2288, 1918, 1919, 2287, 1843, 669, 1586, 1666, 1819, 3266,
	4149, 1927, 1558, 1932, 1933, 4143, 1935, 1521, 675, 4155,
	1187, 698, 2858, 675, 698, 698, 1558, 2954, 4134, 4135,
	984, 697, 1462, 1955, 697, 697, 1671, 1695, 2735, 1674,
	1694, 3308, 3996, 1690, 1693, 1713, 1558, 1880, 1689, 3792,
	938, 4131, 1521, 3909, 1718, 1833, 1045, 693, 694, 2778,
	1899, 694, 694, 1261, 4090, 1462, 696, 2532, 3350, 696,
	696, 2368, 2144, 1757, 1692, 695, 1261, 1982, 695, 695,
	2565, 3346, 1691, 2229, 1722, 2859, 1989, 1989, 4144, 1521,
	1407, 1521, 1521, 4162, 1032, 675, 675, 1225, 2056, 1927,
	2060, 942, 4058, 1558, 2064, 2065, 940, 939, 2802, 2080,
	2645, 651, 3461, 1824, 1825, 1826, 1810, 1811, 1812, 1813,
	1814, 1815, 1808, 1809, 4091, 651, 1840, 1558, 3408, 1841,
	4145, 2803, 2804, 4055, 1986, 1764, 1765, 4091, 3245, 2325,
	1936, 1672, 938, 3509, 1675, 1676, 1854, 1855, 2673, 1883,
	1704, 2928, 2929, 2930, 675, 1927, 1558, 1934, 2127, 1705,
	675, 675, 675, 710, 710, 2859, 1876, 1187, 1848, 1261,
	2137, 2138, 2139, 2140, 2533, 4059, 2011, 2146, 1034, 3320,
	3318, 1033, 3205, 941, 225, 2118, 4049, 225, 225, 2367,
	225, 4031, 2058, 937, 1878, 2533, 3179, 1921, 940, 939,
	1931, 1884, 800, 143, 3980, 2263, 4056, 3350, 143, 1923,
	1924, 1925, 1992, 3177, 1947, 2142, 2965, 2967, 2968, 2969,
	2966, 1938, 1939, 1940, 1941, 755, 2533, 1223, 2110, 2111,
	1834, 1834, 2188, 3979, 1963, 1263, 1264, 1265, 1262, 3054,
	1922, 2768, 1834, 1834, 2087, 1222, 2089, 1956, 3973, 2205,
	1888, 2129, 2130, 2131, 1472, 1680, 1681, 2108, 2109, 2264,
	2663, 1951, 1952, 2650, 4032, 2220, 2096, 2082, 1476, 1974,
	2154, 3246, 681, 2157, 2158, 143, 2160, 1261, 2103, 1032,
	1476, 2262, 1955, 2199, 2418, 1981, 1558, 2218, 1984, 1985,
	1991, 2063, 1971, 2190, 1993, 1994, 3948, 1966, 1967, 2126,
	1975, 2330, 1225, 1957, 1958, 2324, 1261, 3936, 1970, 2081,
	1972, 1973, 1980, 2323, 1976, 1977, 1376, 1988, 1990, 2057,
	1965, 2264, 1223, 2462, 1979, 2405, 1648, 3883, 3058, 2062,
	3882, 2295, 3877, 2068, 1987, 2211, 1103, 1104, 1105, 2212,
	2086, 3876, 2088, 2113, 1716, 2066, 1449, 2097, 1684, 1772,
	3875, 699, 1544, 2195, 2861, 3874, 2707, 1683, 915, 916,
	917, 918, 1069, 1034, 1071, 2676, 1033, 2675, 3854, 2229,
	1102, 2667, 2412, 1099, 1069, 2124, 1071, 2125, 2183, 3469,
	3937, 2283, 2132, 2133, 2268, 1168, 1164, 1165, 1166, 1167,
	2183, 2712, 3853, 2711, 2710, 2708, 2210, 2151, 2149, 3828,
	3884, 1233, 3757, 2391, 1235, 2264, 3574, 1070, 1263, 1264,
	1265, 1262, 143, 3572, 2264, 2135, 1263, 1264, 1265, 1262,
	3522, 3487, 2168, 2264, 3426, 2247, 2248, 143, 2264, 143,
	1668, 1312, 1236, 1210, 1174, 3422, 2201, 1263, 1264, 1265,
	1262, 2229, 915, 916, 917, 918, 1169, 1294, 1109, 1110,
	2112, 2189, 1955, 1114, 3145, 2432, 2435, 2198, 1072, 2196,
	936, 1072, 2404, 2709, 3328, 2229, 1278, 3029, 3271, 2209,
	1072, 1069, 2264, 1071, 2335, 2336, 2754, 2339, 2742, 2565,
	2342, 2734, 3105, 2260, 2689, 675, 1521, 675, 1521, 2671,
	2213, 2432, 2435, 3523, 3488, 2352, 4156, 3427, 4118, 2266,
	2659, 753, 698, 1548, 675, 675, 675, 2226, 3423, 2318,
	920, 2460, 697, 3918, 1549, 2207, 3941, 3694, 3262, 675,
	675, 675, 675, 1569, 2242, 1473, 1229, 3827, 2251, 2652,
	2647, 2639, 2388, 1096, 1097, 1098, 1101, 3329, 1100, 694,
	2533, 2392, 2393, 2394, 1757, 2397, 1521, 696, 2637, 2391,
	2243, 1261, 1231, 2244, 1261, 2256, 695, 1261, 2635, 1458,
	3942, 3695, 2391, 1459, 1234, 1237, 2633, 1072, 1849, 1850,
	1851, 1852, 1521, 2648, 1856, 1857, 1858, 1859, 1861, 1862,
	1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 2454,
	1230, 2436, 2390, 2326, 920, 3784, 2431, 2425, 2430, 3263,
	2428, 2433, 2653, 2648, 2640, 2245, 2246, 1504, 2302, 2345,
	2301, 2347, 2420, 3723, 943, 2286, 2713, 2714, 1546, 2277,
	3501, 2638, 2208, 2276, 2409, 2275, 2265, 2436, 2411, 2228,
	2413, 2634, 2431, 2425, 2430, 1677, 2428, 2433, 2461, 2634,
	3722, 2296, 2297, 3264, 2299, 3499, 1474, 675, 1989, 1776,
	3708, 2306, 3669, 3479, 2327, 2434, 2537, 2537, 2080, 2537,
	2625, 2319, 2321, 2322, 3502, 2391, 2325, 1232, 1276, 1286,
	1287, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1278, 651,
	651, 1261, 3351, 1261, 1823, 1822, 3342, 1190, 1261, 3500,
	3334, 2434, 1261, 1558, 675, 2414, 1261, 3330, 1261, 2264,
	2358, 3240, 2229, 1823, 1822, 2424, 2988, 2423, 1678, 675,
	1458, 2987, 2827, 2773, 1459, 1190, 2609, 669, 1763, 2686,
	1335, 2651, 1545, 1597, 2556, 2080, 2152, 2193, 2615, 2192,
	2617, 3381, 2191, 225, 1760, 1762, 1759, 1445, 1761, 2417,
	1444, 2611, 1192, 2696, 2560, 2619, 1776, 3059, 2257, 2398,
	1281, 1282, 1283, 1284, 1285, 1278, 2399, 2400, 1917, 2541,
	2539, 3998, 2543, 2551, 1262, 2552, 2402, 2403, 1602, 3735,
	2152, 1265, 1262, 2655, 1476, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, 1278, 4152, 2557, 2558, 3734, 3076, 2545, 2922,
	1069, 2669, 1071, 4040, 2218, 2920, 2437, 2438, 1860, 2443,
	2567, 1558, 2899, 1558, 2897, 1558, 2410, 3714, 2401, 2406,
	1190, 3670, 3671, 2407, 3663, 3467, 2408, 1853, 2688, 2620,
	1263, 1264, 1265, 1262, 2976, 2974, 2614, 1277, 1276, 1286,
	1287, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1278, 2756,
	2506, 2757, 1314, 2512, 1558, 1190, 2290, 1838, 4151, 2720,
	1263, 1264, 1265, 1262, 2679, 1313, 2972, 2961, 2546, 4128,
	4127, 3384, 1839, 4126, 2727, 1263, 1264, 1265, 1262, 1558,
	1263, 1264, 1265, 1262, 3664, 3468, 2629, 1537, 1539, 3382,
	1263, 1264, 1265, 1262, 2975, 2973, 1072, 2561, 2564, 2698,
	4124, 143, 143, 143, 1070, 1556, 1269, 1270, 1271, 1272,
	1273, 1274, 1275, 1267, 2715, 1263, 1264, 1265, 1262, 2610,
	4123, 4062, 4030, 2613, 2621, 4029, 2971, 2960, 2775, 2776,
	1556, 3473, 2779, 3138, 3943, 3478, 2731, 2732, 2795, 2728,
	2700, 2612, 2700, 1263, 1264, 1265, 1262, 1263, 1264, 1265,
	1262, 1190, 1603, 3879, 3867, 1602, 3857, 3847, 1558, 3636,
	3775, 1521, 3697, 2729, 3696, 3514, 2704, 1521, 2060, 2726,
	2685, 3503, 2680, 1336, 2826, 2718, 2857, 1295, 3624, 2661,
	3466, 3230, 2863, 3101, 2694, 2864, 1263, 1264, 1265, 1262,
	2672, 3071, 1266, 2670, 2677, 3070, 3137, 2959, 2958, 1716,
	1296, 2573, 1540, 2874, 2760, 1263, 1264, 1265, 1262, 1306,
	2957, 3217, 2949, 1190, 1263, 1264, 1265, 1262, 2690, 2691,
	3124, 2896, 2943, 1263, 1264, 1265, 1262, 2942, 1190, 1190,
	1190, 1989, 2941, 4148, 1190, 1315, 2906, 2907, 2908, 2909,
	1190, 2916, 2716, 2917, 2918, 2839, 2919, 2706, 2921, 1286,
	1287, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1278, 2916,
	2841, 2940, 2769, 2844, 2875, 2854, 1263, 1264, 1265, 1262,
	2641, 2537, 1277, 1276, 1286, 1287, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1278, 2824, 2977, 4146, 2553, 2011, 2329,
	2840, 2171, 2170, 2169, 651, 2165, 2683, 2877, 1263, 1264,
	1265, 1262, 2060, 2164, 2119, 2693, 1190, 2080, 2080, 2080,
	2080, 2080, 2080, 1903, 2806, 1901, 2808, 1669, 2665, 2666,
	1394, 2279, 3612, 1190, 2080, 4116, 1382, 2537, 4079, 2865,
	2894, 4078, 2982, 2890, 2894, 2261, 2805, 3820, 3821, 2822,
	1172, 748, 4075, 3037, 750, 1558, 1931, 2847, 2901, 749,
	4005, 4004, 2856, 3806, 8, 3984, 675, 675, 7, 2466,
	2862, 3928, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 3674,
	3922, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486,
	2487, 2488, 2879, 2490, 2491, 2492, 2493, 2494, 2892, 2495,
	2876, 2278, 3903, 2898, 1263, 1264, 1265, 1262, 1072, 1171,
	2904, 2867, 3894, 3871, 3025, 3623, 2870, 3866, 3865, 3824,
	4154, 3810, 225, 1263, 1264, 1265, 1262, 225, 1263, 1264,
	1265, 1262, 2895, 3808, 2993, 3776, 2939, 2573, 3716, 3678,
	2951, 3038, 1263, 1264, 1265, 1262, 3667, 3652, 2866, 1834,
	3651, 1834, 2271, 3647, 3086, 3645, 2078, 2871, 2872, 3562,
	3641, 3638, 3635, 2873, 3055, 3634, 3610, 3608, 3100, 2983,
	3581, 3578, 2989, 3576, 1558, 2981, 3414, 3107, 3006, 3007,
	3008, 3009, 3010, 3011, 3463, 3445, 1263, 1264, 1265, 1262,
	3435, 1567, 3026, 3419, 3022, 681, 3028, 3027, 3417, 2891,
	3412, 3362, 2986, 1263, 1264, 1265, 1262, 3340, 3060, 3339,
	3337, 3336, 3042, 3064, 2891, 2902, 2903, 3045, 3141, 3331,
	2905, 3326, 674, 674, 3325, 3241, 2912, 3140, 682, 3203,
	3202, 143, 1622, 3193, 3189, 1880, 1629, 1630, 3139, 1596,
	3085, 3081, 1623, 1624, 3186, 1263, 1264, 1265, 1262, 1263,
	1264, 1265, 1262, 3093, 1263, 1264, 1265, 1262, 3184, 2334,
	3115, 3112, 1637, 3083, 3091, 1263, 1264, 1265, 1262, 1634,
	3062, 3069, 1638, 3044, 3094, 2970, 3061, 2962, 2952, 3188,
	2950, 2946, 675, 1521, 2945, 2944, 2784, 3109, 3194, 3195,
	3196, 3198, 3005, 3200, 3201, 2774, 3079, 3082, 3077, 143,
	3097, 3084, 1190, 2770, 2662, 3095, 143, 2353, 1190, 3005,
	3096, 856, 855, 2889, 3220, 2343, 2340, 3104, 2174, 143,
	2167, 1891, 143, 143, 3234, 3103, 1890, 1670, 1343, 675,
	1339, 1338, 1175, 3116, 3117, 143, 924, 4104, 3136, 2753,
	3960, 3123, 3956, 3251, 1190, 2752, 3129, 675, 3131, 675,
	1190, 1190, 3132, 3133, 3801, 208, 3130, 199, 170, 2080,
	2388, 3800, 3270, 3789, 3127, 3128, 1263, 1264, 1265, 1262,
	3785, 3637, 1263, 1264, 1265, 1262, 1072, 3619, 3178, 3591,
	3494, 3493, 2454, 3491, 3460, 3431, 3244, 2259, 1072, 3429,
	3428, 3425, 682, 3424, 3296, 3418, 3299, 3416, 3299, 3299,
	3247, 3397, 3387, 1190, 3386, 3182, 3192, 1728, 1729, 1730,
	1731, 1732, 3183, 3373, 2751, 3372, 3272, 2839, 2813, 3207,
	3204, 3321, 3176, 3143, 3134, 3317, 3126, 3125, 204, 4103,
	3274, 3119, 1558, 1558, 3053, 2636, 2632, 3283, 3285, 3254,
	3222, 1263, 1264, 1265, 1262, 3259, 2631, 2307, 2300, 1773,
	2294, 2293, 2292, 1777, 1778, 1779, 1780, 2291, 2289, 2285,
	3268, 2284, 2282, 1818, 2273, 1263, 1264, 1265, 1262, 3243,
	2270, 1828, 3279, 2269, 2173, 1874, 1069, 1873, 1071, 675,
	1872, 3253, 3294, 1556, 1556, 3220, 3265, 3257, 3258, 3269,
	1837, 208, 3322, 3323, 3295, 1836, 788, 798, 1521, 1827,
	3304, 2060, 2060, 2424, 3278, 2423, 789, 1570, 790, 794,
	797, 793, 791, 792, 2931, 2932, 1289, 1568, 1293, 3300,
	3301, 4061, 3978, 3305, 1881, 1333, 3955, 3889, 3886, 2947,
	2948, 3319, 3873, 3868, 1290, 1292, 1288, 3770, 1291, 1277,
	1276, 1286, 1287, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
	1278, 3769, 3751, 3733, 2984, 1190, 3729, 3972, 2750, 2720,
	3707, 795, 2749, 3691, 204, 3592, 3589, 3385, 3560, 3559,
	3327, 3556, 1072, 3555, 1072, 3521, 3273, 3518, 3206, 3516,
	1072, 3275, 3276, 3481, 2891, 1263, 1264, 1265, 1262, 1263,
	1264, 1265, 1262, 3135, 796, 1617, 1628, 4096, 3858, 1619,
	3333, 3332, 3302, 1633, 1636, 1625, 1452, 1072, 1959, 3347,
	3348, 3341, 3705, 3335, 675, 3338, 3016, 2978, 2900, 2850,
	2891, 3345, 2849, 3277, 2842, 2807, 2891, 2891, 3358, 2755,
	3359, 2646, 2555, 2496, 1978, 2389, 2360, 2359, 2328, 1758,
	204, 711, 2134, 1887, 3366, 1701, 3369, 3370, 3371, 1651,
	1626, 2079, 1277, 1276, 1286, 1287, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1278, 1393, 3375, 1277, 1276, 1286, 1287,
	1279, 1280, 1281, 1282, 1283, 1284, 1285, 1278, 1378, 2891,
	2748, 1374, 1373, 1372, 1371, 1370, 1369, 2146, 3439, 1368,
	1367, 3441, 2747, 1881, 3398, 1366, 1365, 3446, 1881, 1881,
	1364, 1363, 3452, 1362, 3401, 1361, 3400, 1263, 1264, 1265,
	1262, 3405, 1360, 3349, 1359, 2700, 1358, 3420, 1357, 1263,
	1264, 1265, 1262, 3453, 1356, 1355, 143, 1354, 1353, 143,
	143, 2746, 143, 1352, 1351, 3365, 1350, 675, 2060, 3410,
	3447, 1349, 3449, 1346, 1345, 3404, 1344, 1342, 2153, 3486,
	2745, 2156, 3444, 1341, 2159, 1340, 1337, 2161, 1263, 1264,
	1265, 1262, 1330, 1329, 1327, 1326, 2537, 2080, 3506, 1325,
	1324, 1323, 1070, 1322, 1321, 143, 1320, 1263, 1264, 1265,
	1262, 1319, 1318, 1317, 1070, 1316, 1311, 3436, 2744, 3432,
	1310, 3524, 3438, 1309, 1190, 1308, 1307, 3457, 1227, 1173,
	143, 3970, 3459, 3296, 3354, 3355, 3968, 1190, 3456, 3462,
	3966, 3557, 2396, 2204, 2374, 1263, 1264, 1265, 1262, 1190,
	1215, 3571, 4094, 4045, 3357, 1558, 2828, 2566, 3474, 674,
	1179, 2573, 2741, 3485, 2176, 1226, 3508, 3014, 3024, 3019,
	1188, 3364, 3492, 2740, 3020, 675, 3476, 2060, 3013, 3017,
	3021, 1190, 2527, 2528, 3018, 3363, 3554, 3360, 3594, 1263,
	1264, 1265, 1262, 1216, 2739, 3515, 3595, 3517, 3505, 3504,
	1263, 1264, 1265, 1262, 3547, 126, 1556, 3023, 3511, 2733,
	68, 1295, 3012, 225, 2723, 3573, 67, 3997, 3582, 3905,
	3712, 1263, 1264, 1265, 1262, 2660, 1190, 2649, 2719, 3585,
	1446, 1949, 1950, 3561, 3563, 3566, 1263, 1264, 1265, 1262,
	3596, 1263, 1264, 1265, 1262, 3570, 3593, 3239, 2253, 2695,
	3402, 3403, 2258, 3577, 3575, 1263, 1264, 1265, 1262, 3580,
	2267, 3579, 1944, 1945, 1946, 3586, 3583, 1072, 3639, 3584,
	3587, 3099, 2464, 1771, 1072, 677, 1263, 1264, 1265, 1262,
	678, 3292, 3649, 3293, 3617, 3567, 679, 3376, 2048, 1611,
	2644, 2684, 1190, 2665, 2666, 3215, 1665, 2274, 1645, 3603,
	1263, 1264, 1265, 1262, 2354, 2281, 2136, 3613, 3507, 1221,
	3208, 2878, 1190, 1558, 1558, 3614, 2851, 3510, 2416, 3251,
	2384, 3646, 1953, 3648, 1920, 1823, 1822, 2298, 1389, 1390,
	1387, 1388, 2303, 2304, 2305, 1385, 1386, 2308, 2309, 2310,
	2311, 2312, 2313, 2314, 2315, 2316, 2317, 1190, 3701, 1190,
	1383, 1384, 3686, 3680, 3681, 3686, 4107, 3704, 3870, 3706,
	3643, 3324, 2509, 2502, 1556, 1769, 1558, 3675, 2061, 3659,
	3658, 3657, 3677, 3676, 1513, 1254, 1512, 2194, 3368, 3654,
	3668, 3047, 2355, 2206, 675, 1465, 1190, 1190, 1464, 3679,
	1190, 1190, 1437, 1488, 3690, 3689, 2190, 4068, 4066, 4023,
	3525, 3994, 3508, 3993, 3991, 3700, 3932, 3890, 3753, 3765,
	3764, 3702, 3609, 3564, 3748, 3683, 3710, 1769, 3421, 3554,
	1955, 3598, 3394, 3762, 3717, 2912, 3713, 3393, 3379, 2449,
	3703, 2419, 1667, 3378, 3709, 3771, 3772, 3547, 3057, 1462,
	3440, 3737, 3738, 3102, 3715, 3749, 3750, 2782, 1558, 4098,
	4097, 1187, 2781, 2780, 2272, 3759, 1397, 3005, 1212, 4097,
	4098, 3731, 3374, 3633, 1480, 3758, 76, 915, 916, 917,
	918, 3802, 1187, 3803, 212, 3, 2, 3760, 3754, 4120,
	4121, 1, 2761, 3795, 1277, 1276, 1286, 1287, 1279, 1280,
	1281, 1282, 1283, 1284, 1285, 1278, 3807, 1885, 3809, 1556,
	3782, 3778, 3005, 1391, 919, 3790, 914, 1534, 3783, 2547,
	2114, 1562, 3794, 1889, 921, 3030, 3031, 3367, 3033, 2785,
	2225, 2994, 3839, 3812, 1516, 2500, 2364, 3233, 1447, 977,
	2540, 1527, 1829, 1682, 1204, 1679, 1203, 1201, 1190, 1774,
	802, 2179, 2979, 3823, 3698, 3699, 3833, 2953, 3856, 3761,
	1072, 4106, 1564, 4140, 4060, 4109, 1699, 786, 3985, 3895,
	4064, 3897, 3781, 1881, 3834, 1881, 3617, 2230, 2891, 3836,
	3835, 1259, 3862, 3078, 1004, 843, 3852, 813, 3848, 1328,
	1658, 3148, 1190, 3146, 1881, 1881, 812, 1558, 3471, 2818,
	2737, 2738, 3766, 3050, 3841, 1005, 2743, 2079, 2162, 3892,
	3779, 1612, 1616, 3869, 2415, 143, 3849, 3951, 3831, 3711,
	3288, 2886, 1640, 2515, 3946, 3519, 3144, 3629, 1596, 3627,
	3628, 718, 2093, 1722, 649, 1722, 1054, 3482, 3483, 3484,
	3752, 2175, 719, 2395, 3489, 3490, 4011, 3878, 1556, 3872,
	957, 3454, 2373, 958, 3924, 3911, 950, 3880, 2837, 3891,
	2522, 2526, 2527, 2528, 2523, 2531, 2524, 2529, 2836, 3919,
	2525, 3920, 2530, 1739, 1268, 1756, 3167, 2654, 3168, 2657,
	1277, 1276, 1286, 1287, 1279, 1280, 1281, 1282, 1283, 1284,
	1285, 1278, 1305, 757, 3921, 2522, 2526, 2527, 2528, 2523,
	2531, 2524, 2529, 3933, 3927, 2525, 2255, 2530, 2815, 3542,
	3043, 75, 74, 73, 1190, 3935, 72, 233, 804, 232,
	3804, 3672, 1558, 3981, 4111, 3975, 783, 782, 3944, 781,
	3982, 3950, 3965, 3967, 3969, 3971, 780, 3949, 779, 778,
	2520, 2521, 2519, 2697, 3983, 3958, 2703, 2517, 2516, 2075,
	2074, 3056, 3377, 1072, 2141, 2143, 3249, 2721, 2722, 2915,
	2910, 2000, 1998, 1525, 2444, 2724, 2725, 2451, 1997, 3964,
	3990, 3988, 4042, 1556, 3411, 1558, 3620, 4002, 3839, 3961,
	3962, 2730, 3974, 4006, 3728, 2963, 3616, 1943, 2440, 4003,
	2017, 2934, 2014, 2013, 4033, 2923, 3724, 3718, 2045, 3837,
	4041, 3685, 4024, 3526, 3527, 3533, 4026, 2383, 1123, 1119,
	1728, 1881, 4027, 4028, 1121, 1122, 1120, 2705, 3343, 2421,
	3210, 3887, 3888, 2801, 1722, 2800, 1556, 4057, 2798, 2797,
	1422, 3923, 4050, 4007, 4051, 4025, 4052, 3653, 4053, 2571,
	2569, 4054, 143, 1170, 3356, 4067, 3352, 4069, 4070, 2187,
	3361, 3015, 143, 4065, 4063, 730, 729, 736, 726, 2202,
	3098, 4073, 3911, 2076, 1190, 2072, 4074, 2071, 733, 734,
	1094, 735, 739, 1093, 1593, 720, 45, 2996, 2510, 3814,
	1948, 951, 2371, 4086, 110, 744, 41, 123, 109, 187,
	2868, 2869, 4089, 4088, 4087, 60, 4092, 4095, 4093, 186,
	4105, 59, 4113, 121, 3862, 4112, 184, 58, 4099, 4100,
	4101, 4102, 104, 103, 120, 182, 57, 217, 216, 219,
	218, 4125, 4117, 215, 2622, 2623, 1190, 214, 1600, 213,
	3995, 3688, 3977, 909, 1937, 44, 4129, 43, 4130, 1942,
	188, 4132, 42, 111, 61, 40, 4138, 39, 38, 4142,
	34, 13, 4139, 12, 35, 22, 21, 1686, 20, 3950,
	26, 3755, 32, 31, 136, 3756, 135, 30, 134, 133,
	132, 131, 130, 129, 128, 29, 4150, 19, 52, 2079,
	2079, 2079, 2079, 2079, 2079, 4113, 4158, 51, 4112, 4157,
	50, 49, 48, 47, 9, 124, 2079, 4142, 4159, 119,
	117, 28, 118, 4163, 115, 116, 114, 113, 112, 107,
	105, 1995, 1996, 87, 86, 85, 100, 1514, 1515, 99,
	1517, 1518, 98, 1522, 1523, 1524, 97, 96, 95, 93,
	94, 1881, 3150, 3151, 1003, 84, 83, 82, 3152, 3153,
	3154, 3155, 81, 3156, 3157, 3158, 3159, 3160, 3161, 3162,
	3163, 3164, 3165, 3166, 80, 102, 108, 1573, 1574, 1575,
	1576, 1577, 106, 1579, 1580, 1581, 1582, 1583, 91, 101,
	2123, 1589, 1590, 1591, 1592, 92, 2123, 2123, 2123, 721,
	723, 722, 90, 89, 143, 88, 79, 78, 77, 143,
	728, 168, 167, 166, 165, 164, 162, 163, 161, 160,
	3531, 159, 732, 158, 157, 156, 53, 54, 55, 747,
	143, 3063, 56, 3065, 178, 177, 725, 179, 181, 183,
	180, 185, 143, 175, 173, 176, 208, 65, 199, 170,
	174, 172, 1881, 70, 11, 122, 18, 1881, 4, 0,
	4084, 3543, 0, 0, 0, 200, 0, 0, 0, 2204,
	3881, 0, 191, 0, 3534, 0, 201, 0, 0, 0,
	0, 0, 0, 0, 0, 3529, 0, 0, 0, 0,
	3551, 3552, 0, 0, 0, 141, 3530, 0, 0, 0,
	0, 0, 0, 0, 3118, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 1722, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3142, 3535, 0, 0, 0, 0, 0, 0,
	0, 1263, 1264, 1265, 1262, 0, 0, 3934, 0, 0,
	0, 0, 3938, 3939, 0, 0, 0, 0, 0, 0,
	727, 731, 737, 0, 738, 740, 0, 0, 741, 742,
	743, 0, 0, 745, 746, 0, 0, 0, 0, 0,
	0, 0, 0, 3959, 0, 0, 2046, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 150, 151, 0, 152,
	153, 0, 0, 0, 154, 0, 0, 155, 0, 0,
	0, 0, 0, 0, 0, 0, 3684, 0, 2692, 0,
	0, 1807, 2048, 0, 0, 0, 1070, 0, 143, 0,
	0, 3550, 0, 2430, 143, 0, 0, 0, 0, 0,
	0, 2079, 1277, 1276, 1286, 1287, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1278, 0, 0, 0, 0, 3539, 0,
	0, 143, 0, 0, 0, 0, 204, 0, 0, 0,
	169, 197, 206, 198, 125, 0, 2023, 0, 0, 0,
	3536, 3540, 3538, 3537, 2252, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 190, 189, 0, 0, 0, 0,
	71, 0, 0, 0, 0, 0, 3303, 0, 1277, 1276,
	1286, 1287, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1278,
	0, 2344, 0, 2346, 0, 4076, 4077, 3545, 3546, 724,
	0, 0, 4081, 4082, 4083, 0, 0, 0, 0, 0,
	2361, 2362, 2363, 0, 2039, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2379, 2380, 2381, 2382, 0,
	0, 192, 193, 194, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3532, 0, 0, 0, 0, 0, 3544, 0,
	0, 1803, 0, 0, 0, 0, 202, 0, 1800, 0,
	0, 0, 1802, 1799, 1801, 1805, 1806, 0, 0, 0,
	1804, 0, 0, 0, 0, 0, 0, 137, 2027, 0,
	0, 195, 0, 138, 0, 0, 0, 0, 0, 2033,
	0, 0, 0, 0, 0, 2046, 0, 0, 0, 0,
	2007, 0, 0, 0, 0, 0, 0, 0, 0, 2021,
	2055, 0, 0, 2022, 2024, 2026, 0, 2028, 2029, 2030,
	2034, 2035, 2036, 2038, 2041, 2042, 2043, 0, 0, 0,
	2128, 2048, 2016, 1527, 2031, 2040, 2032, 0, 0, 0,
	139, 2049, 2050, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2015, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2047, 3549, 0,
	1564, 0, 0, 0, 0, 2023, 0, 0, 0, 0,
	0, 0, 0, 0, 3413, 2123, 0, 0, 0, 0,
	0, 3415, 66, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1810, 1811, 1812, 1813, 1814, 1815,
	1808, 1809, 0, 0, 0, 0, 0, 2044, 0, 0,
	0, 0, 0, 3430, 0, 0, 0, 147, 205, 0,
	148, 143, 0, 0, 2020, 171, 0, 0, 143, 0,
	62, 2019, 0, 2039, 3548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2037, 0, 0, 0, 0,
	0, 0, 0, 0, 2025, 3625, 0, 3626, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2046, 2079,
	0, 0, 0, 2007, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 46, 0, 0,
	0, 0, 0, 63, 0, 0, 0, 2006, 2008, 2005,
	0, 0, 2002, 0, 2048, 2016, 0, 2027, 0, 0,
	0, 0, 0, 0, 2049, 2050, 144, 145, 2033, 0,
	146, 0, 0, 0, 0, 0, 2018, 0, 2001, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2021, 2055,
	2015, 0, 2022, 2024, 2026, 0, 2028, 2029, 2030, 2034,
	2035, 2036, 2038, 2041, 2042, 2043, 0, 0, 2023, 0,
	0, 1881, 171, 2031, 2040, 2032, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2010, 0, 1881, 0, 0,
	3588, 0, 0, 3590, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3597, 0, 2047, 0, 0, 0,
	0, 0, 0, 0, 730, 729, 736, 726, 0, 0,
	0, 0, 2855, 0, 0, 0, 2039, 733, 734, 0,
	735, 739, 0, 0, 720, 0, 0, 0, 2003, 2004,
	0, 0, 0, 0, 744, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2044, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2020, 0, 0, 0, 0, 0, 0,
	2019, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	748, 0, 0, 750, 143, 0, 0, 1807, 749, 0,
	2006, 2881, 2005, 0, 2037, 2880, 0, 0, 0, 0,
	2027, 0, 0, 2025, 0, 0, 0, 0, 0, 0,
	0, 2033, 0, 0, 0, 0, 2052, 2051, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2021, 2055, 0, 0, 2022, 2024, 2026, 0, 2028,
	2029, 2030, 2034, 2035, 2036, 2038, 2041, 2042, 2043, 0,
	0, 0, 0, 0, 0, 0, 2031, 2040, 2032, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2010, 2012,
	0, 0, 0, 0, 0, 0, 1142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3048, 3049, 0, 0, 0, 0, 0, 2047,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2054, 0, 0, 2053, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 721, 723,
	722, 2003, 2004, 0, 0, 0, 0, 0, 0, 728,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2044,
	0, 732, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 0, 0, 725, 2020, 1803, 0, 715,
	0, 0, 0, 2019, 1800, 0, 0, 143, 1802, 1799,
	1801, 1805, 1806, 0, 0, 0, 1804, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2037, 0, 0,
	1127, 0, 0, 0, 0, 0, 2025, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2052,
	2051, 1150, 1154, 1156, 1158, 1160, 1161, 1163, 0, 1168,
	1164, 1165, 1166, 1167, 0, 1145, 1146, 1147, 1148, 1125,
	1126, 1151, 1142, 1128, 0, 1130, 1131, 1132, 1133, 1129,
	1134, 1135, 1136, 1137, 1138, 1141, 1143, 1139, 1140, 1149,
	0, 0, 0, 0, 0, 0, 0, 1153, 1155, 1157,
	1159, 1162, 2012, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 727,
	731, 737, 0, 738, 740, 0, 0, 741, 742, 743,
	0, 0, 745, 746, 0, 0, 0, 1144, 3191, 0,
	0, 0, 0, 0, 2054, 1315, 0, 2053, 0, 1788,
	1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798,
	1810, 1811, 1812, 1813, 1814, 1815, 1808, 1809, 0, 1142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3242, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1127, 0, 0, 0,
	1117, 0, 0, 3255, 0, 3256, 0, 0, 0, 0,
	0, 0, 0, 0, 3957, 0, 0, 1150, 1154, 1156,
	1158, 1160, 1161, 1163, 0, 1168, 1164, 1165, 1166, 1167,
	0, 1145, 1146, 1147, 1148, 1125, 1126, 1151, 0, 1128,
	0, 1130, 1131, 1132, 1133, 1129, 1134, 1135, 1136, 1137,
	1138, 1141, 1143, 1139, 1140, 1149, 0, 0, 0, 0,
	0, 0, 0, 1153, 1155, 1157, 1159, 1162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 724, 0,
	2701, 2702, 0, 1127, 0, 0, 0, 0, 0, 0,
	0, 4038, 0, 1144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1150, 1154, 1156, 1158, 1160, 1161,
	1163, 0, 1168, 1164, 1165, 1166, 1167, 0, 1145, 1146,
	1147, 1148, 1125, 1126, 1151, 2123, 1128, 0, 1130, 1131,
	1132, 1133, 1129, 1134, 1135, 1136, 1137, 1138, 1141, 1143,
	1139, 1140, 1149, 0, 0, 0, 0, 0, 0, 0,
	1153, 1155, 1157, 1159, 1162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4038, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1152, 0, 0, 4038, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3407, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 820, 0, 0, 0, 0, 0, 0, 0, 0,
	404, 0, 0, 534, 567, 556, 640, 522, 0, 0,
	0, 0, 4161, 0, 772, 0, 0, 0, 339, 0,
	0, 372, 571, 553, 563, 554, 539, 540, 541, 548,
	351, 542, 543, 544, 514, 545, 515, 546, 547, 811,
	570, 521, 436, 388, 588, 587, 0, 0, 880, 888,
	0, 0, 0, 0, 0, 0, 0, 0, 876, 0,
	0, 0, 0, 764, 0, 0, 801, 856, 855, 788,
	798, 0, 0, 312, 231, 516, 636, 518, 517, 789,
	0, 790, 794, 797, 793, 791, 792, 0, 871, 0,
	0, 0, 0, 0, 0, 756, 768, 0, 773, 0,
	0, 0, 0, 2123, 0, 0, 0, 0, 0, 0,
	1152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 765, 766, 0, 0, 0, 0, 821, 0,
	767, 0, 0, 816, 795, 799, 0, 0, 0, 0,
	302, 443, 462, 313, 431, 475, 318, 439, 454, 308,
	403, 428, 0, 0, 304, 460, 438, 385, 362, 363,
	303, 0, 422, 337, 353, 334, 401, 796, 819, 823,
	333, 894, 817, 470, 306, 0, 469, 400, 456, 461,
	386, 379, 0, 305, 458, 384, 378, 366, 343, 895,
	367, 368, 357, 412, 376, 413, 358, 390, 389, 391,
	0, 0, 0, 0, 0, 498, 499, 1152, 0, 647,
	0, 2123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 629, 814, 0, 633, 0, 472, 0, 0, 878,
	0, 0, 0, 442, 0, 0, 369, 0, 0, 0,
	818, 0, 425, 406, 891, 0, 0, 423, 374, 457,
	414, 463, 444, 471, 419, 415, 296, 445, 336, 387,
	309, 311, 331, 338, 340, 344, 345, 396, 397, 409,
	430, 447, 448, 449, 335, 319, 424, 320, 355, 321,
	297, 327, 325, 328, 432, 329, 299, 410, 453, 0,
	350, 420, 382, 300, 381, 411, 452, 451, 310, 479,
	485, 486, 575, 0, 491, 663, 664, 665, 500, 0,
	416, 0, 0, 0, 0, 0, 0, 0, 505, 506,
	507, 509, 510, 511, 512, 576, 593, 560, 530, 493,
	584, 527, 531, 532, 360, 596, 1831, 1830, 1832, 484,
	370, 371, 0, 342, 341, 383, 301, 348, 293, 294,
	658, 875, 402, 598, 631, 632, 523, 0, 890, 870,
	872, 873, 877, 881, 882, 883, 884, 885, 887, 889,
	893, 657, 0, 577, 592, 661, 591, 654, 408, 0,
	429, 589, 536, 0, 581, 555, 0, 582, 551, 586,
	0, 525, 0, 437, 465, 477, 494, 497, 526, 611,
	612, 613, 298, 496, 615, 616, 617, 618, 619, 620,
	621, 614, 892, 558, 535, 561, 476, 538, 537, 0,
	3736, 572, 822, 573, 574, 392, 393, 394, 395, 879,
	599, 317, 495, 418, 0, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 565, 562, 666, 0, 622,
	623, 0, 0, 489, 490, 347, 354, 508, 356, 316,
	407, 349, 474, 364, 0, 501, 566, 502, 625, 628,
	626, 627, 399, 359, 361, 433, 365, 375, 421, 473,
	405, 426, 314, 464, 435, 380, 552, 579, 901, 874,
	900, 902, 903, 899, 904, 905, 886, 777, 0, 829,
	897, 896, 898, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 607, 606, 605, 604, 603, 602,
	601, 600, 0, 0, 549, 450, 326, 287, 322, 323,
	330, 655, 652, 455, 656, 784, 295, 529, 373, 0,
	417, 346, 594, 595, 0, 646, 863, 836, 837, 838,
	774, 839, 833, 834, 775, 835, 864, 827, 860, 861,
	803, 830, 840, 859, 841, 862, 865, 866, 906, 907,
	847, 831, 259, 908, 844, 867, 858, 857, 842, 828,
	868, 869, 810, 805, 845, 846, 832, 851, 852, 853,
	776, 824, 825, 826, 848, 849, 806, 807, 808, 809,
	0, 0, 0, 480, 481, 482, 504, 0, 466, 528,
	653, 0, 0, 0, 0, 0, 0, 0, 578, 590,
	624, 0, 634, 635, 637, 639, 854, 641, 440, 441,
	648, 0, 850, 644, 645, 642, 377, 427, 446, 434,
	820, 659, 519, 520, 660, 630, 0, 769, 0, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 772, 0, 0, 0, 339, 1882, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 811, 570,
	521, 436, 388, 588, 587, 0, 0, 880, 888, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 2105,
	0, 0, 764, 0, 0, 801, 856, 855, 788, 798,
	0, 0, 312, 231, 516, 636, 518, 517, 789, 0,
	790, 794, 797, 793, 791, 792, 0, 871, 0, 0,
	0, 0, 0, 0, 756, 768, 0, 773, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 765, 766, 0, 0, 0, 0, 821, 0, 767,
	0, 0, 2106, 795, 799, 0, 0, 0, 0, 302,
	443, 462, 313, 431, 475, 318, 439, 454, 308, 403,
	428, 0, 0, 304, 460, 438, 385, 362, 363, 303,
	0, 422, 337, 353, 334, 401, 796, 819, 823, 333,
	894, 817, 470, 306, 0, 469, 400, 456, 461, 386,
	379, 0, 305, 458, 384, 378, 366, 343, 895, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 814, 0, 633, 0, 472, 0, 0, 878, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 818,
	0, 425, 406, 891, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 296, 445, 336, 387, 309,
	311, 331, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 319, 424, 320, 355, 321, 297,
	327, 325, 328, 432, 329, 299, 410, 453, 0, 350,
	420, 382, 300, 381, 411, 452, 451, 310, 479, 485,
	486, 575, 0, 491, 663, 664, 665, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	509, 510, 511, 512, 576, 593, 560, 530, 493, 584,
	527, 531, 532, 360, 596, 0, 0, 0, 484, 370,
	371, 0, 342, 341, 383, 301, 348, 293, 294, 658,
	875, 402, 598, 631, 632, 523, 0, 890, 870, 872,
	873, 877, 881, 882, 883, 884, 885, 887, 889, 893,
	657, 0, 577, 592, 661, 591, 654, 408, 0, 429,
	589, 536, 0, 581, 555, 0, 582, 551, 586, 0,
	525, 0, 437, 465, 477, 494, 497, 526, 611, 612,
	613, 298, 496, 615, 616, 617, 618, 619, 620, 621,
	614, 892, 558, 535, 561, 476, 538, 537, 0, 0,
	572, 822, 573, 574, 392, 393, 394, 395, 879, 599,
	317, 495, 418, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 562, 666, 0, 622, 623,
	0, 0, 489, 490, 347, 354, 508, 356, 316, 407,
	349, 474, 364, 0, 501, 566, 502, 625, 628, 626,
	627, 399, 359, 361, 433, 365, 375, 421, 473, 405,
	426, 314, 464, 435, 380, 552, 579, 901, 874, 900,
	902, 903, 899, 904, 905, 886, 777, 0, 829, 897,
	896, 898, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 606, 605, 604, 603, 602, 601,
	600, 0, 0, 549, 450, 326, 287, 322, 323, 330,
	655, 652, 455, 656, 784, 295, 529, 373, 0, 417,
	346, 594, 595, 0, 646, 863, 836, 837, 838, 774,
	839, 833, 834, 775, 835, 864, 827, 860, 861, 803,
	830, 840, 859, 841, 862, 865, 866, 906, 907, 847,
	831, 259, 908, 844, 867, 858, 857, 842, 828, 868,
	869, 810, 805, 845, 846, 832, 851, 852, 853, 776,
	824, 825, 826, 848, 849, 806, 807, 808, 809, 0,
	0, 0, 480, 481, 482, 504, 0, 466, 528, 653,
	0, 0, 0, 0, 0, 0, 0, 578, 590, 624,
	0, 634, 635, 637, 639, 854, 641, 440, 441, 648,
	0, 850, 644, 645, 642, 377, 427, 446, 434, 0,
	659, 519, 520, 660, 630, 0, 769, 208, 820, 0,
	0, 0, 0, 0, 0, 0, 0, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 772, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 1298, 570, 521, 436,
	388, 588, 587, 0, 0, 880, 888, 0, 0, 0,
	0, 0, 0, 0, 0, 876, 0, 0, 0, 0,
	764, 0, 0, 801, 856, 855, 788, 798, 0, 0,
	312, 231, 516, 636, 518, 517, 789, 0, 790, 794,
	797, 793, 791, 792, 0, 871, 0, 0, 0, 0,
	0, 0, 756, 768, 0, 773, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 765,
	766, 0, 0, 0, 0, 821, 0, 767, 0, 0,
	816, 795, 799, 0, 0, 0, 0, 302, 443, 462,
	313, 431, 475, 318, 439, 454, 308, 403, 428, 0,
	0, 304, 460, 438, 385, 362, 363, 303, 0, 422,
	337, 353, 334, 401, 796, 819, 823, 333, 894, 817,
	470, 306, 0, 469, 400, 456, 461, 386, 379, 0,
	305, 458, 384, 378, 366, 343, 895, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 814,
	0, 633, 0, 472, 0, 0, 878, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 818, 0, 425,
	406, 891, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 296, 445, 336, 387, 309, 311, 331,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 319, 424, 320, 355, 321, 297, 327, 325,
	328, 432, 329, 299, 410, 453, 0, 350, 420, 382,
	300, 381, 411, 452, 451, 310, 479, 485, 486, 575,
	0, 491, 663, 664, 665, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 301, 348, 293, 294, 658, 875, 402,
	598, 631, 632, 523, 0, 890, 870, 872, 873, 877,
	881, 882, 883, 884, 885, 887, 889, 893, 657, 0,
	577, 592, 661, 591, 654, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 298,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 892,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 822,
	573, 574, 392, 393, 394, 395, 879, 599, 317, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 666, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 316, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 314,
	464, 435, 380, 552, 579, 901, 874, 900, 902, 903,
	899, 904, 905, 886, 777, 0, 829, 897, 896, 898,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 326, 287, 322, 323, 330, 655, 652,
	455, 656, 784, 295, 529, 373, 171, 417, 346, 594,
	595, 0, 646, 863, 836, 837, 838, 774, 839, 833,
	834, 775, 835, 864, 827, 860, 861, 803, 830, 840,
	859, 841, 862, 865, 866, 906, 907, 847, 831, 259,
	908, 844, 867, 858, 857, 842, 828, 868, 869, 810,
	805, 845, 846, 832, 851, 852, 853, 776, 824, 825,
	826, 848, 849, 806, 807, 808, 809, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 653, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 854, 641, 440, 441, 648, 0, 850,
	644, 645, 642, 377, 427, 446, 434, 820, 659, 519,
	520, 660, 630, 0, 769, 0, 404, 0, 0, 534,
	567, 556, 640, 522, 0, 0, 0, 0, 0, 0,
	772, 0, 0, 0, 339, 4160, 0, 372, 571, 553,
	563, 554, 539, 540, 541, 548, 351, 542, 543, 544,
	514, 545, 515, 546, 547, 811, 570, 521, 436, 388,
	588, 587, 0, 0, 880, 888, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 0, 0, 0, 0, 764,
	0, 0, 801, 856, 855, 788, 798, 0, 0, 312,
	231, 516, 636, 518, 517, 789, 0, 790, 794, 797,
	793, 791, 792, 0, 871, 0, 0, 0, 0, 0,
	0, 756, 768, 0, 773, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 765, 766,
	0, 0, 0, 0, 821, 0, 767, 0, 0, 816,
	795, 799, 0, 0, 0, 0, 302, 443, 462, 313,
	431, 475, 318, 439, 454, 308, 403, 428, 0, 0,
	304, 460, 438, 385, 362, 363, 303, 0, 422, 337,
	353, 334, 401, 796, 819, 823, 333, 894, 817, 470,
	306, 0, 469, 400, 456, 461, 386, 379, 0, 305,
	458, 384, 378, 366, 343, 895, 367, 368, 357, 412,
	376, 413, 358, 390, 389, 391, 0, 0, 0, 0,
	0, 498, 499, 0, 0, 647, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 629, 814, 0,
	633, 0, 472, 0, 0, 878, 0, 0, 0, 442,
	0, 0, 369, 0, 0, 0, 818, 0, 425, 406,
	891, 0, 0, 423, 374, 457, 414, 463, 444, 471,
	419, 415, 296, 445, 336, 387, 309, 311, 331, 338,
	340, 344, 345, 396, 397, 409, 430, 447, 448, 449,
	335, 319, 424, 320, 355, 321, 297, 327, 325, 328,
	432, 329, 299, 410, 453, 0, 350, 420, 382, 300,
	381, 411, 452, 451, 310, 479, 485, 486, 575, 0,
	491, 663, 664, 665, 500, 0, 416, 0, 0, 0,
	0, 0, 0, 0, 505, 506, 507, 509, 510, 511,
	512, 576, 593, 560, 530, 493, 584, 527, 531, 532,
	360, 596, 0, 0, 0, 484, 370, 371, 0, 342,
	341, 383, 301, 348, 293, 294, 658, 875, 402, 598,
	631, 632, 523, 0, 890, 870, 872, 873, 877, 881,
	882, 883, 884, 885, 887, 889, 893, 657, 0, 577,
	592, 661, 591, 654, 408, 0, 429, 589, 536, 0,
	581, 555, 0, 582, 551, 586, 0, 525, 0, 437,
	465, 477, 494, 497, 526, 611, 612, 613, 298, 496,
	615, 616, 617, 618, 619, 620, 621, 614, 892, 558,
	535, 561, 476, 538, 537, 0, 0, 572, 822, 573,
	574, 392, 393, 394, 395, 879, 599, 317, 495, 418,
	0, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	564, 565, 562, 666, 0, 622, 623, 0, 0, 489,
	490, 347, 354, 508, 356, 316, 407, 349, 474, 364,
	0, 501, 566, 502, 625, 628, 626, 627, 399, 359,
	361, 433, 365, 375, 421, 473, 405, 426, 314, 464,
	435, 380, 552, 579, 901, 874, 900, 902, 903, 899,
	904, 905, 886, 777, 0, 829, 897, 896, 898, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	607, 606, 605, 604, 603, 602, 601, 600, 0, 0,
	549, 450, 326, 287, 322, 323, 330, 655, 652, 455,
	656, 784, 295, 529, 373, 0, 417, 346, 594, 595,
	0, 646, 863, 836, 837, 838, 774, 839, 833, 834,
	775, 835, 864, 827, 860, 861, 803, 830, 840, 859,
	841, 862, 865, 866, 906, 907, 847, 831, 259, 908,
	844, 867, 858, 857, 842, 828, 868, 869, 810, 805,
	845, 846, 832, 851, 852, 853, 776, 824, 825, 826,
	848, 849, 806, 807, 808, 809, 0, 0, 0, 480,
	481, 482, 504, 0, 466, 528, 653, 0, 0, 0,
	0, 0, 0, 0, 578, 590, 624, 0, 634, 635,
	637, 639, 854, 641, 440, 441, 648, 0, 850, 644,
	645, 642, 377, 427, 446, 434, 820, 659, 519, 520,
	660, 630, 0, 769, 0, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 772,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 811, 570, 521, 436, 388, 588,
	587, 0, 0, 880, 888, 0, 0, 0, 0, 0,
	0, 0, 0, 876, 0, 0, 0, 0, 764, 0,
	0, 801, 856, 855, 788, 798, 0, 0, 312, 231,
	516, 636, 518, 517, 789, 0, 790, 794, 797, 793,
	791, 792, 0, 871, 0, 0, 0, 0, 0, 0,
	756, 768, 0, 773, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 765, 766, 0,
	0, 0, 0, 821, 0, 767, 0, 0, 816, 795,
	799, 0, 0, 0, 0, 302, 443, 462, 313, 431,
	475, 318, 439, 454, 308, 403, 428, 0, 0, 304,
	460, 438, 385, 362, 363, 303, 0, 422, 337, 353,
	334, 401, 796, 819, 823, 333, 894, 817, 470, 306,
	0, 469, 400, 456, 461, 386, 379, 0, 305, 458,
	384, 378, 366, 343, 895, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 814, 0, 633,
	0, 472, 0, 0, 878, 0, 0, 0, 442, 0,
	0, 369, 0, 0, 0, 818, 0, 425, 406, 891,
	4039, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 296, 445, 336, 387, 309, 311, 331, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	319, 424, 320, 355, 321, 297, 327, 325, 328, 432,
	329, 299, 410, 453, 0, 350, 420, 382, 300, 381,
	411, 452, 451, 310, 479, 485, 486, 575, 0, 491,
	663, 664, 665, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 301, 348, 293, 294, 658, 875, 402, 598, 631,
	632, 523, 0, 890, 870, 872, 873, 877, 881, 882,
	883, 884, 885, 887, 889, 893, 657, 0, 577, 592,
	661, 591, 654, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 298, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 892, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 822, 573, 574,
	392, 393, 394, 395, 879, 599, 317, 495, 418, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 666, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 316, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 314, 464, 435,
	380, 552, 579, 901, 874, 900, 902, 903, 899, 904,
	905, 886, 777, 0, 829, 897, 896, 898, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 0, 0, 549,
	450, 326, 287, 322, 323, 330, 655, 652, 455, 656,
	784, 295, 529, 373, 0, 417, 346, 594, 595, 0,
	646, 863, 836, 837, 838, 774, 839, 833, 834, 775,
	835, 864, 827, 860, 861, 803, 830, 840, 859, 841,
	862, 865, 866, 906, 907, 847, 831, 259, 908, 844,
	867, 858, 857, 842, 828, 868, 869, 810, 805, 845,
	846, 832, 851, 852, 853, 776, 824, 825, 826, 848,
	849, 806, 807, 808, 809, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 653, 0, 0, 0, 0,
	0, 0, 0, 578, 590, 624, 0, 634, 635, 637,
	639, 854, 641, 440, 441, 648, 0, 850, 644, 645,
	642, 377, 427, 446, 434, 820, 659, 519, 520, 660,
	630, 0, 769, 0, 404, 0, 0, 534, 567, 556,
	640, 522, 0, 0, 0, 0, 0, 0, 772, 0,
	0, 0, 339, 1882, 0, 372, 571, 553, 563, 554,
	539, 540, 541, 548, 351, 542, 543, 544, 514, 545,
	515, 546, 547, 811, 570, 521, 436, 388, 588, 587,
	0, 0, 880, 888, 0, 0, 0, 0, 0, 0,
	0, 0, 876, 0, 0, 0, 0, 764, 0, 0,
	801, 856, 855, 788, 798, 0, 0, 312, 231, 516,
	636, 518, 517, 789, 0, 790, 794, 797, 793, 791,
	792, 0, 871, 0, 0, 0, 0, 0, 0, 756,
	768, 0, 773, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 765, 766, 0, 0,
	0, 0, 821, 0, 767, 0, 0, 816, 795, 799,
	0, 0, 0, 0, 302, 443, 462, 313, 431, 475,
	318, 439, 454, 308, 403, 428, 0, 0, 304, 460,
	438, 385, 362, 363, 303, 0, 422, 337, 353, 334,
	401, 796, 819, 823, 333, 894, 817, 470, 306, 0,
	469, 400, 456, 461, 386, 379, 0, 305, 458, 384,
	378, 366, 343, 895, 367, 368, 357, 412, 376, 413,
	358, 390, 389, 391, 0, 0, 0, 0, 0, 498,
	499, 0, 0, 647, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 629, 814, 0, 633, 0,
	472, 0, 0, 878, 0, 0, 0, 442, 0, 0,
	369, 0, 0, 0, 818, 0, 425, 406, 891, 0,
	0, 423, 374, 457, 414, 463, 444, 471, 419, 415,
	296, 445, 336, 387, 309, 311, 331, 338, 340, 344,
	345, 396, 397, 409, 430, 447, 448, 449, 335, 319,
	424, 320, 355, 321, 297, 327, 325, 328, 432, 329,
	299, 410, 453, 0, 350, 420, 382, 300, 381, 411,
	452, 451, 310, 479, 485, 486, 575, 0, 491, 663,
	664, 665, 500, 0, 416, 0, 0, 0, 0, 0,
	0, 0, 505, 506, 507, 509, 510, 511, 512, 576,
	593, 560, 530, 493, 584, 527, 531, 532, 360, 596,
	0, 0, 0, 484, 370, 371, 0, 342, 341, 383,
	301, 348, 293, 294, 658, 875, 402, 598, 631, 632,
	523, 0, 890, 870, 872, 873, 877, 881, 882, 883,
	884, 885, 887, 889, 893, 657, 0, 577, 592, 661,
	591, 654, 408, 0, 429, 589, 536, 0, 581, 555,
	0, 582, 551, 586, 0, 525, 0, 437, 465, 477,
	494, 497, 526, 611, 612, 613, 298, 496, 615, 616,
	617, 618, 619, 620, 621, 614, 892, 558, 535, 561,
	476, 538, 537, 0, 0, 572, 822, 573, 574, 392,
	393, 394, 395, 879, 599, 317, 495, 418, 0, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 565,
	562, 666, 0, 622, 623, 0, 0, 489, 490, 347,
	354, 508, 356, 316, 407, 349, 474, 364, 0, 501,
	566, 502, 625, 628, 626, 627, 399, 359, 361, 433,
	365, 375, 421, 473, 405, 426, 314, 464, 435, 380,
	552, 579, 901, 874, 900, 902, 903, 899, 904, 905,
	886, 777, 0, 829, 897, 896, 898, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 607, 606,
	605, 604, 603, 602, 601, 600, 0, 0, 549, 450,
	326, 287, 322, 323, 330, 655, 652, 455, 656, 784,
	295, 529, 373, 0, 417, 346, 594, 595, 0, 646,
	863, 836, 837, 838, 774, 839, 833, 834, 775, 835,
	864, 827, 860, 861, 803, 830, 840, 859, 841, 862,
	865, 866, 906, 907, 847, 831, 259, 908, 844, 867,
	858, 857, 842, 828, 868, 869, 810, 805, 845, 846,
	832, 851, 852, 853, 776, 824, 825, 826, 848, 849,
	806, 807, 808, 809, 0, 0, 0, 480, 481, 482,
	504, 0, 466, 528, 653, 0, 0, 0, 0, 0,
	0, 0, 578, 590, 624, 0, 634, 635, 637, 639,
	854, 641, 440, 441, 648, 0, 850, 644, 645, 642,
	377, 427, 446, 434, 820, 659, 519, 520, 660, 630,
	0, 769, 0, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 0, 0, 0, 0, 0, 772, 0, 0,
	0, 339, 0, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 811, 570, 521, 436, 388, 588, 587, 0,
	0, 880, 888, 0, 0, 0, 0, 0, 0, 0,
	0, 876, 0, 0, 0, 0, 764, 0, 0, 801,
	856, 855, 788, 798, 0, 0, 312, 231, 516, 636,
	518, 517, 789, 0, 790, 794, 797, 793, 791, 792,
	0, 871, 0, 0, 0, 0, 0, 0, 756, 768,
	0, 773, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 765, 766, 1595, 0, 0,
	0, 821, 0, 767, 0, 0, 816, 795, 799, 0,
	0, 0, 0, 302, 443, 462, 313, 431, 475, 318,
	439, 454, 308, 403, 428, 0, 0, 304, 460, 438,
	385, 362, 363, 303, 0, 422, 337, 353, 334, 401,
	796, 819, 823, 333, 894, 817, 470, 306, 0, 469,
	400, 456, 461, 386, 379, 0, 305, 458, 384, 378,
	366, 343, 895, 367, 368, 357, 412, 376, 413, 358,
	390, 389, 391, 0, 0, 0, 0, 0, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 814, 0, 633, 0, 472,
	0, 0, 878, 0, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 818, 0, 425, 406, 891, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 419, 415, 296,
	445, 336, 387, 309, 311, 331, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 319, 424,
	320, 355, 321, 297, 327, 325, 328, 432, 329, 299,
	410, 453, 0, 350, 420, 382, 300, 381, 411, 452,
	451, 310, 479, 485, 486, 575, 0, 491, 663, 664,
	665, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 301,
	348, 293, 294, 658, 875, 402, 598, 631, 632, 523,
	0, 890, 870, 872, 873, 877, 881, 882, 883, 884,
	885, 887, 889, 893, 657, 0, 577, 592, 661, 591,
	654, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 298, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 892, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 822, 573, 574, 392, 393,
	394, 395, 879, 599, 317, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	666, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 316, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 314, 464, 435, 380, 552,
	579, 901, 874, 900, 902, 903, 899, 904, 905, 886,
	777, 0, 829, 897, 896, 898, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 326,
	287, 322, 323, 330, 655, 652, 455, 656, 784, 295,
	529, 373, 0, 417, 346, 594, 595, 0, 646, 863,
	836, 837, 838, 774, 839, 833, 834, 775, 835, 864,
	827, 860, 861, 803, 830, 840, 859, 841, 862, 865,
	866, 906, 907, 847, 831, 259, 908, 844, 867, 858,
	857, 842, 828, 868, 869, 810, 805, 845, 846, 832,
	851, 852, 853, 776, 824, 825, 826, 848, 849, 806,
	807, 808, 809, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 653, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 854,
	641, 440, 441, 648, 0, 850, 644, 645, 642, 377,
	427, 446, 434, 0, 659, 519, 520, 660, 630, 820,
	769, 0, 2280, 0, 0, 0, 0, 0, 404, 0,
	0, 534, 567, 556, 640, 522, 0, 0, 0, 0,
	0, 0, 772, 0, 0, 0, 339, 0, 0, 372,
	571, 553, 563, 554, 539, 540, 541, 548, 351, 542,
	543, 544, 514, 545, 515, 546, 547, 811, 570, 521,
	436, 388, 588, 587, 0, 0, 880, 888, 0, 0,
	0, 0, 0, 0, 0, 0, 876, 0, 0, 0,
	0, 764, 0, 0, 801, 856, 855, 788, 798, 0,
	0, 312, 231, 516, 636, 518, 517, 789, 0, 790,
	794, 797, 793, 791, 792, 0, 871, 0, 0, 0,
	0, 0, 0, 756, 768, 0, 773, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	765, 766, 0, 0, 0, 0, 821, 0, 767, 0,
	0, 816, 795, 799, 0, 0, 0, 0, 302, 443,
	462, 313, 431, 475, 318, 439, 454, 308, 403, 428,
	0, 0, 304, 460, 438, 385, 362, 363, 303, 0,
	422, 337, 353, 334, 401, 796, 819, 823, 333, 894,
	817, 470, 306, 0, 469, 400, 456, 461, 386, 379,
	0, 305, 458, 384, 378, 366, 343, 895, 367, 368,
	357, 412, 376, 413, 358, 390, 389, 391, 0, 0,
	0, 0, 0, 498, 499, 0, 0, 647, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 629,
	814, 0, 633, 0, 472, 0, 0, 878, 0, 0,
	0, 442, 0, 0, 369, 0, 0, 0, 818, 0,
	425, 406, 891, 0, 0, 423, 374, 457, 414, 463,
	444, 471, 419, 415, 296, 445, 336, 387, 309, 311,
	331, 338, 340, 344, 345, 396, 397, 409, 430, 447,
	448, 449, 335, 319, 424, 320, 355, 321, 297, 327,
	325, 328, 432, 329, 299, 410, 453, 0, 350, 420,
	382, 300, 381, 411, 452, 451, 310, 479, 485, 486,
	575, 0, 491, 663, 664, 665, 500, 0, 416, 0,
	0, 0, 0, 0, 0, 0, 505, 506, 507, 509,
	510, 511, 512, 576, 593, 560, 530, 493, 584, 527,
	531, 532, 360, 596, 0, 0, 0, 484, 370, 371,
	0, 342, 341, 383, 301, 348, 293, 294, 658, 875,
	402, 598, 631, 632, 523, 0, 890, 870, 872, 873,
	877, 881, 882, 883, 884, 885, 887, 889, 893, 657,
	0, 577, 592, 661, 591, 654, 408, 0, 429, 589,
	536, 0, 581, 555, 0, 582, 551, 586, 0, 525,
	0, 437, 465, 477, 494, 497, 526, 611, 612, 613,
	298, 496, 615, 616, 617, 618, 619, 620, 621, 614,
	892, 558, 535, 561, 476, 538, 537, 0, 0, 572,
	822, 573, 574, 392, 393, 394, 395, 879, 599, 317,
	495, 418, 0, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 565, 562, 666, 0, 622, 623, 0,
	0, 489, 490, 347, 354, 508, 356, 316, 407, 349,
	474, 364, 0, 501, 566, 502, 625, 628, 626, 627,
	399, 359, 361, 433, 365, 375, 421, 473, 405, 426,
	314, 464, 435, 380, 552, 579, 901, 874, 900, 902,
	903, 899, 904, 905, 886, 777, 0, 829, 897, 896,
	898, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 607, 606, 605, 604, 603, 602, 601, 600,
	0, 0, 549, 450, 326, 287, 322, 323, 330, 655,
	652, 455, 656, 784, 295, 529, 373, 0, 417, 346,
	594, 595, 0, 646, 863, 836, 837, 838, 774, 839,
	833, 834, 775, 835, 864, 827, 860, 861, 803, 830,
	840, 859, 841, 862, 865, 866, 906, 907, 847, 831,
	259, 908, 844, 867, 858, 857, 842, 828, 868, 869,
	810, 805, 845, 846, 832, 851, 852, 853, 776, 824,
	825, 826, 848, 849, 806, 807, 808, 809, 0, 0,
	0, 480, 481, 482, 504, 0, 466, 528, 653, 0,
	0, 0, 0, 0, 0, 0, 578, 590, 624, 0,
	634, 635, 637, 639, 854, 641, 440, 441, 648, 0,
	850, 644, 645, 642, 377, 427, 446, 434, 820, 659,
	519, 520, 660, 630, 0, 769, 0, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 772, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 811, 570, 521, 436,
	388, 588, 587, 0, 0, 880, 888, 0, 0, 0,
	0, 0, 0, 0, 0, 876, 0, 0, 0, 0,
	764, 0, 0, 801, 856, 855, 788, 798, 0, 0,
	312, 231, 516, 636, 518, 517, 789, 0, 790, 794,
	797, 793, 791, 792, 0, 871, 0, 0, 0, 0,
	0, 0, 756, 768, 0, 773, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 765,
	766, 1875, 0, 0, 0, 821, 0, 767, 0, 0,
	816, 795, 799, 0, 0, 0, 0, 302, 443, 462,
	313, 431, 475, 318, 439, 454, 308, 403, 428, 0,
	0, 304, 460, 438, 385, 362, 363, 303, 0, 422,
	337, 353, 334, 401, 796, 819, 823, 333, 894, 817,
	470, 306, 0, 469, 400, 456, 461, 386, 379, 0,
	305, 458, 384, 378, 366, 343, 895, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 814,
	0, 633, 0, 472, 0, 0, 878, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 818, 0, 425,
	406, 891, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 296, 445, 336, 387, 309, 311, 331,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 319, 424, 320, 355, 321, 297, 327, 325,
	328, 432, 329, 299, 410, 453, 0, 350, 420, 382,
	300, 381, 411, 452, 451, 310, 479, 485, 486, 575,
	0, 491, 663, 664, 665, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 301, 348, 293, 294, 658, 875, 402,
	598, 631, 632, 523, 0, 890, 870, 872, 873, 877,
	881, 882, 883, 884, 885, 887, 889, 893, 657, 0,
	577, 592, 661, 591, 654, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 298,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 892,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 822,
	573, 574, 392, 393, 394, 395, 879, 599, 317, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 666, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 316, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 314,
	464, 435, 380, 552, 579, 901, 874, 900, 902, 903,
	899, 904, 905, 886, 777, 0, 829, 897, 896, 898,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 326, 287, 322, 323, 330, 655, 652,
	455, 656, 784, 295, 529, 373, 0, 417, 346, 594,
	595, 0, 646, 863, 836, 837, 838, 774, 839, 833,
	834, 775, 835, 864, 827, 860, 861, 803, 830, 840,
	859, 841, 862, 865, 866, 906, 907, 847, 831, 259,
	908, 844, 867, 858, 857, 842, 828, 868, 869, 810,
	805, 845, 846, 832, 851, 852, 853, 776, 824, 825,
	826, 848, 849, 806, 807, 808, 809, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 653, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 854, 641, 440, 441, 648, 0, 850,
	644, 645, 642, 377, 427, 446, 434, 820, 659, 519,
	520, 660, 630, 0, 769, 0, 404, 0, 0, 534,
	567, 556, 640, 522, 0, 0, 0, 0, 0, 0,
	772, 0, 0, 0, 339, 0, 0, 372, 571, 553,
	563, 554, 539, 540, 541, 548, 351, 542, 543, 544,
	514, 545, 515, 546, 547, 811, 570, 521, 436, 388,
	588, 587, 0, 0, 880, 888, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 0, 0, 0, 0, 764,
	0, 0, 801, 856, 855, 788, 798, 0, 0, 312,
	231, 516, 636, 518, 517, 789, 0, 790, 794, 797,
	793, 791, 792, 0, 871, 0, 0, 0, 0, 0,
	0, 756, 768, 0, 773, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 765, 766,
	0, 0, 0, 0, 821, 0, 767, 0, 0, 816,
	795, 799, 0, 0, 0, 0, 302, 443, 462, 313,
	431, 475, 318, 439, 454, 308, 403, 428, 0, 0,
	304, 460, 438, 385, 362, 363, 303, 0, 422, 337,
	353, 334, 401, 796, 819, 823, 333, 894, 817, 470,
	306, 0, 469, 400, 456, 461, 386, 379, 0, 305,
	458, 384, 378, 366, 343, 895, 367, 368, 357, 412,
	376, 413, 358, 390, 389, 391, 0, 0, 0, 0,
	0, 498, 499, 0, 0, 647, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 629, 814, 0,
	633, 0, 472, 0, 0, 878, 0, 0, 0, 442,
	0, 0, 369, 0, 0, 0, 818, 0, 425, 406,
	891, 0, 0, 423, 374, 457, 414, 463, 444, 471,
	419, 415, 296, 445, 336, 387, 309, 311, 331, 338,
	340, 344, 345, 396, 397, 409, 430, 447, 448, 449,
	335, 319, 424, 320, 355, 321, 297, 327, 325, 328,
	432, 329, 299, 410, 453, 0, 350, 420, 382, 300,
	381, 411, 452, 451, 310, 479, 485, 486, 575, 0,
	491, 663, 664, 665, 500, 0, 416, 0, 0, 0,
	0, 0, 0, 0, 505, 506, 507, 509, 510, 511,
	512, 576, 593, 560, 530, 493, 584, 527, 531, 532,
	360, 596, 0, 0, 0, 484, 370, 371, 0, 342,
	341, 383, 301, 348, 293, 294, 658, 875, 402, 598,
	631, 632, 523, 0, 890, 870, 872, 873, 877, 881,
	882, 883, 884, 885, 887, 889, 893, 657, 0, 577,
	592, 661, 591, 654, 408, 0, 429, 589, 536, 0,
	581, 555, 0, 582, 551, 586, 0, 525, 0, 437,
	465, 477, 494, 497, 526, 611, 612, 613, 298, 496,
	615, 616, 617, 618, 619, 620, 621, 614, 892, 558,
	535, 561, 476, 538, 537, 0, 0, 572, 822, 573,
	574, 392, 393, 394, 395, 879, 599, 317, 495, 418,
	0, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	564, 565, 562, 666, 0, 622, 623, 0, 0, 489,
	490, 347, 354, 508, 356, 316, 407, 349, 474, 364,
	0, 501, 566, 502, 625, 628, 626, 627, 399, 359,
	361, 433, 365, 375, 421, 473, 405, 426, 314, 464,
	435, 380, 552, 579, 901, 874, 900, 902, 903, 899,
	904, 905, 886, 777, 0, 829, 897, 896, 898, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	607, 606, 605, 604, 603, 602, 601, 600, 0, 0,
	549, 450, 326, 287, 322, 323, 330, 655, 652, 455,
	656, 784, 295, 529, 373, 0, 417, 346, 594, 595,
	0, 646, 863, 836, 837, 838, 774, 839, 833, 834,
	775, 835, 864, 827, 860, 861, 803, 830, 840, 859,
	841, 862, 865, 866, 906, 907, 847, 831, 259, 908,
	844, 867, 858, 857, 842, 828, 868, 869, 810, 805,
	845, 846, 832, 851, 852, 853, 776, 824, 825, 826,
	848, 849, 806, 807, 808, 809, 0, 0, 0, 480,
	481, 482, 504, 0, 466, 528, 653, 0, 0, 0,
	0, 0, 0, 0, 578, 590, 624, 0, 634, 635,
	637, 639, 854, 641, 440, 441, 648, 0, 850, 644,
	645, 642, 377, 427, 446, 434, 820, 659, 519, 520,
	660, 630, 0, 769, 0, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 772,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 811, 570, 521, 436, 388, 588,
	587, 0, 0, 880, 888, 0, 0, 0, 0, 0,
	0, 0, 0, 876, 0, 0, 0, 0, 764, 0,
	0, 801, 856, 855, 788, 798, 0, 0, 312, 231,
	516, 636, 518, 517, 789, 0, 790, 794, 797, 793,
	791, 792, 0, 871, 0, 0, 0, 0, 0, 0,
	756, 768, 0, 773, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 765, 766, 0,
	0, 0, 0, 821, 0, 767, 0, 0, 816, 795,
	799, 0, 0, 0, 0, 302, 443, 462, 313, 431,
	475, 318, 439, 454, 308, 403, 428, 0, 0, 304,
	460, 438, 385, 362, 363, 303, 0, 422, 337, 353,
	334, 401, 796, 819, 823, 333, 894, 817, 470, 306,
	0, 469, 400, 456, 461, 386, 379, 0, 305, 458,
	384, 378, 366, 343, 895, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 814, 0, 633,
	0, 472, 0, 0, 878, 0, 0, 0, 442, 0,
	0, 369, 0, 0, 0, 818, 0, 425, 406, 891,
	0, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 296, 445, 336, 387, 309, 311, 331, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	319, 424, 320, 355, 321, 297, 327, 325, 328, 432,
	329, 299, 410, 453, 0, 350, 420, 382, 300, 381,
	411, 452, 451, 310, 479, 485, 486, 575, 0, 491,
	663, 664, 665, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 301, 348, 293, 294, 658, 875, 402, 598, 631,
	632, 523, 0, 890, 870, 872, 873, 877, 881, 882,
	883, 884, 885, 887, 889, 893, 657, 0, 577, 592,
	661, 591, 654, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 298, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 892, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 822, 573, 574,
	392, 393, 394, 395, 879, 599, 317, 495, 418, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 666, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 316, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 314, 464, 435,
	380, 552, 579, 901, 874, 900, 902, 903, 899, 904,
	905, 886, 777, 0, 829, 897, 896, 898, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 0, 0, 549,
	450, 326, 287, 322, 323, 330, 655, 652, 455, 656,
	784, 295, 529, 373, 0, 417, 346, 594, 595, 0,
	646, 863, 836, 837, 838, 774, 839, 833, 834, 775,
	835, 864, 827, 860, 861, 803, 830, 840, 859, 841,
	862, 865, 866, 906, 907, 847, 831, 259, 908, 844,
	867, 858, 857, 842, 828, 868, 869, 810, 805, 845,
	846, 832, 851, 852, 853, 776, 824, 825, 826, 848,
	849, 806, 807, 808, 809, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 653, 0, 0, 0, 0,
	0, 0, 0, 578, 590, 624, 0, 634, 635, 637,
	639, 854, 641, 440, 441, 648, 0, 3599, 644, 3600,
	3601, 377, 427, 446, 434, 820, 659, 519, 520, 660,
	630, 0, 769, 0, 404, 0, 0, 534, 567, 556,
	640, 522, 0, 0, 0, 0, 0, 0, 772, 0,
	0, 0, 339, 0, 0, 372, 571, 553, 563, 554,
	539, 540, 541, 548, 351, 542, 543, 544, 514, 545,
	515, 546, 547, 811, 570, 521, 436, 388, 588, 587,
	0, 0, 880, 888, 0, 0, 0, 0, 0, 0,
	0, 0, 876, 0, 0, 0, 0, 764, 0, 0,
	801, 856, 855, 788, 798, 0, 0, 312, 231, 516,
	636, 518, 517, 2758, 0, 2759, 794, 797, 793, 791,
	792, 0, 871, 0, 0, 0, 0, 0, 0, 756,
	768, 0, 773, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 765, 766, 0, 0,
	0, 0, 821, 0, 767, 0, 0, 816, 795, 799,
	0, 0, 0, 0, 302, 443, 462, 313, 431, 475,
	318, 439, 454, 308, 403, 428, 0, 0, 304, 460,
	438, 385, 362, 363, 303, 0, 422, 337, 353, 334,
	401, 796, 819, 823, 333, 894, 817, 470, 306, 0,
	469, 400, 456, 461, 386, 379, 0, 305, 458, 384,
	378, 366, 343, 895, 367, 368, 357, 412, 376, 413,
	358, 390, 389, 391, 0, 0, 0, 0, 0, 498,
	499, 0, 0, 647, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 629, 814, 0, 633, 0,
	472, 0, 0, 878, 0, 0, 0, 442, 0, 0,
	369, 0, 0, 0, 818, 0, 425, 406, 891, 0,
	0, 423, 374, 457, 414, 463, 444, 471, 419, 415,
	296, 445, 336, 387, 309, 311, 331, 338, 340, 344,
	345, 396, 397, 409, 430, 447, 448, 449, 335, 319,
	424, 320, 355, 321, 297, 327, 325, 328, 432, 329,
	299, 410, 453, 0, 350, 420, 382, 300, 381, 411,
	452, 451, 310, 479, 485, 486, 575, 0, 491, 663,
	664, 665, 500, 0, 416, 0, 0, 0, 0, 0,
	0, 0, 505, 506, 507, 509, 510, 511, 512, 576,
	593, 560, 530, 493, 584, 527, 531, 532, 360, 596,
	0, 0, 0, 484, 370, 371, 0, 342, 341, 383,
	301, 348, 293, 294, 658, 875, 402, 598, 631, 632,
	523, 0, 890, 870, 872, 873, 877, 881, 882, 883,
	884, 885, 887, 889, 893, 657, 0, 577, 592, 661,
	591, 654, 408, 0, 429, 589, 536, 0, 581, 555,
	0, 582, 551, 586, 0, 525, 0, 437, 465, 477,
	494, 497, 526, 611, 612, 613, 298, 496, 615, 616,
	617, 618, 619, 620, 621, 614, 892, 558, 535, 561,
	476, 538, 537, 0, 0, 572, 822, 573, 574, 392,
	393, 394, 395, 879, 599, 317, 495, 418, 0, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 565,
	562, 666, 0, 622, 623, 0, 0, 489, 490, 347,
	354, 508, 356, 316, 407, 349, 474, 364, 0, 501,
	566, 502, 625, 628, 626, 627, 399, 359, 361, 433,
	365, 375, 421, 473, 405, 426, 314, 464, 435, 380,
	552, 579, 901, 874, 900, 902, 903, 899, 904, 905,
	886, 777, 0, 829, 897, 896, 898, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 607, 606,
	605, 604, 603, 602, 601, 600, 0, 0, 549, 450,
	326, 287, 322, 323, 330, 655, 652, 455, 656, 784,
	295, 529, 373, 0, 417, 346, 594, 595, 0, 646,
	863, 836, 837, 838, 774, 839, 833, 834, 775, 835,
	864, 827, 860, 861, 803, 830, 840, 859, 841, 862,
	865, 866, 906, 907, 847, 831, 259, 908, 844, 867,
	858, 857, 842, 828, 868, 869, 810, 805, 845, 846,
	832, 851, 852, 853, 776, 824, 825, 826, 848, 849,
	806, 807, 808, 809, 0, 0, 0, 480, 481, 482,
	504, 0, 466, 528, 653, 0, 0, 0, 0, 0,
	0, 0, 578, 590, 624, 0, 634, 635, 637, 639,
	854, 641, 440, 441, 648, 0, 850, 644, 645, 642,
	377, 427, 446, 434, 820, 659, 519, 520, 660, 630,
	0, 769, 0, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 0, 1740, 0, 0, 0, 772, 0, 0,
	0, 339, 0, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 811, 570, 521, 436, 388, 588, 587, 0,
	0, 880, 888, 0, 0, 0, 0, 0, 0, 0,
	0, 876, 0, 0, 0, 0, 764, 0, 0, 801,
	856, 855, 788, 798, 0, 0, 312, 231, 516, 636,
	518, 517, 789, 0, 790, 794, 797, 793, 791, 792,
	0, 871, 0, 0, 0, 0, 0, 0, 0, 768,
	0, 773, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 765, 766, 0, 0, 0,
	0, 821, 0, 767, 0, 0, 816, 795, 799, 0,
	0, 0, 0, 302, 443, 462, 313, 431, 475, 318,
	439, 454, 308, 403, 428, 0, 0, 304, 460, 438,
	385, 362, 363, 303, 0, 422, 337, 353, 334, 401,
	796, 819, 823, 333, 894, 817, 470, 306, 0, 469,
	400, 456, 461, 386, 379, 0, 305, 458, 384, 378,
	366, 343, 895, 367, 368, 357, 412, 376, 413, 358,
	390, 389, 391, 0, 0, 0, 0, 0, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 814, 0, 633, 0, 472,
	0, 0, 878, 0, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 818, 0, 425, 406, 891, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 419, 415, 296,
	445, 336, 387, 309, 311, 331, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 319, 424,
	320, 355, 321, 297, 327, 325, 328, 432, 329, 299,
	410, 453, 0, 350, 420, 382, 300, 381, 411, 452,
	451, 310, 479, 1741, 1742, 575, 0, 491, 663, 664,
	665, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 301,
	348, 293, 294, 658, 875, 402, 598, 631, 632, 523,
	0, 890, 870, 872, 873, 877, 881, 882, 883, 884,
	885, 887, 889, 893, 657, 0, 577, 592, 661, 591,
	654, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 298, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 892, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 822, 573, 574, 392, 393,
	394, 395, 879, 599, 317, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	666, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 316, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 314, 464, 435, 380, 552,
	579, 901, 874, 900, 902, 903, 899, 904, 905, 886,
	777, 0, 829, 897, 896, 898, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 326,
	287, 322, 323, 330, 655, 652, 455, 656, 784, 295,
	529, 373, 0, 417, 346, 594, 595, 0, 646, 863,
	836, 837, 838, 774, 839, 833, 834, 775, 835, 864,
	827, 860, 861, 803, 830, 840, 859, 841, 862, 865,
	866, 906, 907, 847, 831, 259, 908, 844, 867, 858,
	857, 842, 828, 868, 869, 810, 805, 845, 846, 832,
	851, 852, 853, 776, 824, 825, 826, 848, 849, 806,
	807, 808, 809, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 653, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 854,
	641, 440, 441, 648, 0, 850, 644, 645, 642, 377,
	427, 446, 434, 820, 659, 519, 520, 660, 630, 0,
	769, 0, 404, 0, 0, 534, 567, 556, 640, 522,
	0, 0, 0, 0, 0, 0, 772, 0, 0, 0,
	339, 0, 0, 372, 571, 553, 563, 554, 539, 540,
	541, 548, 351, 542, 543, 544, 514, 545, 515, 546,
	547, 811, 570, 521, 436, 388, 588, 587, 0, 0,
	880, 888, 0, 0, 0, 0, 0, 0, 0, 0,
	876, 0, 0, 0, 0, 764, 0, 0, 801, 856,
	855, 788, 798, 0, 0, 312, 231, 516, 636, 518,
	517, 789, 0, 790, 794, 797, 793, 791, 792, 0,
	871, 0, 0, 0, 0, 0, 0, 0, 768, 0,
	773, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 765, 766, 0, 0, 0, 0,
	821, 0, 767, 0, 0, 816, 795, 799, 0, 0,
	0, 0, 302, 443, 462, 313, 431, 475, 318, 439,
	454, 308, 403, 428, 0, 0, 304, 460, 438, 385,
	362, 363, 303, 0, 422, 337, 353, 334, 401, 796,
	819, 823, 333, 894, 817, 470, 306, 0, 469, 400,
	456, 461, 386, 379, 0, 305, 458, 384, 378, 366,
	343, 895, 367, 368, 357, 412, 376, 413, 358, 390,
	389, 391, 0, 0, 0, 0, 0, 498, 499, 0,
	0, 647, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 629, 814, 0, 633, 0, 472, 0,
	0, 878, 0, 0, 0, 442, 0, 0, 369, 0,
	0, 0, 818, 0, 425, 406, 891, 0, 0, 423,
	374, 457, 414, 463, 444, 471, 419, 415, 296, 445,
	336, 387, 309, 311, 331, 338, 340, 344, 345, 396,
	397, 409, 430, 447, 448, 449, 335, 319, 424, 320,
	355, 321, 297, 327, 325, 328, 432, 329, 299, 410,
	453, 0, 350, 420, 382, 300, 381, 411, 452, 451,
	310, 479, 485, 486, 575, 0, 491, 663, 664, 665,
	500, 0, 416, 0, 0, 0, 0, 0, 0, 0,
	505, 506, 507, 509, 510, 511, 512, 576, 593, 560,
	530, 493, 584, 527, 531, 532, 360, 596, 0, 0,
	0, 484, 370, 371, 0, 342, 341, 383, 301, 348,
	293, 294, 658, 875, 402, 598, 631, 632, 523, 0,
	890, 870, 872, 873, 877, 881, 882, 883, 884, 885,
	887, 889, 893, 657, 0, 577, 592, 661, 591, 654,
	408, 0, 429, 589, 536, 0, 581, 555, 0, 582,
	551, 586, 0, 525, 0, 437, 465, 477, 494, 497,
	526, 611, 612, 613, 298, 496, 615, 616, 617, 618,
	619, 620, 621, 614, 892, 558, 535, 561, 476, 538,
	537, 0, 0, 572, 822, 573, 574, 392, 393, 394,
	395, 879, 599, 317, 495, 418, 0, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 565, 562, 666,
	0, 622, 623, 0, 0, 489, 490, 347, 354, 508,
	356, 316, 407, 349, 474, 364, 0, 501, 566, 502,
	625, 628, 626, 627, 399, 359, 361, 433, 365, 375,
	421, 473, 405, 426, 314, 464, 435, 380, 552, 579,
	901, 874, 900, 902, 903, 899, 904, 905, 886, 777,
	0, 829, 897, 896, 898, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 607, 606, 605, 604,
	603, 602, 601, 600, 0, 0, 549, 450, 326, 287,
	322, 323, 330, 655, 652, 455, 656, 784, 295, 529,
	373, 0, 417, 346, 594, 595, 0, 646, 863, 836,
	837, 838, 774, 839, 833, 834, 775, 835, 864, 827,
	860, 861, 803, 830, 840, 859, 841, 862, 865, 866,
	906, 907, 847, 831, 259, 908, 844, 867, 858, 857,
	842, 828, 868, 869, 810, 805, 845, 846, 832, 851,
	852, 853, 776, 824, 825, 826, 848, 849, 806, 807,
	808, 809, 0, 0, 0, 480, 481, 482, 504, 0,
	466, 528, 653, 0, 0, 0, 0, 0, 0, 0,
	578, 590, 624, 0, 634, 635, 637, 639, 854, 641,
	440, 441, 648, 0, 850, 644, 645, 642, 377, 427,
	446, 434, 820, 659, 519, 520, 660, 630, 0, 769,
	0, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 0, 772, 0, 0, 0, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	811, 570, 521, 436, 388, 588, 587, 0, 0, 880,
	888, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	0, 0, 0, 0, 0, 0, 0, 801, 856, 855,
	788, 798, 0, 0, 312, 231, 516, 636, 518, 517,
	789, 0, 790, 794, 797, 793, 791, 792, 0, 871,
	0, 0, 0, 0, 0, 0, 756, 768, 0, 773,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 765, 766, 0, 0, 0, 0, 821,
	0, 767, 0, 0, 816, 795, 799, 0, 0, 0,
	0, 302, 443, 462, 313, 431, 475, 318, 439, 454,
	308, 403, 428, 0, 0, 304, 460, 438, 385, 362,
	363, 303, 0, 422, 337, 353, 334, 401, 796, 819,
	823, 333, 894, 817, 470, 306, 0, 469, 400, 456,
	461, 386, 379, 0, 305, 458, 384, 378, 366, 343,
	895, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 814, 0, 633, 0, 472, 0, 0,
	878, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 818, 0, 425, 406, 891, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 296, 445, 336,
	387, 309, 311, 331, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 319, 424, 320, 355,
	321, 297, 327, 325, 328, 432, 329, 299, 410, 453,
	0, 350, 420, 382, 300, 381, 411, 452, 451, 310,
	479, 485, 486, 575, 0, 491, 663, 664, 665, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 0, 0, 0,
	484, 370, 371, 0, 342, 341, 383, 301, 348, 293,
	294, 658, 875, 402, 598, 631, 632, 523, 0, 890,
	870, 872, 873, 877, 881, 882, 883, 884, 885, 887,
	889, 893, 657, 0, 577, 592, 661, 591, 654, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 298, 496, 615, 616, 617, 618, 619,
	620, 621, 614, 892, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 822, 573, 574, 392, 393, 394, 395,
	879, 599, 317, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 666, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	316, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 314, 464, 435, 380, 552, 579, 901,
	874, 900, 902, 903, 899, 904, 905, 886, 777, 0,
	829, 897, 896, 898, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 326, 287, 322,
	323, 330, 655, 652, 455, 656, 784, 295, 529, 373,
	0, 417, 346, 594, 595, 0, 646, 863, 836, 837,
	838, 774, 839, 833, 834, 775, 835, 864, 827, 860,
	861, 803, 830, 840, 859, 841, 862, 865, 866, 906,
	907, 847, 831, 259, 908, 844, 867, 858, 857, 842,
	828, 868, 869, 810, 805, 845, 846, 832, 851, 852,
	853, 776, 824, 825, 826, 848, 849, 806, 807, 808,
	809, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 653, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 854, 641, 440,
	441, 648, 0, 850, 644, 645, 642, 377, 427, 446,
	434, 0, 659, 519, 520, 660, 630, 0, 769, 208,
	65, 199, 170, 0, 0, 0, 0, 0, 0, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 200, 0,
	0, 0, 0, 0, 0, 191, 0, 339, 0, 201,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 141, 570,
	521, 436, 388, 588, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 230, 0, 0, 0, 0,
	0, 0, 312, 231, 516, 636, 518, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	443, 462, 313, 431, 475, 318, 439, 454, 308, 403,
	428, 0, 0, 304, 460, 438, 385, 362, 363, 303,
	0, 422, 337, 353, 334, 401, 0, 459, 487, 333,
	478, 0, 470, 306, 0, 469, 400, 456, 461, 386,
	379, 0, 305, 458, 384, 378, 366, 343, 503, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 169, 197, 206, 198, 125, 0, 0,
	629, 0, 0, 633, 0, 472, 0, 0, 223, 0,
	0, 0, 442, 0, 0, 369, 196, 190, 189, 488,
	0, 425, 406, 235, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 296, 445, 336, 387, 309,
	311, 331, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 319, 424, 320, 355, 321, 297,
	327, 325, 328, 432, 329, 299, 410, 453, 0, 350,
	420, 382, 300, 381, 411, 452, 451, 310, 479, 485,
	486, 575, 0, 491, 608, 609, 610, 500, 0, 416,
	0, 149, 0, 0, 0, 0, 0, 505, 506, 507,
	509, 510, 511, 512, 576, 593, 560, 530, 493, 584,
	527, 531, 532, 360, 596, 0, 0, 0, 484, 370,
	371, 0, 342, 341, 383, 301, 348, 293, 294, 467,
	332, 402, 598, 631, 632, 523, 0, 585, 524, 533,
	324, 557, 569, 568, 398, 483, 226, 580, 583, 513,
	236, 0, 577, 592, 550, 591, 237, 408, 0, 429,
	589, 536, 0, 581, 555, 0, 582, 551, 586, 0,
	525, 0, 437, 465, 477, 494, 497, 526, 611, 612,
	613, 298, 496, 615, 616, 617, 618, 619, 620, 621,
	614, 468, 558, 535, 561, 476, 538, 537, 0, 0,
	572, 492, 573, 574, 392, 393, 394, 395, 352, 599,
	317, 495, 418, 139, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 562, 234, 0, 622, 623,
	0, 0, 489, 490, 347, 354, 508, 356, 316, 407,
	349, 474, 364, 0, 501, 566, 502, 625, 628, 626,
	627, 399, 359, 361, 433, 365, 375, 421, 473, 405,
	426, 314, 464, 435, 380, 552, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 66, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 606, 605, 604, 603, 602, 601,
	600, 0, 0, 549, 450, 326, 287, 322, 323, 330,
	241, 307, 455, 242, 0, 295, 529, 373, 171, 417,
	346, 594, 595, 62, 646, 243, 244, 245, 246, 247,
	248, 249, 250, 288, 251, 252, 253, 254, 255, 256,
	257, 260, 261, 262, 263, 264, 265, 266, 267, 597,
	258, 259, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 0, 0, 0, 289,
	290, 291, 292, 0, 0, 283, 284, 285, 286, 0,
	0, 0, 480, 481, 482, 504, 0, 466, 528, 238,
	46, 224, 227, 229, 228, 0, 63, 578, 590, 624,
	5, 634, 635, 637, 639, 638, 641, 440, 441, 648,
	0, 643, 644, 645, 642, 377, 427, 446, 434, 144,
	239, 519, 520, 240, 630, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 141, 570, 521, 436, 388, 588,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 312, 231,
	516, 636, 518, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 2432, 2435, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 443, 462, 313, 431,
	475, 318, 439, 454, 308, 403, 428, 0, 0, 304,
	460, 438, 385, 362, 363, 303, 0, 422, 337, 353,
	334, 401, 0, 459, 487, 333, 478, 0, 470, 306,
	0, 469, 400, 456, 461, 386, 379, 0, 305, 458,
	384, 378, 366, 343, 503, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 633,
	2436, 472, 0, 0, 0, 2431, 0, 2430, 442, 2428,
	2433, 369, 0, 0, 0, 488, 0, 425, 406, 662,
	0, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 296, 445, 336, 387, 309, 311, 331, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	319, 424, 320, 355, 321, 297, 327, 325, 328, 432,
	329, 299, 410, 453, 2434, 350, 420, 382, 300, 381,
	411, 452, 451, 310, 479, 485, 486, 575, 0, 491,
	663, 664, 665, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 301, 348, 293, 294, 658, 332, 402, 598, 631,
	632, 523, 0, 585, 524, 533, 324, 557, 569, 568,
	398, 483, 0, 580, 583, 513, 657, 0, 577, 592,
	661, 591, 654, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 298, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 468, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 492, 573, 574,
	392, 393, 394, 395, 352, 599, 317, 495, 418, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 666, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 316, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 314, 464, 435,
	380, 552, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 0, 0, 549,
	450, 326, 287, 322, 323, 330, 655, 652, 455, 656,
	0, 295, 529, 373, 171, 417, 346, 594, 595, 0,
	646, 243, 244, 245, 246, 247, 248, 249, 250, 288,
	251, 252, 253, 254, 255, 256, 257, 260, 261, 262,
	263, 264, 265, 266, 267, 597, 258, 259, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 0, 0, 0, 289, 290, 291, 292, 0,
	0, 283, 284, 285, 286, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 653, 0, 0, 0, 0,
	0, 0, 0, 578, 590, 624, 0, 634, 635, 637,
	639, 638, 641, 440, 441, 648, 0, 643, 644, 645,
	642, 377, 427, 446, 434, 0, 659, 519, 520, 660,
	630, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	0, 570, 521, 436, 388, 588, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1334, 0, 0, 230, 0, 0,
	788, 798, 0, 0, 312, 231, 516, 636, 518, 517,
	789, 0, 790, 794, 797, 793, 791, 792, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 795, 0, 0, 0, 0,
	0, 302, 443, 462, 313, 431, 475, 318, 439, 454,
	308, 403, 428, 0, 0, 304, 460, 438, 385, 362,
	363, 303, 0, 422, 337, 353, 334, 401, 796, 459,
	487, 333, 478, 0, 470, 306, 0, 469, 400, 456,
	461, 386, 379, 0, 305, 458, 384, 378, 366, 343,
	503, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 633, 0, 472, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 488, 0, 425, 406, 662, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 296, 445, 336,
	387, 309, 311, 331, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 319, 424, 320, 355,
	321, 297, 327, 325, 328, 432, 329, 299, 410, 453,
	0, 350, 420, 382, 300, 381, 411, 452, 451, 310,
	479, 485, 486, 575, 0, 491, 663, 664, 665, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 0, 0, 0,
	484, 370, 371, 0, 342, 341, 383, 301, 348, 293,
	294, 658, 332, 402, 598, 631, 632, 523, 0, 585,
	524, 533, 324, 557, 569, 568, 398, 483, 0, 580,
	583, 513, 657, 0, 577, 592, 661, 591, 654, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 298, 496, 615, 616, 617, 618, 619,
	620, 621, 614, 468, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 492, 573, 574, 392, 393, 394, 395,
	352, 599, 317, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 666, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	316, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 314, 464, 435, 380, 552, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 326, 287, 322,
	323, 330, 655, 652, 455, 656, 0, 295, 529, 373,
	0, 417, 346, 594, 595, 0, 646, 243, 244, 245,
	246, 247, 248, 249, 250, 288, 251, 252, 253, 254,
	255, 256, 257, 260, 261, 262, 263, 264, 265, 266,
	267, 597, 258, 259, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 0, 0,
	0, 289, 290, 291, 292, 0, 0, 283, 284, 285,
	286, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 653, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 638, 641, 440,
	441, 648, 0, 643, 644, 645, 642, 377, 427, 446,
	434, 0, 659, 519, 520, 660, 630, 208, 65, 199,
	170, 0, 0, 0, 0, 0, 0, 404, 685, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 0, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 692, 0, 0, 0, 0, 0, 0, 0,
	691, 0, 0, 230, 0, 0, 0, 0, 0, 0,
	312, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 443, 462,
	313, 431, 475, 318, 439, 454, 308, 403, 428, 0,
	0, 304, 460, 438, 385, 362, 363, 303, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 306, 0, 469, 400, 456, 461, 386, 379, 0,
	305, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 689, 690, 0, 629, 0,
	0, 633, 0, 472, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 488, 0, 425,
	406, 662, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 296, 445, 336, 387, 309, 311, 331,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 319, 424, 320, 355, 321, 297, 327, 325,
	328, 432, 329, 299, 410, 453, 0, 350, 420, 382,
	300, 381, 411, 452, 451, 310, 479, 485, 486, 575,
	0, 491, 663, 664, 665, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 301, 348, 293, 294, 658, 332, 402,
	598, 631, 632, 523, 0, 585, 524, 533, 324, 557,
	569, 568, 398, 483, 0, 580, 583, 513, 657, 0,
	577, 592, 661, 591, 654, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 298,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 468,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 492,
	573, 574, 392, 393, 394, 395, 686, 688, 317, 495,
	418, 700, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 666, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 316, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 314,
	464, 435, 380, 552, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 326, 287, 322, 323, 330, 655, 652,
	455, 656, 0, 295, 529, 373, 171, 417, 346, 594,
	595, 0, 646, 243, 244, 245, 246, 247, 248, 249,
	250, 288, 251, 252, 253, 254, 255, 256, 257, 260,
	261, 262, 263, 264, 265, 266, 267, 597, 258, 259,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 0, 0, 0, 289, 290, 291,
	292, 0, 0, 283, 284, 285, 286, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 653, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 638, 641, 440, 441, 648, 0, 643,
	644, 645, 642, 377, 427, 446, 434, 0, 659, 519,
	520, 660, 630, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 1142, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 0, 570, 521, 436, 388, 588, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 230,
	0, 0, 0, 0, 0, 0, 312, 231, 516, 636,
	518, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1127, 0, 0, 0,
	0, 0, 0, 302, 443, 462, 313, 431, 475, 318,
	439, 454, 308, 403, 428, 0, 0, 2595, 2598, 2599,
	2600, 2601, 2602, 2603, 0, 2608, 2604, 2605, 2606, 2607,
	0, 2590, 2591, 2592, 2593, 1125, 2574, 2596, 0, 2575,
	400, 2576, 2577, 2578, 2579, 1129, 2580, 2581, 2582, 2583,
	2584, 2587, 2588, 2585, 2586, 2594, 412, 376, 413, 358,
	390, 389, 391, 1153, 1155, 1157, 1159, 1162, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 633, 0, 472,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 2589, 0, 425, 406, 662, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 419, 415, 296,
	445, 336, 387, 309, 311, 331, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 319, 424,
	320, 355, 321, 297, 327, 325, 328, 432, 329, 299,
	410, 453, 0, 350, 420, 382, 300, 381, 411, 452,
	451, 310, 479, 485, 486, 575, 0, 491, 663, 664,
	665, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 301,
	348, 293, 294, 658, 332, 402, 598, 631, 632, 523,
	0, 585, 524, 533, 324, 557, 569, 568, 398, 483,
	0, 580, 583, 513, 657, 0, 577, 592, 661, 591,
	654, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 298, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 468, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 492, 573, 574, 392, 393,
	394, 395, 352, 599, 317, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	666, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 316, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 314, 464, 435, 380, 552,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 326,
	287, 322, 323, 330, 655, 652, 455, 656, 0, 295,
	2597, 373, 0, 417, 346, 594, 595, 0, 646, 243,
	244, 245, 246, 247, 248, 249, 250, 288, 251, 252,
	253, 254, 255, 256, 257, 260, 261, 262, 263, 264,
	265, 266, 267, 597, 258, 259, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	0, 0, 0, 289, 290, 291, 292, 0, 0, 283,
	284, 285, 286, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 653, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 638,
	641, 440, 441, 648, 0, 643, 644, 645, 642, 377,
	427, 446, 434, 0, 659, 519, 520, 660, 630, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 0, 570,
	521, 436, 388, 588, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 0, 0, 0, 0,
	0, 0, 312, 231, 516, 636, 518, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 2432, 2435,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	443, 462, 313, 431, 475, 318, 439, 454, 308, 403,
	428, 0, 0, 304, 460, 438, 385, 362, 363, 303,
	0, 422, 337, 353, 334, 401, 0, 459, 487, 333,
	478, 0, 470, 306, 0, 469, 400, 456, 461, 386,
	379, 0, 305, 458, 384, 378, 366, 343, 503, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 633, 2436, 472, 0, 0, 0, 2431,
	0, 2430, 442, 2428, 2433, 369, 0, 0, 0, 488,
	0, 425, 406, 662, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 296, 445, 336, 387, 309,
	311, 331, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 319, 424, 320, 355, 321, 297,
	327, 325, 328, 432, 329, 299, 410, 453, 2434, 350,
	420, 382, 300, 381, 411, 452, 451, 310, 479, 485,
	486, 575, 0, 491, 663, 664, 665, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	509, 510, 511, 512, 576, 593, 560, 530, 493, 584,
	527, 531, 532, 360, 596, 0, 0, 0, 484, 370,
	371, 0, 342, 341, 383, 301, 348, 293, 294, 658,
	332, 402, 598, 631, 632, 523, 0, 585, 524, 533,
	324, 557, 569, 568, 398, 483, 0, 580, 583, 513,
	657, 0, 577, 592, 661, 591, 654, 408, 0, 429,
	589, 536, 0, 581, 555, 0, 582, 551, 586, 0,
	525, 0, 437, 465, 477, 494, 497, 526, 611, 612,
	613, 298, 496, 615, 616, 617, 618, 619, 620, 621,
	614, 468, 558, 535, 561, 476, 538, 537, 0, 0,
	572, 492, 573, 574, 392, 393, 394, 395, 352, 599,
	317, 495, 418, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 562, 666, 0, 622, 623,
	0, 0, 489, 490, 347, 354, 508, 356, 316, 407,
	349, 474, 364, 0, 501, 566, 502, 625, 628, 626,
	627, 399, 359, 361, 433, 365, 375, 421, 473, 405,
	426, 314, 464, 435, 380, 552, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 606, 605, 604, 603, 602, 601,
	600, 0, 0, 549, 450, 326, 287, 322, 323, 330,
	655, 652, 455, 656, 0, 295, 529, 373, 0, 417,
	346, 594, 595, 0, 646, 243, 244, 245, 246, 247,
	248, 249, 250, 288, 251, 252, 253, 254, 255, 256,
	257, 260, 261, 262, 263, 264, 265, 266, 267, 597,
	258, 259, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 0, 0, 0, 289,
	290, 291, 292, 0, 0, 283, 284, 285, 286, 0,
	0, 0, 480, 481, 482, 504, 0, 466, 528, 653,
	0, 0, 0, 0, 0, 0, 0, 578, 590, 624,
	0, 634, 635, 637, 639, 638, 641, 440, 441, 648,
	0, 643, 644, 645, 642, 377, 427, 446, 434, 0,
	659, 519, 520, 660, 630, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 0, 570, 521, 436, 388, 588,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 312, 231,
	516, 636, 518, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 2453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 443, 462, 313, 431,
	475, 318, 439, 454, 308, 403, 428, 0, 0, 304,
	460, 438, 385, 362, 363, 303, 0, 422, 337, 353,
	334, 401, 0, 459, 487, 333, 478, 0, 470, 306,
	0, 469, 400, 456, 461, 386, 379, 0, 305, 458,
	384, 378, 366, 343, 503, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 633,
	2452, 472, 0, 0, 0, 2458, 2455, 2457, 442, 0,
	2456, 369, 0, 0, 0, 488, 0, 425, 406, 662,
	0, 2450, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 296, 445, 336, 387, 309, 311, 331, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	319, 424, 320, 355, 321, 297, 327, 325, 328, 432,
	329, 299, 410, 453, 0, 350, 420, 382, 300, 381,
	411, 452, 451, 310, 479, 485, 486, 575, 0, 491,
	663, 664, 665, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 301, 348, 293, 294, 658, 332, 402, 598, 631,
	632, 523, 0, 585, 524, 533, 324, 557, 569, 568,
	398, 483, 0, 580, 583, 513, 657, 0, 577, 592,
	661, 591, 654, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 298, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 468, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 492, 573, 574,
	392, 393, 394, 395, 352, 599, 317, 495, 418, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 666, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 316, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 314, 464, 435,
	380, 552, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 0, 0, 549,
	450, 326, 287, 322, 323, 330, 655, 652, 455, 656,
	0, 295, 529, 373, 0, 417, 346, 594, 595, 0,
	646, 243, 244, 245, 246, 247, 248, 249, 250, 288,
	251, 252, 253, 254, 255, 256, 257, 260, 261, 262,
	263, 264, 265, 266, 267, 597, 258, 259, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 0, 0, 0, 289, 290, 291, 292, 0,
	0, 283, 284, 285, 286, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 653, 0, 0, 0, 0,
	0, 0, 0, 578, 590, 624, 0, 634, 635, 637,
	639, 638, 641, 440, 441, 648, 0, 643, 644, 645,
	642, 377, 427, 446, 434, 0, 659, 519, 520, 660,
	630, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	0, 570, 521, 436, 388, 588, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 230, 0, 0,
	0, 0, 0, 0, 312, 231, 516, 636, 518, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 2453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 443, 462, 313, 431, 475, 318, 439, 454,
	308, 403, 428, 0, 0, 304, 460, 438, 385, 362,
	363, 303, 0, 422, 337, 353, 334, 401, 0, 459,
	487, 333, 478, 0, 470, 306, 0, 469, 400, 456,
	461, 386, 379, 0, 305, 458, 384, 378, 366, 343,
	503, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 633, 2452, 472, 0, 0,
	0, 2458, 2455, 2457, 442, 0, 2456, 369, 0, 0,
	0, 488, 0, 425, 406, 662, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 296, 445, 336,
	387, 309, 311, 331, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 319, 424, 320, 355,
	321, 297, 327, 325, 328, 432, 329, 299, 410, 453,
	0, 350, 420, 382, 300, 381, 411, 452, 451, 310,
	479, 485, 486, 575, 0, 491, 663, 664, 665, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 0, 0, 0,
	484, 370, 371, 0, 342, 341, 383, 301, 348, 293,
	294, 658, 332, 402, 598, 631, 632, 523, 0, 585,
	524, 533, 324, 557, 569, 568, 398, 483, 0, 580,
	583, 513, 657, 0, 577, 592, 661, 591, 654, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 298, 496, 615, 616, 617, 618, 619,
	620, 621, 614, 468, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 492, 573, 574, 392, 393, 394, 395,
	352, 599, 317, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 666, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	316, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 314, 464, 435, 380, 552, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 326, 287, 322,
	323, 330, 655, 652, 455, 656, 0, 295, 529, 373,
	0, 417, 346, 594, 595, 0, 646, 243, 244, 245,
	246, 247, 248, 249, 250, 288, 251, 252, 253, 254,
	255, 256, 257, 260, 261, 262, 263, 264, 265, 266,
	267, 597, 258, 259, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 0, 0,
	0, 289, 290, 291, 292, 0, 0, 283, 284, 285,
	286, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 653, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 638, 641, 440,
	441, 648, 0, 643, 644, 645, 642, 377, 427, 446,
	434, 0, 659, 519, 520, 660, 630, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	2147, 0, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 0, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 230, 0, 0, 2148, 0, 0, 0,
	312, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 1263, 1264,
	1265, 1262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 443, 462,
	313, 431, 475, 318, 439, 454, 308, 403, 428, 0,
	0, 304, 460, 438, 385, 362, 363, 303, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 306, 0, 469, 400, 456, 461, 386, 379, 0,
	305, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 633, 0, 472, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 488, 0, 425,
	406, 662, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 296, 445, 336, 387, 309, 311, 331,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 319, 424, 320, 355, 321, 297, 327, 325,
	328, 432, 329, 299, 410, 453, 0, 350, 420, 382,
	300, 381, 411, 452, 451, 310, 479, 485, 486, 575,
	0, 491, 663, 664, 665, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 301, 348, 293, 294, 658, 332, 402,
	598, 631, 632, 523, 0, 585, 524, 533, 324, 557,
	569, 568, 398, 483, 0, 580, 583, 513, 657, 0,
	577, 592, 661, 591, 654, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 298,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 468,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 492,
	573, 574, 392, 393, 394, 395, 352, 599, 317, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 666, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 316, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 314,
	464, 435, 380, 552, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 326, 287, 322, 323, 330, 655, 652,
	455, 656, 0, 295, 529, 373, 0, 417, 346, 594,
	595, 0, 646, 243, 244, 245, 246, 247, 248, 249,
	250, 288, 251, 252, 253, 254, 255, 256, 257, 260,
	261, 262, 263, 264, 265, 266, 267, 597, 258, 259,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 0, 0, 0, 289, 290, 291,
	292, 0, 0, 283, 284, 285, 286, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 653, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 638, 641, 440, 441, 648, 0, 643,
	644, 645, 642, 377, 427, 446, 434, 208, 659, 519,
	520, 660, 630, 0, 0, 0, 0, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 141, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 2197, 0, 230, 0, 0, 0, 0, 0, 0,
	312, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 443, 462,
	313, 431, 475, 318, 439, 454, 308, 403, 428, 0,
	0, 304, 460, 438, 385, 362, 363, 303, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 306, 0, 469, 400, 456, 461, 386, 379, 0,
	305, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 633, 0, 472, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 488, 0, 425,
	406, 662, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 296, 445, 336, 387, 309, 311, 331,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 319, 424, 320, 355, 321, 297, 327, 325,
	328, 432, 329, 299, 410, 453, 0, 350, 420, 382,
	300, 381, 411, 452, 451, 310, 479, 485, 486, 575,
	0, 491, 663, 664, 665, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 301, 348, 293, 294, 658, 332, 402,
	598, 631, 632, 523, 0, 585, 524, 533, 324, 557,
	569, 568, 398, 483, 0, 580, 583, 513, 657, 0,
	577, 592, 661, 591, 654, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 298,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 468,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 492,
	573, 574, 392, 393, 394, 395, 352, 599, 317, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 666, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 316, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 314,
	464, 435, 380, 552, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 326, 287, 322, 323, 330, 655, 652,
	455, 656, 0, 295, 529, 373, 171, 417, 346, 594,
	595, 0, 646, 243, 244, 245, 246, 247, 248, 249,
	250, 288, 251, 252, 253, 254, 255, 256, 257, 260,
	261, 262, 263, 264, 265, 266, 267, 597, 258, 259,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 0, 0, 0, 289, 290, 291,
	292, 0, 0, 283, 284, 285, 286, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 653, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 638, 641, 440, 441, 648, 0, 643,
	644, 645, 642, 377, 427, 446, 434, 208, 659, 519,
	520, 660, 630, 0, 0, 0, 0, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 141, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 2182, 0, 230, 0, 0, 0, 0, 0, 0,
	312, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 443, 462,
	313, 431, 475, 318, 439, 454, 308, 403, 428, 0,
	0, 304, 460, 438, 385, 362, 363, 303, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 306, 0, 469, 400, 456, 461, 386, 379, 0,
	305, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 633, 0, 472, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 488, 0, 425,
	406, 662, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 296, 445, 336, 387, 309, 311, 331,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 319, 424, 320, 355, 321, 297, 327, 325,
	328, 432, 329, 299, 410, 453, 0, 350, 420, 382,
	300, 381, 411, 452, 451, 310, 479, 485, 486, 575,
	0, 491, 663, 664, 665, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 301, 348, 293, 294, 658, 332, 402,
	598, 631, 632, 523, 0, 585, 524, 533, 324, 557,
	569, 568, 398, 483, 0, 580, 583, 513, 657, 0,
	577, 592, 661, 591, 654, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 298,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 468,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 492,
	573, 574, 392, 393, 394, 395, 352, 599, 317, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 666, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 316, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 314,
	464, 435, 380, 552, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 326, 287, 322, 323, 330, 655, 652,
	455, 656, 0, 295, 529, 373, 171, 417, 346, 594,
	595, 0, 646, 243, 244, 245, 246, 247, 248, 249,
	250, 288, 251, 252, 253, 254, 255, 256, 257, 260,
	261, 262, 263, 264, 265, 266, 267, 597, 258, 259,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 0, 0, 0, 289, 290, 291,
	292, 0, 0, 283, 284, 285, 286, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 653, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 638, 641, 440, 441, 648, 0, 643,
	644, 645, 642, 377, 427, 446, 434, 0, 659, 519,
	520, 660, 630, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 1053, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 0, 570, 521, 436, 388, 588, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 230,
	1060, 1061, 0, 0, 0, 0, 312, 231, 516, 636,
	518, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 443, 1047, 313, 431, 475, 318,
	439, 454, 308, 403, 428, 0, 0, 304, 460, 438,
	385, 362, 363, 303, 0, 422, 337, 353, 334, 401,
	0, 459, 487, 333, 478, 1034, 470, 306, 1033, 469,
	400, 456, 461, 386, 379, 0, 305, 458, 384, 378,
	366, 343, 503, 367, 368, 357, 412, 376, 413, 358,
	390, 389, 391, 0, 0, 0, 0, 0, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 633, 0, 472,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 488, 0, 425, 406, 662, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 1051, 415, 296,
	445, 336, 387, 309, 311, 331, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 319, 424,
	320, 355, 321, 297, 327, 325, 328, 432, 329, 299,
	410, 453, 0, 350, 420, 382, 300, 381, 411, 452,
	451, 310, 479, 485, 486, 575, 0, 491, 663, 664,
	665, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 301,
	348, 293, 294, 658, 332, 402, 598, 631, 632, 523,
	0, 585, 524, 533, 324, 557, 569, 568, 398, 483,
	0, 580, 583, 513, 657, 0, 577, 592, 661, 591,
	654, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 298, 496, 615, 616, 617,
	618, 619, 620, 1052, 614, 468, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 1055, 573, 574, 392, 393,
	394, 395, 352, 599, 1050, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	666, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 316, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 1062, 1048, 1058, 1049, 365,
	375, 421, 473, 405, 426, 314, 464, 435, 1059, 552,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 326,
	287, 322, 323, 330, 655, 652, 455, 656, 0, 295,
	529, 373, 0, 417, 346, 594, 595, 0, 646, 243,
	244, 245, 246, 247, 248, 249, 250, 288, 251, 252,
	253, 254, 255, 256, 257, 260, 261, 262, 263, 264,
	265, 266, 267, 597, 258, 259, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	0, 0, 0, 289, 290, 291, 292, 0, 0, 283,
	284, 285, 286, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 653, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 638,
	641, 440, 441, 648, 0, 643, 644, 645, 642, 1046,
	427, 446, 434, 208, 659, 519, 520, 660, 630, 0,
	0, 0, 0, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 141, 570, 521, 436, 388, 588, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2077, 0, 0, 230,
	0, 0, 0, 0, 0, 0, 312, 231, 516, 636,
	518, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 443, 462, 313, 431, 475, 318,
	439, 454, 308, 403, 428, 0, 0, 304, 460, 438,
	385, 362, 363, 303, 0, 422, 337, 353, 334, 401,
	0, 459, 487, 333, 478, 0, 470, 306, 0, 469,
	400, 456, 461, 386, 379, 0, 305, 458, 384, 378,
	366, 343, 503, 367, 368, 357, 412, 376, 413, 358,
	390, 389, 391, 0, 0, 0, 0, 0, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 633, 0, 472,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 488, 0, 425, 406, 662, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 419, 415, 296,
	445, 336, 387, 309, 311, 331, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 319, 424,
	320, 355, 321, 297, 327, 325, 328, 432, 329, 299,
	410, 453, 0, 350, 420, 382, 300, 381, 411, 452,
	451, 310, 479, 485, 486, 575, 0, 491, 663, 664,
	665, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 301,
	348, 293, 294, 658, 332, 402, 598, 631, 632, 523,
	0, 585, 524, 533, 324, 557, 569, 568, 398, 483,
	0, 580, 583, 513, 657, 0, 577, 592, 661, 591,
	654, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 298, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 468, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 492, 573, 574, 392, 393,
	394, 395, 352, 599, 317, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	666, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 316, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 314, 464, 435, 380, 552,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 326,
	287, 322, 323, 330, 655, 652, 455, 656, 0, 295,
	529, 373, 171, 417, 346, 594, 595, 0, 646, 243,
	244, 245, 246, 247, 248, 249, 250, 288, 251, 252,
	253, 254, 255, 256, 257, 260, 261, 262, 263, 264,
	265, 266, 267, 597, 258, 259, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	0, 0, 0, 289, 290, 291, 292, 0, 0, 283,
	284, 285, 286, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 653, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 638,
	641, 440, 441, 648, 0, 643, 644, 645, 642, 377,
	427, 446, 434, 0, 659, 519, 520, 660, 630, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 0, 570,
	521, 436, 388, 588, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 1060, 1061, 0, 0,
	0, 0, 312, 231, 516, 636, 518, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	443, 462, 313, 431, 475, 318, 439, 454, 308, 403,
	428, 0, 0, 304, 460, 438, 385, 362, 363, 303,
	0, 422, 337, 353, 334, 401, 0, 459, 487, 333,
	478, 1034, 470, 306, 1033, 469, 400, 456, 461, 386,
	379, 0, 305, 458, 384, 378, 366, 343, 503, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 633, 0, 472, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 488,
	0, 425, 406, 662, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 296, 445, 336, 387, 309,
	311, 331, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 319, 424, 320, 355, 321, 297,
	327, 325, 328, 432, 329, 299, 410, 453, 0, 350,
	420, 382, 300, 381, 411, 452, 451, 310, 479, 485,
	486, 575, 0, 491, 663, 664, 665, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	509, 510, 511, 512, 576, 593, 560, 530, 493, 584,
	527, 531, 532, 360, 596, 0, 0, 0, 484, 370,
	371, 0, 342, 341, 383, 301, 348, 293, 294, 658,
	332, 402, 598, 631, 632, 523, 0, 585, 524, 533,
	324, 557, 569, 568, 398, 483, 0, 580, 583, 513,
	657, 0, 577, 592, 661, 591, 654, 408, 0, 429,
	589, 536, 0, 581, 555, 0, 582, 551, 586, 0,
	525, 0, 437, 465, 477, 494, 497, 526, 611, 612,
	613, 298, 496, 615, 616, 617, 618, 619, 620, 621,
	614, 468, 558, 535, 561, 476, 538, 537, 0, 0,
	572, 492, 573, 574, 392, 393, 394, 395, 352, 599,
	317, 495, 418, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 562, 666, 0, 622, 623,
	0, 0, 489, 490, 347, 354, 508, 356, 316, 407,
	349, 474, 364, 0, 501, 566, 502, 625, 628, 626,
	627, 1062, 2098, 1058, 2099, 365, 375, 421, 473, 405,
	426, 314, 464, 435, 1059, 552, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 606, 605, 604, 603, 602, 601,
	600, 0, 0, 549, 450, 326, 287, 322, 323, 330,
	655, 652, 455, 656, 0, 295, 529, 373, 0, 417,
	346, 594, 595, 0, 646, 243, 244, 245, 246, 247,
	248, 249, 250, 288, 251, 252, 253, 254, 255, 256,
	257, 260, 261, 262, 263, 264, 265, 266, 267, 597,
	258, 259, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 0, 0, 0, 289,
	290, 291, 292, 0, 0, 283, 284, 285, 286, 0,
	0, 0, 480, 481, 482, 504, 0, 466, 528, 653,
	0, 0, 0, 0, 0, 0, 0, 578, 590, 624,
	0, 634, 635, 637, 639, 638, 641, 440, 441, 648,
	0, 643, 644, 645, 642, 377, 427, 446, 434, 0,
	659, 519, 520, 660, 630, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 2998, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 0, 570, 521, 436, 388, 588,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 312, 231,
	516, 636, 518, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 443, 462, 313, 431,
	475, 318, 439, 454, 308, 403, 428, 0, 0, 304,
	460, 438, 385, 362, 363, 303, 0, 422, 337, 353,
	334, 401, 0, 459, 487, 333, 478, 0, 470, 306,
	0, 469, 400, 456, 461, 386, 379, 0, 305, 458,
	384, 378, 366, 343, 503, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 3001, 0, 0, 0, 3000, 629, 0, 0, 633,
	0, 472, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 369, 0, 0, 0, 488, 0, 425, 406, 662,
	0, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 296, 445, 336, 387, 309, 311, 331, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	319, 424, 320, 355, 321, 297, 327, 325, 328, 432,
	329, 299, 410, 453, 0, 350, 420, 382, 300, 381,
	411, 452, 451, 310, 479, 485, 486, 575, 0, 491,
	663, 664, 665, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 301, 348, 293, 294, 658, 332, 402, 598, 631,
	632, 523, 0, 585, 524, 533, 324, 557, 569, 568,
	398, 483, 0, 580, 583, 513, 657, 0, 577, 592,
	661, 591, 654, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 298, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 468, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 492, 573, 574,
	392, 393, 394, 395, 352, 599, 317, 495, 418, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 666, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 316, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 314, 464, 435,
	380, 552, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 0, 0, 549,
	450, 326, 287, 322, 323, 330, 655, 652, 455, 656,
	0, 295, 529, 373, 0, 417, 346, 594, 595, 0,
	646, 243, 244, 245, 246, 247, 248, 249, 250, 288,
	251, 252, 253, 254, 255, 256, 257, 260, 261, 262,
	263, 264, 265, 266, 267, 597, 258, 259, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 0, 0, 0, 289, 290, 291, 292, 0,
	0, 283, 284, 285, 286, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 653, 0, 0, 0, 0,
	0, 0, 0, 578, 590, 624, 0, 634, 635, 637,
	639, 638, 641, 440, 441, 648, 0, 643, 644, 645,
	642, 377, 427, 446, 434, 0, 659, 519, 520, 660,
	630, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	1561, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	0, 570, 521, 436, 388, 588, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 230, 0, 0,
	1559, 0, 0, 0, 312, 231, 516, 636, 518, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1557, 0, 0, 0, 0, 0,
	0, 302, 443, 462, 313, 431, 475, 318, 439, 454,
	308, 403, 428, 0, 0, 304, 460, 438, 385, 362,
	363, 303, 0, 422, 337, 353, 334, 401, 0, 459,
	487, 333, 478, 0, 470, 306, 0, 469, 400, 456,
	461, 386, 379, 0, 305, 458, 384, 378, 366, 343,
	503, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 633, 0, 472, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 488, 0, 425, 406, 662, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 296, 445, 336,
	387, 309, 311, 331, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 319, 424, 320, 355,
	321, 297, 327, 325, 328, 432, 329, 299, 410, 453,
	0, 350, 420, 382, 300, 381, 411, 452, 451, 310,
	479, 485, 486, 575, 0, 491, 663, 664, 665, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 0, 0, 0,
	484, 370, 371, 0, 342, 341, 383, 301, 348, 293,
	294, 658, 332, 402, 598, 631, 632, 523, 0, 585,
	524, 533, 324, 557, 569, 568, 398, 483, 0, 580,
	583, 513, 657, 0, 577, 592, 661, 591, 654, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 298, 496, 615, 616, 617, 618, 619,
	620, 621, 614, 468, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 492, 573, 574, 392, 393, 394, 395,
	352, 599, 317, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 666, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	316, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 314, 464, 435, 380, 552, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 326, 287, 322,
	323, 330, 655, 652, 455, 656, 0, 295, 529, 373,
	0, 417, 346, 594, 595, 0, 646, 243, 244, 245,
	246, 247, 248, 249, 250, 288, 251, 252, 253, 254,
	255, 256, 257, 260, 261, 262, 263, 264, 265, 266,
	267, 597, 258, 259, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 0, 0,
	0, 289, 290, 291, 292, 0, 0, 283, 284, 285,
	286, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 653, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 638, 641, 440,
	441, 648, 0, 643, 644, 645, 642, 377, 427, 446,
	434, 0, 659, 519, 520, 660, 630, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 1555, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 0, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 230, 0, 0, 1559, 0, 0, 0,
	312, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1557, 0, 0, 0, 0, 0, 0, 302, 443, 462,
	313, 431, 475, 318, 439, 454, 308, 403, 428, 0,
	0, 304, 460, 438, 385, 362, 363, 303, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 306, 0, 469, 400, 456, 461, 386, 379, 0,
	305, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 633, 0, 472, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 488, 0, 425,
	406, 662, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 296, 445, 336, 387, 309, 311, 331,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 319, 424, 320, 355, 321, 297, 327, 325,
	328, 432, 329, 299, 410, 453, 0, 350, 420, 382,
	300, 381, 411, 452, 451, 310, 479, 485, 486, 575,
	0, 491, 663, 664, 665, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 301, 348, 293, 294, 658, 332, 402,
	598, 631, 632, 523, 0, 585, 524, 533, 324, 557,
	569, 568, 398, 483, 0, 580, 583, 513, 657, 0,
	577, 592, 661, 591, 654, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 298,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 468,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 492,
	573, 574, 392, 393, 394, 395, 352, 599, 317, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 666, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 316, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 314,
	464, 435, 380, 552, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 326, 287, 322, 323, 330, 655, 652,
	455, 656, 0, 295, 529, 373, 0, 417, 346, 594,
	595, 0, 646, 243, 244, 245, 246, 247, 248, 249,
	250, 288, 251, 252, 253, 254, 255, 256, 257, 260,
	261, 262, 263, 264, 265, 266, 267, 597, 258, 259,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 0, 0, 0, 289, 290, 291,
	292, 0, 0, 283, 284, 285, 286, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 653, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 638, 641, 440, 441, 648, 0, 643,
	644, 645, 642, 377, 427, 446, 434, 0, 659, 519,
	520, 660, 630, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 0, 570, 521, 436, 388, 588, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4108, 0, 230,
	856, 0, 0, 0, 0, 0, 312, 231, 516, 636,
	518, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 443, 462, 313, 431, 475, 318,
	439, 454, 308, 403, 428, 0, 0, 304, 460, 438,
	385, 362, 363, 303, 0, 422, 337, 353, 334, 401,
	0, 459, 487, 333, 478, 0, 470, 306, 0, 469,
	400, 456, 461, 386, 379, 0, 305, 458, 384, 378,
	366, 343, 503, 367, 368, 357, 412, 376, 413, 358,
	390, 389, 391, 0, 0, 0, 0, 0, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 633, 0, 472,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 488, 0, 425, 406, 662, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 419, 415, 296,
	445, 336, 387, 309, 311, 331, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 319, 424,
	320, 355, 321, 297, 327, 325, 328, 432, 329, 299,
	410, 453, 0, 350, 420, 382, 300, 381, 411, 452,
	451, 310, 479, 485, 486, 575, 0, 491, 663, 664,
	665, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 301,
	348, 293, 294, 658, 332, 402, 598, 631, 632, 523,
	0, 585, 524, 533, 324, 557, 569, 568, 398, 483,
	0, 580, 583, 513, 657, 0, 577, 592, 661, 591,
	654, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 298, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 468, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 492, 573, 574, 392, 393,
	394, 395, 352, 599, 317, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	666, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 316, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 314, 464, 435, 380, 552,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 326,
	287, 322, 323, 330, 655, 652, 455, 656, 0, 295,
	529, 373, 0, 417, 346, 594, 595, 0, 646, 243,
	244, 245, 246, 247, 248, 249, 250, 288, 251, 252,
	253, 254, 255, 256, 257, 260, 261, 262, 263, 264,
	265, 266, 267, 597, 258, 259, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	0, 0, 0, 289, 290, 291, 292, 0, 0, 283,
	284, 285, 286, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 653, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 638,
	641, 440, 441, 648, 0, 643, 644, 645, 642, 377,
	427, 446, 434, 0, 659, 519, 520, 660, 630, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 0, 570,
	521, 436, 388, 588, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 0, 0, 1559, 0,
	0, 0, 312, 231, 516, 636, 518, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1557, 0, 0, 0, 0, 0, 0, 302,
	443, 462, 313, 431, 475, 318, 439, 454, 308, 403,
	428, 0, 0, 304, 460, 438, 385, 362, 363, 303,
	0, 422, 337, 353, 334, 401, 0, 459, 487, 333,
	478, 0, 470, 306, 0, 469, 400, 456, 461, 386,
	379, 0, 305, 458, 384, 378, 366, 343, 503, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 633, 0, 472, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 488,
	0, 425, 406, 662, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 296, 445, 336, 387, 309,
	311, 331, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 319, 424, 320, 355, 321, 297,
	327, 325, 328, 432, 329, 299, 410, 453, 0, 350,
	420, 382, 300, 381, 411, 452, 451, 310, 479, 485,
	486, 575, 0, 491, 663, 664, 665, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	509, 510, 511, 512, 576, 593, 560, 530, 493, 584,
	527, 531, 532, 360, 596, 0, 0, 0, 484, 370,
	371, 0, 342, 341, 383, 301, 348, 293, 294, 658,
	332, 402, 598, 631, 632, 523, 0, 585, 524, 533,
	324, 557, 569, 568, 398, 483, 0, 580, 583, 513,
	657, 0, 577, 592, 661, 591, 654, 408, 0, 429,
	589, 536, 0, 581, 555, 0, 582, 551, 586, 0,
	525, 0, 437, 465, 477, 494, 497, 526, 611, 612,
	613, 298, 496, 615, 616, 617, 618, 619, 620, 621,
	614, 468, 558, 535, 561, 476, 538, 537, 0, 0,
	572, 492, 573, 574, 392, 393, 394, 395, 352, 599,
	317, 495, 418, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 562, 666, 0, 622, 623,
	0, 0, 489, 490, 347, 354, 508, 356, 316, 407,
	349, 474, 364, 0, 501, 566, 502, 625, 628, 626,
	627, 399, 359, 361, 433, 365, 375, 421, 473, 405,
	426, 314, 464, 435, 380, 552, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 606, 605, 604, 603, 602, 601,
	600, 0, 0, 549, 450, 326, 287, 322, 323, 330,
	655, 652, 455, 656, 0, 295, 529, 373, 0, 417,
	346, 594, 595, 0, 646, 243, 244, 245, 246, 247,
	248, 249, 250, 288, 251, 252, 253, 254, 255, 256,
	257, 260, 261, 262, 263, 264, 265, 266, 267, 597,
	258, 259, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 0, 0, 0, 289,
	290, 291, 292, 0, 0, 283, 284, 285, 286, 0,
	0, 0, 480, 481, 482, 504, 0, 466, 528, 653,
	0, 0, 0, 0, 0, 0, 0, 578, 590, 624,
	0, 634, 635, 637, 639, 638, 641, 440, 441, 648,
	0, 643, 644, 645, 642, 377, 427, 446, 434, 0,
	659, 519, 520, 660, 630, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 0, 570, 521, 436, 388, 588,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 0, 1559, 0, 0, 0, 312, 231,
	516, 636, 518, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1770, 0,
	0, 0, 0, 0, 0, 302, 443, 462, 313, 431,
	475, 318, 439, 454, 308, 403, 428, 0, 0, 304,
	460, 438, 385, 362, 363, 303, 0, 422, 337, 353,
	334, 401, 0, 459, 487, 333, 478, 0, 470, 306,
	0, 469, 400, 456, 461, 386, 379, 0, 305, 458,
	384, 378, 366, 343, 503, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 633,
	0, 472, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 369, 0, 0, 0, 488, 0, 425, 406, 662,
	0, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 296, 445, 336, 387, 309, 311, 331, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	319, 424, 320, 355, 321, 297, 327, 325, 328, 432,
	329, 299, 410, 453, 0, 350, 420, 382, 300, 381,
	411, 452, 451, 310, 479, 485, 486, 575, 0, 491,
	663, 664, 665, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 301, 348, 293, 294, 658, 332, 402, 598, 631,
	632, 523, 0, 585, 524, 533, 324, 557, 569, 568,
	398, 483, 0, 580, 583, 513, 657, 0, 577, 592,
	661, 591, 654, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 298, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 468, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 492, 573, 574,
	392, 393, 394, 395, 352, 599, 317, 495, 418, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 666, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 316, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 314, 464, 435,
	380, 552, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 0, 0, 549,
	450, 326, 287, 322, 323, 330, 655, 652, 455, 656,
	0, 295, 529, 373, 0, 417, 346, 594, 595, 0,
	646, 243, 244, 245, 246, 247, 248, 249, 250, 288,
	251, 252, 253, 254, 255, 256, 257, 260, 261, 262,
	263, 264, 265, 266, 267, 597, 258, 259, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 0, 0, 0, 289, 290, 291, 292, 0,
	0, 283, 284, 285, 286, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 653, 0, 0, 0, 0,
	0, 0, 0, 578, 590, 624, 0, 634, 635, 637,
	639, 638, 641, 440, 441, 648, 0, 643, 644, 645,
	642, 377, 427, 446, 434, 0, 659, 519, 520, 660,
	630, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 2536, 0, 0, 0, 0, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	0, 570, 521, 436, 388, 588, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 230, 0, 0,
	2538, 0, 0, 0, 312, 231, 516, 636, 518, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 443, 462, 313, 431, 475, 318, 439, 454,
	308, 403, 428, 0, 0, 304, 460, 438, 385, 362,
	363, 303, 0, 422, 337, 353, 334, 401, 0, 459,
	487, 333, 478, 0, 470, 306, 0, 469, 400, 456,
	461, 386, 379, 0, 305, 458, 384, 378, 366, 343,
	503, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 633, 0, 472, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 488, 0, 425, 406, 662, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 296, 445, 336,
	387, 309, 311, 331, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 319, 424, 320, 355,
	321, 297, 327, 325, 328, 432, 329, 299, 410, 453,
	0, 350, 420, 382, 300, 381, 411, 452, 451, 310,
	479, 485, 486, 575, 0, 491, 663, 664, 665, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 0, 0, 0,
	484, 370, 371, 0, 342, 341, 383, 301, 348, 293,
	294, 658, 332, 402, 598, 631, 632, 523, 0, 585,
	524, 533, 324, 557, 569, 568, 398, 483, 0, 580,
	583, 513, 657, 0, 577, 592, 661, 591, 654, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 298, 496, 615, 616, 617, 618, 619,
	620, 621, 614, 468, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 492, 573, 574, 392, 393, 394, 395,
	352, 599, 317, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 666, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	316, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 314, 464, 435, 380, 552, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 326, 287, 322,
	323, 330, 655, 652, 455, 656, 0, 295, 529, 373,
	0, 417, 346, 594, 595, 0, 646, 243, 244, 245,
	246, 247, 248, 249, 250, 288, 251, 252, 253, 254,
	255, 256, 257, 260, 261, 262, 263, 264, 265, 266,
	267, 597, 258, 259, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 0, 0,
	0, 289, 290, 291, 292, 0, 0, 283, 284, 285,
	286, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 653, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 638, 641, 440,
	441, 648, 0, 643, 644, 645, 642, 377, 427, 446,
	434, 0, 659, 519, 520, 660, 630, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	2147, 0, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 0, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 230, 0, 0, 2148, 0, 0, 0,
	312, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 443, 462,
	313, 431, 475, 318, 439, 454, 308, 403, 428, 0,
	0, 304, 460, 438, 385, 362, 363, 303, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 306, 0, 469, 400, 456, 461, 386, 379, 0,
	305, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 633, 0, 472, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 488, 0, 425,
	406, 662, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 296, 445, 336, 387, 309, 311, 331,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 319, 424, 320, 355, 321, 297, 327, 325,
	328, 432, 329, 299, 410, 453, 0, 350, 420, 382,
	300, 381, 411, 452, 451, 310, 479, 485, 486, 575,
	0, 491, 663, 664, 665, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 301, 348, 293, 294, 658, 332, 402,
	598, 631, 632, 523, 0, 585, 524, 533, 324, 557,
	569, 568, 398, 483, 0, 580, 583, 513, 657, 0,
	577, 592, 661, 591, 654, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 298,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 468,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 492,
	573, 574, 392, 393, 394, 395, 352, 599, 317, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 666, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 316, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 314,
	464, 435, 380, 552, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 326, 287, 322, 323, 330, 655, 652,
	455, 656, 0, 295, 529, 373, 0, 417, 346, 594,
	595, 0, 646, 243, 244, 245, 246, 247, 248, 249,
	250, 288, 251, 252, 253, 254, 255, 256, 257, 260,
	261, 262, 263, 264, 265, 266, 267, 597, 258, 259,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 0, 0, 0, 289, 290, 291,
	292, 0, 0, 283, 284, 285, 286, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 653, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 638, 641, 440, 441, 648, 0, 643,
	644, 645, 642, 377, 427, 446, 434, 0, 659, 519,
	520, 660, 630, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 0, 570, 521, 436, 388, 588, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 230,
	0, 0, 3219, 3221, 0, 0, 312, 231, 516, 636,
	518, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 443, 462, 313, 431, 475, 318,
	439, 454, 308, 403, 428, 0, 0, 304, 460, 438,
	385, 362, 363, 303, 0, 422, 337, 353, 334, 401,
	0, 459, 487, 333, 478, 0, 470, 306, 0, 469,
	400, 456, 461, 386, 379, 0, 305, 458, 384, 378,
	366, 343, 503, 367, 368, 357, 412, 376, 413, 358,
	390, 389, 391, 0, 0, 0, 0, 0, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 633, 0, 472,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 488, 0, 425, 406, 662, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 419, 415, 296,
	445, 336, 387, 309, 311, 331, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 319, 424,
	320, 355, 321, 297, 327, 325, 328, 432, 329, 299,
	410, 453, 0, 350, 420, 382, 300, 381, 411, 452,
	451, 310, 479, 485, 486, 575, 0, 491, 663, 664,
	665, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 301,
	348, 293, 294, 658, 332, 402, 598, 631, 632, 523,
	0, 585, 524, 533, 324, 557, 569, 568, 398, 483,
	0, 580, 583, 513, 657, 0, 577, 592, 661, 591,
	654, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 298, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 468, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 492, 573, 574, 392, 393,
	394, 395, 352, 599, 317, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	666, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 316, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 314, 464, 435, 380, 552,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 326,
	287, 322, 323, 330, 655, 652, 455, 656, 0, 295,
	529, 373, 0, 417, 346, 594, 595, 0, 646, 243,
	244, 245, 246, 247, 248, 249, 250, 288, 251, 252,
	253, 254, 255, 256, 257, 260, 261, 262, 263, 264,
	265, 266, 267, 597, 258, 259, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	0, 0, 0, 289, 290, 291, 292, 0, 0, 283,
	284, 285, 286, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 653, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 638,
	641, 440, 441, 648, 0, 643, 644, 645, 642, 377,
	427, 446, 434, 0, 659, 519, 520, 660, 630, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 2559, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 0, 570,
	521, 436, 388, 588, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 0, 0, 1559, 0,
	0, 0, 312, 231, 516, 636, 518, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	443, 462, 313, 431, 475, 318, 439, 454, 308, 403,
	428, 0, 0, 304, 460, 438, 385, 362, 363, 303,
	0, 422, 337, 353, 334, 401, 0, 459, 487, 333,
	478, 0, 470, 306, 0, 469, 400, 456, 461, 386,
	379, 0, 305, 458, 384, 378, 366, 343, 503, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 633, 0, 472, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 488,
	0, 425, 406, 662, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 296, 445, 336, 387, 309,
	311, 331, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 319, 424, 320, 355, 321, 297,
	327, 325, 328, 432, 329, 299, 410, 453, 0, 350,
	420, 382, 300, 381, 411, 452, 451, 310, 479, 485,
	486, 575, 0, 491, 663, 664, 665, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	509, 510, 511, 512, 576, 593, 560, 530, 493, 584,
	527, 531, 532, 360, 596, 0, 0, 0, 484, 370,
	371, 0, 342, 341, 383, 301, 348, 293, 294, 658,
	332, 402, 598, 631, 632, 523, 0, 585, 524, 533,
	324, 557, 569, 568, 398, 483, 0, 580, 583, 513,
	657, 0, 577, 592, 661, 591, 654, 408, 0, 429,
	589, 536, 0, 581, 555, 0, 582, 551, 586, 0,
	525, 0, 437, 465, 477, 494, 497, 526, 611, 612,
	613, 298, 496, 615, 616, 617, 618, 619, 620, 621,
	614, 468, 558, 535, 561, 476, 538, 537, 0, 0,
	572, 492, 573, 574, 392, 393, 394, 395, 352, 599,
	317, 495, 418, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 562, 666, 0, 622, 623,
	0, 0, 489, 490, 347, 354, 508, 356, 316, 407,
	349, 474, 364, 0, 501, 566, 502, 625, 628, 626,
	627, 399, 359, 361, 433, 365, 375, 421, 473, 405,
	426, 314, 464, 435, 380, 552, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 606, 605, 604, 603, 602, 601,
	600, 0, 0, 549, 450, 326, 287, 322, 323, 330,
	655, 652, 455, 656, 0, 295, 529, 373, 0, 417,
	346, 594, 595, 0, 646, 243, 244, 245, 246, 247,
	248, 249, 250, 288, 251, 252, 253, 254, 255, 256,
	257, 260, 261, 262, 263, 264, 265, 266, 267, 597,
	258, 259, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 0, 0, 0, 289,
	290, 291, 292, 0, 0, 283, 284, 285, 286, 0,
	0, 0, 480, 481, 482, 504, 0, 466, 528, 653,
	0, 0, 0, 0, 0, 0, 0, 578, 590, 624,
	0, 634, 635, 637, 639, 638, 641, 440, 441, 648,
	0, 643, 644, 645, 642, 377, 427, 446, 434, 0,
	659, 519, 520, 660, 630, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 673, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 0, 570, 521, 436, 388, 588,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 312, 231,
	516, 636, 518, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 443, 462, 313, 431,
	475, 318, 439, 454, 308, 403, 428, 0, 0, 304,
	460, 438, 385, 362, 363, 303, 0, 422, 337, 353,
	334, 401, 0, 459, 487, 333, 478, 0, 470, 306,
	0, 469, 400, 456, 461, 386, 379, 0, 305, 458,
	384, 378, 366, 343, 503, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 633,
	0, 472, 0, 672, 0, 0, 0, 0, 442, 0,
	0, 369, 0, 0, 0, 488, 0, 425, 406, 662,
	0, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 296, 445, 336, 387, 309, 311, 331, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	319, 424, 320, 355, 321, 297, 327, 325, 328, 432,
	329, 299, 410, 453, 0, 350, 420, 382, 300, 381,
	411, 452, 451, 310, 479, 485, 486, 575, 0, 491,
	663, 664, 665, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 301, 348, 293, 294, 658, 332, 402, 598, 631,
	632, 523, 0, 585, 524, 533, 324, 557, 569, 568,
	398, 483, 0, 580, 583, 513, 657, 0, 577, 592,
	661, 591, 654, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 298, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 468, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 492, 573, 574,
	392, 393, 394, 395, 352, 599, 317, 495, 418, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 666, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 316, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 314, 464, 435,
	380, 552, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 0, 0, 549,
	450, 326, 287, 322, 323, 330, 655, 652, 455, 656,
	0, 295, 529, 373, 0, 417, 346, 594, 595, 0,
	646, 243, 244, 245, 246, 247, 248, 249, 250, 288,
	251, 252, 253, 254, 255, 256, 257, 260, 261, 262,
	263, 264, 265, 266, 267, 597, 258, 259, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 0, 0, 0, 289, 290, 291, 292, 0,
	0, 283, 284, 285, 286, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 653, 0, 0, 0, 0,
	0, 0, 0, 578, 590, 624, 0, 634, 635, 637,
	639, 638, 641, 440, 441, 648, 0, 643, 644, 645,
	642, 377, 427, 446, 434, 0, 659, 519, 520, 660,
	630, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	0, 570, 521, 436, 388, 588, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 230, 856, 0,
	0, 0, 0, 0, 312, 231, 516, 636, 518, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 443, 462, 313, 431, 475, 318, 439, 454,
	308, 403, 428, 0, 0, 304, 460, 438, 385, 362,
	363, 303, 0, 422, 337, 353, 334, 401, 0, 459,
	487, 333, 478, 0, 470, 306, 0, 469, 400, 456,
	461, 386, 379, 0, 305, 458, 384, 378, 366, 343,
	503, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 633, 0, 472, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 488, 0, 425, 406, 662, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 296, 445, 336,
	387, 309, 311, 331, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 319, 424, 320, 355,
	321, 297, 327, 325, 328, 432, 329, 299, 410, 453,
	0, 350, 420, 382, 300, 381, 411, 452, 451, 310,
	479, 485, 486, 575, 0, 491, 663, 664, 665, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 0, 0, 0,
	484, 370, 371, 0, 342, 341, 383, 301, 348, 293,
	294, 658, 332, 402, 598, 631, 632, 523, 0, 585,
	524, 533, 324, 557, 569, 568, 398, 483, 0, 580,
	583, 513, 657, 0, 577, 592, 661, 591, 654, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 298, 496, 615, 616, 617, 618, 619,
	620, 621, 614, 468, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 492, 573, 574, 392, 393, 394, 395,
	352, 599, 317, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 666, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	316, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 314, 464, 435, 380, 552, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 326, 287, 322,
	323, 330, 655, 652, 455, 656, 0, 295, 529, 373,
	0, 417, 346, 594, 595, 0, 646, 243, 244, 245,
	246, 247, 248, 249, 250, 288, 251, 252, 253, 254,
	255, 256, 257, 260, 261, 262, 263, 264, 265, 266,
	267, 597, 258, 259, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 0, 0,
	0, 289, 290, 291, 292, 0, 0, 283, 284, 285,
	286, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 653, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 638, 641, 440,
	441, 648, 0, 643, 644, 645, 642, 377, 427, 446,
	434, 0, 659, 519, 520, 660, 630, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 0, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4085, 0, 0, 230, 0, 0, 0, 0, 0, 0,
	312, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 443, 462,
	313, 431, 475, 318, 439, 454, 308, 403, 428, 0,
	0, 304, 460, 438, 385, 362, 363, 303, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 306, 0, 469, 400, 456, 461, 386, 379, 0,
	305, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 633, 0, 472, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 488, 0, 425,
	406, 662, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 296, 445, 336, 387, 309, 311, 331,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 319, 424, 320, 355, 321, 297, 327, 325,
	328, 432, 329, 299, 410, 453, 0, 350, 420, 382,
	300, 381, 411, 452, 451, 310, 479, 485, 486, 575,
	0, 491, 663, 664, 665, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 301, 348, 293, 294, 658, 332, 402,
	598, 631, 632, 523, 0, 585, 524, 533, 324, 557,
	569, 568, 398, 483, 0, 580, 583, 513, 657, 0,
	577, 592, 661, 591, 654, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 298,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 468,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 492,
	573, 574, 392, 393, 394, 395, 352, 599, 317, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 666, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 316, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 314,
	464, 435, 380, 552, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 326, 287, 322, 323, 330, 655, 652,
	455, 656, 0, 295, 529, 373, 0, 417, 346, 594,
	595, 0, 646, 243, 244, 245, 246, 247, 248, 249,
	250, 288, 251, 252, 253, 254, 255, 256, 257, 260,
	261, 262, 263, 264, 265, 266, 267, 597, 258, 259,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 0, 0, 0, 289, 290, 291,
	292, 0, 0, 283, 284, 285, 286, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 653, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 638, 641, 440, 441, 648, 0, 643,
	644, 645, 642, 377, 427, 446, 434, 0, 659, 519,
	520, 660, 630, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 0, 570, 521, 436, 388, 588, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 230,
	0, 0, 3840, 0, 0, 0, 312, 231, 516, 636,
	518, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 443, 462, 313, 431, 475, 318,
	439, 454, 308, 403, 428, 0, 0, 304, 460, 438,
	385, 362, 363, 303, 0, 422, 337, 353, 334, 401,
	0, 459, 487, 333, 478, 0, 470, 306, 0, 469,
	400, 456, 461, 386, 379, 0, 305, 458, 384, 378,
	366, 343, 503, 367, 368, 357, 412, 376, 413, 358,
	390, 389, 391, 0, 0, 0, 0, 0, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 633, 0, 472,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 488, 0, 425, 406, 662, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 419, 415, 296,
	445, 336, 387, 309, 311, 331, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 319, 424,
	320, 355, 321, 297, 327, 325, 328, 432, 329, 299,
	410, 453, 0, 350, 420, 382, 300, 381, 411, 452,
	451, 310, 479, 485, 486, 575, 0, 491, 663, 664,
	665, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 301,
	348, 293, 294, 658, 332, 402, 598, 631, 632, 523,
	0, 585, 524, 533, 324, 557, 569, 568, 398, 483,
	0, 580, 583, 513, 657, 0, 577, 592, 661, 591,
	654, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 298, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 468, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 492, 573, 574, 392, 393,
	394, 395, 352, 599, 317, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	666, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 316, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 314, 464, 435, 380, 552,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 326,
	287, 322, 323, 330, 655, 652, 455, 656, 0, 295,
	529, 373, 0, 417, 346, 594, 595, 0, 646, 243,
	244, 245, 246, 247, 248, 249, 250, 288, 251, 252,
	253, 254, 255, 256, 257, 260, 261, 262, 263, 264,
	265, 266, 267, 597, 258, 259, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	0, 0, 0, 289, 290, 291, 292, 0, 0, 283,
	284, 285, 286, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 653, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 638,
	641, 440, 441, 648, 0, 643, 644, 645, 642, 377,
	427, 446, 434, 0, 659, 519, 520, 660, 630, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 0, 570,
	521, 436, 388, 588, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 0, 0, 0, 0,
	0, 0, 312, 231, 516, 636, 518, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	443, 462, 313, 431, 475, 318, 439, 454, 308, 403,
	428, 0, 0, 304, 460, 438, 385, 362, 363, 303,
	0, 422, 337, 353, 334, 401, 0, 459, 487, 333,
	478, 0, 470, 306, 0, 469, 400, 456, 461, 386,
	379, 0, 305, 458, 384, 378, 366, 343, 503, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 633, 0, 472, 0, 0, 0, 3976,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 488,
	0, 425, 406, 662, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 296, 445, 336, 387, 309,
	311, 331, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 319, 424, 320, 355, 321, 297,
	327, 325, 328, 432, 329, 299, 410, 453, 0, 350,
	420, 382, 300, 381, 411, 452, 451, 310, 479, 485,
	486, 575, 0, 491, 663, 664, 665, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	509, 510, 511, 512, 576, 593, 560, 530, 493, 584,
	527, 531, 532, 360, 596, 0, 0, 0, 484, 370,
	371, 0, 342, 341, 383, 301, 348, 293, 294, 658,
	332, 402, 598, 631, 632, 523, 0, 585, 524, 533,
	324, 557, 569, 568, 398, 483, 0, 580, 583, 513,
	657, 0, 577, 592, 661, 591, 654, 408, 0, 429,
	589, 536, 0, 581, 555, 0, 582, 551, 586, 0,
	525, 0, 437, 465, 477, 494, 497, 526, 611, 612,
	613, 298, 496, 615, 616, 617, 618, 619, 620, 621,
	614, 468, 558, 535, 561, 476, 538, 537, 0, 0,
	572, 492, 573, 574, 392, 393, 394, 395, 352, 599,
	317, 495, 418, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 562, 666, 0, 622, 623,
	0, 0, 489, 490, 347, 354, 508, 356, 316, 407,
	349, 474, 364, 0, 501, 566, 502, 625, 628, 626,
	627, 399, 359, 361, 433, 365, 375, 421, 473, 405,
	426, 314, 464, 435, 380, 552, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 606, 605, 604, 603, 602, 601,
	600, 0, 0, 549, 450, 326, 287, 322, 323, 330,
	655, 652, 455, 656, 0, 295, 529, 373, 0, 417,
	346, 594, 595, 0, 646, 243, 244, 245, 246, 247,
	248, 249, 250, 288, 251, 252, 253, 254, 255, 256,
	257, 260, 261, 262, 263, 264, 265, 266, 267, 597,
	258, 259, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 0, 0, 0, 289,
	290, 291, 292, 0, 0, 283, 284, 285, 286, 0,
	0, 0, 480, 481, 482, 504, 0, 466, 528, 653,
	0, 0, 0, 0, 0, 0, 0, 578, 590, 624,
	0, 634, 635, 637, 639, 638, 641, 440, 441, 648,
	0, 643, 644, 645, 642, 377, 427, 446, 434, 0,
	659, 519, 520, 660, 630, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 0, 570, 521, 436, 388, 588,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1784, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 312, 231,
	516, 636, 518, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 443, 462, 313, 431,
	475, 318, 439, 454, 308, 403, 428, 0, 0, 304,
	460, 438, 385, 362, 363, 303, 0, 422, 337, 353,
	334, 401, 0, 459, 487, 333, 478, 0, 470, 306,
	0, 469, 400, 456, 461, 386, 379, 0, 305, 458,
	384, 378, 366, 343, 503, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 633,
	0, 472, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 369, 0, 0, 0, 488, 0, 425, 406, 662,
	0, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 296, 445, 336, 387, 309, 311, 331, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	319, 424, 320, 355, 321, 297, 327, 325, 328, 432,
	329, 299, 410, 453, 0, 350, 420, 382, 300, 381,
	411, 452, 451, 310, 479, 485, 486, 575, 0, 491,
	663, 664, 665, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 301, 348, 293, 294, 658, 332, 402, 598, 631,
	632, 523, 0, 585, 524, 533, 324, 557, 569, 568,
	398, 483, 0, 580, 583, 513, 657, 0, 577, 592,
	661, 591, 654, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 298, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 468, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 492, 573, 574,
	392, 393, 394, 395, 352, 599, 317, 495, 418, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 666, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 316, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 314, 464, 435,
	380, 552, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 0, 0, 549,
	450, 326, 287, 322, 323, 330, 655, 652, 455, 656,
	0, 295, 529, 373, 0, 417, 346, 594, 595, 0,
	646, 243, 244, 245, 246, 247, 248, 249, 250, 288,
	251, 252, 253, 254, 255, 256, 257, 260, 261, 262,
	263, 264, 265, 266, 267, 597, 258, 259, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 0, 0, 0, 289, 290, 291, 292, 0,
	0, 283, 284, 285, 286, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 653, 0, 0, 0, 0,
	0, 0, 0, 578, 590, 624, 0, 634, 635, 637,
	639, 638, 641, 440, 441, 648, 0, 643, 644, 645,
	642, 377, 427, 446, 434, 0, 659, 519, 520, 660,
	630, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	0, 570, 521, 436, 388, 588, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3855, 0, 230, 0, 0,
	0, 0, 0, 0, 312, 231, 516, 636, 518, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 443, 462, 313, 431, 475, 318, 439, 454,
	308, 403, 428, 0, 0, 304, 460, 438, 385, 362,
	363, 303, 0, 422, 337, 353, 334, 401, 0, 459,
	487, 333, 478, 0, 470, 306, 0, 469, 400, 456,
	461, 386, 379, 0, 305, 458, 384, 378, 366, 343,
	503, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 633, 0, 472, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 488, 0, 425, 406, 662, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 296, 445, 336,
	387, 309, 311, 331, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 319, 424, 320, 355,
	321, 297, 327, 325, 328, 432, 329, 299, 410, 453,
	0, 350, 420, 382, 300, 381, 411, 452, 451, 310,
	479, 485, 486, 575, 0, 491, 663, 664, 665, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 0, 0, 0,
	484, 370, 371, 0, 342, 341, 383, 301, 348, 293,
	294, 658, 332, 402, 598, 631, 632, 523, 0, 585,
	524, 533, 324, 557, 569, 568, 398, 483, 0, 580,
	583, 513, 657, 0, 577, 592, 661, 591, 654, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 298, 496, 615, 616, 617, 618, 619,
	620, 621, 614, 468, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 492, 573, 574, 392, 393, 394, 395,
	352, 599, 317, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 666, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	316, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 314, 464, 435, 380, 552, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 326, 287, 322,
	323, 330, 655, 652, 455, 656, 0, 295, 529, 373,
	0, 417, 346, 594, 595, 0, 646, 243, 244, 245,
	246, 247, 248, 249, 250, 288, 251, 252, 253, 254,
	255, 256, 257, 260, 261, 262, 263, 264, 265, 266,
	267, 597, 258, 259, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 0, 0,
	0, 289, 290, 291, 292, 0, 0, 283, 284, 285,
	286, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 653, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 638, 641, 440,
	441, 648, 0, 643, 644, 645, 642, 377, 427, 446,
	434, 0, 659, 519, 520, 660, 630, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 0, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 230, 0, 0, 0, 0, 0, 0,
	312, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 443, 462,
	313, 431, 475, 318, 439, 454, 308, 403, 428, 0,
	0, 304, 460, 438, 385, 362, 363, 303, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 306, 0, 469, 400, 456, 461, 386, 379, 0,
	305, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 633, 0, 472, 0, 0, 0, 3763, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 488, 0, 425,
	406, 662, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 296, 445, 336, 387, 309, 311, 331,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 319, 424, 320, 355, 321, 297, 327, 325,
	328, 432, 329, 299, 410, 453, 0, 350, 420, 382,
	300, 381, 411, 452, 451, 310, 479, 485, 486, 575,
	0, 491, 663, 664, 665, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 301, 348, 293, 294, 658, 332, 402,
	598, 631, 632, 523, 0, 585, 524, 533, 324, 557,
	569, 568, 398, 483, 0, 580, 583, 513, 657, 0,
	577, 592, 661, 591, 654, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 298,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 468,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 492,
	573, 574, 392, 393, 394, 395, 352, 599, 317, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 666, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 316, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 314,
	464, 435, 380, 552, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 326, 287, 322, 323, 330, 655, 652,
	455, 656, 0, 295, 529, 373, 0, 417, 346, 594,
	595, 0, 646, 243, 244, 245, 246, 247, 248, 249,
	250, 288, 251, 252, 253, 254, 255, 256, 257, 260,
	261, 262, 263, 264, 265, 266, 267, 597, 258, 259,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 0, 0, 0, 289, 290, 291,
	292, 0, 0, 283, 284, 285, 286, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 653, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 638, 641, 440, 441, 648, 0, 643,
	644, 645, 642, 377, 427, 446, 434, 0, 659, 519,
	520, 660, 630, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 0, 570, 521, 436, 388, 588, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 230,
	0, 0, 3252, 0, 0, 0, 312, 231, 516, 636,
	518, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 443, 462, 313, 431, 475, 318,
	439, 454, 308, 403, 428, 0, 0, 304, 460, 438,
	385, 362, 363, 303, 0, 422, 337, 353, 334, 401,
	0, 459, 487, 333, 478, 0, 470, 306, 0, 469,
	400, 456, 461, 386, 379, 0, 305, 458, 384, 378,
	366, 343, 503, 367, 368, 357, 412, 376, 413, 358,
	390, 389, 391, 0, 0, 0, 0, 0, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 633, 0, 472,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 488, 0, 425, 406, 662, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 419, 415, 296,
	445, 336, 387, 309, 311, 331, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 319, 424,
	320, 355, 321, 297, 327, 325, 328, 432, 329, 299,
	410, 453, 0, 350, 420, 382, 300, 381, 411, 452,
	451, 310, 479, 485, 486, 575, 0, 491, 663, 664,
	665, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 301,
	348, 293, 294, 658, 332, 402, 598, 631, 632, 523,
	0, 585, 524, 533, 324, 557, 569, 568, 398, 483,
	0, 580, 583, 513, 657, 0, 577, 592, 661, 591,
	654, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 298, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 468, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 492, 573, 574, 392, 393,
	394, 395, 352, 599, 317, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	666, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 316, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 314, 464, 435, 380, 552,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 326,
	287, 322, 323, 330, 655, 652, 455, 656, 0, 295,
	529, 373, 0, 417, 346, 594, 595, 0, 646, 243,
	244, 245, 246, 247, 248, 249, 250, 288, 251, 252,
	253, 254, 255, 256, 257, 260, 261, 262, 263, 264,
	265, 266, 267, 597, 258, 259, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	0, 0, 0, 289, 290, 291, 292, 0, 0, 283,
	284, 285, 286, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 653, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 638,
	641, 440, 441, 648, 0, 643, 644, 645, 642, 377,
	427, 446, 434, 0, 659, 519, 520, 660, 630, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 0, 570,
	521, 436, 388, 588, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 0, 0, 0, 0,
	0, 0, 312, 231, 516, 636, 518, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3271, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	443, 462, 313, 431, 475, 318, 439, 454, 308, 403,
	428, 0, 0, 304, 460, 438, 385, 362, 363, 303,
	0, 422, 337, 353, 334, 401, 0, 459, 487, 333,
	478, 0, 470, 306, 0, 469, 400, 456, 461, 386,
	379, 0, 305, 458, 384, 378, 366, 343, 503, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 633, 0, 472, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 488,
	0, 425, 406, 662, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 296, 445, 336, 387, 309,
	311, 331, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 319, 424, 320, 355, 321, 297,
	327, 325, 328, 432, 329, 299, 410, 453, 0, 350,
	420, 382, 300, 381, 411, 452, 451, 310, 479, 485,
	486, 575, 0, 491, 663, 664, 665, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	509, 510, 511, 512, 576, 593, 560, 530, 493, 584,
	527, 531, 532, 360, 596, 0, 0, 0, 484, 370,
	371, 0, 342, 341, 383, 301, 348, 293, 294, 658,
	332, 402, 598, 631, 632, 523, 0, 585, 524, 533,
	324, 557, 569, 568, 398, 483, 0, 580, 583, 513,
	657, 0, 577, 592, 661, 591, 654, 408, 0, 429,
	589, 536, 0, 581, 555, 0, 582, 551, 586, 0,
	525, 0, 437, 465, 477, 494, 497, 526, 611, 612,
	613, 298, 496, 615, 616, 617, 618, 619, 620, 621,
	614, 468, 558, 535, 561, 476, 538, 537, 0, 0,
	572, 492, 573, 574, 392, 393, 394, 395, 352, 599,
	317, 495, 418, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 562, 666, 0, 622, 623,
	0, 0, 489, 490, 347, 354, 508, 356, 316, 407,
	349, 474, 364, 0, 501, 566, 502, 625, 628, 626,
	627, 399, 359, 361, 433, 365, 375, 421, 473, 405,
	426, 314, 464, 435, 380, 552, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 606, 605, 604, 603, 602, 601,
	600, 0, 0, 549, 450, 326, 287, 322, 323, 330,
	655, 652, 455, 656, 0, 295, 529, 373, 0, 417,
	346, 594, 595, 0, 646, 243, 244, 245, 246, 247,
	248, 249, 250, 288, 251, 252, 253, 254, 255, 256,
	257, 260, 261, 262, 263, 264, 265, 266, 267, 597,
	258, 259, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 0, 0, 0, 289,
	290, 291, 292, 0, 0, 283, 284, 285, 286, 0,
	0, 0, 480, 481, 482, 504, 0, 466, 528, 653,
	0, 0, 0, 0, 0, 0, 0, 578, 590, 624,
	0, 634, 635, 637, 639, 638, 641, 440, 441, 648,
	0, 643, 644, 645, 642, 377, 427, 446, 434, 0,
	659, 519, 520, 660, 630, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 0, 570, 521, 436, 388, 588,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2077, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 312, 231,
	516, 636, 518, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 443, 462, 313, 431,
	475, 318, 439, 454, 308, 403, 428, 0, 0, 304,
	460, 438, 385, 362, 363, 303, 0, 422, 337, 353,
	334, 401, 0, 459, 487, 333, 478, 0, 470, 306,
	0, 469, 400, 456, 461, 386, 379, 0, 305, 458,
	384, 378, 366, 343, 503, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 633,
	0, 472, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 369, 0, 0, 0, 488, 0, 425, 406, 662,
	0, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 296, 445, 336, 387, 309, 311, 331, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	319, 424, 320, 355, 321, 297, 327, 325, 328, 432,
	329, 299, 410, 453, 0, 350, 420, 382, 300, 381,
	411, 452, 451, 310, 479, 485, 486, 575, 0, 491,
	663, 664, 665, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 301, 348, 293, 294, 658, 332, 402, 598, 631,
	632, 523, 0, 585, 524, 533, 324, 557, 569, 568,
	398, 483, 0, 580, 583, 513, 657, 0, 577, 592,
	661, 591, 654, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 298, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 468, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 492, 573, 574,
	392, 393, 394, 395, 352, 599, 317, 495, 418, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 666, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 316, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 314, 464, 435,
	380, 552, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 0, 0, 549,
	450, 326, 287, 322, 323, 330, 655, 652, 455, 656,
	0, 295, 529, 373, 0, 417, 346, 594, 595, 0,
	646, 243, 244, 245, 246, 247, 248, 249, 250, 288,
	251, 252, 253, 254, 255, 256, 257, 260, 261, 262,
	263, 264, 265, 266, 267, 597, 258, 259, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 0, 0, 0, 289, 290, 291, 292, 0,
	0, 283, 284, 285, 286, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 653, 0, 0, 0, 0,
	0, 0, 0, 578, 590, 624, 0, 634, 635, 637,
	639, 638, 641, 440, 441, 648, 0, 643, 644, 645,
	642, 377, 427, 446, 434, 0, 659, 519, 520, 660,
	630, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 3475, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	0, 570, 521, 436, 388, 588, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 230, 0, 0,
	0, 0, 0, 0, 312, 231, 516, 636, 518, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 443, 462, 313, 431, 475, 318, 439, 454,
	308, 403, 428, 0, 0, 304, 460, 438, 385, 362,
	363, 303, 0, 422, 337, 353, 334, 401, 0, 459,
	487, 333, 478, 0, 470, 306, 0, 469, 400, 456,
	461, 386, 379, 0, 305, 458, 384, 378, 366, 343,
	503, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 633, 0, 472, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 488, 0, 425, 406, 662, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 296, 445, 336,
	387, 309, 311, 331, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 319, 424, 320, 355,
	321, 297, 327, 325, 328, 432, 329, 299, 410, 453,
	0, 350, 420, 382, 300, 381, 411, 452, 451, 310,
	479, 485, 486, 575, 0, 491, 663, 664, 665, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 0, 0, 0,
	484, 370, 371, 0, 342, 341, 383, 301, 348, 293,
	294, 658, 332, 402, 598, 631, 632, 523, 0, 585,
	524, 533, 324, 557, 569, 568, 398, 483, 0, 580,
	583, 513, 657, 0, 577, 592, 661, 591, 654, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 298, 496, 615, 616, 617, 618, 619,
	620, 621, 614, 468, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 492, 573, 574, 392, 393, 394, 395,
	352, 599, 317, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 666, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	316, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 314, 464, 435, 380, 552, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 326, 287, 322,
	323, 330, 655, 652, 455, 656, 0, 295, 529, 373,
	0, 417, 346, 594, 595, 0, 646, 243, 244, 245,
	246, 247, 248, 249, 250, 288, 251, 252, 253, 254,
	255, 256, 257, 260, 261, 262, 263, 264, 265, 266,
	267, 597, 258, 259, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 0, 0,
	0, 289, 290, 291, 292, 0, 0, 283, 284, 285,
	286, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 653, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 638, 641, 440,
	441, 648, 0, 643, 644, 645, 642, 377, 427, 446,
	434, 0, 659, 519, 520, 660, 630, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 0, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 230, 0, 0, 0, 0, 0, 0,
	312, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3380, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 443, 462,
	313, 431, 475, 318, 439, 454, 308, 403, 428, 0,
	0, 304, 460, 438, 385, 362, 363, 303, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 306, 0, 469, 400, 456, 461, 386, 379, 0,
	305, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 633, 0, 472, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 488, 0, 425,
	406, 662, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 296, 445, 336, 387, 309, 311, 331,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 319, 424, 320, 355, 321, 297, 327, 325,
	328, 432, 329, 299, 410, 453, 0, 350, 420, 382,
	300, 381, 411, 452, 451, 310, 479, 485, 486, 575,
	0, 491, 663, 664, 665, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 301, 348, 293, 294, 658, 332, 402,
	598, 631, 632, 523, 0, 585, 524, 533, 324, 557,
	569, 568, 398, 483, 0, 580, 583, 513, 657, 0,
	577, 592, 661, 591, 654, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 298,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 468,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 492,
	573, 574, 392, 393, 394, 395, 352, 599, 317, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 666, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 316, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 314,
	464, 435, 380, 552, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 326, 287, 322, 323, 330, 655, 652,
	455, 656, 0, 295, 529, 373, 0, 417, 346, 594,
	595, 0, 646, 243, 244, 245, 246, 247, 248, 249,
	250, 288, 251, 252, 253, 254, 255, 256, 257, 260,
	261, 262, 263, 264, 265, 266, 267, 597, 258, 259,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 0, 0, 0, 289, 290, 291,
	292, 0, 0, 283, 284, 285, 286, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 653, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 638, 641, 440, 441, 648, 0, 643,
	644, 645, 642, 377, 427, 446, 434, 0, 659, 519,
	520, 660, 630, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 0, 570, 521, 436, 388, 588, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 230,
	0, 0, 0, 0, 0, 0, 312, 231, 516, 636,
	518, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 443, 462, 313, 431, 475, 318,
	439, 454, 308, 403, 428, 0, 0, 304, 460, 438,
	385, 362, 363, 303, 0, 422, 337, 353, 334, 401,
	0, 459, 487, 333, 478, 0, 470, 306, 0, 469,
	400, 456, 461, 386, 379, 0, 305, 458, 384, 378,
	366, 343, 503, 367, 368, 357, 412, 376, 413, 358,
	390, 389, 391, 0, 0, 0, 0, 0, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 633, 0, 472,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 488, 0, 425, 406, 662, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 419, 415, 296,
	445, 336, 387, 309, 311, 331, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 319, 424,
	320, 355, 321, 297, 327, 325, 328, 432, 329, 299,
	410, 453, 0, 350, 420, 382, 300, 381, 411, 452,
	451, 310, 479, 485, 486, 575, 0, 491, 663, 664,
	665, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 301,
	348, 293, 294, 658, 332, 402, 598, 631, 632, 523,
	0, 585, 524, 533, 324, 557, 569, 568, 398, 483,
	0, 580, 583, 513, 657, 0, 577, 592, 661, 591,
	654, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 298, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 468, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 492, 573, 574, 392, 393,
	394, 395, 352, 599, 317, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	666, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 316, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 314, 464, 435, 380, 552,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 326,
	287, 322, 323, 330, 655, 652, 455, 656, 0, 295,
	529, 373, 0, 417, 346, 594, 595, 0, 646, 243,
	244, 245, 246, 247, 248, 249, 250, 288, 251, 252,
	253, 254, 255, 256, 257, 260, 261, 262, 263, 264,
	265, 266, 267, 597, 258, 259, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	0, 0, 0, 289, 290, 291, 292, 0, 0, 283,
	284, 285, 286, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 653, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 638,
	641, 440, 441, 648, 0, 643, 644, 645, 642, 377,
	427, 446, 434, 0, 659, 519, 520, 660, 630, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 0, 570,
	521, 436, 388, 588, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 0, 0, 1559, 0,
	0, 0, 312, 231, 516, 636, 518, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	443, 462, 313, 431, 475, 318, 439, 454, 308, 403,
	428, 0, 0, 304, 460, 438, 385, 362, 363, 303,
	0, 422, 337, 353, 334, 401, 0, 459, 487, 333,
	478, 0, 470, 306, 0, 469, 400, 456, 461, 386,
	379, 0, 305, 458, 384, 378, 366, 343, 503, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 633, 0, 472, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 488,
	0, 425, 406, 662, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 296, 445, 336, 387, 309,
	311, 331, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 319, 424, 320, 355, 321, 297,
	327, 325, 328, 432, 329, 299, 410, 453, 0, 350,
	420, 382, 300, 381, 411, 452, 451, 310, 479, 485,
	486, 575, 0, 491, 663, 664, 665, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	509, 510, 511, 512, 576, 593, 560, 530, 493, 584,
	527, 531, 532, 360, 596, 0, 0, 0, 484, 370,
	371, 0, 342, 341, 383, 301, 348, 293, 294, 658,
	332, 402, 598, 631, 632, 523, 0, 585, 524, 533,
	324, 557, 569, 568, 398, 483, 0, 580, 583, 513,
	657, 0, 577, 592, 661, 591, 654, 408, 0, 429,
	589, 536, 0, 581, 555, 0, 582, 551, 586, 0,
	525, 0, 437, 465, 477, 494, 497, 526, 611, 612,
	613, 298, 496, 615, 616, 617, 618, 619, 620, 621,
	614, 468, 558, 535, 561, 476, 538, 537, 0, 0,
	572, 492, 573, 574, 392, 393, 394, 395, 352, 599,
	317, 495, 418, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 562, 666, 0, 622, 623,
	0, 0, 489, 490, 347, 354, 508, 356, 316, 407,
	349, 474, 364, 0, 501, 566, 502, 625, 628, 626,
	627, 399, 359, 361, 433, 365, 375, 421, 473, 405,
	426, 314, 464, 435, 380, 552, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 606, 605, 604, 603, 602, 601,
	600, 0, 0, 549, 450, 326, 287, 322, 323, 330,
	655, 652, 455, 656, 0, 295, 529, 373, 0, 417,
	346, 594, 595, 0, 646, 243, 244, 245, 246, 247,
	248, 249, 250, 288, 251, 252, 253, 254, 255, 256,
	257, 260, 261, 262, 263, 264, 265, 266, 267, 597,
	258, 259, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 0, 0, 0, 289,
	290, 291, 292, 0, 0, 283, 284, 285, 286, 0,
	0, 0, 480, 481, 482, 504, 0, 466, 528, 653,
	0, 0, 0, 0, 0, 0, 0, 578, 590, 624,
	0, 634, 635, 637, 639, 638, 641, 440, 441, 648,
	0, 643, 644, 645, 642, 377, 427, 446, 434, 0,
	659, 519, 520, 660, 630, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 0, 570, 521, 436, 388, 588,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 0, 2538, 0, 0, 0, 312, 231,
	516, 636, 518, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 443, 462, 313, 431,
	475, 318, 439, 454, 308, 403, 428, 0, 0, 304,
	460, 438, 385, 362, 363, 303, 0, 422, 337, 353,
	334, 401, 0, 459, 487, 333, 478, 0, 470, 306,
	0, 469, 400, 456, 461, 386, 379, 0, 305, 458,
	384, 378, 366, 343, 503, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 633,
	0, 472, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 369, 0, 0, 0, 488, 0, 425, 406, 662,
	0, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 296, 445, 336, 387, 309, 311, 331, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	319, 424, 320, 355, 321, 297, 327, 325, 328, 432,
	329, 299, 410, 453, 0, 350, 420, 382, 300, 381,
	411, 452, 451, 310, 479, 485, 486, 575, 0, 491,
	663, 664, 665, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 301, 348, 293, 294, 658, 332, 402, 598, 631,
	632, 523, 0, 585, 524, 533, 324, 557, 569, 568,
	398, 483, 0, 580, 583, 513, 657, 0, 577, 592,
	661, 591, 654, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 298, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 468, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 492, 573, 574,
	392, 393, 394, 395, 352, 599, 317, 495, 418, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 666, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 316, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 314, 464, 435,
	380, 552, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 0, 0, 549,
	450, 326, 287, 322, 323, 330, 655, 652, 455, 656,
	0, 295, 529, 373, 0, 417, 346, 594, 595, 0,
	646, 243, 244, 245, 246, 247, 248, 249, 250, 288,
	251, 252, 253, 254, 255, 256, 257, 260, 261, 262,
	263, 264, 265, 266, 267, 597, 258, 259, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 0, 0, 0, 289, 290, 291, 292, 0,
	0, 283, 284, 285, 286, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 653, 0, 0, 0, 0,
	0, 0, 0, 578, 590, 624, 0, 634, 635, 637,
	639, 638, 641, 440, 441, 648, 0, 643, 644, 645,
	642, 377, 427, 446, 434, 0, 659, 519, 520, 660,
	630, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 2914, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	0, 570, 521, 436, 388, 588, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 230, 0, 0,
	0, 0, 0, 0, 312, 231, 516, 636, 518, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 443, 462, 313, 431, 475, 318, 439, 454,
	308, 403, 428, 0, 0, 304, 460, 438, 385, 362,
	363, 303, 0, 422, 337, 353, 334, 401, 0, 459,
	487, 333, 478, 0, 470, 306, 0, 469, 400, 456,
	461, 386, 379, 0, 305, 458, 384, 378, 366, 343,
	503, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 633, 0, 472, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 488, 0, 425, 406, 662, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 296, 445, 336,
	387, 309, 311, 331, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 319, 424, 320, 355,
	321, 297, 327, 325, 328, 432, 329, 299, 410, 453,
	0, 350, 420, 382, 300, 381, 411, 452, 451, 310,
	479, 485, 486, 575, 0, 491, 663, 664, 665, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 0, 0, 0,
	484, 370, 371, 0, 342, 341, 383, 301, 348, 293,
	294, 658, 332, 402, 598, 631, 632, 523, 0, 585,
	524, 533, 324, 557, 569, 568, 398, 483, 0, 580,
	583, 513, 657, 0, 577, 592, 661, 591, 654, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 298, 496, 615, 616, 617, 618, 619,
	620, 621, 614, 468, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 492, 573, 574, 392, 393, 394, 395,
	352, 599, 317, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 666, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	316, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 314, 464, 435, 380, 552, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 326, 287, 322,
	323, 330, 655, 652, 455, 656, 0, 295, 529, 373,
	0, 417, 346, 594, 595, 0, 646, 243, 244, 245,
	246, 247, 248, 249, 250, 288, 251, 252, 253, 254,
	255, 256, 257, 260, 261, 262, 263, 264, 265, 266,
	267, 597, 258, 259, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 0, 0,
	0, 289, 290, 291, 292, 0, 0, 283, 284, 285,
	286, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 653, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 638, 641, 440,
	441, 648, 0, 643, 644, 645, 642, 377, 427, 446,
	434, 0, 659, 519, 520, 660, 630, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 0, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 230, 0, 0, 0, 0, 0, 0,
	312, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2217, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 443, 462,
	313, 431, 475, 318, 439, 454, 308, 403, 428, 0,
	0, 304, 460, 438, 385, 362, 363, 303, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 306, 0, 469, 400, 456, 461, 386, 379, 0,
	305, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 633, 0, 472, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 488, 0, 425,
	406, 662, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 296, 445, 336, 387, 309, 311, 331,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 319, 424, 320, 355, 321, 297, 327, 325,
	328, 432, 329, 299, 410, 453, 0, 350, 420, 382,
	300, 381, 411, 452, 451, 310, 479, 485, 486, 575,
	0, 491, 663, 664, 665, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 301, 348, 293, 294, 658, 332, 402,
	598, 631, 632, 523, 0, 585, 524, 533, 324, 557,
	569, 568, 398, 483, 0, 580, 583, 513, 657, 0,
	577, 592, 661, 591, 654, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 298,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 468,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 492,
	573, 574, 392, 393, 394, 395, 352, 599, 317, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 666, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 316, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 314,
	464, 435, 380, 552, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 326, 287, 322, 323, 330, 655, 652,
	455, 656, 0, 295, 529, 373, 0, 417, 346, 594,
	595, 0, 646, 243, 244, 245, 246, 247, 248, 249,
	250, 288, 251, 252, 253, 254, 255, 256, 257, 260,
	261, 262, 263, 264, 265, 266, 267, 597, 258, 259,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 0, 0, 0, 289, 290, 291,
	292, 0, 0, 283, 284, 285, 286, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 653, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 638, 641, 440, 441, 648, 0, 643,
	644, 645, 642, 377, 427, 446, 434, 0, 659, 519,
	520, 660, 630, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 0, 570, 521, 436, 388, 588, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 230,
	0, 0, 2656, 0, 0, 0, 312, 231, 516, 636,
	518, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 443, 462, 313, 431, 475, 318,
	439, 454, 308, 403, 428, 0, 0, 304, 460, 438,
	385, 362, 363, 303, 0, 422, 337, 353, 334, 401,
	0, 459, 487, 333, 478, 0, 470, 306, 0, 469,
	400, 456, 461, 386, 379, 0, 305, 458, 384, 378,
	366, 343, 503, 367, 368, 357, 412, 376, 413, 358,
	390, 389, 391, 0, 0, 0, 0, 0, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 633, 0, 472,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 488, 0, 425, 406, 662, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 419, 415, 296,
	445, 336, 387, 309, 311, 331, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 319, 424,
	320, 355, 321, 297, 327, 325, 328, 432, 329, 299,
	410, 453, 0, 350, 420, 382, 300, 381, 411, 452,
	451, 310, 479, 485, 486, 575, 0, 491, 663, 664,
	665, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 301,
	348, 293, 294, 658, 332, 402, 598, 631, 632, 523,
	0, 585, 524, 533, 324, 557, 569, 568, 398, 483,
	0, 580, 583, 513, 657, 0, 577, 592, 661, 591,
	654, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 298, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 468, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 492, 573, 574, 392, 393,
	394, 395, 352, 599, 317, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	666, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 316, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 314, 464, 435, 380, 552,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 326,
	287, 322, 323, 330, 655, 652, 455, 656, 0, 295,
	529, 373, 0, 417, 346, 594, 595, 0, 646, 243,
	244, 245, 246, 247, 248, 249, 250, 288, 251, 252,
	253, 254, 255, 256, 257, 260, 261, 262, 263, 264,
	265, 266, 267, 597, 258, 259, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	0, 0, 0, 289, 290, 291, 292, 0, 0, 283,
	284, 285, 286, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 653, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 638,
	641, 440, 441, 648, 0, 643, 644, 645, 642, 377,
	427, 446, 434, 0, 659, 519, 520, 660, 630, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 0, 570,
	521, 436, 388, 588, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 0, 0, 0, 0,
	0, 0, 312, 231, 516, 636, 518, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2618, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	443, 462, 313, 431, 475, 318, 439, 454, 308, 403,
	428, 0, 0, 304, 460, 438, 385, 362, 363, 303,
	0, 422, 337, 353, 334, 401, 0, 459, 487, 333,
	478, 0, 470, 306, 0, 469, 400, 456, 461, 386,
	379, 0, 305, 458, 384, 378, 366, 343, 503, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 633, 0, 472, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 488,
	0, 425, 406, 662, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 296, 445, 336, 387, 309,
	311, 331, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 319, 424, 320, 355, 321, 297,
	327, 325, 328, 432, 329, 299, 410, 453, 0, 350,
	420, 382, 300, 381, 411, 452, 451, 310, 479, 485,
	486, 575, 0, 491, 663, 664, 665, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	509, 510, 511, 512, 576, 593, 560, 530, 493, 584,
	527, 531, 532, 360, 596, 0, 0, 0, 484, 370,
	371, 0, 342, 341, 383, 301, 348, 293, 294, 658,
	332, 402, 598, 631, 632, 523, 0, 585, 524, 533,
	324, 557, 569, 568, 398, 483, 0, 580, 583, 513,
	657, 0, 577, 592, 661, 591, 654, 408, 0, 429,
	589, 536, 0, 581, 555, 0, 582, 551, 586, 0,
	525, 0, 437, 465, 477, 494, 497, 526, 611, 612,
	613, 298, 496, 615, 616, 617, 618, 619, 620, 621,
	614, 468, 558, 535, 561, 476, 538, 537, 0, 0,
	572, 492, 573, 574, 392, 393, 394, 395, 352, 599,
	317, 495, 418, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 562, 666, 0, 622, 623,
	0, 0, 489, 490, 347, 354, 508, 356, 316, 407,
	349, 474, 364, 0, 501, 566, 502, 625, 628, 626,
	627, 399, 359, 361, 433, 365, 375, 421, 473, 405,
	426, 314, 464, 435, 380, 552, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 606, 605, 604, 603, 602, 601,
	600, 0, 0, 549, 450, 326, 287, 322, 323, 330,
	655, 652, 455, 656, 0, 295, 529, 373, 0, 417,
	346, 594, 595, 0, 646, 243, 244, 245, 246, 247,
	248, 249, 250, 288, 251, 252, 253, 254, 255, 256,
	257, 260, 261, 262, 263, 264, 265, 266, 267, 597,
	258, 259, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 0, 0, 0, 289,
	290, 291, 292, 0, 0, 283, 284, 285, 286, 0,
	0, 0, 480, 481, 482, 504, 0, 466, 528, 653,
	0, 0, 0, 0, 0, 0, 0, 578, 590, 624,
	0, 634, 635, 637, 639, 638, 641, 440, 441, 648,
	0, 643, 644, 645, 642, 377, 427, 446, 434, 0,
	659, 519, 520, 660, 630, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 0, 570, 521, 436, 388, 588,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 0, 2616, 0, 0, 0, 312, 231,
	516, 636, 518, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 443, 462, 313, 431,
	475, 318, 439, 454, 308, 403, 428, 0, 0, 304,
	460, 438, 385, 362, 363, 303, 0, 422, 337, 353,
	334, 401, 0, 459, 487, 333, 478, 0, 470, 306,
	0, 469, 400, 456, 461, 386, 379, 0, 305, 458,
	384, 378, 366, 343, 503, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 633,
	0, 472, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 369, 0, 0, 0, 488, 0, 425, 406, 662,
	0, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 296, 445, 336, 387, 309, 311, 331, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	319, 424, 320, 355, 321, 297, 327, 325, 328, 432,
	329, 299, 410, 453, 0, 350, 420, 382, 300, 381,
	411, 452, 451, 310, 479, 485, 486, 575, 0, 491,
	663, 664, 665, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 301, 348, 293, 294, 658, 332, 402, 598, 631,
	632, 523, 0, 585, 524, 533, 324, 557, 569, 568,
	398, 483, 0, 580, 583, 513, 657, 0, 577, 592,
	661, 591, 654, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 298, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 468, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 492, 573, 574,
	392, 393, 394, 395, 352, 599, 317, 495, 418, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 666, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 316, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 314, 464, 435,
	380, 552, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 0, 0, 549,
	450, 326, 287, 322, 323, 330, 655, 652, 455, 656,
	0, 295, 529, 373, 0, 417, 346, 594, 595, 0,
	646, 243, 244, 245, 246, 247, 248, 249, 250, 288,
	251, 252, 253, 254, 255, 256, 257, 260, 261, 262,
	263, 264, 265, 266, 267, 597, 258, 259, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 0, 0, 0, 289, 290, 291, 292, 0,
	0, 283, 284, 285, 286, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 653, 0, 0, 0, 0,
	0, 0, 0, 578, 590, 624, 0, 634, 635, 637,
	639, 638, 641, 440, 441, 648, 0, 643, 644, 645,
	642, 377, 427, 446, 434, 2385, 659, 519, 520, 660,
	630, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	0, 570, 521, 436, 388, 588, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 230, 0, 0,
	0, 0, 0, 0, 312, 231, 516, 636, 518, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 443, 462, 313, 431, 475, 318, 439, 454,
	308, 403, 428, 0, 0, 304, 460, 438, 385, 362,
	363, 303, 0, 422, 337, 353, 334, 401, 0, 459,
	487, 333, 478, 0, 470, 306, 0, 469, 400, 456,
	461, 386, 379, 0, 305, 458, 384, 378, 366, 343,
	503, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 633, 0, 472, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 488, 0, 425, 406, 662, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 296, 445, 336,
	387, 309, 311, 331, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 319, 424, 320, 355,
	321, 297, 327, 325, 328, 432, 329, 299, 410, 453,
	0, 350, 420, 382, 300, 381, 411, 452, 451, 310,
	479, 485, 486, 575, 0, 491, 663, 664, 665, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 0, 0, 0,
	484, 370, 371, 0, 342, 341, 383, 301, 348, 293,
	294, 658, 332, 402, 598, 631, 632, 523, 0, 585,
	524, 533, 324, 557, 569, 568, 398, 483, 0, 580,
	583, 513, 657, 0, 577, 592, 661, 591, 654, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 298, 496, 615, 616, 617, 618, 619,
	620, 621, 614, 468, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 492, 573, 574, 392, 393, 394, 395,
	352, 599, 317, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 666, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	316, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 314, 464, 435, 380, 552, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 326, 287, 322,
	323, 330, 655, 652, 455, 656, 0, 295, 529, 373,
	0, 417, 346, 594, 595, 0, 646, 243, 244, 245,
	246, 247, 248, 249, 250, 288, 251, 252, 253, 254,
	255, 256, 257, 260, 261, 262, 263, 264, 265, 266,
	267, 597, 258, 259, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 0, 0,
	0, 289, 290, 291, 292, 0, 0, 283, 284, 285,
	286, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 653, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 638, 641, 440,
	441, 648, 0, 643, 644, 645, 642, 377, 427, 446,
	434, 0, 659, 519, 520, 660, 630, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 0, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 230, 0, 0, 0, 1928, 0, 0,
	312, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 443, 462,
	313, 431, 475, 318, 439, 454, 308, 403, 428, 0,
	0, 304, 460, 438, 385, 362, 363, 303, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 306, 0, 469, 400, 456, 461, 386, 379, 0,
	305, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 633, 0, 472, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 488, 0, 425,
	406, 662, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 296, 445, 336, 387, 309, 311, 331,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 319, 424, 320, 355, 321, 297, 327, 325,
	328, 432, 329, 299, 410, 453, 0, 350, 420, 382,
	300, 381, 411, 452, 451, 310, 479, 485, 486, 575,
	0, 491, 663, 664, 665, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 301, 348, 293, 294, 658, 332, 402,
	598, 631, 632, 523, 0, 585, 524, 533, 324, 557,
	569, 568, 398, 483, 0, 580, 583, 513, 657, 0,
	577, 592, 661, 591, 654, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 298,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 468,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 492,
	573, 574, 392, 393, 394, 395, 352, 599, 317, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 666, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 316, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 314,
	464, 435, 380, 552, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 326, 287, 322, 323, 330, 655, 652,
	455, 656, 0, 295, 529, 373, 0, 417, 346, 594,
	595, 0, 646, 243, 244, 245, 246, 247, 248, 249,
	250, 288, 251, 252, 253, 254, 255, 256, 257, 260,
	261, 262, 263, 264, 265, 266, 267, 597, 258, 259,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 0, 0, 0, 289, 290, 291,
	292, 0, 0, 283, 284, 285, 286, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 653, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 638, 641, 440, 441, 648, 0, 643,
	644, 645, 642, 377, 427, 446, 434, 0, 659, 519,
	520, 660, 630, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 2059, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 0, 570, 521, 436, 388, 588, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 230,
	0, 0, 0, 0, 0, 0, 312, 231, 516, 636,
	518, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 443, 462, 313, 431, 475, 318,
	439, 454, 308, 403, 428, 0, 0, 304, 460, 438,
	385, 362, 363, 303, 0, 422, 337, 353, 334, 401,
	0, 459, 487, 333, 478, 0, 470, 306, 0, 469,
	400, 456, 461, 386, 379, 0, 305, 458, 384, 378,
	366, 343, 503, 367, 368, 357, 412, 376, 413, 358,
	390, 389, 391, 0, 0, 0, 0, 0, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 633, 0, 472,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 488, 0, 425, 406, 662, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 419, 415, 296,
	445, 336, 387, 309, 311, 331, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 319, 424,
	320, 355, 321, 297, 327, 325, 328, 432, 329, 299,
	410, 453, 0, 350, 420, 382, 300, 381, 411, 452,
	451, 310, 479, 485, 486, 575, 0, 491, 663, 664,
	665, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 301,
	348, 293, 294, 658, 332, 402, 598, 631, 632, 523,
	0, 585, 524, 533, 324, 557, 569, 568, 398, 483,
	0, 580, 583, 513, 657, 0, 577, 592, 661, 591,
	654, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 298, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 468, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 492, 573, 574, 392, 393,
	394, 395, 352, 599, 317, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	666, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 316, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 314, 464, 435, 380, 552,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 326,
	287, 322, 323, 330, 655, 652, 455, 656, 0, 295,
	529, 373, 0, 417, 346, 594, 595, 0, 646, 243,
	244, 245, 246, 247, 248, 249, 250, 288, 251, 252,
	253, 254, 255, 256, 257, 260, 261, 262, 263, 264,
	265, 266, 267, 597, 258, 259, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	0, 0, 0, 289, 290, 291, 292, 0, 0, 283,
	284, 285, 286, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 653, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 638,
	641, 440, 441, 648, 0, 643, 644, 645, 642, 377,
	427, 446, 434, 0, 659, 519, 520, 660, 630, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 0, 570,
	521, 436, 388, 588, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 0, 0, 1559, 0,
	0, 0, 312, 231, 516, 636, 518, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	443, 462, 313, 431, 475, 318, 439, 454, 308, 403,
	428, 0, 0, 304, 460, 438, 385, 362, 363, 303,
	0, 422, 337, 353, 334, 401, 0, 459, 487, 333,
	478, 0, 470, 306, 0, 469, 400, 456, 461, 386,
	379, 0, 305, 458, 384, 378, 366, 343, 503, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 633, 0, 472, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 488,
	0, 425, 406, 662, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 1964, 415, 296, 445, 336, 387, 309,
	311, 331, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 319, 424, 320, 355, 321, 297,
	327, 325, 328, 432, 329, 299, 410, 453, 0, 350,
	420, 382, 300, 381, 411, 452, 451, 310, 479, 485,
	486, 575, 0, 491, 663, 664, 665, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	509, 510, 511, 512, 576, 593, 560, 530, 493, 584,
	527, 531, 532, 360, 596, 0, 0, 0, 484, 370,
	371, 0, 342, 341, 383, 301, 348, 293, 294, 658,
	332, 402, 598, 631, 632, 523, 0, 585, 524, 533,
	324, 557, 569, 568, 398, 483, 0, 580, 583, 513,
	657, 0, 577, 592, 661, 591, 654, 408, 0, 429,
	589, 536, 0, 581, 555, 0, 582, 551, 586, 0,
	525, 0, 437, 465, 477, 494, 497, 526, 611, 612,
	613, 298, 496, 615, 616, 617, 618, 619, 620, 621,
	614, 468, 558, 535, 561, 476, 538, 537, 0, 0,
	572, 492, 573, 574, 392, 393, 394, 395, 352, 599,
	317, 495, 418, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 562, 666, 0, 622, 623,
	0, 0, 489, 490, 347, 354, 508, 356, 316, 407,
	349, 474, 364, 0, 501, 566, 502, 625, 628, 626,
	627, 399, 359, 361, 433, 365, 375, 421, 473, 405,
	426, 314, 464, 435, 380, 552, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 606, 605, 604, 603, 602, 601,
	600, 0, 0, 549, 450, 326, 287, 322, 323, 330,
	655, 652, 455, 656, 0, 295, 529, 373, 0, 417,
	346, 594, 595, 0, 646, 243, 244, 245, 246, 247,
	248, 249, 250, 288, 251, 252, 253, 254, 255, 256,
	257, 260, 261, 262, 263, 264, 265, 266, 267, 597,
	258, 259, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 0, 0, 0, 289,
	290, 291, 292, 0, 0, 283, 284, 285, 286, 0,
	0, 0, 480, 481, 482, 504, 0, 466, 528, 653,
	0, 0, 0, 0, 0, 0, 0, 578, 590, 624,
	0, 634, 635, 637, 639, 638, 641, 440, 441, 648,
	0, 643, 644, 645, 642, 377, 427, 446, 434, 0,
	659, 519, 520, 660, 630, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 0, 570, 521, 436, 388, 588,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 312, 231,
	516, 636, 518, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 443, 462, 313, 431,
	475, 318, 439, 454, 308, 403, 428, 0, 0, 304,
	460, 438, 385, 362, 363, 303, 0, 422, 337, 353,
	334, 401, 0, 459, 487, 333, 478, 0, 470, 306,
	0, 469, 400, 456, 461, 386, 379, 0, 305, 458,
	384, 378, 366, 343, 503, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 633,
	0, 472, 0, 0, 1588, 0, 0, 0, 442, 0,
	0, 369, 0, 0, 0, 488, 0, 425, 406, 662,
	0, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 296, 445, 336, 387, 309, 311, 331, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	319, 424, 320, 355, 321, 297, 327, 325, 328, 432,
	329, 299, 410, 453, 0, 350, 420, 382, 300, 381,
	411, 452, 451, 310, 479, 485, 486, 575, 0, 491,
	663, 664, 665, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 301, 348, 293, 294, 658, 332, 402, 598, 631,
	632, 523, 0, 585, 524, 533, 324, 557, 569, 568,
	398, 483, 0, 580, 583, 513, 657, 0, 577, 592,
	661, 591, 654, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 298, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 468, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 492, 573, 574,
	392, 393, 394, 395, 352, 599, 317, 495, 418, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 666, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 316, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 314, 464, 435,
	380, 552, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 0, 0, 549,
	450, 326, 287, 322, 323, 330, 655, 652, 455, 656,
	0, 295, 529, 373, 0, 417, 346, 594, 595, 0,
	646, 243, 244, 245, 246, 247, 248, 249, 250, 288,
	251, 252, 253, 254, 255, 256, 257, 260, 261, 262,
	263, 264, 265, 266, 267, 597, 258, 259, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 0, 0, 0, 289, 290, 291, 292, 0,
	0, 283, 284, 285, 286, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 653, 0, 0, 0, 0,
	0, 0, 0, 578, 590, 624, 0, 634, 635, 637,
	639, 638, 641, 440, 441, 648, 0, 643, 644, 645,
	642, 377, 427, 446, 434, 0, 659, 519, 520, 660,
	630, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 673, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	0, 570, 521, 436, 388, 588, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 230, 0, 0,
	0, 0, 0, 0, 312, 231, 516, 636, 518, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 443, 462, 313, 431, 475, 318, 439, 454,
	308, 403, 428, 0, 0, 304, 460, 438, 385, 362,
	363, 303, 0, 422, 337, 353, 334, 401, 0, 459,
	487, 333, 478, 0, 470, 306, 0, 469, 400, 456,
	461, 386, 379, 0, 305, 458, 384, 378, 366, 343,
	503, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 633, 0, 472, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 488, 0, 425, 406, 662, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 296, 445, 336,
	387, 309, 311, 331, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 319, 424, 320, 355,
	321, 297, 327, 325, 328, 432, 329, 299, 410, 453,
	0, 350, 420, 382, 300, 381, 411, 452, 451, 310,
	479, 485, 486, 575, 0, 491, 663, 664, 665, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 0, 0, 0,
	484, 370, 371, 0, 342, 341, 383, 301, 348, 293,
	294, 658, 332, 402, 598, 631, 632, 523, 0, 585,
	524, 533, 324, 557, 569, 568, 398, 483, 0, 580,
	583, 513, 657, 0, 577, 592, 661, 591, 654, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 298, 496, 615, 616, 617, 618, 619,
	620, 621, 614, 468, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 492, 573, 574, 392, 393, 394, 395,
	352, 599, 317, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 666, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	316, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 314, 464, 435, 380, 552, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 326, 287, 322,
	323, 330, 655, 652, 455, 656, 0, 295, 529, 373,
	0, 417, 346, 594, 595, 0, 646, 243, 244, 245,
	246, 247, 248, 249, 250, 288, 251, 252, 253, 254,
	255, 256, 257, 260, 261, 262, 263, 264, 265, 266,
	267, 597, 258, 259, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 0, 0,
	0, 289, 290, 291, 292, 0, 0, 283, 284, 285,
	286, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 653, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 638, 641, 440,
	441, 648, 0, 643, 644, 645, 642, 377, 427, 446,
	434, 0, 659, 519, 520, 660, 630, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 0, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 230, 0, 0, 0, 0, 0, 0,
	312, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 443, 462,
	313, 431, 475, 318, 439, 454, 308, 403, 428, 0,
	0, 304, 460, 438, 385, 362, 363, 303, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 306, 0, 469, 400, 456, 461, 386, 379, 0,
	305, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	683, 633, 0, 472, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 488, 0, 425,
	406, 662, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 296, 445, 336, 387, 309, 311, 331,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 319, 424, 320, 355, 321, 297, 327, 325,
	328, 432, 329, 299, 410, 453, 0, 350, 420, 382,
	300, 381, 411, 452, 451, 310, 479, 485, 486, 575,
	0, 491, 663, 664, 665, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 301, 348, 293, 294, 658, 332, 402,
	598, 631, 632, 523, 0, 585, 524, 533, 324, 557,
	569, 568, 398, 483, 0, 580, 583, 513, 657, 0,
	577, 592, 661, 591, 654, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 298,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 468,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 492,
	573, 574, 392, 393, 394, 395, 352, 599, 317, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 666, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 316, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 314,
	464, 435, 380, 552, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 326, 287, 322, 323, 330, 655, 652,
	455, 656, 0, 295, 529, 373, 0, 417, 346, 594,
	595, 0, 646, 243, 244, 245, 246, 247, 248, 249,
	250, 288, 251, 252, 253, 254, 255, 256, 257, 260,
	261, 262, 263, 264, 265, 266, 267, 597, 258, 259,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 0, 0, 0, 289, 290, 291,
	292, 0, 0, 283, 284, 285, 286, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 653, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 638, 641, 440, 441, 648, 0, 643,
	644, 645, 642, 377, 427, 446, 434, 0, 659, 519,
	520, 660, 630, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 0, 570, 521, 436, 388, 588, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 230,
	0, 0, 0, 0, 0, 0, 312, 231, 516, 636,
	518, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 443, 462, 313, 431, 475, 318,
	439, 454, 308, 403, 428, 0, 0, 304, 460, 438,
	385, 362, 363, 303, 0, 422, 337, 353, 334, 401,
	0, 459, 487, 333, 478, 0, 470, 306, 0, 469,
	400, 456, 461, 386, 379, 0, 305, 458, 384, 378,
	366, 343, 503, 367, 368, 357, 412, 376, 413, 358,
	390, 389, 391, 0, 0, 0, 0, 0, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 633, 0, 472,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 488, 0, 425, 406, 662, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 419, 415, 296,
	445, 336, 387, 309, 311, 331, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 319, 424,
	320, 355, 321, 297, 327, 325, 328, 432, 329, 299,
	410, 453, 0, 350, 420, 382, 300, 381, 411, 452,
	451, 310, 479, 485, 486, 575, 0, 491, 663, 664,
	665, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 301,
	348, 293, 294, 658, 332, 402, 598, 631, 632, 523,
	0, 585, 524, 533, 324, 557, 569, 568, 398, 483,
	0, 580, 583, 513, 657, 0, 577, 592, 661, 591,
	654, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 298, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 468, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 492, 573, 574, 392, 393,
	394, 395, 352, 599, 317, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	666, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 316, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 314, 464, 435, 380, 552,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 982, 0, 549, 450, 326,
	287, 322, 323, 330, 655, 652, 455, 656, 0, 295,
	529, 373, 0, 417, 346, 594, 595, 0, 646, 243,
	244, 245, 246, 247, 248, 249, 250, 288, 251, 252,
	253, 254, 255, 256, 257, 260, 261, 262, 263, 264,
	265, 266, 267, 597, 258, 259, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	0, 0, 0, 289, 290, 291, 292, 0, 0, 283,
	284, 285, 286, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 653, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 638,
	641, 440, 441, 648, 0, 643, 644, 645, 642, 377,
	427, 446, 434, 0, 659, 519, 520, 660, 630, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 0, 570,
	521, 436, 388, 588, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 0, 0, 0, 0,
	0, 0, 312, 231, 516, 636, 518, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	443, 462, 313, 431, 475, 318, 439, 454, 308, 403,
	428, 0, 0, 304, 460, 438, 385, 362, 363, 303,
	0, 422, 337, 353, 334, 401, 0, 459, 487, 333,
	478, 0, 470, 306, 0, 469, 400, 456, 461, 386,
	379, 0, 305, 458, 384, 378, 366, 343, 503, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 633, 0, 472, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 488,
	0, 425, 406, 662, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 296, 445, 336, 387, 309,
	311, 331, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 319, 424, 320, 355, 321, 297,
	327, 325, 328, 432, 329, 299, 410, 453, 0, 350,
	420, 382, 300, 381, 411, 452, 451, 310, 479, 485,
	486, 575, 0, 491, 663, 664, 665, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	509, 510, 511, 512, 576, 593, 560, 530, 493, 584,
	527, 531, 532, 360, 596, 0, 0, 0, 484, 370,
	371, 0, 342, 341, 383, 301, 348, 293, 294, 658,
	332, 402, 598, 631, 632, 523, 0, 585, 524, 533,
	324, 557, 569, 568, 398, 483, 0, 580, 583, 513,
	657, 0, 577, 592, 661, 591, 654, 408, 0, 429,
	589, 536, 0, 581, 555, 0, 582, 551, 586, 0,
	525, 0, 437, 465, 477, 494, 497, 526, 611, 612,
	613, 298, 496, 615, 616, 617, 618, 619, 620, 621,
	614, 468, 558, 535, 561, 476, 538, 537, 0, 0,
	572, 492, 573, 574, 392, 393, 394, 395, 352, 599,
	317, 495, 418, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 562, 666, 0, 622, 623,
	0, 0, 489, 490, 347, 354, 508, 356, 316, 407,
	349, 474, 364, 0, 501, 566, 502, 625, 628, 626,
	627, 399, 359, 361, 433, 365, 375, 421, 473, 405,
	426, 314, 464, 435, 380, 552, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 606, 605, 604, 603, 602, 601,
	600, 0, 0, 549, 450, 326, 287, 322, 323, 330,
	655, 652, 455, 656, 0, 295, 529, 373, 0, 417,
	346, 594, 595, 0, 646, 243, 244, 245, 246, 247,
	248, 249, 250, 288, 251, 252, 253, 254, 255, 256,
	257, 260, 261, 262, 263, 264, 265, 266, 267, 597,
	258, 259, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 0, 0, 0, 289,
	290, 291, 292, 0, 0, 283, 284, 285, 286, 0,
	0, 0, 480, 481, 482, 504, 0, 466, 528, 653,
	0, 0, 0, 0, 0, 0, 0, 578, 590, 624,
	0, 634, 635, 637, 639, 638, 641, 440, 441, 648,
	0, 643, 644, 645, 642, 377, 427, 446, 434, 0,
	659, 519, 520, 660, 630, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 0, 570, 521, 436, 388, 588,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 312, 231,
	516, 636, 518, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 443, 462, 313, 431,
	475, 318, 439, 454, 308, 403, 428, 0, 0, 304,
	460, 438, 385, 362, 363, 303, 0, 422, 337, 353,
	334, 401, 0, 459, 487, 333, 478, 0, 470, 306,
	0, 469, 400, 456, 461, 386, 379, 0, 305, 458,
	384, 378, 366, 343, 503, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 633,
	0, 472, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 369, 0, 0, 0, 488, 0, 425, 406, 662,
	0, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 296, 445, 336, 387, 309, 311, 331, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	319, 424, 320, 355, 321, 297, 327, 325, 328, 432,
	329, 299, 410, 453, 0, 350, 3197, 382, 300, 381,
	411, 452, 451, 310, 479, 485, 486, 575, 0, 491,
	663, 664, 665, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 301, 348, 293, 294, 658, 332, 402, 598, 631,
	632, 523, 0, 585, 524, 533, 324, 557, 569, 568,
	398, 483, 0, 580, 583, 513, 657, 0, 577, 592,
	661, 591, 654, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 298, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 468, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 492, 573, 574,
	392, 393, 394, 395, 352, 599, 317, 495, 418, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 666, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 316, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 314, 464, 435,
	380, 552, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 0, 0, 549,
	450, 326, 287, 322, 323, 330, 655, 652, 455, 656,
	0, 295, 529, 373, 0, 417, 346, 594, 595, 0,
	646, 243, 244, 245, 246, 247, 248, 249, 250, 288,
	251, 252, 253, 254, 255, 256, 257, 260, 261, 262,
	263, 264, 265, 266, 267, 597, 258, 259, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 0, 0, 0, 289, 290, 291, 292, 0,
	0, 283, 284, 285, 286, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 653, 0, 0, 0, 0,
	0, 0, 0, 578, 590, 624, 0, 634, 635, 637,
	639, 638, 641, 440, 441, 648, 0, 643, 644, 645,
	642, 377, 427, 446, 434, 0, 659, 519, 520, 660,
	630, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	0, 570, 521, 436, 388, 588, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 230, 0, 0,
	0, 0, 0, 0, 312, 231, 516, 636, 518, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 443, 462, 313, 431, 475, 318, 439, 1914,
	308, 403, 428, 0, 0, 304, 460, 438, 385, 362,
	363, 303, 0, 422, 337, 353, 334, 401, 0, 459,
	487, 333, 478, 0, 470, 306, 0, 469, 400, 456,
	461, 386, 379, 0, 305, 458, 384, 378, 366, 343,
	503, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 633, 0, 472, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 488, 0, 425, 406, 662, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 296, 445, 336,
	387, 309, 311, 331, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 319, 424, 320, 355,
	321, 297, 327, 325, 328, 432, 329, 299, 410, 453,
	0, 350, 420, 382, 300, 381, 411, 452, 451, 310,
	479, 485, 486, 575, 0, 491, 663, 664, 665, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 0, 0, 0,
	484, 370, 371, 0, 342, 341, 383, 301, 348, 293,
	294, 658, 332, 402, 598, 631, 632, 523, 0, 585,
	524, 533, 324, 557, 569, 568, 398, 483, 0, 580,
	583, 513, 657, 0, 577, 592, 661, 591, 654, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 298, 496, 615, 616, 617, 618, 619,
	620, 621, 614, 468, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 492, 573, 574, 392, 393, 394, 395,
	352, 599, 317, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 666, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	316, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 314, 464, 435, 380, 552, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 326, 287, 322,
	323, 330, 655, 652, 455, 656, 0, 295, 529, 373,
	0, 417, 346, 594, 595, 0, 646, 243, 244, 245,
	246, 247, 248, 249, 250, 288, 251, 252, 253, 254,
	255, 256, 257, 260, 261, 262, 263, 264, 265, 266,
	267, 597, 258, 259, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 0, 0,
	0, 289, 290, 291, 292, 0, 0, 283, 284, 285,
	286, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 653, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 638, 641, 440,
	441, 648, 0, 643, 644, 645, 642, 377, 427, 446,
	434, 0, 659, 519, 520, 660, 630, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 0, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 230, 0, 0, 0, 0, 0, 0,
	312, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 443, 1538,
	313, 431, 475, 318, 439, 454, 308, 403, 428, 0,
	0, 304, 460, 438, 385, 362, 363, 303, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 306, 0, 469, 400, 456, 461, 386, 379, 0,
	305, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 633, 0, 472, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 488, 0, 425,
	406, 662, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 296, 445, 336, 387, 309, 311, 331,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 319, 424, 320, 355, 321, 297, 327, 325,
	328, 432, 329, 299, 410, 453, 0, 350, 420, 382,
	300, 381, 411, 452, 451, 310, 479, 485, 486, 575,
	0, 491, 663, 664, 665, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 301, 348, 293, 294, 658, 332, 402,
	598, 631, 632, 523, 0, 585, 524, 533, 324, 557,
	569, 568, 398, 483, 0, 580, 583, 513, 657, 0,
	577, 592, 661, 591, 654, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 298,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 468,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 492,
	573, 574, 392, 393, 394, 395, 352, 599, 317, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 666, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 316, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 314,
	464, 435, 380, 552, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 326, 287, 322, 323, 330, 655, 652,
	455, 656, 0, 295, 529, 373, 0, 417, 346, 594,
	595, 0, 646, 243, 244, 245, 246, 247, 248, 249,
	250, 288, 251, 252, 253, 254, 255, 256, 257, 260,
	261, 262, 263, 264, 265, 266, 267, 597, 258, 259,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 0, 0, 0, 289, 290, 291,
	292, 0, 0, 283, 284, 285, 286, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 653, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 638, 641, 440, 441, 648, 0, 643,
	644, 645, 642, 377, 427, 446, 434, 0, 659, 519,
	520, 660, 630, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 0, 570, 521, 436, 388, 588, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 230,
	0, 0, 0, 0, 0, 0, 312, 231, 516, 636,
	518, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 443, 1536, 313, 431, 475, 318,
	439, 454, 308, 403, 428, 0, 0, 304, 460, 438,
	385, 362, 363, 303, 0, 422, 337, 353, 334, 401,
	0, 459, 487, 333, 478, 0, 470, 306, 0, 469,
	400, 456, 461, 386, 379, 0, 305, 458, 384, 378,
	366, 343, 503, 367, 368, 357, 412, 376, 413, 358,
	390, 389, 391, 0, 0, 0, 0, 0, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 633, 0, 472,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 488, 0, 425, 406, 662, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 419, 415, 296,
	445, 336, 387, 309, 311, 331, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 319, 424,
	320, 355, 321, 297, 327, 325, 328, 432, 329, 299,
	410, 453, 0, 350, 420, 382, 300, 381, 411, 452,
	451, 310, 479, 485, 486, 575, 0, 491, 663, 664,
	665, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 301,
	348, 293, 294, 658, 332, 402, 598, 631, 632, 523,
	0, 585, 524, 533, 324, 557, 569, 568, 398, 483,
	0, 580, 583, 513, 657, 0, 577, 592, 661, 591,
	654, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 298, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 468, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 492, 573, 574, 392, 393,
	394, 395, 352, 599, 317, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	666, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 316, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 314, 464, 435, 380, 552,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 326,
	287, 322, 323, 330, 655, 652, 455, 656, 0, 295,
	529, 373, 0, 417, 346, 594, 595, 0, 646, 243,
	244, 245, 246, 247, 248, 249, 250, 288, 251, 252,
	253, 254, 255, 256, 257, 260, 261, 262, 263, 264,
	265, 266, 267, 597, 258, 259, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	0, 0, 0, 289, 290, 291, 292, 0, 0, 283,
	284, 285, 286, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 653, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 638,
	641, 440, 441, 648, 0, 643, 644, 645, 642, 377,
	427, 446, 434, 0, 659, 519, 520, 660, 630, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 0, 570,
	521, 436, 388, 588, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 0, 0, 0, 0,
	0, 0, 312, 231, 516, 636, 518, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	443, 462, 313, 431, 475, 318, 439, 1415, 308, 403,
	428, 0, 0, 304, 460, 438, 385, 362, 363, 303,
	0, 422, 337, 353, 334, 401, 0, 459, 487, 333,
	478, 0, 470, 306, 0, 469, 400, 456, 461, 386,
	379, 0, 305, 458, 384, 378, 366, 343, 503, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 633, 0, 472, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 488,
	0, 425, 406, 662, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 296, 445, 336, 387, 309,
	311, 331, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 319, 424, 320, 355, 321, 297,
	327, 325, 328, 432, 329, 299, 410, 453, 0, 350,
	420, 382, 300, 381, 411, 452, 451, 310, 479, 485,
	486, 575, 0, 491, 663, 664, 665, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	509, 510, 511, 512, 576, 593, 560, 530, 493, 584,
	527, 531, 532, 360, 596, 0, 0, 0, 484, 370,
	371, 0, 342, 341, 383, 301, 348, 293, 294, 658,
	332, 402, 598, 631, 632, 523, 0, 585, 524, 533,
	324, 557, 569, 568, 398, 483, 0, 580, 583, 513,
	657, 0, 577, 592, 661, 591, 654, 408, 0, 429,
	589, 536, 0, 581, 555, 0, 582, 551, 586, 0,
	525, 0, 437, 465, 477, 494, 497, 526, 611, 612,
	613, 298, 496, 615, 616, 617, 618, 619, 620, 621,
	614, 468, 558, 535, 561, 476, 538, 537, 0, 0,
	572, 492, 573, 574, 392, 393, 394, 395, 352, 599,
	317, 495, 418, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 562, 666, 0, 622, 623,
	0, 0, 489, 490, 347, 354, 508, 356, 316, 407,
	349, 474, 364, 0, 501, 566, 502, 625, 628, 626,
	627, 399, 359, 361, 433, 365, 375, 421, 473, 405,
	426, 314, 464, 435, 380, 552, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 606, 605, 604, 603, 602, 601,
	600, 0, 0, 549, 450, 326, 287, 322, 323, 330,
	655, 652, 455, 656, 0, 295, 529, 373, 0, 417,
	346, 594, 595, 0, 646, 243, 244, 245, 246, 247,
	248, 249, 250, 288, 251, 252, 253, 254, 255, 256,
	257, 260, 261, 262, 263, 264, 265, 266, 267, 597,
	258, 259, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 0, 0, 0, 289,
	290, 291, 292, 0, 0, 283, 284, 285, 286, 0,
	0, 0, 480, 481, 482, 504, 0, 466, 528, 653,
	0, 0, 0, 0, 0, 0, 0, 578, 590, 624,
	0, 634, 635, 637, 639, 638, 641, 440, 441, 648,
	0, 643, 644, 645, 642, 377, 427, 446, 434, 0,
	659, 519, 520, 660, 630, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 0, 570, 521, 436, 388, 588,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 312, 231,
	516, 636, 518, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 443, 462, 313, 431,
	475, 318, 439, 454, 308, 403, 428, 0, 0, 304,
	460, 438, 385, 362, 363, 303, 0, 422, 337, 353,
	334, 401, 0, 459, 487, 333, 478, 0, 470, 306,
	0, 469, 400, 456, 461, 386, 379, 0, 305, 458,
	384, 378, 366, 343, 503, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 633,
	0, 472, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 369, 0, 0, 0, 488, 0, 425, 406, 662,
	0, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 296, 445, 336, 387, 309, 311, 751, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	319, 424, 320, 355, 321, 297, 327, 325, 328, 432,
	329, 299, 410, 453, 0, 350, 420, 382, 300, 381,
	411, 452, 451, 310, 479, 485, 486, 575, 0, 491,
	663, 664, 665, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 301, 348, 293, 294, 658, 332, 402, 598, 631,
	632, 523, 0, 585, 524, 533, 324, 557, 569, 568,
	398, 483, 0, 580, 583, 513, 657, 0, 577, 592,
	661, 591, 654, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 298, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 468, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 492, 573, 574,
	392, 393, 394, 395, 352, 599, 317, 495, 418, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 666, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 316, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 314, 464, 435,
	380, 552, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 0, 0, 549,
	450, 326, 287, 322, 323, 330, 655, 652, 455, 656,
	0, 295, 529, 373, 0, 417, 346, 594, 595, 0,
	646, 243, 244, 245, 246, 247, 248, 249, 250, 288,
	251, 252, 253, 254, 255, 256, 257, 260, 261, 262,
	263, 264, 265, 266, 267, 597, 258, 259, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 0, 0, 0, 289, 290, 291, 292, 0,
	0, 283, 284, 285, 286, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 653, 0, 0, 0, 0,
	0, 0, 0, 578, 590, 624, 0, 634, 635, 637,
	639, 638, 641, 440, 441, 648, 0, 643, 644, 645,
	642, 377, 427, 446, 434, 0, 659, 519, 520, 660,
	630, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	0, 570, 521, 436, 388, 588, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 230, 0, 0,
	0, 0, 0, 0, 312, 231, 516, 636, 518, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 443, 462, 313, 431, 475, 318, 439, 454,
	308, 403, 428, 0, 0, 304, 460, 438, 385, 362,
	363, 303, 0, 422, 337, 353, 334, 401, 0, 459,
	487, 333, 478, 0, 470, 306, 0, 469, 400, 456,
	461, 386, 379, 0, 305, 458, 384, 378, 366, 343,
	503, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 633, 0, 472, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 488, 0, 425, 406, 662, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 708, 415, 296, 445, 336,
	387, 309, 311, 331, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 319, 424, 320, 355,
	321, 297, 327, 325, 328, 432, 329, 299, 410, 453,
	0, 350, 420, 382, 300, 381, 411, 452, 451, 310,
	479, 485, 486, 575, 0, 491, 663, 664, 665, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 0, 0, 0,
	484, 370, 371, 0, 342, 341, 383, 301, 348, 293,
	294, 658, 332, 402, 598, 631, 632, 523, 0, 585,
	524, 533, 324, 557, 569, 568, 398, 483, 0, 580,
	583, 513, 657, 0, 577, 592, 661, 591, 654, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 298, 496, 615, 616, 617, 618, 619,
	620, 709, 614, 468, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 492, 573, 574, 392, 393, 394, 395,
	352, 599, 317, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 666, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	316, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 314, 464, 435, 380, 552, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 326, 287, 322,
	323, 330, 655, 652, 455, 656, 0, 295, 529, 373,
	0, 417, 346, 594, 595, 0, 646, 243, 244, 245,
	246, 247, 248, 249, 250, 288, 251, 252, 253, 254,
	255, 256, 257, 260, 261, 262, 263, 264, 265, 266,
	267, 597, 258, 259, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 0, 0,
	0, 289, 290, 291, 292, 0, 0, 283, 284, 285,
	286, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 653, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 638, 641, 440,
	441, 648, 0, 643, 644, 645, 642, 377, 427, 446,
	434, 0, 659, 519, 520, 660, 630, 730, 729, 736,
	726, 0, 0, 2046, 0, 0, 0, 0, 0, 0,
	733, 734, 0, 735, 739, 0, 0, 720, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 744, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2048,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2046, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 748, 0, 0, 750, 0, 0, 0,
	0, 749, 0, 3861, 0, 0, 0, 0, 2048, 0,
	0, 0, 0, 2023, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2023, 0, 0, 0, 2046, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2039, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2048, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3832, 0, 0, 0,
	2039, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 721, 723, 722, 0, 0, 0, 0, 0, 0,
	0, 0, 728, 0, 0, 0, 2023, 0, 0, 0,
	0, 0, 0, 0, 732, 2027, 0, 0, 0, 0,
	0, 747, 0, 0, 0, 0, 2033, 0, 725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2021, 2055, 0, 0,
	2022, 2024, 2026, 0, 2028, 2029, 2030, 2034, 2035, 2036,
	2038, 2041, 2042, 2043, 2027, 0, 0, 0, 0, 0,
	0, 2031, 2040, 2032, 2039, 2033, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2021, 2055, 0, 0, 2022,
	2024, 2026, 0, 2028, 2029, 2030, 2034, 2035, 2036, 2038,
	2041, 2042, 2043, 0, 2047, 0, 0, 0, 0, 0,
	2031, 2040, 2032, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 727, 731, 737, 0, 738, 740, 2027, 0,
	741, 742, 743, 2047, 2044, 745, 746, 0, 0, 2033,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2020, 0, 0, 0, 0, 0, 0, 2019, 2021,
	2055, 0, 0, 2022, 2024, 2026, 0, 2028, 2029, 2030,
	2034, 2035, 2036, 2038, 2041, 2042, 2043, 0, 0, 0,
	0, 0, 2037, 2044, 2031, 2040, 2032, 0, 0, 0,
	0, 2025, 0, 0, 0, 0, 0, 0, 0, 0,
	2020, 0, 0, 0, 0, 0, 0, 2019, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2047, 0, 0,
	0, 2037, 0, 0, 0, 0, 0, 0, 0, 0,
	2025, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2044, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 724, 0, 0, 2020, 0, 0, 0, 0, 0,
	0, 2019, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2037, 0, 0, 0, 0,
	0, 0, 0, 0, 2025,
}

var yyPact = [...]int{
	361, -1000, -1000, -1000, -346, 15526, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 49796, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 459, 49796, -344, 31062, 47858, -1000, -1000, 2842,
	-1000, 48504, 17484, 49796, 578, 576, 49796, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1029, -1000, 54318, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 914, 5021, 53672,
	11623, -233, -1000, 1772, -37, 2744, 488, -217, -220, 565,
	1230, 1249, 1445, 1353, 49796, 1203, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 517,
	1067, 49150, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 258, 245, 1020, 1067,
	22660, 119, 116, 1772, 500, -90, 212, -1000, 1723, 4273,
	196, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11623, 11623, 15526, -401, 15526, 11623, 49796, 49796,
	-1000, -1000, -1000, -1000, -344, 48504, 914, 5021, 11623, 2744,
	488, -217, -220, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -90, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 116, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5340,
	-1000, 1707, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2517, 3213, 1695,
	2740, 872, 47858, 49796, -1000, 143, 872, -1000, -1000, -1000,
	1772, 3631, -1000, 49796, 49796, 217, 2034, -1000, 465, 507,
	429, 550, 334, 1694, -1000, -1000, -1000, -1000, -1000, -1000,
	822, 3611, -1000, 49796, 49796, 3236, 49796, -1000, 2462, 839,
	-1000, 54974, 3442, 1582, 1030, 3252, -1000, -1000, 3212, -1000,
	362, 1575, 762, 937, 456, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 392, -1000, 3517, -1000, -1000, 337, -1000, -1000,
	321, -1000, -1000, -1000, 112, -1000, -1000, -1000, -1000, -1000,
	-1000, -12, -1000, -1000, 1323, 2310, 11623, 2188, -1000, 2898,
	1712, -1000, -1000, -1000, 7074, 14219, 14219, 14219, 14219, 49796,
	-1000, -1000, 3054, 11623, 3210, 3209, 3207, 3204, -1000, -1000,
	-1000, -1000, -1000, -1000, 3200, 1692, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2170, -1000, -1000, -1000, 14868,
	-1000, 3199, 3197, 3196, 3195, 3190, 3188, 3187, 3185, 3184,
	3183, 3179, 3178, 3177, 3176, 2939, 16828, 3170, 2739, 2738,
	3169, 3167, 3161, 2736, 3160, 3158, 3157, 2939, 2939, 3155,
	3150, 3148, 3147, 3142, 3141, 3139, 3138, 3132, 3130, 3128,
	3126, 3119, 3117, 3115, 3114, 3110, 3109, 3104, 3103, 3100,
	3099, 3098, 3097, 3096, 3095, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1576,
	-1000, 3092, 3610, 2978, -1000, 3487, 3472, 3467, 3465, -281,
	3078, 2428, -1000, -1000, 100, 3609, 49796, -303, 49796, 413,
	-104, -105, -107, 1273, -1000, -85, -1000, -1000, 1210, -1000,
	1184, 53026, 985, -1000, -1000, 49796, 908, 908, 908, 49796,
	281, 940, 908, 908, 908, 908, 908, 989, 908, 3538,
	1017, 1014, 1009, 1006, 908, -53, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2032, 2029, 3340, 1134, -1000, -1000, -1000,
	-1000, 1606, 49796, -1000, 3020, 413, -331, 1843, 1843, 3591,
	3591, 3534, 3531, 852, 848, 845, 1843, 677, -1000, 1928,
	1928, 1928, 1928, 1843, 527, 854, 3541, 3541, 88, 1928,
	86, 1843, 1843, 86, 1843, 1843, -1000, 1994, 300, -289,
	-1000, -1000, -1000, -1000, 1928, 1928, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3514, 3512, 914, 914, 49796, 914, 231,
	49796, 914, 914, 914, 49796, 923, -336, 58, 52380, 51734,
	2323, 2462, 836, 833, 1612, 2014, -1000, 1795, 49796, 49796,
	1795, 1795, 25894, 25248, -1000, 49796, -1000, 3610, 2978, 2930,
	1856, 2920, 2978, -108, 413, 914, 914, 914, 914, 914,
	311, 914, 914, 914, 914, 914, 49796, 49796, 47212, 914,
	914, 914, 914, 9670, 1723, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15526, 2243,
	2239, 195, -27, -320, 291, -1000, -1000, 49796, 3417, 302,
	-1000, -1000, -1000, 3009, -1000, 3013, 3013, 3013, 3013, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3013,
	3013, 3019, 3064, -1000, -1000, 3010, 3010, 3010, 3009, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3017, 3017, 3018, 3018, 3017, 49796,
	-131, -1000, -1000, 11623, 49796, 3428, 452, 3063, 872, -1000,
	-1000, 49796, 305, 474, 3610, 3426, 3541, 3581, -1000, -1000,
	1691, 2425, 2735, -1000, 334, -1000, 412, 334, -1000, 496,
	496, 1968, -1000, 1567, -1000, -1000, -1000, -1000, -1000, -1000,
	49796, -12, 455, -1000, -1000, 2721, 3059, -1000, 655, 1487,
	1562, -1000, 332, 4002, 40106, 2462, 40106, 49796, -1000, -1000,
	-1000, -1000, -1000, -1000, 97, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 342,
	-1000, 11623, 11623, 11623, 11623, 11623, -1000, 766, 13570, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 14219, 14219, 14219, 14219,
	14219, 14219, 14219, 14219, 14219, 14219, 14219, 14219, 3053, 2018,
	14219, 14219, 14219, 14219, 27832, 1856, 3356, 1609, 297, 1712,
	1712, 1712, 1712, 11623, -1000, 1947, 2310, 11623, 11623, 11623,
	11623, 34292, 49796, -1000, -1000, 4267, 11623, 11623, 4923, 11623,
	3462, 11623, 11623, 11623, 2912, 5767, 49796, 11623, -1000, 2908,
	2903, -1000, -1000, 2180, 11623, -1000, -1000, 11623, -1000, -1000,
	11623, 14219, 11623, -1000, 11623, 11623, 11623, -1000, -1000, 999,
	3462, 3462, 3462, 2090, 11623, 11623, 3462, 3462, 3462, 2071,
	3462, 3462, 3462, 3462, 3462, 3462, 3462, 3462, 3462, 3462,
	3462, 2893, 2890, 2888, 10974, 3541, -233, -1000, 9021, 3426,
	3541, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -283, 3057, 49796, 2734, 2729, -352, 177, 484, 49796,
	1234, -1000, -1000, 49796, 2423, 49796, 2421, 257, 227, 16,
	1228, 1142, 1151, -1000, -1000, 49796, 51088, -1000, 49796, 2060,
	49796, 49796, 3458, -1000, 49796, 49796, 908, 908, 908, -1000,
	45274, 40106, 49796, 49796, 2462, 49796, 49796, 49796, 908, 908,
	908, 908, 49796, -1000, 3378, 40106, 3344, 923, -1000, 49796,
	1606, 3456, 49796, -1000, -1000, -1000, -1000, 3591, 14219, 14219,
	-1000, -1000, 11623, -1000, 307, 46566, 1928, 1843, 1843, -1000,
	-1000, 49796, -1000, -1000, -1000, 1928, 49796, 1928, 1928, 3591,
	1928, -1000, -1000, -1000, 1843, 1843, -1000, -1000, 11623, -1000,
	-1000, 1928, 1928, -1000, -1000, 3591, 49796, 91, 3591, 3591,
	98, -1000, -1000, -1000, 1843, 49796, 49796, 908, 49796, -1000,
	49796, 49796, -1000, -1000, 49796, 49796, 4679, 49796, 45274, 45920,
	3506, -1000, 40106, 49796, 49796, 1605, -1000, 976, 37522, -1000,
	49796, 1527, -1000, 39, -1000, 14, 58, 1795, 58, 1795,
	965, -1000, 653, 748, 23956, 606, 40106, 6416, -1000, -1000,
	1795, 1795, 6416, 6416, 1715, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1603, -1000, 295, 3541, -1000, -1000, -1000, -1000,
	-1000, 2412, -315, 49796, 45274, 40106, 2462, 49796, 914, 49796,
	49796, 49796, 49796, 49796, -1000, 3056, 1676, -1000, 3439, 49796,
	49796, 49796, 49796, 1475, -1000, -1000, 20714, 1659, -1000, -1000,
	2066, -1000, 11623, 15526, -265, 11623, 15526, 15526, 11623, 15526,
	-1000, 11623, 299, -1000, -1000, -1000, -1000, 2411, -1000, 2403,
	-1000, -1000, -1000, -1000, -1000, 2728, 2728, -1000, 2401, -1000,
	-1000, -1000, -1000, 2400, -1000, -1000, 2399, -1000, -1000, -1000,
	-1000, -170, 2887, 1323, -1000, 2726, 3251, -235, -1000, 22014,
	49796, 49796, 452, -364, 2024, 2021, 2019, 3522, -1000, -235,
	-1000, 21364, 49796, 3541, -1000, -244, 3426, 11623, 49796, -1000,
	3529, -1000, -1000, 334, -1000, -1000, -1000, 496, 440, -1000,
	-1000, -1000, -1000, -1000, -1000, 1657, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -91, -98, 1595,
	-1000, 49796, -1000, -1000, 332, 40106, 42044, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 260, -1000, -1000, 182, -1000, 956,
	263, 1962, -1000, -1000, 225, 211, 220, 1076, 2310, -1000,
	2075, 2075, 2067, -1000, 769, -1000, -1000, -1000, -1000, 3054,
	-1000, -1000, -1000, 2316, 1946, -1000, 2023, 2023, 1734, 1734,
	1734, 1734, 1734, 2050, 2050, -1000, -1000, -1000, 7074, 3053,
	14219, 14219, 14219, 14219, 1008, 1008, 2341, 4407, -1000, -1000,
	-1000, -1000, 11623, 176, 2044, -1000, 11623, 2851, 1743, 2509,
	1541, 1959, -1000, 3009, 11623, 1645, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2886, 2883, 2635, 3607,
	2877, 11623, -1000, -1000, 1958, 1956, 1952, -1000, 2514, 10325,
	-1000, -1000, -1000, 2875, 1642, 2874, -1000, -1000, -1000, 2872,
	1948, 1336, 2871, 2106, 2870, 2865, 2864, 2863, 1591, 11623,
	11623, 11623, 11623, 2861, 1943, 1941, 11623, 11623, 11623, 11623,
	2860, 11623, 11623, 11623, 11623, 11623, 11623, 11623, 11623, 11623,
	11623, 49796, 135, 135, 135, 1573, 1565, -1000, -1000, 1926,
	-1000, 2310, -1000, -1000, 3426, -1000, 3052, 2397, 1561, -1000,
	-1000, -341, 2667, 49796, 49796, 172, 49796, 2724, -305, 49796,
	-1000, -1000, 2723, -1000, 49796, 49796, 49796, 49796, -1000, -1000,
	1226, 1171, 1157, -1000, 49796, -1000, 2715, 3437, 3528, 997,
	49796, 3051, 3050, 49796, 49796, 49796, 290, -1000, -1000, 1449,
	-1000, 263, -26, 580, 1357, 3230, 902, -132, 49796, 49796,
	49796, 49796, 3454, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 44628, -1000, 3049, 1925, -1000, -1000, 1712, 1712, 2310,
	49796, 49796, 49796, 3228, 49796, 49796, 3591, 3591, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1928, 3591, 3591, 1722, 1843,
	1928, -1000, -1000, 1928, -364, -1000, 1928, -1000, -364, 1633,
	-364, 49796, -1000, -1000, -1000, 3452, 3020, 1544, -1000, -1000,
	-1000, 3580, 1763, 895, 895, 1149, 830, 3578, 19422, -1000,
	1803, 1588, 955, 3398, 333, -1000, 1803, -167, 878, 1803,
	1803, 1803, 1803, 1803, 1803, 1803, 818, 806, 1803, 1803,
	1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1244,
	1803, 1803, 1803, 1803, 1803, -1000, 1803, 3047, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 844, 709, 286, 3501, 418,
	-1000, 494, 1449, 729, 3500, 449, 49796, 49796, 3751, 1455,
	-1000, -1000, -1000, -1000, -1000, 28478, 28478, 23310, 28478, -1000,
	209, 1795, 58, 54, -1000, -1000, 1527, 6416, 1527, 6416,
	2395, -1000, -1000, 954, -1000, -1000, 1357, -1000, 49796, 49796,
	-1000, -1000, 3046, 2016, -1000, -1000, 16828, -1000, 6416, 6416,
	-1000, -1000, 30416, 49796, -1000, -20, -1000, 0, 3426, -1000,
	-1000, -1000, 1340, -1000, -1000, 1525, 1357, 3244, 49796, 1340,
	1340, 1340, -1000, -1000, 18130, 49796, 49796, -1000, -1000, -1000,
	-315, 3591, 9670, -1000, 37522, -1000, -1000, 43982, -1000, 43336,
	2040, -1000, 15526, 2211, 189, -1000, 280, -325, 187, 2171,
	184, 2310, -1000, -1000, 2859, 2849, 1899, -1000, 1891, 2848,
	1881, 1864, 2378, -1000, 69, -1000, 3419, 1370, -1000, 3045,
	-1000, 1863, 3335, -1000, 1523, -1000, 2013, 1862, -1000, -1000,
	-1000, 11623, 42690, 11623, 1115, 1370, 1833, 3333, 1523, 3426,
	2712, -1000, 1520, -1000, 2490, 1632, 214, -1000, -1000, -1000,
	49796, 2721, 1822, 42044, 1408, -1000, 946, 1628, 1626, -1000,
	40106, 353, 40106, -1000, 40106, -1000, -1000, 403, -1000, 49796,
	3421, -1000, -1000, -1000, 2667, 2011, -363, 49796, -1000, -1000,
	-1000, -1000, -1000, 1817, -1000, 1008, 1008, 2341, 4341, -1000,
	14219, -1000, 14219, 3332, -1000, 2038, -1000, 11623, 2186, 5174,
	11623, 5174, 1620, 27186, 34292, -120, 3425, 3311, 49796, -1000,
	-1000, 11623, 11623, -1000, 3297, -1000, -1000, -1000, -1000, 11623,
	11623, 2362, -1000, 49796, -1000, -1000, -1000, -1000, 27186, -1000,
	14219, -1000, -1000, -1000, -1000, 11623, 1429, 1429, 3292, 1814,
	135, 135, 135, 3277, 3256, 3245, 1811, 135, 3201, 3163,
	3144, 3105, 3093, 2975, 2971, 2827, 2758, 2752, 1809, -1000,
	3043, -1000, -1000, 2157, 12921, 9021, -1000, -1000, 322, 1501,
	2370, 2711, 134, -1000, 2005, -1000, 2703, 49796, 49796, 1233,
	-1000, 49796, 3606, -1000, 3605, 3600, -1000, -1000, -1000, -1000,
	-1000, 1144, -1000, 2694, -1000, 331, 329, 2246, 315, 1390,
	18130, 3020, 3039, 3020, 160, 1803, 746, 40106, 831, -1000,
	49796, 2285, 2004, 3243, 987, 3416, 49796, 49796, 3038, 574,
	3036, 3033, 3450, 559, 5437, 49796, 1425, -1000, 1615, 4273,
	-1000, 49796, -1000, -1000, 49796, -1000, 2462, -1000, 1843, -1000,
	-1000, 3591, -1000, -1000, 11623, 11623, 3591, 1843, 1843, -1000,
	1928, -1000, 49796, -1000, -364, 559, 5437, 3445, 4882, 786,
	2727, -1000, 49796, -1000, -1000, -1000, 886, -1000, 1100, 908,
	49796, 2111, 1100, 2109, 3032, -1000, -1000, 49796, 49796, 49796,
	49796, -1000, -1000, 49796, -1000, 49796, 49796, 49796, 49796, 49796,
	41398, -1000, 49796, 49796, -1000, 49796, 2102, 49796, 2096, 1237,
	-1000, 1803, 1803, 1080, -1000, -1000, 633, -1000, 41398, 2369,
	2340, 2335, 2330, 2693, 2692, 2689, 1803, 1803, 2320, 2688,
	40752, 2686, 1274, 2318, 2306, 2305, 2235, 2685, 1339, -1000,
	2683, 2234, 2203, 2202, 49796, 3031, 2583, -1000, -1000, 2246,
	160, 1803, 416, 49796, 2003, 1998, 746, 610, 610, 575,
	-45, 24602, -1000, -1000, -1000, 49796, 37522, 37522, 37522, 37522,
	37522, 37522, -1000, 3313, 3268, 3030, -1000, 3280, 3270, 3281,
	3308, 3258, 49796, 37522, 3020, -1000, 40752, -1000, -1000, -1000,
	1856, 1800, 3786, 1101, 11623, 6416, -1000, -1000, 33, 2,
	-1000, -1000, -1000, -1000, 40106, 2681, 606, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3527, 49796, 49796, 922, 2847, 1499,
	-1000, -1000, -1000, 5437, 3013, 3013, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3013, 3013, 3019, -1000, -1000,
	3010, 3010, 3010, 3009, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3017, 3017, 3018, 3018, 3017, -1000,
	-1000, -1000, 3589, -1000, 1486, -1000, -1000, 1589, -1000, 2046,
	-347, 15526, 2022, 1954, -1000, 11623, 15526, 11623, -268, 386,
	-270, -1000, -1000, -1000, 2679, -1000, -1000, -1000, 2303, -1000,
	2299, -1000, 173, 186, 2094, -235, 9021, 486, 49796, -235,
	49796, 9021, -1000, 49796, 168, -370, -372, 163, 2672, 480,
	-235, 3527, 69, 11623, 3396, -1000, -1000, 49796, 2291, -1000,
	-1000, -1000, 3596, 40106, 2462, 1755, 39460, -1000, 330, -1000,
	259, 617, 2669, -1000, 1003, 128, 2668, 2667, -1000, -1000,
	-1000, -1000, 14219, 1712, -1000, -1000, -1000, 2310, 11623, 2844,
	-1000, 1175, 1175, 2394, 2840, 2839, -1000, 3013, 3013, -1000,
	3009, 3010, 3009, 1175, 1175, 2837, -1000, 3007, -1000, 3425,
	-1000, 2319, 2651, -1000, 2640, 2631, 11623, -1000, 2836, 3699,
	1714, -57, -203, 135, 135, -1000, -1000, -1000, -1000, 135,
	135, 135, 135, -1000, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 877, -111, -295, -115, -298,
	-1000, 2835, 1473, -1000, -1000, -1000, -1000, -1000, 4923, 1456,
	592, 592, 2667, 2666, -1000, 944, 2652, 1209, 49796, 2642,
	-306, 49796, 49796, -1000, 2641, -1000, -1000, 49796, 49796, 49796,
	50442, 708, 49796, 49796, 2638, -1000, 2637, 2833, 1442, -1000,
	-1000, 49796, -1000, -1000, -1000, 2832, 3444, 18776, 3429, 2325,
	-1000, -1000, -1000, 29770, 610, -1000, -1000, -1000, 736, 664,
	2289, 614, -1000, 49796, 611, 3364, 1993, 2633, 49796, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3416, -1000, 1403,
	-364, 541, 36230, 16182, -1000, 396, 49796, -1000, 49796, 18776,
	18776, 396, 544, 1917, -1000, 872, 1345, 141, 37522, 49796,
	-1000, 36876, 2829, -1000, -1000, 1357, 3591, -1000, 2310, 2310,
	-364, 3591, 3591, 1843, -1000, -1000, 544, -1000, 396, -1000,
	1799, 20068, 657, 504, 458, -1000, 770, -1000, -1000, 869,
	3405, 5437, -1000, 49796, -1000, 49796, -1000, 49796, 49796, 908,
	11623, 3405, 49796, 934, -1000, 1222, 540, 505, 888, 888,
	1440, -1000, 3425, -1000, -1000, 1439, -1000, -1000, -1000, -1000,
	49796, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 27186, 27186, 3499, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2632, 2629, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 49796, 1797,
	-1000, 1989, 2627, 2325, 29770, 1982, 1795, 2619, 2618, 610,
	-1000, 2617, 2615, -1000, 2285, 1978, 994, 49796, -1000, 1341,
	49796, 49796, -1000, 1467, -1000, 1974, 3221, 3241, 3221, -1000,
	3221, -1000, -1000, -1000, -1000, 3288, 2609, -1000, 3286, -1000,
	3272, -1000, -1000, -1000, -1000, 1467, -1000, -1000, -1000, -1000,
	-1000, 1101, -1000, 3524, 1100, 1100, 1100, 2828, -1000, -1000,
	-1000, -1000, 1408, 2826, -1000, -1000, -1000, 3617, -1000, -1000,
	-1000, -1000, -1000, -1000, 18130, 3415, 3583, 3577, 38814, -1000,
	-347, 2026, -1000, 2176, 183, 2156, 49796, -1000, -1000, -1000,
	2817, 2815, -246, 191, 3576, 3571, 1139, -1000, 2814, 1399,
	-235, -1000, -1000, 1370, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -375, -235, -1000, 1370, -1000, 173, -1000, -1000, 3374,
	-1000, -1000, 2462, -1000, 254, -1000, -1000, -1000, -1000, -1000,
	-1000, 238, -1000, 49796, -1000, 1388, 127, -1000, 2310, -1000,
	-1000, -1000, -1000, -1000, 5174, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2608, -1000, -1000, 11623, -1000,
	-1000, -1000, 2589, -1000, -1000, 11623, 2810, 2606, 2808, 2601,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3610, -1000, 3567,
	1768, 2806, 2804, 1757, 2803, 2802, -1000, 11623, 2798, 4923,
	1091, 2598, 1091, -1000, -1000, 435, 29124, 49796, 3593, -1000,
	49796, 931, -364, 2593, -1000, -1000, 49796, 2246, 705, 2246,
	758, 49796, -315, -1000, -125, 1390, 5437, 1001, 396, 2797,
	1372, -1000, -1000, -1000, -1000, 396, -1000, 2592, 261, -1000,
	-1000, -1000, -1000, 2288, -1000, -1000, 2193, 1641, 273, -1000,
	-1000, -1000, -1000, -1000, -1000, 2245, 49796, 38168, 2249, 1945,
	-365, -1000, 2997, -1000, 1803, 1803, 1803, 931, 49796, 1754,
	-1000, 1803, 1803, 2796, -1000, -1000, 931, 2794, 2793, -140,
	880, 1963, 1938, -1000, 2279, 28478, 37522, 36876, 1434, -1000,
	1404, -1000, -1000, -1000, -1000, -1000, -1000, 3591, 880, -1000,
	618, 2273, 14219, 2993, 14219, 2991, 674, 2989, 1753, -1000,
	49796, -1000, -1000, 49796, 4218, 2987, -1000, 2985, 3227, 589,
	2983, 2982, 49796, 2572, -1000, 3405, 49796, 853, 3413, -1000,
	-1000, -1000, 472, -1000, -1000, -1000, 724, -1000, 49796, -1000,
	49796, -1000, 1678, -1000, 27186, -1000, -1000, 1739, -1000, 2583,
	2581, -1000, -1000, 261, 2579, 6416, -1000, -1000, -1000, -1000,
	-1000, 3364, 2578, 2245, 49796, -1000, 49796, 1341, 1341, 3610,
	49796, 9021, -1000, -1000, 11623, 2980, -1000, 11623, -1000, -1000,
	-1000, 2792, -1000, -1000, -1000, -1000, -1000, 2979, 3347, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2904, -1000, 11623, 12272,
	-1000, 900, 15526, -271, 381, -1000, -1000, -1000, -248, 2575,
	-1000, -1000, 3561, 2574, 2440, 49796, -1000, -1000, 1370, -1000,
	1370, -246, -1000, -1000, 1357, -1000, -1000, 1213, 820, -1000,
	2790, 274, -1000, 2528, -1000, 2301, 135, -1000, 135, -1000,
	313, 11623, -1000, 2573, -1000, -1000, -1000, 2570, -1000, -1000,
	2282, -1000, 2784, -1000, 2569, -1000, -1000, 49796, -1000, -1000,
	1207, 2568, -1000, 419, 931, -366, -1000, 2563, 2246, 2561,
	2246, 49796, 702, -1000, 2558, 2555, -1000, -1000, 5437, -141,
	-140, 18776, -141, -1000, -1000, 394, 428, -1000, -1000, 2192,
	669, -1000, -1000, 2554, 672, -1000, 1341, -1000, 1944, 2123,
	2487, 34292, 27186, 27832, 2547, -1000, -1000, -1000, 36230, 2904,
	2904, 4420, -1000, 342, 55130, -1000, 2977, 1254, 1835, -1000,
	2272, -1000, 2270, -1000, 3591, 1434, 138, -1000, -1000, 1741,
	-1000, 1254, 2727, 3560, -1000, 3513, 49796, 3025, 49796, 2974,
	1942, 14219, -1000, 869, 3328, -1000, -1000, 4218, -1000, -1000,
	2120, 14219, -1000, -1000, 2546, 27832, 1092, 1932, 1905, 1120,
	2970, -1000, 774, 3616, -1000, -1000, -1000, 1045, 2967, -1000,
	2093, 2076, -1000, 49796, -1000, 34292, 34292, 866, 866, 34292,
	34292, 2966, 888, -1000, -1000, 14219, -1000, -1000, 1803, -1000,
	-1000, -1000, 1803, 1667, -1000, -1000, -1000, -1000, -1000, -1000,
	2249, -1000, -1000, 1340, -1000, 3541, -1000, -1000, 2310, 49796,
	2310, -1000, 35584, -1000, 3559, 3558, -1000, 2310, 253, 249,
	2965, 2951, -1000, -347, 49796, 49796, -250, 2268, -1000, 2543,
	205, -1000, -1000, 1328, -248, -256, 98, 27186, 1887, -1000,
	2783, 365, -152, -1000, -1000, -1000, -1000, 2776, -1000, 963,
	-1000, -1000, -1000, 1323, 2774, 2767, -1000, -1000, -1000, -1000,
	49796, -1000, 49796, -1000, 2471, -315, 2541, -315, 2529, 693,
	2246, -1000, -1000, -126, -1000, -1000, 439, -1000, -1000, -1000,
	629, 2455, -1000, -1000, 406, -1000, -1000, -1000, 2245, 2527,
	-1000, -1000, 115, -1000, 1819, 1732, -1000, -1000, -1000, -1000,
	-1000, -1000, 868, -1000, 396, 55036, -1000, 1588, -1000, 1213,
	868, 33000, 678, 308, -1000, 2265, -1000, -1000, 3610, -1000,
	676, -1000, 619, -1000, 1725, -1000, 1701, 34938, 2264, 3011,
	-1000, 54987, 1002, -1000, -1000, 2341, -1000, -1000, -1000, -1000,
	-1000, -1000, 2526, 2525, -1000, -1000, -1000, -1000, -1000, 2262,
	2947, 144, 3496, 2521, -1000, -1000, 2946, 1688, 1683, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1674,
	1665, 34292, -1000, -1000, 2341, 2261, 27186, 1803, -1000, -1000,
	1663, 1660, -1000, -1000, -1000, -1000, -1000, -324, 2942, 11623,
	11623, -1000, -1000, -1000, 2941, -1000, -1000, 3556, -250, -258,
	2520, 167, 203, -1000, 2510, -1000, -129, 3323, -162, -1000,
	-1000, 1041, -237, 154, 142, 139, -1000, -1000, -1000, 11623,
	-1000, -1000, -1000, -1000, 114, -1000, 1805, -1000, -315, -1000,
	-315, 2246, 2488, 49796, 749, -1000, -1000, -1000, -1000, 234,
	-1000, -1000, -1000, -1000, -1000, -1000, 2487, 2479, -1000, 609,
	3555, -1000, 55130, -1000, 1803, -1000, 609, 1640, -1000, 1803,
	1803, -1000, 556, -1000, 1834, -1000, 2242, -1000, 3541, -1000,
	549, -1000, 612, -1000, -1000, -1000, 1629, -1000, -1000, -1000,
	54987, 654, -1000, 860, 2940, -1000, -1000, 2755, 11623, 2939,
	1803, 2753, -118, 34292, 3226, 3222, 3217, 2973, 1581, -1000,
	-1000, 27186, -1000, -1000, 33646, -1000, 2936, 1566, 1537, 49796,
	2440, -1000, -1000, 2473, -1000, 918, 185, 203, -1000, 3553,
	178, 3552, 3550, 1302, 3321, -1000, -1000, 2064, -1000, 152,
	145, 124, -1000, -1000, -1000, -1000, -315, 2471, 2469, -1000,
	-1000, 2468, -315, 577, -1000, 328, -1000, -1000, -1000, 707,
	-1000, 3548, 786, -1000, 27186, -1000, -1000, 33000, 2904, 2904,
	-1000, -1000, 2233, -1000, -1000, -1000, -1000, 2230, -1000, -1000,
	-1000, 1524, -1000, 49796, 1049, 8372, -1000, 2126, -1000, 49796,
	-1000, 3240, -1000, 309, 1519, 707, 866, 707, 866, 707,
	866, 707, 866, 326, -1000, -1000, -1000, 1466, 11623, -1000,
	-1000, 1435, -1000, -1000, -1000, 2935, 2229, 191, 192, 3547,
	-1000, 2440, 3546, 2440, 2440, -1000, 164, -144, 1041, -1000,
	-1000, -1000, -1000, -1000, -1000, -315, -1000, 2460, -1000, -1000,
	-1000, -1000, 1803, 1803, 2449, 2446, 498, -1000, -1000, 1803,
	1803, 1803, -1000, 32354, 657, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 654, 55130, -1000, 8372, 1397, -1000, 2310, -1000,
	888, -1000, -1000, 3239, 3014, 3604, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2843, 2750, -1000, 49796,
	3494, 26540, 169, -1000, -1000, -1000, 2443, -1000, 2440, -1000,
	-1000, 1790, -160, -1000, -1000, -291, 2228, 2208, -1000, -1000,
	49796, 2181, 2178, 2177, -1000, 49796, 618, -1000, 55130, 1384,
	-1000, 8372, -1000, -1000, 3615, -1000, 3613, 1141, 1141, 707,
	707, 707, 707, 11623, -1000, -1000, -1000, 49796, -1000, 1348,
	-1000, -1000, -1000, 1391, -1000, -1000, -1000, -1000, 2404, -163,
	-1000, -1000, 2351, -1000, -1000, -1000, -1000, -1000, -1000, 1343,
	2727, -1000, -1000, -1000, -1000, -1000, 2161, 772, -1000, 2533,
	1279, -1000, 1788, -1000, 31708, 49796, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 49796, 7723, -1000, 1354, -1000,
	-1000, 2310, 49796, -1000,
}

var yyPgo = [...]int{
	0, 180, 3644, 262, 178, 4298, 86, 255, 289, 281,
	251, 250, 4296, 4295, 4294, 3386, 3380, 4293, 4291, 4290,
	4285, 4284, 4283, 4281, 4280, 4279, 4278, 4277, 4275, 4274,
	4272, 4268, 4267, 4266, 4265, 4264, 4263, 4261, 4259, 4258,
	4257, 4256, 4255, 4254, 4253, 4252, 4251, 247, 4248, 4247,
	4246, 4245, 4243, 4242, 4235, 4229, 4228, 4222, 4216, 4215,
	4214, 4202, 4197, 4196, 4195, 4194, 4190, 4189, 4188, 4187,
	4186, 4182, 4179, 4176, 4175, 4174, 4173, 4170, 4169, 4168,
	4167, 4166, 4165, 4164, 4162, 244, 4161, 3375, 4160, 4159,
	4155, 4154, 4153, 4152, 4151, 4150, 4147, 4138, 4137, 364,
	4135, 4134, 4133, 4132, 4131, 4130, 4129, 4128, 4127, 4126,
	4124, 4123, 4122, 298, 4120, 4118, 4117, 4116, 261, 4115,
	254, 4114, 174, 134, 4113, 4111, 4110, 4108, 4107, 4105,
	4104, 4103, 4102, 4100, 4097, 4095, 4093, 4092, 237, 189,
	71, 4091, 50, 4090, 4089, 216, 4088, 153, 4087, 146,
	4085, 4084, 4083, 4080, 4079, 4078, 4077, 4076, 4075, 4074,
	4073, 4072, 4067, 4066, 4063, 4061, 4059, 4055, 4049, 4048,
	4047, 4046, 4044, 4042, 44, 4041, 260, 4040, 76, 4039,
	177, 4038, 75, 4037, 4036, 85, 93, 132, 246, 1622,
	266, 4034, 190, 4033, 4030, 242, 176, 4027, 4025, 265,
	4023, 161, 224, 158, 101, 118, 4020, 136, 4019, 259,
	49, 39, 240, 148, 4011, 4010, 57, 162, 130, 4009,
	217, 108, 119, 4006, 4004, 143, 4003, 234, 185, 4000,
	110, 3999, 3997, 3993, 20, 3991, 3990, 199, 192, 3989,
	3988, 102, 3985, 3983, 59, 137, 3980, 78, 124, 171,
	122, 3979, 2656, 129, 91, 3978, 120, 114, 3977, 90,
	3976, 3975, 3974, 3969, 194, 3968, 3967, 138, 68, 3965,
	3964, 3963, 69, 3961, 80, 3959, 60, 3958, 58, 3957,
	3956, 3955, 3953, 3952, 3951, 3950, 3948, 3947, 3946, 3945,
	3944, 56, 3940, 3939, 3936, 3934, 7, 12, 14, 3932,
	27, 3928, 173, 3927, 3924, 169, 3923, 196, 3922, 3921,
	98, 96, 3920, 97, 167, 3919, 30, 28, 70, 3916,
	3915, 3914, 209, 3912, 3911, 3910, 270, 3909, 3908, 3907,
	164, 3902, 3901, 3900, 637, 3899, 3898, 3896, 3889, 3887,
	3886, 276, 3884, 1, 215, 40, 3883, 139, 145, 3881,
	37, 31, 3880, 46, 123, 203, 133, 104, 3879, 3878,
	3877, 552, 212, 103, 51, 0, 105, 219, 159, 3876,
	3873, 3872, 263, 3871, 235, 239, 231, 249, 257, 252,
	3870, 3869, 61, 3868, 165, 33, 52, 141, 82, 23,
	264, 3866, 1645, 9, 182, 3853, 213, 3852, 8, 16,
	211, 152, 3838, 3836, 35, 267, 3835, 3834, 3833, 131,
	3828, 3818, 202, 79, 3816, 3813, 3812, 3811, 3810, 55,
	3809, 187, 17, 3806, 142, 3803, 248, 3802, 188, 151,
	183, 181, 157, 221, 226, 84, 81, 3801, 1880, 160,
	106, 15, 3800, 222, 3796, 198, 126, 3794, 95, 3792,
	241, 269, 205, 3791, 186, 10, 48, 38, 29, 43,
	11, 1458, 208, 3790, 3789, 22, 45, 3787, 53, 3785,
	18, 3784, 3782, 42, 3781, 62, 5, 3780, 3779, 19,
	21, 3777, 36, 204, 184, 127, 99, 63, 3776, 3774,
	135, 156, 3772, 144, 163, 154, 3771, 83, 3770, 3769,
	3768, 3765, 3141, 253, 3764, 3763, 3762, 3759, 3758, 3756,
	3753, 3751, 218, 3750, 113, 41, 3749, 3747, 3745, 3744,
	88, 149, 3743, 3741, 3737, 3732, 32, 147, 3731, 13,
	3730, 26, 24, 34, 3729, 107, 3728, 3, 191, 3727,
	3726, 4, 3725, 3724, 2, 3723, 3721, 121, 3719, 100,
	25, 170, 111, 3717, 3712, 94, 214, 150, 3711, 3710,
	109, 238, 200, 3709, 228, 232, 256, 3707, 210, 3706,
	3705, 3704, 3703, 3702, 1276, 3699, 3698, 233, 65, 92,
	3697, 220, 115, 3696, 3695, 89, 168, 117, 125, 54,
	87, 3691, 116, 206, 3690, 197, 3689, 258, 3688, 3687,
	112, 3686, 3685, 3684, 3683, 193, 3681, 3680, 195, 223,
	3679, 3677, 268, 3676, 3674, 3673, 3667, 3652, 3651, 3650,
	3649, 3646, 3636, 273, 207, 3634,
}

//line mysql_sql.y:13071
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectOptionUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectOptionsUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) toAccountOptUnion() *tree.ToAccountOpt {
	v, _ := st.union.(*tree.ToAccountOpt)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 618, 621, 621, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	128, 128, 356, 356, 357, 357, 130, 352, 352, 351,
	351, 131, 132, 133, 597, 597, 134, 135, 165, 596,
	596, 596, 596, 596, 167, 167, 167, 167, 167, 167,
	167, 473, 129, 129, 129, 129, 129, 171, 171, 171,
	171, 171, 127, 603, 603, 603, 604, 604, 124, 154,
	153, 156, 156, 155, 155, 152, 152, 148, 151, 151,
	150, 150, 149, 144, 146, 146, 145, 147, 147, 125,
	113, 126, 546, 546, 545, 545, 544, 544, 498, 498,
	499, 499, 343, 343, 343, 543, 543, 543, 542, 542,
	541, 541, 540, 540, 538, 538, 539, 537, 536, 536,
	536, 534, 534, 534, 530, 530, 532, 531, 531, 533,
	525, 525, 528, 528, 526, 526, 526, 526, 529, 524,
	524, 524, 523, 523, 112, 112, 112, 440, 440, 111,
	111, 454, 454, 454, 454, 454, 452, 452, 452, 452,
	452, 452, 451, 451, 450, 450, 455, 455, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 100,
	100, 100, 100, 100, 100, 100, 107, 105, 105, 105,
	106, 609, 609, 608, 608, 610, 610, 610, 610, 611,
	611, 103, 103, 103, 104, 449, 449, 449, 101, 102,
	102, 439, 439, 444, 444, 443, 443, 443, 443, 443,
	443, 443, 443, 443, 443, 443, 443, 443, 448, 448,
	448, 446, 446, 445, 445, 447, 447, 91, 91, 91,
	91, 91, 91, 95, 96, 97, 97, 97, 97, 94,
	93, 438, 438, 438, 438, 438, 438, 438, 438, 438,
	92, 92, 92, 92, 92, 92, 86, 86, 86, 86,
	86, 85, 85, 87, 87, 436, 436, 435, 108, 108,
	109, 606, 606, 605, 607, 607, 607, 607, 110, 116,
	116, 116, 116, 116, 116, 116, 116, 115, 115, 115,
	118, 118, 117, 119, 99, 99, 99, 99, 99, 99,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 571, 571, 571, 571,
	572, 572, 370, 371, 622, 373, 369, 369, 369, 567,
	567, 568, 569, 570, 570, 570, 114, 14, 226, 226,
	472, 472, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 13, 84, 89, 89, 90, 306, 306, 307,
	301, 301, 308, 308, 170, 309, 309, 309, 314, 314,
	315, 315, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 286, 286, 286, 281, 281, 281,
	281, 281, 281, 281, 282, 282, 283, 283, 284, 284,
	284, 284, 285, 285, 362, 362, 310, 310, 310, 312,
	312, 311, 305, 303, 303, 303, 303, 303, 303, 303,
	304, 304, 304, 304, 304, 313, 313, 82, 88, 88,
	88, 88, 584, 584, 83, 83, 83, 595, 595, 502,
	502, 384, 384, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 507,
	508, 380, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	79, 80, 81, 54, 57, 58, 169, 172, 172, 172,
	172, 53, 53, 53, 425, 425, 52, 623, 623, 355,
	355, 67, 66, 56, 68, 69, 70, 71, 72, 73,
	51, 65, 65, 65, 65, 65, 65, 65, 65, 76,
	519, 519, 625, 625, 625, 74, 75, 501, 501, 501,
	64, 63, 62, 61, 60, 60, 50, 50, 49, 49,
	55, 160, 59, 161, 161, 377, 377, 377, 379, 379,
	375, 624, 624, 468, 468, 378, 378, 48, 48, 48,
	48, 77, 376, 376, 354, 374, 374, 374, 12, 12,
	10, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 26, 27,
	29, 433, 433, 430, 28, 20, 19, 19, 23, 22,
	18, 18, 21, 24, 25, 25, 9, 9, 9, 9,
	15, 15, 16, 196, 196, 253, 253, 578, 578, 574,
	574, 575, 575, 575, 576, 576, 577, 577, 120, 513,
	513, 513, 513, 513, 513, 8, 8, 221, 221, 512,
	512, 512, 512, 512, 512, 437, 437, 437, 556, 556,
	556, 557, 220, 220, 213, 213, 514, 514, 401, 558,
	558, 522, 522, 521, 521, 520, 520, 218, 218, 219,
	219, 199, 199, 139, 139, 527, 527, 527, 527, 535,
	535, 497, 497, 291, 291, 345, 345, 346, 346, 186,
	186, 187, 187, 187, 187, 187, 187, 612, 612, 613,
	614, 615, 615, 616, 616, 616, 617, 617, 617, 617,
	617, 564, 564, 566, 566, 565, 217, 217, 211, 211,
	212, 212, 212, 210, 210, 209, 208, 208, 207, 205,
	205, 205, 206, 206, 206, 225, 225, 189, 189, 189,
	188, 188, 188, 188, 188, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 190, 193, 193,
	194, 194, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 323, 323, 324, 324, 324, 324, 324, 137,
	137, 506, 506, 322, 322, 191, 191, 192, 192, 192,
	192, 321, 321, 320, 204, 204, 203, 202, 202, 202,
	197, 197, 197, 197, 197, 198, 332, 332, 331, 331,
	330, 330, 330, 330, 333, 123, 136, 136, 138, 224,
	224, 215, 214, 329, 328, 328, 328, 328, 223, 223,
	222, 222, 216, 216, 201, 201, 201, 201, 327, 200,
	325, 602, 602, 601, 601, 600, 598, 598, 598, 599,
	599, 599, 599, 548, 548, 548, 548, 548, 363, 363,
	363, 368, 368, 366, 366, 366, 366, 366, 372, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 39, 236, 237, 40, 238, 238, 239, 239, 240,
	240, 241, 242, 243, 243, 243, 243, 417, 417, 38,
	227, 227, 228, 228, 229, 229, 230, 231, 231, 231,
	235, 232, 233, 233, 620, 620, 619, 37, 37, 30,
	175, 175, 176, 176, 176, 178, 178, 287, 287, 287,
	177, 177, 179, 179, 179, 579, 581, 581, 583, 582,
	582, 582, 585, 585, 585, 585, 585, 586, 586, 586,
	586, 587, 587, 31, 157, 157, 182, 182, 162, 590,
	590, 590, 589, 589, 591, 591, 592, 592, 349, 349,
	350, 350, 173, 174, 174, 164, 159, 181, 181, 181,
	181, 181, 183, 183, 255, 255, 158, 163, 166, 168,
	580, 588, 588, 588, 434, 434, 431, 432, 432, 429,
	428, 428, 428, 594, 594, 593, 593, 593, 364, 364,
	32, 424, 424, 426, 427, 427, 427, 418, 418, 418,
	418, 36, 422, 422, 423, 423, 423, 423, 423, 423,
	423, 423, 423, 423, 423, 419, 419, 421, 421, 416,
	416, 416, 416, 416, 416, 416, 416, 35, 35, 180,
	180, 415, 415, 412, 412, 234, 234, 410, 410, 411,
	411, 409, 409, 409, 413, 413, 43, 78, 44, 45,
	46, 42, 414, 414, 184, 184, 184, 184, 185, 185,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 141, 140, 140, 140, 140, 140, 143, 143, 348,
	348, 347, 347, 142, 288, 288, 41, 266, 266, 489,
	489, 484, 484, 484, 484, 484, 504, 504, 504, 485,
	485, 485, 486, 486, 486, 488, 488, 488, 487, 487,
	487, 487, 487, 503, 503, 505, 505, 505, 456, 456,
	457, 457, 457, 460, 460, 476, 476, 477, 477, 475,
	475, 482, 482, 481, 481, 480, 480, 479, 479, 478,
	478, 478, 478, 471, 471, 470, 470, 458, 458, 458,
	458, 458, 459, 459, 459, 469, 469, 474, 474, 319,
	319, 318, 318, 274, 274, 275, 275, 317, 317, 272,
	272, 273, 273, 273, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 554,
	554, 555, 277, 277, 289, 289, 289, 289, 289, 289,
	276, 276, 278, 278, 254, 254, 252, 252, 244, 244,
	244, 244, 244, 244, 245, 245, 246, 246, 247, 247,
	247, 251, 251, 250, 250, 250, 250, 248, 248, 249,
	249, 249, 249, 249, 249, 442, 442, 551, 551, 552,
	552, 547, 547, 547, 550, 550, 550, 550, 550, 550,
	550, 550, 553, 553, 553, 549, 549, 256, 342, 342,
	342, 365, 365, 365, 365, 367, 341, 341, 341, 271,
	271, 270, 270, 268, 268, 268, 268, 268, 268, 268,
	268, 268, 268, 268, 268, 268, 268, 268, 268, 268,
	268, 268, 268, 268, 268, 441, 441, 381, 381, 382,
	382, 300, 299, 299, 299, 299, 299, 297, 298, 296,
	296, 296, 296, 296, 293, 293, 292, 292, 292, 294,
	294, 294, 294, 294, 420, 420, 290, 290, 280, 280,
	280, 279, 279, 279, 483, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 295, 339, 339, 339, 340,
	340, 340, 340, 340, 340, 340, 340, 391, 391, 397,
	397, 563, 563, 562, 257, 257, 257, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 267, 267, 267, 465,
	465, 465, 465, 466, 466, 466, 466, 467, 467, 467,
	463, 463, 464, 464, 402, 403, 403, 510, 510, 511,
	511, 461, 461, 462, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 518, 518, 518,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 573, 573, 573, 559,
	559, 559, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 561, 561, 561, 561, 561, 561,
	561, 561, 561, 561, 561, 561, 561, 561, 561, 561,
	561, 337, 337, 337, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 404, 404, 405, 405, 515, 515, 515, 515,
	515, 515, 516, 516, 517, 517, 517, 517, 509, 509,
	509, 509, 509, 509, 509, 509, 509, 509, 509, 509,
	509, 509, 509, 509, 509, 509, 509, 509, 509, 509,
	509, 509, 509, 509, 509, 509, 509, 509, 389, 334,
	334, 334, 406, 398, 398, 399, 399, 400, 400, 392,
	392, 392, 392, 392, 392, 393, 393, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 394,
	394, 396, 396, 408, 408, 408, 407, 407, 407, 407,
	407, 407, 407, 269, 269, 269, 269, 386, 386, 386,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 259, 259, 259, 259, 263, 263, 265, 265,
	265, 265, 265, 265, 265, 265, 265, 265, 265, 265,
	265, 265, 264, 264, 264, 264, 264, 262, 262, 262,
	262, 262, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 121, 122, 122, 261, 344, 344, 490, 490, 493,
	493, 491, 491, 492, 494, 494, 494, 495, 495, 495,
	496, 496, 496, 500, 500, 353, 353, 353, 361, 361,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	8, 8, 0, 2, 0, 2, 12, 1, 3, 0,
	3, 3, 3, 4, 1, 2, 4, 5, 6, 1,
	2, 1, 2, 3, 10, 10, 11, 11, 12, 8,
	13, 1, 5, 6, 8, 10, 9, 5, 7, 9,
	8, 6, 4, 0, 1, 1, 0, 1, 5, 2,
	2, 6, 9, 6, 9, 4, 7, 8, 0, 1,
	1, 2, 4, 6, 1, 2, 4, 0, 2, 10,
	11, 2, 0, 2, 1, 3, 3, 3, 0, 2,
	0, 2, 1, 3, 5, 0, 2, 3, 1, 3,
	1, 1, 1, 3, 1, 1, 1, 1, 0, 3,
	3, 0, 3, 3, 0, 1, 3, 0, 1, 3,
	0, 2, 1, 2, 3, 4, 3, 3, 1, 0,
	1, 1, 0, 1, 8, 5, 7, 0, 3, 8,
	5, 1, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 4, 1, 3, 1, 2,
	2, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	2, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	1, 1, 2, 2, 1, 1, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 3, 4, 4,
	5, 1, 3, 3, 1, 2, 2, 2, 1, 2,
	2, 3, 4, 4, 6, 1, 1, 1, 2, 4,
	6, 1, 4, 1, 3, 3, 4, 4, 4, 4,
	3, 3, 2, 4, 4, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 2, 3, 3, 4, 5, 4, 2,
	2, 0, 1, 4, 2, 4, 1, 5, 3, 2,
	1, 2, 2, 4, 4, 5, 2, 1, 3, 4,
	4, 1, 2, 9, 7, 1, 3, 3, 1, 1,
	3, 1, 3, 2, 1, 2, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 4, 4,
	2, 4, 3, 3, 1, 1, 1, 1, 1, 1,
	2, 3, 4, 7, 2, 3, 3, 4, 3, 4,
	4, 5, 3, 4, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 1, 1, 1, 1, 6, 4, 1, 1,
	0, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 10, 7, 4, 4, 3, 1, 3, 3,
	1, 3, 1, 6, 7, 3, 3, 3, 1, 1,
	1, 3, 2, 4, 5, 5, 6, 5, 5, 3,
	2, 2, 1, 3, 4, 3, 7, 5, 8, 2,
	2, 1, 3, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 0, 1, 2, 1,
	3, 2, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 6, 3, 3, 3, 1, 1, 7, 7, 7,
	8, 8, 0, 4, 7, 6, 6, 0, 3, 0,
	2, 0, 1, 1, 1, 1, 4, 2, 2, 3,
	3, 4, 5, 3, 4, 4, 2, 2, 2, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 4, 3, 3, 3, 4, 5, 6,
	5, 2, 5, 5, 0, 2, 7, 0, 1, 0,
	1, 5, 5, 3, 3, 2, 4, 4, 4, 4,
	4, 1, 1, 1, 3, 3, 1, 1, 1, 6,
	0, 1, 1, 1, 1, 5, 5, 0, 1, 1,
	3, 3, 3, 4, 7, 7, 5, 4, 7, 8,
	3, 3, 2, 3, 4, 0, 2, 2, 0, 2,
	2, 1, 1, 1, 1, 0, 1, 5, 5, 6,
	4, 3, 1, 3, 1, 1, 3, 5, 2, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 4,
	4, 1, 3, 1, 4, 6, 6, 4, 4, 4,
	4, 4, 3, 6, 3, 5, 1, 1, 2, 2,
	11, 8, 9, 1, 3, 2, 4, 0, 2, 0,
	1, 1, 1, 1, 0, 1, 0, 1, 4, 2,
	1, 5, 4, 4, 2, 5, 5, 1, 3, 2,
	1, 5, 4, 4, 2, 0, 5, 4, 0, 1,
	3, 3, 1, 3, 1, 3, 1, 3, 4, 0,
	1, 0, 1, 1, 3, 1, 1, 0, 4, 1,
	3, 2, 1, 0, 8, 0, 4, 7, 4, 0,
	2, 0, 2, 0, 2, 0, 4, 1, 3, 1,
	1, 6, 4, 5, 7, 4, 5, 0, 1, 3,
	8, 0, 6, 0, 4, 6, 1, 1, 1, 1,
	1, 2, 3, 1, 3, 6, 0, 3, 0, 1,
	2, 4, 4, 0, 1, 3, 1, 3, 3, 0,
	1, 1, 0, 2, 2, 0, 2, 3, 3, 3,
	1, 3, 3, 3, 3, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 7, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 4, 7, 6, 6, 3,
	5, 0, 2, 0, 2, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 3, 1, 1, 1, 1,
	4, 4, 4, 3, 4, 3, 2, 2, 2, 2,
	2, 3, 2, 3, 2, 4, 1, 3, 4, 0,
	2, 1, 3, 1, 1, 2, 2, 3, 0, 1,
	2, 4, 1, 3, 1, 3, 2, 3, 1, 4,
	3, 0, 1, 1, 2, 5, 2, 2, 2, 0,
	2, 3, 3, 0, 1, 3, 1, 3, 0, 1,
	2, 1, 1, 0, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 1, 9, 1, 3, 0, 1, 1,
	3, 1, 3, 0, 1, 1, 1, 0, 2, 14,
	1, 3, 0, 1, 1, 3, 1, 1, 2, 4,
	1, 1, 1, 1, 0, 1, 2, 9, 9, 7,
	1, 2, 3, 3, 3, 0, 4, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 4, 1,
	1, 1, 3, 3, 4, 3, 3, 0, 1, 1,
	1, 0, 2, 7, 8, 10, 2, 2, 8, 0,
	3, 3, 0, 3, 0, 3, 0, 5, 1, 3,
	0, 3, 3, 0, 2, 9, 8, 0, 2, 2,
	3, 3, 0, 2, 0, 2, 4, 4, 4, 5,
	1, 0, 2, 2, 1, 3, 2, 1, 3, 2,
	1, 3, 2, 0, 1, 3, 4, 3, 1, 1,
	4, 1, 3, 1, 1, 1, 1, 0, 1, 1,
	1, 11, 0, 2, 3, 3, 2, 2, 3, 1,
	1, 3, 3, 3, 1, 1, 3, 3, 4, 0,
	2, 2, 2, 2, 2, 2, 2, 6, 8, 0,
	4, 1, 1, 0, 3, 0, 1, 0, 1, 1,
	2, 4, 4, 4, 0, 1, 8, 2, 4, 4,
	4, 9, 0, 2, 8, 9, 5, 5, 0, 3,
	11, 9, 11, 8, 6, 9, 7, 10, 7, 6,
	8, 2, 2, 9, 4, 5, 3, 0, 4, 1,
	3, 0, 3, 6, 0, 2, 10, 0, 2, 0,
	2, 0, 3, 2, 4, 3, 0, 2, 1, 0,
	2, 3, 0, 2, 3, 0, 2, 1, 0, 3,
	2, 4, 3, 0, 1, 0, 1, 1, 0, 6,
	0, 3, 5, 0, 4, 0, 3, 1, 3, 4,
	5, 0, 3, 1, 3, 2, 3, 1, 2, 0,
	4, 6, 5, 0, 2, 0, 2, 4, 5, 4,
	5, 1, 5, 6, 5, 0, 3, 0, 1, 1,
	3, 3, 3, 0, 4, 1, 3, 3, 3, 0,
	1, 1, 3, 2, 3, 3, 3, 4, 4, 3,
	3, 3, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 5, 4, 1,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 0, 5,
	5, 5, 5, 6, 0, 1, 1, 3, 1, 1,
	1, 1, 1, 7, 9, 7, 9, 2, 1, 7,
	9, 7, 9, 8, 5, 0, 1, 0, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 3, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 2, 1, 2, 2, 1, 1, 2, 2,
	2, 3, 3, 2, 2, 1, 5, 6, 4, 1,
	1, 1, 5, 4, 1, 1, 2, 0, 1, 1,
	2, 5, 0, 1, 1, 2, 2, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 2, 2, 2, 0,
	4, 7, 3, 3, 0, 3, 0, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 3, 5, 2, 2, 2, 2, 4, 1, 1,
	2, 5, 6, 8, 6, 6, 6, 1, 1, 1,
	1, 1, 1, 3, 9, 1, 4, 4, 4, 7,
	9, 7, 7, 7, 9, 7, 7, 0, 2, 0,
	1, 1, 2, 4, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 2, 2, 2, 0, 1, 1, 1,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 5, 0, 1, 3, 0, 1, 0, 2, 0,
	2, 0, 1, 6, 8, 8, 6, 6, 5, 5,
	5, 6, 6, 6, 6, 5, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 1, 1, 1,
	4, 4, 6, 8, 6, 4, 5, 4, 4, 4,
	3, 4, 6, 6, 7, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 8, 4, 2, 3, 2, 4, 2,
	2, 4, 6, 2, 2, 4, 6, 4, 2, 4,
	4, 4, 0, 1, 2, 3, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 3, 0, 1, 1, 3, 1, 3, 3,
	3, 3, 3, 2, 1, 1, 1, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 1, 3, 4,
	4, 5, 4, 5, 3, 4, 5, 6, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 2, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 4,
	1, 2, 3, 5, 1, 1, 3, 0, 1, 0,
	3, 0, 3, 3, 0, 3, 5, 0, 3, 5,
	0, 1, 1, 0, 1, 1, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -618, -621, -2, -5, 644, -1, -4, -122, -91,
	-7, -14, -124, -125, -8, -120, -9, -10, -12, -98,
	-115, -117, -119, -118, -47, -11, -114, -85, -86, -100,
	-108, -111, -112, -113, -126, -121, -123, -186, -127, -128,
	-129, -171, -132, -134, -135, -184, 634, -92, -93, -94,
	-95, -96, -97, -33, -32, -31, -30, -157, -162, -165,
	-167, -130, 567, 640, 470, 14, 519, -15, -16, -564,
	-17, 267, -369, -370, -371, -373, -622, -48, -49, -50,
	-60, -61, -62, -63, -64, -74, -75, -76, -51, -52,
	-53, -56, -54, -67, -66, -68, -69, -70, -71, -72,
	-73, -55, -59, -160, -161, -77, -57, -78, -58, -169,
	-172, -131, -79, -80, -81, -83, -82, -88, -84, -89,
	-159, -164, -13, -170, -90, 241, -87, 77, -101, -102,
	-103, -104, -105, -106, -107, -109, -110, 394, 400, 457,
	633, 62, -187, -189, 663, 664, 667, 554, 557, 335,
	163, 164, 166, 167, 171, 174, -34, -35, -36, -37,
	-38, -39, -41, -40, -42, -43, -44, -45, -46, 237,
	16, 562, -18, -21, -19, -22, -20, -28, -29, -27,
	-24, -26, -158, -25, -163, -23, -166, -168, -133, 262,
	261, 39, 328, 329, 330, 398, 260, 238, 240, 15,
	32, 43, 373, -188, 86, 555, 239, -190, 13, 669,
	-6, -3, -2, -144, -148, -152, -155, -156, -153, -154,
	-4, -122, 121, 252, 635, -365, 390, 636, 638, 637,
	89, 97, -358, -360, 470, 267, 394, 400, 633, 664,
	667, 554, 557, 569, 570, 571, 572, 573, 574, 575,
	576, 578, 579, 580, 581, 582, 583, 584, 594, 595,
	585, 586, 587, 588, 589, 590, 591, 592, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 605, 606, 607,
	608, 609, 522, 619, 620, 621, 622, 550, 577, 613,
	614, 615, 616, 371, 372, 559, 279, 303, 425, 309,
	316, 369, 163, 183, 177, 206, 197, 555, 172, 283,
	321, 284, 96, 166, 505, 111, 482, 454, 169, 298,
	300, 302, 551, 552, 384, 305, 549, 304, 306, 308,
	553, 285, 374, 193, 188, 297, 281, 186, 286, 41,
	287, 367, 366, 211, 288, 289, 564, 478, 370, 484,
	313, 53, 452, 187, 479, 301, 481, 215, 219, 496,
	357, 497, 181, 182, 486, 499, 210, 213, 214, 259,
	363, 364, 44, 561, 271, 500, 217, 659, 209, 204,
	508, 317, 315, 368, 208, 180, 203, 282, 66, 221,
	220, 222, 448, 449, 450, 451, 290, 291, 388, 495,
	200, 189, 375, 173, 23, 503, 266, 483, 401, 292,
	310, 318, 216, 218, 273, 278, 333, 563, 456, 277,
	314, 501, 185, 270, 299, 265, 504, 660, 174, 403,
	293, 167, 307, 498, 662, 507, 65, 416, 179, 170,
	651, 652, 256, 164, 275, 280, 661, 294, 295, 296,
	548, 320, 319, 311, 171, 556, 201, 272, 207, 191,
	178, 202, 165, 274, 506, 417, 631, 373, 435, 199,
	196, 276, 249, 502, 485, 168, 439, 418, 194, 322,
	626, 627, 628, 389, 362, 323, 324, 192, 263, 476,
	477, 327, 445, 352, 419, 455, 426, 420, 228, 229,
	331, 488, 490, 212, 629, 341, 342, 343, 480, 344,
	345, 346, 347, 393, 57, 59, 98, 101, 100, 665,
	666, 64, 30, 379, 382, 414, 421, 354, 632, 560,
	351, 355, 356, 383, 26, 437, 405, 441, 440, 49,
	50, 51, 54, 55, 56, 58, 60, 61, 52, 547,
	398, 411, 509, 46, 48, 408, 28, 385, 436, 458,
	350, 438, 469, 47, 467, 468, 489, 27, 387, 386,
	63, 45, 444, 446, 447, 325, 348, 396, 641, 510,
	391, 407, 410, 392, 353, 381, 412, 68, 67, 404,
	642, 399, 397, 349, 565, 566, 358, 593, 376, 453,
	544, 543, 542, 541, 540, 539, 538, 537, 328, 329,
	330, 422, 423, 424, 434, 427, 428, 429, 430, 431,
	432, 433, 472, 473, 643, 491, 493, 494, 492, 244,
	668, 377, 378, 247, 645, 646, 99, 647, 649, 648,
	29, 650, 658, 655, 656, 657, 568, 232, 653, -447,
	-445, -365, 555, 633, 400, 554, 557, 394, 373, 664,
	667, 398, 267, 328, 329, 330, 470, 371, -238, -365,
	668, -199, 251, 40, -252, -365, -199, -87, -16, -15,
	-188, -189, -252, 246, -374, 24, 452, -99, 453, 241,
	242, 86, 78, -365, -9, -113, -8, -120, -85, -186,
	457, -372, -365, 328, 328, -372, 246, -367, 277, 433,
	-365, -502, 252, -451, -424, 278, -450, -426, -453, -427,
	33, 237, 239, 238, 567, 274, 16, 398, 248, 14,
	13, 399, 260, 26, 27, 29, 15, 400, 402, 30,
	403, 406, 407, 408, 43, 411, 412, 267, 89, 97,
	92, 285, -237, -365, -400, -392, 118, -395, -387, -388,
	-390, -343, -538, -385, 86, 145, 146, 153, 119, 670,
	-389, -483, 37, 121, 573, 577, 613, 520, -335, -336,
	-337, -338, -339, -340, 558, -365, -539, -537, 92, 102,
	104, 108, 109, 107, 105, 157, 190, 106, 93, 158,
	-189, 89, -559, 583, -359, 606, 619, 620, 621, 622,
	605, 62, -509, -517, 245, -515, 156, 195, 263, 191,
	14, 151, 445, 192, 614, 615, 616, 580, 602, 522,
	584, 594, 609, 575, 576, 578, 570, 571, 572, 574,
	585, 587, 601, -518, 597, 607, 608, 593, 617, 618,
	655, 610, 611, 612, 649, 91, 90, 600, 599, 586,
	581, 582, 588, 569, 579, 589, 590, 598, 603, 604,
	382, 111, 383, 384, 512, 374, 81, 385, 252, 452,
	71, 386, 387, 388, 389, 390, 519, 391, 72, 392,
	381, 267, 435, 393, 194, 212, 524, 523, 525, 516,
	513, 511, 514, 515, 517, 518, 591, 592, 596, -136,
	-138, 624, -612, -326, -613, 6, 7, 8, 9, -614,
	158, -603, 454, 563, 92, 321, 371, 17, 512, 654,
	553, 654, 553, 336, 168, 165, -438, 168, 117, 174,
	173, 250, 168, -438, -365, 171, 654, 170, 651, 331,
	-414, -175, 371, 435, 344, 98, 277, -418, -415, 551,
	-503, 325, 321, 297, 247, 114, -176, 257, 256, 112,
	512, 245, 409, 316, 57, 59, -574, -575, 234, 235,
	236, -566, 545, -565, -365, 654, 659, 384, 100, 101,
	651, 652, 28, 246, 395, 273, 490, 488, 489, 491,
	492, 493, 494, -65, -519, -501, 485, 484, -378, 477,
	483, 475, 487, 478, 372, 346, 567, 345, 237, 645,
	552, 546, -353, 419, 455, 509, 510, 396, 456, 496,
	498, 479, 111, 198, 195, 247, 249, 246, 651, 371,
	512, 435, 98, 344, 246, -574, 659, 165, 496, 498,
	454, 277, 433, 42, -444, 445, -443, -445, 497, 508,
	90, 91, 495, -353, 111, 476, 476, -612, -326, -187,
	-189, -123, -564, 553, 654, 247, 371, 435, 277, 248,
	246, 548, 551, 249, 512, 245, 328, 395, 273, 344,
	98, 170, 651, -193, -194, -195, 230, 231, 232, 70,
	235, 233, 67, 33, 34, 35, -1, 125, 669, -392,
	-392, -6, 672, -6, -392, -365, -365, 160, -259, -263,
	-260, -262, -261, -265, -264, 195, 196, 156, 199, 205,
	201, 202, 203, 204, 206, 207, 208, 209, 210, 213,
	214, 211, 32, 212, 263, 191, 192, 193, 194, 215,
	177, 197, 560, 223, 178, 224, 179, 225, 180, 226,
	181, 182, 227, 183, 186, 187, 188, 189, 185, 159,
	-226, 92, 33, 86, 159, 92, -218, 269, -199, -252,
	-244, 159, 670, -218, -612, -209, -210, 11, -252, -341,
	-365, 454, 128, -99, 78, -99, 453, 78, -99, 453,
	241, -567, -568, -569, -571, 241, 453, 452, 242, -118,
	159, 285, 17, -372, -372, 84, -252, -426, 277, -451,
	-424, 37, 83, 160, 250, 160, 83, 86, 396, 371,
	435, 397, 512, 246, 409, 249, 277, 410, 371, 435,
	246, 249, 512, 277, 371, 246, 249, 435, 277, 410,
	371, 475, 476, 249, 28, 401, 404, 405, 476, -523,
	508, 160, 117, 114, 115, 116, -392, 135, -407, 128,
	129, 130, 131, 132, 133, 134, 142, 141, 152, 145,
	146, 147, 148, 149, 150, 151, 143, 144, 138, 118,
	136, 140, 137, 120, 155, -189, -392, -400, 62, -390,
	-390, -390, -390, -365, -483, -397, -392, 86, 86, 86,
	86, 86, 159, 105, 92, -392, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, -516, 86,
	86, -404, -405, 86, 86, -385, -341, 86, 92, 92,
	86, 86, 86, 92, 86, 86, 86, -405, -405, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, -210, 160, -209, 86, -209,
	-210, -190, -189, 33, 34, 33, 34, 33, 34, 33,
	34, -615, 642, 86, 102, 665, 228, 17, -365, 651,
	-365, -597, 33, 556, 556, 556, 556, 237, 16, 501,
	562, 172, 173, 174, -365, 171, 250, -365, -412, 252,
	-412, -412, -236, -365, 273, 395, 249, 548, 249, -176,
	-412, -412, -412, -412, -412, 248, -412, 24, 246, 246,
	246, 246, -412, 519, 128, 128, 60, -576, 176, 160,
	-566, -217, 86, -597, 660, 661, 662, -377, 136, 140,
	-377, -322, 18, -322, 24, 24, 275, 275, 275, -377,
	315, -623, -624, 17, 138, -375, -624, -375, -375, -377,
	-625, 248, 486, 44, 276, 275, -211, -212, 22, -211,
	480, 476, -468, 481, 482, -379, -624, -378, -377, -377,
	-378, -377, -377, -377, 33, 246, 249, 512, 344, 646,
	-623, -623, 32, 32, -502, -502, -252, -502, -502, 546,
	-354, -365, -502, -502, -502, -306, -307, -252, -577, 251,
	662, -609, -608, 499, -611, 501, 165, -445, 165, -445,
	89, -426, 277, 277, 160, 128, 24, -446, 128, 139,
	-445, -445, -446, -446, -276, 42, -364, 156, -365, 92,
	-276, 42, -606, -605, -252, -210, -190, -189, 87, 87,
	87, 556, -597, -502, -502, -502, -502, -502, -503, -502,
	-502, -502, -502, -502, -372, -227, -365, -238, 252, -502,
	-502, -502, -502, -191, -192, 147, -392, -365, -195, -3,
	-146, -145, 122, 123, 125, 636, 390, 635, 639, 633,
	-445, 42, -496, 417, 416, -490, -492, 86, -491, 86,
	-491, -491, -491, -491, -491, 86, 86, -493, 86, -493,
	-493, -490, -494, 86, -494, -495, 86, -495, -494, -365,
	-472, 562, -398, -400, -365, 40, -512, 62, -186, 86,
	32, 86, -218, -365, 192, 170, 650, 36, -513, 62,
	-186, 86, 32, -210, -139, 40, -212, 21, 159, 102,
	92, -118, -99, 78, -118, -99, -99, 87, 160, -570,
	108, 109, -572, 210, 201, -365, -116, 92, -537, -7,
	-11, -8, -9, -10, -47, -85, -186, 554, 557, -540,
	-538, 86, 33, 444, 83, 17, -452, 246, 512, 395,
	273, 249, 371, -450, -433, -430, -428, -364, -426, -429,
	-428, -455, -341, 476, -140, 459, 458, 327, -392, -392,
	-392, -392, -392, 107, 118, 362, 108, 109, -387, -408,
	33, 323, 324, -388, -388, -388, -388, -388, -388, -388,
	-388, -388, -388, -388, -388, -396, -406, -483, 86, 138,
	136, 140, 137, 120, -390, -390, -388, -388, -278, -364,
	156, 87, 160, -392, -563, -562, 122, -392, -392, -392,
	-392, -419, -421, -341, 86, -365, -560, -561, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 536, 386,
	381, 387, 385, 374, 393, 388, 389, 194, 543, 544,
	537, 538, 539, 540, 541, 542, -398, -398, -392, -560,
	-398, -334, 34, 33, -400, -400, -400, 87, -392, -573,
	360, 359, 361, -213, -365, -398, 87, 87, 87, 102,
	-400, -400, -398, -388, -398, -398, -398, -398, -561, -334,
	-334, -334, -334, 147, -400, -400, -334, -334, -334, -334,
	147, -334, -334, -334, -334, -334, -334, -334, -334, -334,
	-334, -334, 87, 87, 87, 147, -400, -211, -138, -521,
	-520, -392, 42, -139, -212, -616, 643, 86, -341, -604,
	92, 92, 670, 170, 651, 17, 512, -365, 17, 246,
	-365, 102, -365, 102, 246, 512, 246, 512, 502, 503,
	169, 173, 172, -365, 171, -365, -365, 118, -365, -365,
	36, -238, -227, -412, -412, -412, -581, -365, 93, -434,
	-431, -428, -365, -365, -424, -365, -354, -252, -412, -412,
	-412, -412, -252, -287, 54, 55, 56, -428, -177, 57,
	58, -577, -565, 36, -216, -365, -322, -390, -390, -392,
	371, 512, 246, -428, 277, -623, -377, -377, -355, -354,
	-379, -374, -379, -379, -322, -375, -377, -377, -392, -379,
	-375, -322, -365, 476, -322, -322, -468, -377, -376, -365,
	-376, -412, -354, -355, -355, -252, -252, -301, -308, -302,
	-309, 269, 243, 379, 380, 240, 238, 11, 239, -316,
	316, -413, 520, -282, -283, 78, 43, -285, 267, 421,
	414, 279, 283, 96, 284, 454, 285, 248, 287, 288,
	289, 304, 306, 259, 290, 291, 292, 445, 293, 164,
	305, 294, 295, 296, 397, -277, 6, 347, 42, 52,
	53, 468, 467, 565, 562, 280, -365, -581, -579, 32,
	-365, 32, -434, -428, -365, -365, 160, 250, -202, -204,
	-201, -197, -198, -203, -325, -327, -200, 86, -252, -189,
	-365, -445, 160, 500, 502, 503, -609, -446, -609, -446,
	250, 33, 444, -449, 444, 33, -424, -443, 496, 498,
	-439, 92, 445, -429, -448, 83, 156, -520, -446, -446,
	-448, -448, 155, 160, -607, 501, 502, 234, -211, 102,
	-234, 653, -254, -252, -581, -433, -424, -365, -502, -254,
	-254, -254, -367, -367, 86, 159, 37, -365, -365, -365,
	-365, -321, 160, -320, 17, -366, -365, 36, 92, 159,
	-147, -145, 124, -392, -6, 635, -392, -6, -6, -392,
	-6, -392, -500, 418, 102, 102, -344, 92, -344, 102,
	102, 102, 568, 87, 92, -437, 83, -514, -401, -558,
	624, -220, 87, -213, -556, -557, -213, -219, -365, -512,
	-244, 128, 128, 128, 25, -514, -220, 87, -556, -211,
	625, -139, -208, -207, -392, -365, 24, -118, -99, -568,
	159, 160, -216, -452, -432, -429, -454, 147, -365, -440,
	160, 562, 673, 90, 250, -594, -593, 436, 87, 160,
	-524, 251, 519, 92, 670, 452, 228, 229, 107, 362,
	108, 109, -483, -400, -396, -390, -390, -388, -388, -394,
	264, -394, 117, -392, 671, -391, -562, 124, -392, 36,
	160, 36, 160, 84, 160, 87, -490, -392, 159, 87,
	87, 17, 17, 87, -392, 87, 87, 87, 87, 17,
	17, -392, 87, 159, 87, 87, 87, 87, 84, 87,
	160, 87, 87, 87, 87, 160, -400, -400, -392, -400,
	87, 87, 87, -392, -392, -392, -400, 87, -392, -392,
	-392, -392, -392, -392, -392, -392, -392, -392, -216, -462,
	471, -462, -462, 160, 160, 160, 87, -139, 86, 102,
	160, 666, -348, -347, 92, -365, -365, 170, 651, -365,
	92, 651, -365, 92, -252, -354, -252, -354, 170, 174,
	174, 173, -365, 92, 37, 24, 24, 314, -237, 86,
	86, -252, -252, -252, -583, 422, -595, 160, 42, -593,
	512, -173, 327, -416, 84, -180, 334, 17, 562, -252,
	-252, -252, -252, -266, 36, 17, -196, -253, -365, 86,
	87, 160, -365, -365, -365, -425, 84, -365, -355, -322,
	-322, -379, -322, -322, 160, 23, -377, -379, -379, -244,
	-375, -244, 159, -244, -354, -489, 36, -217, 160, 21,
	269, -251, -362, -248, -250, 254, -382, -249, 257, -552,
	255, 253, 112, 258, 312, 113, 248, -362, -362, 254,
	-286, 250, 36, -362, -304, 248, 365, 312, 255, 21,
	269, -303, 248, 113, -365, 254, 258, 255, 253, -361,
	128, -353, 155, 250, 44, 397, -361, 566, 269, -361,
	-361, -361, -361, -361, -361, -361, 286, 286, -361, -361,
	-361, -361, -361, -361, -361, -361, -361, -361, -361, 165,
	-361, -361, -361, -361, -361, -361, 86, 281, 282, 314,
	-584, 422, 32, 377, 377, 378, -595, 373, 43, 32,
	-181, 371, -307, -305, -376, 32, -328, -329, -330, -331,
	-333, -332, 69, 73, 75, 79, 70, 71, 72, 76,
	81, 74, 32, 160, -363, -368, 36, -365, 92, -363,
	-189, -204, -202, -363, 86, -446, -608, -610, 504, 501,
	507, -448, -448, 102, 250, 86, 128, -448, -448, 42,
	-364, -605, 508, 502, -139, 160, 83, -254, -228, -229,
	-230, -231, -259, -341, 196, 199, 201, 202, 203, 204,
	206, 207, 208, 209, 210, 213, 214, 211, 212, 263,
	191, 192, 193, 194, 215, 177, 197, 560, 178, 179,
	180, 181, 182, 183, 186, 187, 188, 189, 185, -365,
	-238, -234, -322, -192, -204, -365, 92, -365, 147, 125,
	-6, 123, -151, -150, -149, 126, 633, 639, 125, 125,
	125, 87, 87, 87, 160, 87, 87, 87, 160, 87,
	160, 102, -527, 481, 41, 160, 86, 87, 160, 62,
	160, 128, 87, 160, -392, -365, 92, -392, 192, 87,
	62, -139, 92, 160, -205, 38, 39, 159, 454, -365,
	-538, 87, -454, 160, 250, 159, 159, -430, 400, -364,
	-432, 21, 562, -341, 40, -348, 128, 670, -365, 87,
	-394, -394, 117, -390, -387, 87, 125, -392, 123, -257,
	-259, 416, 417, -392, -257, -258, -264, 156, 195, 263,
	194, 193, 191, 416, 417, -276, -421, 559, -205, 87,
	-365, -392, -392, 87, -392, -392, 17, -365, -276, -388,
	-392, -210, -210, 87, 87, -461, -462, -461, -461, 87,
	87, 87, 87, -461, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 86, 102, 104, 102, 104,
	-520, -617, 64, 641, 63, 444, 107, 317, 160, 102,
	92, 671, 160, 128, 92, -365, -365, 17, 246, -365,
	17, 17, 17, 174, 92, -596, 321, 371, 512, 246,
	371, 321, 512, 246, -473, 102, 408, -239, -240, -241,
	-242, -243, 138, 161, 162, -228, -217, 86, -217, -586,
	483, 424, 434, -361, -384, -383, 373, 43, -507, 445,
	430, 431, -431, 277, -354, -592, 99, 128, 83, 351,
	355, 357, 356, 352, 353, 354, -410, -411, -409, -413,
	-354, -579, 86, 86, -186, 36, 136, -180, 334, 86,
	86, 36, -484, 341, -259, -252, -196, -365, 17, 160,
	-578, 159, -1, -365, -365, -424, -377, -322, -392, -392,
	-322, -377, -377, -379, -365, -244, -484, -259, 36, -302,
	243, 239, -458, 314, 315, -459, -474, 317, -476, 86,
	-256, -341, -249, -551, -552, -412, -365, 113, -551, 113,
	86, -256, -341, -341, -305, -341, -365, -365, -365, -365,
	-312, -311, -341, -314, 33, -315, -365, -365, -365, -365,
	113, -365, 113, -281, 42, 49, 50, 51, 334, 335,
	336, -361, -361, 198, -284, 42, 444, 446, 447, -314,
	102, 102, 102, 102, 92, 92, 92, -361, -361, 102,
	92, -368, 92, -553, 173, 46, 47, 102, 102, 102,
	102, 42, 92, -289, 42, 297, 301, 298, 299, 300,
	92, 102, 42, 102, 42, 102, 42, -365, 86, -554,
	-555, 92, -473, -586, -361, 377, -445, 128, 128, -384,
	-588, 96, 425, -588, -591, 327, -183, 512, 33, -221,
	243, 239, -579, -436, -435, -341, -201, -201, -201, -201,
	-201, -201, 69, 80, 69, -214, 86, 69, 74, 69,
	74, 69, -330, 69, 80, -436, -203, -217, -368, 87,
	-602, -601, -600, -598, 77, 251, 78, -398, -448, 501,
	505, 506, -432, -380, 92, -439, -225, 24, -252, -252,
	-505, 307, 308, 87, 160, -259, -324, 19, 159, 121,
	-6, -147, -149, -392, -6, -392, 635, 390, 636, 92,
	102, 102, -535, 465, 460, 462, 113, -401, -522, -521,
	62, -186, -213, -514, -557, -520, -365, 671, 671, 671,
	671, 92, 62, -186, -514, -225, -527, -207, -206, 45,
	-365, 102, 17, -429, -424, 147, 147, -365, 401, -440,
	92, 423, 92, 246, 671, 92, -348, -387, -392, 87,
	-267, 182, 181, -267, 36, 87, 87, -491, -491, -490,
	-493, -490, -267, -267, 87, 86, -205, 87, 24, 87,
	87, 87, -392, 87, 87, 160, -510, 521, -511, 595,
	-461, -461, -461, -461, -461, -461, -461, -461, -461, -461,
	-461, -461, -461, -461, -461, -461, -461, -403, -402, 269,
	466, 648, 648, 466, 648, 648, 87, 160, -560, 160,
	-356, 322, -356, -347, 92, 250, 92, 170, -365, 92,
	651, -252, -354, 92, -365, -365, -365, 314, -365, 314,
	-365, -365, 92, 92, 87, 160, -341, 87, 36, -245,
	-246, -247, -256, -248, -250, 36, -587, 96, -582, 92,
	-365, 93, -588, 158, 375, 42, 426, 427, 442, 370,
	102, 102, 432, -580, -365, -182, 246, 371, -590, 53,
	128, 92, -252, -409, -353, 155, 288, -244, 344, -319,
	-318, -365, 92, -245, -186, -252, -252, -245, -245, -186,
	-485, 343, 21, 102, 146, -218, 84, 159, -204, -253,
	-365, 147, 87, -322, -244, -322, -322, -377, -485, -186,
	-470, 318, 86, -468, 86, -468, 113, 352, -477, -475,
	269, -310, 46, 48, -259, -549, -365, -547, -549, -365,
	-547, -547, -412, -392, -310, -256, 250, 32, 239, -313,
	349, 350, 355, 357, -441, 313, 118, -441, 160, -205,
	160, -365, -276, -276, 32, 92, 92, -254, 87, 160,
	128, 92, -587, -582, 128, -446, 92, 92, -588, 92,
	92, -592, 128, -255, 246, -354, 160, -221, -221, -322,
	160, 128, -223, -222, 83, 84, -224, 83, -222, -222,
	69, -215, 92, 69, 69, -322, -600, -599, 24, -552,
	-552, -552, 87, 87, 15, -230, 42, -323, 20, 21,
	147, 125, 123, 125, 125, -365, 87, 87, -497, 626,
	-531, -533, 460, 21, 21, 15, 251, 87, -514, 671,
	-514, -535, 46, 47, -424, -440, 445, -252, 160, 671,
	-257, -295, 92, -392, 87, -392, 87, 92, 87, 92,
	-210, 21, 87, 160, 87, 87, 87, 160, 87, 87,
	-392, 87, -560, -357, 192, 92, -357, 371, -366, -365,
	17, -365, -185, 250, -244, 92, -365, -473, 314, -473,
	314, 246, -365, -234, -417, 561, -241, -259, 244, -186,
	87, 160, -186, 92, -585, 436, 102, 42, 102, 158,
	428, -508, -174, 96, -254, 33, -221, -589, 96, 128,
	670, 86, -361, -361, -361, -185, -365, 87, 160, -361,
	-361, 87, -185, 87, 87, -274, 562, -486, 268, 102,
	146, 102, 146, 102, -363, -204, -365, -322, -578, 159,
	-322, -486, -460, 319, 102, -388, 86, -388, 86, -469,
	316, 86, 87, 160, -365, -341, -271, -270, -268, 107,
	118, 42, 414, -269, 96, 155, 302, 305, 304, 280,
	303, -300, -381, 83, 420, 349, 350, -413, 626, 550,
	253, 112, 113, 402, -382, 86, 86, 84, 322, 86,
	86, -549, 87, -310, -341, 42, -313, 42, 363, 313,
	-311, -365, 155, -276, 87, -555, 92, -585, 92, -448,
	-590, 92, -174, -254, -579, -210, -435, -520, -392, 86,
	-392, 87, 86, 69, 11, 19, -385, -392, -400, 655,
	657, 658, 252, -6, 636, 390, -291, 627, 92, 21,
	92, -529, 92, -436, -497, -142, -288, -353, 285, 87,
	-294, 138, 562, 87, 87, -461, -461, -464, -463, -467,
	466, 314, 474, -400, 92, 92, 87, 87, 92, -365,
	170, 92, 371, -185, 670, 92, -473, 92, -473, -365,
	314, 92, 92, -232, -259, -178, 562, -274, -247, -178,
	21, 562, 374, 42, 102, 42, 429, 92, -182, 128,
	108, 109, -349, -350, 92, -419, -276, -278, 92, -318,
	-385, -385, -272, -186, 36, -273, -316, -413, -141, -140,
	-272, 86, -487, 164, 102, 146, 102, 102, -322, -322,
	-487, -476, 21, 87, -455, 87, -455, 86, 128, -388,
	-475, -478, 62, -268, 107, -388, 92, -278, -279, 42,
	301, 297, 128, 128, -280, 42, 281, 282, -290, 86,
	312, 15, 198, 86, 113, 113, -252, -419, -419, -550,
	351, 352, 353, 358, 355, 356, 354, 357, -550, -419,
	-419, 86, -442, -441, -388, -361, -361, 155, -589, -211,
	-216, -548, -365, 253, 21, 21, -506, 562, 656, 86,
	86, -365, -365, -345, 628, 102, 92, 462, -291, -498,
	629, -525, -468, -276, 128, 87, 76, 560, 563, 87,
	-466, 120, 428, 432, -386, -389, 102, 104, 190, 158,
	87, 87, -365, -365, -352, -351, 92, -234, 92, -234,
	92, 314, -473, 561, -179, 61, 508, 92, 93, 423,
	92, 93, 374, -174, 92, 671, 160, 128, 87, -456,
	269, -186, 160, -316, -353, -142, -456, -275, -317, -365,
	92, -504, 173, 342, 562, 102, 146, 102, -210, -488,
	173, 342, -459, 87, 87, 87, -455, 102, 87, -482,
	-479, 86, -316, 271, 138, 92, 92, 102, 86, -515,
	32, 92, -420, 86, 87, 87, 87, 87, -419, 102,
	-276, -361, 87, 87, 160, 658, 86, -400, -400, 86,
	21, -345, -499, 630, 92, -534, 465, -528, -526, 460,
	461, 462, 463, 92, 561, 66, 564, -465, -466, 432,
	-386, -389, 624, 472, 472, 472, 671, 160, 128, -234,
	-234, -473, 92, -235, -365, 312, 445, -350, 92, -422,
	-457, 321, 21, -316, -361, -457, 87, 160, -361, -361,
	342, 102, 146, 102, -211, 342, -471, 320, 87, -482,
	-316, -481, -480, 319, 272, 86, 87, -392, -404, -361,
	87, -293, -292, 558, -419, -422, 84, -422, 84, -422,
	84, -422, 84, 87, -276, -365, 253, -137, 86, 87,
	87, -346, -365, -529, 92, -536, 251, -532, -533, 464,
	-526, 21, 462, 21, 21, -143, 160, 66, 117, 473,
	473, 473, -234, -351, 92, 92, -234, -233, 36, 467,
	401, -423, 259, 363, 364, 96, 562, 349, 350, 368,
	367, 366, 369, 21, -458, -276, -317, -385, -385, 102,
	102, 87, 160, -365, 268, 86, -399, -393, -392, 268,
	87, -365, -299, -297, -298, 83, 479, 310, 311, 87,
	-550, -550, -550, -550, -300, 87, 160, -398, 87, 160,
	-543, 86, 102, -531, -530, -532, 21, -529, 21, -529,
	-529, 469, 562, -465, -234, 92, -361, -361, 92, 92,
	348, -361, -361, -361, -341, 86, -470, -480, -479, -399,
	87, 160, -441, -298, 83, -297, 83, 16, 15, -422,
	-422, -422, -422, 86, 87, -365, -546, 32, 87, -542,
	-541, -342, -537, -365, 465, 466, 92, -529, 128, 563,
	-620, -619, 647, 102, 102, -365, 102, 102, 102, -455,
	-460, 87, -393, -296, 307, 308, 32, 173, -296, -398,
	-545, -544, -343, 87, 160, 159, 92, 564, 92, 87,
	-476, 107, 42, 309, 87, 160, 128, -541, -365, -544,
	42, -392, 159, -365,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 0, 317, 318, 319,
	320, 321, 322, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 0, 0, 0, 0, 0, 726, 727, 0,
	690, 0, 0, 0, 0, 0, 0, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	595, 596, 597, 598, 599, 432, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 0, 351, 347, 259, 260,
	261, 262, 263, 264, 265, 358, 359, 539, 0, 0,
	0, 0, 809, -2, 103, 0, 0, 0, 0, 0,
	340, 0, 331, 331, 0, 0, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, -2,
	739, 0, 691, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 416,
	417, 418, 412, 413, 415, 414, -2, 0, 0, 739,
	0, 0, 0, 817, 0, 0, 0, 860, 878, 23,
	0, 7, 9, 10, 11, 12, 13, 14, 15, 16,
	17, 18, 0, 0, 19, 0, 19, 0, 0, 0,
	1431, 1432, 1433, 1434, 2237, 2207, -2, 1970, 1944, 2131,
	2132, 2027, 2039, 2275, 2276, 2277, 2278, 2279, 2280, 2281,
	2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291,
	2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301,
	2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310, 2311,
	2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321,
	2322, 2323, 2324, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
	1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916,
	1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926,
	1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936,
	1937, 1938, 1939, 1940, 1941, 1942, 1943, 1945, 1946, 1947,
	1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957,
	1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967,
	1968, 1969, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978,
	1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988,
	1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
	1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
	2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018,
	2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2028, 2029,
	2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2041,
	2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051,
	2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061,
	2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071,
	2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081,
	2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091,
	2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101,
	2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111,
	2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121,
	2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2133,
	2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143,
	2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153,
	2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163,
	-2, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173,
	2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183,
	2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193,
	2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203,
	2204, 2205, 2206, 2208, 2209, 2210, 2211, 2212, 2213, 2214,
	2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, -2, -2,
	-2, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234,
	2235, 2236, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245,
	2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255,
	2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 0,
	315, 313, 1914, 1944, 1970, 2027, 2039, 2040, 2079, 2131,
	2132, 2164, 2207, 2223, 2224, 2225, 2237, 0, 0, 1015,
	0, 787, 0, 0, 792, 1378, 787, 352, 728, 729,
	817, 843, 688, 0, 390, 0, 1960, 394, 2214, 0,
	0, 0, 0, 685, 384, 385, 386, 387, 388, 389,
	0, 0, 988, 0, 0, 380, 0, 346, 2029, 2236,
	1435, 0, 0, 0, 0, 0, 202, 1141, 204, 1143,
	208, 216, 0, 0, 0, 221, 222, 225, 226, 227,
	228, 229, 0, 233, 0, 235, 238, 0, 240, 241,
	0, 244, 245, 246, 0, 256, 257, 258, 1144, 1145,
	1146, -2, 131, 1013, 1871, 1757, 0, 1764, 1777, 1788,
	1517, 1518, 1519, 1520, 0, 0, 0, 0, 0, 0,
	1528, 1529, 0, 1559, 2279, 2320, 2321, 0, 1537, 1538,
	1539, 1540, 1541, 1542, 0, 142, 154, 155, 1810, 1811,
	1812, 1813, 1814, 1815, 1816, 0, 1818, 1819, 1820, 1728,
	1504, 1431, 0, 2288, 0, 2310, 2315, 2316, 2317, 2318,
	2309, 0, 0, 1712, 0, 1702, 0, 0, -2, -2,
	0, 0, 2104, -2, 2322, 2323, 2324, 2285, 2306, 2314,
	2289, 2290, 2313, 2281, 2282, 2283, 2276, 2277, 2278, 2280,
	2292, 2294, 2305, 0, 2301, 2311, 2312, 2212, 0, 0,
	2259, 0, 0, 0, 2254, 156, 157, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1723, -2, 1725, -2, 1727, -2,
	1730, -2, -2, -2, -2, 1735, 1736, -2, 1738, -2,
	-2, -2, -2, -2, -2, -2, 1714, 1715, 1716, 1717,
	1706, 1707, 1708, 1709, 1710, 1711, -2, -2, -2, 843,
	936, 0, 843, 0, 818, 865, 868, 871, 874, 821,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 342, 330, 332, 0, 336,
	0, 0, 332, 329, 323, 0, 1183, 1183, 1183, 0,
	0, 0, 1183, 1183, 1183, 1183, 1183, 0, 1183, 0,
	0, 0, 0, 0, 1183, 0, 1050, 1148, 1149, 1150,
	1181, 1182, 1264, 0, 0, 0, 744, 740, 741, 742,
	743, 831, 0, 833, 836, 0, 0, 665, 665, 903,
	903, 0, 611, 0, 0, 0, 665, 0, 625, 617,
	0, 0, 0, 665, 0, 0, 838, 838, 0, 668,
	675, 665, 665, -2, 665, 665, 662, 665, 0, 0,
	1197, 631, 632, 633, 617, 617, 636, 637, 638, 648,
	649, 676, 1895, 0, 0, 539, 539, 0, 539, 539,
	0, 539, 539, 539, 0, 746, 1986, 2074, 1967, 2045,
	1924, 2029, 2236, 0, 288, 2104, 293, 0, 1969, 1989,
	0, 0, 2008, 0, -2, 0, 368, 843, 0, 0,
	817, 0, 0, 0, 0, 539, 539, 539, 539, 539,
	1263, 539, 539, 539, 539, 539, 0, 0, 0, 539,
	539, 539, 539, 0, 879, 880, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 5, 6, 19, 0,
	0, 0, 0, 0, 0, 110, 109, 0, 1872, 1890,
	1823, 1824, 1825, 1877, 1827, 1881, 1881, 1881, 1881, 1856,
	1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1881,
	1881, 0, 0, 1870, 1847, 1879, 1879, 1879, 1877, 1874,
	1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837,
	1838, 1839, 1840, 1841, 1884, 1884, 1887, 1887, 1884, 0,
	430, 428, 429, 1753, 0, 0, 0, 0, 787, 791,
	1376, 0, 0, 0, 843, -2, 0, 0, 689, 391,
	1436, 0, 0, 395, 0, 396, 0, 0, 398, 0,
	0, 0, 419, 0, 422, 406, 407, 408, 409, 402,
	0, 182, 0, 382, 383, 0, 0, 348, 0, 0,
	0, 540, 0, 0, 0, 0, 0, 0, 213, 209,
	217, 220, 230, 237, 0, 249, 251, 254, 210, 218,
	223, 224, 231, 252, 211, 214, 215, 219, 253, 255,
	212, 232, 236, 250, 234, 239, 242, 243, 248, 0,
	183, 0, 0, 0, 0, 0, 1763, 0, 0, 1796,
	1797, 1798, 1799, 1800, 1801, 1802, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 1757, 0, 0, 1523,
	1524, 1525, 1526, 0, 1530, 0, 1560, 0, 0, 0,
	0, 0, 0, 1817, 1821, 0, 1753, 1753, 0, 1753,
	1749, 0, 0, 0, 0, 0, 0, 1753, 1685, 0,
	0, 1687, 1703, 0, 0, 1689, 1690, 0, 1693, 1694,
	1753, 0, 1753, 1698, 1753, 1753, 1753, 1681, 1682, 0,
	1749, 1749, 1749, 1749, 0, 0, 1749, 1749, 1749, 1749,
	1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
	1749, 0, 0, 0, 0, 838, 0, 844, 0, -2,
	0, 862, 864, 866, 867, 869, 870, 872, 873, 875,
	876, 823, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 72, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 339, 325, 2066, 0, 324, 0, 0,
	0, 0, 0, 1012, 0, 0, 1183, 1183, 1183, 1051,
	0, 0, 0, 0, 0, 0, 0, 0, 1183, 1183,
	1183, 1183, 0, 1203, 0, 0, 0, 746, 745, 0,
	832, 0, 0, 71, 600, 601, 602, 903, 0, 0,
	604, 605, 0, 606, 0, 0, 617, 665, 665, 623,
	624, 619, 618, 671, 672, 668, 0, 668, 668, 903,
	0, 642, 643, 644, 665, 665, 650, 839, 0, 651,
	652, 668, 0, 673, 674, 903, 0, 0, 903, 903,
	0, 660, 661, 663, 665, 0, 0, 1183, 0, 681,
	619, 619, 1896, 1897, 0, 0, 1194, 0, 0, 0,
	0, 684, 0, 0, 0, 446, 447, 0, 0, 747,
	0, 267, 271, 0, 274, 0, 2074, 0, 2074, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 311, 312,
	0, 0, 0, 0, 302, 305, 1370, 1371, 1138, 1139,
	306, 307, 360, 361, 0, 838, 861, 863, 857, 858,
	859, 0, 1185, 0, 0, 0, 0, 0, 539, 0,
	0, 0, 0, 0, 722, 0, 1030, 724, 0, 0,
	0, 0, 0, 911, 905, 907, 983, 142, 881, 8,
	127, 124, 0, 19, 0, 0, 19, 19, 0, 19,
	316, 0, 1893, 1891, 1892, 1826, 1878, 0, 1852, 0,
	1853, 1854, 1855, 1866, 1867, 0, 0, 1848, 0, 1849,
	1850, 1851, 1842, 0, 1843, 1844, 0, 1845, 1846, 314,
	427, 0, 0, 1754, 1016, 0, 765, 779, 760, 0,
	768, 0, 0, 1378, 0, 0, 0, 0, 748, 779,
	750, 0, 768, 838, 815, 0, 793, 0, 0, 392,
	0, 403, 397, 0, 404, 399, 400, 0, 0, 421,
	423, 424, 425, 410, 411, 686, 377, 378, 379, 369,
	370, 371, 372, 373, 374, 375, 376, 0, 0, 381,
	152, 0, 349, 350, 0, 0, 0, 196, 197, 198,
	199, 200, 201, 203, 187, 711, 713, 1130, 1142, 0,
	1133, 0, 206, 247, 179, 0, 0, 0, 1758, 1759,
	1760, 1761, 1762, 1767, 0, 1769, 1771, 1773, 1775, 0,
	1793, -2, -2, 1505, 1506, 1507, 1508, 1509, 1510, 1511,
	1512, 1513, 1514, 1515, 1516, 1778, 1791, 1792, 0, 0,
	0, 0, 0, 0, 1789, 1789, 1784, 0, 1543, 1372,
	1373, 1521, 0, 0, 1557, 1561, 0, 0, 0, 0,
	0, 0, 1165, 1877, 0, 143, 1748, 1652, 1653, 1654,
	1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664,
	1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674,
	1675, 1676, 1677, 1678, 1679, 1680, 0, 0, 1757, 0,
	0, 0, 1750, 1751, 0, 0, 0, 1640, 0, 0,
	1646, 1647, 1648, 0, 774, 0, 1713, 1686, 1704, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 935, 937, 0,
	783, 785, 786, 812, 793, 819, 0, 0, 0, 102,
	107, 0, 1231, 0, 0, 0, 0, 0, 0, 0,
	75, 1198, 76, 1200, 0, 0, 0, 0, 343, 344,
	0, 0, 338, 326, 2066, 328, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1066, 1067, 537,
	1124, 0, 0, 0, 1140, 1169, 1179, 0, 0, 0,
	0, 0, 1237, 1052, 1057, 1058, 1059, 1053, 1054, 1060,
	1061, 0, 834, 0, 0, 952, 603, 666, 667, 904,
	607, 0, 0, 614, 2029, 619, 903, 903, 626, 620,
	627, 670, 628, 629, 630, 668, 903, 903, 840, 665,
	668, 653, 669, 668, 1378, 657, 0, 664, 1378, 682,
	1378, 0, 680, 634, 635, 1239, 836, 444, 445, 450,
	452, 0, 504, 504, 504, 484, 504, 0, 0, 472,
	1898, 0, 0, 0, 0, 481, 1898, 0, 0, 1898,
	1898, 1898, 1898, 1898, 1898, 1898, 0, 0, 1898, 1898,
	1898, 1898, 1898, 1898, 1898, 1898, 1898, 1898, 1898, 0,
	1898, 1898, 1898, 1898, 1898, 1356, 1898, 0, 1195, 494,
	495, 496, 497, 502, 503, 0, 0, 532, 0, 0,
	1065, 0, 537, 0, 0, 1107, 0, 0, 916, 0,
	917, 918, 919, 914, 954, 978, 978, 0, 978, 958,
	1378, 0, 0, 0, 279, 280, 268, 0, 269, 0,
	0, 282, 283, 0, 285, 286, 287, 294, 1967, 2045,
	289, 291, 0, 0, 295, 308, 309, 310, 0, 0,
	300, 301, 0, 0, 363, 364, 366, 0, 793, 1199,
	73, 1186, 708, 1374, 709, 710, 714, 0, 0, 717,
	718, 719, 720, 721, 1032, 0, 0, 1116, 1117, 1118,
	1185, 903, 0, 912, 0, 908, 984, 0, 986, 0,
	0, 125, 19, 0, 118, 115, 0, 0, 0, 0,
	0, 1873, 1822, 1894, 0, 0, 0, 1875, 0, 0,
	0, 0, 0, 108, 795, 755, 0, 759, 776, 0,
	780, 0, 0, 772, 764, 769, 0, 0, 789, 756,
	1377, 0, 0, 0, 0, 749, 0, 0, 754, 793,
	0, 816, 845, 846, 849, 1437, 0, 405, 401, 420,
	0, 0, 0, 0, 190, 1127, 0, 191, 195, 185,
	0, 0, 0, 1132, 0, 1129, 1134, 0, 205, 0,
	0, 180, 181, 1222, 1231, 0, 0, 0, 1768, 1770,
	1772, 1774, 1776, 0, 1779, 1789, 1789, 1785, 0, 1780,
	0, 1782, 0, 1758, 1527, 0, 1562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 849, 0, 0, 1630,
	1631, 0, 0, 1635, 0, 1637, 1638, 1639, 1641, 0,
	0, 0, 1645, 0, 1684, 1705, 1688, 1691, 0, 1695,
	0, 1697, 1699, 1700, 1701, 0, 843, 843, 0, 0,
	1601, 1601, 1601, 0, 0, 0, 0, 1601, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1546,
	0, 1547, 1548, 0, 0, 0, 938, 813, 0, 0,
	0, 0, 0, 1229, 0, 92, 0, 0, 0, 0,
	97, 0, 0, 77, 0, 0, 1206, 1207, 345, 333,
	335, 0, 327, 0, 1184, 0, 0, 0, 0, -2,
	1032, 836, 0, 836, 1077, 1898, 541, 0, 0, 1126,
	0, 1096, 0, 0, 0, -2, 0, 0, 0, 1179,
	0, 0, 0, 1241, 0, 0, 0, 733, 737, 23,
	837, 0, 610, 608, 0, 612, 0, 613, 665, 621,
	622, 903, 645, 646, 0, 0, 903, 665, 665, 656,
	668, 677, 0, 678, 1378, 1241, 0, 0, 1194, 1307,
	1275, 462, 0, 1391, 1392, 505, 0, 1398, 1407, 1183,
	1469, 0, 1407, 0, 0, 1409, 1410, 0, 0, 0,
	0, 485, 486, 0, 471, 0, 0, 0, 0, 0,
	0, 470, 0, 0, 515, 0, 0, 0, 0, 0,
	1899, 1898, 1898, 0, 479, 480, 0, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 1898, 1898, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1347,
	0, 0, 0, 0, 0, 0, 0, 1362, 1363, 0,
	1077, 1898, 0, 0, 0, 0, 541, 1121, 1121, 1094,
	1112, 0, 448, 449, 512, 0, 0, 0, 0, 0,
	0, 0, 944, 0, 0, 0, 943, 0, 0, 0,
	0, 0, 0, 0, 836, 979, 0, 981, 982, 956,
	-2, 0, 916, 961, 1753, 0, 272, 273, 0, 0,
	278, 296, 298, 270, 0, 0, 0, 297, 299, 303,
	304, 362, 365, 367, 855, 0, 0, 1265, 0, 1033,
	1034, 1036, 1037, 0, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1951, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1031,
	725, 1119, 894, 906, 913, 985, 987, 143, 909, 0,
	128, 19, 127, 119, 120, 0, 19, 0, 0, 0,
	0, 1883, 1882, 1868, 0, 1869, 1880, 1885, 0, 1888,
	0, 431, 799, 0, 0, 779, 781, 0, 0, 779,
	0, 0, 788, 0, 0, 0, 0, 0, 0, 0,
	779, 855, 795, 0, 852, 850, 851, 0, 0, 687,
	153, 426, 0, 0, 0, 0, 0, 712, 0, 1131,
	187, 0, 0, 207, 0, 0, 0, 1231, 1226, 1752,
	1781, 1783, 0, 1790, 1786, 1522, 1531, 1558, 0, 0,
	1564, 1576, 1576, 0, 0, 0, 1567, 1881, 1881, 1570,
	1877, 1879, 1877, 1576, 1576, 0, 1166, 0, 1167, 849,
	144, 0, 0, 1636, 0, 0, 0, 775, 0, 0,
	0, 1597, 1599, 1601, 1601, 1608, 1602, 1609, 1610, 1601,
	1601, 1601, 1601, 1615, 1601, 1601, 1601, 1601, 1601, 1601,
	1601, 1601, 1601, 1601, 1601, 1595, 0, 0, 1811, 1812,
	784, 0, 0, 826, 827, 828, 829, 830, 0, 0,
	62, 62, 1231, 0, 101, 93, 0, 0, 0, 0,
	0, 0, 0, 337, 0, 78, 79, 81, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 1018, 1019,
	1021, 0, 1024, 1025, 1026, 0, 0, 1384, 0, 1081,
	1078, 1079, 1080, 0, 1121, 542, 543, 544, 545, 0,
	0, 0, 1125, 0, 0, 1089, 0, 0, 0, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, -2, 1189, 0,
	1378, 0, 0, 1384, 1214, 0, 0, 1219, 0, 1384,
	1384, 0, 1249, 0, 1238, 787, 0, -2, 0, 0,
	735, 0, 0, 953, 609, 615, 903, 639, 841, 842,
	1378, 903, 903, 665, 683, 679, 1249, 1240, 0, 451,
	504, 0, 1295, 0, 0, 1301, 0, 1308, 455, 0,
	506, 0, 1397, 1425, 1408, 1425, 1470, 1425, 1425, 1183,
	0, 506, 0, 0, 473, 0, 0, 0, 0, 0,
	469, 509, 849, 456, 458, 459, 460, 513, 514, 516,
	0, 518, 519, 475, 487, 488, 489, 490, 491, 492,
	493, 0, 0, 0, 482, 498, 499, 500, 501, 457,
	1324, 1325, 1326, 1329, 1330, 1331, 1332, 0, 0, 1335,
	1336, 1337, 1338, 1339, 1422, 1423, 1424, 1340, 1341, 1342,
	1343, 1344, 1345, 1346, 1364, 1365, 1366, 1367, 1368, 1369,
	1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 0, 0,
	1359, 0, 0, 1081, 0, 0, 0, 0, 0, 1121,
	535, 0, 0, 536, 1096, 0, 1114, 0, 1108, 1109,
	0, 0, 757, 903, 355, 0, 948, 939, 0, 923,
	0, 925, 945, 926, 946, 0, 0, 930, 0, 932,
	0, 928, 929, 934, 927, 903, 915, 955, 980, 957,
	960, 962, 963, 969, 0, 0, 0, 0, 266, 275,
	276, 277, 284, 0, 561, 290, 811, 0, 1375, 715,
	716, 1266, 1267, 723, 0, 1038, 892, 0, 0, 123,
	126, 0, 121, 0, 0, 0, 0, 113, 111, 1876,
	0, 0, 801, 167, 0, 0, 0, 777, 0, 782,
	779, 763, 773, 762, 770, 771, 790, 1379, 1380, 1381,
	1382, 0, 779, 753, 752, 814, 799, 847, 848, 0,
	1438, 393, 0, 1128, 187, 192, 193, 194, 188, 186,
	1135, 0, 1137, 0, 1224, 0, 0, 1787, 1563, 1532,
	1565, 1577, 1578, 1566, 0, 1534, 1535, 1568, 1569, 1571,
	1572, 1573, 1574, 1575, 1536, 0, 1168, 1632, 0, 1634,
	1642, 1643, 0, 1692, 1696, 0, 0, 0, 0, 0,
	1606, 1607, 1611, 1612, 1613, 1614, 1616, 1617, 1618, 1619,
	1620, 1621, 1622, 1623, 1624, 1625, 1626, 843, 1596, 0,
	0, 0, 0, 0, 0, 0, 824, 0, 0, 0,
	64, 0, 64, 1230, 1232, 0, 983, 0, 0, 98,
	0, 1208, 1378, 0, 80, 82, 0, 2030, 0, 0,
	0, 0, 1185, 1011, 1027, 1023, 0, 0, 0, 0,
	1385, 1386, 1388, 1389, 1390, 0, 1049, 0, 0, 1069,
	1070, 1071, 1083, 0, 547, 548, 0, 0, 0, 560,
	556, 557, 558, 538, 1120, 1103, 0, 0, 1092, 0,
	0, 1102, 0, 1190, 1898, 1898, 1898, 1208, 0, 0,
	1309, 1898, 1898, 0, 1216, 1218, 1208, 0, 0, 1313,
	1252, 0, 0, 1243, 0, 978, 0, 0, 903, 734,
	737, 738, 835, 616, 654, 658, 655, 903, 1252, 443,
	1273, 0, 0, 0, 0, 0, 1305, 0, 0, 1277,
	0, 474, 507, 0, -2, 0, 1426, 0, 1411, 1426,
	0, 0, 1425, 0, 463, 506, 0, 0, 0, 520,
	525, 526, 0, 522, 523, 1465, 0, 524, 0, 511,
	0, 517, 1327, 1328, 0, 1333, 1334, 0, 1358, 0,
	0, 454, 527, 0, 0, 0, 528, 529, 534, 1122,
	1123, 1089, 0, 1103, 0, 1113, 0, 1110, 1111, 843,
	0, 0, 920, 949, 0, 0, 921, 0, 922, 924,
	947, 0, 941, 931, 933, 354, 964, 0, 0, 966,
	967, 968, 959, 292, 856, 1035, 0, 877, 0, 0,
	910, 0, 19, 0, 0, 116, 1886, 1889, 803, 0,
	800, 168, 0, 0, 0, 0, 767, 778, 761, 1383,
	751, 801, 853, 854, 189, 184, 1136, 1234, 0, 1225,
	0, 1489, 1545, 0, 1644, 0, 1601, 1598, 1601, 1600,
	1592, 0, 1549, 0, 1551, 1552, 1553, 0, 1555, 1556,
	0, 822, 0, 60, 0, 63, 61, 0, 100, 94,
	0, 0, 1204, 0, 1208, 0, 83, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 1020, 1022, 0, 1055,
	1313, 0, 1055, 1082, 1068, 0, 0, 549, 550, 0,
	553, 559, 1084, 0, 0, 1086, 1087, 1088, 0, 0,
	1100, 0, 0, 0, 0, 1178, 1180, 1196, 0, 0,
	0, -2, 1220, 0, -2, 1213, 0, 1258, 0, 1250,
	0, 1242, 0, 1245, 903, 903, -2, 731, 736, 0,
	659, 1258, 1275, 0, 1296, 0, 0, 0, 0, 0,
	0, 0, 1276, 0, 1289, 508, 1427, -2, 1441, 1443,
	0, 1195, 1446, 1447, 0, 0, 0, 0, 0, 0,
	1496, 1455, 0, 0, 1459, 1460, 1461, 0, 0, 1464,
	0, 1805, 1806, 0, 1468, 0, 0, 0, 0, 0,
	0, 0, 1405, 464, 465, 0, 467, 468, 1898, 1466,
	510, 461, 1898, 477, 1357, 1360, 1361, 533, 530, 531,
	1092, 1095, 1106, 1115, 758, 838, 356, 357, 950, 0,
	940, 942, 973, 970, 0, 0, 1039, 893, 901, 2259,
	2261, 2258, 117, 122, 0, 0, 805, 0, 802, 0,
	796, 798, 178, 766, 803, 138, 170, 0, 0, 1533,
	0, 0, 0, 1633, 1683, 1604, 1605, 0, 1593, 0,
	1587, 1588, 1589, 1594, 0, 0, 825, 820, 65, 96,
	0, 99, 0, 1205, 69, 1185, 0, 1185, 0, 0,
	0, 1014, 1028, 0, 1041, 1048, 1062, 1201, 1387, 1047,
	0, 0, 546, 551, 0, 554, 555, 1104, 1103, 0,
	1090, 1091, 0, 1098, 0, 0, 1191, 1192, 1193, 1310,
	1311, 1312, 1268, 1215, 0, -2, 1321, 0, 1211, 1234,
	1268, 0, 1246, 0, 1253, 0, 1251, 1244, 843, 732,
	1255, 453, 1307, 1297, 0, 1299, 0, 0, 0, 0,
	1278, -2, 0, 1442, 1444, 1445, 1448, 1449, 1450, 1501,
	1502, 1503, 0, 0, 1453, 1498, 1499, 1500, 1454, 0,
	0, 0, 0, 0, 1803, 1804, 1494, 0, 0, 1412,
	1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1413, 0,
	0, 0, 1404, 1406, 466, 0, 0, 1898, 1105, 353,
	0, 0, 974, 976, 971, 972, 895, 0, 0, 0,
	0, 112, 114, 129, 0, 804, 169, 0, 805, 140,
	0, 161, 0, 1235, 0, 1544, 0, 0, 0, 1603,
	1590, 0, 0, 0, 0, 0, 1807, 1808, 1809, 0,
	1550, 1554, 95, 1209, 0, 67, 0, 84, 1185, 85,
	1185, 0, 0, 0, 0, 1063, 1064, 1072, 1073, 0,
	1075, 1076, 552, 1085, 1093, 1097, 1100, 0, 1152, 1270,
	0, 1217, 1194, 1323, 1898, 1221, 1270, 0, 1315, 1898,
	1898, 1236, 0, 1248, 0, 1260, 0, 1254, 838, 442,
	0, 1257, 1293, 1298, 1300, 1302, 0, 1306, 1304, 1279,
	-2, 0, 1287, 0, 0, 1451, 1452, 0, 0, 1702,
	1898, 0, 1484, 0, 1152, 1152, 1152, 1152, 0, 521,
	476, 0, 951, 965, 0, 902, 0, 0, 0, 0,
	0, 794, 130, 0, 139, 158, 0, 171, 172, 0,
	0, 0, 0, 1227, 0, 1492, 1493, 0, 1579, 0,
	0, 0, 1583, 1584, 1585, 1586, 1185, 69, 0, 86,
	87, 0, 1185, 0, 1040, 0, 1074, 1099, 1101, 1151,
	1210, 0, 1307, 1322, 0, 1212, 1314, 0, 0, 0,
	1247, 1259, 0, 1262, 730, 1256, 1274, 0, 1303, 1280,
	1288, 0, 1283, 0, 0, 0, 1497, 0, 1458, 0,
	1463, 1472, 1485, 0, 0, 1393, 0, 1395, 0, 1399,
	0, 1401, 0, 0, 478, 975, 977, 0, 1753, 897,
	898, 0, 807, 797, 141, 145, 0, 167, 164, 0,
	173, 0, 0, 0, 0, 1223, 0, 1490, 0, 1580,
	1581, 1582, 66, 68, 70, 1185, 88, 0, 1042, 1043,
	1056, 1153, 1898, 1898, 0, 0, 0, 1159, 1160, 1898,
	1898, 1898, 1164, 0, 1295, 1327, 1316, 1317, 1318, 1261,
	1294, 1282, 0, -2, 1290, 0, 0, 1755, 1765, 1766,
	1456, 1462, 1471, 1473, 1474, 0, 1486, 1487, 1488, 1495,
	1152, 1152, 1152, 1152, 1403, 896, 0, 0, 806, 0,
	132, 0, 0, 162, 163, 165, 0, 174, 0, 176,
	177, 0, 0, 1591, 90, 1044, 0, 0, 1156, 1157,
	0, 0, 0, 0, 1271, 0, 1273, 1284, -2, 0,
	1292, 0, 1457, 1475, 0, 1476, 0, 0, 0, 1394,
	1396, 1400, 1402, 1753, 899, 808, 1233, 0, 146, 0,
	148, 150, 151, 1428, 159, 160, 166, 175, 0, 0,
	1029, 1045, 0, 1154, 1155, 1158, 1161, 1162, 1163, 0,
	1275, 1291, 1756, 1477, 1479, 1480, 0, 0, 1478, 0,
	133, 134, 0, 147, 0, 0, 1228, 1491, 1046, 1272,
	1269, 1481, 1483, 1482, 900, 0, 0, 149, 1429, 135,
	136, 137, 0, 1430,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 119, 3, 3, 3, 150, 142, 3,
	86, 87, 147, 145, 160, 146, 159, 148, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 672, 669,
	129, 128, 130, 3, 673, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 152, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 670, 141, 671, 153,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 120, 121, 122, 123, 124,
	125, 126, 127, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 143, 144, 149, 151, 154, 155, 156,
	157, 158, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 57986, 661, 57987, 662, 57988, 663, 57989, 664,
	57990, 665, 57991, 666, 57992, 667, 57993, 668, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:850
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:857
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:863
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:871
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:877
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:881
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:896
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:900
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:906
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:911
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:915
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:948
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:963
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:974
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:986
		{
			yyVAL.str = ""
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:990
		{
			yyVAL.str = yyDollar[2].str
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:995
		{
			yyVAL.str = ""
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:999
		{
			yyVAL.str = yyDollar[2].str
		}
	case 66:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1005
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
				Internal:    yyDollar[12].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1020
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1024
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1028
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1032
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1039
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1047
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1055
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion(), yyDollar[4].boolValUnion())
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1061
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1068
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1077
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1085
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1093
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1103
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1113
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1123
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(""),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1133
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELDATABASE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1143
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELTABLE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1155
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
				Internal:    yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1166
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
				Internal:    yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1177
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
				Internal:    yyDollar[11].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1189
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
				Internal:     yyDollar[11].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1201
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				PitrValue:    yyDollar[10].int64ValUnion(),
				PitrUnit:     yyDollar[11].str,
				Internal:     yyDollar[12].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1214
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
				Internal:    yyDollar[8].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1225
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
				Internal:     yyDollar[13].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1241
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1249
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1257
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1265
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1274
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1284
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1296
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1304
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1313
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1323
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1333
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1343
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1363
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1369
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1376
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1384
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1390
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1399
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1409
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1417
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1425
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1433
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1443
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1451
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1461
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1468
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1477
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1487
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1491
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1497
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1501
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1507
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1516
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1526
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1530
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1536
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1545
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1549
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1555
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1576
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1590
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1597
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1601
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1607
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1611
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1617
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1624
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1632
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1636
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1648
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1652
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1666
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1670
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1675
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1682
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1686
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1690
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1696
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1705
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1716
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1720
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1726
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1730
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1736
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1740
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1746
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarExpr{
				Name:   v,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1766
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1785
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1789
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1793
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1798
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1802
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1811
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1821
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1828
		{
			yyVAL.str = yyDollar[3].str
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1833
		{
			yyVAL.str = "\n"
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1840
		{
			yyVAL.str = yyDollar[3].str
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1845
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1849
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1877
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1881
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1887
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1895
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1915
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1934
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1959
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1963
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1967
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1972
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1976
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1982
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1995
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2006
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2019
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2023
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2033
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2046
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2059
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2065
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2071
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2079
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2089
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2099
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2103
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2107
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2111
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2115
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2119
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2126
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2130
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2136
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2143
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2152
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2156
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2162
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2166
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2170
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2174
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2178
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2182
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2186
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2190
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2194
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2198
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2202
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2206
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2210
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2214
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2218
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2222
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2226
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2230
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2234
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2238
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2242
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2246
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2250
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2254
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2258
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2262
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2266
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2270
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2274
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2278
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2282
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2286
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2290
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2294
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2298
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2302
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2306
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2310
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2314
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2318
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2322
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2326
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2330
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2334
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2338
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2342
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2346
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2350
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2354
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2358
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2362
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2377
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2386
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2393
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2400
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2409
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2427
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2431
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2437
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2444
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2452
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2456
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2460
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2464
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2470
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2474
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2480
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2487
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2494
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2503
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2533
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2537
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2541
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2547
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2553
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2557
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2564
		{
			yyVAL.str = yyDollar[3].str
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2570
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2574
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2580
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2588
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2597
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2606
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2614
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2622
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2645
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   v,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2664
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2671
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2678
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2686
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2693
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2700
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2709
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2713
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2717
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2723
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2727
		{
			yyVAL.str = yyDollar[1].str
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2733
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2737
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2743
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2747
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2761
		{
			yyLOCAL = &tree.SavePoint{Name: tree.Identifier(yyDollar[2].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2767
		{
			yyLOCAL = &tree.ReleaseSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2773
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2778
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2783
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[5].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2788
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2794
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2800
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2805
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2809
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2813
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2817
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2821
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2825
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2829
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2833
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2837
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2843
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2847
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2851
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2855
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2860
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2865
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2871
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2884
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2897
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2910
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2923
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2939
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2946
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2957
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2968
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2972
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2978
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2988
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2994
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2998
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:3004
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3010
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3014
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3018
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3022
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3028
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3041
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3047
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3051
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3055
		{
			yyLOCAL = tree.NewPrepareVar(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3062
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3066
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3072
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3078
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3089
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3095
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3099
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3103
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3107
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3111
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3115
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3123
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3131
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3141
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3149
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3159
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3169
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3185
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3189
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3197
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3205
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3245
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3249
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3255
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3261
		{
			yyVAL.str = yyDollar[1].str
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3266
		{
			yyVAL.str = "true"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3267
		{
			yyVAL.str = "false"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3268
		{
			yyVAL.str = yyDollar[1].str
		}
	case 426:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3273
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3279
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3288
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3295
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3303
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3307
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3332
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3355
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3365
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3372
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3381
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3389
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3393
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3399
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3410
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3414
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3420
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3424
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3448
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3458
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3468
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3484
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3502
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3506
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3512
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3516
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3522
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3528
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3536
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3546
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3554
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3564
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3574
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3584
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3591
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3595
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3599
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3603
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3607
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3614
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3620
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3624
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3628
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3632
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3636
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3640
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3644
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3648
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3653
		{
			yyVAL.str = ""
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3687
		{
			yyVAL.str = ""
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3691
		{
			yyVAL.str = string("COLUMN")
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3696
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3702
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3708
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3716
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3720
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3726
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3734
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3741
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3747
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3753
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3759
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3765
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3772
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3779
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3787
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3793
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3805
		{
			var keyType = tree.INDEX_TYPE_HNSW
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, 0)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3811
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3817
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3825
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3829
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3836
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3854
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3869
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3884
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3899
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3912
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3918
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3929
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3941
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountUnlock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3952
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountLock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3965
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3969
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3977
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3981
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3986
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3990
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4006
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4010
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4014
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4018
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4025
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4029
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4033
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4037
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4044
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4048
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4055
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4059
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4063
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4067
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4074
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4081
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4087
		{
			yyVAL.item = nil
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4092
		{
			yyVAL.item = nil
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4141
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4147
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4153
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4159
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4168
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4176
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4184
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4192
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level: tree.RECOVERYWINDOWLEVELACCOUNT,
			}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4198
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4205
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4213
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:       tree.RECOVERYWINDOWLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4222
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4226
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4230
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4241
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4245
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4251
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4256
		{
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4260
		{
		}
	case 621:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4265
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4275
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4285
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4293
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4299
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4305
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4311
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4317
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4323
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4329
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4338
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4342
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4346
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4350
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4354
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4358
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4362
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4366
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4372
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4381
		{
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4383
		{
		}
	case 645:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4392
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4402
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4411
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4415
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4419
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4425
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4431
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4437
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4443
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4452
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4463
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4475
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4483
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4489
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4501
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4515
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4521
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4527
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4534
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4538
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4543
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4547
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4551
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4556
		{
			yyVAL.str = ""
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4560
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4566
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4581
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4585
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4591
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4599
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4606
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4614
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4620
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4626
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4631
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4639
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4645
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4650
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4656
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4662
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4666
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4694
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4702
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4710
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4718
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4722
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4728
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4741
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4749
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4758
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4764
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4772
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4780
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4788
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4794
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4802
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4808
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4816
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4822
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4832
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4837
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4844
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4860
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4873
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4884
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4888
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4894
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4900
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4909
		{
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4911
		{
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4914
		{
		}
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4923
		{
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4927
		{
		}
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4932
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4941
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4948
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4954
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4962
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4969
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4976
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4996
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5004
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5014
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5018
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5024
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5031
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5037
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5045
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5052
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5059
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5078
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5082
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5086
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5091
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5095
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5099
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:5105
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5114
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5118
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5124
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5128
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5134
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5138
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5144
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5149
		{
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5153
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5160
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5164
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5171
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5176
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5180
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5186
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5190
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5196
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5200
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5205
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5209
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5222
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5233
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5244
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5266
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5289
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5297
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5306
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5310
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5323
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5327
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5332
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5336
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5343
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5348
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5355
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5361
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5365
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5369
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5373
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5377
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5381
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5386
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5390
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5396
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5406
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5421
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5425
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5439
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5443
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5449
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5458
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5462
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5466
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5470
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5474
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5480
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5487
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5496
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5500
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5506
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5514
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5518
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5523
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5527
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5533
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5537
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5541
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5546
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5550
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5556
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5562
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5566
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5572
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5577
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5581
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5585
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5590
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5594
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5598
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5603
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5607
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5615
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5619
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5623
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5637
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5641
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5651
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5661
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5671
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5683
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5691
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5699
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5708
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5716
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5724
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5732
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5740
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5748
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5756
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5764
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5772
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5782
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: tree.QuerySpecOptionDistinct&yyDollar[2].selectOptionsUnion() != 0,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].selectOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5795
		{
			yyLOCAL = tree.QuerySpecOptionNone
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5799
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5805
		{
			yyLOCAL = yyDollar[1].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5809
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion() | yyDollar[2].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5815
		{
			yyLOCAL = tree.QuerySpecOptionSqlSmallResult
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5819
		{
			yyLOCAL = tree.QuerySpecOptionSqlBigResult
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5823
		{
			yyLOCAL = tree.QuerySpecOptionSqlBufferResult
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5827
		{
			yyLOCAL = tree.QuerySpecOptionStraightJoin
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5831
		{
			yyLOCAL = tree.QuerySpecOptionHighPriority
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5835
		{
			yyLOCAL = tree.QuerySpecOptionSqlCalcFoundRows
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5839
		{
			yyLOCAL = tree.QuerySpecOptionSqlNoCache
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5843
		{
			yyLOCAL = tree.QuerySpecOptionAll
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5847
		{
			yyLOCAL = tree.QuerySpecOptionDistinct
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5851
		{
			yyLOCAL = tree.QuerySpecOptionDistinctRow
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5873
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5877
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5882
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5886
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5896
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5905
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5914
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5925
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5929
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5934
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5938
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5943
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5947
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5953
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5957
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5963
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5967
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5971
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5975
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5980
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5988
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5994
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6002
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6012
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6022
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6026
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6032
		{
			if strings.Contains(yyDollar[2].str, ":") {
				ss := strings.SplitN(yyDollar[2].str, ":", 2)
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: ss[0],
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
					Option:   ss[1],
				}
			} else {
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: yyDollar[2].str,
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6052
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6061
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6070
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6078
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:6089
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6099
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6103
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6109
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6113
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6123
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 931:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6127
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6131
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 933:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6135
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 934:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6141
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 935:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6147
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6158
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6162
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:6168
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6174
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6178
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6184
		{
			yyVAL.str = yyDollar[1].str
		}
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6191
		{
			yyVAL.str = yyDollar[2].str
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6197
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6203
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 945:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6207
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 946:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6211
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 947:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6215
		{
			yyVAL.str = tree.JOIN_TYPE_CENTROIDX + ":" + yyDollar[2].str
		}
	case 948:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6221
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6225
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6231
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6235
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6241
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6245
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6251
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6255
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6265
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6278
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6284
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6290
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6304
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6315
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6322
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6326
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6332
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6342
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6346
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6350
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6355
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6359
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6363
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6367
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6372
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6376
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6380
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6384
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6388
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6393
		{
			yyVAL.str = ""
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6397
		{
			yyVAL.str = yyDollar[1].str
		}
	case 980:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6401
		{
			yyVAL.str = yyDollar[2].str
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6407
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6411
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 983:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6416
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6420
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6424
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6428
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6432
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6438
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1011:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6480
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6493
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6499
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1014:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6505
		{
			yyLOCAL = tree.NewCreateProcedure(
				yyDollar[2].sourceOptionalUnion(), yyDollar[4].procNameUnion(), yyDollar[6].procArgsUnion(), yyDollar[8].str, yyDollar[9].str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6513
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6518
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6525
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6532
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6536
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6542
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6548
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6553
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6557
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6561
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6565
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6570
		{
			yyVAL.str = "sql"
		}
	case 1028:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6574
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1029:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6581
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6614
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6619
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6626
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6633
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6637
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6643
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6649
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6653
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6657
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6663
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6669
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6675
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6679
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6685
		{
			yyVAL.str = ""
		}
	case 1046:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6692
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1047:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6698
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6713
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6730
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6747
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1051:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6751
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6757
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1053:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6761
		{
			yyVAL.str = "DEFINER = "
		}
	case 1054:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6765
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1055:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6770
		{
			yyVAL.str = ""
		}
	case 1056:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6774
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1062:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6788
		{
			yyVAL.str = ""
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6796
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6802
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6807
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6813
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6826
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6831
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6836
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6842
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6849
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6856
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6863
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6870
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6878
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6884
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6891
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6898
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6906
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6912
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6921
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6938
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6954
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6973
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6979
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6988
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:7006
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:7012
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:7019
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:7027
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:7033
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7041
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7047
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7055
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7061
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7070
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7074
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7079
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7083
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:7090
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1103:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7095
		{
			yyVAL.str = ""
		}
	case 1104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7099
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1105:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7105
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7118
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7129
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7133
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7139
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7145
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7151
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7158
		{
			yyVAL.str = ""
		}
	case 1113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7162
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7167
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7171
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7177
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7185
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7193
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7201
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = &tree.DropPitr{
				IfExists: ifExists,
				Name:     name,
				Internal: yyDollar[5].boolValUnion(),
			}

		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7214
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7219
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7231
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7242
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7351
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7355
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7361
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7374
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7378
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7384
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7397
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7401
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7405
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7410
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7414
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7420
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7427
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7433
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7442
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1140:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7449
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7460
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7464
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7470
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7479
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7483
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7487
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7492
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7496
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7500
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7504
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7510
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7541
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7545
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				} else if opt2.HnswM > 0 {
					opt1.HnswM = opt2.HnswM
				} else if opt2.HnswEfConstruction > 0 {
					opt1.HnswEfConstruction = opt2.HnswEfConstruction
				} else if opt2.HnswEfSearch > 0 {
					opt1.HnswEfSearch = opt2.HnswEfSearch
				} else if opt2.Async {
					opt1.Async = opt2.Async
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7579
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7585
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7597
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7603
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7609
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7615
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7621
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7627
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("M should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswM = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7638
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_CONSTRUCTION should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfConstruction = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7649
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_SEARCH should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfSearch = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7660
		{
			io := tree.NewIndexOption()
			io.Async = true
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7669
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7673
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7679
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7693
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7707
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7711
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7715
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7719
		{
			yyLOCAL = tree.INDEX_TYPE_HNSW
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7723
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7727
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7731
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7735
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7741
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7755
		{
			var t = tree.NewCloneDatabase()
			t.DstDatabase = tree.Identifier(yyDollar[4].str)
			t.SrcDatabase = tree.Identifier(yyDollar[6].str)
			t.AtTsExpr = yyDollar[7].atTimeStampUnion()
			t.ToAccountOpt = yyDollar[8].toAccountOptUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7765
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7769
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7780
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7784
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7789
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7793
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7798
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7802
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7808
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7812
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7818
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7827
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7836
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7842
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7846
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7852
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7863
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7869
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7887
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7905
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7923
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7939
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7943
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7950
		{
			t := tree.NewDataBranchCreateTable()
			t.CreateTable.Table = *yyDollar[5].tableNameUnion()
			t.CreateTable.LikeTableName = *yyDollar[7].tableNameUnion()
			t.CreateTable.IsAsLike = true
			t.SrcTable = *yyDollar[7].tableNameUnion()
			t.ToAccountOpt = yyDollar[8].toAccountOptUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7960
		{
			t := tree.NewDataBranchCreateDatabase()
			t.DstDatabase = tree.Identifier(yyDollar[4].str)
			t.SrcDatabase = tree.Identifier(yyDollar[6].str)
			t.AtTsExpr = yyDollar[8].atTimeStampUnion()
			t.ToAccountOpt = yyDollar[9].toAccountOptUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7969
		{
			t := tree.NewDataBranchDeleteTable()
			t.TableName = *yyDollar[5].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7975
		{
			t := tree.NewDataBranchDeleteDatabase()
			t.DatabaseName = tree.Identifier(yyDollar[5].str)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ToAccountOpt
//line mysql_sql.y:7983
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ToAccountOpt
//line mysql_sql.y:7987
		{
			yyLOCAL = &tree.ToAccountOpt{
				AccountName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7995
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8007
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8016
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8028
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8038
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8048
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8059
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8069
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8080
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8088
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8097
		{
			t := tree.NewCloneTable()
			t.CreateTable.Table = *yyDollar[5].tableNameUnion()
			t.CreateTable.LikeTableName = *yyDollar[7].tableNameUnion()
			t.CreateTable.IsAsLike = true
			t.SrcTable = *yyDollar[7].tableNameUnion()
			t.ToAccountOpt = yyDollar[8].toAccountOptUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8109
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8116
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8126
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8139
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8147
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8156
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8165
		{
			yyVAL.str = ""
		}
	case 1228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:8169
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8175
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8179
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8184
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8188
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:8195
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8207
		{
			yyVAL.str = ""
		}
	case 1235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8211
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1236:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8217
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8238
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8252
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8256
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8260
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8266
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8270
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8277
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8284
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8291
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8298
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8302
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8306
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8310
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8314
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8321
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8328
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8332
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8339
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8346
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8350
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8356
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8362
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8366
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8373
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8380
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8387
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8394
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8398
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8403
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8407
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8411
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8416
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8420
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8433
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8437
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8445
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8453
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8457
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8469
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8473
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8479
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8483
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8489
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8502
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8516
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8520
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8526
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8530
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8536
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8545
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8556
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8560
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8565
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8569
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8575
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8580
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8588
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8592
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8602
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8606
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8617
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8625
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8633
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8641
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8652
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8661
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8671
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8681
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8685
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8690
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8694
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8700
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8704
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8710
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8719
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8729
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8733
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8739
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8743
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8749
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8758
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8768
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8772
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8778
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8782
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8786
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8792
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8796
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8800
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8804
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8808
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8812
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8816
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8821
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8825
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8829
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8833
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8837
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8841
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8845
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8849
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8853
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8857
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8861
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8865
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8869
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8875
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8881
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8885
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8889
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8893
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8897
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8903
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8909
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8915
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8921
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8927
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8933
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8937
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8941
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8945
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8952
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8956
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8962
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8973
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8977
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8983
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8987
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8991
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8995
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8999
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:9003
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:9017
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:9021
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:9030
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:9036
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9044
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9048
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9055
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9064
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9072
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9079
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ASOFTIMESTAMP,
				Expr: tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9087
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9094
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9098
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9104
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9108
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9112
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9118
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9122
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9128
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9141
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9154
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9195
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9237
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9251
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9257
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9270
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9283
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9296
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9309
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9324
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9334
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9340
		{
			yyVAL.str = ""
		}
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9344
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9354
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9360
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9366
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9388
		{
			yyVAL.str = ""
		}
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9392
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9398
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9404
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9408
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9413
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9421
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9425
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9429
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9433
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9439
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9445
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9449
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9454
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9461
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9465
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9471
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9475
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9481
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9485
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9489
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9493
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9497
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9501
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9506
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9510
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9514
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9518
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9522
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9526
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9530
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9534
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9538
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9542
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9556
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9560
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9564
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9568
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9572
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9576
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9582
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9586
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9591
		{
			yyVAL.str = ""
		}
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9595
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9601
		{
			yyVAL.str = ""
		}
	case 1470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9605
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1471:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9611
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9628
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9635
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9642
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9649
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9656
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9665
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9671
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9677
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9681
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9685
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9689
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9693
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9698
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9705
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9709
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9713
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9718
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9722
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9726
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9730
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9734
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9739
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9743
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9748
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9752
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9768
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9774
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9778
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9782
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9786
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9790
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9794
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9798
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9802
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9806
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9810
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9814
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9818
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9822
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9828
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9832
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9836
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9840
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9844
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9848
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9852
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9856
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9860
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9864
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9906
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9910
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9914
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9919
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9927
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9931
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9935
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9939
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9943
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9953
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9957
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9961
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9965
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9969
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9973
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9977
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9981
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9994
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10000
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10009
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10018
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10029
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10039
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10049
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10058
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10068
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10078
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10088
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10097
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10107
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10111
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10116
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10120
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10126
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10130
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:10136
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10145
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10157
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10174
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10191
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10204
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10217
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10229
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10243
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10258
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10273
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10290
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10305
		{
		}
	case 1580:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10312
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10316
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10320
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10326
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10330
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10334
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10338
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10344
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10348
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10352
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10358
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10366
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10376
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10380
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10387
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10392
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10396
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10401
		{
			yyVAL.str = ","
		}
	case 1598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10405
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10410
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10414
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1601:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10419
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10426
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10452
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10464
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10476
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10487
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10498
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10509
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10519
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10529
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10540
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10551
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10562
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10573
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10584
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10595
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10606
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10617
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10628
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10639
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10650
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10661
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10672
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10683
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10694
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10718
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10727
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10736
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10745
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10754
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10765
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10774
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10784
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10793
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10802
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10811
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10820
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10832
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10843
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10856
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10868
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10891
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10927
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10940
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10953
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10965
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10974
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10982
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10990
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11003
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11012
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11023
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11034
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11043
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11055
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11065
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11075
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11084
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11095
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11104
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11114
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11123
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11132
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11142
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11146
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11152
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11156
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11175
		{
		}
	case 1713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:11177
		{
		}
	case 1748:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11219
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11231
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11235
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11239
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:11245
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11250
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11254
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11260
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11264
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11270
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11274
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11281
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11285
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11289
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11298
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11302
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11306
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11311
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11315
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11321
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11325
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11329
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11333
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11337
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11341
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11345
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11349
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11353
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11357
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11365
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11369
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11373
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11377
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11381
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11385
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11389
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11393
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11397
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11401
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11407
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11411
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11417
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11421
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11428
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11432
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11436
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11442
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11446
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11450
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11454
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11458
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11462
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11466
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11472
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11476
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11480
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11484
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11490
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11503
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11508
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11514
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11518
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11531
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11536
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11540
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11544
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11548
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11552
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11559
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11563
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11567
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11571
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11578
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11589
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11594
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11600
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11612
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11624
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11636
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11649
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11662
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11675
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11688
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11701
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11714
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11727
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11740
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11753
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11766
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11781
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1843:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11808
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1844:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11850
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1845:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11886
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1846:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11922
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11939
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11951
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11971
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11991
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12011
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12027
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12040
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12053
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1855:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12066
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12079
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12091
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12103
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12115
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12127
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12139
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12151
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1863:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12163
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1864:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12175
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12187
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1866:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12199
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1867:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12212
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1868:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12225
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1869:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12238
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12251
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1871:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12266
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1872:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12274
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1873:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12283
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1874:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12293
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1875:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12316
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1876:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12321
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1877:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12327
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1879:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12334
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1880:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12338
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1881:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12343
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1882:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12347
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1883:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12353
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1884:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12359
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1885:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12366
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1886:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12373
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1887:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12382
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1888:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12389
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1889:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12396
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1890:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12405
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1891:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12409
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1892:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12413
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1893:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12419
		{
		}
	case 1894:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12421
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1898:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12431
		{
			yyVAL.str = ""
		}
	case 1899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12435
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
