// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const APPLY = 57421
const DEDUP = 57422
const LOWER_THAN_ON = 57423
const ON = 57424
const USING = 57425
const SUBQUERY_AS_EXPR = 57426
const LOWER_THAN_STRING = 57427
const ID = 57428
const AT_ID = 57429
const AT_AT_ID = 57430
const STRING = 57431
const VALUE_ARG = 57432
const LIST_ARG = 57433
const COMMENT = 57434
const COMMENT_KEYWORD = 57435
const QUOTE_ID = 57436
const STAGE = 57437
const CREDENTIALS = 57438
const STAGES = 57439
const SNAPSHOTS = 57440
const INTEGRAL = 57441
const HEX = 57442
const FLOAT = 57443
const HEXNUM = 57444
const BIT_LITERAL = 57445
const NULL = 57446
const TRUE = 57447
const FALSE = 57448
const LOWER_THAN_CHARSET = 57449
const CHARSET = 57450
const UNIQUE = 57451
const KEY = 57452
const OR = 57453
const PIPE_CONCAT = 57454
const XOR = 57455
const AND = 57456
const NOT = 57457
const BETWEEN = 57458
const CASE = 57459
const WHEN = 57460
const THEN = 57461
const ELSE = 57462
const END = 57463
const ELSEIF = 57464
const LOWER_THAN_EQ = 57465
const LE = 57466
const GE = 57467
const NE = 57468
const NULL_SAFE_EQUAL = 57469
const IS = 57470
const LIKE = 57471
const REGEXP = 57472
const IN = 57473
const ASSIGNMENT = 57474
const ILIKE = 57475
const SHIFT_LEFT = 57476
const SHIFT_RIGHT = 57477
const DIV = 57478
const MOD = 57479
const UNARY = 57480
const COLLATE = 57481
const BINARY = 57482
const UNDERSCORE_BINARY = 57483
const INTERVAL = 57484
const OUT = 57485
const INOUT = 57486
const BEGIN = 57487
const START = 57488
const TRANSACTION = 57489
const COMMIT = 57490
const ROLLBACK = 57491
const WORK = 57492
const CONSISTENT = 57493
const SNAPSHOT = 57494
const SAVEPOINT = 57495
const CHAIN = 57496
const NO = 57497
const RELEASE = 57498
const PRIORITY = 57499
const QUICK = 57500
const BIT = 57501
const TINYINT = 57502
const SMALLINT = 57503
const MEDIUMINT = 57504
const INT = 57505
const INTEGER = 57506
const BIGINT = 57507
const INTNUM = 57508
const REAL = 57509
const DOUBLE = 57510
const FLOAT_TYPE = 57511
const DECIMAL = 57512
const NUMERIC = 57513
const DECIMAL_VALUE = 57514
const TIME = 57515
const TIMESTAMP = 57516
const DATETIME = 57517
const YEAR = 57518
const CHAR = 57519
const VARCHAR = 57520
const BOOL = 57521
const CHARACTER = 57522
const VARBINARY = 57523
const NCHAR = 57524
const TEXT = 57525
const TINYTEXT = 57526
const MEDIUMTEXT = 57527
const LONGTEXT = 57528
const DATALINK = 57529
const BLOB = 57530
const TINYBLOB = 57531
const MEDIUMBLOB = 57532
const LONGBLOB = 57533
const JSON = 57534
const ENUM = 57535
const UUID = 57536
const VECF32 = 57537
const VECF64 = 57538
const GEOMETRY = 57539
const POINT = 57540
const LINESTRING = 57541
const POLYGON = 57542
const GEOMETRYCOLLECTION = 57543
const MULTIPOINT = 57544
const MULTILINESTRING = 57545
const MULTIPOLYGON = 57546
const INT1 = 57547
const INT2 = 57548
const INT3 = 57549
const INT4 = 57550
const INT8 = 57551
const S3OPTION = 57552
const STAGEOPTION = 57553
const SQL_SMALL_RESULT = 57554
const SQL_BIG_RESULT = 57555
const SQL_BUFFER_RESULT = 57556
const LOW_PRIORITY = 57557
const HIGH_PRIORITY = 57558
const DELAYED = 57559
const CREATE = 57560
const ALTER = 57561
const DROP = 57562
const RENAME = 57563
const ANALYZE = 57564
const PHYPLAN = 57565
const ADD = 57566
const RETURNS = 57567
const SCHEMA = 57568
const TABLE = 57569
const SEQUENCE = 57570
const INDEX = 57571
const VIEW = 57572
const TO = 57573
const IGNORE = 57574
const IF = 57575
const PRIMARY = 57576
const COLUMN = 57577
const CONSTRAINT = 57578
const SPATIAL = 57579
const FULLTEXT = 57580
const FOREIGN = 57581
const KEY_BLOCK_SIZE = 57582
const SHOW = 57583
const DESCRIBE = 57584
const EXPLAIN = 57585
const DATE = 57586
const ESCAPE = 57587
const REPAIR = 57588
const OPTIMIZE = 57589
const TRUNCATE = 57590
const MAXVALUE = 57591
const PARTITION = 57592
const REORGANIZE = 57593
const LESS = 57594
const THAN = 57595
const PROCEDURE = 57596
const TRIGGER = 57597
const STATUS = 57598
const VARIABLES = 57599
const ROLE = 57600
const PROXY = 57601
const AVG_ROW_LENGTH = 57602
const STORAGE = 57603
const DISK = 57604
const MEMORY = 57605
const CHECKSUM = 57606
const COMPRESSION = 57607
const DATA = 57608
const DIRECTORY = 57609
const DELAY_KEY_WRITE = 57610
const ENCRYPTION = 57611
const ENGINE = 57612
const MAX_ROWS = 57613
const MIN_ROWS = 57614
const PACK_KEYS = 57615
const ROW_FORMAT = 57616
const STATS_AUTO_RECALC = 57617
const STATS_PERSISTENT = 57618
const STATS_SAMPLE_PAGES = 57619
const DYNAMIC = 57620
const COMPRESSED = 57621
const REDUNDANT = 57622
const COMPACT = 57623
const FIXED = 57624
const COLUMN_FORMAT = 57625
const AUTO_RANDOM = 57626
const ENGINE_ATTRIBUTE = 57627
const SECONDARY_ENGINE_ATTRIBUTE = 57628
const INSERT_METHOD = 57629
const RESTRICT = 57630
const CASCADE = 57631
const ACTION = 57632
const PARTIAL = 57633
const SIMPLE = 57634
const CHECK = 57635
const ENFORCED = 57636
const RANGE = 57637
const LIST = 57638
const ALGORITHM = 57639
const LINEAR = 57640
const PARTITIONS = 57641
const SUBPARTITION = 57642
const SUBPARTITIONS = 57643
const CLUSTER = 57644
const TYPE = 57645
const ANY = 57646
const SOME = 57647
const EXTERNAL = 57648
const LOCALFILE = 57649
const URL = 57650
const PREPARE = 57651
const DEALLOCATE = 57652
const RESET = 57653
const EXTENSION = 57654
const RETENTION = 57655
const PERIOD = 57656
const INCREMENT = 57657
const CYCLE = 57658
const MINVALUE = 57659
const PUBLICATION = 57660
const SUBSCRIPTIONS = 57661
const PUBLICATIONS = 57662
const PROPERTIES = 57663
const PARSER = 57664
const VISIBLE = 57665
const INVISIBLE = 57666
const BTREE = 57667
const HASH = 57668
const RTREE = 57669
const BSI = 57670
const IVFFLAT = 57671
const MASTER = 57672
const ZONEMAP = 57673
const LEADING = 57674
const BOTH = 57675
const TRAILING = 57676
const UNKNOWN = 57677
const LISTS = 57678
const OP_TYPE = 57679
const REINDEX = 57680
const EXPIRE = 57681
const ACCOUNT = 57682
const ACCOUNTS = 57683
const UNLOCK = 57684
const DAY = 57685
const NEVER = 57686
const PUMP = 57687
const MYSQL_COMPATIBILITY_MODE = 57688
const UNIQUE_CHECK_ON_AUTOINCR = 57689
const MODIFY = 57690
const CHANGE = 57691
const SECOND = 57692
const ASCII = 57693
const COALESCE = 57694
const COLLATION = 57695
const HOUR = 57696
const MICROSECOND = 57697
const MINUTE = 57698
const MONTH = 57699
const QUARTER = 57700
const REPEAT = 57701
const REVERSE = 57702
const ROW_COUNT = 57703
const WEEK = 57704
const REVOKE = 57705
const FUNCTION = 57706
const PRIVILEGES = 57707
const TABLESPACE = 57708
const EXECUTE = 57709
const SUPER = 57710
const GRANT = 57711
const OPTION = 57712
const REFERENCES = 57713
const REPLICATION = 57714
const SLAVE = 57715
const CLIENT = 57716
const USAGE = 57717
const RELOAD = 57718
const FILE = 57719
const TEMPORARY = 57720
const ROUTINE = 57721
const EVENT = 57722
const SHUTDOWN = 57723
const NULLX = 57724
const AUTO_INCREMENT = 57725
const APPROXNUM = 57726
const SIGNED = 57727
const UNSIGNED = 57728
const ZEROFILL = 57729
const ENGINES = 57730
const LOW_CARDINALITY = 57731
const AUTOEXTEND_SIZE = 57732
const ADMIN_NAME = 57733
const RANDOM = 57734
const SUSPEND = 57735
const ATTRIBUTE = 57736
const HISTORY = 57737
const REUSE = 57738
const CURRENT = 57739
const OPTIONAL = 57740
const FAILED_LOGIN_ATTEMPTS = 57741
const PASSWORD_LOCK_TIME = 57742
const UNBOUNDED = 57743
const SECONDARY = 57744
const RESTRICTED = 57745
const USER = 57746
const IDENTIFIED = 57747
const CIPHER = 57748
const ISSUER = 57749
const X509 = 57750
const SUBJECT = 57751
const SAN = 57752
const REQUIRE = 57753
const SSL = 57754
const NONE = 57755
const PASSWORD = 57756
const SHARED = 57757
const EXCLUSIVE = 57758
const MAX_QUERIES_PER_HOUR = 57759
const MAX_UPDATES_PER_HOUR = 57760
const MAX_CONNECTIONS_PER_HOUR = 57761
const MAX_USER_CONNECTIONS = 57762
const FORMAT = 57763
const VERBOSE = 57764
const CONNECTION = 57765
const TRIGGERS = 57766
const PROFILES = 57767
const LOAD = 57768
const INLINE = 57769
const INFILE = 57770
const TERMINATED = 57771
const OPTIONALLY = 57772
const ENCLOSED = 57773
const ESCAPED = 57774
const STARTING = 57775
const LINES = 57776
const ROWS = 57777
const IMPORT = 57778
const DISCARD = 57779
const JSONTYPE = 57780
const MODUMP = 57781
const OVER = 57782
const PRECEDING = 57783
const FOLLOWING = 57784
const GROUPS = 57785
const DATABASES = 57786
const TABLES = 57787
const SEQUENCES = 57788
const EXTENDED = 57789
const FULL = 57790
const PROCESSLIST = 57791
const FIELDS = 57792
const COLUMNS = 57793
const OPEN = 57794
const ERRORS = 57795
const WARNINGS = 57796
const INDEXES = 57797
const SCHEMAS = 57798
const NODE = 57799
const LOCKS = 57800
const ROLES = 57801
const TABLE_NUMBER = 57802
const COLUMN_NUMBER = 57803
const TABLE_VALUES = 57804
const TABLE_SIZE = 57805
const NAMES = 57806
const GLOBAL = 57807
const PERSIST = 57808
const SESSION = 57809
const ISOLATION = 57810
const LEVEL = 57811
const READ = 57812
const WRITE = 57813
const ONLY = 57814
const REPEATABLE = 57815
const COMMITTED = 57816
const UNCOMMITTED = 57817
const SERIALIZABLE = 57818
const LOCAL = 57819
const EVENTS = 57820
const PLUGINS = 57821
const CURRENT_TIMESTAMP = 57822
const DATABASE = 57823
const CURRENT_TIME = 57824
const LOCALTIME = 57825
const LOCALTIMESTAMP = 57826
const UTC_DATE = 57827
const UTC_TIME = 57828
const UTC_TIMESTAMP = 57829
const REPLACE = 57830
const CONVERT = 57831
const SEPARATOR = 57832
const TIMESTAMPDIFF = 57833
const CURRENT_DATE = 57834
const CURRENT_USER = 57835
const CURRENT_ROLE = 57836
const SECOND_MICROSECOND = 57837
const MINUTE_MICROSECOND = 57838
const MINUTE_SECOND = 57839
const HOUR_MICROSECOND = 57840
const HOUR_SECOND = 57841
const HOUR_MINUTE = 57842
const DAY_MICROSECOND = 57843
const DAY_SECOND = 57844
const DAY_MINUTE = 57845
const DAY_HOUR = 57846
const YEAR_MONTH = 57847
const SQL_TSI_HOUR = 57848
const SQL_TSI_DAY = 57849
const SQL_TSI_WEEK = 57850
const SQL_TSI_MONTH = 57851
const SQL_TSI_QUARTER = 57852
const SQL_TSI_YEAR = 57853
const SQL_TSI_SECOND = 57854
const SQL_TSI_MINUTE = 57855
const RECURSIVE = 57856
const CONFIG = 57857
const DRAINER = 57858
const SOURCE = 57859
const STREAM = 57860
const HEADERS = 57861
const CONNECTOR = 57862
const CONNECTORS = 57863
const DAEMON = 57864
const PAUSE = 57865
const CANCEL = 57866
const TASK = 57867
const RESUME = 57868
const MATCH = 57869
const AGAINST = 57870
const BOOLEAN = 57871
const LANGUAGE = 57872
const WITH = 57873
const QUERY = 57874
const EXPANSION = 57875
const WITHOUT = 57876
const VALIDATION = 57877
const UPGRADE = 57878
const RETRY = 57879
const ADDDATE = 57880
const BIT_AND = 57881
const BIT_OR = 57882
const BIT_XOR = 57883
const CAST = 57884
const COUNT = 57885
const APPROX_COUNT = 57886
const APPROX_COUNT_DISTINCT = 57887
const SERIAL_EXTRACT = 57888
const APPROX_PERCENTILE = 57889
const CURDATE = 57890
const CURTIME = 57891
const DATE_ADD = 57892
const DATE_SUB = 57893
const EXTRACT = 57894
const GROUP_CONCAT = 57895
const MAX = 57896
const MID = 57897
const MIN = 57898
const NOW = 57899
const POSITION = 57900
const SESSION_USER = 57901
const STD = 57902
const STDDEV = 57903
const MEDIAN = 57904
const CLUSTER_CENTERS = 57905
const KMEANS = 57906
const STDDEV_POP = 57907
const STDDEV_SAMP = 57908
const SUBDATE = 57909
const SUBSTR = 57910
const SUBSTRING = 57911
const SUM = 57912
const SYSDATE = 57913
const SYSTEM_USER = 57914
const TRANSLATE = 57915
const TRIM = 57916
const VARIANCE = 57917
const VAR_POP = 57918
const VAR_SAMP = 57919
const AVG = 57920
const RANK = 57921
const ROW_NUMBER = 57922
const DENSE_RANK = 57923
const BIT_CAST = 57924
const BITMAP_BIT_POSITION = 57925
const BITMAP_BUCKET_NUMBER = 57926
const BITMAP_COUNT = 57927
const BITMAP_CONSTRUCT_AGG = 57928
const BITMAP_OR_AGG = 57929
const NEXTVAL = 57930
const SETVAL = 57931
const CURRVAL = 57932
const LASTVAL = 57933
const ARROW = 57934
const ROW = 57935
const OUTFILE = 57936
const HEADER = 57937
const MAX_FILE_SIZE = 57938
const FORCE_QUOTE = 57939
const PARALLEL = 57940
const STRICT = 57941
const UNUSED = 57942
const BINDINGS = 57943
const DO = 57944
const DECLARE = 57945
const LOOP = 57946
const WHILE = 57947
const LEAVE = 57948
const ITERATE = 57949
const UNTIL = 57950
const CALL = 57951
const PREV = 57952
const SLIDING = 57953
const FILL = 57954
const SPBEGIN = 57955
const BACKEND = 57956
const SERVERS = 57957
const HANDLER = 57958
const PERCENT = 57959
const SAMPLE = 57960
const MO_TS = 57961
const PITR = 57962
const CDC = 57963
const GROUPING = 57964
const SETS = 57965
const CUBE = 57966
const ROLLUP = 57967
const LOGSERVICE = 57968
const REPLICAS = 57969
const STORES = 57970
const SETTINGS = 57971
const KILL = 57972
const BACKUP = 57973
const FILESYSTEM = 57974
const PARALLELISM = 57975
const RESTORE = 57976
const QUERY_RESULT = 57977

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"SAVEPOINT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12739

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 141,
	11, 800,
	22, 800,
	-2, 793,
	-1, 166,
	244, 1222,
	246, 1121,
	-2, 1168,
	-1, 193,
	43, 623,
	246, 623,
	273, 630,
	274, 630,
	472, 623,
	-2, 658,
	-1, 233,
	656, 1993,
	-2, 527,
	-1, 541,
	656, 2116,
	-2, 407,
	-1, 599,
	656, 2175,
	-2, 405,
	-1, 600,
	656, 2176,
	-2, 406,
	-1, 601,
	656, 2177,
	-2, 408,
	-1, 740,
	325, 176,
	444, 176,
	445, 176,
	-2, 1895,
	-1, 807,
	85, 1680,
	-2, 2052,
	-1, 808,
	85, 1699,
	-2, 2023,
	-1, 812,
	85, 1700,
	-2, 2051,
	-1, 846,
	85, 1607,
	-2, 2254,
	-1, 847,
	85, 1608,
	-2, 2253,
	-1, 848,
	85, 1609,
	-2, 2243,
	-1, 849,
	85, 2215,
	-2, 2236,
	-1, 850,
	85, 2216,
	-2, 2237,
	-1, 851,
	85, 2217,
	-2, 2245,
	-1, 852,
	85, 2218,
	-2, 2225,
	-1, 853,
	85, 2219,
	-2, 2234,
	-1, 854,
	85, 2220,
	-2, 2246,
	-1, 855,
	85, 2221,
	-2, 2247,
	-1, 856,
	85, 2222,
	-2, 2252,
	-1, 857,
	85, 2223,
	-2, 2257,
	-1, 858,
	85, 2224,
	-2, 2258,
	-1, 859,
	85, 1676,
	-2, 2090,
	-1, 860,
	85, 1677,
	-2, 1879,
	-1, 861,
	85, 1678,
	-2, 2099,
	-1, 862,
	85, 1679,
	-2, 1888,
	-1, 864,
	85, 1682,
	-2, 1896,
	-1, 866,
	85, 1684,
	-2, 2123,
	-1, 868,
	85, 1687,
	-2, 1915,
	-1, 870,
	85, 1689,
	-2, 2135,
	-1, 871,
	85, 1690,
	-2, 2134,
	-1, 872,
	85, 1691,
	-2, 1960,
	-1, 873,
	85, 1692,
	-2, 2047,
	-1, 876,
	85, 1695,
	-2, 2146,
	-1, 878,
	85, 1697,
	-2, 2149,
	-1, 879,
	85, 1698,
	-2, 2151,
	-1, 880,
	85, 1701,
	-2, 2159,
	-1, 881,
	85, 1702,
	-2, 2032,
	-1, 882,
	85, 1703,
	-2, 2077,
	-1, 883,
	85, 1704,
	-2, 2042,
	-1, 884,
	85, 1705,
	-2, 2067,
	-1, 895,
	85, 1585,
	-2, 2248,
	-1, 896,
	85, 1586,
	-2, 2249,
	-1, 897,
	85, 1587,
	-2, 2250,
	-1, 1001,
	467, 658,
	468, 658,
	-2, 624,
	-1, 1052,
	127, 1879,
	138, 1879,
	158, 1879,
	-2, 1853,
	-1, 1169,
	22, 827,
	-2, 776,
	-1, 1279,
	11, 800,
	22, 800,
	-2, 1462,
	-1, 1363,
	22, 827,
	-2, 776,
	-1, 1721,
	85, 1752,
	-2, 2049,
	-1, 1722,
	85, 1753,
	-2, 2050,
	-1, 1897,
	86, 993,
	-2, 999,
	-1, 2350,
	110, 1160,
	154, 1160,
	194, 1160,
	197, 1160,
	286, 1160,
	-2, 1153,
	-1, 2511,
	11, 800,
	22, 800,
	-2, 934,
	-1, 2545,
	86, 1839,
	159, 1839,
	-2, 2034,
	-1, 2546,
	86, 1839,
	159, 1839,
	-2, 2033,
	-1, 2547,
	86, 1815,
	159, 1815,
	-2, 2020,
	-1, 2548,
	86, 1816,
	159, 1816,
	-2, 2025,
	-1, 2549,
	86, 1817,
	159, 1817,
	-2, 1948,
	-1, 2550,
	86, 1818,
	159, 1818,
	-2, 1942,
	-1, 2551,
	86, 1819,
	159, 1819,
	-2, 1869,
	-1, 2552,
	86, 1820,
	159, 1820,
	-2, 2022,
	-1, 2553,
	86, 1821,
	159, 1821,
	-2, 1946,
	-1, 2554,
	86, 1822,
	159, 1822,
	-2, 1941,
	-1, 2555,
	86, 1823,
	159, 1823,
	-2, 1929,
	-1, 2556,
	86, 1839,
	159, 1839,
	-2, 1930,
	-1, 2557,
	86, 1839,
	159, 1839,
	-2, 1931,
	-1, 2559,
	86, 1828,
	159, 1828,
	-2, 2067,
	-1, 2560,
	86, 1805,
	159, 1805,
	-2, 2052,
	-1, 2561,
	86, 1837,
	159, 1837,
	-2, 2023,
	-1, 2562,
	86, 1837,
	159, 1837,
	-2, 2051,
	-1, 2563,
	86, 1837,
	159, 1837,
	-2, 1897,
	-1, 2564,
	86, 1835,
	159, 1835,
	-2, 2042,
	-1, 2565,
	86, 1832,
	159, 1832,
	-2, 1920,
	-1, 2566,
	85, 1786,
	86, 1786,
	159, 1786,
	402, 1786,
	403, 1786,
	404, 1786,
	-2, 1868,
	-1, 2567,
	85, 1787,
	86, 1787,
	159, 1787,
	402, 1787,
	403, 1787,
	404, 1787,
	-2, 1870,
	-1, 2568,
	85, 1788,
	86, 1788,
	159, 1788,
	402, 1788,
	403, 1788,
	404, 1788,
	-2, 2095,
	-1, 2569,
	85, 1790,
	86, 1790,
	159, 1790,
	402, 1790,
	403, 1790,
	404, 1790,
	-2, 2024,
	-1, 2570,
	85, 1792,
	86, 1792,
	159, 1792,
	402, 1792,
	403, 1792,
	404, 1792,
	-2, 2003,
	-1, 2571,
	85, 1794,
	86, 1794,
	159, 1794,
	402, 1794,
	403, 1794,
	404, 1794,
	-2, 1947,
	-1, 2572,
	85, 1796,
	86, 1796,
	159, 1796,
	402, 1796,
	403, 1796,
	404, 1796,
	-2, 1925,
	-1, 2573,
	85, 1797,
	86, 1797,
	159, 1797,
	402, 1797,
	403, 1797,
	404, 1797,
	-2, 1926,
	-1, 2574,
	85, 1799,
	86, 1799,
	159, 1799,
	402, 1799,
	403, 1799,
	404, 1799,
	-2, 1867,
	-1, 2575,
	86, 1842,
	159, 1842,
	402, 1842,
	403, 1842,
	404, 1842,
	-2, 1902,
	-1, 2576,
	86, 1842,
	159, 1842,
	402, 1842,
	403, 1842,
	404, 1842,
	-2, 1916,
	-1, 2577,
	86, 1845,
	159, 1845,
	402, 1845,
	403, 1845,
	404, 1845,
	-2, 1898,
	-1, 2578,
	86, 1845,
	159, 1845,
	402, 1845,
	403, 1845,
	404, 1845,
	-2, 1963,
	-1, 2579,
	86, 1842,
	159, 1842,
	402, 1842,
	403, 1842,
	404, 1842,
	-2, 1985,
	-1, 2796,
	110, 1160,
	154, 1160,
	194, 1160,
	197, 1160,
	286, 1160,
	-2, 1154,
	-1, 2814,
	83, 720,
	159, 720,
	-2, 1338,
	-1, 3238,
	197, 1160,
	310, 1425,
	-2, 1397,
	-1, 3420,
	110, 1160,
	154, 1160,
	194, 1160,
	197, 1160,
	-2, 1278,
	-1, 3422,
	110, 1160,
	154, 1160,
	194, 1160,
	197, 1160,
	-2, 1278,
	-1, 3434,
	83, 720,
	159, 720,
	-2, 1338,
	-1, 3455,
	197, 1160,
	310, 1425,
	-2, 1398,
	-1, 3607,
	110, 1160,
	154, 1160,
	194, 1160,
	197, 1160,
	-2, 1279,
	-1, 3635,
	86, 1240,
	159, 1240,
	-2, 1160,
	-1, 3779,
	86, 1240,
	159, 1240,
	-2, 1160,
	-1, 3943,
	86, 1244,
	159, 1244,
	-2, 1160,
	-1, 3994,
	86, 1245,
	159, 1245,
	-2, 1160,
}

const yyPrivate = 57344

const yyLast = 54402

var yyAct = [...]int{
	774, 750, 4044, 2844, 776, 4016, 222, 4036, 1623, 1982,
	3947, 1701, 3539, 3953, 3440, 3954, 3845, 3946, 3779, 3224,
	759, 3868, 3257, 3826, 3903, 3663, 3332, 3757, 3469, 1697,
	752, 3727, 1763, 1535, 2838, 3817, 1315, 3333, 3846, 1761,
	3778, 3595, 2756, 3696, 804, 2841, 640, 1467, 1170, 1051,
	3543, 3748, 3827, 1624, 3829, 1930, 3402, 3233, 3407, 2397,
	1473, 1748, 37, 658, 3534, 664, 664, 3616, 1164, 2817,
	3456, 664, 682, 691, 3604, 3181, 691, 1704, 3195, 748,
	3577, 3423, 3609, 3330, 3157, 2956, 2957, 2080, 3394, 2093,
	207, 3184, 2933, 2867, 2955, 2077, 3425, 2543, 3253, 3235,
	3242, 2116, 2952, 703, 3374, 3025, 2191, 2149, 3318, 2042,
	2669, 2541, 2505, 2400, 2984, 3297, 1942, 2785, 1766, 3164,
	3204, 3162, 3160, 2634, 2944, 3159, 699, 2361, 1160, 3155,
	2797, 2305, 140, 36, 688, 1528, 747, 2430, 742, 3158,
	3241, 2329, 3132, 1601, 2187, 1608, 2304, 3072, 2174, 2998,
	2613, 2158, 932, 2150, 2157, 1859, 68, 2595, 2073, 2122,
	3008, 1612, 1616, 1613, 2506, 2046, 2489, 2043, 2869, 973,
	2774, 2484, 2186, 1972, 2849, 2769, 2398, 2809, 2350, 218,
	8, 2360, 217, 7, 1906, 6, 2539, 1400, 1108, 2221,
	1045, 1433, 743, 1762, 1695, 751, 2188, 1439, 640, 1575,
	1544, 657, 1513, 1644, 1507, 741, 2341, 2706, 1700, 1755,
	1735, 760, 2344, 1686, 2393, 2156, 2138, 1186, 1582, 2112,
	696, 1902, 222, 2153, 222, 1044, 1099, 1100, 2513, 1694,
	1627, 1941, 1512, 664, 972, 1905, 639, 673, 2485, 1509,
	1566, 899, 1767, 1010, 1477, 27, 705, 749, 1574, 1452,
	949, 1468, 690, 15, 23, 114, 1361, 1476, 706, 208,
	1456, 200, 996, 955, 16, 2705, 1385, 24, 1443, 204,
	970, 1316, 17, 10, 2195, 14, 702, 3836, 901, 902,
	3745, 2742, 33, 1247, 1248, 1249, 1246, 2742, 2742, 743,
	660, 1247, 1248, 1249, 1246, 1096, 676, 1247, 1248, 1249,
	1246, 3437, 3211, 2515, 3042, 3041, 2205, 1078, 3570, 1165,
	3410, 963, 1095, 964, 1097, 1166, 3325, 687, 2657, 1872,
	2598, 2601, 2599, 1589, 2596, 686, 1585, 1091, 694, 1092,
	669, 206, 659, 2303, 1057, 1059, 683, 1511, 1380, 3804,
	1436, 1437, 1438, 921, 919, 1636, 1354, 685, 1092, 2309,
	1873, 1092, 944, 3142, 684, 1030, 665, 2313, 1060, 1383,
	3125, 3122, 3127, 3124, 4028, 1490, 958, 1635, 954, 1866,
	2734, 2732, 205, 64, 196, 167, 1165, 1376, 3532, 1079,
	1587, 3021, 1247, 1248, 1249, 1246, 8, 3019, 2127, 7,
	197, 3812, 1090, 3703, 3697, 3535, 3331, 188, 2171, 3831,
	2152, 198, 1247, 1248, 1249, 1246, 900, 3101, 2144, 2438,
	4050, 3825, 1310, 4025, 2736, 3711, 3549, 1391, 911, 1245,
	139, 3764, 205, 205, 935, 3982, 3578, 1209, 3424, 2352,
	2643, 2192, 3582, 1622, 205, 125, 205, 64, 196, 167,
	1631, 1642, 920, 918, 201, 205, 3823, 3732, 205, 64,
	196, 167, 3929, 1073, 1068, 1063, 1067, 1071, 3709, 205,
	64, 196, 167, 205, 2687, 3765, 2651, 3879, 1552, 1390,
	1628, 1639, 1386, 1389, 1388, 921, 919, 1061, 1392, 1055,
	1056, 1076, 205, 701, 3099, 1066, 2351, 1408, 1425, 2950,
	2203, 2345, 1801, 139, 1630, 1641, 205, 2533, 960, 1244,
	953, 2534, 1025, 1023, 2803, 1024, 201, 205, 201, 957,
	956, 3044, 1181, 2758, 1667, 1875, 2090, 201, 2992, 2993,
	201, 147, 148, 1653, 149, 150, 938, 912, 2991, 151,
	945, 201, 152, 916, 2056, 201, 1074, 3228, 205, 64,
	196, 167, 3126, 3123, 3033, 1077, 1486, 3734, 2614, 1487,
	952, 2759, 2057, 2058, 2801, 139, 1224, 1884, 1885, 1225,
	1956, 205, 64, 196, 167, 1019, 1464, 1064, 201, 962,
	205, 64, 196, 167, 951, 1474, 1475, 1217, 950, 201,
	1219, 1514, 2520, 1516, 937, 2519, 1687, 1227, 2521, 1691,
	943, 1075, 1703, 1031, 166, 194, 203, 195, 123, 1242,
	3957, 3958, 1178, 1054, 2804, 2292, 2771, 1237, 1220, 1053,
	201, 3834, 941, 1690, 3926, 1027, 2772, 193, 187, 186,
	3833, 1407, 3559, 2737, 70, 1588, 1586, 3834, 3917, 3832,
	3226, 1065, 890, 201, 889, 891, 892, 1489, 893, 894,
	3922, 1472, 201, 3981, 1707, 1471, 1474, 1475, 3833, 3916,
	961, 3832, 3915, 3334, 3908, 4020, 4021, 3905, 166, 1676,
	203, 3905, 664, 664, 3815, 2770, 3027, 3026, 3028, 1222,
	3700, 1189, 1192, 664, 1174, 3334, 942, 1189, 1192, 1029,
	2888, 193, 2638, 1175, 2207, 189, 190, 191, 2074, 2064,
	1213, 3177, 2760, 691, 691, 3842, 664, 3931, 3932, 1692,
	3818, 3819, 3820, 3821, 3347, 1682, 1173, 3395, 1072, 2199,
	3927, 3928, 2479, 3400, 3736, 3737, 1215, 2777, 199, 2945,
	3587, 3062, 2473, 1689, 3175, 2340, 2135, 961, 1218, 1221,
	1595, 1594, 2761, 1223, 1240, 1241, 1102, 3481, 2735, 135,
	688, 688, 688, 192, 1069, 136, 2204, 1070, 3924, 3060,
	1239, 2648, 2436, 959, 1214, 192, 1028, 3956, 1212, 1287,
	1379, 3533, 3558, 1706, 1705, 1500, 3020, 2476, 2477, 1462,
	3560, 2088, 2089, 3835, 1409, 2199, 3744, 3350, 2051, 2939,
	3172, 3173, 2475, 3066, 2741, 3741, 3584, 1184, 3171, 700,
	2536, 2754, 948, 3182, 1167, 3256, 3174, 1166, 1166, 3378,
	1488, 2068, 137, 3989, 1204, 1166, 1174, 1281, 3690, 3496,
	1226, 2482, 1637, 1057, 1059, 63, 2193, 2310, 1874, 2193,
	2193, 1235, 1236, 2182, 1234, 3043, 3719, 3550, 3720, 2755,
	656, 1216, 3230, 3040, 3193, 914, 1319, 1060, 1320, 2226,
	1688, 3205, 2194, 663, 663, 1092, 2810, 1080, 1062, 671,
	1092, 1092, 1092, 3254, 3255, 1092, 1092, 737, 2935, 3861,
	739, 2210, 2212, 2213, 65, 738, 3769, 3856, 3763, 2206,
	1191, 1190, 1166, 915, 1180, 3761, 1191, 1190, 689, 3493,
	2468, 693, 3722, 3486, 692, 2948, 1057, 1059, 2597, 689,
	2347, 3133, 936, 934, 3847, 1026, 3863, 3441, 3869, 145,
	202, 3691, 146, 3225, 3169, 3930, 3183, 168, 1590, 2843,
	1060, 1451, 61, 3448, 3721, 3731, 1382, 2325, 1384, 1474,
	1475, 3259, 3387, 687, 687, 687, 3385, 1169, 3146, 3710,
	1396, 686, 686, 686, 1399, 2733, 1193, 900, 1405, 658,
	65, 2471, 683, 683, 683, 1197, 1198, 1359, 1168, 1056,
	1364, 65, 1162, 685, 685, 685, 1201, 168, 168, 3583,
	684, 684, 684, 1677, 202, 3497, 1678, 4056, 689, 168,
	1787, 168, 973, 1288, 1177, 1179, 1182, 1203, 138, 45,
	168, 3735, 1387, 168, 3841, 62, 3654, 1183, 3183, 5,
	3386, 689, 2448, 2652, 168, 1463, 1876, 4039, 168, 2447,
	689, 3546, 1283, 1284, 1285, 1286, 142, 143, 3178, 1195,
	144, 671, 1474, 1475, 917, 1229, 2536, 168, 1230, 3664,
	3665, 3666, 3670, 3668, 3669, 3667, 664, 3770, 2075, 1502,
	65, 168, 3738, 664, 2776, 2946, 3762, 640, 640, 3063,
	2783, 2403, 168, 1470, 3649, 1449, 1232, 640, 640, 2469,
	2470, 1539, 1539, 65, 664, 1524, 2839, 2840, 3923, 2843,
	1523, 2416, 65, 3231, 1466, 1465, 1448, 2396, 2419, 2889,
	1202, 2890, 2891, 168, 3643, 691, 1567, 658, 1447, 3870,
	1537, 1537, 1578, 1578, 3783, 1541, 3749, 2065, 1331, 1332,
	1020, 2780, 2781, 222, 3588, 963, 168, 964, 3234, 3945,
	1161, 3121, 640, 1683, 1546, 168, 2779, 2211, 3170, 2789,
	2792, 2793, 2794, 2790, 2791, 3258, 1713, 1716, 1717, 2439,
	3426, 1278, 2396, 1402, 1403, 2418, 3530, 1714, 1228, 1412,
	1413, 1414, 1415, 1416, 3191, 1418, 1401, 1783, 4040, 3715,
	1406, 1424, 3337, 3828, 1780, 1501, 701, 3902, 1782, 1779,
	1781, 1785, 1786, 2413, 1620, 1510, 1784, 926, 1363, 1625,
	1209, 3250, 3003, 3004, 3137, 2644, 1634, 1233, 2525, 2434,
	2417, 2196, 1365, 2063, 1022, 1442, 2040, 1021, 3254, 3255,
	1398, 2402, 1450, 1417, 1533, 1534, 2404, 2406, 3288, 1460,
	2986, 2988, 1231, 3065, 1423, 1665, 1422, 1479, 1480, 2067,
	1482, 1483, 1421, 1484, 1411, 2324, 1420, 1032, 930, 1539,
	3388, 1539, 1174, 928, 927, 695, 3782, 1643, 3251, 2747,
	967, 968, 969, 1629, 2208, 2209, 3656, 1518, 1520, 2222,
	1640, 1020, 1453, 1457, 1457, 1457, 3375, 1531, 1532, 2886,
	2405, 1435, 1432, 688, 1702, 1430, 688, 688, 1445, 1208,
	1458, 1459, 1878, 1599, 2751, 1602, 1603, 1453, 1453, 1675,
	2917, 1478, 1491, 1492, 1481, 2317, 3192, 1604, 1605, 1596,
	1395, 4037, 4038, 1887, 965, 2433, 1610, 1611, 1568, 1539,
	3944, 1020, 3650, 3651, 1660, 1661, 1410, 3074, 3073, 929,
	1888, 1633, 1591, 933, 2319, 2318, 1174, 1765, 1522, 3568,
	1790, 1791, 1792, 1793, 1794, 1795, 1788, 1789, 1749, 1796,
	1797, 1814, 1800, 1615, 1618, 1022, 1619, 1060, 1021, 1559,
	1815, 2407, 669, 926, 1060, 3139, 1547, 1565, 3645, 1553,
	2316, 1579, 3644, 1822, 1886, 1824, 922, 1825, 1826, 1827,
	1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732,
	1733, 1734, 1580, 962, 2460, 1699, 1746, 1747, 923, 1804,
	1805, 1806, 1715, 2987, 3617, 1022, 2412, 3719, 1021, 3720,
	2410, 4052, 1820, 1171, 925, 1821, 3338, 1664, 1174, 928,
	927, 3210, 2908, 2909, 1877, 3714, 1663, 4058, 1880, 1718,
	1882, 2815, 1834, 1835, 2115, 1680, 1393, 1394, 1889, 1891,
	4046, 1892, 4034, 1894, 1895, 1823, 2260, 1857, 1567, 2259,
	1868, 1685, 1856, 1903, 1539, 1908, 1909, 1696, 1911, 1502,
	664, 1799, 1646, 3722, 3252, 664, 687, 3912, 1539, 687,
	687, 1245, 973, 1651, 686, 1931, 1654, 686, 686, 2376,
	663, 1163, 1673, 3294, 2201, 683, 2748, 1539, 683, 683,
	1860, 1172, 1674, 1502, 1693, 3721, 685, 2816, 682, 685,
	685, 1670, 1813, 684, 1672, 2503, 684, 684, 1698, 1671,
	1668, 1033, 1669, 4047, 1200, 3997, 2536, 1652, 1955, 1879,
	1655, 1656, 1245, 2343, 1737, 3996, 3290, 1962, 1962, 1209,
	1502, 2616, 1502, 1502, 1444, 3968, 664, 664, 3391, 2029,
	1903, 2033, 1684, 1444, 1539, 2037, 2038, 3349, 2677, 2907,
	2053, 3965, 640, 3959, 2918, 2920, 2921, 2922, 2919, 3941,
	1910, 1245, 1744, 1745, 2297, 2332, 640, 3896, 1539, 1247,
	1248, 1249, 1246, 2816, 3895, 1912, 2113, 1152, 1148, 1149,
	1150, 1151, 1959, 2682, 3889, 2681, 2680, 2678, 2333, 2334,
	3864, 3852, 3802, 1209, 2643, 664, 1903, 1539, 3997, 2098,
	3263, 664, 664, 664, 699, 699, 3801, 1863, 3969, 3261,
	3131, 2108, 2109, 2110, 2111, 2375, 1828, 3129, 2117, 1207,
	1984, 1083, 1088, 1089, 3966, 222, 2236, 3796, 222, 222,
	2504, 222, 3942, 2504, 2091, 2031, 1899, 1900, 1901, 3006,
	1245, 2342, 1858, 2763, 3795, 2738, 1965, 1245, 1914, 1915,
	1916, 1917, 3794, 1206, 2679, 2633, 1864, 2236, 904, 905,
	906, 907, 1907, 2201, 3853, 3803, 2403, 2406, 2069, 2083,
	2084, 1814, 1814, 2160, 3793, 2504, 1923, 3773, 3772, 2365,
	3747, 1171, 1814, 1814, 3294, 2621, 1939, 1940, 1898, 2176,
	2100, 2101, 2102, 2192, 2060, 1936, 2062, 2055, 3502, 3450,
	2236, 2097, 3416, 1949, 1950, 2389, 1928, 2081, 2082, 1927,
	3367, 2302, 2076, 3363, 4065, 2126, 1964, 2236, 2129, 2130,
	3715, 2132, 1931, 1960, 3716, 2236, 1539, 2190, 1933, 1934,
	1207, 2170, 1453, 2296, 2295, 1944, 1629, 1938, 1247, 1248,
	1249, 1246, 2054, 2162, 2267, 2183, 1457, 2236, 1932, 2086,
	2201, 2201, 2036, 2236, 1943, 3271, 1945, 1946, 1457, 2039,
	688, 2030, 1948, 1966, 1967, 1961, 1963, 2235, 1431, 1947,
	1952, 2536, 3451, 1752, 1953, 3417, 2981, 2184, 2041, 2035,
	1525, 4048, 2724, 3368, 3097, 1954, 3364, 2166, 1957, 1958,
	2059, 2070, 2061, 744, 3437, 2683, 2684, 1247, 1248, 1249,
	1246, 2407, 3010, 1057, 1059, 1696, 2402, 2396, 2401, 909,
	2399, 2404, 2818, 2646, 1057, 1059, 2645, 2095, 1085, 1086,
	1087, 2637, 2155, 2383, 2103, 2104, 2096, 1060, 3272, 1360,
	1060, 2255, 2215, 2155, 2240, 2181, 2120, 2106, 1060, 2121,
	2123, 2403, 2406, 2234, 1497, 1247, 1248, 1249, 1246, 2504,
	1648, 1508, 2712, 1495, 1496, 2365, 1498, 1499, 1296, 1503,
	1504, 1505, 2219, 2220, 2140, 2405, 2704, 1829, 1830, 1831,
	1832, 2659, 1545, 1836, 1837, 1838, 1839, 1841, 1842, 1843,
	1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 2641, 1194,
	2172, 2232, 1931, 1554, 1555, 1556, 1557, 1558, 2169, 1560,
	1561, 1562, 1563, 1564, 2161, 2167, 1158, 1570, 1571, 1572,
	1573, 1057, 1059, 1153, 2307, 2308, 2180, 2311, 3399, 2629,
	2314, 3680, 2623, 2268, 2269, 1245, 2271, 904, 905, 906,
	907, 2320, 3500, 2278, 1262, 1060, 2618, 742, 2185, 1245,
	664, 664, 664, 687, 1245, 1278, 2610, 2290, 2178, 2085,
	2608, 686, 2606, 2198, 2604, 664, 664, 664, 664, 924,
	3215, 2365, 683, 1803, 1802, 2238, 2364, 3057, 2362, 4059,
	1440, 2214, 3857, 685, 1441, 2223, 2407, 2596, 2368, 1502,
	684, 2402, 2396, 2401, 2298, 2399, 2404, 3206, 2274, 2273,
	2216, 1737, 2619, 3323, 2179, 2624, 2258, 2391, 2249, 1454,
	2248, 4024, 2247, 2237, 2228, 1502, 2200, 1550, 2431, 2619,
	1657, 1803, 1802, 1093, 1094, 1529, 3858, 3837, 1098, 2611,
	777, 787, 2425, 2609, 3618, 2605, 1530, 2605, 2217, 2218,
	778, 3746, 779, 783, 786, 782, 780, 781, 3429, 2365,
	2405, 1261, 1260, 1270, 1271, 1263, 1264, 1265, 1266, 1267,
	1268, 1269, 1262, 3707, 1527, 3427, 2666, 2297, 2590, 1485,
	2262, 1245, 1245, 3647, 2124, 3646, 2380, 3207, 3619, 1245,
	2382, 1245, 2384, 1245, 2432, 1245, 2236, 1840, 909, 2201,
	664, 1962, 3430, 1658, 3632, 784, 3591, 1743, 3409, 2508,
	2508, 2053, 2508, 1265, 1266, 1267, 1268, 1269, 1262, 3428,
	2291, 2293, 2294, 1740, 1742, 1739, 1756, 1741, 2299, 1893,
	931, 3208, 640, 640, 3295, 3286, 3278, 3273, 785, 1455,
	1174, 2385, 3186, 2942, 2941, 1833, 1539, 664, 1270, 1271,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1262, 2395, 2787,
	664, 2394, 2326, 2743, 2656, 2622, 1174, 2580, 658, 2527,
	1319, 2165, 1320, 2164, 1578, 2531, 2053, 1526, 2163, 2585,
	1427, 2587, 1440, 1426, 1176, 222, 1441, 2437, 3012, 3914,
	2440, 2441, 2442, 2443, 2444, 2445, 2446, 1246, 2544, 2449,
	2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459,
	2377, 2461, 2462, 2463, 2464, 2465, 2522, 2466, 2523, 3659,
	2512, 2388, 2510, 3658, 2514, 2626, 1247, 1248, 1249, 1246,
	2369, 1247, 1248, 1249, 1246, 3324, 3638, 2528, 2529, 3029,
	2668, 2878, 2639, 1057, 1059, 1756, 2190, 2229, 2876, 2538,
	2516, 2408, 2409, 1539, 2414, 1539, 2855, 1539, 1913, 1583,
	2853, 2124, 1174, 1918, 1457, 4055, 2372, 1060, 2370, 2371,
	2658, 2378, 1249, 1246, 2379, 2591, 3592, 3593, 2373, 2374,
	2381, 2726, 1298, 2727, 2649, 2584, 1263, 1264, 1265, 1266,
	1267, 1268, 1269, 1262, 2653, 1297, 1539, 1174, 4030, 4029,
	3972, 2690, 2478, 3777, 2483, 1260, 1270, 1271, 1263, 1264,
	1265, 1266, 1267, 1268, 1269, 1262, 2697, 1818, 2517, 3940,
	3939, 1539, 1518, 1520, 3859, 1537, 2757, 3585, 3397, 2685,
	4054, 3798, 1819, 3786, 1968, 1969, 1253, 1254, 1255, 1256,
	1257, 1258, 1259, 1251, 3776, 2929, 3766, 2532, 2927, 3698,
	1537, 2925, 3621, 3620, 2698, 2535, 3442, 1261, 1260, 1270,
	1271, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1262, 2581,
	2745, 2746, 3431, 2583, 2749, 2914, 3396, 2701, 2702, 1247,
	1248, 1249, 1246, 1247, 1248, 1249, 1246, 3586, 3398, 2670,
	3326, 2670, 1174, 2094, 2600, 3274, 1174, 3176, 3053, 2094,
	2094, 2094, 2699, 1539, 2674, 2928, 1502, 3024, 2926, 2099,
	3023, 2924, 2033, 2655, 1247, 1248, 1249, 1246, 2635, 2636,
	2814, 2664, 2688, 2592, 2764, 2912, 2820, 2911, 2544, 2650,
	1247, 1248, 1249, 1246, 2631, 2913, 2910, 2902, 1583, 2640,
	2896, 2582, 2642, 2696, 2830, 2730, 2895, 2647, 2894, 2893,
	2589, 2739, 2612, 2524, 1174, 1247, 1248, 1249, 1246, 2301,
	2143, 1696, 2852, 2142, 1584, 3090, 2141, 2660, 2661, 1174,
	1174, 1174, 1962, 2137, 2136, 1174, 2802, 2862, 2863, 2864,
	2865, 1174, 2872, 2676, 2873, 2874, 2847, 2875, 2092, 2877,
	2686, 1883, 1881, 2798, 1247, 1248, 1249, 1246, 1649, 1378,
	2872, 2847, 2858, 2859, 2786, 3403, 2799, 2861, 1247, 1248,
	1249, 1246, 2508, 2868, 2831, 737, 2811, 3408, 739, 3163,
	2251, 1156, 2784, 738, 3739, 3740, 2930, 3089, 4051, 4049,
	2663, 2821, 1984, 3540, 4022, 3988, 640, 3987, 2773, 1247,
	1248, 1249, 1246, 2033, 3984, 2833, 3920, 1174, 2053, 2053,
	2053, 2053, 2053, 2053, 1247, 1248, 1249, 1246, 2243, 1250,
	789, 141, 3919, 3728, 1174, 2053, 141, 1280, 2508, 3900,
	1060, 3844, 3596, 2850, 2936, 3822, 1290, 2850, 3813, 2958,
	1155, 3790, 2765, 3785, 2989, 3950, 1539, 2782, 2766, 2250,
	2768, 3784, 2805, 2846, 1521, 3743, 2958, 664, 664, 2707,
	2708, 2813, 1299, 8, 3730, 2713, 7, 3729, 2857, 2819,
	3699, 1907, 1247, 1248, 1249, 1246, 1247, 1248, 1249, 1246,
	3640, 3600, 3589, 2835, 2832, 3571, 3569, 2822, 3566, 670,
	2884, 2885, 141, 3563, 2848, 3562, 2827, 2828, 2854, 3538,
	3536, 3510, 3507, 2860, 3076, 2900, 2901, 3504, 2851, 2977,
	2934, 3393, 3383, 222, 1247, 1248, 1249, 1246, 222, 3376,
	3360, 3358, 2662, 3353, 3284, 3283, 3281, 3280, 2892, 3275,
	3269, 2938, 2990, 3268, 3187, 3150, 2904, 3149, 3145, 3143,
	1814, 3141, 1814, 3564, 3138, 3039, 1261, 1260, 1270, 1271,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1262, 3052, 2829,
	2845, 2823, 3007, 3136, 1539, 2306, 2826, 3059, 2937, 2943,
	1247, 1248, 1249, 1246, 3067, 2959, 2960, 2961, 2962, 2963,
	2964, 3064, 1247, 1248, 1249, 1246, 2940, 2974, 3022, 2996,
	2978, 2923, 2980, 2915, 2905, 2903, 2899, 2898, 2336, 2337,
	2338, 3034, 2897, 3013, 3552, 2752, 2997, 2744, 3017, 3551,
	1603, 2740, 3045, 2353, 2354, 2355, 2356, 2979, 2994, 2233,
	1604, 1605, 1058, 3490, 2632, 1860, 2321, 141, 1610, 1611,
	3038, 1247, 1248, 1249, 1246, 2315, 1247, 1248, 1249, 1246,
	845, 844, 141, 2312, 141, 2146, 2139, 1871, 3036, 1870,
	1247, 1248, 1249, 1246, 1650, 3355, 1327, 1323, 3046, 1322,
	1615, 1618, 1159, 1619, 913, 2231, 4057, 4010, 3056, 3140,
	3011, 3876, 3015, 3014, 3872, 3724, 3144, 3061, 3723, 3712,
	3147, 3148, 1247, 1248, 1249, 1246, 3093, 3708, 1174, 3565,
	3030, 3035, 3547, 3032, 3166, 1060, 3037, 1247, 1248, 1249,
	1246, 3047, 3049, 3048, 3180, 3422, 1060, 3421, 3055, 664,
	3420, 3390, 3372, 1247, 1248, 1249, 1246, 3370, 3369, 3069,
	2847, 3196, 1174, 3366, 3068, 664, 3365, 1174, 1174, 3359,
	3357, 3339, 3329, 3088, 3328, 3314, 2053, 2362, 1508, 3214,
	3075, 3079, 3080, 1247, 1248, 1249, 1246, 3082, 3313, 3216,
	3153, 3084, 3085, 3128, 2847, 1577, 1577, 3095, 2425, 2847,
	2847, 3086, 3081, 3078, 3083, 3077, 3071, 3005, 3190, 2762,
	3240, 2607, 3243, 3092, 3243, 3243, 2603, 3130, 205, 1174,
	196, 167, 3152, 2602, 2279, 1545, 3199, 2272, 2266, 2265,
	2264, 3203, 2263, 2261, 3135, 2257, 2256, 3264, 2094, 2798,
	1247, 1248, 1249, 1246, 3134, 1539, 1539, 2254, 3260, 2245,
	2242, 2847, 2241, 3091, 2145, 3218, 1854, 3223, 1853, 3168,
	3227, 3229, 1852, 1817, 1816, 3151, 1807, 205, 1551, 1549,
	4009, 3971, 3894, 1317, 1537, 1537, 3871, 3808, 3265, 3266,
	1247, 1248, 1249, 1246, 3805, 3212, 3792, 3189, 3787, 3693,
	201, 3198, 664, 3692, 1057, 1059, 3201, 3202, 3674, 3166,
	3657, 3209, 3653, 3631, 3213, 3238, 3615, 3520, 3518, 3488,
	3239, 1502, 3487, 3222, 2033, 2033, 3484, 3248, 1060, 2395,
	1060, 3483, 2394, 3449, 3446, 1060, 3444, 3411, 3087, 3102,
	3103, 1598, 1499, 1609, 1600, 3104, 3105, 3106, 3107, 201,
	3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117,
	3118, 1060, 3262, 1614, 3244, 3245, 2723, 1617, 3249, 1708,
	1709, 1710, 1711, 1712, 2722, 1606, 1434, 1174, 2721, 2931,
	2856, 2690, 2807, 2806, 2800, 2767, 2725, 2617, 2526, 2467,
	3327, 3270, 2720, 1247, 1248, 1249, 1246, 3221, 2363, 2335,
	2300, 1247, 1248, 1249, 1246, 1247, 1248, 1249, 1246, 2544,
	1738, 1753, 2719, 3246, 201, 1757, 1758, 1759, 1760, 1247,
	1248, 1249, 1246, 2718, 2105, 1798, 3291, 3292, 3277, 3276,
	2717, 1897, 1867, 1808, 1681, 3285, 664, 3289, 3282, 1247,
	1248, 1249, 1246, 1632, 1607, 1377, 3279, 3302, 1362, 3303,
	1247, 1248, 1249, 1246, 2716, 1358, 1357, 1247, 1248, 1249,
	1246, 3217, 1356, 1355, 1354, 1353, 3219, 3220, 3307, 1352,
	3310, 3311, 3312, 1273, 1351, 1277, 1350, 1349, 1348, 1347,
	1346, 1247, 1248, 1249, 1246, 1345, 1861, 2715, 3316, 1344,
	3322, 1274, 1276, 1272, 1343, 1275, 1261, 1260, 1270, 1271,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1262, 2812, 2117,
	3380, 3340, 2714, 3382, 1247, 1248, 1249, 1246, 1342, 1341,
	1340, 1339, 3341, 1338, 3342, 1337, 1336, 1335, 3345, 1334,
	1333, 1330, 1329, 3346, 1328, 1326, 1325, 1324, 3361, 1247,
	1248, 1249, 1246, 2711, 2670, 1321, 3888, 2710, 141, 141,
	141, 1058, 1314, 664, 2033, 3886, 2709, 3351, 1313, 3384,
	3305, 2703, 1311, 1310, 3415, 1309, 1308, 1307, 1935, 2693,
	1247, 1248, 1249, 1246, 1247, 1248, 1249, 1246, 1306, 1305,
	2508, 2053, 3434, 1247, 1248, 1249, 1246, 3389, 1247, 1248,
	1249, 1246, 1304, 1951, 3392, 3293, 1247, 1248, 1249, 1246,
	2689, 1303, 1302, 1301, 1300, 3452, 1295, 1294, 1174, 3377,
	3379, 1293, 1292, 1291, 1211, 1157, 3306, 3240, 2665, 3884,
	3373, 1174, 3298, 3299, 1279, 3882, 3485, 1247, 1248, 1249,
	1246, 2367, 1174, 2349, 3499, 1199, 4002, 4000, 1539, 3955,
	3453, 3301, 3404, 2788, 2537, 1247, 1248, 1249, 1246, 2148,
	1210, 2967, 1861, 3492, 3436, 2976, 3406, 1861, 1861, 664,
	3304, 2033, 2966, 2975, 2868, 1174, 2968, 1537, 3482, 2971,
	2969, 3501, 124, 67, 2972, 2970, 3443, 2973, 3445, 2498,
	2499, 1060, 2965, 66, 3913, 3000, 3001, 3824, 1060, 3439,
	3433, 3475, 3432, 3522, 1751, 222, 3636, 2958, 3412, 3413,
	3414, 3523, 2630, 2620, 3418, 3419, 1428, 2125, 1174, 3185,
	2128, 3051, 3514, 2131, 3511, 2435, 2133, 3489, 3524, 3491,
	3494, 1247, 1248, 1249, 1246, 3498, 3495, 2493, 2497, 2498,
	2499, 2494, 2502, 2495, 2500, 3503, 3506, 2496, 3317, 2501,
	2958, 666, 667, 2022, 3526, 3508, 1592, 3509, 3512, 3567,
	3521, 3515, 668, 3516, 2615, 3513, 1925, 1926, 3574, 1920,
	1921, 1922, 1174, 3505, 3236, 2322, 3237, 2880, 3545, 3343,
	3344, 2175, 2654, 1366, 2881, 2882, 2883, 2635, 2636, 2107,
	1645, 1626, 1174, 1539, 1539, 3531, 3561, 1205, 3196, 3161,
	3154, 2834, 2808, 3541, 2847, 2387, 3542, 2358, 3572, 3573,
	3608, 1929, 3608, 1896, 1803, 1802, 1373, 1374, 1371, 1372,
	1369, 1370, 1537, 1749, 3625, 1174, 3598, 1174, 4013, 3602,
	3603, 3597, 1367, 1368, 3789, 3267, 3628, 2480, 3630, 2474,
	2034, 1494, 1493, 1238, 1539, 3309, 2999, 2323, 2177, 1446,
	1419, 1469, 3579, 3581, 3978, 3599, 3580, 1702, 3976, 1702,
	3590, 3435, 664, 3605, 1174, 1174, 3576, 3933, 1174, 1174,
	3438, 3910, 3909, 1749, 3907, 3848, 3601, 3613, 3809, 3612,
	3688, 3687, 3626, 2162, 3436, 3537, 2225, 3624, 3362, 3634,
	2230, 3336, 3671, 3676, 3335, 3482, 3320, 2420, 2239, 1931,
	2390, 3685, 1647, 3661, 3662, 3641, 3637, 3672, 3673, 3633,
	3319, 3009, 1444, 3694, 3695, 4004, 4003, 4003, 3475, 3639,
	3381, 3054, 2750, 2351, 2244, 1381, 1539, 1196, 4004, 3655,
	3315, 904, 905, 906, 907, 2246, 1171, 1548, 1171, 209,
	3, 670, 3682, 2253, 1461, 75, 2, 3188, 3681, 3725,
	4026, 4027, 1, 3677, 3683, 1537, 2731, 1060, 3718, 3706,
	1865, 1375, 908, 3200, 903, 2270, 1515, 2518, 2087, 1543,
	2275, 2276, 2277, 141, 1869, 2280, 2281, 2282, 2283, 2284,
	2285, 2286, 2287, 2288, 2289, 3705, 910, 3701, 2982, 2983,
	3713, 973, 3717, 3308, 2985, 2753, 3758, 3752, 2197, 2947,
	2472, 2339, 3179, 3553, 1429, 3554, 966, 1809, 1662, 1082,
	1188, 1659, 1174, 1187, 3678, 1185, 1754, 791, 3679, 2151,
	2932, 2906, 3684, 3775, 4012, 3781, 4043, 3742, 3970, 2486,
	4015, 1679, 775, 3901, 3814, 3974, 3816, 3704, 2202, 3753,
	1243, 141, 3545, 3754, 1702, 3755, 3629, 3031, 141, 3750,
	992, 3767, 3771, 832, 802, 1174, 1312, 1638, 3100, 3098,
	1539, 141, 1084, 801, 141, 141, 2493, 2497, 2498, 2499,
	2494, 2502, 2495, 2500, 3627, 3401, 2496, 141, 2501, 2778,
	3788, 3622, 3623, 3689, 3002, 3760, 1081, 993, 2134, 1537,
	2094, 3811, 3702, 3799, 3797, 1593, 1597, 2386, 3768, 3867,
	1261, 1260, 1270, 1271, 1263, 1264, 1265, 1266, 1267, 1268,
	1269, 1262, 3635, 3840, 3232, 3830, 2842, 1621, 3862, 3447,
	3557, 3555, 3556, 707, 2066, 3810, 3806, 3807, 1261, 1260,
	1270, 1271, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1262,
	638, 3849, 1042, 1060, 3675, 2147, 708, 2366, 3925, 3791,
	946, 2348, 947, 939, 3838, 1261, 1260, 1270, 1271, 1263,
	1264, 1265, 1266, 1267, 1268, 1269, 1262, 3843, 2796, 3866,
	2795, 1719, 1252, 1174, 3851, 1736, 3119, 3120, 1289, 746,
	2227, 1539, 2775, 3470, 3891, 2995, 74, 73, 72, 3898,
	3881, 3883, 3885, 3887, 1861, 3860, 1861, 71, 3800, 230,
	3865, 793, 3899, 229, 3726, 3874, 3594, 3897, 4017, 772,
	1537, 771, 3880, 770, 3890, 1861, 1861, 769, 768, 767,
	2491, 2492, 2490, 2488, 3348, 2487, 2048, 2047, 2114, 3194,
	2871, 1539, 3906, 3904, 3758, 2866, 1973, 1971, 1506, 2415,
	2422, 3459, 1970, 3952, 3352, 3548, 3877, 1577, 3918, 3878,
	3943, 3652, 2916, 3544, 1919, 2411, 3951, 1990, 2887, 1987,
	1537, 3936, 1986, 3934, 3935, 3937, 3938, 3096, 2879, 3648,
	3642, 3850, 2018, 3756, 3607, 3454, 3854, 3855, 3455, 3461,
	2357, 1107, 3471, 3967, 1103, 1105, 1106, 1104, 3960, 2675,
	3961, 3287, 3962, 2392, 3963, 3462, 3156, 2625, 3964, 2628,
	3977, 2331, 3979, 3980, 2330, 2328, 3457, 3875, 2327, 3975,
	3973, 3479, 3480, 1404, 1174, 3830, 3839, 3458, 3983, 3921,
	3575, 1261, 1260, 1270, 1271, 1263, 1264, 1265, 1266, 1267,
	1268, 1269, 1262, 3781, 3992, 2542, 2540, 1154, 3300, 3296,
	2159, 2094, 3994, 3995, 3993, 2173, 3990, 3050, 4001, 3999,
	4011, 2049, 4019, 3998, 3463, 2045, 4018, 4005, 4006, 4007,
	4008, 2044, 2949, 2667, 2481, 1787, 2673, 3733, 1924, 940,
	4031, 4023, 1174, 2346, 41, 121, 108, 2691, 2692, 184,
	59, 183, 58, 4032, 3866, 2694, 2695, 4033, 4035, 119,
	2052, 181, 4041, 57, 103, 4045, 102, 118, 4042, 179,
	56, 2700, 214, 213, 1702, 216, 215, 980, 212, 205,
	64, 196, 167, 2593, 2594, 211, 1581, 4053, 210, 3911,
	3611, 3893, 898, 44, 43, 185, 42, 197, 4019, 4061,
	1708, 1861, 4018, 4060, 188, 109, 60, 40, 198, 39,
	4045, 4062, 38, 34, 3985, 3986, 4066, 2094, 13, 12,
	35, 3478, 22, 2401, 21, 1666, 20, 139, 26, 32,
	31, 134, 133, 30, 132, 141, 131, 130, 141, 141,
	129, 141, 125, 128, 127, 126, 29, 19, 3467, 977,
	978, 201, 51, 50, 49, 48, 47, 46, 9, 122,
	1020, 117, 115, 28, 116, 113, 112, 111, 110, 106,
	3464, 3468, 3466, 3465, 104, 86, 85, 84, 99, 2824,
	2825, 1058, 98, 97, 141, 96, 95, 94, 92, 93,
	991, 83, 1058, 82, 81, 80, 79, 101, 107, 105,
	90, 100, 1783, 91, 89, 88, 87, 78, 141, 1780,
	3473, 3474, 77, 1782, 1779, 1781, 1785, 1786, 76, 165,
	164, 1784, 163, 162, 161, 159, 160, 158, 147, 148,
	157, 149, 150, 156, 155, 154, 151, 153, 52, 152,
	53, 54, 55, 175, 1022, 174, 176, 1021, 178, 180,
	177, 182, 172, 170, 173, 171, 169, 69, 3481, 11,
	120, 18, 25, 4, 0, 0, 0, 0, 0, 0,
	3460, 0, 0, 0, 0, 0, 3472, 0, 0, 0,
	0, 0, 0, 0, 0, 1006, 0, 0, 0, 1279,
	0, 0, 0, 0, 981, 0, 0, 0, 0, 0,
	0, 166, 194, 203, 195, 123, 0, 0, 2224, 0,
	3660, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1861, 983, 0, 0, 193, 187, 186, 0, 0, 0,
	0, 70, 1261, 1260, 1270, 1271, 1263, 1264, 1265, 1266,
	1267, 1268, 1269, 1262, 0, 2019, 0, 0, 0, 0,
	0, 0, 205, 0, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1790, 1791, 1792, 1793, 1794,
	1795, 1788, 1789, 0, 3606, 0, 0, 0, 0, 0,
	2022, 0, 0, 0, 0, 0, 1005, 1003, 0, 0,
	0, 0, 189, 190, 191, 0, 0, 0, 0, 0,
	3016, 0, 3018, 0, 0, 0, 3477, 0, 1002, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	976, 1861, 0, 2019, 201, 199, 1861, 0, 1980, 0,
	0, 982, 1015, 0, 1996, 0, 0, 2175, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 0,
	192, 0, 136, 0, 0, 1011, 0, 0, 2022, 1989,
	0, 0, 0, 0, 0, 0, 0, 0, 2023, 2024,
	0, 0, 3070, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3476, 0, 0, 0, 0, 0, 0, 0,
	0, 1012, 1016, 0, 1988, 0, 0, 0, 0, 0,
	3094, 0, 2012, 0, 0, 0, 0, 0, 0, 137,
	0, 999, 1996, 997, 1001, 1019, 0, 0, 0, 998,
	995, 994, 63, 1000, 985, 986, 984, 987, 988, 989,
	990, 0, 1017, 0, 1018, 0, 719, 718, 725, 715,
	0, 0, 0, 0, 0, 1013, 1014, 0, 722, 723,
	0, 724, 728, 0, 0, 709, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 733, 0, 0, 0, 0,
	0, 65, 0, 0, 0, 0, 0, 0, 0, 0,
	2012, 0, 1009, 0, 0, 2000, 0, 0, 1008, 0,
	0, 0, 0, 0, 0, 0, 2006, 0, 0, 0,
	0, 2511, 0, 1004, 0, 0, 145, 202, 0, 146,
	0, 0, 0, 0, 168, 0, 1994, 2028, 0, 61,
	1995, 1997, 1999, 0, 2001, 2002, 2003, 2007, 2008, 2009,
	2011, 2014, 2015, 2016, 0, 0, 0, 0, 0, 0,
	0, 2004, 2013, 2005, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1979, 1981, 1978, 0, 0, 1975, 0,
	3247, 0, 0, 2000, 0, 0, 2052, 0, 0, 0,
	0, 0, 0, 0, 2006, 141, 0, 2020, 0, 0,
	0, 1007, 1991, 0, 1974, 138, 45, 979, 974, 0,
	0, 0, 62, 975, 1994, 2028, 0, 0, 1995, 1997,
	1999, 0, 2001, 2002, 2003, 2007, 2008, 2009, 2011, 2014,
	2015, 2016, 0, 142, 143, 0, 0, 144, 0, 2004,
	2013, 2005, 2017, 0, 0, 0, 0, 2019, 0, 0,
	0, 1983, 1980, 0, 0, 0, 0, 0, 0, 1993,
	0, 0, 0, 0, 0, 0, 1992, 0, 0, 0,
	0, 0, 0, 0, 0, 2020, 0, 0, 710, 712,
	711, 0, 2022, 1989, 0, 0, 0, 0, 0, 717,
	2010, 0, 2023, 2024, 0, 0, 0, 0, 0, 1998,
	0, 721, 1976, 1977, 0, 0, 0, 0, 736, 0,
	0, 0, 0, 0, 0, 714, 0, 0, 1988, 0,
	2017, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1996, 1993, 0, 0,
	0, 0, 0, 0, 1992, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2010, 0,
	0, 0, 0, 0, 0, 0, 0, 1998, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2026, 2025, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2012, 0, 0, 3610, 0, 0,
	0, 0, 0, 0, 3354, 0, 0, 0, 0, 0,
	0, 3356, 0, 0, 141, 0, 0, 716, 720, 726,
	0, 727, 729, 0, 141, 730, 731, 732, 0, 0,
	734, 735, 0, 1985, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3371, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1979, 2837, 1978,
	0, 0, 2836, 0, 0, 2021, 0, 2000, 2027, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2006, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1994, 2028,
	0, 0, 1995, 1997, 1999, 0, 2001, 2002, 2003, 2007,
	2008, 2009, 2011, 2014, 2015, 2016, 0, 0, 0, 0,
	0, 0, 0, 2004, 2013, 2005, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1983, 0, 0, 2052, 2052,
	2052, 2052, 2052, 2052, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2052, 0, 0, 0, 2020,
	0, 1126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 713, 0, 0, 0,
	0, 0, 0, 1861, 0, 0, 1976, 1977, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1861,
	0, 0, 3517, 0, 2017, 3519, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1993, 0, 3525, 0, 0, 0, 0, 1992, 0,
	0, 0, 0, 1126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 141, 0,
	0, 0, 2010, 0, 0, 0, 0, 0, 0, 0,
	0, 1998, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 2026, 2025, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 1111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1134, 1138, 1140, 1142,
	1144, 1145, 1147, 0, 1152, 1148, 1149, 1150, 1151, 0,
	1129, 1130, 1131, 1132, 1109, 1110, 1135, 1985, 1112, 0,
	1114, 1115, 1116, 1117, 1113, 1118, 1119, 1120, 1121, 1122,
	1125, 1127, 1123, 1124, 1133, 1126, 0, 0, 0, 0,
	0, 0, 1137, 1139, 1141, 1143, 1146, 1111, 0, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 0, 2021,
	0, 0, 2027, 0, 0, 0, 0, 0, 1134, 1138,
	1140, 1142, 1144, 1145, 1147, 0, 1152, 1148, 1149, 1150,
	1151, 1128, 1129, 1130, 1131, 1132, 1109, 1110, 1135, 0,
	1112, 0, 1114, 1115, 1116, 1117, 1113, 1118, 1119, 1120,
	1121, 1122, 1125, 1127, 1123, 1124, 1133, 0, 0, 0,
	0, 0, 2019, 0, 1137, 1139, 1141, 1143, 1146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1058, 0, 141, 0, 0, 2022, 0, 141,
	0, 0, 0, 1128, 0, 0, 2052, 0, 0, 1111,
	1247, 1248, 1249, 1246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	1134, 1138, 1140, 1142, 1144, 1145, 1147, 0, 1152, 1148,
	1149, 1150, 1151, 0, 1129, 1130, 1131, 1132, 1109, 1110,
	1135, 1996, 1112, 0, 1114, 1115, 1116, 1117, 1113, 1118,
	1119, 1120, 1121, 1122, 1125, 1127, 1123, 1124, 1133, 0,
	0, 0, 2671, 2672, 0, 0, 1137, 1139, 1141, 1143,
	1146, 719, 718, 725, 715, 0, 0, 0, 0, 0,
	1787, 0, 0, 722, 723, 0, 724, 728, 0, 0,
	709, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	733, 0, 0, 0, 0, 1128, 0, 0, 0, 2012,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 737, 0, 0, 739,
	0, 0, 0, 0, 738, 0, 1299, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2000, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2006, 0, 0, 1136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3873, 0, 1994, 2028, 0, 0, 1995, 1997, 1999,
	0, 2001, 2002, 2003, 2007, 2008, 2009, 2011, 2014, 2015,
	2016, 0, 0, 0, 0, 0, 0, 1783, 2004, 2013,
	2005, 0, 0, 0, 1780, 0, 0, 0, 1782, 1779,
	1781, 1785, 1786, 0, 0, 0, 1784, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1136, 0,
	0, 0, 0, 0, 2020, 0, 0, 0, 0, 0,
	0, 0, 0, 710, 712, 711, 0, 0, 0, 0,
	0, 0, 0, 0, 717, 3948, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 721, 0, 0, 0,
	0, 0, 0, 736, 0, 0, 0, 0, 0, 2017,
	714, 0, 0, 0, 704, 141, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 1993, 0, 0, 0,
	0, 0, 0, 1992, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2010, 0, 3948,
	0, 0, 0, 0, 0, 0, 1998, 0, 0, 0,
	1136, 2052, 0, 0, 0, 0, 0, 0, 0, 1768,
	1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778,
	1790, 1791, 1792, 1793, 1794, 1795, 1788, 1789, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3948, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 716, 720, 726, 0, 727, 729, 0, 0,
	730, 731, 732, 0, 0, 734, 735, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 809, 0, 0,
	0, 0, 0, 0, 0, 0, 396, 0, 525, 558,
	547, 631, 513, 4064, 3614, 0, 0, 0, 0, 761,
	0, 0, 0, 335, 0, 141, 365, 562, 544, 554,
	545, 530, 531, 532, 539, 345, 533, 534, 535, 505,
	536, 506, 537, 538, 800, 561, 512, 428, 380, 579,
	578, 0, 0, 869, 877, 0, 0, 0, 0, 0,
	0, 0, 0, 865, 0, 0, 0, 0, 753, 0,
	0, 790, 845, 844, 777, 787, 0, 0, 308, 228,
	507, 627, 509, 508, 778, 0, 779, 783, 786, 782,
	780, 781, 0, 860, 0, 0, 0, 0, 0, 0,
	745, 757, 0, 762, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 754, 755, 0,
	0, 713, 0, 810, 0, 756, 0, 0, 805, 784,
	788, 0, 0, 0, 0, 298, 434, 453, 309, 423,
	466, 314, 431, 445, 304, 395, 420, 0, 0, 300,
	451, 430, 377, 355, 356, 299, 0, 414, 333, 347,
	330, 393, 785, 808, 812, 329, 883, 806, 461, 302,
	0, 460, 392, 447, 452, 378, 372, 0, 301, 449,
	376, 371, 359, 337, 884, 360, 361, 351, 404, 369,
	405, 352, 382, 381, 383, 0, 0, 0, 0, 0,
	489, 490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 803, 0, 624, 0,
	463, 0, 0, 867, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 807, 0, 417, 398, 880, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 141, 482, 652,
	653, 654, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 1811, 1810, 1812, 475, 363, 364, 0, 342,
	290, 291, 647, 864, 394, 589, 622, 623, 514, 0,
	879, 859, 861, 862, 866, 870, 871, 872, 873, 874,
	876, 878, 882, 646, 0, 568, 583, 650, 582, 643,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 881, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 811, 564, 565, 384, 385, 386,
	387, 868, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 655,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	890, 863, 889, 891, 892, 888, 893, 894, 875, 766,
	0, 818, 886, 885, 887, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 644, 641, 446, 645, 773, 292, 520,
	366, 0, 409, 340, 585, 586, 0, 637, 852, 825,
	826, 827, 763, 828, 822, 823, 764, 824, 853, 816,
	849, 850, 792, 819, 829, 848, 830, 851, 854, 855,
	895, 896, 836, 820, 256, 897, 833, 856, 847, 846,
	831, 817, 857, 858, 799, 794, 834, 835, 821, 840,
	841, 842, 765, 813, 814, 815, 837, 838, 795, 796,
	797, 798, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 642, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 843, 632,
	432, 0, 839, 635, 636, 633, 370, 419, 437, 426,
	809, 648, 510, 511, 649, 621, 0, 758, 0, 396,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 761, 0, 0, 0, 335, 1862, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 800, 561, 512,
	428, 380, 579, 578, 0, 0, 869, 877, 0, 0,
	0, 0, 0, 0, 0, 0, 865, 0, 2078, 0,
	0, 753, 0, 0, 790, 845, 844, 777, 787, 0,
	0, 308, 228, 507, 627, 509, 508, 778, 0, 779,
	783, 786, 782, 780, 781, 0, 860, 0, 0, 0,
	0, 0, 0, 745, 757, 0, 762, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	754, 755, 0, 0, 0, 0, 810, 0, 756, 0,
	0, 2079, 784, 788, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 785, 808, 812, 329, 883,
	806, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 884, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 620, 803,
	0, 624, 0, 463, 0, 0, 867, 0, 0, 0,
	433, 0, 0, 362, 0, 0, 0, 807, 0, 417,
	398, 880, 0, 0, 415, 367, 448, 406, 454, 435,
	462, 411, 407, 293, 436, 332, 379, 305, 307, 327,
	334, 336, 338, 339, 388, 389, 401, 422, 438, 439,
	440, 331, 315, 416, 316, 349, 317, 294, 323, 321,
	324, 424, 325, 296, 402, 444, 0, 344, 412, 375,
	297, 374, 403, 443, 442, 306, 470, 476, 477, 566,
	0, 482, 652, 653, 654, 491, 0, 408, 496, 497,
	498, 500, 501, 502, 503, 567, 584, 551, 521, 484,
	575, 518, 522, 523, 587, 0, 0, 0, 475, 363,
	364, 0, 342, 290, 291, 647, 864, 394, 589, 622,
	623, 514, 0, 879, 859, 861, 862, 866, 870, 871,
	872, 873, 874, 876, 878, 882, 646, 0, 568, 583,
	650, 582, 643, 400, 0, 421, 580, 527, 0, 572,
	546, 0, 573, 542, 577, 0, 516, 0, 429, 456,
	468, 485, 488, 517, 602, 603, 604, 295, 487, 606,
	607, 608, 609, 610, 611, 612, 605, 881, 549, 526,
	552, 467, 529, 528, 0, 0, 563, 811, 564, 565,
	384, 385, 386, 387, 868, 590, 313, 486, 410, 0,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	556, 553, 655, 0, 613, 614, 0, 0, 480, 481,
	341, 348, 499, 350, 312, 399, 343, 465, 357, 0,
	492, 557, 493, 616, 619, 617, 618, 391, 353, 354,
	425, 358, 368, 413, 464, 397, 418, 310, 455, 427,
	373, 543, 570, 890, 863, 889, 891, 892, 888, 893,
	894, 875, 766, 0, 818, 886, 885, 887, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 598,
	597, 596, 595, 594, 593, 592, 591, 0, 0, 540,
	441, 322, 284, 318, 319, 326, 644, 641, 446, 645,
	773, 292, 520, 366, 0, 409, 340, 585, 586, 0,
	637, 852, 825, 826, 827, 763, 828, 822, 823, 764,
	824, 853, 816, 849, 850, 792, 819, 829, 848, 830,
	851, 854, 855, 895, 896, 836, 820, 256, 897, 833,
	856, 847, 846, 831, 817, 857, 858, 799, 794, 834,
	835, 821, 840, 841, 842, 765, 813, 814, 815, 837,
	838, 795, 796, 797, 798, 0, 0, 0, 471, 472,
	473, 495, 0, 457, 519, 642, 0, 0, 0, 0,
	0, 0, 0, 569, 581, 615, 0, 625, 626, 628,
	630, 843, 632, 432, 0, 839, 635, 636, 633, 370,
	419, 437, 426, 0, 648, 510, 511, 649, 621, 0,
	758, 205, 809, 0, 0, 0, 0, 0, 0, 0,
	0, 396, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 761, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 1282,
	561, 512, 428, 380, 579, 578, 0, 0, 869, 877,
	0, 0, 0, 0, 0, 0, 0, 0, 865, 0,
	0, 0, 0, 753, 0, 0, 790, 845, 844, 777,
	787, 0, 0, 308, 228, 507, 627, 509, 508, 778,
	0, 779, 783, 786, 782, 780, 781, 0, 860, 0,
	0, 0, 0, 0, 0, 745, 757, 0, 762, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 754, 755, 0, 0, 0, 0, 810, 0,
	756, 0, 0, 805, 784, 788, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 785, 808, 812,
	329, 883, 806, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 884,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	620, 803, 0, 624, 0, 463, 0, 0, 867, 0,
	0, 0, 433, 0, 0, 362, 0, 0, 0, 807,
	0, 417, 398, 880, 0, 0, 415, 367, 448, 406,
	454, 435, 462, 411, 407, 293, 436, 332, 379, 305,
	307, 327, 334, 336, 338, 339, 388, 389, 401, 422,
	438, 439, 440, 331, 315, 416, 316, 349, 317, 294,
	323, 321, 324, 424, 325, 296, 402, 444, 0, 344,
	412, 375, 297, 374, 403, 443, 442, 306, 470, 476,
	477, 566, 0, 482, 652, 653, 654, 491, 0, 408,
	496, 497, 498, 500, 501, 502, 503, 567, 584, 551,
	521, 484, 575, 518, 522, 523, 587, 0, 0, 0,
	475, 363, 364, 0, 342, 290, 291, 647, 864, 394,
	589, 622, 623, 514, 0, 879, 859, 861, 862, 866,
	870, 871, 872, 873, 874, 876, 878, 882, 646, 0,
	568, 583, 650, 582, 643, 400, 0, 421, 580, 527,
	0, 572, 546, 0, 573, 542, 577, 0, 516, 0,
	429, 456, 468, 485, 488, 517, 602, 603, 604, 295,
	487, 606, 607, 608, 609, 610, 611, 612, 605, 881,
	549, 526, 552, 467, 529, 528, 0, 0, 563, 811,
	564, 565, 384, 385, 386, 387, 868, 590, 313, 486,
	410, 0, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 556, 553, 655, 0, 613, 614, 0, 0,
	480, 481, 341, 348, 499, 350, 312, 399, 343, 465,
	357, 0, 492, 557, 493, 616, 619, 617, 618, 391,
	353, 354, 425, 358, 368, 413, 464, 397, 418, 310,
	455, 427, 373, 543, 570, 890, 863, 889, 891, 892,
	888, 893, 894, 875, 766, 0, 818, 886, 885, 887,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 598, 597, 596, 595, 594, 593, 592, 591, 0,
	0, 540, 441, 322, 284, 318, 319, 326, 644, 641,
	446, 645, 773, 292, 520, 366, 168, 409, 340, 585,
	586, 0, 637, 852, 825, 826, 827, 763, 828, 822,
	823, 764, 824, 853, 816, 849, 850, 792, 819, 829,
	848, 830, 851, 854, 855, 895, 896, 836, 820, 256,
	897, 833, 856, 847, 846, 831, 817, 857, 858, 799,
	794, 834, 835, 821, 840, 841, 842, 765, 813, 814,
	815, 837, 838, 795, 796, 797, 798, 0, 0, 0,
	471, 472, 473, 495, 0, 457, 519, 642, 0, 0,
	0, 0, 0, 0, 0, 569, 581, 615, 0, 625,
	626, 628, 630, 843, 632, 432, 0, 839, 635, 636,
	633, 370, 419, 437, 426, 809, 648, 510, 511, 649,
	621, 0, 758, 0, 396, 0, 525, 558, 547, 631,
	513, 0, 0, 0, 0, 0, 0, 761, 0, 0,
	0, 335, 4063, 0, 365, 562, 544, 554, 545, 530,
	531, 532, 539, 345, 533, 534, 535, 505, 536, 506,
	537, 538, 800, 561, 512, 428, 380, 579, 578, 0,
	0, 869, 877, 0, 0, 0, 0, 0, 0, 0,
	0, 865, 0, 0, 0, 0, 753, 0, 0, 790,
	845, 844, 777, 787, 0, 0, 308, 228, 507, 627,
	509, 508, 778, 0, 779, 783, 786, 782, 780, 781,
	0, 860, 0, 0, 0, 0, 0, 0, 745, 757,
	0, 762, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 754, 755, 0, 0, 0,
	0, 810, 0, 756, 0, 0, 805, 784, 788, 0,
	0, 0, 0, 298, 434, 453, 309, 423, 466, 314,
	431, 445, 304, 395, 420, 0, 0, 300, 451, 430,
	377, 355, 356, 299, 0, 414, 333, 347, 330, 393,
	785, 808, 812, 329, 883, 806, 461, 302, 0, 460,
	392, 447, 452, 378, 372, 0, 301, 449, 376, 371,
	359, 337, 884, 360, 361, 351, 404, 369, 405, 352,
	382, 381, 383, 0, 0, 0, 0, 0, 489, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 803, 0, 624, 0, 463, 0,
	0, 867, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 807, 0, 417, 398, 880, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 652, 653, 654,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	647, 864, 394, 589, 622, 623, 514, 0, 879, 859,
	861, 862, 866, 870, 871, 872, 873, 874, 876, 878,
	882, 646, 0, 568, 583, 650, 582, 643, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 881, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 811, 564, 565, 384, 385, 386, 387, 868,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 655, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 890, 863,
	889, 891, 892, 888, 893, 894, 875, 766, 0, 818,
	886, 885, 887, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 644, 641, 446, 645, 773, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 852, 825, 826, 827,
	763, 828, 822, 823, 764, 824, 853, 816, 849, 850,
	792, 819, 829, 848, 830, 851, 854, 855, 895, 896,
	836, 820, 256, 897, 833, 856, 847, 846, 831, 817,
	857, 858, 799, 794, 834, 835, 821, 840, 841, 842,
	765, 813, 814, 815, 837, 838, 795, 796, 797, 798,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	642, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 843, 632, 432, 0,
	839, 635, 636, 633, 370, 419, 437, 426, 809, 648,
	510, 511, 649, 621, 0, 758, 0, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	761, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 800, 561, 512, 428, 380,
	579, 578, 0, 0, 869, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 865, 0, 0, 0, 0, 753,
	0, 0, 790, 845, 844, 777, 787, 0, 0, 308,
	228, 507, 627, 509, 508, 778, 0, 779, 783, 786,
	782, 780, 781, 0, 860, 0, 0, 0, 0, 0,
	0, 745, 757, 0, 762, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 754, 755,
	0, 0, 0, 0, 810, 0, 756, 0, 0, 805,
	784, 788, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 785, 808, 812, 329, 883, 806, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 884, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 803, 0, 624,
	0, 463, 0, 0, 867, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 807, 0, 417, 398, 880,
	3949, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 864, 394, 589, 622, 623, 514,
	0, 879, 859, 861, 862, 866, 870, 871, 872, 873,
	874, 876, 878, 882, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 881, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 811, 564, 565, 384, 385,
	386, 387, 868, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 890, 863, 889, 891, 892, 888, 893, 894, 875,
	766, 0, 818, 886, 885, 887, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 773, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 852,
	825, 826, 827, 763, 828, 822, 823, 764, 824, 853,
	816, 849, 850, 792, 819, 829, 848, 830, 851, 854,
	855, 895, 896, 836, 820, 256, 897, 833, 856, 847,
	846, 831, 817, 857, 858, 799, 794, 834, 835, 821,
	840, 841, 842, 765, 813, 814, 815, 837, 838, 795,
	796, 797, 798, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 843,
	632, 432, 0, 839, 635, 636, 633, 370, 419, 437,
	426, 809, 648, 510, 511, 649, 621, 0, 758, 0,
	396, 0, 525, 558, 547, 631, 513, 0, 0, 0,
	0, 0, 0, 761, 0, 0, 0, 335, 1862, 0,
	365, 562, 544, 554, 545, 530, 531, 532, 539, 345,
	533, 534, 535, 505, 536, 506, 537, 538, 800, 561,
	512, 428, 380, 579, 578, 0, 0, 869, 877, 0,
	0, 0, 0, 0, 0, 0, 0, 865, 0, 0,
	0, 0, 753, 0, 0, 790, 845, 844, 777, 787,
	0, 0, 308, 228, 507, 627, 509, 508, 778, 0,
	779, 783, 786, 782, 780, 781, 0, 860, 0, 0,
	0, 0, 0, 0, 745, 757, 0, 762, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 754, 755, 0, 0, 0, 0, 810, 0, 756,
	0, 0, 805, 784, 788, 0, 0, 0, 0, 298,
	434, 453, 309, 423, 466, 314, 431, 445, 304, 395,
	420, 0, 0, 300, 451, 430, 377, 355, 356, 299,
	0, 414, 333, 347, 330, 393, 785, 808, 812, 329,
	883, 806, 461, 302, 0, 460, 392, 447, 452, 378,
	372, 0, 301, 449, 376, 371, 359, 337, 884, 360,
	361, 351, 404, 369, 405, 352, 382, 381, 383, 0,
	0, 0, 0, 0, 489, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	803, 0, 624, 0, 463, 0, 0, 867, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 807, 0,
	417, 398, 880, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 652, 653, 654, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 647, 864, 394, 589,
	622, 623, 514, 0, 879, 859, 861, 862, 866, 870,
	871, 872, 873, 874, 876, 878, 882, 646, 0, 568,
	583, 650, 582, 643, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 881, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 811, 564,
	565, 384, 385, 386, 387, 868, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 655, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 890, 863, 889, 891, 892, 888,
	893, 894, 875, 766, 0, 818, 886, 885, 887, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 644, 641, 446,
	645, 773, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 852, 825, 826, 827, 763, 828, 822, 823,
	764, 824, 853, 816, 849, 850, 792, 819, 829, 848,
	830, 851, 854, 855, 895, 896, 836, 820, 256, 897,
	833, 856, 847, 846, 831, 817, 857, 858, 799, 794,
	834, 835, 821, 840, 841, 842, 765, 813, 814, 815,
	837, 838, 795, 796, 797, 798, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 642, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 843, 632, 432, 0, 839, 635, 636, 633,
	370, 419, 437, 426, 809, 648, 510, 511, 649, 621,
	0, 758, 0, 396, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 761, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 800, 561, 512, 428, 380, 579, 578, 0, 0,
	869, 877, 0, 0, 0, 0, 0, 0, 0, 0,
	865, 0, 0, 0, 0, 753, 0, 0, 790, 845,
	844, 777, 787, 0, 0, 308, 228, 507, 627, 509,
	508, 778, 0, 779, 783, 786, 782, 780, 781, 0,
	860, 0, 0, 0, 0, 0, 0, 745, 757, 0,
	762, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 754, 755, 1576, 0, 0, 0,
	810, 0, 756, 0, 0, 805, 784, 788, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 785,
	808, 812, 329, 883, 806, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 884, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 803, 0, 624, 0, 463, 0, 0,
	867, 0, 0, 0, 433, 0, 0, 362, 0, 0,
	0, 807, 0, 417, 398, 880, 0, 0, 415, 367,
	448, 406, 454, 435, 462, 411, 407, 293, 436, 332,
	379, 305, 307, 327, 334, 336, 338, 339, 388, 389,
	401, 422, 438, 439, 440, 331, 315, 416, 316, 349,
	317, 294, 323, 321, 324, 424, 325, 296, 402, 444,
	0, 344, 412, 375, 297, 374, 403, 443, 442, 306,
	470, 476, 477, 566, 0, 482, 652, 653, 654, 491,
	0, 408, 496, 497, 498, 500, 501, 502, 503, 567,
	584, 551, 521, 484, 575, 518, 522, 523, 587, 0,
	0, 0, 475, 363, 364, 0, 342, 290, 291, 647,
	864, 394, 589, 622, 623, 514, 0, 879, 859, 861,
	862, 866, 870, 871, 872, 873, 874, 876, 878, 882,
	646, 0, 568, 583, 650, 582, 643, 400, 0, 421,
	580, 527, 0, 572, 546, 0, 573, 542, 577, 0,
	516, 0, 429, 456, 468, 485, 488, 517, 602, 603,
	604, 295, 487, 606, 607, 608, 609, 610, 611, 612,
	605, 881, 549, 526, 552, 467, 529, 528, 0, 0,
	563, 811, 564, 565, 384, 385, 386, 387, 868, 590,
	313, 486, 410, 0, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 556, 553, 655, 0, 613, 614,
	0, 0, 480, 481, 341, 348, 499, 350, 312, 399,
	343, 465, 357, 0, 492, 557, 493, 616, 619, 617,
	618, 391, 353, 354, 425, 358, 368, 413, 464, 397,
	418, 310, 455, 427, 373, 543, 570, 890, 863, 889,
	891, 892, 888, 893, 894, 875, 766, 0, 818, 886,
	885, 887, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 598, 597, 596, 595, 594, 593, 592,
	591, 0, 0, 540, 441, 322, 284, 318, 319, 326,
	644, 641, 446, 645, 773, 292, 520, 366, 0, 409,
	340, 585, 586, 0, 637, 852, 825, 826, 827, 763,
	828, 822, 823, 764, 824, 853, 816, 849, 850, 792,
	819, 829, 848, 830, 851, 854, 855, 895, 896, 836,
	820, 256, 897, 833, 856, 847, 846, 831, 817, 857,
	858, 799, 794, 834, 835, 821, 840, 841, 842, 765,
	813, 814, 815, 837, 838, 795, 796, 797, 798, 0,
	0, 0, 471, 472, 473, 495, 0, 457, 519, 642,
	0, 0, 0, 0, 0, 0, 0, 569, 581, 615,
	0, 625, 626, 628, 630, 843, 632, 432, 0, 839,
	635, 636, 633, 370, 419, 437, 426, 0, 648, 510,
	511, 649, 621, 809, 758, 0, 2252, 0, 0, 0,
	0, 0, 396, 0, 525, 558, 547, 631, 513, 0,
	0, 0, 0, 0, 0, 761, 0, 0, 0, 335,
	0, 0, 365, 562, 544, 554, 545, 530, 531, 532,
	539, 345, 533, 534, 535, 505, 536, 506, 537, 538,
	800, 561, 512, 428, 380, 579, 578, 0, 0, 869,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 865,
	0, 0, 0, 0, 753, 0, 0, 790, 845, 844,
	777, 787, 0, 0, 308, 228, 507, 627, 509, 508,
	778, 0, 779, 783, 786, 782, 780, 781, 0, 860,
	0, 0, 0, 0, 0, 0, 745, 757, 0, 762,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 754, 755, 0, 0, 0, 0, 810,
	0, 756, 0, 0, 805, 784, 788, 0, 0, 0,
	0, 298, 434, 453, 309, 423, 466, 314, 431, 445,
	304, 395, 420, 0, 0, 300, 451, 430, 377, 355,
	356, 299, 0, 414, 333, 347, 330, 393, 785, 808,
	812, 329, 883, 806, 461, 302, 0, 460, 392, 447,
	452, 378, 372, 0, 301, 449, 376, 371, 359, 337,
	884, 360, 361, 351, 404, 369, 405, 352, 382, 381,
	383, 0, 0, 0, 0, 0, 489, 490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 803, 0, 624, 0, 463, 0, 0, 867,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	807, 0, 417, 398, 880, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 652, 653, 654, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 647, 864,
	394, 589, 622, 623, 514, 0, 879, 859, 861, 862,
	866, 870, 871, 872, 873, 874, 876, 878, 882, 646,
	0, 568, 583, 650, 582, 643, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	881, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	811, 564, 565, 384, 385, 386, 387, 868, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 655, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 890, 863, 889, 891,
	892, 888, 893, 894, 875, 766, 0, 818, 886, 885,
	887, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 644,
	641, 446, 645, 773, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 852, 825, 826, 827, 763, 828,
	822, 823, 764, 824, 853, 816, 849, 850, 792, 819,
	829, 848, 830, 851, 854, 855, 895, 896, 836, 820,
	256, 897, 833, 856, 847, 846, 831, 817, 857, 858,
	799, 794, 834, 835, 821, 840, 841, 842, 765, 813,
	814, 815, 837, 838, 795, 796, 797, 798, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 642, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 843, 632, 432, 0, 839, 635,
	636, 633, 370, 419, 437, 426, 809, 648, 510, 511,
	649, 621, 0, 758, 0, 396, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 761, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 800, 561, 512, 428, 380, 579, 578,
	0, 0, 869, 877, 0, 0, 0, 0, 0, 0,
	0, 0, 865, 0, 0, 0, 0, 753, 0, 0,
	790, 845, 844, 777, 787, 0, 0, 308, 228, 507,
	627, 509, 508, 778, 0, 779, 783, 786, 782, 780,
	781, 0, 860, 0, 0, 0, 0, 0, 0, 745,
	757, 0, 762, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 754, 755, 1855, 0,
	0, 0, 810, 0, 756, 0, 0, 805, 784, 788,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 785, 808, 812, 329, 883, 806, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 884, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 803, 0, 624, 0, 463,
	0, 0, 867, 0, 0, 0, 433, 0, 0, 362,
	0, 0, 0, 807, 0, 417, 398, 880, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 652, 653,
	654, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 647, 864, 394, 589, 622, 623, 514, 0, 879,
	859, 861, 862, 866, 870, 871, 872, 873, 874, 876,
	878, 882, 646, 0, 568, 583, 650, 582, 643, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 881, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 811, 564, 565, 384, 385, 386, 387,
	868, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 655, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 890,
	863, 889, 891, 892, 888, 893, 894, 875, 766, 0,
	818, 886, 885, 887, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 644, 641, 446, 645, 773, 292, 520, 366,
	0, 409, 340, 585, 586, 0, 637, 852, 825, 826,
	827, 763, 828, 822, 823, 764, 824, 853, 816, 849,
	850, 792, 819, 829, 848, 830, 851, 854, 855, 895,
	896, 836, 820, 256, 897, 833, 856, 847, 846, 831,
	817, 857, 858, 799, 794, 834, 835, 821, 840, 841,
	842, 765, 813, 814, 815, 837, 838, 795, 796, 797,
	798, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 642, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 843, 632, 432,
	0, 839, 635, 636, 633, 370, 419, 437, 426, 809,
	648, 510, 511, 649, 621, 0, 758, 0, 396, 0,
	525, 558, 547, 631, 513, 0, 0, 0, 0, 0,
	0, 761, 0, 0, 0, 335, 0, 0, 365, 562,
	544, 554, 545, 530, 531, 532, 539, 345, 533, 534,
	535, 505, 536, 506, 537, 538, 800, 561, 512, 428,
	380, 579, 578, 0, 0, 869, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 865, 0, 0, 0, 0,
	753, 0, 0, 790, 845, 844, 777, 787, 0, 0,
	308, 228, 507, 627, 509, 508, 778, 0, 779, 783,
	786, 782, 780, 781, 0, 860, 0, 0, 0, 0,
	0, 0, 745, 757, 0, 762, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 754,
	755, 0, 0, 0, 0, 810, 0, 756, 0, 0,
	805, 784, 788, 0, 0, 0, 0, 298, 434, 453,
	309, 423, 466, 314, 431, 445, 304, 395, 420, 0,
	0, 300, 451, 430, 377, 355, 356, 299, 0, 414,
	333, 347, 330, 393, 785, 808, 812, 329, 883, 806,
	461, 302, 0, 460, 392, 447, 452, 378, 372, 0,
	301, 449, 376, 371, 359, 337, 884, 360, 361, 351,
	404, 369, 405, 352, 382, 381, 383, 0, 0, 0,
	0, 0, 489, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 803, 0,
	624, 0, 463, 0, 0, 867, 0, 0, 0, 433,
	0, 0, 362, 0, 0, 0, 807, 0, 417, 398,
	880, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 0, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 652, 653, 654, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 647, 864, 394, 589, 622, 623,
	514, 0, 879, 859, 861, 862, 866, 870, 871, 872,
	873, 874, 876, 878, 882, 646, 0, 568, 583, 650,
	582, 643, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 881, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 811, 564, 565, 384,
	385, 386, 387, 868, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 655, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 391, 353, 354, 425,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 373,
	543, 570, 890, 863, 889, 891, 892, 888, 893, 894,
	875, 766, 0, 818, 886, 885, 887, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 0, 0, 540, 441,
	322, 284, 318, 319, 326, 644, 641, 446, 645, 773,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	852, 825, 826, 827, 763, 828, 822, 823, 764, 824,
	853, 816, 849, 850, 792, 819, 829, 848, 830, 851,
	854, 855, 895, 896, 836, 820, 256, 897, 833, 856,
	847, 846, 831, 817, 857, 858, 799, 794, 834, 835,
	821, 840, 841, 842, 765, 813, 814, 815, 837, 838,
	795, 796, 797, 798, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 642, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	843, 632, 432, 0, 839, 635, 636, 633, 370, 419,
	437, 426, 809, 648, 510, 511, 649, 621, 0, 758,
	0, 396, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 761, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 800,
	561, 512, 428, 380, 579, 578, 0, 0, 869, 877,
	0, 0, 0, 0, 0, 0, 0, 0, 865, 0,
	0, 0, 0, 753, 0, 0, 790, 845, 844, 777,
	787, 0, 0, 308, 228, 507, 627, 509, 508, 778,
	0, 779, 783, 786, 782, 780, 781, 0, 860, 0,
	0, 0, 0, 0, 0, 745, 757, 0, 762, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 754, 755, 0, 0, 0, 0, 810, 0,
	756, 0, 0, 805, 784, 788, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 785, 808, 812,
	329, 883, 806, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 884,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	620, 803, 0, 624, 0, 463, 0, 0, 867, 0,
	0, 0, 433, 0, 0, 362, 0, 0, 0, 807,
	0, 417, 398, 880, 0, 0, 415, 367, 448, 406,
	454, 435, 462, 411, 407, 293, 436, 332, 379, 305,
	307, 327, 334, 336, 338, 339, 388, 389, 401, 422,
	438, 439, 440, 331, 315, 416, 316, 349, 317, 294,
	323, 321, 324, 424, 325, 296, 402, 444, 0, 344,
	412, 375, 297, 374, 403, 443, 442, 306, 470, 476,
	477, 566, 0, 482, 652, 653, 654, 491, 0, 408,
	496, 497, 498, 500, 501, 502, 503, 567, 584, 551,
	521, 484, 575, 518, 522, 523, 587, 0, 0, 0,
	475, 363, 364, 0, 342, 290, 291, 647, 864, 394,
	589, 622, 623, 514, 0, 879, 859, 861, 862, 866,
	870, 871, 872, 873, 874, 876, 878, 882, 646, 0,
	568, 583, 650, 582, 643, 400, 0, 421, 580, 527,
	0, 572, 546, 0, 573, 542, 577, 0, 516, 0,
	429, 456, 468, 485, 488, 517, 602, 603, 604, 295,
	487, 606, 607, 608, 609, 610, 611, 612, 605, 881,
	549, 526, 552, 467, 529, 528, 0, 0, 563, 811,
	564, 565, 384, 385, 386, 387, 868, 590, 313, 486,
	410, 0, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 556, 553, 655, 0, 613, 614, 0, 0,
	480, 481, 341, 348, 499, 350, 312, 399, 343, 465,
	357, 0, 492, 557, 493, 616, 619, 617, 618, 391,
	353, 354, 425, 358, 368, 413, 464, 397, 418, 310,
	455, 427, 373, 543, 570, 890, 863, 889, 891, 892,
	888, 893, 894, 875, 766, 0, 818, 886, 885, 887,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 598, 597, 596, 595, 594, 593, 592, 591, 0,
	0, 540, 441, 322, 284, 318, 319, 326, 644, 641,
	446, 645, 773, 292, 520, 366, 0, 409, 340, 585,
	586, 0, 637, 852, 825, 826, 827, 763, 828, 822,
	823, 764, 824, 853, 816, 849, 850, 792, 819, 829,
	848, 830, 851, 854, 855, 895, 896, 836, 820, 256,
	897, 833, 856, 847, 846, 831, 817, 857, 858, 799,
	794, 834, 835, 821, 840, 841, 842, 765, 813, 814,
	815, 837, 838, 795, 796, 797, 798, 0, 0, 0,
	471, 472, 473, 495, 0, 457, 519, 642, 0, 0,
	0, 0, 0, 0, 0, 569, 581, 615, 0, 625,
	626, 628, 630, 843, 632, 432, 0, 3527, 635, 3528,
	3529, 370, 419, 437, 426, 809, 648, 510, 511, 649,
	621, 0, 758, 0, 396, 0, 525, 558, 547, 631,
	513, 0, 0, 0, 0, 0, 0, 761, 0, 0,
	0, 335, 0, 0, 365, 562, 544, 554, 545, 530,
	531, 532, 539, 345, 533, 534, 535, 505, 536, 506,
	537, 538, 800, 561, 512, 428, 380, 579, 578, 0,
	0, 869, 877, 0, 0, 0, 0, 0, 0, 0,
	0, 865, 0, 0, 0, 0, 753, 0, 0, 790,
	845, 844, 777, 787, 0, 0, 308, 228, 507, 627,
	509, 508, 2728, 0, 2729, 783, 786, 782, 780, 781,
	0, 860, 0, 0, 0, 0, 0, 0, 745, 757,
	0, 762, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 754, 755, 0, 0, 0,
	0, 810, 0, 756, 0, 0, 805, 784, 788, 0,
	0, 0, 0, 298, 434, 453, 309, 423, 466, 314,
	431, 445, 304, 395, 420, 0, 0, 300, 451, 430,
	377, 355, 356, 299, 0, 414, 333, 347, 330, 393,
	785, 808, 812, 329, 883, 806, 461, 302, 0, 460,
	392, 447, 452, 378, 372, 0, 301, 449, 376, 371,
	359, 337, 884, 360, 361, 351, 404, 369, 405, 352,
	382, 381, 383, 0, 0, 0, 0, 0, 489, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 803, 0, 624, 0, 463, 0,
	0, 867, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 807, 0, 417, 398, 880, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 652, 653, 654,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	647, 864, 394, 589, 622, 623, 514, 0, 879, 859,
	861, 862, 866, 870, 871, 872, 873, 874, 876, 878,
	882, 646, 0, 568, 583, 650, 582, 643, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 881, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 811, 564, 565, 384, 385, 386, 387, 868,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 655, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 890, 863,
	889, 891, 892, 888, 893, 894, 875, 766, 0, 818,
	886, 885, 887, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 644, 641, 446, 645, 773, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 852, 825, 826, 827,
	763, 828, 822, 823, 764, 824, 853, 816, 849, 850,
	792, 819, 829, 848, 830, 851, 854, 855, 895, 896,
	836, 820, 256, 897, 833, 856, 847, 846, 831, 817,
	857, 858, 799, 794, 834, 835, 821, 840, 841, 842,
	765, 813, 814, 815, 837, 838, 795, 796, 797, 798,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	642, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 843, 632, 432, 0,
	839, 635, 636, 633, 370, 419, 437, 426, 809, 648,
	510, 511, 649, 621, 0, 758, 0, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 1720, 0, 0, 0,
	761, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 800, 561, 512, 428, 380,
	579, 578, 0, 0, 869, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 865, 0, 0, 0, 0, 753,
	0, 0, 790, 845, 844, 777, 787, 0, 0, 308,
	228, 507, 627, 509, 508, 778, 0, 779, 783, 786,
	782, 780, 781, 0, 860, 0, 0, 0, 0, 0,
	0, 0, 757, 0, 762, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 754, 755,
	0, 0, 0, 0, 810, 0, 756, 0, 0, 805,
	784, 788, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 785, 808, 812, 329, 883, 806, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 884, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 803, 0, 624,
	0, 463, 0, 0, 867, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 807, 0, 417, 398, 880,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 1721, 1722, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 864, 394, 589, 622, 623, 514,
	0, 879, 859, 861, 862, 866, 870, 871, 872, 873,
	874, 876, 878, 882, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 881, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 811, 564, 565, 384, 385,
	386, 387, 868, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 890, 863, 889, 891, 892, 888, 893, 894, 875,
	766, 0, 818, 886, 885, 887, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 773, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 852,
	825, 826, 827, 763, 828, 822, 823, 764, 824, 853,
	816, 849, 850, 792, 819, 829, 848, 830, 851, 854,
	855, 895, 896, 836, 820, 256, 897, 833, 856, 847,
	846, 831, 817, 857, 858, 799, 794, 834, 835, 821,
	840, 841, 842, 765, 813, 814, 815, 837, 838, 795,
	796, 797, 798, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 843,
	632, 432, 0, 839, 635, 636, 633, 370, 419, 437,
	426, 809, 648, 510, 511, 649, 621, 0, 758, 0,
	396, 0, 525, 558, 547, 631, 513, 0, 0, 0,
	0, 0, 0, 761, 0, 0, 0, 335, 0, 0,
	365, 562, 544, 554, 545, 530, 531, 532, 539, 345,
	533, 534, 535, 505, 536, 506, 537, 538, 800, 561,
	512, 428, 380, 579, 578, 0, 0, 869, 877, 0,
	0, 0, 0, 0, 0, 0, 0, 865, 0, 0,
	0, 0, 753, 0, 0, 790, 845, 844, 777, 787,
	0, 0, 308, 228, 507, 627, 509, 508, 778, 0,
	779, 783, 786, 782, 780, 781, 0, 860, 0, 0,
	0, 0, 0, 0, 0, 757, 0, 762, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 754, 755, 0, 0, 0, 0, 810, 0, 756,
	0, 0, 805, 784, 788, 0, 0, 0, 0, 298,
	434, 453, 309, 423, 466, 314, 431, 445, 304, 395,
	420, 0, 0, 300, 451, 430, 377, 355, 356, 299,
	0, 414, 333, 347, 330, 393, 785, 808, 812, 329,
	883, 806, 461, 302, 0, 460, 392, 447, 452, 378,
	372, 0, 301, 449, 376, 371, 359, 337, 884, 360,
	361, 351, 404, 369, 405, 352, 382, 381, 383, 0,
	0, 0, 0, 0, 489, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	803, 0, 624, 0, 463, 0, 0, 867, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 807, 0,
	417, 398, 880, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 652, 653, 654, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 647, 864, 394, 589,
	622, 623, 514, 0, 879, 859, 861, 862, 866, 870,
	871, 872, 873, 874, 876, 878, 882, 646, 0, 568,
	583, 650, 582, 643, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 881, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 811, 564,
	565, 384, 385, 386, 387, 868, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 655, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 890, 863, 889, 891, 892, 888,
	893, 894, 875, 766, 0, 818, 886, 885, 887, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 644, 641, 446,
	645, 773, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 852, 825, 826, 827, 763, 828, 822, 823,
	764, 824, 853, 816, 849, 850, 792, 819, 829, 848,
	830, 851, 854, 855, 895, 896, 836, 820, 256, 897,
	833, 856, 847, 846, 831, 817, 857, 858, 799, 794,
	834, 835, 821, 840, 841, 842, 765, 813, 814, 815,
	837, 838, 795, 796, 797, 798, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 642, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 843, 632, 432, 0, 839, 635, 636, 633,
	370, 419, 437, 426, 809, 648, 510, 511, 649, 621,
	0, 758, 0, 396, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 761, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 800, 561, 512, 428, 380, 579, 578, 0, 0,
	869, 877, 0, 0, 0, 0, 0, 0, 0, 0,
	865, 0, 0, 0, 0, 0, 0, 0, 790, 845,
	844, 777, 787, 0, 0, 308, 228, 507, 627, 509,
	508, 778, 0, 779, 783, 786, 782, 780, 781, 0,
	860, 0, 0, 0, 0, 0, 0, 745, 757, 0,
	762, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 754, 755, 0, 0, 0, 0,
	810, 0, 756, 0, 0, 805, 784, 788, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 785,
	808, 812, 329, 883, 806, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 884, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 803, 0, 624, 0, 463, 0, 0,
	867, 0, 0, 0, 433, 0, 0, 362, 0, 0,
	0, 807, 0, 417, 398, 880, 0, 0, 415, 367,
	448, 406, 454, 435, 462, 411, 407, 293, 436, 332,
	379, 305, 307, 327, 334, 336, 338, 339, 388, 389,
	401, 422, 438, 439, 440, 331, 315, 416, 316, 349,
	317, 294, 323, 321, 324, 424, 325, 296, 402, 444,
	0, 344, 412, 375, 297, 374, 403, 443, 442, 306,
	470, 476, 477, 566, 0, 482, 652, 653, 654, 491,
	0, 408, 496, 497, 498, 500, 501, 502, 503, 567,
	584, 551, 521, 484, 575, 518, 522, 523, 587, 0,
	0, 0, 475, 363, 364, 0, 342, 290, 291, 647,
	864, 394, 589, 622, 623, 514, 0, 879, 859, 861,
	862, 866, 870, 871, 872, 873, 874, 876, 878, 882,
	646, 0, 568, 583, 650, 582, 643, 400, 0, 421,
	580, 527, 0, 572, 546, 0, 573, 542, 577, 0,
	516, 0, 429, 456, 468, 485, 488, 517, 602, 603,
	604, 295, 487, 606, 607, 608, 609, 610, 611, 612,
	605, 881, 549, 526, 552, 467, 529, 528, 0, 0,
	563, 811, 564, 565, 384, 385, 386, 387, 868, 590,
	313, 486, 410, 0, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 556, 553, 655, 0, 613, 614,
	0, 0, 480, 481, 341, 348, 499, 350, 312, 399,
	343, 465, 357, 0, 492, 557, 493, 616, 619, 617,
	618, 391, 353, 354, 425, 358, 368, 413, 464, 397,
	418, 310, 455, 427, 373, 543, 570, 890, 863, 889,
	891, 892, 888, 893, 894, 875, 766, 0, 818, 886,
	885, 887, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 598, 597, 596, 595, 594, 593, 592,
	591, 0, 0, 540, 441, 322, 284, 318, 319, 326,
	644, 641, 446, 645, 773, 292, 520, 366, 0, 409,
	340, 585, 586, 0, 637, 852, 825, 826, 827, 763,
	828, 822, 823, 764, 824, 853, 816, 849, 850, 792,
	819, 829, 848, 830, 851, 854, 855, 895, 896, 836,
	820, 256, 897, 833, 856, 847, 846, 831, 817, 857,
	858, 799, 794, 834, 835, 821, 840, 841, 842, 765,
	813, 814, 815, 837, 838, 795, 796, 797, 798, 0,
	0, 0, 471, 472, 473, 495, 0, 457, 519, 642,
	0, 0, 0, 0, 0, 0, 0, 569, 581, 615,
	0, 625, 626, 628, 630, 843, 632, 432, 0, 839,
	635, 636, 633, 370, 419, 437, 426, 0, 648, 510,
	511, 649, 621, 0, 758, 205, 64, 196, 167, 0,
	0, 0, 0, 0, 0, 396, 0, 525, 558, 547,
	631, 513, 0, 197, 0, 0, 0, 0, 0, 0,
	188, 0, 335, 0, 198, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 139, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 0, 0, 0, 0, 166, 194, 203,
	195, 123, 0, 0, 620, 0, 0, 624, 0, 463,
	0, 0, 220, 0, 0, 0, 433, 0, 0, 362,
	193, 187, 186, 479, 0, 417, 398, 232, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 599, 600,
	601, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 458, 328, 394, 589, 622, 623, 514, 0, 576,
	515, 524, 320, 548, 560, 559, 390, 474, 223, 571,
	574, 504, 233, 0, 568, 583, 541, 582, 234, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 459, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 483, 564, 565, 384, 385, 386, 387,
	346, 590, 313, 486, 410, 137, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 231, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 238, 303, 446, 239, 0, 292, 520, 366,
	168, 409, 340, 585, 586, 61, 637, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 588, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 235, 45, 221, 224, 226, 225, 0, 62, 569,
	581, 615, 5, 625, 626, 628, 630, 629, 632, 432,
	0, 634, 635, 636, 633, 370, 419, 437, 426, 142,
	236, 510, 511, 237, 621, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 396, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 139, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 2403, 2406, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 624, 2407, 463,
	0, 0, 0, 2402, 0, 2401, 433, 2399, 2404, 362,
	0, 0, 0, 479, 0, 417, 398, 651, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 2405, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 652, 653,
	654, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 647, 328, 394, 589, 622, 623, 514, 0, 576,
	515, 524, 320, 548, 560, 559, 390, 474, 0, 571,
	574, 504, 646, 0, 568, 583, 650, 582, 643, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 459, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 483, 564, 565, 384, 385, 386, 387,
	346, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 655, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 644, 641, 446, 645, 0, 292, 520, 366,
	168, 409, 340, 585, 586, 0, 637, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 588, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 642, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 629, 632, 432,
	0, 634, 635, 636, 633, 370, 419, 437, 426, 0,
	648, 510, 511, 649, 621, 396, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1318, 0, 0,
	227, 0, 0, 777, 787, 0, 0, 308, 228, 507,
	627, 509, 508, 778, 0, 779, 783, 786, 782, 780,
	781, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 784, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 785, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 624, 0, 463,
	0, 0, 0, 0, 0, 0, 433, 0, 0, 362,
	0, 0, 0, 479, 0, 417, 398, 651, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 652, 653,
	654, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 647, 328, 394, 589, 622, 623, 514, 0, 576,
	515, 524, 320, 548, 560, 559, 390, 474, 0, 571,
	574, 504, 646, 0, 568, 583, 650, 582, 643, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 459, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 483, 564, 565, 384, 385, 386, 387,
	346, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 655, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 644, 641, 446, 645, 0, 292, 520, 366,
	0, 409, 340, 585, 586, 0, 637, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 588, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 642, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 629, 632, 432,
	0, 634, 635, 636, 633, 370, 419, 437, 426, 0,
	648, 510, 511, 649, 621, 205, 64, 196, 167, 0,
	0, 0, 0, 0, 0, 396, 674, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 681,
	0, 0, 0, 0, 0, 0, 0, 680, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 678, 679, 0, 620, 0, 0, 624, 0, 463,
	0, 0, 0, 0, 0, 0, 433, 0, 0, 362,
	0, 0, 0, 479, 0, 417, 398, 651, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 652, 653,
	654, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 647, 328, 394, 589, 622, 623, 514, 0, 576,
	515, 524, 320, 548, 560, 559, 390, 474, 0, 571,
	574, 504, 646, 0, 568, 583, 650, 582, 643, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 459, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 483, 564, 565, 384, 385, 386, 387,
	675, 677, 313, 486, 410, 689, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 655, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 644, 641, 446, 645, 0, 292, 520, 366,
	168, 409, 340, 585, 586, 0, 637, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 588, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 642, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 629, 632, 432,
	0, 634, 635, 636, 633, 370, 419, 437, 426, 0,
	648, 510, 511, 649, 621, 396, 0, 525, 558, 547,
	631, 513, 0, 1126, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1111, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 2566, 2569,
	2570, 2571, 2572, 2573, 2574, 0, 2579, 2575, 2576, 2577,
	2578, 0, 2561, 2562, 2563, 2564, 1109, 2545, 2567, 0,
	2546, 392, 2547, 2548, 2549, 2550, 1113, 2551, 2552, 2553,
	2554, 2555, 2558, 2559, 2556, 2557, 2565, 404, 369, 405,
	352, 382, 381, 383, 1137, 1139, 1141, 1143, 1146, 489,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 624, 0, 463,
	0, 0, 0, 0, 0, 0, 433, 0, 0, 362,
	0, 0, 0, 2560, 0, 417, 398, 651, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 652, 653,
	654, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 647, 328, 394, 589, 622, 623, 514, 0, 576,
	515, 524, 320, 548, 560, 559, 390, 474, 0, 571,
	574, 504, 646, 0, 568, 583, 650, 582, 643, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 459, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 483, 564, 565, 384, 385, 386, 387,
	346, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 655, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 644, 641, 446, 645, 0, 292, 2568, 366,
	0, 409, 340, 585, 586, 0, 637, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 588, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 642, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 629, 632, 432,
	0, 634, 635, 636, 633, 370, 419, 437, 426, 0,
	648, 510, 511, 649, 621, 396, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 2403, 2406, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 624, 2407, 463,
	0, 0, 0, 2402, 0, 2401, 433, 2399, 2404, 362,
	0, 0, 0, 479, 0, 417, 398, 651, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 2405, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 652, 653,
	654, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 647, 328, 394, 589, 622, 623, 514, 0, 576,
	515, 524, 320, 548, 560, 559, 390, 474, 0, 571,
	574, 504, 646, 0, 568, 583, 650, 582, 643, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 459, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 483, 564, 565, 384, 385, 386, 387,
	346, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 655, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 644, 641, 446, 645, 0, 292, 520, 366,
	0, 409, 340, 585, 586, 0, 637, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 588, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 642, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 629, 632, 432,
	0, 634, 635, 636, 633, 370, 419, 437, 426, 0,
	648, 510, 511, 649, 621, 396, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 2424, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 624, 2423, 463,
	0, 0, 0, 2429, 2426, 2428, 433, 0, 2427, 362,
	0, 0, 0, 479, 0, 417, 398, 651, 0, 2421,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 652, 653,
	654, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 647, 328, 394, 589, 622, 623, 514, 0, 576,
	515, 524, 320, 548, 560, 559, 390, 474, 0, 571,
	574, 504, 646, 0, 568, 583, 650, 582, 643, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 459, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 483, 564, 565, 384, 385, 386, 387,
	346, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 655, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 644, 641, 446, 645, 0, 292, 520, 366,
	0, 409, 340, 585, 586, 0, 637, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 588, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 642, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 629, 632, 432,
	0, 634, 635, 636, 633, 370, 419, 437, 426, 0,
	648, 510, 511, 649, 621, 396, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 2424, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 624, 2423, 463,
	0, 0, 0, 2429, 2426, 2428, 433, 0, 2427, 362,
	0, 0, 0, 479, 0, 417, 398, 651, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 652, 653,
	654, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 647, 328, 394, 589, 622, 623, 514, 0, 576,
	515, 524, 320, 548, 560, 559, 390, 474, 0, 571,
	574, 504, 646, 0, 568, 583, 650, 582, 643, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 459, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 483, 564, 565, 384, 385, 386, 387,
	346, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 655, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 644, 641, 446, 645, 0, 292, 520, 366,
	0, 409, 340, 585, 586, 0, 637, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 588, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 642, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 629, 632, 432,
	0, 634, 635, 636, 633, 370, 419, 437, 426, 0,
	648, 510, 511, 649, 621, 396, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 2118, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 0, 0, 2119, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 1247, 1248, 1249, 1246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 624, 0, 463,
	0, 0, 0, 0, 0, 0, 433, 0, 0, 362,
	0, 0, 0, 479, 0, 417, 398, 651, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 652, 653,
	654, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 647, 328, 394, 589, 622, 623, 514, 0, 576,
	515, 524, 320, 548, 560, 559, 390, 474, 0, 571,
	574, 504, 646, 0, 568, 583, 650, 582, 643, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 459, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 483, 564, 565, 384, 385, 386, 387,
	346, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 655, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 644, 641, 446, 645, 0, 292, 520, 366,
	0, 409, 340, 585, 586, 0, 637, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 588, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 642, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 629, 632, 432,
	0, 634, 635, 636, 633, 370, 419, 437, 426, 205,
	648, 510, 511, 649, 621, 0, 0, 0, 0, 396,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 139, 561, 512,
	428, 380, 579, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 2168, 0, 227, 0, 0, 0, 0, 0,
	0, 308, 228, 507, 627, 509, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 0, 450, 478, 329, 469,
	0, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 494, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 620, 0,
	0, 624, 0, 463, 0, 0, 0, 0, 0, 0,
	433, 0, 0, 362, 0, 0, 0, 479, 0, 417,
	398, 651, 0, 0, 415, 367, 448, 406, 454, 435,
	462, 411, 407, 293, 436, 332, 379, 305, 307, 327,
	334, 336, 338, 339, 388, 389, 401, 422, 438, 439,
	440, 331, 315, 416, 316, 349, 317, 294, 323, 321,
	324, 424, 325, 296, 402, 444, 0, 344, 412, 375,
	297, 374, 403, 443, 442, 306, 470, 476, 477, 566,
	0, 482, 652, 653, 654, 491, 0, 408, 496, 497,
	498, 500, 501, 502, 503, 567, 584, 551, 521, 484,
	575, 518, 522, 523, 587, 0, 0, 0, 475, 363,
	364, 0, 342, 290, 291, 647, 328, 394, 589, 622,
	623, 514, 0, 576, 515, 524, 320, 548, 560, 559,
	390, 474, 0, 571, 574, 504, 646, 0, 568, 583,
	650, 582, 643, 400, 0, 421, 580, 527, 0, 572,
	546, 0, 573, 542, 577, 0, 516, 0, 429, 456,
	468, 485, 488, 517, 602, 603, 604, 295, 487, 606,
	607, 608, 609, 610, 611, 612, 605, 459, 549, 526,
	552, 467, 529, 528, 0, 0, 563, 483, 564, 565,
	384, 385, 386, 387, 346, 590, 313, 486, 410, 0,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	556, 553, 655, 0, 613, 614, 0, 0, 480, 481,
	341, 348, 499, 350, 312, 399, 343, 465, 357, 0,
	492, 557, 493, 616, 619, 617, 618, 391, 353, 354,
	425, 358, 368, 413, 464, 397, 418, 310, 455, 427,
	373, 543, 570, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 598,
	597, 596, 595, 594, 593, 592, 591, 0, 0, 540,
	441, 322, 284, 318, 319, 326, 644, 641, 446, 645,
	0, 292, 520, 366, 168, 409, 340, 585, 586, 0,
	637, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 588, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 471, 472,
	473, 495, 0, 457, 519, 642, 0, 0, 0, 0,
	0, 0, 0, 569, 581, 615, 0, 625, 626, 628,
	630, 629, 632, 432, 0, 634, 635, 636, 633, 370,
	419, 437, 426, 205, 648, 510, 511, 649, 621, 0,
	0, 0, 0, 396, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 139, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 201, 2154, 0, 227, 0,
	0, 0, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 0, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 0, 0, 624, 0, 463, 0, 0,
	0, 0, 0, 0, 433, 0, 0, 362, 0, 0,
	0, 479, 0, 417, 398, 651, 0, 0, 415, 367,
	448, 406, 454, 435, 462, 411, 407, 293, 436, 332,
	379, 305, 307, 327, 334, 336, 338, 339, 388, 389,
	401, 422, 438, 439, 440, 331, 315, 416, 316, 349,
	317, 294, 323, 321, 324, 424, 325, 296, 402, 444,
	0, 344, 412, 375, 297, 374, 403, 443, 442, 306,
	470, 476, 477, 566, 0, 482, 652, 653, 654, 491,
	0, 408, 496, 497, 498, 500, 501, 502, 503, 567,
	584, 551, 521, 484, 575, 518, 522, 523, 587, 0,
	0, 0, 475, 363, 364, 0, 342, 290, 291, 647,
	328, 394, 589, 622, 623, 514, 0, 576, 515, 524,
	320, 548, 560, 559, 390, 474, 0, 571, 574, 504,
	646, 0, 568, 583, 650, 582, 643, 400, 0, 421,
	580, 527, 0, 572, 546, 0, 573, 542, 577, 0,
	516, 0, 429, 456, 468, 485, 488, 517, 602, 603,
	604, 295, 487, 606, 607, 608, 609, 610, 611, 612,
	605, 459, 549, 526, 552, 467, 529, 528, 0, 0,
	563, 483, 564, 565, 384, 385, 386, 387, 346, 590,
	313, 486, 410, 0, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 556, 553, 655, 0, 613, 614,
	0, 0, 480, 481, 341, 348, 499, 350, 312, 399,
	343, 465, 357, 0, 492, 557, 493, 616, 619, 617,
	618, 391, 353, 354, 425, 358, 368, 413, 464, 397,
	418, 310, 455, 427, 373, 543, 570, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 598, 597, 596, 595, 594, 593, 592,
	591, 0, 0, 540, 441, 322, 284, 318, 319, 326,
	644, 641, 446, 645, 0, 292, 520, 366, 168, 409,
	340, 585, 586, 0, 637, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 588,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 471, 472, 473, 495, 0, 457, 519, 642,
	0, 0, 0, 0, 0, 0, 0, 569, 581, 615,
	0, 625, 626, 628, 630, 629, 632, 432, 0, 634,
	635, 636, 633, 370, 419, 437, 426, 0, 648, 510,
	511, 649, 621, 396, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 1041, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 0, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 1048,
	1049, 0, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1052, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 1035, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 1022, 461, 302, 1021, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 0, 0, 624, 0, 463, 0, 0,
	0, 0, 0, 0, 433, 0, 0, 362, 0, 0,
	0, 479, 0, 417, 398, 651, 0, 0, 415, 367,
	448, 406, 454, 435, 462, 1039, 407, 293, 436, 332,
	379, 305, 307, 327, 334, 336, 338, 339, 388, 389,
	401, 422, 438, 439, 440, 331, 315, 416, 316, 349,
	317, 294, 323, 321, 324, 424, 325, 296, 402, 444,
	0, 344, 412, 375, 297, 374, 403, 443, 442, 306,
	470, 476, 477, 566, 0, 482, 652, 653, 654, 491,
	0, 408, 496, 497, 498, 500, 501, 502, 503, 567,
	584, 551, 521, 484, 575, 518, 522, 523, 587, 0,
	0, 0, 475, 363, 364, 0, 342, 290, 291, 647,
	328, 394, 589, 622, 623, 514, 0, 576, 515, 524,
	320, 548, 560, 559, 390, 474, 0, 571, 574, 504,
	646, 0, 568, 583, 650, 582, 643, 400, 0, 421,
	580, 527, 0, 572, 546, 0, 573, 542, 577, 0,
	516, 0, 429, 456, 468, 485, 488, 517, 602, 603,
	604, 295, 487, 606, 607, 608, 609, 610, 611, 1040,
	605, 459, 549, 526, 552, 467, 529, 528, 0, 0,
	563, 1043, 564, 565, 384, 385, 386, 387, 346, 590,
	1038, 486, 410, 0, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 556, 553, 655, 0, 613, 614,
	0, 0, 480, 481, 341, 348, 499, 350, 312, 399,
	343, 465, 357, 0, 492, 557, 493, 616, 619, 617,
	618, 1050, 1036, 1046, 1037, 358, 368, 413, 464, 397,
	418, 310, 455, 427, 1047, 543, 570, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 598, 597, 596, 595, 594, 593, 592,
	591, 0, 0, 540, 441, 322, 284, 318, 319, 326,
	644, 641, 446, 645, 0, 292, 520, 366, 0, 409,
	340, 585, 586, 0, 637, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 588,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 471, 472, 473, 495, 0, 457, 519, 642,
	0, 0, 0, 0, 0, 0, 0, 569, 581, 615,
	0, 625, 626, 628, 630, 629, 632, 432, 0, 634,
	635, 636, 633, 1034, 419, 437, 426, 205, 648, 510,
	511, 649, 621, 0, 0, 0, 0, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 139, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2050,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 168, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 1048, 1049, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1052, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 1022, 461,
	302, 1021, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 1050, 2071, 1046, 2072, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 1047, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 2951, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 2954, 0, 0, 0, 2953, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 1542, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 1540, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1538,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 1536, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 1540, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1538,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4014, 0, 227, 845, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 1540, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1538,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 2468, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 971, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 1540, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1750,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 2507,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 2509, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 2118,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 2119, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 3165, 3167, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 2530, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 1540, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 662, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 661, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 845, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3991,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 3759, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 3892, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1764,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3774, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 3686, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 3197, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2050,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 3405, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3058, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 1540, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 2509, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 2870, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 2627, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2588, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 2586, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 2359, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 1904, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 2032, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 1540, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 1937,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 1569, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 662, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 672, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 971, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 1890, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 1519, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 1517, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 1397, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 740, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 651,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 697,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	652, 653, 654, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 647, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 646, 0, 568, 583, 650, 582,
	643, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 698, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	655, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 644, 641, 446, 645, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 642, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 648, 510, 511, 649, 621, 719, 718, 725,
	715, 0, 0, 2019, 0, 0, 0, 0, 0, 722,
	723, 0, 724, 728, 0, 0, 709, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 733, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2022, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2019,
	0, 0, 737, 0, 0, 739, 0, 0, 0, 0,
	738, 0, 3780, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1996, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2022, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1996, 0,
	2012, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 710,
	712, 711, 3751, 0, 0, 0, 2012, 0, 0, 0,
	717, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 721, 2000, 0, 0, 0, 0, 0, 736,
	0, 0, 0, 0, 2006, 0, 714, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1994, 2028, 0, 0, 1995, 1997,
	1999, 0, 2001, 2002, 2003, 2007, 2008, 2009, 2011, 2014,
	2015, 2016, 0, 0, 0, 0, 0, 0, 0, 2004,
	2013, 2005, 0, 0, 0, 0, 0, 0, 0, 2000,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2006, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2020, 0, 0, 0, 0,
	1994, 2028, 0, 0, 1995, 1997, 1999, 0, 2001, 2002,
	2003, 2007, 2008, 2009, 2011, 2014, 2015, 2016, 0, 0,
	0, 0, 0, 0, 0, 2004, 2013, 2005, 716, 720,
	726, 0, 727, 729, 0, 0, 730, 731, 732, 0,
	2017, 734, 735, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1993, 0, 0,
	0, 2020, 0, 0, 1992, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2010, 0,
	0, 0, 0, 0, 0, 0, 0, 1998, 0, 0,
	0, 0, 0, 0, 0, 0, 2017, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1993, 0, 0, 0, 0, 0, 0,
	1992, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2010, 0, 0, 0, 0, 0,
	0, 0, 0, 1998, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 713, 0, 0,
	0, 0, 0, 0, 0, 3614, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3614,
}

var yyPact = [...]int{
	359, -1000, -1000, -1000, -322, 15302, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 49354, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 473, 49354, -320, 31084, 47464, -1000, -1000, 2845, -1000,
	48094, 17212, 49354, 558, 555, 49354, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 971, -1000, 53134, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 896, 5378, 52504, 11495, -204,
	-1000, 1612, -22, 2653, 516, -195, -196, 1169, 1194, 1207,
	1041, 49354, 1123, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 255, 988, 48724, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 4000, 258, 963, 988, 22260, 147, 141,
	1612, 494, -62, 210, -1000, 1549, 4016, 203, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11495,
	11495, 15302, -361, 15302, 11495, 49354, 49354, -1000, -1000, -1000,
	-1000, -320, 48094, 896, 5378, 11495, 2653, 516, -195, -196,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -62, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 141, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5052, -1000,
	1715, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2429, 3160, 1708, 2651,
	833, 47464, 49354, -1000, 151, 833, -1000, -1000, -1000, 1612,
	3545, -1000, 49354, 49354, 243, 1997, -1000, 525, 435, 548,
	432, 371, 1691, -1000, -1000, -1000, -1000, -1000, -1000, 726,
	3530, -1000, 49354, 49354, 3182, 49354, -1000, 2367, 795, -1000,
	53774, 3381, 1531, 1001, 3198, -1000, -1000, 3159, -1000, 376,
	333, 312, 771, 467, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 360, -1000, 3436, -1000, -1000, 363, -1000, -1000, 344,
	-1000, -1000, -1000, 137, -1000, -1000, -1000, -1000, -1000, -1000,
	5, -1000, -1000, 1272, 2335, 11495, 2149, -1000, 2986, 1751,
	-1000, -1000, -1000, 7058, 14027, 14027, 14027, 14027, 49354, -1000,
	-1000, 2959, 11495, 3158, 3157, 3156, 3152, -1000, -1000, -1000,
	-1000, -1000, -1000, 3151, 1660, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2131, -1000, -1000, -1000, 14660, -1000,
	3149, 3148, 3147, 3146, 3137, 3124, 3123, 3112, 3111, 3110,
	3108, 3107, 3103, 3097, 2828, 16572, 3090, 2648, 2646, 3082,
	3081, 3080, 2645, 3079, 3077, 3076, 2828, 2828, 3075, 3074,
	3072, 3071, 3070, 3068, 3066, 3065, 3064, 3063, 3039, 3034,
	3030, 3025, 3024, 3023, 3022, 3021, 3019, 3014, 3010, 3009,
	3008, 3007, 3001, 3000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1630, -1000,
	2993, 3547, 2894, -1000, 3420, 3408, 3406, 3404, -251, 2990,
	2338, -1000, -1000, 111, 3528, 49354, -278, 49354, 440, -68,
	-69, -73, -1000, -70, -1000, -1000, 1225, -1000, 1097, 51874,
	932, -1000, -1000, 49354, 886, 886, 886, 49354, 49354, 240,
	1039, 886, 886, 886, 886, 886, 937, 886, 3446, 962,
	958, 952, 950, 886, -17, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1996, 1993, 3277, 1070, -1000, -1000, -1000, -1000,
	1569, 49354, -1000, 2921, 440, -304, 1795, 1795, 3514, 3514,
	3445, 805, 793, 772, 1795, 598, -1000, 1942, 1942, 1942,
	1942, 1795, 523, 791, 3449, 3449, 179, 1942, 100, 1795,
	1795, 100, 1795, 1795, -1000, 1987, 302, -267, -1000, -1000,
	-1000, -1000, 1942, 1942, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3431, 3430, 896, 896, 49354, 896, 233, 49354, 896,
	896, 896, 49354, 906, -309, 96, 51244, 50614, 2446, 2367,
	785, 780, 1581, 1990, -1000, 1848, 49354, 49354, 1848, 1848,
	25414, 24784, -1000, 49354, -1000, 3547, 2894, 2823, 1881, 2822,
	2894, -74, 440, 896, 896, 896, 896, 896, 332, 896,
	896, 896, 896, 896, 49354, 49354, 46834, 896, 896, 896,
	896, 9590, 9590, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 15302, 2257, 2282, 202, 4, -302, 289, -1000,
	-1000, 49354, 3335, 328, -1000, -1000, -1000, 2886, -1000, 2889,
	2889, 2889, 2889, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2889, 2889, 2920, 2989, -1000, -1000, 2888,
	2888, 2888, 2886, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2908, 2908,
	2912, 2912, 2908, 49354, -115, -1000, -1000, 11495, 49354, 3372,
	409, 2988, 833, -1000, -1000, 49354, 176, 410, 3547, 3371,
	3449, 3501, -1000, -1000, 1652, 2337, 2643, -1000, 371, -1000,
	446, 371, -1000, 557, 557, 1884, -1000, 1177, -1000, -1000,
	-1000, -1000, -1000, -1000, 49354, 5, 423, -1000, -1000, 2631,
	2979, -1000, 673, 1420, 1394, -1000, 342, 4473, 39904, 2367,
	39904, 49354, -1000, -1000, -1000, -1000, -1000, -1000, 130, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 319, -1000, 11495, 11495, 11495, 11495, 11495,
	-1000, 1010, 13394, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14027, 14027, 14027, 14027, 14027, 14027, 14027, 14027, 14027, 14027,
	14027, 14027, 2955, 1928, 14027, 14027, 14027, 14027, 27934, 1881,
	3238, 1574, 327, 1751, 1751, 1751, 1751, 11495, -1000, 1945,
	2335, 11495, 11495, 11495, 11495, 34234, 49354, -1000, -1000, 5207,
	11495, 11495, 3792, 11495, 3402, 11495, 11495, 11495, 2820, 5783,
	49354, 11495, -1000, 2818, 2817, -1000, -1000, 2171, 11495, -1000,
	-1000, 11495, -1000, -1000, 11495, 14027, 11495, -1000, 11495, 11495,
	11495, -1000, -1000, 777, 3402, 3402, 3402, 1939, 11495, 11495,
	3402, 3402, 3402, 1891, 3402, 3402, 3402, 3402, 3402, 3402,
	3402, 3402, 3402, 3402, 3402, 2816, 2812, 2810, 10862, 3449,
	-204, -1000, 8957, 3371, 3449, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -260, 2977, 49354, 2638, 2636,
	-335, 181, 498, 49354, 1235, -1000, -1000, 49354, 2331, 49354,
	2330, 69, 1166, 1101, 1119, -1000, -1000, 49354, 49984, -1000,
	49354, 1952, 49354, 49354, 3398, -1000, 2976, 49354, 886, 886,
	886, -1000, 44944, 39904, 49354, 49354, 2367, 49354, 49354, 49354,
	886, 886, 886, 886, 49354, -1000, 3336, 39904, 3330, 906,
	-1000, 49354, 1569, 3396, 49354, -1000, -1000, -1000, -1000, 3514,
	14027, 14027, -1000, -1000, 11495, -1000, 46204, 1942, 1795, 1795,
	-1000, -1000, 49354, -1000, -1000, -1000, 1942, 49354, 1942, 1942,
	3514, 1942, -1000, -1000, -1000, 1795, 1795, -1000, -1000, 11495,
	-1000, -1000, 1942, 1942, -1000, -1000, 3514, 49354, 98, 3514,
	3514, 108, -1000, -1000, -1000, 1795, 49354, 49354, 886, 49354,
	-1000, 49354, 49354, -1000, -1000, 49354, 49354, 4367, 49354, 44944,
	45574, 3429, -1000, 39904, 49354, 49354, 1560, -1000, 928, 37384,
	-1000, 49354, 1498, -1000, 48, -1000, 64, 96, 1848, 96,
	1848, 925, -1000, 657, 769, 23524, 597, 39904, 6416, -1000,
	-1000, 1848, 1848, 6416, 6416, 1755, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1550, -1000, 284, 3449, -1000, -1000, -1000,
	-1000, -1000, 2327, -1000, 49354, 44944, 39904, 2367, 49354, 896,
	49354, 49354, 49354, 49354, 49354, -1000, 2969, 1639, -1000, 3373,
	49354, 49354, 49354, 49354, 1377, -1000, -1000, 20362, 1638, 1377,
	-1000, 2078, -1000, 11495, 15302, -233, 11495, 15302, 15302, 11495,
	15302, -1000, 11495, 322, -1000, -1000, -1000, -1000, 2313, -1000,
	2312, -1000, -1000, -1000, -1000, -1000, 2635, 2635, -1000, 2305,
	-1000, -1000, -1000, -1000, 2302, -1000, -1000, 2299, -1000, -1000,
	-1000, -1000, -146, 2808, 1272, -1000, 2634, 3197, -210, -1000,
	21630, 49354, 49354, 409, -339, 1991, 1986, 1984, -1000, -210,
	-1000, 20996, 49354, 3449, -1000, -213, 3371, 11495, 49354, -1000,
	3444, -1000, -1000, 371, -1000, -1000, -1000, 557, 438, -1000,
	-1000, -1000, -1000, -1000, -1000, 1637, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 466, -63, -64, 1546,
	-1000, 49354, -1000, -1000, 342, 39904, 41794, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 272, -1000, -1000, 185, -1000, 923,
	287, 1880, -1000, -1000, 241, 215, 246, 997, 2335, -1000,
	2097, 2097, 2021, -1000, 755, -1000, -1000, -1000, -1000, 2959,
	-1000, -1000, -1000, 1946, 2104, -1000, 1907, 1907, 1743, 1743,
	1743, 1743, 1743, 2082, 2082, -1000, -1000, -1000, 7058, 2955,
	14027, 14027, 14027, 14027, 967, 967, 3635, 4142, -1000, -1000,
	-1000, -1000, 11495, 184, 2064, -1000, 11495, 2710, 1692, 2664,
	1644, 1877, -1000, 2886, 11495, 1636, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2806, 2804, 2481, 3527,
	2803, 11495, -1000, -1000, 1876, 1874, 1872, -1000, 2443, 10229,
	-1000, -1000, -1000, 2801, 1633, 2790, -1000, -1000, -1000, 2789,
	1870, 1323, 2787, 1861, 2786, 2784, 2783, 2782, 1545, 11495,
	11495, 11495, 11495, 2781, 1863, 1862, 11495, 11495, 11495, 11495,
	2778, 11495, 11495, 11495, 11495, 11495, 11495, 11495, 11495, 11495,
	11495, 49354, 148, 148, 148, 1535, 1534, -1000, -1000, 1858,
	-1000, 2335, -1000, -1000, 3371, -1000, 2945, 2298, 1512, -1000,
	-1000, -317, 2554, 49354, 49354, 180, 49354, 2632, -280, 49354,
	-1000, -1000, 2624, -1000, -1000, -1000, 1161, 1092, 1122, -1000,
	49354, -1000, 2615, 3359, 3443, 893, 49354, 1388, 2944, 49354,
	49354, 49354, 317, -1000, -1000, 1442, -1000, 287, -7, 565,
	1330, 3180, 3526, -119, 49354, 49354, 49354, 49354, 3392, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 44314, -1000, 2943,
	1840, -1000, -1000, 1751, 1751, 2335, 3178, 49354, 49354, 3514,
	3514, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1942, 3514,
	3514, 1416, 1795, 1942, -1000, -1000, 1942, -339, -1000, 1942,
	-1000, -339, 1625, -339, 49354, -1000, -1000, -1000, 3390, 2921,
	1506, -1000, -1000, -1000, 3499, 1690, 870, 870, 1118, 815,
	3496, 19102, -1000, 1841, 1121, 921, 3302, 369, -1000, 1841,
	-143, 852, 1841, 1841, 1841, 1841, 1841, 1841, 1841, 715,
	708, 1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841,
	1841, 1841, 1190, 1841, 1841, 1841, 1841, 1841, -1000, 1841,
	2934, 550, -1000, -1000, -1000, -1000, -1000, -1000, 770, 629,
	314, 3428, 419, -1000, 404, 1442, 353, 3426, 454, 49354,
	49354, 3618, 1434, -1000, -1000, -1000, -1000, -1000, 28564, 28564,
	22894, 28564, -1000, 218, 1848, 96, 95, -1000, -1000, 1498,
	6416, 1498, 6416, 2292, -1000, -1000, 920, -1000, -1000, 1330,
	-1000, 49354, 49354, -1000, -1000, 2933, 1982, -1000, -1000, 16572,
	-1000, 6416, 6416, -1000, -1000, 30454, 49354, -1000, 3, -1000,
	13, 3371, -1000, 1317, -1000, -1000, 1494, 1330, 3192, 49354,
	1317, 1317, 1317, -1000, -1000, 17842, 49354, 49354, -1000, -1000,
	-1000, -1000, 3514, 9590, -1000, 37384, -1000, -1000, 43684, -1000,
	43054, 3514, 1894, -1000, 15302, 2241, 199, -1000, 269, -305,
	198, 2210, 197, 2335, -1000, -1000, 2777, 2770, 1828, -1000,
	1826, 2765, 1824, 1820, 2291, -1000, 81, -1000, 3344, 1332,
	-1000, 2932, -1000, 1810, 3272, -1000, 1486, -1000, 1978, 1796,
	-1000, -1000, -1000, 11495, 42424, 11495, 1332, 1793, 3271, 1486,
	3371, 2613, -1000, 1456, -1000, 2321, 1623, 242, -1000, -1000,
	-1000, 49354, 896, 2631, 1762, 41794, 1395, -1000, 917, 1618,
	1615, -1000, 39904, 365, 39904, -1000, 39904, -1000, -1000, 445,
	-1000, 49354, 3363, -1000, -1000, -1000, 2554, 1977, -336, 49354,
	-1000, -1000, -1000, -1000, -1000, 1745, -1000, 967, 967, 3635,
	2486, -1000, 14027, -1000, 14027, 3162, -1000, 1892, -1000, 11495,
	2058, 4980, 11495, 4980, 1353, 26674, 34234, -81, 3370, 3144,
	49354, -1000, -1000, 11495, 11495, -1000, 3113, -1000, -1000, -1000,
	-1000, 11495, 11495, 2366, -1000, 49354, -1000, -1000, -1000, -1000,
	26674, -1000, 14027, -1000, -1000, -1000, -1000, 11495, 1362, 1362,
	3105, 1740, 148, 148, 148, 3100, 3091, 3087, 1726, 148,
	3056, 3031, 2998, 2974, 2967, 2956, 2936, 2922, 2918, 2910,
	1656, -1000, 2931, -1000, -1000, 2120, 12761, 8957, -1000, -1000,
	308, 1446, 2290, 2600, 129, -1000, 1976, -1000, 2596, 49354,
	49354, 1202, -1000, 49354, 3525, -1000, -1000, -1000, -1000, 1081,
	-1000, 2594, -1000, 472, 2165, 194, 338, 2763, 1444, -1000,
	-1000, 49354, -1000, -1000, -1000, 17842, 2921, 2930, 2921, 196,
	1841, 675, 39904, 765, -1000, 49354, 2346, 1972, 3191, 767,
	3332, 49354, 2929, 469, 2928, 2927, 3387, 514, 5164, 49354,
	1374, -1000, 1614, 4016, -1000, 49354, -1000, 2367, -1000, 1795,
	-1000, -1000, 3514, -1000, -1000, 11495, 11495, 3514, 1795, 1795,
	-1000, 1942, -1000, 49354, -1000, -339, 514, 5164, 3386, 4671,
	744, 2555, -1000, 49354, -1000, -1000, -1000, 930, -1000, 1075,
	886, 49354, 2088, 1075, 2084, 2925, -1000, -1000, 49354, 49354,
	49354, 49354, -1000, -1000, 49354, -1000, 49354, 49354, 49354, 49354,
	49354, 41164, -1000, 49354, 49354, -1000, 49354, 2076, 49354, 2069,
	3356, -1000, 1841, 1841, 1042, -1000, -1000, 639, -1000, 41164,
	2288, 2287, 2285, 2279, 2591, 2586, 2585, 1841, 1841, 2276,
	2584, 40534, 2583, 1337, 2275, 2266, 2264, 2274, 2582, 1219,
	-1000, 2580, 2250, 2247, 2244, 49354, 2924, 2499, 527, -1000,
	-1000, 2165, 196, 1841, 416, 49354, 1957, 1956, 675, 624,
	560, -9, 24154, -1000, -1000, -1000, 49354, 37384, 37384, 37384,
	37384, 37384, 37384, -1000, 3244, 3213, 3228, -1000, 3232, 3231,
	3239, 3225, 3206, 49354, 37384, 2921, -1000, 40534, -1000, -1000,
	-1000, 1881, 1650, 3289, 1114, 11495, 6416, -1000, -1000, 41,
	27, -1000, -1000, -1000, -1000, 39904, 2578, 597, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3442, 49354, 49354, 857, 2761,
	1440, -1000, -1000, -1000, 5164, 2889, 2889, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2889, 2889, 2920, -1000,
	-1000, 2888, 2888, 2888, 2886, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2908, 2908, 2912, 2912, 2908,
	-1000, -1000, 3512, -1000, 1431, -1000, -1000, 1604, -1000, 3512,
	2008, -324, 15302, 1901, 1812, -1000, 11495, 15302, 11495, -234,
	390, -241, -1000, -1000, -1000, 2577, -1000, -1000, -1000, 2249,
	-1000, 2246, -1000, 216, 220, 2067, -210, 8957, 483, 49354,
	-210, 49354, 8957, -1000, 49354, 178, -350, -351, 170, 450,
	-210, 3442, 81, 11495, 3297, -1000, -1000, 49354, 2237, -1000,
	-1000, -1000, 3524, 39904, 2367, 1781, 39274, -1000, 362, -1000,
	271, 630, 2570, -1000, 949, 128, 2563, 2554, -1000, -1000,
	-1000, -1000, 14027, 1751, -1000, -1000, -1000, 2335, 11495, 2760,
	-1000, 1107, 1107, 2549, 2759, 2757, -1000, 2889, 2889, -1000,
	2886, 2888, 2886, 1107, 1107, 2755, -1000, 2883, -1000, 3370,
	-1000, 2381, 2807, -1000, 2767, 2680, 11495, -1000, 2751, 3801,
	1585, -23, -174, 148, 148, -1000, -1000, -1000, -1000, 148,
	148, 148, 148, -1000, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 834, -91, -271, -92, -272,
	-1000, 2747, 1418, -1000, -1000, -1000, -1000, -1000, 3792, 1411,
	571, 571, 2554, 2552, -1000, 916, 2533, 1156, 49354, 2530,
	-284, -1000, 2528, -1000, -1000, 49354, 2527, -1000, 616, 49354,
	49354, 2526, 2524, 1388, 5164, 2744, 3385, 18472, 3384, 2364,
	-1000, -1000, -1000, 29824, 624, -1000, -1000, -1000, 747, 368,
	2236, 590, -1000, 49354, 549, 3287, 1955, 2523, 49354, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3332, -1000, 980, 499,
	36124, 15942, -1000, 421, 49354, -1000, 18472, 18472, 421, 507,
	1926, -1000, 833, 1298, 144, 37384, 49354, -1000, 36754, 2743,
	-1000, 1330, 3514, -1000, 2335, 2335, -339, 3514, 3514, 1795,
	-1000, -1000, 507, -1000, 421, -1000, 1515, 19732, 587, 545,
	452, -1000, 720, -1000, -1000, 831, 3349, 5164, -1000, 49354,
	-1000, 49354, -1000, 49354, 49354, 886, 11495, 3349, 49354, 913,
	-1000, 1187, 513, 449, 804, 804, 1410, -1000, 3370, -1000,
	-1000, 1401, -1000, -1000, -1000, -1000, 49354, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 26674, 26674, 3424, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2522, 2519, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 49354, 1629, -1000, 1950, 2234, 2518, 2364, 29824, 1949,
	1848, 2516, 2515, 624, -1000, 2514, 2513, 2346, 1948, 944,
	49354, -1000, 1327, 49354, 49354, -1000, 1485, -1000, 1947, 3170,
	3189, 3170, -1000, 3170, -1000, -1000, -1000, -1000, -1000, -1000,
	3222, -1000, 3122, -1000, -1000, -1000, -1000, 1485, -1000, -1000,
	-1000, -1000, -1000, 1114, -1000, 3441, 1075, 1075, 1075, 2742,
	-1000, -1000, -1000, -1000, 1395, 2729, -1000, -1000, -1000, 3535,
	-1000, -1000, -1000, -1000, -1000, -1000, 17842, 3327, 3510, 3495,
	38644, 3510, -1000, -324, 1829, -1000, 2053, 192, 2206, 49354,
	-1000, -1000, -1000, 2728, 2726, -216, 229, 3493, 3490, 1127,
	-1000, 2725, 1365, -210, -1000, -1000, 1332, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -210, -1000, 1332, -1000, 216, -1000,
	-1000, 3354, -1000, -1000, 2367, -1000, 268, -1000, -1000, -1000,
	-1000, -1000, -1000, 273, -1000, 49354, -1000, 1348, 122, -1000,
	2335, -1000, -1000, -1000, -1000, -1000, 4980, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2512, -1000, -1000,
	11495, -1000, -1000, -1000, 2649, -1000, -1000, 11495, 2724, 2510,
	2723, 2509, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3547,
	-1000, 3487, 1587, 2720, 2717, 1584, 2712, 2711, -1000, 11495,
	2706, 3792, 1045, 2508, 1045, -1000, -1000, 442, 29194, 49354,
	3523, -1000, 49354, 2501, -1000, -1000, 2165, 614, 678, -1000,
	-1000, -1000, -1000, 968, 421, 2705, 1339, -1000, -1000, -1000,
	-1000, 421, -1000, 2500, 285, -1000, -1000, -1000, -1000, 2215,
	-1000, -1000, 2227, 1721, 299, -1000, -1000, -1000, -1000, -1000,
	-1000, 2350, 49354, 38014, 2362, 1921, -344, -1000, 2882, -1000,
	1841, 1841, 1841, 49354, 1576, -1000, 1841, 1841, 2704, -1000,
	-1000, 2701, 2699, -120, 854, 1914, 1897, -1000, 2211, 28564,
	37384, 36754, 1476, -1000, 1596, -1000, -1000, -1000, -1000, -1000,
	-1000, 3514, 854, -1000, 580, 2195, 14027, 2881, 14027, 2879,
	599, 2878, 1573, -1000, 49354, -1000, -1000, 49354, 3820, 2876,
	-1000, 2871, 3173, 563, 2867, 2864, 49354, 2617, -1000, 3349,
	49354, 838, 3315, -1000, -1000, -1000, 456, -1000, -1000, 654,
	-1000, 49354, -1000, 49354, -1000, 1738, -1000, 26674, -1000, -1000,
	1572, -1000, 2499, 2496, 3792, -1000, -1000, 285, 2491, 6416,
	-1000, -1000, -1000, -1000, -1000, 3287, 2490, 2350, 49354, -1000,
	49354, 1327, 1327, 3547, 49354, 8957, -1000, -1000, 11495, 2863,
	-1000, 11495, -1000, -1000, -1000, -1000, -1000, -1000, 2862, 3312,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1889, -1000, 11495,
	12128, -1000, -1000, 876, 15302, -244, 385, -1000, -1000, -1000,
	-218, 2489, -1000, -1000, 3484, 2488, 2382, 49354, -1000, -1000,
	1332, 1332, -216, -1000, -1000, 1330, -1000, -1000, 1171, 718,
	-1000, 2686, 279, -1000, 2603, -1000, 2598, 148, -1000, 148,
	-1000, 310, 11495, -1000, 2484, -1000, -1000, -1000, 2482, -1000,
	-1000, 2537, -1000, 2683, -1000, 2477, -1000, -1000, 49354, -1000,
	-1000, 1130, 2475, -346, 2474, 2165, 2165, 49354, 5164, -122,
	-120, 18472, -122, -1000, -1000, 411, 426, -1000, -1000, 2226,
	679, -1000, -1000, 2471, 631, -1000, 1327, -1000, 1919, 2109,
	2421, 34234, 26674, 27934, 2470, -1000, -1000, 36124, 1889, 1889,
	4289, 319, 5266, -1000, 2861, 1201, 1883, -1000, 2192, -1000,
	2191, -1000, 3514, 1476, 143, -1000, -1000, 1774, -1000, 1201,
	2555, 3481, -1000, 3608, 49354, 3580, 49354, 2858, 1917, 14027,
	-1000, 831, 3265, -1000, -1000, 3820, -1000, -1000, 2070, 14027,
	-1000, -1000, 2469, 27934, 1033, 1898, 1896, 1003, 2857, -1000,
	676, 3534, -1000, -1000, -1000, 1029, 2855, -1000, 2051, 2047,
	-1000, 49354, -1000, 34234, 34234, 677, 677, 34234, 34234, 2853,
	804, -1000, -1000, 14027, -1000, -1000, 1841, -1000, -1000, -1000,
	1841, 1727, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2362,
	-1000, -1000, 1317, -1000, 3449, -1000, -1000, 2335, 49354, 2335,
	35494, -1000, 3480, 3479, -1000, 2335, 260, 261, 2848, 2844,
	-1000, -324, 49354, 49354, -220, 2188, -1000, 2459, 222, -1000,
	-1000, 1284, -218, -222, 108, 26674, 1886, -1000, 2681, 383,
	-134, -1000, -1000, -1000, -1000, 2673, -1000, 1266, -1000, -1000,
	-1000, 1272, 2672, 2669, -1000, -1000, -1000, -1000, 49354, -1000,
	2412, -1000, 2456, 2453, 603, -100, -1000, -1000, 487, -1000,
	-1000, -1000, 623, 2373, -1000, -1000, 425, -1000, -1000, -1000,
	2350, 2444, -1000, -1000, 121, -1000, 1864, 1554, -1000, -1000,
	-1000, -1000, -1000, -1000, 819, -1000, 421, 53853, -1000, 1121,
	27304, -1000, 1171, 819, 550, 32974, 703, 320, -1000, 2185,
	-1000, -1000, 3547, -1000, 694, -1000, 594, -1000, 1552, -1000,
	1551, 34864, 2183, 2157, -1000, 53787, 947, -1000, -1000, 3635,
	-1000, -1000, -1000, -1000, -1000, -1000, 2440, 2432, -1000, -1000,
	-1000, -1000, -1000, 2172, 2843, 135, 3423, 2430, -1000, -1000,
	2841, 1548, 1526, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1518, 1501, 34234, -1000, -1000, 3635, 2170, 26674,
	1841, -1000, -1000, 1480, 1466, -1000, -1000, -1000, -1000, -1000,
	-303, 2839, 11495, 11495, -1000, -1000, -1000, 2832, -1000, -1000,
	3477, -220, -225, 2427, 213, 254, -1000, 2424, -1000, -101,
	3252, -139, -1000, -1000, 725, -211, 171, 162, 153, -1000,
	-1000, -1000, 11495, -1000, -1000, -1000, 118, -1000, 1850, -1000,
	-1000, 2165, 49354, 674, -1000, -1000, -1000, -1000, 264, -1000,
	-1000, -1000, -1000, -1000, -1000, 2421, 2420, -1000, 575, 3474,
	-1000, 5266, -1000, 1841, -1000, 575, 1465, -1000, 1841, 1841,
	-1000, 534, -1000, 1831, -1000, 2163, -1000, 3449, -1000, 526,
	-1000, 578, -1000, -1000, -1000, 1464, -1000, -1000, -1000, 53787,
	581, -1000, 809, 2831, -1000, -1000, 2668, 11495, 2828, 1841,
	2665, -77, 34234, 3172, 3166, 3102, 3093, 1458, -1000, -1000,
	26674, -1000, -1000, 33604, -1000, 2827, 1448, 1441, 49354, 2382,
	-1000, -1000, 2418, -1000, 898, 207, 254, -1000, 3473, 206,
	3471, 3470, 1268, 3249, -1000, -1000, 2013, -1000, 193, 190,
	169, -1000, -1000, -1000, -1000, -1000, 2412, 2411, 2395, 605,
	-1000, 361, -1000, -1000, -1000, 357, -1000, 3466, 744, -1000,
	26674, -1000, -1000, 32974, 1889, 1889, -1000, -1000, 2159, -1000,
	-1000, -1000, -1000, 2158, -1000, -1000, -1000, 1433, -1000, 49354,
	1014, 8324, -1000, 2439, -1000, 49354, -1000, 3187, -1000, 292,
	1427, 357, 677, 357, 677, 357, 677, 357, 677, 349,
	-1000, -1000, -1000, 1425, 11495, -1000, -1000, 1409, -1000, -1000,
	-1000, 2826, 2139, 229, 211, 3457, -1000, 2382, 3453, 2382,
	2382, -1000, 188, -123, 725, -1000, -1000, -1000, -1000, -1000,
	-1000, 2393, -1000, -1000, -1000, -1000, 1841, 1841, 2386, 2384,
	464, -1000, -1000, 32344, 587, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 581, 5266, -1000, 8324, 1399, -1000, 2335, -1000,
	804, -1000, -1000, 3185, 3184, 3520, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2825, 2661, -1000, 49354,
	3417, 26044, 204, -1000, -1000, -1000, 2383, -1000, 2382, -1000,
	-1000, 1834, -136, -1000, -269, 2138, 2137, -1000, -1000, 49354,
	-1000, 49354, 580, -1000, 5266, 1316, -1000, 8324, -1000, -1000,
	3533, -1000, 3521, 966, 966, 357, 357, 357, 357, 11495,
	-1000, -1000, -1000, 49354, -1000, 1314, -1000, -1000, -1000, 1583,
	-1000, -1000, -1000, -1000, 2378, -140, -1000, -1000, 2377, -1000,
	-1000, -1000, 1285, 2555, -1000, -1000, -1000, -1000, -1000, 2164,
	660, -1000, 2660, 1228, -1000, 1802, -1000, 31714, 49354, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 49354, 7691,
	-1000, 1516, -1000, -1000, 2335, 49354, -1000,
}

var yyPgo = [...]int{
	0, 185, 3559, 259, 182, 4213, 90, 273, 275, 264,
	272, 4212, 4211, 4210, 4209, 3313, 3303, 4207, 4206, 4205,
	4204, 4203, 4202, 4201, 4200, 4199, 4198, 4196, 4195, 4193,
	4192, 4191, 4190, 4188, 4187, 4185, 4184, 4183, 4180, 4177,
	4176, 4175, 4174, 4173, 4172, 4170, 4169, 267, 4168, 4162,
	4157, 4156, 4155, 4154, 4153, 4151, 4150, 4149, 4148, 4147,
	4146, 4145, 4144, 4143, 4141, 4140, 4139, 4138, 4137, 4136,
	4135, 4133, 4132, 4128, 4127, 4126, 4125, 4124, 4119, 4118,
	4117, 4116, 255, 4115, 4114, 245, 4113, 3302, 4112, 4111,
	4109, 4108, 4107, 4106, 4105, 4104, 4103, 4102, 4097, 296,
	4096, 4095, 4094, 4093, 4090, 4087, 4086, 4084, 4083, 4082,
	4081, 4080, 4079, 282, 4078, 4076, 4075, 4074, 254, 4072,
	253, 4070, 179, 133, 4069, 4068, 4063, 4062, 4059, 4057,
	4056, 4055, 4046, 4045, 4044, 4043, 4042, 4041, 241, 203,
	77, 4040, 50, 4039, 4038, 218, 4036, 159, 4035, 157,
	4034, 4033, 4028, 4026, 4025, 4023, 4022, 4020, 4019, 4017,
	4016, 4014, 4013, 4011, 4009, 4002, 4001, 4000, 3999, 3996,
	3995, 3994, 3993, 56, 3989, 263, 3988, 80, 3987, 178,
	3984, 75, 3982, 62, 132, 261, 2500, 269, 248, 199,
	181, 3981, 3975, 290, 3971, 167, 228, 165, 109, 123,
	3967, 148, 3965, 256, 48, 47, 251, 151, 55, 191,
	128, 3960, 223, 102, 115, 3959, 3958, 149, 3957, 240,
	186, 3956, 111, 3955, 3940, 3939, 3936, 3933, 205, 201,
	3928, 3925, 141, 3924, 3921, 68, 129, 3916, 84, 125,
	176, 122, 3913, 778, 127, 89, 3911, 139, 110, 3909,
	97, 3907, 3906, 3905, 3904, 188, 3901, 3900, 147, 70,
	3899, 3898, 3895, 74, 3894, 81, 3893, 33, 3892, 61,
	3890, 3889, 3888, 3882, 3879, 3878, 3877, 3875, 3874, 3873,
	3872, 3871, 64, 3869, 3866, 3865, 3864, 7, 13, 15,
	3863, 28, 3862, 173, 3860, 3859, 171, 3858, 204, 3857,
	3856, 99, 93, 3855, 98, 168, 3850, 9, 27, 78,
	3849, 3848, 219, 268, 108, 160, 3847, 279, 3846, 3845,
	3843, 166, 3842, 3841, 3840, 492, 3839, 3838, 3837, 3833,
	3831, 3829, 32, 3828, 1, 216, 43, 3827, 131, 146,
	3826, 41, 31, 3824, 49, 116, 231, 142, 104, 3823,
	3821, 3819, 137, 214, 112, 29, 0, 101, 220, 164,
	3817, 3808, 3807, 252, 3806, 237, 260, 238, 197, 262,
	257, 3805, 3803, 59, 3802, 170, 30, 54, 136, 79,
	20, 247, 3800, 1753, 10, 189, 3799, 210, 3798, 8,
	17, 53, 153, 3797, 3796, 36, 271, 3795, 3792, 3791,
	130, 3790, 3788, 187, 82, 3773, 3772, 3771, 3770, 39,
	3769, 193, 16, 3768, 103, 3767, 258, 3766, 208, 144,
	194, 184, 172, 229, 235, 86, 85, 3765, 1919, 158,
	106, 22, 3764, 225, 3762, 190, 135, 3760, 95, 3744,
	246, 276, 213, 3743, 196, 11, 51, 38, 34, 45,
	14, 265, 207, 3742, 3741, 23, 52, 3740, 60, 3739,
	19, 3738, 3737, 42, 3736, 57, 3, 3734, 3732, 18,
	21, 3719, 40, 211, 177, 120, 96, 67, 3718, 3717,
	161, 143, 3716, 145, 163, 162, 3715, 83, 3712, 3711,
	3708, 3707, 789, 3706, 250, 3705, 3704, 3703, 3699, 3695,
	3683, 3682, 3679, 3678, 230, 3677, 107, 44, 3676, 3674,
	3673, 3670, 87, 155, 3667, 3660, 3658, 3657, 35, 150,
	3656, 12, 3655, 26, 24, 37, 3654, 105, 3653, 4,
	195, 3652, 3651, 5, 3650, 3648, 2, 3646, 3644, 140,
	3642, 100, 25, 174, 113, 3641, 3640, 92, 215, 154,
	3639, 3637, 118, 242, 209, 3636, 156, 234, 270, 3635,
	217, 3633, 3631, 3630, 3629, 3628, 3627, 1274, 3626, 3624,
	239, 69, 94, 3622, 221, 119, 3621, 3620, 88, 175,
	121, 124, 58, 91, 3619, 117, 212, 3618, 206, 3615,
	266, 3614, 3613, 114, 3609, 3608, 3606, 3594, 200, 3589,
	3588, 202, 232, 3587, 3586, 278, 3584, 3582, 3581, 3580,
	3576, 3572, 3571, 3570, 3566, 3565, 249, 244, 3564,
}

//line mysql_sql.y:12739
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 611, 614, 614, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 128,
	128, 347, 347, 348, 348, 130, 343, 343, 342, 342,
	131, 132, 133, 590, 590, 134, 135, 165, 589, 589,
	167, 167, 167, 167, 167, 463, 129, 129, 129, 129,
	129, 171, 171, 171, 171, 171, 127, 596, 596, 596,
	597, 597, 124, 154, 153, 156, 156, 155, 155, 152,
	152, 148, 151, 151, 150, 150, 149, 144, 146, 146,
	145, 147, 147, 125, 113, 126, 538, 538, 537, 537,
	536, 536, 488, 488, 489, 489, 334, 334, 334, 535,
	535, 535, 534, 534, 533, 533, 532, 532, 530, 530,
	531, 529, 528, 528, 528, 526, 526, 526, 522, 522,
	524, 523, 523, 525, 517, 517, 520, 520, 518, 518,
	518, 518, 521, 516, 516, 516, 515, 515, 112, 112,
	112, 430, 430, 111, 111, 444, 444, 444, 444, 444,
	442, 442, 442, 442, 442, 442, 441, 441, 440, 440,
	445, 445, 443, 443, 443, 443, 443, 443, 443, 443,
	443, 443, 443, 443, 443, 443, 443, 443, 443, 443,
	443, 443, 443, 443, 443, 443, 443, 443, 443, 443,
	443, 443, 443, 443, 443, 443, 443, 443, 443, 443,
	443, 443, 443, 443, 443, 443, 443, 443, 443, 443,
	443, 443, 443, 100, 100, 100, 100, 100, 100, 100,
	107, 105, 105, 105, 106, 602, 602, 601, 601, 603,
	603, 603, 603, 604, 604, 103, 103, 103, 104, 439,
	439, 439, 101, 102, 102, 429, 429, 434, 434, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 438, 438, 438, 436, 436, 435, 435, 437,
	437, 91, 91, 91, 91, 91, 91, 95, 96, 97,
	97, 97, 97, 94, 93, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 92, 92, 92, 92, 92, 92,
	86, 86, 86, 86, 86, 85, 85, 87, 87, 426,
	426, 425, 108, 108, 109, 599, 599, 598, 600, 600,
	600, 600, 110, 116, 116, 116, 116, 116, 116, 116,
	116, 115, 115, 118, 118, 117, 119, 99, 99, 99,
	99, 99, 99, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 563,
	563, 563, 563, 565, 565, 361, 362, 615, 364, 360,
	360, 360, 559, 559, 560, 561, 562, 562, 562, 114,
	14, 218, 218, 462, 462, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 13, 84, 89, 89, 90,
	297, 297, 298, 292, 292, 299, 299, 170, 300, 300,
	300, 305, 305, 306, 306, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 277, 277, 277,
	272, 272, 272, 272, 273, 273, 274, 274, 275, 275,
	275, 275, 276, 276, 353, 353, 301, 301, 301, 303,
	303, 302, 296, 294, 294, 294, 294, 294, 294, 294,
	295, 295, 295, 295, 304, 304, 82, 88, 88, 88,
	88, 577, 577, 83, 83, 588, 588, 492, 492, 375,
	375, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 498, 499, 371,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 79, 80, 81,
	54, 57, 58, 169, 53, 53, 53, 415, 415, 52,
	616, 616, 346, 346, 67, 66, 56, 68, 69, 70,
	71, 72, 73, 51, 65, 65, 65, 65, 65, 65,
	65, 65, 76, 511, 511, 618, 618, 618, 74, 75,
	491, 491, 491, 64, 63, 62, 61, 60, 60, 50,
	50, 49, 49, 55, 160, 59, 161, 161, 368, 368,
	368, 370, 370, 366, 617, 617, 458, 458, 369, 369,
	48, 48, 48, 48, 77, 367, 367, 345, 365, 365,
	365, 12, 12, 10, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 26, 27, 29, 423, 423, 420, 28, 20, 19,
	19, 23, 22, 18, 18, 21, 24, 25, 25, 9,
	9, 9, 9, 15, 15, 16, 190, 190, 244, 244,
	571, 571, 567, 567, 568, 568, 568, 569, 569, 570,
	570, 120, 505, 505, 505, 505, 505, 505, 8, 8,
	213, 213, 504, 504, 504, 504, 504, 504, 427, 427,
	427, 548, 548, 548, 549, 212, 212, 207, 207, 506,
	506, 392, 550, 550, 514, 514, 513, 513, 512, 512,
	210, 210, 211, 211, 193, 193, 139, 139, 519, 519,
	519, 519, 527, 527, 487, 487, 282, 282, 336, 336,
	337, 337, 183, 183, 184, 184, 184, 184, 184, 184,
	605, 605, 606, 607, 608, 608, 609, 609, 609, 610,
	610, 610, 610, 610, 556, 556, 558, 558, 557, 209,
	209, 205, 205, 206, 206, 206, 204, 204, 203, 202,
	202, 201, 199, 199, 199, 200, 200, 200, 217, 217,
	186, 186, 186, 185, 185, 185, 185, 185, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	187, 187, 564, 564, 564, 493, 493, 493, 501, 501,
	314, 314, 315, 315, 315, 315, 315, 137, 137, 497,
	497, 313, 313, 188, 188, 189, 189, 189, 189, 312,
	312, 311, 198, 198, 197, 196, 196, 196, 191, 191,
	191, 191, 191, 192, 323, 323, 322, 322, 321, 321,
	321, 321, 324, 123, 136, 136, 138, 216, 216, 320,
	319, 319, 319, 319, 215, 215, 214, 214, 208, 208,
	195, 195, 195, 195, 318, 194, 316, 595, 595, 594,
	594, 593, 591, 591, 591, 592, 592, 592, 592, 540,
	540, 540, 540, 540, 354, 354, 354, 359, 359, 357,
	357, 357, 357, 357, 363, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 39, 227, 228,
	40, 229, 229, 230, 230, 231, 231, 232, 233, 234,
	234, 234, 234, 38, 219, 219, 220, 220, 221, 221,
	222, 223, 223, 223, 226, 224, 225, 225, 613, 613,
	612, 37, 37, 30, 174, 174, 175, 175, 175, 177,
	177, 278, 278, 278, 176, 176, 178, 178, 178, 572,
	574, 574, 576, 575, 575, 575, 578, 578, 578, 578,
	578, 579, 579, 579, 579, 580, 580, 31, 157, 157,
	181, 181, 162, 583, 583, 583, 582, 582, 584, 584,
	585, 585, 340, 340, 341, 341, 172, 173, 173, 164,
	159, 180, 180, 180, 180, 180, 182, 182, 246, 246,
	158, 163, 166, 168, 573, 581, 581, 581, 424, 424,
	421, 422, 422, 419, 418, 418, 418, 587, 587, 586,
	586, 586, 355, 355, 32, 414, 414, 416, 417, 417,
	417, 408, 408, 408, 408, 36, 412, 412, 413, 413,
	413, 413, 413, 413, 413, 409, 409, 411, 411, 407,
	407, 407, 407, 407, 407, 407, 35, 179, 179, 406,
	406, 403, 403, 401, 401, 402, 402, 400, 400, 400,
	404, 404, 43, 78, 44, 45, 46, 42, 405, 405,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	141, 140, 140, 140, 140, 140, 143, 143, 339, 339,
	338, 338, 142, 279, 279, 41, 257, 257, 479, 479,
	474, 474, 474, 474, 474, 495, 495, 495, 475, 475,
	475, 476, 476, 476, 478, 478, 478, 477, 477, 477,
	477, 477, 494, 494, 496, 496, 496, 446, 446, 447,
	447, 447, 450, 450, 466, 466, 467, 467, 465, 465,
	472, 472, 471, 471, 470, 470, 469, 469, 468, 468,
	468, 468, 461, 461, 460, 460, 448, 448, 448, 448,
	448, 449, 449, 449, 459, 459, 464, 464, 310, 310,
	309, 309, 265, 265, 266, 266, 308, 308, 263, 263,
	264, 264, 264, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 546,
	546, 547, 268, 268, 280, 280, 280, 280, 280, 280,
	267, 267, 269, 269, 245, 245, 243, 243, 235, 235,
	235, 235, 235, 236, 236, 237, 237, 238, 238, 238,
	242, 242, 241, 241, 241, 241, 239, 239, 240, 240,
	240, 240, 240, 240, 432, 432, 543, 543, 544, 544,
	539, 539, 539, 542, 542, 542, 542, 542, 542, 542,
	545, 545, 545, 541, 541, 247, 333, 333, 333, 356,
	356, 356, 356, 358, 332, 332, 332, 262, 262, 261,
	261, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 431, 431, 372, 372, 373, 373, 291,
	290, 290, 290, 290, 290, 288, 289, 287, 287, 287,
	287, 287, 284, 284, 283, 283, 283, 285, 285, 285,
	285, 285, 410, 410, 281, 281, 271, 271, 271, 270,
	270, 270, 473, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 286, 330, 330, 330, 331, 331, 331,
	331, 331, 331, 331, 331, 382, 382, 388, 388, 555,
	555, 554, 248, 248, 248, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 258, 258, 258, 455, 455, 455,
	455, 456, 456, 456, 456, 457, 457, 457, 453, 453,
	454, 454, 393, 394, 394, 502, 502, 503, 503, 451,
	451, 452, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 510, 510, 510, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 566, 566, 566, 551, 551, 551,
	552, 552, 552, 552, 552, 552, 552, 552, 552, 552,
	552, 552, 553, 553, 553, 553, 553, 553, 553, 553,
	553, 553, 553, 553, 553, 553, 553, 553, 553, 328,
	328, 328, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	395, 395, 396, 396, 507, 507, 507, 507, 507, 507,
	508, 508, 509, 509, 509, 509, 500, 500, 500, 500,
	500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
	500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
	500, 500, 500, 500, 500, 500, 380, 325, 325, 325,
	397, 389, 389, 390, 390, 391, 391, 383, 383, 383,
	383, 383, 383, 384, 384, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 385, 385, 387,
	387, 399, 399, 399, 398, 398, 398, 398, 398, 398,
	398, 260, 260, 260, 260, 377, 377, 377, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	250, 250, 250, 250, 254, 254, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	255, 255, 255, 255, 255, 253, 253, 253, 253, 253,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 121,
	122, 122, 252, 335, 335, 480, 480, 483, 483, 481,
	481, 482, 484, 484, 484, 485, 485, 485, 486, 486,
	486, 490, 490, 344, 344, 344, 352, 352, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 350, 350, 350, 350, 350,
	350, 350, 350, 350, 350, 349, 349, 349, 349, 349,
	349, 349, 349, 349, 349, 349, 349, 349, 349, 349,
	349, 349, 349, 349, 349, 349, 349, 349, 349, 349,
	349, 349, 349, 349, 349, 349, 349, 349, 349, 349,
	349, 349, 349, 349, 349, 349, 349, 349, 349, 349,
	349, 349, 349, 349, 349,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 5, 7, 9, 8, 6, 4, 0, 1, 1,
	0, 1, 5, 2, 2, 6, 9, 6, 9, 4,
	7, 8, 0, 1, 1, 2, 4, 6, 1, 2,
	4, 0, 2, 10, 11, 2, 0, 2, 1, 3,
	3, 3, 0, 2, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 3, 4, 4, 5, 1, 3, 3, 1, 2,
	2, 2, 1, 2, 2, 3, 4, 4, 6, 1,
	1, 1, 2, 4, 6, 1, 4, 1, 3, 3,
	4, 4, 4, 4, 3, 3, 2, 4, 4, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 1, 2, 3, 3,
	4, 5, 4, 2, 2, 0, 1, 4, 2, 4,
	1, 5, 3, 2, 1, 2, 2, 4, 4, 5,
	2, 1, 3, 4, 4, 1, 2, 9, 7, 1,
	3, 3, 1, 1, 3, 1, 3, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 4, 2, 4, 3, 3, 1, 1, 1,
	1, 1, 1, 2, 3, 4, 7, 2, 3, 3,
	4, 3, 4, 4, 5, 3, 4, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 1, 1, 1, 1, 6,
	4, 1, 1, 0, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 10, 7, 4, 4, 3,
	1, 3, 3, 1, 3, 1, 6, 7, 3, 3,
	3, 1, 1, 1, 3, 2, 4, 5, 5, 6,
	5, 5, 3, 2, 2, 1, 3, 4, 3, 7,
	5, 8, 2, 2, 1, 3, 2, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 0, 1, 2, 1,
	3, 2, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 6, 3, 3, 1, 1, 7, 7, 7, 8,
	8, 0, 4, 7, 6, 0, 3, 0, 2, 0,
	1, 1, 1, 1, 4, 2, 2, 3, 3, 4,
	5, 3, 4, 4, 2, 2, 2, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	4, 3, 3, 3, 2, 5, 5, 0, 2, 7,
	0, 1, 0, 1, 5, 5, 3, 3, 2, 4,
	4, 4, 4, 4, 1, 1, 1, 3, 3, 1,
	1, 1, 6, 0, 1, 1, 1, 1, 5, 5,
	0, 1, 1, 3, 3, 3, 4, 7, 7, 5,
	4, 7, 8, 3, 3, 2, 3, 4, 0, 2,
	2, 0, 2, 2, 1, 1, 1, 1, 0, 1,
	5, 5, 6, 4, 3, 1, 3, 1, 1, 3,
	5, 2, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 4, 4, 1, 3, 1, 4, 6, 6,
	4, 4, 4, 4, 4, 3, 6, 3, 5, 1,
	1, 2, 2, 11, 8, 9, 1, 3, 2, 4,
	0, 2, 0, 1, 1, 1, 1, 0, 1, 0,
	1, 4, 2, 1, 5, 4, 4, 2, 5, 5,
	1, 3, 2, 1, 5, 4, 4, 2, 0, 5,
	4, 0, 1, 3, 3, 1, 3, 1, 3, 1,
	3, 4, 0, 1, 0, 1, 1, 3, 1, 1,
	0, 4, 1, 3, 2, 1, 0, 8, 0, 4,
	7, 4, 0, 2, 0, 2, 0, 2, 0, 4,
	1, 3, 1, 1, 6, 4, 5, 7, 4, 5,
	0, 1, 3, 8, 0, 6, 0, 4, 6, 1,
	1, 1, 1, 1, 2, 3, 1, 3, 6, 0,
	3, 0, 1, 2, 4, 4, 0, 1, 3, 1,
	3, 3, 0, 1, 1, 0, 2, 2, 0, 2,
	3, 3, 3, 1, 3, 3, 3, 3, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	7, 7, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 2, 0, 4, 7, 6, 6, 3, 5, 0,
	2, 0, 2, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 3, 1, 1, 1, 1, 4, 4,
	4, 3, 4, 3, 2, 2, 2, 2, 2, 3,
	2, 3, 2, 4, 1, 3, 4, 0, 2, 1,
	1, 2, 2, 2, 0, 1, 2, 4, 1, 3,
	1, 3, 2, 3, 1, 4, 3, 0, 1, 1,
	2, 5, 2, 2, 2, 0, 2, 3, 3, 0,
	1, 3, 1, 3, 0, 1, 2, 1, 1, 0,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 1,
	7, 1, 3, 0, 1, 1, 3, 1, 3, 0,
	1, 1, 1, 14, 1, 3, 0, 1, 1, 3,
	1, 1, 2, 4, 1, 1, 1, 1, 0, 1,
	2, 9, 9, 7, 1, 2, 3, 3, 3, 0,
	4, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 4, 1, 1, 1, 3, 3, 4, 3,
	3, 0, 1, 1, 1, 0, 2, 7, 8, 10,
	2, 2, 8, 0, 3, 3, 0, 3, 0, 3,
	0, 5, 1, 3, 0, 3, 3, 0, 2, 9,
	8, 0, 2, 2, 3, 3, 0, 2, 0, 2,
	4, 4, 4, 4, 1, 0, 2, 2, 1, 3,
	2, 1, 3, 2, 1, 3, 2, 0, 1, 3,
	4, 3, 1, 1, 4, 1, 3, 1, 1, 1,
	1, 0, 1, 1, 1, 11, 0, 2, 3, 3,
	2, 2, 3, 1, 1, 1, 3, 3, 4, 0,
	2, 2, 2, 2, 2, 2, 6, 0, 4, 1,
	1, 0, 3, 0, 1, 1, 2, 4, 4, 4,
	0, 1, 8, 2, 4, 4, 4, 9, 0, 2,
	11, 9, 11, 8, 6, 9, 7, 10, 7, 6,
	2, 2, 9, 4, 5, 3, 0, 4, 1, 3,
	0, 3, 6, 0, 2, 10, 0, 2, 0, 2,
	0, 3, 2, 4, 3, 0, 2, 1, 0, 2,
	3, 0, 2, 3, 0, 2, 1, 0, 3, 2,
	4, 3, 0, 1, 0, 1, 1, 0, 6, 0,
	3, 5, 0, 4, 0, 3, 1, 3, 4, 5,
	0, 3, 1, 3, 2, 3, 1, 2, 0, 4,
	6, 5, 0, 2, 0, 2, 4, 5, 4, 5,
	1, 5, 6, 5, 0, 3, 0, 1, 1, 3,
	3, 3, 0, 4, 1, 3, 3, 3, 0, 1,
	1, 3, 2, 3, 3, 3, 4, 4, 3, 3,
	3, 3, 4, 4, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 5, 4, 5, 1,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 0, 5,
	5, 5, 5, 0, 1, 1, 3, 1, 1, 1,
	1, 1, 7, 9, 7, 9, 2, 1, 7, 9,
	7, 9, 8, 5, 0, 1, 0, 1, 1, 1,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 3, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	2, 1, 2, 2, 1, 1, 2, 2, 2, 3,
	3, 2, 2, 1, 5, 6, 4, 1, 1, 1,
	5, 4, 1, 1, 2, 0, 1, 1, 2, 5,
	0, 1, 1, 2, 2, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 2, 2, 2, 0, 4, 7,
	3, 3, 0, 3, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 3,
	5, 2, 2, 2, 2, 4, 1, 1, 2, 5,
	6, 8, 6, 6, 6, 1, 1, 1, 1, 1,
	1, 3, 9, 1, 4, 4, 4, 7, 9, 7,
	7, 7, 9, 7, 7, 0, 2, 0, 1, 1,
	2, 4, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 2, 2, 2, 0, 1, 1, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 5,
	0, 1, 3, 0, 1, 0, 2, 0, 2, 0,
	1, 6, 8, 8, 6, 6, 5, 5, 5, 6,
	6, 6, 6, 5, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 1, 1, 1, 4, 4,
	6, 8, 6, 4, 5, 4, 4, 4, 3, 4,
	6, 6, 7, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 8, 4, 2, 3, 2, 4, 2, 2, 4,
	6, 2, 2, 4, 6, 4, 2, 4, 4, 4,
	0, 1, 2, 3, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	3, 0, 1, 1, 3, 1, 3, 3, 3, 3,
	3, 2, 1, 1, 1, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 1, 3, 4, 4, 5,
	4, 5, 3, 4, 5, 6, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 2,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 4, 4, 1, 2,
	3, 5, 1, 1, 3, 0, 1, 0, 3, 0,
	3, 3, 0, 3, 5, 0, 3, 5, 0, 1,
	1, 0, 1, 1, 2, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -611, -614, -2, -5, 630, -1, -4, -122, -91,
	-7, -14, -124, -125, -8, -120, -9, -10, -12, -98,
	-115, -117, -119, -118, -47, -11, -114, -85, -86, -100,
	-108, -111, -112, -113, -126, -121, -123, -183, -127, -128,
	-129, -171, -132, -134, -135, 620, -92, -93, -94, -95,
	-96, -97, -33, -32, -31, -30, -157, -162, -165, -167,
	-130, 553, 626, 456, 14, 505, -15, -16, -556, -17,
	265, -360, -361, -362, -364, -615, -48, -49, -50, -60,
	-61, -62, -63, -64, -74, -75, -76, -51, -52, -53,
	-56, -54, -67, -66, -68, -69, -70, -71, -72, -73,
	-55, -59, -160, -161, -77, -57, -78, -58, -169, -131,
	-79, -80, -81, -83, -82, -88, -84, -89, -159, -164,
	-13, -170, -90, 239, -87, 76, -101, -102, -103, -104,
	-105, -106, -107, -109, -110, 380, 386, 443, 619, 61,
	-184, -186, 647, 648, 651, 540, 543, 162, 163, 165,
	166, 170, 173, -34, -35, -36, -37, -38, -39, -41,
	-40, -42, -43, -44, -45, -46, 235, 16, 548, -18,
	-21, -19, -22, -20, -28, -29, -27, -24, -26, -158,
	-25, -163, -23, -166, -168, -133, 260, 259, 38, 326,
	327, 328, 384, 258, 236, 238, 15, 31, 42, 359,
	-185, 85, 541, 237, -187, 13, 653, -6, -3, -2,
	-144, -148, -152, -155, -156, -153, -154, -4, -122, 120,
	250, 621, -356, 376, 622, 624, 623, 88, 96, -349,
	-351, 456, 265, 380, 386, 619, 648, 651, 540, 543,
	555, 556, 557, 558, 559, 560, 561, 562, 564, 565,
	566, 567, 568, 569, 570, 580, 581, 571, 572, 573,
	574, 575, 576, 577, 578, 582, 583, 584, 585, 586,
	587, 588, 589, 590, 591, 592, 593, 594, 595, 508,
	605, 606, 607, 608, 536, 563, 599, 600, 601, 602,
	357, 358, 545, 277, 301, 411, 307, 314, 162, 182,
	176, 205, 196, 541, 171, 281, 319, 282, 95, 165,
	491, 110, 468, 440, 168, 296, 298, 300, 537, 538,
	370, 303, 535, 302, 304, 306, 539, 283, 360, 192,
	187, 295, 279, 185, 284, 40, 285, 210, 286, 287,
	550, 464, 356, 470, 311, 52, 438, 186, 465, 299,
	467, 214, 218, 482, 483, 180, 181, 472, 485, 209,
	212, 213, 257, 353, 354, 43, 547, 269, 486, 216,
	643, 208, 203, 494, 315, 313, 207, 179, 202, 280,
	65, 220, 219, 221, 434, 435, 436, 437, 288, 289,
	374, 481, 199, 188, 361, 172, 23, 489, 264, 469,
	387, 290, 308, 316, 215, 217, 271, 276, 331, 549,
	442, 275, 312, 487, 184, 268, 297, 263, 490, 644,
	173, 389, 291, 166, 305, 484, 646, 493, 64, 402,
	178, 169, 637, 254, 163, 273, 278, 645, 292, 293,
	294, 534, 318, 317, 309, 170, 542, 200, 270, 206,
	190, 177, 201, 164, 272, 492, 403, 617, 359, 421,
	198, 195, 274, 247, 488, 471, 167, 425, 404, 193,
	320, 612, 613, 614, 375, 352, 321, 322, 191, 261,
	462, 463, 325, 431, 343, 405, 441, 412, 406, 227,
	228, 329, 474, 476, 211, 615, 332, 333, 334, 466,
	335, 336, 337, 338, 379, 56, 58, 97, 100, 99,
	649, 650, 63, 29, 365, 368, 400, 407, 345, 618,
	546, 342, 346, 347, 369, 25, 423, 391, 427, 426,
	48, 49, 50, 53, 54, 55, 57, 59, 60, 51,
	533, 384, 397, 495, 45, 47, 394, 27, 371, 422,
	444, 341, 424, 455, 46, 453, 454, 475, 26, 373,
	372, 62, 44, 430, 432, 433, 323, 339, 382, 627,
	496, 377, 393, 396, 378, 344, 367, 398, 67, 66,
	390, 628, 385, 383, 340, 551, 552, 348, 579, 362,
	439, 530, 529, 528, 527, 526, 525, 524, 523, 326,
	327, 328, 408, 409, 410, 420, 413, 414, 415, 416,
	417, 418, 419, 458, 459, 629, 477, 479, 480, 478,
	242, 652, 363, 364, 245, 631, 632, 98, 633, 635,
	634, 28, 636, 642, 639, 640, 641, 554, -437, -435,
	-356, 541, 619, 386, 540, 543, 380, 359, 648, 651,
	384, 265, 326, 327, 328, 456, 357, -229, -356, 652,
	-193, 249, 39, -243, -356, -193, -87, -16, -15, -185,
	-186, -243, 244, -365, 24, 438, -99, 439, 239, 240,
	85, 77, -356, -9, -113, -8, -120, -85, -183, 443,
	-363, -356, 326, 326, -363, 244, -358, 275, 419, -356,
	-492, 250, -441, -414, 276, -440, -416, -443, -417, 32,
	235, 237, 236, 553, 272, 16, 384, 246, 14, 13,
	385, 258, 25, 26, 28, 15, 386, 388, 29, 389,
	392, 393, 394, 42, 397, 398, 265, 88, 96, 91,
	283, -228, -356, -391, -383, 117, -386, -378, -379, -381,
	-334, -530, -376, 85, 144, 145, 152, 118, 654, -380,
	-473, 36, 120, 559, 563, 599, 506, -326, -327, -328,
	-329, -330, -331, 544, -356, -531, -529, 91, 101, 103,
	107, 108, 106, 104, 156, 189, 105, 92, 157, -186,
	88, -551, 569, -350, 592, 605, 606, 607, 608, 591,
	61, -500, -509, 243, -507, 155, 194, 261, 190, 14,
	150, 431, 191, 600, 601, 602, 566, 588, 508, 570,
	580, 595, 561, 562, 564, 556, 557, 558, 560, 571,
	573, 587, -510, 583, 593, 594, 579, 603, 604, 639,
	596, 597, 598, 635, 90, 89, 586, 585, 572, 567,
	568, 574, 555, 565, 575, 576, 584, 589, 590, 368,
	110, 369, 370, 498, 360, 80, 371, 250, 438, 70,
	372, 373, 374, 375, 376, 505, 377, 71, 378, 367,
	265, 421, 379, 193, 211, 510, 509, 511, 502, 499,
	497, 500, 501, 503, 504, 577, 578, 582, -136, -138,
	610, -605, -317, -606, 6, 7, 8, 9, -607, 157,
	-596, 440, 549, 91, 319, 357, 17, 498, 638, 539,
	638, 539, 167, 164, -428, 167, 116, 173, 172, 248,
	167, -428, -356, 170, 638, 169, 637, 329, 271, -405,
	-174, 357, 421, 335, 97, 275, -408, -406, 537, -494,
	323, 319, 295, 245, 113, -175, 255, 254, 111, 498,
	243, 395, 314, 56, 58, -567, -568, 232, 233, 234,
	-558, 531, -557, -356, 638, 643, 370, 99, 100, 637,
	27, 244, 381, 271, 476, 474, 475, 477, 478, 479,
	480, -65, -511, -491, 471, 470, -369, 463, 469, 461,
	473, 464, 358, 337, 553, 336, 235, 631, 538, 532,
	-344, 405, 441, 495, 496, 382, 442, 482, 484, 465,
	110, 197, 194, 245, 247, 244, 637, 357, 498, 421,
	97, 335, 244, -567, 643, 164, 482, 484, 440, 275,
	419, 41, -434, 431, -433, -435, 483, 494, 89, 90,
	481, -344, 110, 462, 462, -605, -317, -184, -186, -123,
	-556, 539, 638, 245, 357, 421, 275, 246, 244, 534,
	537, 247, 498, 243, 326, 381, 271, 335, 97, 169,
	637, -493, -564, 32, -501, 229, 230, 231, 33, 34,
	-1, 124, 653, -383, -383, -6, 656, -6, -383, -356,
	-356, 159, -250, -254, -251, -253, -252, -256, -255, 194,
	195, 155, 198, 204, 200, 201, 202, 203, 205, 206,
	207, 208, 209, 212, 213, 210, 31, 211, 261, 190,
	191, 192, 193, 214, 176, 196, 546, 222, 177, 223,
	178, 224, 179, 225, 180, 181, 226, 182, 185, 186,
	187, 188, 184, 158, -218, 91, 32, 85, 158, 91,
	-210, 267, -193, -243, -235, 158, 654, -210, -605, -203,
	-204, 11, -243, -332, -356, 440, 127, -99, 77, -99,
	439, 77, -99, 439, 239, -559, -560, -561, -563, 239,
	439, 438, 240, -118, 158, 283, 17, -363, -363, 83,
	-243, -416, 275, -441, -414, 36, 82, 159, 248, 159,
	82, 85, 382, 357, 421, 383, 498, 244, 395, 247,
	275, 396, 357, 421, 244, 247, 498, 275, 357, 244,
	247, 421, 275, 396, 357, 461, 462, 247, 27, 387,
	390, 391, 462, -515, 494, 159, 116, 113, 114, 115,
	-383, 134, -398, 127, 128, 129, 130, 131, 132, 133,
	141, 140, 151, 144, 145, 146, 147, 148, 149, 150,
	142, 143, 137, 117, 135, 139, 136, 119, 154, -186,
	-383, -391, 61, -381, -381, -381, -381, -356, -473, -388,
	-383, 85, 85, 85, 85, 85, 158, 104, 91, -383,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, -508, 85, 85, -395, -396, 85, 85, -376,
	-332, 85, 91, 91, 85, 85, 85, 91, 85, 85,
	85, -396, -396, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, -204,
	159, -203, 85, -203, -204, -187, -186, 32, 33, 32,
	33, 32, 33, 32, 33, -608, 628, 85, 101, 649,
	227, 17, -356, 637, -356, -590, 32, 542, 542, 542,
	542, 487, 548, 171, 172, 173, -356, 170, 248, -356,
	-403, 250, -403, -403, -227, -356, -229, 381, 247, 534,
	247, -175, -403, -403, -403, -403, -403, 246, -403, 24,
	244, 244, 244, 244, -403, 505, 127, 127, 59, -569,
	175, 159, -558, -209, 85, -590, 644, 645, 646, -368,
	135, 139, -368, -313, 18, -313, 24, 273, 273, 273,
	-368, 313, -616, -617, 17, 137, -366, -617, -366, -366,
	-368, -618, 246, 472, 43, 274, 273, -205, -206, 22,
	-205, 466, 462, -458, 467, 468, -370, -617, -369, -368,
	-368, -369, -368, -368, -368, 32, 244, 247, 498, 335,
	632, -616, -616, 31, 31, -492, -492, -243, -492, -492,
	532, -345, -356, -492, -492, -492, -297, -298, -243, -570,
	249, 646, -602, -601, 485, -604, 487, 164, -435, 164,
	-435, 88, -416, 275, 275, 159, 127, 24, -436, 127,
	138, -435, -435, -436, -436, -267, 41, -355, 155, -356,
	91, -267, 41, -599, -598, -243, -204, -187, -186, 86,
	86, 86, 542, -590, -492, -492, -492, -492, -492, -494,
	-492, -492, -492, -492, -492, -363, -219, -356, -229, 250,
	-492, -492, -492, -492, -188, -189, 146, -383, -356, -188,
	-3, -146, -145, 121, 122, 124, 622, 376, 621, 625,
	619, -435, 41, -486, 403, 402, -480, -482, 85, -481,
	85, -481, -481, -481, -481, -481, 85, 85, -483, 85,
	-483, -483, -480, -484, 85, -484, -485, 85, -485, -484,
	-356, -462, 548, -389, -391, -356, 39, -504, 61, -183,
	85, 31, 85, -210, -356, 191, 169, 636, -505, 61,
	-183, 85, 31, -204, -139, 39, -206, 21, 158, 101,
	91, -118, -99, 77, -118, -99, -99, 86, 159, -562,
	107, 108, -565, 209, 200, -356, -116, 91, -7, -8,
	-9, -10, -47, -85, -82, -183, 236, 540, 543, -532,
	-530, 85, 32, 430, 82, 17, -442, 244, 498, 381,
	271, 247, 357, -440, -423, -420, -418, -355, -416, -419,
	-418, -445, -332, 462, -140, 445, 444, 325, -383, -383,
	-383, -383, -383, 106, 117, 352, 107, 108, -378, -399,
	32, 321, 322, -379, -379, -379, -379, -379, -379, -379,
	-379, -379, -379, -379, -379, -387, -397, -473, 85, 137,
	135, 139, 136, 119, -381, -381, -379, -379, -269, -355,
	155, 86, 159, -383, -555, -554, 121, -383, -383, -383,
	-383, -409, -411, -332, 85, -356, -552, -553, 512, 513,
	514, 515, 516, 517, 518, 519, 520, 521, 522, 372,
	367, 373, 371, 360, 379, 374, 375, 193, 529, 530,
	523, 524, 525, 526, 527, 528, -389, -389, -383, -552,
	-389, -325, 33, 32, -391, -391, -391, 86, -383, -566,
	350, 349, 351, -207, -356, -389, 86, 86, 86, 101,
	-391, -391, -389, -379, -389, -389, -389, -389, -553, -325,
	-325, -325, -325, 146, -391, -391, -325, -325, -325, -325,
	146, -325, -325, -325, -325, -325, -325, -325, -325, -325,
	-325, -325, 86, 86, 86, 146, -391, -205, -138, -513,
	-512, -383, 41, -139, -206, -609, 629, 85, -332, -597,
	91, 91, 654, 169, 637, 17, 498, -356, 17, 244,
	-356, 101, -356, 101, 488, 489, 168, 172, 171, -356,
	170, -356, -356, 117, -356, -356, 35, 85, -219, -403,
	-403, -403, -574, -356, 92, -424, -421, -418, -356, -356,
	-414, -356, -345, -243, -403, -403, -403, -403, -243, -278,
	53, 54, 55, -418, -176, 56, 57, -570, -557, 35,
	-208, -356, -313, -381, -381, -383, -418, 275, -616, -368,
	-368, -346, -345, -370, -365, -370, -370, -313, -366, -368,
	-368, -383, -370, -366, -313, -356, 462, -313, -313, -458,
	-368, -367, -356, -367, -403, -345, -346, -346, -243, -243,
	-292, -299, -293, -300, 267, 241, 365, 366, 238, 236,
	11, 237, -307, 314, -404, 506, -273, -274, 77, 42,
	-276, 265, 407, 400, 277, 281, 95, 282, 440, 283,
	246, 285, 286, 287, 302, 304, 257, 288, 289, 290,
	431, 291, 163, 303, 292, 293, 294, 383, -268, 6,
	338, 548, 41, 51, 52, 454, 453, 551, 278, -356,
	-574, -572, 31, -356, 31, -424, -418, -356, -356, 159,
	248, -196, -198, -195, -191, -192, -197, -316, -318, -194,
	85, -243, -186, -356, -435, 159, 486, 488, 489, -602,
	-436, -602, -436, 248, 32, 430, -439, 430, 32, -414,
	-433, 482, 484, -429, 91, 431, -419, -438, 82, 155,
	-512, -436, -436, -438, -438, 154, 159, -600, 487, 488,
	232, -205, 101, -245, -243, -574, -423, -414, -356, -492,
	-245, -245, -245, -358, -358, 85, 158, 36, -356, -356,
	-356, -356, -312, 159, -311, 17, -357, -356, 35, 91,
	158, -312, -147, -145, 123, -383, -6, 621, -383, -6,
	-6, -383, -6, -383, -490, 404, 101, 101, -335, 91,
	-335, 101, 101, 101, 554, 86, 91, -427, 82, -506,
	-392, -550, 610, -212, 86, -207, -548, -549, -207, -211,
	-356, -504, -235, 127, 127, 127, -506, -212, 86, -548,
	-205, 611, -139, -202, -201, -383, -356, 24, -118, -99,
	-560, 158, 357, 159, -208, -442, -422, -419, -444, 146,
	-356, -430, 159, 548, 657, 89, 248, -587, -586, 422,
	86, 159, -516, 249, 505, 91, 654, 438, 227, 228,
	106, 352, 107, 108, -473, -391, -387, -381, -381, -379,
	-379, -385, 262, -385, 116, -383, 655, -382, -554, 123,
	-383, 35, 159, 35, 159, 83, 159, 86, -480, -383,
	158, 86, 86, 17, 17, 86, -383, 86, 86, 86,
	86, 17, 17, -383, 86, 158, 86, 86, 86, 86,
	83, 86, 159, 86, 86, 86, 86, 159, -391, -391,
	-383, -391, 86, 86, 86, -383, -383, -383, -391, 86,
	-383, -383, -383, -383, -383, -383, -383, -383, -383, -383,
	-208, -452, 457, -452, -452, 159, 159, 159, 86, -139,
	85, 101, 159, 650, -339, -338, 91, -356, -356, 169,
	637, -356, 91, 637, -356, 91, 169, 173, 173, 172,
	-356, 91, 36, 24, 312, 24, -228, -230, -231, -232,
	-233, -234, 137, 160, 161, 85, -243, -243, -243, -576,
	408, -588, 159, 41, -586, 498, -172, 325, -407, 83,
	-179, 17, 548, -243, -243, -243, -243, -257, 35, 17,
	-190, -244, -356, 85, 86, 159, -415, 83, -356, -346,
	-313, -313, -370, -313, -313, 159, 23, -368, -370, -370,
	-235, -366, -235, 158, -235, -345, -479, 35, -209, 159,
	21, 267, -242, -353, -239, -241, 252, -373, -240, 255,
	-544, 253, 251, 111, 256, 310, 112, 246, -353, -353,
	252, -277, 248, 35, -353, -295, 246, 355, 310, 253,
	21, 267, -294, 246, 112, -356, 252, 256, 253, 251,
	-352, 127, -344, 154, 248, 43, 383, -352, 552, 267,
	-352, -352, -352, -352, -352, -352, -352, 284, 284, -352,
	-352, -352, -352, -352, -352, -352, -352, -352, -352, -352,
	164, -352, -352, -352, -352, -352, -352, 85, 330, 279,
	280, 312, -577, 408, 31, 363, 363, 364, -588, 359,
	31, -180, 357, -298, -296, -367, 31, -319, -320, -321,
	-322, -324, -323, 68, 72, 74, 78, 69, 70, 71,
	75, 80, 73, 31, 159, -354, -359, 35, -356, 91,
	-354, -186, -198, -196, -354, 85, -436, -601, -603, 490,
	487, 493, -438, -438, 101, 248, 85, 127, -438, -438,
	41, -355, -598, 494, 488, -139, 159, 82, -245, -220,
	-221, -222, -223, -250, -332, 195, 198, 200, 201, 202,
	203, 205, 206, 207, 208, 209, 212, 213, 210, 211,
	261, 190, 191, 192, 193, 214, 176, 196, 546, 177,
	178, 179, 180, 181, 182, 185, 186, 187, 188, 184,
	-356, -229, -313, -189, -198, -356, 91, -356, 146, -313,
	124, -6, 122, -151, -150, -149, 125, 619, 625, 124,
	124, 124, 86, 86, 86, 159, 86, 86, 86, 159,
	86, 159, 101, -519, 467, 40, 159, 85, 86, 159,
	61, 159, 127, 86, 159, -383, -356, 91, -383, 86,
	61, -139, 91, 159, -199, 37, 38, 158, 440, -356,
	-530, 86, -444, 159, 248, 158, 158, -420, 386, -355,
	-422, 21, 548, -332, 39, -339, 127, 654, -356, 86,
	-385, -385, 116, -381, -378, 86, 124, -383, 122, -248,
	-250, 402, 403, -383, -248, -249, -255, 155, 194, 261,
	193, 192, 190, 402, 403, -267, -411, 545, -199, 86,
	-356, -383, -383, 86, -383, -383, 17, -356, -267, -379,
	-383, -204, -204, 86, 86, -451, -452, -451, -451, 86,
	86, 86, 86, -451, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 85, 101, 103, 101, 103,
	-512, -610, 63, 627, 62, 430, 106, 315, 159, 101,
	91, 655, 159, 127, 91, -356, -356, 17, 244, -356,
	17, 173, 91, -589, 319, 357, -463, 101, 319, 357,
	498, 394, 86, 159, -332, -220, -209, 85, -209, -579,
	469, 410, 420, -352, -375, -374, 359, 42, -498, 431,
	416, 417, -421, 275, -345, -585, 98, 127, 82, 342,
	346, 347, 343, 344, 345, -401, -402, -400, -404, -572,
	85, 85, -183, 35, 135, -179, 85, 85, 35, -474,
	332, -250, -243, -190, -356, 17, 159, -571, 158, -1,
	-356, -414, -368, -313, -383, -383, -313, -368, -368, -370,
	-356, -235, -474, -250, 35, -293, 241, 237, -448, 312,
	313, -449, -464, 315, -466, 85, -247, -332, -240, -543,
	-544, -403, -356, 112, -543, 112, 85, -247, -332, -332,
	-296, -332, -356, -356, -356, -356, -303, -302, -332, -305,
	32, -306, -356, -356, -356, -356, 112, -356, 112, -272,
	41, 48, 49, 50, -352, -352, 197, -275, 41, 430,
	432, 433, -305, 101, 101, 101, 101, 91, 91, 91,
	-352, -352, 101, 91, -359, 91, -545, 172, 45, 46,
	101, 101, 101, 101, 41, 91, -280, 41, 295, 299,
	296, 297, 298, 91, 101, 41, 101, 41, 101, 41,
	-356, 85, -546, -547, 91, 331, -463, -579, -352, 363,
	-435, 127, 127, -375, -581, 95, 411, -584, 325, -182,
	498, 32, -213, 241, 237, -572, -426, -425, -332, -195,
	-195, -195, -195, -195, -195, 68, 79, 68, 68, 68,
	73, 68, 73, 68, -321, 68, 79, -426, -197, -209,
	-359, 86, -595, -594, -593, -591, 76, 249, 77, -389,
	-438, 487, 491, 492, -422, -371, 91, -429, -217, 24,
	-243, -243, -496, 305, 306, 86, 159, -250, -315, 19,
	158, -315, 120, -6, -147, -149, -383, -6, -383, 621,
	376, 622, 91, 101, 101, -527, 451, 446, 448, 112,
	-392, -514, -513, 61, -183, -207, -506, -549, -512, -356,
	655, 655, 655, 655, 61, -183, -506, -217, -519, -201,
	-200, 44, -356, 101, 17, -419, -414, 146, 146, -356,
	387, -430, 91, 409, 91, 244, 655, 91, -339, -378,
	-383, 86, -258, 181, 180, -258, 35, 86, 86, -481,
	-481, -480, -483, -480, -258, -258, 86, 85, -199, 86,
	24, 86, 86, 86, -383, 86, 86, 159, -502, 507,
	-503, 581, -451, -451, -451, -451, -451, -451, -451, -451,
	-451, -451, -451, -451, -451, -451, -451, -451, -451, -394,
	-393, 267, 452, 634, 634, 452, 634, 634, 86, 159,
	-552, 159, -347, 320, -347, -338, 91, 248, 91, 169,
	-356, 91, 637, 91, -356, 91, 312, -356, -356, 91,
	91, -232, -250, 86, 35, -236, -237, -238, -247, -239,
	-241, 35, -580, 95, -575, 91, -356, 92, -581, 157,
	361, 41, 412, 413, 428, 356, 101, 101, 418, -573,
	-356, -181, 244, 357, -583, 52, 127, 91, -243, -400,
	-344, 154, 286, 335, -310, -309, -356, 91, -236, -183,
	-243, -236, -236, -183, -475, 334, 21, 101, 145, -210,
	83, 158, -198, -244, -356, 146, 86, -313, -235, -313,
	-313, -368, -475, -183, -460, 316, 85, -458, 85, -458,
	112, 343, -467, -465, 267, -301, 45, 47, -250, -541,
	-356, -539, -541, -356, -539, -539, -403, -383, -301, -247,
	248, 31, 237, -304, 340, 341, 346, -431, 311, 117,
	-431, 159, -199, 159, -356, -267, -267, 31, 91, 91,
	-245, 86, 159, 127, 101, 91, -580, -575, 127, -436,
	91, 91, -581, 91, 91, -585, 127, -246, 244, -345,
	159, -213, -213, -313, 159, 127, -215, -214, 82, 83,
	-216, 82, -214, -214, 68, 68, -313, -593, -592, 24,
	-544, -544, -544, 86, 86, 15, -222, 41, -314, 20,
	21, 146, -314, 124, 122, 124, 124, -356, 86, 86,
	-487, 612, -523, -525, 446, 21, 21, 15, 249, 86,
	-506, -506, -527, 45, 46, -414, -430, 431, -243, 159,
	655, -248, -286, 91, -383, 86, -383, 86, 91, 86,
	91, -204, 21, 86, 159, 86, 86, 86, 159, 86,
	86, -383, 86, -552, -348, 191, 91, -348, 357, -357,
	-356, 17, -356, 91, -463, 312, 312, 244, 242, -183,
	86, 159, -183, 91, -578, 422, 101, 41, 101, 157,
	414, -499, -173, 95, -245, 32, -213, -582, 95, 127,
	654, 85, -352, -352, -352, -356, 86, 159, -352, -352,
	86, 86, 86, -265, 548, -476, 266, 101, 145, 101,
	145, 101, -354, -198, -356, -313, -571, 158, -313, -476,
	-450, 317, 101, -379, 85, -379, 85, -459, 314, 85,
	86, 159, -356, -332, -262, -261, -259, 106, 117, 41,
	400, -260, 95, 154, 300, 303, 302, 278, 301, -291,
	-372, 82, 406, 340, 341, -404, 612, 536, 251, 111,
	112, 388, -373, 85, 85, 83, 320, 85, 85, -541,
	86, -301, -332, 41, -304, 41, 353, 311, -302, -356,
	154, -267, 86, -547, 91, -552, -578, 91, -438, -583,
	91, -173, -245, -572, -204, -425, -512, -383, 85, -383,
	85, 68, 11, 19, -376, -383, -391, 639, 641, 642,
	250, -6, 622, 376, -282, 613, 91, 21, 91, -521,
	91, -426, -487, -142, -279, -344, 283, 86, -285, 137,
	548, 86, 86, -451, -451, -454, -453, -457, 452, 312,
	460, -391, 91, 91, 86, 86, 91, -356, 169, 91,
	654, 91, -463, -463, -356, -224, -250, -177, 548, -265,
	-238, -177, 21, 548, 360, 41, 101, 41, 415, 91,
	-181, 127, 107, 108, -340, -341, 91, -409, -267, -269,
	91, -309, -376, -376, -263, -183, 35, -264, -307, -404,
	548, -141, -140, -263, 548, 85, -477, 163, 101, 145,
	101, 101, -313, -313, -477, -466, 21, 86, -445, 86,
	-445, 85, 127, -379, -465, -468, 61, -259, 106, -379,
	91, -269, -270, 41, 299, 295, 127, 127, -271, 41,
	279, 280, -281, 85, 310, 15, 197, 85, 112, 112,
	-243, -409, -409, -542, 342, 343, 344, 348, 346, 347,
	345, -542, -409, -409, 85, -432, -431, -379, -352, -352,
	154, -582, -205, -208, -540, -356, 251, 21, 21, -497,
	548, 640, 85, 85, -356, -356, -336, 614, 101, 91,
	448, -282, -488, 615, -517, -458, -267, 127, 86, 75,
	546, 549, 86, -456, 119, 414, 418, -377, -380, 101,
	103, 189, 157, 86, 86, -356, -343, -342, 91, 91,
	91, 312, 547, -178, 60, 494, 91, 92, 409, 91,
	92, 360, -173, 91, 655, 159, 127, 86, -446, 267,
	-183, 159, -307, -344, -142, -446, -266, -308, -356, 91,
	-495, 172, 333, 548, 101, 145, 101, -204, -478, 172,
	333, -449, 86, 86, 86, -445, 101, 86, -472, -469,
	85, -307, 269, 137, 91, 91, 101, 85, -507, 31,
	91, -410, 85, 86, 86, 86, 86, -409, 101, -267,
	-352, 86, 86, 159, 642, 85, -391, -391, 85, 21,
	-336, -489, 616, 91, -526, 451, -520, -518, 446, 447,
	448, 449, 91, 547, 65, 550, -455, -456, 418, -377,
	-380, 610, 458, 458, 458, 655, 159, 127, -463, -226,
	-356, 310, 431, -341, 91, -412, -447, 319, 21, -307,
	-352, -447, 86, 159, -352, -352, 333, 101, 145, 101,
	-205, 333, -461, 318, 86, -472, -307, -471, -470, 317,
	270, 85, 86, -383, -395, -352, 86, -284, -283, 544,
	-409, -412, 83, -412, 83, -412, 83, -412, 83, 86,
	-267, -356, 251, -137, 85, 86, 86, -337, -356, -521,
	91, -528, 249, -524, -525, 450, -518, 21, 448, 21,
	21, -143, 159, 65, 116, 459, 459, 459, -342, 91,
	91, -225, 35, 453, 387, -413, 257, 353, 354, 95,
	548, 340, 341, 21, -448, -267, -308, -376, -376, 101,
	101, 86, 159, -356, 266, 85, -390, -384, -383, 266,
	86, -356, -290, -288, -289, 82, 465, 308, 309, 86,
	-542, -542, -542, -542, -291, 86, 159, -389, 86, 159,
	-535, 85, 101, -523, -522, -524, 21, -521, 21, -521,
	-521, 455, 548, -455, 91, -352, -352, 91, 91, 339,
	-332, 85, -460, -470, -469, -390, 86, 159, -431, -289,
	82, -288, 82, 16, 15, -412, -412, -412, -412, 85,
	86, -356, -538, 31, 86, -534, -533, -333, -529, -356,
	451, 452, 91, -521, 127, 549, -613, -612, 633, 101,
	101, -356, -445, -450, 86, -384, -287, 305, 306, 31,
	172, -287, -389, -537, -536, -334, 86, 159, 158, 91,
	550, 91, 86, -466, 106, 41, 307, 86, 159, 127,
	-533, -356, -536, 41, -383, 158, -356,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 311, 312, 313, 314,
	315, 316, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 0, 0, 0, 0, 0, 709, 710, 0, 673,
	0, 0, 0, 0, 0, 0, 550, 551, 552, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 425, 426, 427, 428, 429, 430, 431,
	432, 433, 434, 0, 345, 341, 253, 254, 255, 256,
	257, 258, 259, 352, 353, 527, 0, 0, 0, 0,
	792, -2, 97, 0, 0, 0, 0, 334, 0, 325,
	325, 0, 0, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, -2, 722, 0, 674,
	675, 676, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 690, 409, 410, 411, 405,
	406, 408, 407, -2, 0, 0, 722, 0, 0, 0,
	800, 0, 0, 0, 843, 865, 23, 0, 7, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	0, 19, 0, 19, 0, 0, 0, 1389, 1390, 1391,
	1392, 2189, 2159, -2, 1924, 1901, 2083, 2084, 1980, 1992,
	2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234,
	2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244,
	2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254,
	2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264,
	2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274,
	1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
	1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877,
	1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887,
	1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897,
	1898, 1899, 1900, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
	1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918,
	1919, 1920, 1921, 1922, 1923, 1925, 1926, 1927, 1928, 1929,
	1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939,
	1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949,
	1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959,
	1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
	1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
	1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,
	1991, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
	2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
	2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022,
	2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032,
	2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042,
	2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052,
	2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062,
	2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072,
	2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082,
	2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094,
	2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104,
	2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114,
	2115, -2, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124,
	2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134,
	2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144,
	2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154,
	2155, 2156, 2157, 2158, 2160, 2161, 2162, 2163, 2164, 2165,
	2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, -2,
	-2, -2, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185,
	2186, 2187, 2188, 2190, 2191, 2192, 2193, 2194, 2195, 2196,
	2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206,
	2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 0, 309,
	307, 1871, 1901, 1924, 1980, 1992, 1993, 2031, 2083, 2084,
	2116, 2159, 2175, 2176, 2177, 2189, 0, 0, 991, 0,
	770, 0, 0, 775, 1338, 770, 346, 711, 712, 800,
	826, 671, 0, 383, 0, 1915, 387, 2166, 0, 0,
	0, 0, 668, 377, 378, 379, 380, 381, 382, 0,
	0, 964, 0, 0, 373, 0, 340, 1982, 2188, 1393,
	0, 0, 0, 0, 0, 196, 1115, 198, 1117, 202,
	210, 0, 0, 0, 215, 216, 219, 220, 221, 222,
	223, 0, 227, 0, 229, 232, 0, 234, 235, 0,
	238, 239, 240, 0, 250, 251, 252, 1118, 1119, 1120,
	-2, 125, 989, 1829, 1715, 0, 1722, 1735, 1746, 1475,
	1476, 1477, 1478, 0, 0, 0, 0, 0, 0, 1486,
	1487, 0, 1517, 2229, 2270, 2271, 0, 1495, 1496, 1497,
	1498, 1499, 1500, 0, 136, 148, 149, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 0, 1776, 1777, 1778, 1686, 1462,
	1389, 0, 2238, 0, 2260, 2265, 2266, 2267, 2268, 2259,
	0, 0, 1670, 0, 1660, 0, 0, -2, -2, 0,
	0, 2056, -2, 2272, 2273, 2274, 2235, 2256, 2264, 2239,
	2240, 2263, 2231, 2232, 2233, 2226, 2227, 2228, 2230, 2242,
	2244, 2255, 0, 2251, 2261, 2262, 2164, 0, 0, 2211,
	0, 0, 0, 2206, 150, 151, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1681, -2, 1683, -2, 1685, -2, 1688,
	-2, -2, -2, -2, 1693, 1694, -2, 1696, -2, -2,
	-2, -2, -2, -2, -2, 1672, 1673, 1674, 1675, 1664,
	1665, 1666, 1667, 1668, 1669, -2, -2, -2, 826, 914,
	0, 826, 0, 801, 848, 851, 854, 857, 804, 0,
	0, 98, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 336, 324, 326, 0, 330, 0, 0,
	326, 323, 317, 0, 1151, 1151, 1151, 0, 0, 0,
	0, 1151, 1151, 1151, 1151, 1151, 0, 1151, 0, 0,
	0, 0, 0, 1151, 0, 1024, 1122, 1123, 1124, 1149,
	1150, 1223, 0, 0, 0, 727, 723, 724, 725, 726,
	814, 0, 816, 819, 0, 0, 648, 648, 881, 881,
	594, 0, 0, 0, 648, 0, 608, 600, 0, 0,
	0, 648, 0, 0, 821, 821, 0, 651, 658, 648,
	648, -2, 648, 648, 645, 648, 0, 0, 1163, 614,
	615, 616, 600, 600, 619, 620, 621, 631, 632, 659,
	1853, 0, 0, 527, 527, 0, 527, 527, 0, 527,
	527, 527, 0, 729, 1940, 2026, 1922, 1998, 1881, 1982,
	2188, 0, 282, 2056, 287, 0, 1923, 1943, 0, 0,
	1961, 0, -2, 0, 362, 826, 0, 0, 800, 0,
	0, 0, 0, 527, 527, 527, 527, 527, 1222, 527,
	527, 527, 527, 527, 0, 0, 0, 527, 527, 527,
	527, 0, 0, 866, 867, 862, 863, 864, 868, 869,
	5, 6, 19, 0, 0, 0, 0, 0, 0, 104,
	103, 0, 1830, 1848, 1781, 1782, 1783, 1835, 1785, 1839,
	1839, 1839, 1839, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
	1821, 1822, 1823, 1839, 1839, 0, 0, 1828, 1805, 1837,
	1837, 1837, 1835, 1832, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1842, 1842,
	1845, 1845, 1842, 0, 423, 421, 422, 1711, 0, 0,
	0, 0, 770, 774, 1336, 0, 0, 0, 826, -2,
	0, 0, 672, 384, 1394, 0, 0, 388, 0, 389,
	0, 0, 391, 0, 0, 0, 412, 0, 415, 399,
	400, 401, 402, 395, 0, 176, 0, 375, 376, 0,
	0, 342, 0, 0, 0, 528, 0, 0, 0, 0,
	0, 0, 207, 203, 211, 214, 224, 231, 0, 243,
	245, 248, 204, 212, 217, 218, 225, 246, 205, 208,
	209, 213, 247, 249, 206, 226, 230, 244, 228, 233,
	236, 237, 242, 0, 177, 0, 0, 0, 0, 0,
	1721, 0, 0, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	1715, 0, 0, 1481, 1482, 1483, 1484, 0, 1488, 0,
	1518, 0, 0, 0, 0, 0, 0, 1775, 1779, 0,
	1711, 1711, 0, 1711, 1707, 0, 0, 0, 0, 0,
	0, 1711, 1643, 0, 0, 1645, 1661, 0, 0, 1647,
	1648, 0, 1651, 1652, 1711, 0, 1711, 1656, 1711, 1711,
	1711, 1639, 1640, 0, 1707, 1707, 1707, 1707, 0, 0,
	1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,
	1707, 1707, 1707, 1707, 1707, 0, 0, 0, 0, 821,
	0, 827, 0, -2, 0, 845, 847, 849, 850, 852,
	853, 855, 856, 858, 859, 806, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 71, 73, 0, 0, 0,
	0, 0, 0, 328, 0, 333, 319, 2018, 0, 318,
	0, 0, 0, 0, 0, 988, 0, 0, 1151, 1151,
	1151, 1025, 0, 0, 0, 0, 0, 0, 0, 0,
	1151, 1151, 1151, 1151, 0, 1169, 0, 0, 0, 729,
	728, 0, 815, 0, 0, 70, 587, 588, 589, 881,
	0, 0, 591, 592, 0, 593, 0, 600, 648, 648,
	606, 607, 602, 601, 654, 655, 651, 0, 651, 651,
	881, 0, 625, 626, 627, 648, 648, 633, 822, 0,
	634, 635, 651, 0, 656, 657, 881, 0, 0, 881,
	881, 0, 643, 644, 646, 648, 0, 0, 1151, 0,
	664, 602, 602, 1854, 1855, 0, 0, 1160, 0, 0,
	0, 0, 667, 0, 0, 0, 439, 440, 0, 0,
	730, 0, 261, 265, 0, 268, 0, 2026, 0, 2026,
	0, 0, 275, 0, 0, 0, 0, 0, 0, 305,
	306, 0, 0, 0, 0, 296, 299, 1330, 1331, 1112,
	1113, 300, 301, 354, 355, 0, 821, 844, 846, 840,
	841, 842, 0, 72, 0, 0, 0, 0, 0, 527,
	0, 0, 0, 0, 0, 705, 0, 1004, 707, 0,
	0, 0, 0, 0, 889, 883, 885, 959, 136, 889,
	8, 121, 118, 0, 19, 0, 0, 19, 19, 0,
	19, 310, 0, 1851, 1849, 1850, 1784, 1836, 0, 1810,
	0, 1811, 1812, 1813, 1824, 1825, 0, 0, 1806, 0,
	1807, 1808, 1809, 1800, 0, 1801, 1802, 0, 1803, 1804,
	308, 420, 0, 0, 1712, 992, 0, 748, 762, 743,
	0, 751, 0, 0, 1338, 0, 0, 0, 731, 762,
	733, 0, 751, 821, 798, 0, 776, 0, 0, 385,
	0, 396, 390, 0, 397, 392, 393, 0, 0, 414,
	416, 417, 418, 403, 404, 669, 371, 372, 363, 364,
	365, 366, 367, 368, 369, 370, 0, 0, 0, 374,
	146, 0, 343, 344, 0, 0, 0, 190, 191, 192,
	193, 194, 195, 197, 181, 694, 696, 1104, 1116, 0,
	1107, 0, 200, 241, 173, 0, 0, 0, 1716, 1717,
	1718, 1719, 1720, 1725, 0, 1727, 1729, 1731, 1733, 0,
	1751, -2, -2, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
	1470, 1471, 1472, 1473, 1474, 1736, 1749, 1750, 0, 0,
	0, 0, 0, 0, 1747, 1747, 1742, 0, 1501, 1332,
	1333, 1479, 0, 0, 1515, 1519, 0, 0, 0, 0,
	0, 0, 1135, 1835, 0, 137, 1706, 1610, 1611, 1612,
	1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622,
	1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632,
	1633, 1634, 1635, 1636, 1637, 1638, 0, 0, 1715, 0,
	0, 0, 1708, 1709, 0, 0, 0, 1598, 0, 0,
	1604, 1605, 1606, 0, 757, 0, 1671, 1644, 1662, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 913, 915, 0,
	766, 768, 769, 795, 776, 802, 0, 0, 0, 96,
	101, 0, 1190, 0, 0, 0, 0, 0, 0, 0,
	74, 1164, 75, 1166, 337, 338, 0, 0, 332, 320,
	2018, 322, 0, 0, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 1040, 1041, 525, 1098, 0, 0, 0,
	1114, 1139, 1147, 0, 0, 0, 0, 0, 1196, 1026,
	1031, 1032, 1033, 1027, 1028, 1034, 1035, 0, 817, 0,
	0, 928, 590, 649, 650, 882, 597, 1982, 602, 881,
	881, 609, 603, 610, 653, 611, 612, 613, 651, 881,
	881, 823, 648, 651, 636, 652, 651, 1338, 640, 0,
	647, 1338, 665, 1338, 0, 663, 617, 618, 1198, 819,
	437, 438, 443, 445, 0, 494, 494, 494, 477, 494,
	0, 0, 465, 1856, 0, 0, 0, 0, 474, 1856,
	0, 0, 1856, 1856, 1856, 1856, 1856, 1856, 1856, 0,
	0, 1856, 1856, 1856, 1856, 1856, 1856, 1856, 1856, 1856,
	1856, 1856, 0, 1856, 1856, 1856, 1856, 1856, 1315, 1856,
	0, 493, 1161, 484, 485, 486, 487, 492, 0, 0,
	521, 0, 0, 1039, 0, 525, 0, 0, 1081, 0,
	0, 894, 0, 895, 896, 897, 892, 930, 954, 954,
	0, 954, 934, 1338, 0, 0, 0, 273, 274, 262,
	0, 263, 0, 0, 276, 277, 0, 279, 280, 281,
	288, 1922, 1998, 283, 285, 0, 0, 289, 302, 303,
	304, 0, 0, 294, 295, 0, 0, 357, 358, 360,
	0, 776, 1165, 691, 1334, 692, 693, 697, 0, 0,
	700, 701, 702, 703, 704, 1006, 0, 0, 1090, 1091,
	1092, 1093, 881, 0, 890, 0, 886, 960, 0, 962,
	0, 881, 0, 119, 19, 0, 112, 109, 0, 0,
	0, 0, 0, 1831, 1780, 1852, 0, 0, 0, 1833,
	0, 0, 0, 0, 0, 102, 778, 738, 0, 742,
	759, 0, 763, 0, 0, 755, 747, 752, 0, 0,
	772, 739, 1337, 0, 0, 0, 732, 0, 0, 737,
	776, 0, 799, 828, 829, 832, 1395, 0, 398, 394,
	413, 0, 527, 0, 0, 0, 184, 1101, 0, 185,
	189, 179, 0, 0, 0, 1106, 0, 1103, 1108, 0,
	199, 0, 0, 174, 175, 1181, 1190, 0, 0, 0,
	1726, 1728, 1730, 1732, 1734, 0, 1737, 1747, 1747, 1743,
	0, 1738, 0, 1740, 0, 1716, 1485, 0, 1520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 1588, 1589, 0, 0, 1593, 0, 1595, 1596, 1597,
	1599, 0, 0, 0, 1603, 0, 1642, 1663, 1646, 1649,
	0, 1653, 0, 1655, 1657, 1658, 1659, 0, 826, 826,
	0, 0, 1559, 1559, 1559, 0, 0, 0, 0, 1559,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 1505, 1506, 0, 0, 0, 916, 796,
	0, 0, 0, 0, 0, 1188, 0, 86, 0, 0,
	0, 0, 91, 0, 0, 76, 339, 327, 329, 0,
	321, 0, 1152, 0, 0, 0, 0, 0, 994, 995,
	997, 0, 1000, 1001, 1002, 1006, 819, 0, 819, 1051,
	1856, 529, 0, 0, 1100, 0, 1070, 0, 0, 0,
	-2, 0, 0, 1147, 0, 0, 0, 1200, 0, 0,
	0, 716, 720, 23, 820, 0, 595, 0, 596, 648,
	604, 605, 881, 628, 629, 0, 0, 881, 648, 648,
	639, 651, 660, 0, 661, 1338, 1200, 0, 0, 1160,
	1266, 1234, 455, 0, 1350, 1351, 495, 0, 1357, 1366,
	1151, 1427, 0, 1366, 0, 0, 1368, 1369, 0, 0,
	0, 0, 478, 479, 0, 464, 0, 0, 0, 0,
	0, 0, 463, 0, 0, 505, 0, 0, 0, 0,
	0, 1857, 1856, 1856, 0, 472, 473, 0, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 1856, 1856, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1306, 0, 0, 0, 0, 0, 0, 0, 0, 1322,
	1323, 0, 1051, 1856, 0, 0, 0, 0, 529, 1095,
	1068, 1086, 0, 441, 442, 502, 0, 0, 0, 0,
	0, 0, 0, 920, 0, 0, 0, 919, 0, 0,
	0, 0, 0, 0, 0, 819, 955, 0, 957, 958,
	932, -2, 0, 894, 937, 1711, 0, 266, 267, 0,
	0, 272, 290, 292, 264, 0, 0, 0, 291, 293,
	297, 298, 356, 359, 361, 838, 0, 0, 1224, 0,
	1007, 1008, 1010, 1011, 0, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1906, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1005, 708, 872, 884, 891, 961, 963, 137, 887, 872,
	0, 122, 19, 121, 113, 114, 0, 19, 0, 0,
	0, 0, 1841, 1840, 1826, 0, 1827, 1838, 1843, 0,
	1846, 0, 424, 782, 0, 0, 762, 764, 0, 0,
	762, 0, 0, 771, 0, 0, 0, 0, 0, 0,
	762, 838, 778, 0, 835, 833, 834, 0, 0, 670,
	147, 419, 0, 0, 0, 0, 0, 695, 0, 1105,
	181, 0, 0, 201, 0, 0, 0, 1190, 1185, 1710,
	1739, 1741, 0, 1748, 1744, 1480, 1489, 1516, 0, 0,
	1522, 1534, 1534, 0, 0, 0, 1525, 1839, 1839, 1528,
	1835, 1837, 1835, 1534, 1534, 0, 1136, 0, 1137, 832,
	138, 0, 0, 1594, 0, 0, 0, 758, 0, 0,
	0, 1555, 1557, 1559, 1559, 1566, 1560, 1567, 1568, 1559,
	1559, 1559, 1559, 1573, 1559, 1559, 1559, 1559, 1559, 1559,
	1559, 1559, 1559, 1559, 1559, 1553, 0, 0, 1769, 1770,
	767, 0, 0, 809, 810, 811, 812, 813, 0, 0,
	61, 61, 1190, 0, 95, 87, 0, 0, 0, 0,
	0, 331, 0, 77, 78, 0, 0, 85, 0, 0,
	0, 0, 0, 999, 0, 0, 0, 1343, 0, 1055,
	1052, 1053, 1054, 0, 1095, 530, 531, 532, 533, 0,
	0, 0, 1099, 0, 0, 1063, 0, 0, 0, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, -2, 1155, 0, 0,
	0, 1343, 1174, 0, 0, 1179, 1343, 1343, 0, 1208,
	0, 1197, 770, 0, -2, 0, 0, 718, 0, 0,
	929, 598, 881, 622, 824, 825, 1338, 881, 881, 648,
	666, 662, 1208, 1199, 0, 444, 494, 0, 1254, 0,
	0, 1260, 0, 1267, 448, 0, 496, 0, 1356, 1383,
	1367, 1383, 1428, 1383, 1383, 1151, 0, 496, 0, 0,
	466, 0, 0, 0, 0, 0, 462, 499, 832, 449,
	451, 452, 453, 503, 504, 506, 0, 508, 509, 468,
	480, 481, 482, 483, 0, 0, 0, 475, 488, 489,
	490, 491, 450, 1283, 1284, 1285, 1288, 1289, 1290, 1291,
	0, 0, 1294, 1295, 1296, 1297, 1298, 1380, 1381, 1382,
	1299, 1300, 1301, 1302, 1303, 1304, 1305, 1324, 1325, 1326,
	1327, 1328, 1329, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
	1314, 0, 0, 1319, 0, 0, 0, 1055, 0, 0,
	0, 0, 0, 1095, 524, 0, 0, 1070, 0, 1088,
	0, 1082, 1083, 0, 0, 740, 881, 349, 0, 924,
	917, 0, 901, 0, 903, 921, 904, 922, 923, 908,
	0, 910, 0, 906, 907, 912, 905, 881, 893, 931,
	956, 933, 936, 938, 939, 945, 0, 0, 0, 0,
	260, 269, 270, 271, 278, 0, 549, 284, 794, 0,
	1335, 698, 699, 1225, 1226, 706, 0, 1012, 870, 0,
	0, 870, 117, 120, 0, 115, 0, 0, 0, 0,
	107, 105, 1834, 0, 0, 784, 161, 0, 0, 0,
	760, 0, 765, 762, 746, 756, 745, 753, 754, 773,
	1339, 1340, 1341, 1342, 762, 736, 735, 797, 782, 830,
	831, 0, 1396, 386, 0, 1102, 181, 186, 187, 188,
	182, 180, 1109, 0, 1111, 0, 1183, 0, 0, 1745,
	1521, 1490, 1523, 1535, 1536, 1524, 0, 1492, 1493, 1526,
	1527, 1529, 1530, 1531, 1532, 1533, 1494, 0, 1138, 1590,
	0, 1592, 1600, 1601, 0, 1650, 1654, 0, 0, 0,
	0, 0, 1564, 1565, 1569, 1570, 1571, 1572, 1574, 1575,
	1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 826,
	1554, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 63, 0, 63, 1189, 1191, 0, 959, 0,
	0, 92, 0, 0, 79, 80, 0, 0, 0, 987,
	990, 996, 998, 0, 0, 0, 1344, 1345, 1347, 1348,
	1349, 0, 1023, 0, 0, 1043, 1044, 1045, 1057, 0,
	535, 536, 0, 0, 0, 548, 544, 545, 546, 526,
	1094, 1077, 0, 0, 1066, 0, 0, 1076, 0, 1156,
	1856, 1856, 1856, 0, 0, 1268, 1856, 1856, 0, 1176,
	1178, 0, 0, 1272, 1211, 0, 0, 1202, 0, 954,
	0, 0, 881, 717, 720, 721, 818, 599, 637, 641,
	638, 881, 1211, 436, 1232, 0, 0, 0, 0, 0,
	1264, 0, 0, 1236, 0, 467, 497, 0, -2, 0,
	1384, 0, 1370, 1384, 0, 0, 1383, 0, 456, 496,
	0, 0, 0, 510, 514, 515, 0, 512, 1423, 0,
	513, 0, 501, 0, 507, 1286, 1287, 0, 1292, 1293,
	0, 1317, 0, 0, 0, 447, 516, 0, 0, 0,
	517, 518, 523, 1096, 1097, 1063, 0, 1077, 0, 1087,
	0, 1084, 1085, 826, 0, 0, 898, 925, 0, 0,
	899, 0, 900, 902, 909, 911, 348, 940, 0, 0,
	942, 943, 944, 935, 286, 839, 1009, 0, 860, 0,
	0, 888, 861, 0, 19, 0, 0, 110, 1844, 1847,
	786, 0, 783, 162, 0, 0, 0, 0, 750, 761,
	744, 734, 784, 836, 837, 183, 178, 1110, 1193, 0,
	1184, 0, 1447, 1503, 0, 1602, 0, 1559, 1556, 1559,
	1558, 1550, 0, 1507, 0, 1509, 1510, 1511, 0, 1513,
	1514, 0, 805, 0, 59, 0, 62, 60, 0, 94,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 1029,
	1272, 0, 1029, 1056, 1042, 0, 0, 537, 538, 0,
	541, 547, 1058, 0, 0, 1060, 1061, 1062, 0, 0,
	1074, 0, 0, 0, 0, 1148, 1162, 0, 0, 0,
	-2, 0, -2, 1173, 0, 1217, 0, 1209, 0, 1201,
	0, 1204, 881, 881, -2, 714, 719, 0, 642, 1217,
	1234, 0, 1255, 0, 0, 0, 0, 0, 0, 0,
	1235, 0, 1248, 498, 1385, -2, 1399, 1401, 0, 1161,
	1404, 1405, 0, 0, 0, 0, 0, 0, 1454, 1413,
	0, 0, 1417, 1418, 1419, 0, 0, 1422, 0, 1763,
	1764, 0, 1426, 0, 0, 0, 0, 0, 0, 0,
	1364, 457, 458, 0, 460, 461, 1856, 1424, 500, 454,
	1856, 470, 1316, 1320, 1321, 1318, 522, 519, 520, 1066,
	1069, 1080, 1089, 741, 821, 350, 351, 926, 0, 918,
	949, 946, 0, 0, 1013, 871, 879, 2211, 2213, 2210,
	111, 116, 0, 0, 788, 0, 785, 0, 779, 781,
	172, 749, 786, 132, 164, 0, 0, 1491, 0, 0,
	0, 1591, 1641, 1562, 1563, 0, 1551, 0, 1545, 1546,
	1547, 1552, 0, 0, 808, 803, 64, 90, 0, 93,
	68, 81, 0, 0, 0, 0, 1015, 1022, 1036, 1167,
	1346, 1021, 0, 0, 534, 539, 0, 542, 543, 1078,
	1077, 0, 1064, 1065, 0, 1072, 0, 0, 1157, 1158,
	1159, 1269, 1270, 1271, 1227, 1175, 0, -2, 1280, 0,
	0, 1171, 1193, 1227, 0, 0, 1205, 0, 1212, 0,
	1210, 1203, 826, 715, 1214, 446, 1266, 1256, 0, 1258,
	0, 0, 0, 0, 1237, -2, 0, 1400, 1402, 1403,
	1406, 1407, 1408, 1459, 1460, 1461, 0, 0, 1411, 1456,
	1457, 1458, 1412, 0, 0, 0, 0, 0, 1761, 1762,
	1452, 0, 0, 1371, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1372, 0, 0, 0, 1363, 1365, 459, 0, 0,
	1856, 1079, 347, 0, 0, 950, 952, 947, 948, 873,
	0, 0, 0, 0, 106, 108, 123, 0, 787, 163,
	0, 788, 134, 0, 155, 0, 1194, 0, 1502, 0,
	0, 0, 1561, 1548, 0, 0, 0, 0, 0, 1765,
	1766, 1767, 0, 1508, 1512, 89, 0, 66, 0, 82,
	83, 0, 0, 0, 1037, 1038, 1046, 1047, 0, 1049,
	1050, 540, 1059, 1067, 1071, 1074, 0, 1126, 1229, 0,
	1177, 1160, 1282, 1856, 1180, 1229, 0, 1274, 1856, 1856,
	1195, 0, 1207, 0, 1219, 0, 1213, 821, 435, 0,
	1216, 1252, 1257, 1259, 1261, 0, 1265, 1263, 1238, -2,
	0, 1246, 0, 0, 1409, 1410, 0, 0, 1660, 1856,
	0, 1442, 0, 1126, 1126, 1126, 1126, 0, 511, 469,
	0, 927, 941, 0, 880, 0, 0, 0, 0, 0,
	777, 124, 0, 133, 152, 0, 165, 166, 0, 0,
	0, 0, 1186, 0, 1450, 1451, 0, 1537, 0, 0,
	0, 1541, 1542, 1543, 1544, 65, 68, 0, 0, 0,
	1014, 0, 1048, 1073, 1075, 1125, 1170, 0, 1266, 1281,
	0, 1172, 1273, 0, 0, 0, 1206, 1218, 0, 1221,
	713, 1215, 1233, 0, 1262, 1239, 1247, 0, 1242, 0,
	0, 0, 1455, 0, 1416, 0, 1421, 1430, 1443, 0,
	0, 1352, 0, 1354, 0, 1358, 0, 1360, 0, 0,
	471, 951, 953, 0, 1711, 875, 876, 0, 790, 780,
	135, 139, 0, 161, 158, 0, 167, 0, 0, 0,
	0, 1182, 0, 1448, 0, 1538, 1539, 1540, 67, 69,
	84, 0, 1016, 1017, 1030, 1127, 1856, 1856, 0, 0,
	0, 1133, 1134, 0, 1254, 1286, 1275, 1276, 1277, 1220,
	1253, 1241, 0, -2, 1249, 0, 0, 1713, 1723, 1724,
	1414, 1420, 1429, 1431, 1432, 0, 1444, 1445, 1446, 1453,
	1126, 1126, 1126, 1126, 1362, 874, 0, 0, 789, 0,
	126, 0, 0, 156, 157, 159, 0, 168, 0, 170,
	171, 0, 0, 1549, 1018, 0, 0, 1130, 1131, 0,
	1230, 0, 1232, 1243, -2, 0, 1251, 0, 1415, 1433,
	0, 1434, 0, 0, 0, 1353, 1355, 1359, 1361, 1711,
	877, 791, 1192, 0, 140, 0, 142, 144, 145, 1386,
	153, 154, 160, 169, 0, 0, 1003, 1019, 0, 1128,
	1129, 1132, 0, 1234, 1250, 1714, 1435, 1437, 1438, 0,
	0, 1436, 0, 127, 128, 0, 141, 0, 0, 1187,
	1449, 1020, 1231, 1228, 1439, 1441, 1440, 878, 0, 0,
	143, 1387, 129, 130, 131, 0, 1388,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 118, 3, 3, 3, 149, 141, 3,
	85, 86, 146, 144, 159, 145, 158, 147, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 656, 653,
	128, 127, 129, 3, 657, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 151, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 654, 140, 655, 152,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 119, 120, 121, 122, 123, 124,
	125, 126, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 142, 143, 148, 150, 153, 154, 155, 156,
	157, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:841
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:848
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:854
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:862
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:872
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:887
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:891
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:897
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:902
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:906
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:939
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:953
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:964
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:976
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:980
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:985
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:989
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:995
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1009
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1013
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1017
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1021
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1028
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1036
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1044
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1050
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1057
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1066
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1074
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1082
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1092
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1102
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1114
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1124
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1134
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1145
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1156
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1170
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1178
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1186
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1194
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1203
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1213
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1225
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1233
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1242
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1252
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1262
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1272
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1292
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1298
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1305
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1313
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1319
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1328
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1338
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1346
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1354
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1362
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1372
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1380
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1390
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1397
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1406
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1416
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1420
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1426
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1430
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1436
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1445
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1455
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1459
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1465
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1474
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1478
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1484
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1505
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1519
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1526
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1530
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1536
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1540
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1546
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1553
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1561
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1565
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1577
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1581
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1595
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1599
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1604
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1611
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1615
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1619
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1625
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1634
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1645
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1649
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1655
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1659
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1665
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1669
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1675
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarExpr{
				Name:   v,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1695
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1714
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1718
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1722
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1727
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1731
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1740
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1750
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1757
		{
			yyVAL.str = yyDollar[3].str
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1762
		{
			yyVAL.str = "\n"
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1769
		{
			yyVAL.str = yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1774
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1778
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1806
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1810
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1816
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1824
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1844
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1863
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1888
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1892
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1896
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1901
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1905
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1911
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1924
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1935
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1948
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1952
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1962
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1975
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1988
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1994
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2000
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2008
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2018
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2028
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2032
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2036
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2040
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2044
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2048
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2055
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2059
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2065
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2072
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2081
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2085
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2091
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2095
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2099
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2103
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2107
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2111
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2115
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2119
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2123
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2127
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2131
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2135
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2139
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2143
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2147
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2151
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2155
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2159
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2163
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2167
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2171
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2175
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2179
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2183
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2187
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2191
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2195
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2199
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2203
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2207
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2211
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2215
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2219
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2223
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2227
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2231
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2235
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2239
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2243
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2247
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2251
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2255
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2259
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2263
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2267
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2271
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2275
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2279
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2283
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2287
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2291
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2306
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2315
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2322
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2329
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2338
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2356
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2360
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2366
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2373
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2381
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2385
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2389
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2393
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2399
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2403
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2409
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2416
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2423
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2432
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2462
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2466
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2470
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2476
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2482
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2486
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2493
		{
			yyVAL.str = yyDollar[3].str
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2499
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2503
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2509
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2517
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2526
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2535
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2543
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2551
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2574
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   v,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2593
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2600
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2607
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2615
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2622
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2629
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2638
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2642
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2646
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2652
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2656
		{
			yyVAL.str = yyDollar[1].str
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2662
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2666
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2672
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2676
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2690
		{
			yyLOCAL = &tree.SavePoint{Name: tree.Identifier(yyDollar[2].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2696
		{
			yyLOCAL = &tree.ReleaseSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2702
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2707
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2712
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[5].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2717
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2723
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2729
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2734
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2738
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2742
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2746
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2750
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2754
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2758
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2762
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2766
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2772
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2776
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2780
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2784
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2789
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2794
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2800
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2813
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2826
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2839
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2852
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2868
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2875
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2886
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2897
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2901
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2907
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2917
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2923
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2927
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2933
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2939
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2943
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2947
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2951
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2957
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2970
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2976
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2980
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2986
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2990
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2996
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3002
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3013
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3019
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3023
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3027
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3031
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3035
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3039
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3047
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3055
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3065
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3073
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3083
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3093
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3109
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3113
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3121
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3129
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3169
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3173
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3179
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3185
		{
			yyVAL.str = yyDollar[1].str
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3190
		{
			yyVAL.str = "true"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3191
		{
			yyVAL.str = "false"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3192
		{
			yyVAL.str = yyDollar[1].str
		}
	case 419:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3197
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3203
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3212
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3219
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3227
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3231
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3256
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3279
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3289
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3296
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3305
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3313
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3317
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3323
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3334
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3338
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3344
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3348
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3372
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3382
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3392
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3408
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3426
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3430
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3436
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3440
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3446
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3452
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3460
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3470
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3478
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3488
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3498
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3508
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3515
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3519
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3523
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3527
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3531
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3538
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3544
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3548
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3552
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3556
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3560
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3564
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3568
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3572
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3577
		{
			yyVAL.str = ""
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3608
		{
			yyVAL.str = ""
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3612
		{
			yyVAL.str = string("COLUMN")
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3617
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3623
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3629
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3637
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3641
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3647
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3655
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3662
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3668
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3674
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3680
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3686
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3693
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3700
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3708
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3714
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3726
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3732
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3740
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3744
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3751
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3769
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3784
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3799
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3814
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3827
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3833
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3844
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3856
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountUnlock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3869
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3873
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3881
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3885
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3890
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3894
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3910
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3914
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3918
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3922
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3929
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3933
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3937
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3941
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3948
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3952
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3959
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3963
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3967
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3971
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3978
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3985
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3991
		{
			yyVAL.item = nil
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3996
		{
			yyVAL.item = nil
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4044
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4050
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4056
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4062
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4071
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4079
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4087
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4095
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4099
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4103
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4114
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4118
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4124
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4129
		{
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4133
		{
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4138
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4148
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4158
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4166
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4172
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4178
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4184
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4190
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4196
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4202
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4211
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4215
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4219
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4223
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4227
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4231
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4235
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4239
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4245
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4254
		{
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4256
		{
		}
	case 628:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4265
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4275
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4284
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4288
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4292
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4298
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4304
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4310
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4316
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4325
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4336
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4348
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4356
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4362
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4374
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4388
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4394
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4400
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4407
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4411
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4416
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4420
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4424
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4429
		{
			yyVAL.str = ""
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4433
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4439
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4454
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4458
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4464
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4472
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4479
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4487
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4493
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4499
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4504
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4512
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4518
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4523
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4529
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4535
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4539
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4567
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4575
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4583
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4591
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4595
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4601
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4614
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4622
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4631
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4637
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4645
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4653
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4661
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4667
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4675
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4681
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4689
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4695
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4705
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4710
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4717
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4733
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4746
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4757
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4761
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4767
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4773
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4782
		{
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4784
		{
		}
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4787
		{
		}
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4796
		{
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4800
		{
		}
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4805
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4814
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4821
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4827
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4835
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4842
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4849
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4869
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4877
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4887
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4891
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4897
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4904
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4910
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4918
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4925
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4932
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4951
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4955
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4959
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4964
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4968
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4972
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4978
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4987
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4991
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4997
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5001
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5007
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5011
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5017
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5022
		{
		}
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5026
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5033
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5037
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5044
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5049
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5053
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5059
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5063
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5069
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5073
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5078
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5082
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5095
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5106
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5117
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5139
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5162
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5170
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5179
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5183
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5196
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5200
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5205
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5209
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5216
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5221
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5228
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5234
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5238
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5242
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5246
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5250
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5254
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5259
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5263
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5269
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5279
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5294
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5298
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5312
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5316
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5322
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5331
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5335
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5339
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5343
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5347
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5353
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5360
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5369
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5373
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5379
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5387
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5391
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5396
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5400
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5406
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5410
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5414
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5419
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5423
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5429
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5435
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5439
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5445
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5450
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5454
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5458
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5463
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5467
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5471
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5476
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5480
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5488
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5492
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5496
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5510
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5514
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5524
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5534
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5544
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5556
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5564
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5572
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5581
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5589
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5597
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5605
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5613
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5621
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5629
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5637
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5645
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5655
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5666
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5680
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5684
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5688
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 865:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5693
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5697
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5701
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5710
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5714
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5719
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5723
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5733
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5742
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5751
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5762
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5766
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5771
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5775
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5780
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5784
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5790
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5794
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5800
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5804
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5808
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5812
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5817
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5825
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5831
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5839
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5849
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5859
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5863
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5869
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5878
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5887
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5896
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5904
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:5915
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5925
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 905:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5929
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 906:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5935
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5939
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5949
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5953
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5957
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5961
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5967
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 913:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5973
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5984
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5988
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5994
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6000
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6004
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6010
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6016
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 921:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6020
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6024
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6028
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 924:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6034
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6038
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6044
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6048
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6054
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6058
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6064
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6068
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6078
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6091
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6097
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6103
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6117
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6128
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6135
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6139
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6145
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6155
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6159
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6163
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6168
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6172
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6176
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6180
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6185
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6189
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6193
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6197
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6201
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6206
		{
			yyVAL.str = ""
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6210
		{
			yyVAL.str = yyDollar[1].str
		}
	case 956:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6214
		{
			yyVAL.str = yyDollar[2].str
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6220
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6224
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 959:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6229
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6233
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6237
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6241
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6245
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6251
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 987:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6293
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6306
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6312
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 990:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6318
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6331
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6336
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6343
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6350
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6354
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6360
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6366
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6371
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6375
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6379
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6383
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6390
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6423
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6428
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6435
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6442
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6446
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6452
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6458
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6462
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6466
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6472
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6478
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6484
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6488
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6494
		{
			yyVAL.str = ""
		}
	case 1020:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6501
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1021:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6507
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6522
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6539
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6556
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1025:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6560
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1026:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6566
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1027:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6570
		{
			yyVAL.str = "DEFINER = "
		}
	case 1028:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6574
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1029:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6579
		{
			yyVAL.str = ""
		}
	case 1030:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6583
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1036:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6597
		{
			yyVAL.str = ""
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6605
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6611
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6616
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6622
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6635
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6640
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6645
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6651
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6658
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6665
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6672
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6679
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6687
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6693
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6700
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6707
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6715
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6721
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6730
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6747
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6763
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6782
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6788
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6797
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6815
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6821
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6828
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6836
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6842
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6850
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6856
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6864
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6870
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6879
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6883
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6888
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6892
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6899
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1077:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6904
		{
			yyVAL.str = ""
		}
	case 1078:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6908
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1079:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6914
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6927
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6938
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6942
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6948
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6954
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6960
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6967
		{
			yyVAL.str = ""
		}
	case 1087:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6971
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6976
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6980
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6986
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6994
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7002
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7010
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7018
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1095:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7023
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7035
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7046
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7155
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7159
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7165
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7178
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7182
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7188
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7201
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7205
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7209
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7214
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7218
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7224
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7231
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7237
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7246
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1114:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7253
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7264
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7268
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7274
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7283
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7287
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7291
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7296
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7300
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7304
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7308
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7314
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7345
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7349
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7375
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7381
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7393
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7399
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7405
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7411
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7417
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7425
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7429
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7435
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7449
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7463
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7467
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7471
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7475
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7479
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7483
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7487
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7493
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7508
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7512
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7523
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7527
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7532
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7536
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7542
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7546
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7552
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7561
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7570
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7576
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7580
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7586
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7597
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7603
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7621
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7639
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7657
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7673
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7677
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7686
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7698
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7707
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7719
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7729
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7739
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7750
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7760
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7771
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7779
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7790
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7797
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7807
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7820
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7828
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7837
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7846
		{
			yyVAL.str = ""
		}
	case 1187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7850
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7856
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7860
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7865
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7869
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7876
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7888
		{
			yyVAL.str = ""
		}
	case 1194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7892
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1195:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7898
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7919
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7933
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7937
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7941
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7947
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7951
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7958
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7965
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7972
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7979
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7983
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7987
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7991
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7995
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8002
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8009
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8013
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8020
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8027
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8031
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8037
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8043
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8047
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8054
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8061
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8068
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8075
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8079
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8084
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8088
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8092
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8097
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8101
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8114
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8118
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8126
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8134
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8138
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8150
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8154
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8160
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8164
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8170
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8183
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8197
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8201
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8207
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8211
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8217
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8226
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8237
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8241
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8246
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8250
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8256
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8261
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8269
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8273
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8283
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8287
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8298
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8306
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8314
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8322
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8333
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8342
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8352
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8362
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8366
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8371
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8375
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8381
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8385
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8391
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8400
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8410
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8414
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8420
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8424
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8430
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8439
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8449
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8453
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8459
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8463
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8467
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8473
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8477
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8481
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8485
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8489
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8493
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8497
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8502
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8506
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8510
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8514
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8518
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8522
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8526
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8530
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8534
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8538
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8542
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8546
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8550
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8556
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8562
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8566
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8570
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8574
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8578
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8584
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8590
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8596
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8602
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8608
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8614
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8618
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8622
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8626
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8631
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8642
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8646
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8652
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8663
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8667
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8673
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8677
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8681
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8685
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8689
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8693
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8707
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8711
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8720
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8726
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8734
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8738
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8745
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8754
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8762
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8770
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8777
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8781
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8787
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8791
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8795
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8801
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8805
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8811
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8824
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8837
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8876
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8916
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8930
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8936
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8949
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8962
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8975
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8988
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9003
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9013
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9019
		{
			yyVAL.str = ""
		}
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9023
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9033
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9039
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9045
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9066
		{
			yyVAL.str = ""
		}
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9070
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1385:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9076
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9082
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9086
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9091
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9099
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9103
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9107
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9111
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9117
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9123
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9127
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9132
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9139
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9143
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9149
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9153
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9159
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9163
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9167
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9171
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9175
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9179
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9184
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9188
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9192
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9196
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9200
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9204
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9208
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9212
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9216
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9220
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9234
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9238
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9242
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9246
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9250
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9254
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9260
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9264
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9269
		{
			yyVAL.str = ""
		}
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9273
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9279
		{
			yyVAL.str = ""
		}
	case 1428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9283
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1429:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9289
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9306
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9313
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9320
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9327
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9334
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9343
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9349
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9355
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9359
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9363
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9367
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9371
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9376
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9383
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9387
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9391
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9396
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9400
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9404
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9408
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9412
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9417
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9421
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9426
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9430
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9446
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9452
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9456
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9460
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9464
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9468
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9472
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9476
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9480
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9484
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9488
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9492
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9496
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9500
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9506
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9510
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9514
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9518
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9522
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9526
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9530
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9534
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9538
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9542
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9584
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9588
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9592
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9597
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9605
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9609
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9613
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9617
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9621
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9631
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9635
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9639
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9643
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9647
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9651
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9655
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9659
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9672
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1504:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9678
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9687
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9696
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9707
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9717
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9727
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9736
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9746
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9756
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9766
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9775
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9785
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9789
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9794
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9798
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9804
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9808
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9814
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9823
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1523:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9835
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9852
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9869
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9882
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9895
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9907
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9921
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9936
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9951
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9968
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9983
		{
		}
	case 1538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9990
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9994
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9998
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10004
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10008
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10012
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10016
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10022
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10026
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10030
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10036
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10044
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10054
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10058
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10065
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10070
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10074
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10079
		{
			yyVAL.str = ","
		}
	case 1556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10083
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10088
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10092
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1559:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10097
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10104
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10130
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10142
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10154
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10165
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10176
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10187
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10197
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10207
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10218
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10229
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10240
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10251
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10262
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10273
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10284
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10295
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10306
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10317
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10328
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10339
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10350
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10361
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10372
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10396
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10405
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10414
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10423
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10432
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10443
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10452
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10462
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10471
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10480
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10489
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10498
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10510
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10521
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10534
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10546
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10569
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1639:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10605
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10618
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10631
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10643
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10652
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10660
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10668
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10681
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10690
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10701
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10712
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10721
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10733
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10743
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10753
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10762
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10773
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10782
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10792
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10801
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10810
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10820
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10824
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10830
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10834
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10853
		{
		}
	case 1671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10855
		{
		}
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10897
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10909
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10913
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10917
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10923
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10928
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10932
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10938
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10942
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10948
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10952
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10959
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10963
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10967
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10976
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10980
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10984
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10989
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10993
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10999
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11003
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11007
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11011
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11015
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11019
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11023
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11027
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11031
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11035
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11043
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11047
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11051
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11055
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11059
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11063
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11067
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11071
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11075
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11079
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11085
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11089
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11095
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11099
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11106
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11110
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11114
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11120
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11124
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11128
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11132
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11136
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11140
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11144
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11150
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11154
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11158
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11162
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11168
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11181
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11186
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11192
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11196
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11209
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11214
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11218
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11222
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11226
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11230
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11237
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11241
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11245
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11249
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11256
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11267
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11272
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11278
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11290
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11302
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11314
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11327
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11340
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11353
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11366
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11379
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11392
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11405
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11418
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11431
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11444
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11459
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11486
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11528
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11564
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11600
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11617
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11629
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11649
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11669
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11689
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11705
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11718
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11731
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11744
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11757
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11769
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11781
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11793
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11805
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11817
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11829
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11841
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11853
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11865
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11877
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11890
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11903
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11916
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11929
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11944
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11952
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1831:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11961
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11971
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11994
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11999
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12005
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12012
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12016
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12021
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1840:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12025
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1841:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12031
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1842:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12037
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1843:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12044
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1844:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12051
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1845:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12060
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12067
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1847:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12074
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1848:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12083
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12087
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12091
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1851:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12097
		{
		}
	case 1852:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12099
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1856:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12109
		{
			yyVAL.str = ""
		}
	case 1857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12113
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
