// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const APPLY = 57421
const LOWER_THAN_ON = 57422
const ON = 57423
const USING = 57424
const SUBQUERY_AS_EXPR = 57425
const LOWER_THAN_STRING = 57426
const ID = 57427
const AT_ID = 57428
const AT_AT_ID = 57429
const STRING = 57430
const VALUE_ARG = 57431
const LIST_ARG = 57432
const COMMENT = 57433
const COMMENT_KEYWORD = 57434
const QUOTE_ID = 57435
const STAGE = 57436
const CREDENTIALS = 57437
const STAGES = 57438
const SNAPSHOTS = 57439
const INTEGRAL = 57440
const HEX = 57441
const FLOAT = 57442
const HEXNUM = 57443
const BIT_LITERAL = 57444
const NULL = 57445
const TRUE = 57446
const FALSE = 57447
const LOWER_THAN_CHARSET = 57448
const CHARSET = 57449
const UNIQUE = 57450
const KEY = 57451
const OR = 57452
const PIPE_CONCAT = 57453
const XOR = 57454
const AND = 57455
const NOT = 57456
const BETWEEN = 57457
const CASE = 57458
const WHEN = 57459
const THEN = 57460
const ELSE = 57461
const END = 57462
const ELSEIF = 57463
const LOWER_THAN_EQ = 57464
const LE = 57465
const GE = 57466
const NE = 57467
const NULL_SAFE_EQUAL = 57468
const IS = 57469
const LIKE = 57470
const REGEXP = 57471
const IN = 57472
const ASSIGNMENT = 57473
const ILIKE = 57474
const SHIFT_LEFT = 57475
const SHIFT_RIGHT = 57476
const DIV = 57477
const MOD = 57478
const UNARY = 57479
const COLLATE = 57480
const BINARY = 57481
const UNDERSCORE_BINARY = 57482
const INTERVAL = 57483
const OUT = 57484
const INOUT = 57485
const BEGIN = 57486
const START = 57487
const TRANSACTION = 57488
const COMMIT = 57489
const ROLLBACK = 57490
const WORK = 57491
const CONSISTENT = 57492
const SNAPSHOT = 57493
const CHAIN = 57494
const NO = 57495
const RELEASE = 57496
const PRIORITY = 57497
const QUICK = 57498
const BIT = 57499
const TINYINT = 57500
const SMALLINT = 57501
const MEDIUMINT = 57502
const INT = 57503
const INTEGER = 57504
const BIGINT = 57505
const INTNUM = 57506
const REAL = 57507
const DOUBLE = 57508
const FLOAT_TYPE = 57509
const DECIMAL = 57510
const NUMERIC = 57511
const DECIMAL_VALUE = 57512
const TIME = 57513
const TIMESTAMP = 57514
const DATETIME = 57515
const YEAR = 57516
const CHAR = 57517
const VARCHAR = 57518
const BOOL = 57519
const CHARACTER = 57520
const VARBINARY = 57521
const NCHAR = 57522
const TEXT = 57523
const TINYTEXT = 57524
const MEDIUMTEXT = 57525
const LONGTEXT = 57526
const DATALINK = 57527
const BLOB = 57528
const TINYBLOB = 57529
const MEDIUMBLOB = 57530
const LONGBLOB = 57531
const JSON = 57532
const ENUM = 57533
const UUID = 57534
const VECF32 = 57535
const VECF64 = 57536
const GEOMETRY = 57537
const POINT = 57538
const LINESTRING = 57539
const POLYGON = 57540
const GEOMETRYCOLLECTION = 57541
const MULTIPOINT = 57542
const MULTILINESTRING = 57543
const MULTIPOLYGON = 57544
const INT1 = 57545
const INT2 = 57546
const INT3 = 57547
const INT4 = 57548
const INT8 = 57549
const S3OPTION = 57550
const STAGEOPTION = 57551
const SQL_SMALL_RESULT = 57552
const SQL_BIG_RESULT = 57553
const SQL_BUFFER_RESULT = 57554
const LOW_PRIORITY = 57555
const HIGH_PRIORITY = 57556
const DELAYED = 57557
const CREATE = 57558
const ALTER = 57559
const DROP = 57560
const RENAME = 57561
const ANALYZE = 57562
const ADD = 57563
const RETURNS = 57564
const SCHEMA = 57565
const TABLE = 57566
const SEQUENCE = 57567
const INDEX = 57568
const VIEW = 57569
const TO = 57570
const IGNORE = 57571
const IF = 57572
const PRIMARY = 57573
const COLUMN = 57574
const CONSTRAINT = 57575
const SPATIAL = 57576
const FULLTEXT = 57577
const FOREIGN = 57578
const KEY_BLOCK_SIZE = 57579
const SHOW = 57580
const DESCRIBE = 57581
const EXPLAIN = 57582
const DATE = 57583
const ESCAPE = 57584
const REPAIR = 57585
const OPTIMIZE = 57586
const TRUNCATE = 57587
const MAXVALUE = 57588
const PARTITION = 57589
const REORGANIZE = 57590
const LESS = 57591
const THAN = 57592
const PROCEDURE = 57593
const TRIGGER = 57594
const STATUS = 57595
const VARIABLES = 57596
const ROLE = 57597
const PROXY = 57598
const AVG_ROW_LENGTH = 57599
const STORAGE = 57600
const DISK = 57601
const MEMORY = 57602
const CHECKSUM = 57603
const COMPRESSION = 57604
const DATA = 57605
const DIRECTORY = 57606
const DELAY_KEY_WRITE = 57607
const ENCRYPTION = 57608
const ENGINE = 57609
const MAX_ROWS = 57610
const MIN_ROWS = 57611
const PACK_KEYS = 57612
const ROW_FORMAT = 57613
const STATS_AUTO_RECALC = 57614
const STATS_PERSISTENT = 57615
const STATS_SAMPLE_PAGES = 57616
const DYNAMIC = 57617
const COMPRESSED = 57618
const REDUNDANT = 57619
const COMPACT = 57620
const FIXED = 57621
const COLUMN_FORMAT = 57622
const AUTO_RANDOM = 57623
const ENGINE_ATTRIBUTE = 57624
const SECONDARY_ENGINE_ATTRIBUTE = 57625
const INSERT_METHOD = 57626
const RESTRICT = 57627
const CASCADE = 57628
const ACTION = 57629
const PARTIAL = 57630
const SIMPLE = 57631
const CHECK = 57632
const ENFORCED = 57633
const RANGE = 57634
const LIST = 57635
const ALGORITHM = 57636
const LINEAR = 57637
const PARTITIONS = 57638
const SUBPARTITION = 57639
const SUBPARTITIONS = 57640
const CLUSTER = 57641
const TYPE = 57642
const ANY = 57643
const SOME = 57644
const EXTERNAL = 57645
const LOCALFILE = 57646
const URL = 57647
const PREPARE = 57648
const DEALLOCATE = 57649
const RESET = 57650
const EXTENSION = 57651
const RETENTION = 57652
const PERIOD = 57653
const INCREMENT = 57654
const CYCLE = 57655
const MINVALUE = 57656
const PUBLICATION = 57657
const SUBSCRIPTIONS = 57658
const PUBLICATIONS = 57659
const PROPERTIES = 57660
const PARSER = 57661
const VISIBLE = 57662
const INVISIBLE = 57663
const BTREE = 57664
const HASH = 57665
const RTREE = 57666
const BSI = 57667
const IVFFLAT = 57668
const MASTER = 57669
const ZONEMAP = 57670
const LEADING = 57671
const BOTH = 57672
const TRAILING = 57673
const UNKNOWN = 57674
const LISTS = 57675
const OP_TYPE = 57676
const REINDEX = 57677
const EXPIRE = 57678
const ACCOUNT = 57679
const ACCOUNTS = 57680
const UNLOCK = 57681
const DAY = 57682
const NEVER = 57683
const PUMP = 57684
const MYSQL_COMPATIBILITY_MODE = 57685
const UNIQUE_CHECK_ON_AUTOINCR = 57686
const MODIFY = 57687
const CHANGE = 57688
const SECOND = 57689
const ASCII = 57690
const COALESCE = 57691
const COLLATION = 57692
const HOUR = 57693
const MICROSECOND = 57694
const MINUTE = 57695
const MONTH = 57696
const QUARTER = 57697
const REPEAT = 57698
const REVERSE = 57699
const ROW_COUNT = 57700
const WEEK = 57701
const REVOKE = 57702
const FUNCTION = 57703
const PRIVILEGES = 57704
const TABLESPACE = 57705
const EXECUTE = 57706
const SUPER = 57707
const GRANT = 57708
const OPTION = 57709
const REFERENCES = 57710
const REPLICATION = 57711
const SLAVE = 57712
const CLIENT = 57713
const USAGE = 57714
const RELOAD = 57715
const FILE = 57716
const TEMPORARY = 57717
const ROUTINE = 57718
const EVENT = 57719
const SHUTDOWN = 57720
const NULLX = 57721
const AUTO_INCREMENT = 57722
const APPROXNUM = 57723
const SIGNED = 57724
const UNSIGNED = 57725
const ZEROFILL = 57726
const ENGINES = 57727
const LOW_CARDINALITY = 57728
const AUTOEXTEND_SIZE = 57729
const ADMIN_NAME = 57730
const RANDOM = 57731
const SUSPEND = 57732
const ATTRIBUTE = 57733
const HISTORY = 57734
const REUSE = 57735
const CURRENT = 57736
const OPTIONAL = 57737
const FAILED_LOGIN_ATTEMPTS = 57738
const PASSWORD_LOCK_TIME = 57739
const UNBOUNDED = 57740
const SECONDARY = 57741
const RESTRICTED = 57742
const USER = 57743
const IDENTIFIED = 57744
const CIPHER = 57745
const ISSUER = 57746
const X509 = 57747
const SUBJECT = 57748
const SAN = 57749
const REQUIRE = 57750
const SSL = 57751
const NONE = 57752
const PASSWORD = 57753
const SHARED = 57754
const EXCLUSIVE = 57755
const MAX_QUERIES_PER_HOUR = 57756
const MAX_UPDATES_PER_HOUR = 57757
const MAX_CONNECTIONS_PER_HOUR = 57758
const MAX_USER_CONNECTIONS = 57759
const FORMAT = 57760
const VERBOSE = 57761
const CONNECTION = 57762
const TRIGGERS = 57763
const PROFILES = 57764
const LOAD = 57765
const INLINE = 57766
const INFILE = 57767
const TERMINATED = 57768
const OPTIONALLY = 57769
const ENCLOSED = 57770
const ESCAPED = 57771
const STARTING = 57772
const LINES = 57773
const ROWS = 57774
const IMPORT = 57775
const DISCARD = 57776
const JSONTYPE = 57777
const MODUMP = 57778
const OVER = 57779
const PRECEDING = 57780
const FOLLOWING = 57781
const GROUPS = 57782
const DATABASES = 57783
const TABLES = 57784
const SEQUENCES = 57785
const EXTENDED = 57786
const FULL = 57787
const PROCESSLIST = 57788
const FIELDS = 57789
const COLUMNS = 57790
const OPEN = 57791
const ERRORS = 57792
const WARNINGS = 57793
const INDEXES = 57794
const SCHEMAS = 57795
const NODE = 57796
const LOCKS = 57797
const ROLES = 57798
const TABLE_NUMBER = 57799
const COLUMN_NUMBER = 57800
const TABLE_VALUES = 57801
const TABLE_SIZE = 57802
const NAMES = 57803
const GLOBAL = 57804
const PERSIST = 57805
const SESSION = 57806
const ISOLATION = 57807
const LEVEL = 57808
const READ = 57809
const WRITE = 57810
const ONLY = 57811
const REPEATABLE = 57812
const COMMITTED = 57813
const UNCOMMITTED = 57814
const SERIALIZABLE = 57815
const LOCAL = 57816
const EVENTS = 57817
const PLUGINS = 57818
const CURRENT_TIMESTAMP = 57819
const DATABASE = 57820
const CURRENT_TIME = 57821
const LOCALTIME = 57822
const LOCALTIMESTAMP = 57823
const UTC_DATE = 57824
const UTC_TIME = 57825
const UTC_TIMESTAMP = 57826
const REPLACE = 57827
const CONVERT = 57828
const SEPARATOR = 57829
const TIMESTAMPDIFF = 57830
const CURRENT_DATE = 57831
const CURRENT_USER = 57832
const CURRENT_ROLE = 57833
const SECOND_MICROSECOND = 57834
const MINUTE_MICROSECOND = 57835
const MINUTE_SECOND = 57836
const HOUR_MICROSECOND = 57837
const HOUR_SECOND = 57838
const HOUR_MINUTE = 57839
const DAY_MICROSECOND = 57840
const DAY_SECOND = 57841
const DAY_MINUTE = 57842
const DAY_HOUR = 57843
const YEAR_MONTH = 57844
const SQL_TSI_HOUR = 57845
const SQL_TSI_DAY = 57846
const SQL_TSI_WEEK = 57847
const SQL_TSI_MONTH = 57848
const SQL_TSI_QUARTER = 57849
const SQL_TSI_YEAR = 57850
const SQL_TSI_SECOND = 57851
const SQL_TSI_MINUTE = 57852
const RECURSIVE = 57853
const CONFIG = 57854
const DRAINER = 57855
const SOURCE = 57856
const STREAM = 57857
const HEADERS = 57858
const CONNECTOR = 57859
const CONNECTORS = 57860
const DAEMON = 57861
const PAUSE = 57862
const CANCEL = 57863
const TASK = 57864
const RESUME = 57865
const MATCH = 57866
const AGAINST = 57867
const BOOLEAN = 57868
const LANGUAGE = 57869
const WITH = 57870
const QUERY = 57871
const EXPANSION = 57872
const WITHOUT = 57873
const VALIDATION = 57874
const UPGRADE = 57875
const RETRY = 57876
const ADDDATE = 57877
const BIT_AND = 57878
const BIT_OR = 57879
const BIT_XOR = 57880
const CAST = 57881
const COUNT = 57882
const APPROX_COUNT = 57883
const APPROX_COUNT_DISTINCT = 57884
const SERIAL_EXTRACT = 57885
const APPROX_PERCENTILE = 57886
const CURDATE = 57887
const CURTIME = 57888
const DATE_ADD = 57889
const DATE_SUB = 57890
const EXTRACT = 57891
const GROUP_CONCAT = 57892
const MAX = 57893
const MID = 57894
const MIN = 57895
const NOW = 57896
const POSITION = 57897
const SESSION_USER = 57898
const STD = 57899
const STDDEV = 57900
const MEDIAN = 57901
const CLUSTER_CENTERS = 57902
const KMEANS = 57903
const STDDEV_POP = 57904
const STDDEV_SAMP = 57905
const SUBDATE = 57906
const SUBSTR = 57907
const SUBSTRING = 57908
const SUM = 57909
const SYSDATE = 57910
const SYSTEM_USER = 57911
const TRANSLATE = 57912
const TRIM = 57913
const VARIANCE = 57914
const VAR_POP = 57915
const VAR_SAMP = 57916
const AVG = 57917
const RANK = 57918
const ROW_NUMBER = 57919
const DENSE_RANK = 57920
const BIT_CAST = 57921
const BITMAP_BIT_POSITION = 57922
const BITMAP_BUCKET_NUMBER = 57923
const BITMAP_COUNT = 57924
const BITMAP_CONSTRUCT_AGG = 57925
const BITMAP_OR_AGG = 57926
const NEXTVAL = 57927
const SETVAL = 57928
const CURRVAL = 57929
const LASTVAL = 57930
const ARROW = 57931
const ROW = 57932
const OUTFILE = 57933
const HEADER = 57934
const MAX_FILE_SIZE = 57935
const FORCE_QUOTE = 57936
const PARALLEL = 57937
const STRICT = 57938
const UNUSED = 57939
const BINDINGS = 57940
const DO = 57941
const DECLARE = 57942
const LOOP = 57943
const WHILE = 57944
const LEAVE = 57945
const ITERATE = 57946
const UNTIL = 57947
const CALL = 57948
const PREV = 57949
const SLIDING = 57950
const FILL = 57951
const SPBEGIN = 57952
const BACKEND = 57953
const SERVERS = 57954
const HANDLER = 57955
const PERCENT = 57956
const SAMPLE = 57957
const MO_TS = 57958
const PITR = 57959
const CDC = 57960
const ROLLUP = 57961
const KILL = 57962
const BACKUP = 57963
const FILESYSTEM = 57964
const PARALLELISM = 57965
const RESTORE = 57966
const QUERY_RESULT = 57967

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"APPLY",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"ROLLUP",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12509

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 134,
	11, 778,
	22, 778,
	-2, 771,
	-1, 157,
	241, 1193,
	243, 1092,
	-2, 1139,
	-1, 184,
	43, 601,
	243, 601,
	270, 608,
	271, 608,
	469, 601,
	-2, 636,
	-1, 224,
	646, 1953,
	-2, 511,
	-1, 527,
	646, 2073,
	-2, 392,
	-1, 585,
	646, 2132,
	-2, 390,
	-1, 586,
	646, 2133,
	-2, 391,
	-1, 587,
	646, 2134,
	-2, 393,
	-1, 721,
	322, 176,
	441, 176,
	442, 176,
	-2, 1857,
	-1, 787,
	84, 1643,
	-2, 2009,
	-1, 788,
	84, 1661,
	-2, 1980,
	-1, 792,
	84, 1662,
	-2, 2008,
	-1, 825,
	84, 1570,
	-2, 2207,
	-1, 826,
	84, 1571,
	-2, 2206,
	-1, 827,
	84, 1572,
	-2, 2196,
	-1, 828,
	84, 2168,
	-2, 2189,
	-1, 829,
	84, 2169,
	-2, 2190,
	-1, 830,
	84, 2170,
	-2, 2198,
	-1, 831,
	84, 2171,
	-2, 2178,
	-1, 832,
	84, 2172,
	-2, 2187,
	-1, 833,
	84, 2173,
	-2, 2199,
	-1, 834,
	84, 2174,
	-2, 2200,
	-1, 835,
	84, 2175,
	-2, 2205,
	-1, 836,
	84, 2176,
	-2, 2210,
	-1, 837,
	84, 2177,
	-2, 2211,
	-1, 838,
	84, 1639,
	-2, 2047,
	-1, 839,
	84, 1640,
	-2, 1841,
	-1, 840,
	84, 1641,
	-2, 2056,
	-1, 841,
	84, 1642,
	-2, 1850,
	-1, 843,
	84, 1645,
	-2, 1858,
	-1, 844,
	84, 1646,
	-2, 2080,
	-1, 846,
	84, 1649,
	-2, 1877,
	-1, 848,
	84, 1651,
	-2, 2092,
	-1, 849,
	84, 1652,
	-2, 2091,
	-1, 850,
	84, 1653,
	-2, 1921,
	-1, 851,
	84, 1654,
	-2, 2004,
	-1, 854,
	84, 1657,
	-2, 2103,
	-1, 856,
	84, 1659,
	-2, 2106,
	-1, 857,
	84, 1660,
	-2, 2108,
	-1, 858,
	84, 1663,
	-2, 2116,
	-1, 859,
	84, 1664,
	-2, 1989,
	-1, 860,
	84, 1665,
	-2, 2034,
	-1, 861,
	84, 1666,
	-2, 1999,
	-1, 862,
	84, 1667,
	-2, 2024,
	-1, 873,
	84, 1548,
	-2, 2201,
	-1, 874,
	84, 1549,
	-2, 2202,
	-1, 875,
	84, 1550,
	-2, 2203,
	-1, 974,
	464, 636,
	465, 636,
	-2, 602,
	-1, 1024,
	126, 1841,
	137, 1841,
	157, 1841,
	-2, 1815,
	-1, 1141,
	22, 805,
	-2, 754,
	-1, 1247,
	11, 778,
	22, 778,
	-2, 1428,
	-1, 1329,
	22, 805,
	-2, 754,
	-1, 1675,
	84, 1714,
	-2, 2006,
	-1, 1676,
	84, 1715,
	-2, 2007,
	-1, 1845,
	85, 964,
	-2, 970,
	-1, 2293,
	109, 1131,
	153, 1131,
	192, 1131,
	195, 1131,
	283, 1131,
	-2, 1124,
	-1, 2451,
	11, 778,
	22, 778,
	-2, 905,
	-1, 2484,
	85, 1801,
	158, 1801,
	-2, 1991,
	-1, 2485,
	85, 1801,
	158, 1801,
	-2, 1990,
	-1, 2486,
	85, 1777,
	158, 1777,
	-2, 1977,
	-1, 2487,
	85, 1778,
	158, 1778,
	-2, 1982,
	-1, 2488,
	85, 1779,
	158, 1779,
	-2, 1909,
	-1, 2489,
	85, 1780,
	158, 1780,
	-2, 1903,
	-1, 2490,
	85, 1781,
	158, 1781,
	-2, 1831,
	-1, 2491,
	85, 1782,
	158, 1782,
	-2, 1979,
	-1, 2492,
	85, 1783,
	158, 1783,
	-2, 1907,
	-1, 2493,
	85, 1784,
	158, 1784,
	-2, 1902,
	-1, 2494,
	85, 1785,
	158, 1785,
	-2, 1891,
	-1, 2495,
	85, 1801,
	158, 1801,
	-2, 1892,
	-1, 2496,
	85, 1801,
	158, 1801,
	-2, 1893,
	-1, 2498,
	85, 1790,
	158, 1790,
	-2, 2024,
	-1, 2499,
	85, 1767,
	158, 1767,
	-2, 2009,
	-1, 2500,
	85, 1799,
	158, 1799,
	-2, 1980,
	-1, 2501,
	85, 1799,
	158, 1799,
	-2, 2008,
	-1, 2502,
	85, 1799,
	158, 1799,
	-2, 1859,
	-1, 2503,
	85, 1797,
	158, 1797,
	-2, 1999,
	-1, 2504,
	85, 1794,
	158, 1794,
	-2, 1882,
	-1, 2505,
	84, 1748,
	85, 1748,
	158, 1748,
	399, 1748,
	400, 1748,
	401, 1748,
	-2, 1830,
	-1, 2506,
	84, 1749,
	85, 1749,
	158, 1749,
	399, 1749,
	400, 1749,
	401, 1749,
	-2, 1832,
	-1, 2507,
	84, 1750,
	85, 1750,
	158, 1750,
	399, 1750,
	400, 1750,
	401, 1750,
	-2, 2052,
	-1, 2508,
	84, 1752,
	85, 1752,
	158, 1752,
	399, 1752,
	400, 1752,
	401, 1752,
	-2, 1981,
	-1, 2509,
	84, 1754,
	85, 1754,
	158, 1754,
	399, 1754,
	400, 1754,
	401, 1754,
	-2, 1962,
	-1, 2510,
	84, 1756,
	85, 1756,
	158, 1756,
	399, 1756,
	400, 1756,
	401, 1756,
	-2, 1908,
	-1, 2511,
	84, 1758,
	85, 1758,
	158, 1758,
	399, 1758,
	400, 1758,
	401, 1758,
	-2, 1887,
	-1, 2512,
	84, 1759,
	85, 1759,
	158, 1759,
	399, 1759,
	400, 1759,
	401, 1759,
	-2, 1888,
	-1, 2513,
	84, 1761,
	85, 1761,
	158, 1761,
	399, 1761,
	400, 1761,
	401, 1761,
	-2, 1829,
	-1, 2514,
	85, 1804,
	158, 1804,
	399, 1804,
	400, 1804,
	401, 1804,
	-2, 1864,
	-1, 2515,
	85, 1804,
	158, 1804,
	399, 1804,
	400, 1804,
	401, 1804,
	-2, 1878,
	-1, 2516,
	85, 1807,
	158, 1807,
	399, 1807,
	400, 1807,
	401, 1807,
	-2, 1860,
	-1, 2517,
	85, 1807,
	158, 1807,
	399, 1807,
	400, 1807,
	401, 1807,
	-2, 1924,
	-1, 2518,
	85, 1804,
	158, 1804,
	399, 1804,
	400, 1804,
	401, 1804,
	-2, 1946,
	-1, 2731,
	109, 1131,
	153, 1131,
	192, 1131,
	195, 1131,
	283, 1131,
	-2, 1125,
	-1, 2749,
	82, 698,
	158, 698,
	-2, 1309,
	-1, 3166,
	195, 1131,
	307, 1396,
	-2, 1368,
	-1, 3345,
	109, 1131,
	153, 1131,
	192, 1131,
	195, 1131,
	-2, 1249,
	-1, 3347,
	109, 1131,
	153, 1131,
	192, 1131,
	195, 1131,
	-2, 1249,
	-1, 3359,
	82, 698,
	158, 698,
	-2, 1309,
	-1, 3380,
	195, 1131,
	307, 1396,
	-2, 1369,
	-1, 3529,
	109, 1131,
	153, 1131,
	192, 1131,
	195, 1131,
	-2, 1250,
	-1, 3557,
	85, 1211,
	158, 1211,
	-2, 1131,
	-1, 3697,
	85, 1211,
	158, 1211,
	-2, 1131,
	-1, 3854,
	85, 1215,
	158, 1215,
	-2, 1131,
	-1, 3901,
	85, 1216,
	158, 1216,
	-2, 1131,
}

const yyPrivate = 57344

const yyLast = 51853

var yyAct = [...]int{
	754, 731, 3947, 756, 3921, 2779, 213, 3940, 3858, 1931,
	1655, 3461, 3365, 3757, 3865, 3864, 3857, 3697, 3738, 3152,
	3783, 740, 3185, 3814, 3585, 3257, 3394, 3675, 2773, 2573,
	733, 3642, 3258, 3732, 1282, 3696, 3761, 3517, 3516, 3514,
	2691, 3615, 784, 1424, 1023, 1651, 622, 1142, 3666, 2776,
	3465, 3327, 3739, 3741, 37, 3456, 1568, 2782, 1878, 1491,
	640, 3332, 646, 646, 1702, 1430, 3161, 3526, 646, 663,
	672, 1658, 1136, 672, 729, 2752, 2340, 3381, 3123, 3496,
	3538, 3531, 3109, 3255, 3083, 2888, 2482, 3348, 2027, 2024,
	3317, 2889, 2041, 65, 3112, 1716, 2887, 2802, 2868, 3181,
	3170, 3350, 3163, 1990, 2884, 2064, 2445, 3297, 2139, 198,
	2608, 2954, 3243, 684, 2480, 2343, 1580, 2097, 3223, 2720,
	680, 2914, 3090, 669, 3094, 1484, 3086, 1891, 3132, 3088,
	2304, 723, 3169, 3084, 133, 3081, 1132, 2272, 2732, 2248,
	2122, 3058, 2247, 2552, 2105, 1564, 2135, 2927, 2106, 1808,
	2020, 3085, 3001, 36, 2098, 2070, 2534, 2937, 2446, 2134,
	947, 728, 1994, 2431, 1991, 2709, 1569, 1393, 2426, 1360,
	2784, 2804, 2704, 2341, 1572, 1921, 2744, 2303, 2293, 1649,
	209, 8, 1017, 1557, 208, 7, 6, 1433, 1854, 622,
	2478, 1080, 2136, 732, 1531, 639, 1600, 1579, 1464, 2336,
	1469, 722, 2284, 1500, 2146, 2641, 1709, 1413, 1890, 1689,
	2169, 741, 1640, 213, 2104, 213, 2101, 1071, 1072, 27,
	1155, 1583, 1538, 2086, 646, 2060, 1648, 677, 621, 983,
	15, 1850, 1016, 1468, 730, 2453, 1853, 2427, 1522, 1829,
	655, 16, 1409, 14, 1466, 33, 877, 658, 724, 686,
	946, 687, 199, 108, 1425, 1717, 24, 1654, 195, 17,
	2640, 1530, 1396, 10, 944, 23, 929, 2373, 671, 191,
	969, 683, 1327, 1283, 879, 2143, 3748, 923, 937, 880,
	938, 1215, 1216, 1217, 1214, 953, 1032, 3660, 668, 1215,
	1216, 1217, 1214, 2676, 2676, 2676, 681, 1068, 2455, 667,
	1215, 1216, 1217, 1214, 3362, 3139, 2971, 2970, 2153, 3489,
	664, 1137, 666, 642, 665, 3335, 3250, 1138, 918, 2596,
	2540, 2538, 1067, 2537, 1069, 2535, 1821, 1029, 1545, 1541,
	1063, 1064, 932, 197, 928, 651, 641, 1050, 2246, 1346,
	3722, 675, 899, 724, 1064, 897, 1031, 1003, 1592, 1064,
	3068, 2252, 1822, 2256, 1349, 3053, 950, 951, 3051, 3048,
	3050, 3932, 1447, 1815, 1342, 1543, 3454, 993, 2950, 1591,
	2948, 1137, 2075, 2668, 2666, 3727, 647, 3622, 8, 3616,
	3457, 3256, 7, 2119, 1062, 1215, 1216, 1217, 1214, 3743,
	909, 1215, 1216, 1217, 1214, 2100, 1277, 878, 3028, 2092,
	2381, 196, 3682, 889, 196, 2294, 196, 196, 196, 1051,
	1213, 3497, 1177, 3501, 3839, 196, 2670, 196, 196, 2582,
	2590, 3349, 2140, 2738, 1587, 1598, 1355, 196, 61, 187,
	158, 196, 61, 187, 158, 2295, 1578, 3647, 3794, 1833,
	1508, 898, 1354, 1352, 896, 1830, 3683, 899, 897, 1033,
	995, 3026, 132, 994, 1584, 1595, 2973, 1385, 1443, 682,
	1368, 1444, 934, 2962, 927, 132, 1027, 2151, 2882, 2288,
	894, 1028, 2736, 931, 930, 192, 2472, 1586, 1597, 192,
	3649, 1045, 1040, 1035, 1039, 1043, 192, 1356, 192, 192,
	912, 979, 998, 996, 919, 997, 1824, 2693, 192, 954,
	1212, 2459, 192, 1192, 2458, 2037, 1193, 2460, 1621, 1048,
	2921, 2922, 890, 1038, 926, 2004, 2005, 2473, 196, 61,
	187, 158, 2739, 1835, 1836, 868, 956, 867, 869, 870,
	2920, 871, 872, 936, 1195, 2694, 2003, 1434, 925, 2553,
	3052, 3049, 924, 1470, 992, 1472, 3478, 2706, 911, 1446,
	1185, 1205, 1421, 1187, 917, 1429, 1905, 2707, 1657, 1428,
	1431, 1432, 1431, 1432, 1046, 1210, 1026, 196, 61, 187,
	158, 1025, 3746, 1049, 3836, 3745, 915, 196, 61, 187,
	158, 1188, 1153, 1004, 3156, 1641, 3154, 3744, 1645, 192,
	3889, 978, 976, 2235, 1367, 1036, 3832, 3868, 3869, 3746,
	3827, 3745, 3826, 3925, 3926, 1000, 2705, 3744, 3825, 3730,
	1544, 1542, 1644, 975, 935, 2955, 1190, 3259, 3816, 1047,
	3819, 3816, 2956, 2671, 2957, 949, 1158, 3619, 1158, 3259,
	2155, 1609, 3733, 3734, 3735, 3736, 955, 988, 192, 2577,
	916, 1150, 1147, 2823, 646, 646, 2021, 3754, 192, 3103,
	2011, 157, 1630, 194, 3272, 646, 1146, 3841, 3842, 1037,
	984, 3318, 1636, 1181, 2147, 2712, 3105, 3506, 3325, 1002,
	3837, 3838, 3095, 184, 672, 672, 2695, 646, 2083, 2991,
	1191, 1661, 3651, 3652, 2696, 2416, 3477, 2283, 3406, 1183,
	1551, 1550, 935, 2587, 3479, 183, 985, 989, 1646, 3834,
	1180, 1186, 1189, 1208, 1209, 3100, 3101, 1074, 2989, 1207,
	2379, 3455, 1445, 1145, 669, 669, 972, 933, 970, 974,
	992, 3102, 1643, 2152, 971, 968, 967, 1182, 973, 958,
	959, 957, 960, 961, 962, 963, 1044, 990, 2669, 991,
	1255, 1457, 2949, 2419, 2420, 3099, 1001, 1369, 3110, 3184,
	986, 987, 1419, 1345, 3867, 1032, 922, 1194, 2874, 2035,
	2036, 2418, 3301, 3747, 3656, 1203, 1204, 3503, 3158, 892,
	2424, 2130, 1041, 2689, 3659, 1042, 1202, 638, 3421, 3896,
	3275, 2995, 2675, 3121, 1139, 3133, 1146, 982, 3776, 2475,
	2015, 1138, 1138, 981, 3771, 1172, 1029, 3612, 1138, 2141,
	1660, 1659, 3182, 3183, 1184, 3418, 2141, 893, 977, 2141,
	3634, 2690, 3635, 1593, 2972, 1031, 1286, 2253, 1823, 1667,
	1670, 1671, 2969, 3687, 1160, 1159, 1160, 1159, 1032, 2870,
	1668, 2411, 2745, 2174, 2142, 674, 1064, 673, 2880, 1642,
	1064, 1064, 2290, 1287, 1064, 718, 3411, 3681, 720, 1064,
	1064, 1249, 3059, 719, 670, 3679, 910, 908, 1138, 3762,
	3097, 3111, 2154, 3778, 3366, 3840, 3637, 3784, 3153, 1029,
	2158, 2160, 2161, 2268, 2778, 1052, 1034, 3646, 3373, 668,
	668, 2774, 2775, 3310, 2778, 999, 980, 1408, 1031, 2536,
	667, 667, 952, 948, 1348, 1546, 1350, 3636, 3187, 3308,
	3072, 664, 664, 666, 666, 665, 665, 1149, 1151, 2414,
	3753, 3650, 1365, 640, 3422, 2346, 62, 3576, 3958, 878,
	2391, 2852, 2390, 3468, 1325, 1141, 1140, 1330, 1161, 1197,
	1169, 1028, 1198, 159, 3943, 2667, 159, 3502, 159, 159,
	159, 1152, 1165, 1166, 2591, 670, 947, 159, 895, 159,
	159, 3309, 1831, 1171, 1256, 1631, 193, 1134, 1632, 159,
	1200, 1163, 3571, 159, 1431, 1432, 1431, 1432, 2718, 2359,
	1251, 1252, 1253, 1254, 1825, 2339, 2362, 1480, 1420, 2711,
	1479, 3106, 1406, 3688, 2022, 3111, 3096, 3586, 3587, 3588,
	3592, 3590, 3591, 3589, 670, 2992, 2475, 3159, 3653, 646,
	3565, 1170, 1459, 1405, 670, 1404, 646, 62, 3785, 622,
	622, 3833, 1427, 2412, 2413, 3680, 3634, 3856, 3635, 622,
	622, 1423, 1422, 1495, 1495, 3701, 646, 3667, 937, 2824,
	938, 2825, 2826, 2361, 3629, 3162, 2715, 2716, 3507, 1133,
	2356, 3047, 1196, 2382, 3351, 2012, 2339, 672, 1523, 640,
	159, 2714, 3813, 2345, 1534, 1534, 62, 1637, 2347, 1246,
	2916, 2918, 3098, 1669, 3452, 213, 62, 1361, 1493, 1493,
	1298, 1299, 3637, 3944, 622, 1502, 682, 1467, 2360, 1362,
	1363, 1201, 1177, 1497, 3178, 1372, 1373, 1374, 1375, 1376,
	3186, 1378, 3262, 3063, 3311, 2583, 2464, 1384, 2377, 159,
	993, 3182, 3183, 3636, 2144, 2010, 1199, 1988, 1366, 159,
	1377, 2349, 2348, 2681, 2159, 2724, 2727, 2728, 2729, 2725,
	2726, 3630, 3214, 2994, 1383, 3740, 1576, 1827, 1382, 1458,
	3578, 1581, 1381, 1380, 1005, 676, 1552, 2821, 1590, 1331,
	2932, 2933, 2156, 2157, 3119, 3298, 1489, 1490, 3179, 941,
	942, 943, 1329, 3003, 3002, 3700, 1390, 939, 2267, 1055,
	1060, 1061, 1838, 1619, 2686, 2170, 904, 2263, 2262, 1176,
	1415, 1416, 2853, 2855, 2856, 2857, 2854, 1495, 2261, 1495,
	1146, 1371, 1359, 995, 1839, 2014, 994, 1585, 1599, 1614,
	1615, 1474, 1476, 3487, 1596, 3065, 3855, 3572, 3573, 993,
	2260, 1487, 1488, 2843, 2844, 3941, 3942, 669, 1357, 1358,
	1392, 1837, 900, 1399, 3959, 2403, 1370, 903, 901, 1629,
	1407, 906, 905, 3539, 3823, 2750, 1032, 1417, 1448, 1449,
	2917, 1401, 1213, 1032, 2275, 1436, 1437, 1656, 1439, 1440,
	2063, 1441, 1435, 2350, 1524, 1438, 3138, 1495, 1566, 1567,
	2355, 3567, 1143, 3954, 2353, 3566, 1547, 2276, 2277, 882,
	883, 884, 885, 1478, 1715, 1555, 2443, 1558, 1559, 3220,
	3949, 1589, 2475, 1401, 3120, 3966, 1638, 3216, 1764, 1560,
	1561, 1618, 995, 936, 1143, 994, 2204, 1503, 1571, 2203,
	1617, 1575, 1703, 1452, 1453, 1177, 1455, 1456, 1574, 1460,
	1461, 1462, 651, 1677, 1678, 1679, 1680, 1681, 1682, 1683,
	1684, 1685, 1686, 1687, 1688, 1521, 1535, 1536, 1515, 1700,
	1701, 2555, 2751, 3263, 3314, 1653, 2149, 3630, 2842, 2286,
	1639, 3631, 1510, 1511, 1512, 1513, 1514, 2682, 1516, 1517,
	1518, 1519, 1520, 3950, 1146, 1006, 1526, 1527, 1528, 1529,
	1826, 1828, 3180, 1175, 1057, 1058, 1059, 1215, 1216, 1217,
	1214, 1634, 1213, 1842, 1843, 1749, 2751, 1773, 1523, 1806,
	1400, 2444, 668, 1851, 1495, 1856, 1857, 3274, 1859, 1459,
	646, 2061, 1672, 667, 1627, 646, 993, 3938, 1495, 1754,
	1755, 1756, 947, 2444, 664, 1879, 666, 1602, 665, 1213,
	1608, 1817, 1770, 3024, 1495, 1771, 1624, 2183, 1623, 887,
	1459, 3951, 725, 3220, 2240, 663, 1607, 1809, 1628, 1610,
	1174, 1626, 1784, 1785, 1625, 1647, 1763, 2582, 1622, 1652,
	2376, 1326, 3903, 3191, 1650, 1904, 3876, 1215, 1216, 1217,
	1214, 1805, 3189, 3870, 1911, 1911, 2285, 1459, 3057, 1459,
	1459, 3055, 1691, 646, 646, 2444, 1978, 1851, 1982, 3852,
	3904, 1495, 1985, 1986, 2935, 1746, 1747, 2001, 1750, 995,
	3804, 1177, 994, 2698, 2672, 3779, 1765, 1698, 1699, 2572,
	2560, 2140, 622, 2182, 1495, 1215, 1216, 1217, 1214, 1772,
	1858, 1774, 2002, 1775, 1776, 1777, 2332, 1175, 1410, 1414,
	1414, 1414, 3767, 3720, 1908, 3904, 1860, 2245, 3719, 3877,
	2239, 646, 1851, 1495, 2238, 2046, 3663, 646, 646, 646,
	680, 680, 3714, 1410, 1410, 2211, 1812, 2056, 2057, 2058,
	2059, 2180, 3853, 2616, 2065, 3713, 1933, 3362, 1847, 1848,
	1849, 213, 2131, 3663, 213, 213, 2038, 213, 2149, 2033,
	1862, 1863, 1864, 1865, 1980, 1987, 1778, 1391, 1706, 1481,
	2939, 1124, 1120, 1121, 1122, 1123, 3712, 2621, 2753, 2620,
	2619, 2617, 2585, 1807, 1914, 3768, 3721, 2346, 2349, 2030,
	2031, 2308, 3602, 2584, 2576, 1813, 3711, 1764, 1764, 2108,
	2326, 3691, 2199, 2184, 2016, 3663, 2129, 3690, 1764, 1764,
	2007, 1892, 2009, 1894, 1895, 2124, 1846, 3324, 3663, 2048,
	2049, 2050, 2068, 2028, 2029, 1913, 1737, 1901, 2054, 882,
	883, 884, 885, 1065, 1066, 1604, 1897, 2045, 1070, 1263,
	2023, 1855, 1882, 1883, 1875, 1880, 1879, 2618, 1902, 3663,
	1495, 2138, 1876, 2118, 1585, 1871, 1162, 1887, 1130, 3662,
	2074, 3427, 1125, 2077, 2078, 1893, 2080, 1915, 1916, 3663,
	1751, 1885, 3425, 2110, 2149, 2319, 669, 1246, 1888, 1889,
	2149, 3375, 3341, 2032, 1230, 3143, 2986, 2346, 2349, 3290,
	1032, 1910, 1912, 1032, 3772, 1898, 1899, 3960, 1979, 3286,
	3199, 1032, 2911, 2647, 2132, 2639, 3929, 1984, 1506, 902,
	2598, 2374, 1989, 2580, 2568, 1909, 3540, 2006, 2562, 2008,
	2350, 2557, 2549, 2114, 2017, 2345, 2339, 2344, 1855, 2342,
	2347, 1029, 3663, 3749, 2475, 2547, 1753, 1752, 3773, 2545,
	2543, 2334, 1029, 2307, 2241, 2103, 3354, 3661, 3626, 2044,
	1031, 1753, 1752, 2043, 3376, 3342, 2103, 2051, 2052, 2040,
	3541, 1031, 3291, 2535, 1215, 1216, 1217, 1214, 1483, 2218,
	2071, 2069, 3287, 3200, 2217, 2444, 1213, 2202, 1213, 887,
	1650, 2167, 2168, 1213, 2348, 3248, 2308, 2558, 2622, 2623,
	3355, 2563, 1733, 2193, 2558, 2550, 1032, 2088, 2192, 1730,
	3134, 3352, 1411, 1732, 1729, 1731, 1735, 1736, 2548, 2120,
	2318, 1734, 2544, 2544, 1397, 2191, 2308, 2240, 1398, 2163,
	2350, 2109, 2047, 2117, 2115, 2345, 2339, 2344, 2148, 2342,
	2347, 1611, 3569, 2250, 2251, 1485, 2254, 1029, 3568, 2257,
	3554, 668, 1213, 2128, 3510, 3353, 1486, 1213, 1442, 1790,
	1213, 3334, 667, 907, 3221, 723, 1031, 3212, 646, 646,
	646, 2133, 3206, 664, 1783, 666, 1213, 665, 3201, 2127,
	1482, 1213, 2605, 646, 646, 646, 646, 757, 767, 3135,
	3114, 2877, 2876, 2722, 2348, 2126, 2305, 758, 1213, 759,
	763, 766, 762, 760, 761, 2162, 2677, 2311, 1459, 2595,
	2561, 2149, 2466, 2113, 1612, 2072, 2212, 2213, 2112, 2215,
	2111, 1841, 1387, 2164, 1710, 1691, 2222, 1386, 1148, 2529,
	2171, 1412, 2941, 3136, 1459, 2176, 3824, 1229, 1228, 1238,
	1239, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1230, 2165,
	2166, 2368, 764, 1710, 1214, 2177, 2206, 1539, 3581, 2072,
	1397, 3580, 1410, 2958, 1398, 1740, 1741, 1742, 1743, 1744,
	1745, 1738, 1739, 1217, 1214, 2813, 1414, 1233, 1234, 1235,
	1236, 1237, 1230, 2811, 765, 2790, 2788, 3560, 1414, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1230, 3934, 2375, 2323,
	3511, 3512, 1265, 2325, 3933, 2327, 1697, 3880, 646, 1911,
	1215, 1216, 1217, 1214, 3957, 1264, 3851, 2448, 2448, 2001,
	2448, 3251, 1694, 1696, 1693, 3850, 1695, 2234, 2236, 2237,
	2242, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1219, 622,
	622, 1215, 1216, 1217, 1214, 1768, 3774, 1146, 1215, 1216,
	1217, 1214, 2539, 1495, 646, 2692, 2660, 3249, 2661, 3504,
	1769, 2328, 1215, 1216, 1217, 1214, 2269, 3716, 646, 3704,
	1539, 2338, 3694, 3322, 1146, 2519, 640, 1286, 3956, 3684,
	2287, 3617, 1534, 3543, 2001, 2864, 3542, 2524, 2862, 2526,
	3367, 3017, 2860, 213, 3356, 3321, 2337, 3202, 2470, 1215,
	1216, 1217, 1214, 2849, 1287, 2315, 2331, 3104, 2607, 2982,
	2321, 2953, 1032, 2322, 2574, 2575, 2312, 2461, 3505, 2462,
	2952, 2847, 2452, 2846, 2450, 2845, 2454, 1215, 1216, 1217,
	1214, 2483, 3323, 2565, 2837, 1999, 2324, 2831, 2467, 2468,
	1215, 1216, 1217, 1214, 2863, 2351, 2352, 2861, 2357, 2531,
	2578, 2859, 3016, 1029, 2138, 1215, 1216, 1217, 1214, 1218,
	2477, 1495, 2848, 1495, 1540, 1495, 3861, 1248, 2830, 2195,
	1146, 2829, 1031, 2828, 2673, 2551, 1258, 2721, 2597, 1215,
	1216, 1217, 1214, 2463, 2320, 2244, 2091, 2523, 2090, 1215,
	1216, 1217, 1214, 1215, 1216, 1217, 1214, 645, 645, 2089,
	2085, 1266, 2530, 653, 1495, 2625, 2425, 2421, 2588, 1228,
	1238, 1239, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1230,
	2632, 1474, 1476, 2456, 2084, 1495, 2380, 2592, 2039, 2383,
	2384, 2385, 2386, 2387, 2388, 2389, 1834, 2194, 2392, 2393,
	2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 1493,
	2404, 2405, 2406, 2407, 2408, 2474, 2409, 2471, 1832, 1605,
	1344, 3328, 3760, 2624, 1215, 1216, 1217, 1214, 3333, 3089,
	1493, 2520, 1128, 2679, 2680, 3483, 2522, 2683, 3953, 718,
	2636, 2637, 720, 3952, 2633, 3462, 2609, 719, 2609, 1215,
	1216, 1217, 1214, 3654, 3655, 1146, 3927, 3895, 3471, 1146,
	3894, 2634, 1215, 1216, 1217, 1214, 1495, 3891, 3830, 1459,
	3829, 3643, 2613, 3811, 3756, 1982, 3515, 2594, 3737, 3728,
	3708, 3005, 3703, 2749, 2589, 1215, 1216, 1217, 1214, 2755,
	1127, 3702, 3658, 3470, 3645, 2570, 3644, 3618, 3791, 3415,
	2586, 3562, 3522, 1402, 1477, 2579, 2581, 2765, 3508, 2664,
	3490, 3488, 2699, 3485, 2603, 3482, 2483, 1146, 3481, 653,
	1215, 1216, 1217, 1214, 3460, 2787, 1215, 1216, 1217, 1214,
	3458, 2737, 1146, 1146, 1146, 1911, 3787, 3278, 1146, 3435,
	2797, 2798, 2799, 2800, 1146, 2807, 3432, 2808, 2809, 3429,
	2810, 2869, 2812, 3320, 2615, 2733, 2599, 2600, 1215, 1216,
	1217, 1214, 3319, 2807, 1215, 1216, 1217, 1214, 2746, 3316,
	1032, 2734, 3306, 3299, 3283, 2448, 3281, 3209, 1650, 3208,
	3203, 2766, 3197, 3196, 3115, 2602, 3076, 2631, 3020, 2865,
	2793, 2794, 3019, 2780, 1933, 2796, 2719, 2768, 3075, 622,
	3071, 2803, 3069, 3018, 2756, 1982, 3067, 1456, 3639, 1146,
	2001, 2001, 2001, 2001, 2001, 1215, 1216, 1217, 1214, 1215,
	1216, 1217, 1214, 3064, 1146, 2001, 1414, 2701, 2448, 2703,
	1215, 1216, 1217, 1214, 3062, 2871, 2181, 2249, 2785, 2996,
	2993, 2951, 2785, 2925, 2858, 1495, 1533, 1533, 2658, 2700,
	2781, 2187, 2850, 3638, 2717, 2740, 646, 646, 2642, 2643,
	2748, 2840, 2838, 2834, 2648, 2792, 2890, 8, 2833, 2832,
	2687, 7, 2657, 2754, 2685, 1215, 1216, 1217, 1214, 2678,
	2674, 2890, 1215, 1216, 1217, 1214, 2767, 2571, 2770, 2264,
	2259, 2656, 2764, 2786, 2783, 824, 823, 2789, 2655, 1215,
	1216, 1217, 1214, 2795, 2258, 2255, 2094, 2087, 2654, 2907,
	1840, 2179, 213, 1215, 1216, 1217, 1214, 213, 1215, 1216,
	1217, 1214, 1820, 1855, 2653, 1215, 1216, 1217, 1214, 3627,
	1819, 2708, 2652, 2839, 2827, 1215, 1216, 1217, 1214, 1764,
	1606, 1764, 2651, 1509, 2968, 1395, 1215, 1216, 1217, 1214,
	2936, 1215, 1216, 1217, 1214, 2757, 1353, 2981, 1351, 1215,
	1216, 1217, 1214, 1495, 2762, 2763, 2988, 2878, 2872, 1215,
	1216, 1217, 1214, 1294, 2891, 2892, 2893, 2894, 2895, 1290,
	1289, 2875, 1131, 891, 3484, 2905, 2910, 2908, 1215, 1216,
	1217, 1214, 2963, 2909, 3469, 3347, 3346, 2926, 3345, 3313,
	3295, 3293, 3292, 2974, 2923, 3289, 1662, 1663, 1664, 1665,
	1666, 1238, 1239, 1231, 1232, 1233, 1234, 1235, 1236, 1237,
	1230, 2942, 3288, 2819, 2820, 1809, 2946, 1566, 1567, 3282,
	2967, 1032, 3280, 2919, 196, 3264, 187, 158, 2835, 2836,
	3254, 3253, 1032, 3239, 3238, 3144, 3079, 3054, 1707, 1559,
	3022, 3015, 1711, 1712, 1713, 1714, 3010, 2965, 3012, 1560,
	1561, 1748, 1571, 3066, 2873, 1575, 2940, 2975, 2943, 1758,
	2944, 3070, 1574, 2650, 3007, 3073, 3074, 2985, 2990, 3006,
	3000, 2934, 2697, 1146, 2649, 2966, 2961, 2964, 2546, 3092,
	2959, 2542, 2541, 2978, 2223, 2977, 2216, 2646, 2976, 3108,
	1215, 1216, 1217, 1214, 646, 192, 196, 2210, 2645, 2984,
	2209, 1215, 1216, 1217, 1214, 2208, 3124, 1146, 2207, 2997,
	646, 1810, 1146, 1146, 1215, 1216, 1217, 1214, 2205, 2201,
	2200, 2001, 2305, 2644, 3142, 1215, 1216, 1217, 1214, 645,
	1135, 2198, 2189, 2998, 3004, 2186, 3011, 1881, 3056, 2185,
	1144, 2093, 1803, 2368, 1802, 3013, 3014, 1801, 3118, 1767,
	1215, 1216, 1217, 1214, 1766, 3168, 3078, 3171, 1896, 3171,
	3171, 1757, 1168, 3127, 1146, 1507, 1505, 192, 3131, 2638,
	3008, 3009, 3879, 1284, 1903, 3786, 3723, 1906, 1907, 3710,
	3705, 1554, 3192, 2733, 1884, 3596, 3061, 3060, 2601, 3579,
	1495, 1495, 3575, 3188, 3151, 3553, 1215, 1216, 1217, 1214,
	1032, 2628, 1032, 3190, 3146, 3537, 3077, 1032, 3445, 1900,
	3155, 3157, 1229, 1228, 1238, 1239, 1231, 1232, 1233, 1234,
	1235, 1236, 1237, 1230, 3140, 3443, 3413, 3412, 1215, 1216,
	1217, 1214, 3409, 1032, 2604, 1493, 1493, 646, 3408, 3166,
	3117, 1029, 3126, 3374, 3092, 769, 134, 3129, 3130, 3193,
	3194, 134, 3141, 1459, 3137, 3167, 1982, 1982, 3371, 3369,
	1031, 1215, 1216, 1217, 1214, 3176, 3150, 1810, 2338, 3029,
	3030, 1705, 1810, 1810, 3336, 3031, 3032, 3033, 3034, 1565,
	3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044,
	1556, 3172, 3173, 2337, 1570, 1573, 1562, 3177, 1215, 1216,
	1217, 1214, 1394, 2866, 2791, 2742, 1146, 2741, 2735, 2702,
	2625, 652, 2659, 2556, 134, 2465, 2410, 2306, 2278, 3252,
	2243, 1692, 2073, 192, 2053, 2076, 1845, 1816, 2079, 3198,
	3174, 2081, 1779, 1780, 1781, 1782, 1635, 1588, 1786, 1787,
	1788, 1789, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798,
	1799, 1800, 3695, 1563, 1343, 1328, 1324, 1323, 1322, 1321,
	3217, 3218, 1320, 2483, 1319, 646, 3205, 1318, 1317, 3211,
	1316, 3207, 3204, 3210, 1315, 1314, 1313, 1312, 1311, 1310,
	3215, 1309, 3228, 1308, 1307, 1306, 2123, 2428, 2434, 2438,
	2439, 2440, 2435, 2442, 2436, 2441, 1305, 3149, 2437, 1304,
	1303, 1302, 3235, 3236, 3237, 3232, 1229, 1228, 1238, 1239,
	1231, 1232, 1233, 1234, 1235, 1236, 1237, 1230, 1301, 1300,
	3241, 1297, 1296, 3247, 2434, 2438, 2439, 2440, 2435, 2442,
	2436, 2441, 1295, 1293, 2437, 2065, 3303, 1292, 1030, 3305,
	3909, 1291, 1288, 134, 2172, 1281, 1280, 1278, 1277, 1276,
	3265, 1275, 1274, 1273, 1272, 1271, 1270, 1269, 134, 3267,
	134, 3266, 2609, 3284, 3271, 1268, 1267, 3270, 1229, 1228,
	1238, 1239, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1230,
	1262, 646, 1982, 3307, 1454, 1261, 3276, 1260, 1259, 2173,
	1179, 1465, 3340, 2178, 1129, 3224, 3225, 3803, 3801, 3799,
	3797, 3410, 2310, 2292, 1167, 3312, 3907, 3866, 2448, 2001,
	3359, 1501, 3315, 3227, 2723, 2476, 2096, 1178, 2898, 2906,
	2902, 2900, 3230, 3296, 3229, 2903, 2901, 3447, 2904, 2897,
	2439, 2440, 2899, 3377, 2190, 3448, 1146, 2896, 3300, 118,
	3302, 64, 2197, 63, 1032, 3168, 3558, 2569, 2559, 1146,
	1388, 1032, 1873, 1874, 1868, 1869, 1870, 3113, 2378, 3164,
	1146, 3165, 3424, 2980, 2214, 3420, 1495, 3268, 3269, 2219,
	2220, 2221, 3242, 3329, 2224, 2225, 2226, 2227, 2228, 2229,
	2230, 2231, 2232, 2233, 3446, 646, 3331, 1982, 3361, 2815,
	1971, 1146, 1548, 3378, 2554, 2593, 2816, 2817, 2818, 3368,
	1601, 3370, 2574, 2575, 2265, 648, 3417, 649, 1582, 650,
	2055, 1493, 3358, 3407, 3357, 1173, 3087, 2803, 3400, 3080,
	213, 2769, 3364, 2743, 2330, 3426, 2301, 1877, 1844, 2313,
	2314, 1753, 1752, 1146, 3918, 3436, 3707, 3439, 3551, 2316,
	2317, 1339, 1340, 3449, 3195, 3414, 1337, 1338, 2890, 3419,
	3416, 1335, 1336, 1333, 1334, 2422, 2417, 3423, 1983, 1451,
	1450, 1206, 3234, 2928, 2266, 2125, 3431, 3433, 3430, 3428,
	1403, 1379, 3486, 1426, 3886, 3884, 3434, 3437, 3844, 3821,
	3441, 3493, 3440, 3438, 3820, 1146, 3818, 3763, 3467, 3724,
	2890, 3610, 1229, 1228, 1238, 1239, 1231, 1232, 1233, 1234,
	1235, 1236, 1237, 1230, 3609, 3548, 3459, 1146, 1495, 1495,
	3285, 3261, 3260, 3124, 3245, 2363, 2333, 1603, 3463, 3491,
	3492, 3464, 3244, 2938, 1401, 3530, 3304, 3530, 2983, 3453,
	3911, 3910, 3451, 2684, 2294, 2188, 1347, 1164, 3910, 3911,
	1146, 3547, 1146, 3577, 3524, 3525, 3240, 1143, 200, 3,
	3550, 1418, 3552, 1493, 1703, 72, 3337, 3338, 3339, 1495,
	2, 3930, 3343, 3344, 3518, 3500, 3931, 3520, 3495, 3499,
	3527, 3498, 3480, 3521, 1, 2665, 1814, 646, 1341, 1146,
	1146, 886, 3509, 1146, 1146, 3535, 881, 1471, 3534, 2457,
	1810, 3523, 1810, 882, 883, 884, 885, 1656, 1143, 1656,
	2034, 2521, 2110, 1499, 1703, 3361, 3593, 1818, 3598, 1032,
	2528, 1810, 1810, 3556, 1879, 3546, 3607, 3583, 3584, 3555,
	888, 3594, 3595, 3563, 2912, 3613, 3614, 3407, 3559, 3561,
	2913, 3233, 3400, 2915, 2688, 2145, 3518, 3518, 1495, 2879,
	3518, 3518, 2415, 2282, 1533, 3107, 1389, 940, 1759, 1616,
	1054, 1157, 1613, 3604, 1156, 1154, 1708, 771, 3640, 2099,
	2867, 2841, 3606, 3599, 3917, 1861, 3603, 3946, 3633, 3878,
	1866, 3920, 3605, 1633, 755, 3812, 3729, 3882, 3731, 3623,
	2150, 1211, 2960, 1493, 965, 812, 782, 1279, 1594, 3027,
	3620, 3025, 1056, 781, 2564, 3326, 2567, 3625, 2713, 3628,
	3632, 3611, 3624, 947, 2931, 134, 134, 1030, 3676, 3670,
	3678, 3472, 1053, 3473, 966, 2082, 3726, 3621, 1549, 1553,
	2329, 3686, 3782, 3557, 1146, 3160, 2777, 1577, 3777, 3372,
	3476, 3657, 3474, 3475, 3693, 688, 2013, 3699, 1917, 1918,
	620, 1014, 3597, 2095, 689, 3664, 3671, 2309, 3835, 3467,
	3709, 920, 2291, 3668, 3673, 3672, 921, 913, 2731, 2730,
	2606, 1673, 3685, 2612, 1220, 1690, 3045, 1146, 3689, 3046,
	2626, 2627, 1495, 1257, 727, 2175, 2710, 3395, 2629, 2630,
	1247, 1656, 3549, 2924, 71, 70, 69, 68, 221, 773,
	3706, 220, 1032, 3641, 2635, 3513, 2042, 3808, 3922, 753,
	752, 751, 2042, 2042, 2042, 3715, 750, 749, 748, 2433,
	2432, 2430, 2429, 1996, 1995, 2062, 3122, 1493, 3752, 2806,
	2801, 3742, 1662, 1810, 3518, 1922, 1920, 1463, 2358, 2365,
	1919, 3717, 3725, 3863, 1146, 3792, 1229, 1228, 1238, 1239,
	1231, 1232, 1233, 1234, 1235, 1236, 1237, 1230, 3793, 3764,
	3574, 2851, 3466, 1867, 2354, 1939, 2758, 3750, 2822, 3600,
	1936, 2761, 1935, 3601, 3759, 2814, 3570, 3564, 1967, 3674,
	3755, 3758, 3529, 3379, 3380, 3386, 2300, 3781, 1079, 1075,
	3766, 1146, 1077, 1078, 1076, 2614, 3213, 2335, 3082, 1495,
	2274, 3518, 3806, 2273, 3809, 3796, 3798, 3800, 3802, 3775,
	2271, 2759, 2760, 3780, 2270, 1364, 3810, 3751, 3831, 3494,
	2481, 3789, 2479, 1126, 3226, 3222, 2107, 2121, 2979, 3795,
	1997, 1993, 1992, 2881, 2423, 3648, 1332, 1872, 914, 2289,
	41, 115, 105, 3815, 1493, 3817, 1495, 175, 3518, 3676,
	56, 174, 55, 113, 172, 54, 100, 99, 3805, 112,
	3828, 170, 53, 205, 204, 3854, 207, 206, 203, 2532,
	3843, 3862, 3845, 3023, 2533, 202, 3847, 1537, 201, 3822,
	3848, 3849, 3533, 876, 44, 43, 176, 42, 106, 57,
	40, 1493, 39, 38, 34, 13, 12, 35, 22, 21,
	1620, 20, 3871, 26, 3872, 3846, 3873, 32, 3874, 31,
	3885, 3875, 3887, 3888, 127, 126, 30, 125, 124, 3883,
	3881, 123, 122, 3890, 121, 1146, 3742, 1229, 1228, 1238,
	1239, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1230, 120,
	29, 19, 48, 47, 3699, 3899, 46, 9, 116, 111,
	3718, 109, 3901, 3902, 3900, 28, 110, 107, 3916, 3906,
	3924, 3908, 103, 3923, 3905, 3912, 3913, 3914, 3915, 101,
	83, 82, 81, 96, 95, 94, 93, 3935, 3928, 1146,
	92, 91, 3897, 89, 1504, 90, 964, 80, 652, 3936,
	79, 3781, 3937, 3939, 78, 77, 76, 98, 104, 3945,
	3948, 102, 87, 97, 196, 61, 187, 158, 88, 86,
	85, 84, 75, 74, 73, 156, 155, 154, 153, 3765,
	134, 152, 188, 3955, 3769, 3770, 150, 151, 2945, 179,
	2947, 3924, 3962, 189, 3923, 3961, 1656, 149, 148, 147,
	146, 3948, 3963, 2279, 2280, 2281, 145, 3967, 144, 1810,
	49, 50, 132, 51, 1810, 3790, 52, 166, 2296, 2297,
	2298, 2299, 165, 3384, 167, 2123, 169, 119, 171, 168,
	173, 163, 161, 164, 162, 192, 1229, 1228, 1238, 1239,
	1231, 1232, 1233, 1234, 1235, 1236, 1237, 1230, 134, 160,
	66, 11, 114, 18, 25, 134, 4, 0, 0, 0,
	2999, 0, 0, 3396, 0, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 3387, 0, 0, 0,
	134, 0, 0, 0, 3021, 0, 0, 3382, 0, 0,
	0, 0, 3404, 3405, 0, 0, 0, 0, 3383, 0,
	0, 196, 61, 187, 158, 0, 0, 0, 0, 0,
	0, 0, 140, 141, 0, 142, 143, 0, 0, 188,
	0, 0, 0, 0, 0, 0, 179, 0, 0, 0,
	189, 0, 0, 0, 0, 3388, 0, 0, 0, 0,
	0, 0, 0, 1465, 3892, 3893, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 3145, 0,
	0, 0, 192, 3147, 3148, 0, 0, 0, 0, 0,
	700, 699, 706, 696, 157, 185, 194, 186, 117, 1501,
	0, 0, 703, 704, 0, 705, 709, 0, 0, 690,
	0, 0, 0, 2042, 0, 0, 184, 178, 177, 714,
	0, 0, 0, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3403, 0, 2344, 0, 0, 0, 1241, 0, 1245, 0,
	0, 0, 0, 0, 3175, 0, 0, 0, 0, 140,
	141, 0, 142, 143, 1242, 1244, 1240, 3392, 1243, 1229,
	1228, 1238, 1239, 1231, 1232, 1233, 1234, 1235, 1236, 1237,
	1230, 0, 0, 0, 180, 181, 182, 0, 0, 3389,
	3393, 3391, 3390, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3219,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3231, 3398,
	3399, 157, 185, 194, 186, 117, 0, 0, 128, 0,
	0, 0, 183, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 178, 177, 0, 0, 0, 0,
	67, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3406, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3385,
	0, 0, 2000, 0, 0, 3397, 0, 0, 0, 0,
	0, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	691, 693, 692, 0, 60, 0, 0, 0, 0, 0,
	698, 180, 181, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 0, 0, 0, 0, 0, 0, 717,
	0, 0, 0, 0, 0, 0, 695, 0, 0, 0,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 134, 0, 2747, 134,
	134, 0, 134, 0, 0, 128, 0, 0, 0, 183,
	3277, 129, 0, 0, 0, 0, 0, 3279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 193,
	0, 139, 0, 0, 0, 0, 159, 0, 0, 0,
	0, 58, 1030, 0, 0, 134, 0, 0, 3294, 1968,
	0, 0, 0, 1030, 1929, 3402, 0, 0, 0, 0,
	0, 1737, 0, 0, 0, 0, 0, 134, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 60, 0, 0, 1971, 1938, 0, 0, 697, 701,
	707, 3360, 708, 710, 1972, 1973, 711, 712, 713, 0,
	3363, 715, 716, 0, 0, 0, 0, 131, 45, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 5, 0,
	1937, 0, 0, 0, 0, 0, 0, 0, 135, 136,
	62, 3401, 137, 0, 0, 0, 0, 1945, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1247, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 193, 0, 139, 0,
	0, 2929, 2930, 159, 0, 0, 0, 0, 58, 0,
	0, 0, 700, 699, 706, 696, 0, 0, 0, 0,
	0, 0, 0, 0, 703, 704, 0, 705, 709, 0,
	1810, 690, 0, 0, 0, 1961, 0, 0, 0, 0,
	0, 714, 0, 0, 1810, 0, 0, 3442, 0, 0,
	3444, 0, 0, 0, 0, 0, 0, 1733, 0, 0,
	0, 0, 0, 0, 1730, 0, 0, 3450, 1732, 1729,
	1731, 1735, 1736, 0, 131, 45, 1734, 0, 0, 0,
	0, 59, 0, 0, 0, 0, 718, 694, 0, 720,
	0, 0, 0, 0, 719, 135, 136, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 0, 1928, 1930, 1927,
	0, 1924, 0, 0, 0, 0, 1949, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1955, 0, 0,
	0, 0, 0, 0, 0, 1940, 0, 1923, 3544, 3545,
	0, 0, 0, 0, 0, 0, 0, 1943, 1977, 0,
	0, 1944, 1946, 1948, 0, 1950, 1951, 1952, 1956, 1957,
	1958, 1960, 1963, 1964, 1965, 0, 0, 0, 0, 0,
	0, 0, 1953, 1962, 1954, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1932, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1968, 0, 0, 0, 0,
	1929, 0, 0, 0, 0, 0, 0, 0, 1969, 1718,
	1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728,
	1740, 1741, 1742, 1743, 1744, 1745, 1738, 1739, 0, 0,
	1971, 1938, 691, 693, 692, 1925, 1926, 0, 0, 0,
	1972, 1973, 698, 0, 0, 0, 0, 0, 0, 3116,
	0, 0, 0, 1966, 702, 0, 0, 0, 0, 0,
	0, 717, 0, 0, 0, 3128, 1937, 0, 695, 0,
	1942, 0, 685, 700, 699, 706, 696, 1941, 0, 0,
	0, 0, 0, 1945, 2451, 703, 704, 0, 705, 709,
	0, 0, 690, 0, 0, 0, 0, 0, 0, 0,
	0, 1959, 714, 0, 0, 0, 0, 0, 0, 0,
	1947, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1975, 1974, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3665, 0, 0, 0, 0, 718, 0, 2000,
	720, 1961, 0, 0, 0, 719, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1934, 0, 0, 0,
	697, 701, 707, 0, 708, 710, 0, 0, 711, 712,
	713, 0, 2042, 715, 716, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1970, 0,
	0, 1976, 0, 1928, 2772, 1927, 0, 2771, 0, 0,
	0, 0, 1949, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1955, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1266, 0, 0, 1943, 1977, 0, 0, 1944, 1946, 1948,
	0, 1950, 1951, 1952, 1956, 1957, 1958, 1960, 1963, 1964,
	1965, 0, 0, 0, 0, 0, 0, 0, 1953, 1962,
	1954, 0, 0, 691, 693, 692, 0, 0, 0, 0,
	1932, 0, 0, 698, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 0, 0, 0, 0,
	3273, 0, 717, 0, 1969, 0, 0, 0, 3788, 695,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 694,
	0, 1925, 1926, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1966,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 1942, 0, 0, 0,
	0, 0, 134, 1941, 0, 0, 0, 0, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3859,
	0, 0, 0, 0, 0, 0, 0, 1959, 0, 0,
	0, 0, 0, 0, 0, 0, 1947, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2042, 0, 0, 1975,
	1974, 697, 701, 707, 0, 708, 710, 0, 0, 711,
	712, 713, 0, 0, 715, 716, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1934, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2000, 2000, 2000, 2000, 2000,
	0, 1083, 0, 0, 0, 0, 0, 3859, 0, 0,
	2000, 0, 0, 0, 1970, 0, 0, 1976, 0, 0,
	2042, 1106, 1110, 1112, 1114, 1116, 1117, 1119, 0, 1124,
	1120, 1121, 1122, 1123, 0, 1101, 1102, 1103, 1104, 1081,
	1082, 1107, 0, 1084, 0, 1086, 1087, 1088, 1089, 1085,
	1090, 1091, 1092, 1093, 1094, 1097, 1099, 1095, 1096, 1105,
	0, 0, 0, 3965, 0, 0, 0, 1109, 1111, 1113,
	1115, 1118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	694, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 0, 134, 0, 0, 1100, 1098, 1083, 0, 0,
	0, 1073, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 1106, 1110, 1112,
	1114, 1116, 1117, 1119, 134, 1124, 1120, 1121, 1122, 1123,
	0, 1101, 1102, 1103, 1104, 1081, 1082, 1107, 0, 1084,
	0, 1086, 1087, 1088, 1089, 1085, 1090, 1091, 1092, 1093,
	1094, 1097, 1099, 1095, 1096, 1105, 0, 0, 0, 0,
	0, 0, 0, 1109, 1111, 1113, 1115, 1118, 0, 0,
	0, 0, 0, 0, 1968, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 3582, 3528, 0, 0, 0, 0, 0, 1971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2610, 2611, 0, 1106,
	1110, 1112, 1114, 1116, 1117, 1119, 1968, 1124, 1120, 1121,
	1122, 1123, 192, 1101, 1102, 1103, 1104, 1081, 1082, 1107,
	0, 1084, 1945, 1086, 1087, 1088, 1089, 1085, 1090, 1091,
	1092, 1093, 1094, 1097, 1099, 1095, 1096, 1105, 0, 0,
	0, 1971, 0, 0, 0, 1109, 1111, 1113, 1115, 1118,
	0, 0, 1030, 0, 134, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 2000, 0, 0, 1968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1100, 3698, 134, 0, 0, 0, 0,
	1961, 0, 0, 0, 1945, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1971, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1215, 1216, 1217, 1214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1945, 0, 0,
	0, 0, 1961, 0, 0, 0, 0, 0, 0, 0,
	0, 1949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1955, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1737, 0, 0, 0, 0, 0, 0,
	0, 0, 1943, 1977, 0, 0, 1944, 1946, 1948, 0,
	1950, 1951, 1952, 1956, 1957, 1958, 1960, 1963, 1964, 1965,
	0, 3669, 0, 0, 0, 1961, 0, 1953, 1962, 1954,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1949, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 1955, 0, 0, 0, 0, 0,
	0, 0, 0, 1969, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1943, 1977, 0, 0, 1944, 1946,
	1948, 0, 1950, 1951, 1952, 1956, 1957, 1958, 1960, 1963,
	1964, 1965, 0, 0, 0, 0, 0, 0, 0, 1953,
	1962, 1954, 0, 0, 0, 0, 1949, 0, 1966, 0,
	0, 0, 0, 0, 0, 0, 0, 1955, 0, 0,
	0, 0, 0, 0, 0, 1942, 0, 0, 0, 0,
	0, 0, 1941, 0, 0, 1969, 0, 1943, 1977, 0,
	0, 1944, 1946, 1948, 0, 1950, 1951, 1952, 1956, 1957,
	1958, 1960, 1963, 1964, 1965, 0, 1959, 0, 0, 1733,
	0, 0, 1953, 1962, 1954, 1947, 1730, 0, 1108, 0,
	1732, 1729, 1731, 1735, 1736, 0, 0, 0, 1734, 0,
	1966, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 1942, 1969, 0,
	0, 0, 0, 134, 1941, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1959, 0,
	0, 0, 0, 0, 0, 0, 0, 1947, 0, 0,
	0, 0, 0, 1966, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2000, 0, 0, 0, 0, 0,
	1942, 0, 0, 0, 0, 0, 0, 1941, 0, 0,
	0, 0, 0, 3532, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1959, 0, 0, 0, 0, 0, 0, 0, 0,
	1947, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726,
	1727, 1728, 1740, 1741, 1742, 1743, 1744, 1745, 1738, 1739,
	0, 0, 0, 0, 0, 0, 0, 789, 0, 0,
	0, 0, 0, 0, 0, 3536, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 742,
	0, 0, 0, 326, 0, 134, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 780, 547, 498, 416, 370, 565,
	564, 0, 0, 847, 855, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 734, 3536, 0,
	770, 824, 823, 757, 767, 0, 0, 299, 219, 493,
	613, 495, 494, 758, 0, 759, 763, 766, 762, 760,
	761, 0, 839, 0, 0, 0, 0, 0, 0, 726,
	738, 0, 743, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 735, 736, 0, 0,
	0, 0, 790, 0, 737, 0, 0, 785, 764, 768,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	765, 788, 792, 320, 861, 786, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 862, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 783, 0, 610, 0, 449, 0, 0,
	845, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 787, 0, 407, 388, 858, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 134, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 1761,
	1760, 1762, 461, 354, 355, 0, 333, 281, 282, 629,
	843, 384, 575, 608, 609, 500, 0, 857, 838, 840,
	841, 844, 848, 849, 850, 851, 852, 854, 856, 860,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 859, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 791, 550, 551, 374, 375, 376, 377, 846, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 868, 842, 867,
	869, 870, 866, 871, 872, 853, 747, 0, 798, 864,
	863, 865, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 831, 805, 806, 807, 744,
	808, 802, 803, 745, 804, 832, 796, 828, 829, 772,
	799, 809, 827, 810, 830, 833, 834, 873, 874, 816,
	800, 247, 875, 813, 835, 826, 825, 811, 797, 836,
	837, 779, 774, 814, 815, 801, 819, 820, 821, 746,
	793, 794, 795, 817, 818, 775, 776, 777, 778, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 822, 618, 420, 0, 619,
	789, 630, 496, 497, 631, 607, 0, 739, 0, 386,
	0, 511, 544, 533, 617, 499, 0, 0, 0, 0,
	0, 0, 742, 0, 0, 0, 326, 1811, 0, 356,
	548, 530, 540, 531, 516, 517, 518, 525, 336, 519,
	520, 521, 491, 522, 492, 523, 524, 780, 547, 498,
	416, 370, 565, 564, 0, 0, 847, 855, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2025, 0, 0,
	734, 0, 0, 770, 824, 823, 757, 767, 0, 0,
	299, 219, 493, 613, 495, 494, 758, 0, 759, 763,
	766, 762, 760, 761, 0, 839, 0, 0, 0, 0,
	0, 0, 726, 738, 0, 743, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 735,
	736, 0, 0, 0, 0, 790, 0, 737, 0, 0,
	2026, 764, 768, 0, 0, 0, 0, 289, 422, 439,
	300, 412, 452, 305, 419, 295, 385, 409, 0, 0,
	291, 437, 418, 367, 346, 347, 290, 0, 404, 324,
	338, 321, 383, 765, 788, 792, 320, 861, 786, 447,
	293, 0, 446, 382, 433, 438, 368, 362, 0, 292,
	435, 366, 361, 350, 328, 862, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 783, 0, 610, 0,
	449, 0, 0, 845, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 787, 0, 407, 388, 858, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 552, 0, 468, 634,
	635, 636, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 553, 570, 537, 507, 470, 561, 504, 508,
	509, 573, 0, 0, 0, 461, 354, 355, 0, 333,
	281, 282, 629, 843, 384, 575, 608, 609, 500, 0,
	857, 838, 840, 841, 844, 848, 849, 850, 851, 852,
	854, 856, 860, 628, 0, 554, 569, 632, 568, 625,
	390, 0, 410, 566, 513, 0, 558, 532, 0, 559,
	528, 563, 0, 502, 0, 417, 442, 454, 471, 474,
	503, 588, 589, 590, 286, 473, 592, 593, 594, 595,
	596, 597, 598, 591, 859, 535, 512, 538, 453, 515,
	514, 0, 0, 549, 791, 550, 551, 374, 375, 376,
	377, 846, 576, 304, 472, 400, 0, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 541, 542, 539, 637,
	0, 599, 600, 0, 0, 466, 467, 332, 339, 485,
	341, 303, 389, 334, 451, 348, 0, 478, 543, 479,
	602, 605, 603, 604, 381, 344, 345, 414, 349, 359,
	403, 450, 387, 408, 301, 441, 415, 363, 529, 556,
	868, 842, 867, 869, 870, 866, 871, 872, 853, 747,
	0, 798, 864, 863, 865, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 583, 582, 581,
	580, 579, 578, 577, 0, 0, 526, 428, 313, 275,
	309, 310, 317, 626, 623, 432, 627, 0, 283, 506,
	357, 0, 399, 331, 571, 572, 0, 0, 831, 805,
	806, 807, 744, 808, 802, 803, 745, 804, 832, 796,
	828, 829, 772, 799, 809, 827, 810, 830, 833, 834,
	873, 874, 816, 800, 247, 875, 813, 835, 826, 825,
	811, 797, 836, 837, 779, 774, 814, 815, 801, 819,
	820, 821, 746, 793, 794, 795, 817, 818, 775, 776,
	777, 778, 0, 0, 0, 457, 458, 459, 481, 0,
	443, 505, 624, 0, 0, 0, 0, 0, 0, 0,
	555, 567, 601, 0, 611, 612, 614, 616, 822, 618,
	420, 0, 619, 0, 630, 496, 497, 631, 607, 0,
	739, 196, 789, 0, 0, 0, 0, 0, 0, 0,
	0, 386, 0, 511, 544, 533, 617, 499, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 326, 0,
	0, 356, 548, 530, 540, 531, 516, 517, 518, 525,
	336, 519, 520, 521, 491, 522, 492, 523, 524, 1250,
	547, 498, 416, 370, 565, 564, 0, 0, 847, 855,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 734, 0, 0, 770, 824, 823, 757, 767,
	0, 0, 299, 219, 493, 613, 495, 494, 758, 0,
	759, 763, 766, 762, 760, 761, 0, 839, 0, 0,
	0, 0, 0, 0, 726, 738, 0, 743, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 735, 736, 0, 0, 0, 0, 790, 0, 737,
	0, 0, 785, 764, 768, 0, 0, 0, 0, 289,
	422, 439, 300, 412, 452, 305, 419, 295, 385, 409,
	0, 0, 291, 437, 418, 367, 346, 347, 290, 0,
	404, 324, 338, 321, 383, 765, 788, 792, 320, 861,
	786, 447, 293, 0, 446, 382, 433, 438, 368, 362,
	0, 292, 435, 366, 361, 350, 328, 862, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 783, 0,
	610, 0, 449, 0, 0, 845, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 787, 0, 407, 388,
	858, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 843, 384, 575, 608, 609,
	500, 0, 857, 838, 840, 841, 844, 848, 849, 850,
	851, 852, 854, 856, 860, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 859, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 791, 550, 551, 374,
	375, 376, 377, 846, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 868, 842, 867, 869, 870, 866, 871, 872,
	853, 747, 0, 798, 864, 863, 865, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 159, 399, 331, 571, 572, 0, 0,
	831, 805, 806, 807, 744, 808, 802, 803, 745, 804,
	832, 796, 828, 829, 772, 799, 809, 827, 810, 830,
	833, 834, 873, 874, 816, 800, 247, 875, 813, 835,
	826, 825, 811, 797, 836, 837, 779, 774, 814, 815,
	801, 819, 820, 821, 746, 793, 794, 795, 817, 818,
	775, 776, 777, 778, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	822, 618, 420, 0, 619, 789, 630, 496, 497, 631,
	607, 0, 739, 0, 386, 0, 511, 544, 533, 617,
	499, 0, 0, 0, 0, 0, 0, 742, 0, 0,
	0, 326, 3964, 0, 356, 548, 530, 540, 531, 516,
	517, 518, 525, 336, 519, 520, 521, 491, 522, 492,
	523, 524, 780, 547, 498, 416, 370, 565, 564, 0,
	0, 847, 855, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 734, 0, 0, 770, 824,
	823, 757, 767, 0, 0, 299, 219, 493, 613, 495,
	494, 758, 0, 759, 763, 766, 762, 760, 761, 0,
	839, 0, 0, 0, 0, 0, 0, 726, 738, 0,
	743, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 735, 736, 0, 0, 0, 0,
	790, 0, 737, 0, 0, 785, 764, 768, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 765, 788,
	792, 320, 861, 786, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	862, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 783, 0, 610, 0, 449, 0, 0, 845, 0,
	0, 0, 421, 0, 0, 353, 0, 0, 0, 787,
	0, 407, 388, 858, 0, 0, 405, 358, 434, 396,
	440, 423, 448, 401, 397, 284, 424, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 411,
	425, 426, 427, 322, 306, 406, 307, 340, 308, 285,
	314, 312, 315, 413, 316, 287, 392, 431, 0, 335,
	402, 365, 288, 364, 393, 430, 429, 297, 456, 462,
	463, 552, 0, 468, 634, 635, 636, 477, 0, 398,
	482, 483, 484, 486, 487, 488, 489, 553, 570, 537,
	507, 470, 561, 504, 508, 509, 573, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 629, 843, 384,
	575, 608, 609, 500, 0, 857, 838, 840, 841, 844,
	848, 849, 850, 851, 852, 854, 856, 860, 628, 0,
	554, 569, 632, 568, 625, 390, 0, 410, 566, 513,
	0, 558, 532, 0, 559, 528, 563, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 588, 589, 590, 286,
	473, 592, 593, 594, 595, 596, 597, 598, 591, 859,
	535, 512, 538, 453, 515, 514, 0, 0, 549, 791,
	550, 551, 374, 375, 376, 377, 846, 576, 304, 472,
	400, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 541, 542, 539, 637, 0, 599, 600, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 543, 479, 602, 605, 603, 604, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 529, 556, 868, 842, 867, 869, 870,
	866, 871, 872, 853, 747, 0, 798, 864, 863, 865,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 583, 582, 581, 580, 579, 578, 577, 0,
	0, 526, 428, 313, 275, 309, 310, 317, 626, 623,
	432, 627, 0, 283, 506, 357, 0, 399, 331, 571,
	572, 0, 0, 831, 805, 806, 807, 744, 808, 802,
	803, 745, 804, 832, 796, 828, 829, 772, 799, 809,
	827, 810, 830, 833, 834, 873, 874, 816, 800, 247,
	875, 813, 835, 826, 825, 811, 797, 836, 837, 779,
	774, 814, 815, 801, 819, 820, 821, 746, 793, 794,
	795, 817, 818, 775, 776, 777, 778, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 624, 0, 0,
	0, 0, 0, 0, 0, 555, 567, 601, 0, 611,
	612, 614, 616, 822, 618, 420, 0, 619, 789, 630,
	496, 497, 631, 607, 0, 739, 0, 386, 0, 511,
	544, 533, 617, 499, 0, 0, 0, 0, 0, 0,
	742, 0, 0, 0, 326, 0, 0, 356, 548, 530,
	540, 531, 516, 517, 518, 525, 336, 519, 520, 521,
	491, 522, 492, 523, 524, 780, 547, 498, 416, 370,
	565, 564, 0, 0, 847, 855, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 734, 0,
	0, 770, 824, 823, 757, 767, 0, 0, 299, 219,
	493, 613, 495, 494, 758, 0, 759, 763, 766, 762,
	760, 761, 0, 839, 0, 0, 0, 0, 0, 0,
	726, 738, 0, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 735, 736, 0,
	0, 0, 0, 790, 0, 737, 0, 0, 785, 764,
	768, 0, 0, 0, 0, 289, 422, 439, 300, 412,
	452, 305, 419, 295, 385, 409, 0, 0, 291, 437,
	418, 367, 346, 347, 290, 0, 404, 324, 338, 321,
	383, 765, 788, 792, 320, 861, 786, 447, 293, 0,
	446, 382, 433, 438, 368, 362, 0, 292, 435, 366,
	361, 350, 328, 862, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 783, 0, 610, 0, 449, 0,
	0, 845, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 787, 0, 407, 388, 858, 3860, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 552, 0, 468, 634, 635, 636,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	553, 570, 537, 507, 470, 561, 504, 508, 509, 573,
	0, 0, 0, 461, 354, 355, 0, 333, 281, 282,
	629, 843, 384, 575, 608, 609, 500, 0, 857, 838,
	840, 841, 844, 848, 849, 850, 851, 852, 854, 856,
	860, 628, 0, 554, 569, 632, 568, 625, 390, 0,
	410, 566, 513, 0, 558, 532, 0, 559, 528, 563,
	0, 502, 0, 417, 442, 454, 471, 474, 503, 588,
	589, 590, 286, 473, 592, 593, 594, 595, 596, 597,
	598, 591, 859, 535, 512, 538, 453, 515, 514, 0,
	0, 549, 791, 550, 551, 374, 375, 376, 377, 846,
	576, 304, 472, 400, 0, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 542, 539, 637, 0, 599,
	600, 0, 0, 466, 467, 332, 339, 485, 341, 303,
	389, 334, 451, 348, 0, 478, 543, 479, 602, 605,
	603, 604, 381, 344, 345, 414, 349, 359, 403, 450,
	387, 408, 301, 441, 415, 363, 529, 556, 868, 842,
	867, 869, 870, 866, 871, 872, 853, 747, 0, 798,
	864, 863, 865, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 583, 582, 581, 580, 579,
	578, 577, 0, 0, 526, 428, 313, 275, 309, 310,
	317, 626, 623, 432, 627, 0, 283, 506, 357, 0,
	399, 331, 571, 572, 0, 0, 831, 805, 806, 807,
	744, 808, 802, 803, 745, 804, 832, 796, 828, 829,
	772, 799, 809, 827, 810, 830, 833, 834, 873, 874,
	816, 800, 247, 875, 813, 835, 826, 825, 811, 797,
	836, 837, 779, 774, 814, 815, 801, 819, 820, 821,
	746, 793, 794, 795, 817, 818, 775, 776, 777, 778,
	0, 0, 0, 457, 458, 459, 481, 0, 443, 505,
	624, 0, 0, 0, 0, 0, 0, 0, 555, 567,
	601, 0, 611, 612, 614, 616, 822, 618, 420, 0,
	619, 789, 630, 496, 497, 631, 607, 0, 739, 0,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 742, 0, 0, 0, 326, 1811, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 780, 547,
	498, 416, 370, 565, 564, 0, 0, 847, 855, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 734, 0, 0, 770, 824, 823, 757, 767, 0,
	0, 299, 219, 493, 613, 495, 494, 758, 0, 759,
	763, 766, 762, 760, 761, 0, 839, 0, 0, 0,
	0, 0, 0, 726, 738, 0, 743, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	735, 736, 0, 0, 0, 0, 790, 0, 737, 0,
	0, 785, 764, 768, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 765, 788, 792, 320, 861, 786,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 862, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 783, 0, 610,
	0, 449, 0, 0, 845, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 787, 0, 407, 388, 858,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 843, 384, 575, 608, 609, 500,
	0, 857, 838, 840, 841, 844, 848, 849, 850, 851,
	852, 854, 856, 860, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 859, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 791, 550, 551, 374, 375,
	376, 377, 846, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 868, 842, 867, 869, 870, 866, 871, 872, 853,
	747, 0, 798, 864, 863, 865, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 831,
	805, 806, 807, 744, 808, 802, 803, 745, 804, 832,
	796, 828, 829, 772, 799, 809, 827, 810, 830, 833,
	834, 873, 874, 816, 800, 247, 875, 813, 835, 826,
	825, 811, 797, 836, 837, 779, 774, 814, 815, 801,
	819, 820, 821, 746, 793, 794, 795, 817, 818, 775,
	776, 777, 778, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 822,
	618, 420, 0, 619, 789, 630, 496, 497, 631, 607,
	0, 739, 0, 386, 0, 511, 544, 533, 617, 499,
	0, 0, 0, 0, 0, 0, 742, 0, 0, 0,
	326, 0, 0, 356, 548, 530, 540, 531, 516, 517,
	518, 525, 336, 519, 520, 521, 491, 522, 492, 523,
	524, 780, 547, 498, 416, 370, 565, 564, 0, 0,
	847, 855, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 734, 0, 0, 770, 824, 823,
	757, 767, 0, 0, 299, 219, 493, 613, 495, 494,
	758, 0, 759, 763, 766, 762, 760, 761, 0, 839,
	0, 0, 0, 0, 0, 0, 726, 738, 0, 743,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 735, 736, 1532, 0, 0, 0, 790,
	0, 737, 0, 0, 785, 764, 768, 0, 0, 0,
	0, 289, 422, 439, 300, 412, 452, 305, 419, 295,
	385, 409, 0, 0, 291, 437, 418, 367, 346, 347,
	290, 0, 404, 324, 338, 321, 383, 765, 788, 792,
	320, 861, 786, 447, 293, 0, 446, 382, 433, 438,
	368, 362, 0, 292, 435, 366, 361, 350, 328, 862,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	783, 0, 610, 0, 449, 0, 0, 845, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 787, 0,
	407, 388, 858, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	552, 0, 468, 634, 635, 636, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 553, 570, 537, 507,
	470, 561, 504, 508, 509, 573, 0, 0, 0, 461,
	354, 355, 0, 333, 281, 282, 629, 843, 384, 575,
	608, 609, 500, 0, 857, 838, 840, 841, 844, 848,
	849, 850, 851, 852, 854, 856, 860, 628, 0, 554,
	569, 632, 568, 625, 390, 0, 410, 566, 513, 0,
	558, 532, 0, 559, 528, 563, 0, 502, 0, 417,
	442, 454, 471, 474, 503, 588, 589, 590, 286, 473,
	592, 593, 594, 595, 596, 597, 598, 591, 859, 535,
	512, 538, 453, 515, 514, 0, 0, 549, 791, 550,
	551, 374, 375, 376, 377, 846, 576, 304, 472, 400,
	0, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	541, 542, 539, 637, 0, 599, 600, 0, 0, 466,
	467, 332, 339, 485, 341, 303, 389, 334, 451, 348,
	0, 478, 543, 479, 602, 605, 603, 604, 381, 344,
	345, 414, 349, 359, 403, 450, 387, 408, 301, 441,
	415, 363, 529, 556, 868, 842, 867, 869, 870, 866,
	871, 872, 853, 747, 0, 798, 864, 863, 865, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 583, 582, 581, 580, 579, 578, 577, 0, 0,
	526, 428, 313, 275, 309, 310, 317, 626, 623, 432,
	627, 0, 283, 506, 357, 0, 399, 331, 571, 572,
	0, 0, 831, 805, 806, 807, 744, 808, 802, 803,
	745, 804, 832, 796, 828, 829, 772, 799, 809, 827,
	810, 830, 833, 834, 873, 874, 816, 800, 247, 875,
	813, 835, 826, 825, 811, 797, 836, 837, 779, 774,
	814, 815, 801, 819, 820, 821, 746, 793, 794, 795,
	817, 818, 775, 776, 777, 778, 0, 0, 0, 457,
	458, 459, 481, 0, 443, 505, 624, 0, 0, 0,
	0, 0, 0, 0, 555, 567, 601, 0, 611, 612,
	614, 616, 822, 618, 420, 0, 619, 0, 630, 496,
	497, 631, 607, 789, 739, 0, 2196, 0, 0, 0,
	0, 0, 386, 0, 511, 544, 533, 617, 499, 0,
	0, 0, 0, 0, 0, 742, 0, 0, 0, 326,
	0, 0, 356, 548, 530, 540, 531, 516, 517, 518,
	525, 336, 519, 520, 521, 491, 522, 492, 523, 524,
	780, 547, 498, 416, 370, 565, 564, 0, 0, 847,
	855, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 734, 0, 0, 770, 824, 823, 757,
	767, 0, 0, 299, 219, 493, 613, 495, 494, 758,
	0, 759, 763, 766, 762, 760, 761, 0, 839, 0,
	0, 0, 0, 0, 0, 726, 738, 0, 743, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 735, 736, 0, 0, 0, 0, 790, 0,
	737, 0, 0, 785, 764, 768, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 765, 788, 792, 320,
	861, 786, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 862, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 606, 783,
	0, 610, 0, 449, 0, 0, 845, 0, 0, 0,
	421, 0, 0, 353, 0, 0, 0, 787, 0, 407,
	388, 858, 0, 0, 405, 358, 434, 396, 440, 423,
	448, 401, 397, 284, 424, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 411, 425, 426,
	427, 322, 306, 406, 307, 340, 308, 285, 314, 312,
	315, 413, 316, 287, 392, 431, 0, 335, 402, 365,
	288, 364, 393, 430, 429, 297, 456, 462, 463, 552,
	0, 468, 634, 635, 636, 477, 0, 398, 482, 483,
	484, 486, 487, 488, 489, 553, 570, 537, 507, 470,
	561, 504, 508, 509, 573, 0, 0, 0, 461, 354,
	355, 0, 333, 281, 282, 629, 843, 384, 575, 608,
	609, 500, 0, 857, 838, 840, 841, 844, 848, 849,
	850, 851, 852, 854, 856, 860, 628, 0, 554, 569,
	632, 568, 625, 390, 0, 410, 566, 513, 0, 558,
	532, 0, 559, 528, 563, 0, 502, 0, 417, 442,
	454, 471, 474, 503, 588, 589, 590, 286, 473, 592,
	593, 594, 595, 596, 597, 598, 591, 859, 535, 512,
	538, 453, 515, 514, 0, 0, 549, 791, 550, 551,
	374, 375, 376, 377, 846, 576, 304, 472, 400, 0,
	536, 0, 0, 0, 0, 0, 0, 0, 0, 541,
	542, 539, 637, 0, 599, 600, 0, 0, 466, 467,
	332, 339, 485, 341, 303, 389, 334, 451, 348, 0,
	478, 543, 479, 602, 605, 603, 604, 381, 344, 345,
	414, 349, 359, 403, 450, 387, 408, 301, 441, 415,
	363, 529, 556, 868, 842, 867, 869, 870, 866, 871,
	872, 853, 747, 0, 798, 864, 863, 865, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	583, 582, 581, 580, 579, 578, 577, 0, 0, 526,
	428, 313, 275, 309, 310, 317, 626, 623, 432, 627,
	0, 283, 506, 357, 0, 399, 331, 571, 572, 0,
	0, 831, 805, 806, 807, 744, 808, 802, 803, 745,
	804, 832, 796, 828, 829, 772, 799, 809, 827, 810,
	830, 833, 834, 873, 874, 816, 800, 247, 875, 813,
	835, 826, 825, 811, 797, 836, 837, 779, 774, 814,
	815, 801, 819, 820, 821, 746, 793, 794, 795, 817,
	818, 775, 776, 777, 778, 0, 0, 0, 457, 458,
	459, 481, 0, 443, 505, 624, 0, 0, 0, 0,
	0, 0, 0, 555, 567, 601, 0, 611, 612, 614,
	616, 822, 618, 420, 0, 619, 789, 630, 496, 497,
	631, 607, 0, 739, 0, 386, 0, 511, 544, 533,
	617, 499, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 0, 326, 0, 0, 356, 548, 530, 540, 531,
	516, 517, 518, 525, 336, 519, 520, 521, 491, 522,
	492, 523, 524, 780, 547, 498, 416, 370, 565, 564,
	0, 0, 847, 855, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 734, 0, 0, 770,
	824, 823, 757, 767, 0, 0, 299, 219, 493, 613,
	495, 494, 758, 0, 759, 763, 766, 762, 760, 761,
	0, 839, 0, 0, 0, 0, 0, 0, 726, 738,
	0, 743, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 735, 736, 1804, 0, 0,
	0, 790, 0, 737, 0, 0, 785, 764, 768, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 765,
	788, 792, 320, 861, 786, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 862, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 783, 0, 610, 0, 449, 0, 0, 845,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	787, 0, 407, 388, 858, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 552, 0, 468, 634, 635, 636, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 553, 570,
	537, 507, 470, 561, 504, 508, 509, 573, 0, 0,
	0, 461, 354, 355, 0, 333, 281, 282, 629, 843,
	384, 575, 608, 609, 500, 0, 857, 838, 840, 841,
	844, 848, 849, 850, 851, 852, 854, 856, 860, 628,
	0, 554, 569, 632, 568, 625, 390, 0, 410, 566,
	513, 0, 558, 532, 0, 559, 528, 563, 0, 502,
	0, 417, 442, 454, 471, 474, 503, 588, 589, 590,
	286, 473, 592, 593, 594, 595, 596, 597, 598, 591,
	859, 535, 512, 538, 453, 515, 514, 0, 0, 549,
	791, 550, 551, 374, 375, 376, 377, 846, 576, 304,
	472, 400, 0, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 541, 542, 539, 637, 0, 599, 600, 0,
	0, 466, 467, 332, 339, 485, 341, 303, 389, 334,
	451, 348, 0, 478, 543, 479, 602, 605, 603, 604,
	381, 344, 345, 414, 349, 359, 403, 450, 387, 408,
	301, 441, 415, 363, 529, 556, 868, 842, 867, 869,
	870, 866, 871, 872, 853, 747, 0, 798, 864, 863,
	865, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 583, 582, 581, 580, 579, 578, 577,
	0, 0, 526, 428, 313, 275, 309, 310, 317, 626,
	623, 432, 627, 0, 283, 506, 357, 0, 399, 331,
	571, 572, 0, 0, 831, 805, 806, 807, 744, 808,
	802, 803, 745, 804, 832, 796, 828, 829, 772, 799,
	809, 827, 810, 830, 833, 834, 873, 874, 816, 800,
	247, 875, 813, 835, 826, 825, 811, 797, 836, 837,
	779, 774, 814, 815, 801, 819, 820, 821, 746, 793,
	794, 795, 817, 818, 775, 776, 777, 778, 0, 0,
	0, 457, 458, 459, 481, 0, 443, 505, 624, 0,
	0, 0, 0, 0, 0, 0, 555, 567, 601, 0,
	611, 612, 614, 616, 822, 618, 420, 0, 619, 789,
	630, 496, 497, 631, 607, 0, 739, 0, 386, 0,
	511, 544, 533, 617, 499, 0, 0, 0, 0, 0,
	0, 742, 0, 0, 0, 326, 0, 0, 356, 548,
	530, 540, 531, 516, 517, 518, 525, 336, 519, 520,
	521, 491, 522, 492, 523, 524, 780, 547, 498, 416,
	370, 565, 564, 0, 0, 847, 855, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 734,
	0, 0, 770, 824, 823, 757, 767, 0, 0, 299,
	219, 493, 613, 495, 494, 758, 0, 759, 763, 766,
	762, 760, 761, 0, 839, 0, 0, 0, 0, 0,
	0, 726, 738, 0, 743, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 735, 736,
	0, 0, 0, 0, 790, 0, 737, 0, 0, 785,
	764, 768, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 765, 788, 792, 320, 861, 786, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 862, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 783, 0, 610, 0, 449,
	0, 0, 845, 0, 0, 0, 421, 0, 0, 353,
	0, 0, 0, 787, 0, 407, 388, 858, 0, 0,
	405, 358, 434, 396, 440, 423, 448, 401, 397, 284,
	424, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 411, 425, 426, 427, 322, 306, 406,
	307, 340, 308, 285, 314, 312, 315, 413, 316, 287,
	392, 431, 0, 335, 402, 365, 288, 364, 393, 430,
	429, 297, 456, 462, 463, 552, 0, 468, 634, 635,
	636, 477, 0, 398, 482, 483, 484, 486, 487, 488,
	489, 553, 570, 537, 507, 470, 561, 504, 508, 509,
	573, 0, 0, 0, 461, 354, 355, 0, 333, 281,
	282, 629, 843, 384, 575, 608, 609, 500, 0, 857,
	838, 840, 841, 844, 848, 849, 850, 851, 852, 854,
	856, 860, 628, 0, 554, 569, 632, 568, 625, 390,
	0, 410, 566, 513, 0, 558, 532, 0, 559, 528,
	563, 0, 502, 0, 417, 442, 454, 471, 474, 503,
	588, 589, 590, 286, 473, 592, 593, 594, 595, 596,
	597, 598, 591, 859, 535, 512, 538, 453, 515, 514,
	0, 0, 549, 791, 550, 551, 374, 375, 376, 377,
	846, 576, 304, 472, 400, 0, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 541, 542, 539, 637, 0,
	599, 600, 0, 0, 466, 467, 332, 339, 485, 341,
	303, 389, 334, 451, 348, 0, 478, 543, 479, 602,
	605, 603, 604, 381, 344, 345, 414, 349, 359, 403,
	450, 387, 408, 301, 441, 415, 363, 529, 556, 868,
	842, 867, 869, 870, 866, 871, 872, 853, 747, 0,
	798, 864, 863, 865, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 583, 582, 581, 580,
	579, 578, 577, 0, 0, 526, 428, 313, 275, 309,
	310, 317, 626, 623, 432, 627, 0, 283, 506, 357,
	0, 399, 331, 571, 572, 0, 0, 831, 805, 806,
	807, 744, 808, 802, 803, 745, 804, 832, 796, 828,
	829, 772, 799, 809, 827, 810, 830, 833, 834, 873,
	874, 816, 800, 247, 875, 813, 835, 826, 825, 811,
	797, 836, 837, 779, 774, 814, 815, 801, 819, 820,
	821, 746, 793, 794, 795, 817, 818, 775, 776, 777,
	778, 0, 0, 0, 457, 458, 459, 481, 0, 443,
	505, 624, 0, 0, 0, 0, 0, 0, 0, 555,
	567, 601, 0, 611, 612, 614, 616, 822, 618, 420,
	0, 619, 789, 630, 496, 497, 631, 607, 0, 739,
	0, 386, 0, 511, 544, 533, 617, 499, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 326, 0,
	0, 356, 548, 530, 540, 531, 516, 517, 518, 525,
	336, 519, 520, 521, 491, 522, 492, 523, 524, 780,
	547, 498, 416, 370, 565, 564, 0, 0, 847, 855,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 734, 0, 0, 770, 824, 823, 757, 767,
	0, 0, 299, 219, 493, 613, 495, 494, 2662, 0,
	2663, 763, 766, 762, 760, 761, 0, 839, 0, 0,
	0, 0, 0, 0, 726, 738, 0, 743, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 735, 736, 0, 0, 0, 0, 790, 0, 737,
	0, 0, 785, 764, 768, 0, 0, 0, 0, 289,
	422, 439, 300, 412, 452, 305, 419, 295, 385, 409,
	0, 0, 291, 437, 418, 367, 346, 347, 290, 0,
	404, 324, 338, 321, 383, 765, 788, 792, 320, 861,
	786, 447, 293, 0, 446, 382, 433, 438, 368, 362,
	0, 292, 435, 366, 361, 350, 328, 862, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 783, 0,
	610, 0, 449, 0, 0, 845, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 787, 0, 407, 388,
	858, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 843, 384, 575, 608, 609,
	500, 0, 857, 838, 840, 841, 844, 848, 849, 850,
	851, 852, 854, 856, 860, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 859, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 791, 550, 551, 374,
	375, 376, 377, 846, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 868, 842, 867, 869, 870, 866, 871, 872,
	853, 747, 0, 798, 864, 863, 865, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 0, 399, 331, 571, 572, 0, 0,
	831, 805, 806, 807, 744, 808, 802, 803, 745, 804,
	832, 796, 828, 829, 772, 799, 809, 827, 810, 830,
	833, 834, 873, 874, 816, 800, 247, 875, 813, 835,
	826, 825, 811, 797, 836, 837, 779, 774, 814, 815,
	801, 819, 820, 821, 746, 793, 794, 795, 817, 818,
	775, 776, 777, 778, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	822, 618, 420, 0, 619, 789, 630, 496, 497, 631,
	607, 0, 739, 0, 386, 0, 511, 544, 533, 617,
	499, 0, 0, 1674, 0, 0, 0, 742, 0, 0,
	0, 326, 0, 0, 356, 548, 530, 540, 531, 516,
	517, 518, 525, 336, 519, 520, 521, 491, 522, 492,
	523, 524, 780, 547, 498, 416, 370, 565, 564, 0,
	0, 847, 855, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 734, 0, 0, 770, 824,
	823, 757, 767, 0, 0, 299, 219, 493, 613, 495,
	494, 758, 0, 759, 763, 766, 762, 760, 761, 0,
	839, 0, 0, 0, 0, 0, 0, 0, 738, 0,
	743, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 735, 736, 0, 0, 0, 0,
	790, 0, 737, 0, 0, 785, 764, 768, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 765, 788,
	792, 320, 861, 786, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	862, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 783, 0, 610, 0, 449, 0, 0, 845, 0,
	0, 0, 421, 0, 0, 353, 0, 0, 0, 787,
	0, 407, 388, 858, 0, 0, 405, 358, 434, 396,
	440, 423, 448, 401, 397, 284, 424, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 411,
	425, 426, 427, 322, 306, 406, 307, 340, 308, 285,
	314, 312, 315, 413, 316, 287, 392, 431, 0, 335,
	402, 365, 288, 364, 393, 430, 429, 297, 456, 1675,
	1676, 552, 0, 468, 634, 635, 636, 477, 0, 398,
	482, 483, 484, 486, 487, 488, 489, 553, 570, 537,
	507, 470, 561, 504, 508, 509, 573, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 629, 843, 384,
	575, 608, 609, 500, 0, 857, 838, 840, 841, 844,
	848, 849, 850, 851, 852, 854, 856, 860, 628, 0,
	554, 569, 632, 568, 625, 390, 0, 410, 566, 513,
	0, 558, 532, 0, 559, 528, 563, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 588, 589, 590, 286,
	473, 592, 593, 594, 595, 596, 597, 598, 591, 859,
	535, 512, 538, 453, 515, 514, 0, 0, 549, 791,
	550, 551, 374, 375, 376, 377, 846, 576, 304, 472,
	400, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 541, 542, 539, 637, 0, 599, 600, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 543, 479, 602, 605, 603, 604, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 529, 556, 868, 842, 867, 869, 870,
	866, 871, 872, 853, 747, 0, 798, 864, 863, 865,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 583, 582, 581, 580, 579, 578, 577, 0,
	0, 526, 428, 313, 275, 309, 310, 317, 626, 623,
	432, 627, 0, 283, 506, 357, 0, 399, 331, 571,
	572, 0, 0, 831, 805, 806, 807, 744, 808, 802,
	803, 745, 804, 832, 796, 828, 829, 772, 799, 809,
	827, 810, 830, 833, 834, 873, 874, 816, 800, 247,
	875, 813, 835, 826, 825, 811, 797, 836, 837, 779,
	774, 814, 815, 801, 819, 820, 821, 746, 793, 794,
	795, 817, 818, 775, 776, 777, 778, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 624, 0, 0,
	0, 0, 0, 0, 0, 555, 567, 601, 0, 611,
	612, 614, 616, 822, 618, 420, 0, 619, 789, 630,
	496, 497, 631, 607, 0, 739, 0, 386, 0, 511,
	544, 533, 617, 499, 0, 0, 0, 0, 0, 0,
	742, 0, 0, 0, 326, 0, 0, 356, 548, 530,
	540, 531, 516, 517, 518, 525, 336, 519, 520, 521,
	491, 522, 492, 523, 524, 780, 547, 498, 416, 370,
	565, 564, 0, 0, 847, 855, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 734, 0,
	0, 770, 824, 823, 757, 767, 0, 0, 299, 219,
	493, 613, 495, 494, 758, 0, 759, 763, 766, 762,
	760, 761, 0, 839, 0, 0, 0, 0, 0, 0,
	0, 738, 0, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 735, 736, 0,
	0, 0, 0, 790, 0, 737, 0, 0, 785, 764,
	768, 0, 0, 0, 0, 289, 422, 439, 300, 412,
	452, 305, 419, 295, 385, 409, 0, 0, 291, 437,
	418, 367, 346, 347, 290, 0, 404, 324, 338, 321,
	383, 765, 788, 792, 320, 861, 786, 447, 293, 0,
	446, 382, 433, 438, 368, 362, 0, 292, 435, 366,
	361, 350, 328, 862, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 783, 0, 610, 0, 449, 0,
	0, 845, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 787, 0, 407, 388, 858, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 552, 0, 468, 634, 635, 636,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	553, 570, 537, 507, 470, 561, 504, 508, 509, 573,
	0, 0, 0, 461, 354, 355, 0, 333, 281, 282,
	629, 843, 384, 575, 608, 609, 500, 0, 857, 838,
	840, 841, 844, 848, 849, 850, 851, 852, 854, 856,
	860, 628, 0, 554, 569, 632, 568, 625, 390, 0,
	410, 566, 513, 0, 558, 532, 0, 559, 528, 563,
	0, 502, 0, 417, 442, 454, 471, 474, 503, 588,
	589, 590, 286, 473, 592, 593, 594, 595, 596, 597,
	598, 591, 859, 535, 512, 538, 453, 515, 514, 0,
	0, 549, 791, 550, 551, 374, 375, 376, 377, 846,
	576, 304, 472, 400, 0, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 542, 539, 637, 0, 599,
	600, 0, 0, 466, 467, 332, 339, 485, 341, 303,
	389, 334, 451, 348, 0, 478, 543, 479, 602, 605,
	603, 604, 381, 344, 345, 414, 349, 359, 403, 450,
	387, 408, 301, 441, 415, 363, 529, 556, 868, 842,
	867, 869, 870, 866, 871, 872, 853, 747, 0, 798,
	864, 863, 865, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 583, 582, 581, 580, 579,
	578, 577, 0, 0, 526, 428, 313, 275, 309, 310,
	317, 626, 623, 432, 627, 0, 283, 506, 357, 0,
	399, 331, 571, 572, 0, 0, 831, 805, 806, 807,
	744, 808, 802, 803, 745, 804, 832, 796, 828, 829,
	772, 799, 809, 827, 810, 830, 833, 834, 873, 874,
	816, 800, 247, 875, 813, 835, 826, 825, 811, 797,
	836, 837, 779, 774, 814, 815, 801, 819, 820, 821,
	746, 793, 794, 795, 817, 818, 775, 776, 777, 778,
	0, 0, 0, 457, 458, 459, 481, 0, 443, 505,
	624, 0, 0, 0, 0, 0, 0, 0, 555, 567,
	601, 0, 611, 612, 614, 616, 822, 618, 420, 0,
	619, 789, 630, 496, 497, 631, 607, 0, 739, 0,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 742, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 780, 547,
	498, 416, 370, 565, 564, 0, 0, 847, 855, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 770, 824, 823, 757, 767, 0,
	0, 299, 219, 493, 613, 495, 494, 758, 0, 759,
	763, 766, 762, 760, 761, 0, 839, 0, 0, 0,
	0, 0, 0, 726, 738, 0, 743, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	735, 736, 0, 0, 0, 0, 790, 0, 737, 0,
	0, 785, 764, 768, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 765, 788, 792, 320, 861, 786,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 862, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 783, 0, 610,
	0, 449, 0, 0, 845, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 787, 0, 407, 388, 858,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 843, 384, 575, 608, 609, 500,
	0, 857, 838, 840, 841, 844, 848, 849, 850, 851,
	852, 854, 856, 860, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 859, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 791, 550, 551, 374, 375,
	376, 377, 846, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 868, 842, 867, 869, 870, 866, 871, 872, 853,
	747, 0, 798, 864, 863, 865, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 831,
	805, 806, 807, 744, 808, 802, 803, 745, 804, 832,
	796, 828, 829, 772, 799, 809, 827, 810, 830, 833,
	834, 873, 874, 816, 800, 247, 875, 813, 835, 826,
	825, 811, 797, 836, 837, 779, 774, 814, 815, 801,
	819, 820, 821, 746, 793, 794, 795, 817, 818, 775,
	776, 777, 778, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 822,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	0, 739, 196, 61, 187, 158, 0, 0, 0, 0,
	0, 0, 386, 0, 511, 544, 533, 617, 499, 0,
	188, 0, 0, 0, 0, 0, 0, 179, 0, 326,
	0, 189, 356, 548, 530, 540, 531, 516, 517, 518,
	525, 336, 519, 520, 521, 491, 522, 492, 523, 524,
	132, 547, 498, 416, 370, 565, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 493, 613, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 157, 185, 194, 186, 117, 0, 606, 0,
	0, 610, 0, 449, 0, 0, 211, 0, 0, 0,
	421, 0, 0, 353, 184, 178, 177, 465, 0, 407,
	388, 223, 0, 0, 405, 358, 434, 396, 440, 423,
	448, 401, 397, 284, 424, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 411, 425, 426,
	427, 322, 306, 406, 307, 340, 308, 285, 314, 312,
	315, 413, 316, 287, 392, 431, 0, 335, 402, 365,
	288, 364, 393, 430, 429, 297, 456, 462, 463, 552,
	0, 468, 585, 586, 587, 477, 0, 398, 482, 483,
	484, 486, 487, 488, 489, 553, 570, 537, 507, 470,
	561, 504, 508, 509, 573, 0, 0, 0, 461, 354,
	355, 0, 333, 281, 282, 444, 319, 384, 575, 608,
	609, 500, 0, 562, 501, 510, 311, 534, 546, 545,
	380, 460, 214, 557, 560, 490, 224, 0, 554, 569,
	527, 568, 225, 390, 0, 410, 566, 513, 0, 558,
	532, 0, 559, 528, 563, 0, 502, 0, 417, 442,
	454, 471, 474, 503, 588, 589, 590, 286, 473, 592,
	593, 594, 595, 596, 597, 598, 591, 445, 535, 512,
	538, 453, 515, 514, 0, 0, 549, 469, 550, 551,
	374, 375, 376, 377, 337, 576, 304, 472, 400, 130,
	536, 0, 0, 0, 0, 0, 0, 0, 0, 541,
	542, 539, 222, 0, 599, 600, 0, 0, 466, 467,
	332, 339, 485, 341, 303, 389, 334, 451, 348, 0,
	478, 543, 479, 602, 605, 603, 604, 381, 344, 345,
	414, 349, 359, 403, 450, 387, 408, 301, 441, 415,
	363, 529, 556, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	583, 582, 581, 580, 579, 578, 577, 0, 0, 526,
	428, 313, 275, 309, 310, 317, 229, 294, 432, 230,
	0, 283, 506, 357, 159, 399, 331, 571, 572, 58,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 574, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 457, 458,
	459, 481, 0, 443, 505, 226, 45, 212, 215, 217,
	216, 0, 59, 555, 567, 601, 5, 611, 612, 614,
	616, 615, 618, 420, 196, 619, 135, 227, 496, 497,
	228, 607, 0, 0, 386, 0, 511, 544, 533, 617,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 548, 530, 540, 531, 516,
	517, 518, 525, 336, 519, 520, 521, 491, 522, 492,
	523, 524, 132, 547, 498, 416, 370, 565, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 613, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 2346, 2349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 0, 0, 610, 2350, 449, 0, 0, 0, 2345,
	0, 2344, 421, 2342, 2347, 353, 0, 0, 0, 465,
	0, 407, 388, 633, 0, 0, 405, 358, 434, 396,
	440, 423, 448, 401, 397, 284, 424, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 411,
	425, 426, 427, 322, 306, 406, 307, 340, 308, 285,
	314, 312, 315, 413, 316, 287, 392, 431, 2348, 335,
	402, 365, 288, 364, 393, 430, 429, 297, 456, 462,
	463, 552, 0, 468, 634, 635, 636, 477, 0, 398,
	482, 483, 484, 486, 487, 488, 489, 553, 570, 537,
	507, 470, 561, 504, 508, 509, 573, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 629, 319, 384,
	575, 608, 609, 500, 0, 562, 501, 510, 311, 534,
	546, 545, 380, 460, 0, 557, 560, 490, 628, 0,
	554, 569, 632, 568, 625, 390, 0, 410, 566, 513,
	0, 558, 532, 0, 559, 528, 563, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 588, 589, 590, 286,
	473, 592, 593, 594, 595, 596, 597, 598, 591, 445,
	535, 512, 538, 453, 515, 514, 0, 0, 549, 469,
	550, 551, 374, 375, 376, 377, 337, 576, 304, 472,
	400, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 541, 542, 539, 637, 0, 599, 600, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 543, 479, 602, 605, 603, 604, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 529, 556, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 583, 582, 581, 580, 579, 578, 577, 0,
	0, 526, 428, 313, 275, 309, 310, 317, 626, 623,
	432, 627, 0, 283, 506, 357, 159, 399, 331, 571,
	572, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 574, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 624, 0, 0,
	0, 0, 0, 0, 0, 555, 567, 601, 0, 611,
	612, 614, 616, 615, 618, 420, 0, 619, 0, 630,
	496, 497, 631, 607, 386, 0, 511, 544, 533, 617,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 548, 530, 540, 531, 516,
	517, 518, 525, 336, 519, 520, 521, 491, 522, 492,
	523, 524, 0, 547, 498, 416, 370, 565, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1285, 0, 0, 218, 0,
	0, 757, 767, 0, 0, 299, 219, 493, 613, 495,
	494, 758, 0, 759, 763, 766, 762, 760, 761, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 764, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 765, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 0, 0, 610, 0, 449, 0, 0, 0, 0,
	0, 0, 421, 0, 0, 353, 0, 0, 0, 465,
	0, 407, 388, 633, 0, 0, 405, 358, 434, 396,
	440, 423, 448, 401, 397, 284, 424, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 411,
	425, 426, 427, 322, 306, 406, 307, 340, 308, 285,
	314, 312, 315, 413, 316, 287, 392, 431, 0, 335,
	402, 365, 288, 364, 393, 430, 429, 297, 456, 462,
	463, 552, 0, 468, 634, 635, 636, 477, 0, 398,
	482, 483, 484, 486, 487, 488, 489, 553, 570, 537,
	507, 470, 561, 504, 508, 509, 573, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 629, 319, 384,
	575, 608, 609, 500, 0, 562, 501, 510, 311, 534,
	546, 545, 380, 460, 0, 557, 560, 490, 628, 0,
	554, 569, 632, 568, 625, 390, 0, 410, 566, 513,
	0, 558, 532, 0, 559, 528, 563, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 588, 589, 590, 286,
	473, 592, 593, 594, 595, 596, 597, 598, 591, 445,
	535, 512, 538, 453, 515, 514, 0, 0, 549, 469,
	550, 551, 374, 375, 376, 377, 337, 576, 304, 472,
	400, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 541, 542, 539, 637, 0, 599, 600, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 543, 479, 602, 605, 603, 604, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 529, 556, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 583, 582, 581, 580, 579, 578, 577, 0,
	0, 526, 428, 313, 275, 309, 310, 317, 626, 623,
	432, 627, 0, 283, 506, 357, 0, 399, 331, 571,
	572, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 574, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 624, 0, 0,
	0, 0, 0, 0, 0, 555, 567, 601, 0, 611,
	612, 614, 616, 615, 618, 420, 0, 619, 0, 630,
	496, 497, 631, 607, 196, 61, 187, 158, 0, 0,
	0, 0, 0, 0, 386, 656, 511, 544, 533, 617,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 548, 530, 540, 531, 516,
	517, 518, 525, 336, 519, 520, 521, 491, 522, 492,
	523, 524, 0, 547, 498, 416, 370, 565, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 662, 0,
	0, 0, 0, 0, 0, 661, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 613, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 660, 0,
	606, 0, 0, 610, 0, 449, 0, 0, 0, 0,
	0, 0, 421, 0, 0, 353, 0, 0, 0, 465,
	0, 407, 388, 633, 0, 0, 405, 358, 434, 396,
	440, 423, 448, 401, 397, 284, 424, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 411,
	425, 426, 427, 322, 306, 406, 307, 340, 308, 285,
	314, 312, 315, 413, 316, 287, 392, 431, 0, 335,
	402, 365, 288, 364, 393, 430, 429, 297, 456, 462,
	463, 552, 0, 468, 634, 635, 636, 477, 0, 398,
	482, 483, 484, 486, 487, 488, 489, 553, 570, 537,
	507, 470, 561, 504, 508, 509, 573, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 629, 319, 384,
	575, 608, 609, 500, 0, 562, 501, 510, 311, 534,
	546, 545, 380, 460, 0, 557, 560, 490, 628, 0,
	554, 569, 632, 568, 625, 390, 0, 410, 566, 513,
	0, 558, 532, 0, 559, 528, 563, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 588, 589, 590, 286,
	473, 592, 593, 594, 595, 596, 597, 598, 591, 445,
	535, 512, 538, 453, 515, 514, 0, 0, 549, 469,
	550, 551, 374, 375, 376, 377, 657, 659, 304, 472,
	400, 670, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 541, 542, 539, 637, 0, 599, 600, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 543, 479, 602, 605, 603, 604, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 529, 556, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 583, 582, 581, 580, 579, 578, 577, 0,
	0, 526, 428, 313, 275, 309, 310, 317, 626, 623,
	432, 627, 0, 283, 506, 357, 159, 399, 331, 571,
	572, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 574, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 624, 0, 0,
	0, 0, 0, 0, 0, 555, 567, 601, 0, 611,
	612, 614, 616, 615, 618, 420, 0, 619, 0, 630,
	496, 497, 631, 607, 386, 0, 511, 544, 533, 617,
	499, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 548, 530, 540, 531, 516,
	517, 518, 525, 336, 519, 520, 521, 491, 522, 492,
	523, 524, 0, 547, 498, 416, 370, 565, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 613, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 2505, 2508, 2509, 2510, 2511,
	2512, 2513, 0, 2518, 2514, 2515, 2516, 2517, 0, 2500,
	2501, 2502, 2503, 1081, 2484, 2506, 0, 2485, 382, 2486,
	2487, 2488, 2489, 1085, 2490, 2491, 2492, 2493, 2494, 2497,
	2498, 2495, 2496, 2504, 394, 360, 395, 343, 372, 371,
	373, 1109, 1111, 1113, 1115, 1118, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 0, 0, 610, 0, 449, 0, 0, 0, 0,
	0, 0, 421, 0, 0, 353, 0, 0, 0, 2499,
	0, 407, 388, 633, 0, 0, 405, 358, 434, 396,
	440, 423, 448, 401, 397, 284, 424, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 411,
	425, 426, 427, 322, 306, 406, 307, 340, 308, 285,
	314, 312, 315, 413, 316, 287, 392, 431, 0, 335,
	402, 365, 288, 364, 393, 430, 429, 297, 456, 462,
	463, 552, 0, 468, 634, 635, 636, 477, 0, 398,
	482, 483, 484, 486, 487, 488, 489, 553, 570, 537,
	507, 470, 561, 504, 508, 509, 573, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 629, 319, 384,
	575, 608, 609, 500, 0, 562, 501, 510, 311, 534,
	546, 545, 380, 460, 0, 557, 560, 490, 628, 0,
	554, 569, 632, 568, 625, 390, 0, 410, 566, 513,
	0, 558, 532, 0, 559, 528, 563, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 588, 589, 590, 286,
	473, 592, 593, 594, 595, 596, 597, 598, 591, 445,
	535, 512, 538, 453, 515, 514, 0, 0, 549, 469,
	550, 551, 374, 375, 376, 377, 337, 576, 304, 472,
	400, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 541, 542, 539, 637, 0, 599, 600, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 543, 479, 602, 605, 603, 604, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 529, 556, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 583, 582, 581, 580, 579, 578, 577, 0,
	0, 526, 428, 313, 275, 309, 310, 317, 626, 623,
	432, 627, 0, 283, 2507, 357, 0, 399, 331, 571,
	572, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 574, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 624, 0, 0,
	0, 0, 0, 0, 0, 555, 567, 601, 0, 611,
	612, 614, 616, 615, 618, 420, 0, 619, 0, 630,
	496, 497, 631, 607, 386, 0, 511, 544, 533, 617,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 548, 530, 540, 531, 516,
	517, 518, 525, 336, 519, 520, 521, 491, 522, 492,
	523, 524, 0, 547, 498, 416, 370, 565, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 613, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 2346, 2349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 0, 0, 610, 2350, 449, 0, 0, 0, 2345,
	0, 2344, 421, 2342, 2347, 353, 0, 0, 0, 465,
	0, 407, 388, 633, 0, 0, 405, 358, 434, 396,
	440, 423, 448, 401, 397, 284, 424, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 411,
	425, 426, 427, 322, 306, 406, 307, 340, 308, 285,
	314, 312, 315, 413, 316, 287, 392, 431, 2348, 335,
	402, 365, 288, 364, 393, 430, 429, 297, 456, 462,
	463, 552, 0, 468, 634, 635, 636, 477, 0, 398,
	482, 483, 484, 486, 487, 488, 489, 553, 570, 537,
	507, 470, 561, 504, 508, 509, 573, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 629, 319, 384,
	575, 608, 609, 500, 0, 562, 501, 510, 311, 534,
	546, 545, 380, 460, 0, 557, 560, 490, 628, 0,
	554, 569, 632, 568, 625, 390, 0, 410, 566, 513,
	0, 558, 532, 0, 559, 528, 563, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 588, 589, 590, 286,
	473, 592, 593, 594, 595, 596, 597, 598, 591, 445,
	535, 512, 538, 453, 515, 514, 0, 0, 549, 469,
	550, 551, 374, 375, 376, 377, 337, 576, 304, 472,
	400, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 541, 542, 539, 637, 0, 599, 600, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 543, 479, 602, 605, 603, 604, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 529, 556, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 583, 582, 581, 580, 579, 578, 577, 0,
	0, 526, 428, 313, 275, 309, 310, 317, 626, 623,
	432, 627, 0, 283, 506, 357, 0, 399, 331, 571,
	572, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 574, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 624, 0, 0,
	0, 0, 0, 0, 0, 555, 567, 601, 0, 611,
	612, 614, 616, 615, 618, 420, 0, 619, 0, 630,
	496, 497, 631, 607, 386, 0, 511, 544, 533, 617,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 548, 530, 540, 531, 516,
	517, 518, 525, 336, 519, 520, 521, 491, 522, 492,
	523, 524, 0, 547, 498, 416, 370, 565, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 613, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 2367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 0, 0, 610, 2366, 449, 0, 0, 0, 2372,
	2369, 2371, 421, 0, 2370, 353, 0, 0, 0, 465,
	0, 407, 388, 633, 0, 2364, 405, 358, 434, 396,
	440, 423, 448, 401, 397, 284, 424, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 411,
	425, 426, 427, 322, 306, 406, 307, 340, 308, 285,
	314, 312, 315, 413, 316, 287, 392, 431, 0, 335,
	402, 365, 288, 364, 393, 430, 429, 297, 456, 462,
	463, 552, 0, 468, 634, 635, 636, 477, 0, 398,
	482, 483, 484, 486, 487, 488, 489, 553, 570, 537,
	507, 470, 561, 504, 508, 509, 573, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 629, 319, 384,
	575, 608, 609, 500, 0, 562, 501, 510, 311, 534,
	546, 545, 380, 460, 0, 557, 560, 490, 628, 0,
	554, 569, 632, 568, 625, 390, 0, 410, 566, 513,
	0, 558, 532, 0, 559, 528, 563, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 588, 589, 590, 286,
	473, 592, 593, 594, 595, 596, 597, 598, 591, 445,
	535, 512, 538, 453, 515, 514, 0, 0, 549, 469,
	550, 551, 374, 375, 376, 377, 337, 576, 304, 472,
	400, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 541, 542, 539, 637, 0, 599, 600, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 543, 479, 602, 605, 603, 604, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 529, 556, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 583, 582, 581, 580, 579, 578, 577, 0,
	0, 526, 428, 313, 275, 309, 310, 317, 626, 623,
	432, 627, 0, 283, 506, 357, 0, 399, 331, 571,
	572, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 574, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 624, 0, 0,
	0, 0, 0, 0, 0, 555, 567, 601, 0, 611,
	612, 614, 616, 615, 618, 420, 0, 619, 0, 630,
	496, 497, 631, 607, 386, 0, 511, 544, 533, 617,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 548, 530, 540, 531, 516,
	517, 518, 525, 336, 519, 520, 521, 491, 522, 492,
	523, 524, 0, 547, 498, 416, 370, 565, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 613, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 2367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 0, 0, 610, 2366, 449, 0, 0, 0, 2372,
	2369, 2371, 421, 0, 2370, 353, 0, 0, 0, 465,
	0, 407, 388, 633, 0, 0, 405, 358, 434, 396,
	440, 423, 448, 401, 397, 284, 424, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 411,
	425, 426, 427, 322, 306, 406, 307, 340, 308, 285,
	314, 312, 315, 413, 316, 287, 392, 431, 0, 335,
	402, 365, 288, 364, 393, 430, 429, 297, 456, 462,
	463, 552, 0, 468, 634, 635, 636, 477, 0, 398,
	482, 483, 484, 486, 487, 488, 489, 553, 570, 537,
	507, 470, 561, 504, 508, 509, 573, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 629, 319, 384,
	575, 608, 609, 500, 0, 562, 501, 510, 311, 534,
	546, 545, 380, 460, 0, 557, 560, 490, 628, 0,
	554, 569, 632, 568, 625, 390, 0, 410, 566, 513,
	0, 558, 532, 0, 559, 528, 563, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 588, 589, 590, 286,
	473, 592, 593, 594, 595, 596, 597, 598, 591, 445,
	535, 512, 538, 453, 515, 514, 0, 0, 549, 469,
	550, 551, 374, 375, 376, 377, 337, 576, 304, 472,
	400, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 541, 542, 539, 637, 0, 599, 600, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 543, 479, 602, 605, 603, 604, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 529, 556, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 583, 582, 581, 580, 579, 578, 577, 0,
	0, 526, 428, 313, 275, 309, 310, 317, 626, 623,
	432, 627, 0, 283, 506, 357, 0, 399, 331, 571,
	572, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 574, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 624, 0, 0,
	0, 0, 0, 0, 0, 555, 567, 601, 0, 611,
	612, 614, 616, 615, 618, 420, 0, 619, 0, 630,
	496, 497, 631, 607, 386, 0, 511, 544, 533, 617,
	499, 0, 0, 0, 0, 0, 2066, 0, 0, 0,
	0, 326, 0, 0, 356, 548, 530, 540, 531, 516,
	517, 518, 525, 336, 519, 520, 521, 491, 522, 492,
	523, 524, 0, 547, 498, 416, 370, 565, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 2067, 0, 0, 0, 299, 219, 493, 613, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 1215, 1216, 1217, 1214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 0, 0, 610, 0, 449, 0, 0, 0, 0,
	0, 0, 421, 0, 0, 353, 0, 0, 0, 465,
	0, 407, 388, 633, 0, 0, 405, 358, 434, 396,
	440, 423, 448, 401, 397, 284, 424, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 411,
	425, 426, 427, 322, 306, 406, 307, 340, 308, 285,
	314, 312, 315, 413, 316, 287, 392, 431, 0, 335,
	402, 365, 288, 364, 393, 430, 429, 297, 456, 462,
	463, 552, 0, 468, 634, 635, 636, 477, 0, 398,
	482, 483, 484, 486, 487, 488, 489, 553, 570, 537,
	507, 470, 561, 504, 508, 509, 573, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 629, 319, 384,
	575, 608, 609, 500, 0, 562, 501, 510, 311, 534,
	546, 545, 380, 460, 0, 557, 560, 490, 628, 0,
	554, 569, 632, 568, 625, 390, 0, 410, 566, 513,
	0, 558, 532, 0, 559, 528, 563, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 588, 589, 590, 286,
	473, 592, 593, 594, 595, 596, 597, 598, 591, 445,
	535, 512, 538, 453, 515, 514, 0, 0, 549, 469,
	550, 551, 374, 375, 376, 377, 337, 576, 304, 472,
	400, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 541, 542, 539, 637, 0, 599, 600, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 543, 479, 602, 605, 603, 604, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 529, 556, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 583, 582, 581, 580, 579, 578, 577, 0,
	0, 526, 428, 313, 275, 309, 310, 317, 626, 623,
	432, 627, 0, 283, 506, 357, 0, 399, 331, 571,
	572, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 574, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 624, 0, 0,
	0, 0, 0, 0, 0, 555, 567, 601, 0, 611,
	612, 614, 616, 615, 618, 420, 196, 619, 0, 630,
	496, 497, 631, 607, 0, 0, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 132, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 2116, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 493,
	613, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 159, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 196, 619,
	0, 630, 496, 497, 631, 607, 0, 0, 386, 0,
	511, 544, 533, 617, 499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 548,
	530, 540, 531, 516, 517, 518, 525, 336, 519, 520,
	521, 491, 522, 492, 523, 524, 132, 547, 498, 416,
	370, 565, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	2102, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 493, 613, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 0, 0, 610, 0, 449,
	0, 0, 0, 0, 0, 0, 421, 0, 0, 353,
	0, 0, 0, 465, 0, 407, 388, 633, 0, 0,
	405, 358, 434, 396, 440, 423, 448, 401, 397, 284,
	424, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 411, 425, 426, 427, 322, 306, 406,
	307, 340, 308, 285, 314, 312, 315, 413, 316, 287,
	392, 431, 0, 335, 402, 365, 288, 364, 393, 430,
	429, 297, 456, 462, 463, 552, 0, 468, 634, 635,
	636, 477, 0, 398, 482, 483, 484, 486, 487, 488,
	489, 553, 570, 537, 507, 470, 561, 504, 508, 509,
	573, 0, 0, 0, 461, 354, 355, 0, 333, 281,
	282, 629, 319, 384, 575, 608, 609, 500, 0, 562,
	501, 510, 311, 534, 546, 545, 380, 460, 0, 557,
	560, 490, 628, 0, 554, 569, 632, 568, 625, 390,
	0, 410, 566, 513, 0, 558, 532, 0, 559, 528,
	563, 0, 502, 0, 417, 442, 454, 471, 474, 503,
	588, 589, 590, 286, 473, 592, 593, 594, 595, 596,
	597, 598, 591, 445, 535, 512, 538, 453, 515, 514,
	0, 0, 549, 469, 550, 551, 374, 375, 376, 377,
	337, 576, 304, 472, 400, 0, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 541, 542, 539, 637, 0,
	599, 600, 0, 0, 466, 467, 332, 339, 485, 341,
	303, 389, 334, 451, 348, 0, 478, 543, 479, 602,
	605, 603, 604, 381, 344, 345, 414, 349, 359, 403,
	450, 387, 408, 301, 441, 415, 363, 529, 556, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 583, 582, 581, 580,
	579, 578, 577, 0, 0, 526, 428, 313, 275, 309,
	310, 317, 626, 623, 432, 627, 0, 283, 506, 357,
	159, 399, 331, 571, 572, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 574, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 457, 458, 459, 481, 0, 443,
	505, 624, 0, 0, 0, 0, 0, 0, 0, 555,
	567, 601, 0, 611, 612, 614, 616, 615, 618, 420,
	0, 619, 0, 630, 496, 497, 631, 607, 386, 0,
	511, 544, 533, 617, 499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 1013, 0, 356, 548,
	530, 540, 531, 516, 517, 518, 525, 336, 519, 520,
	521, 491, 522, 492, 523, 524, 0, 547, 498, 416,
	370, 565, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 1020, 1021, 0, 0, 0, 0, 299,
	219, 493, 613, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1024, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 1007, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 995, 447, 293,
	994, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 0, 0, 610, 0, 449,
	0, 0, 0, 0, 0, 0, 421, 0, 0, 353,
	0, 0, 0, 465, 0, 407, 388, 633, 0, 0,
	405, 358, 434, 396, 440, 423, 448, 1011, 397, 284,
	424, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 411, 425, 426, 427, 322, 306, 406,
	307, 340, 308, 285, 314, 312, 315, 413, 316, 287,
	392, 431, 0, 335, 402, 365, 288, 364, 393, 430,
	429, 297, 456, 462, 463, 552, 0, 468, 634, 635,
	636, 477, 0, 398, 482, 483, 484, 486, 487, 488,
	489, 553, 570, 537, 507, 470, 561, 504, 508, 509,
	573, 0, 0, 0, 461, 354, 355, 0, 333, 281,
	282, 629, 319, 384, 575, 608, 609, 500, 0, 562,
	501, 510, 311, 534, 546, 545, 380, 460, 0, 557,
	560, 490, 628, 0, 554, 569, 632, 568, 625, 390,
	0, 410, 566, 513, 0, 558, 532, 0, 559, 528,
	563, 0, 502, 0, 417, 442, 454, 471, 474, 503,
	588, 589, 590, 286, 473, 592, 593, 594, 595, 596,
	597, 1012, 591, 445, 535, 512, 538, 453, 515, 514,
	0, 0, 549, 1015, 550, 551, 374, 375, 376, 377,
	337, 576, 1010, 472, 400, 0, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 541, 542, 539, 637, 0,
	599, 600, 0, 0, 466, 467, 332, 339, 485, 341,
	303, 389, 334, 451, 348, 0, 478, 543, 479, 602,
	605, 603, 604, 1022, 1008, 1018, 1009, 349, 359, 403,
	450, 387, 408, 301, 441, 415, 1019, 529, 556, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 583, 582, 581, 580,
	579, 578, 577, 0, 0, 526, 428, 313, 275, 309,
	310, 317, 626, 623, 432, 627, 0, 283, 506, 357,
	0, 399, 331, 571, 572, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 574, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 457, 458, 459, 481, 0, 443,
	505, 624, 0, 0, 0, 0, 0, 0, 0, 555,
	567, 601, 0, 611, 612, 614, 616, 615, 618, 420,
	196, 619, 0, 630, 496, 497, 631, 607, 0, 0,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 132, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1998, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 159, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 1020, 1021, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1024, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 995,
	447, 293, 994, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 1022, 2018, 1018, 2019, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 1019, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 2883,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 2886, 0, 0, 2885, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 1498, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 1496, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 1492, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 1496, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3919, 0, 218, 824, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 1496, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 2411, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 945, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 1496, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1704, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 2447, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 2449, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 2066, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 2067, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 3091, 3093, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 2469, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 1496, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 644, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 643, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 824, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3898, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 3677, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 3807, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3519, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3692, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 3608, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 3125, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1998, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 3330,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2987, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 1496, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 2449, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 2805,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2137, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 2566, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2527, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 2525, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 2302, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 1852, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 1981, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 1496, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 1886,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 1525, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 644, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 654, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 945, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	1475, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	1473, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 721, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 678,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 679, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 1968, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 1971, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 1945, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1961,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1949, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1955, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1943, 1977, 0, 0, 1944, 1946, 1948, 0, 1950,
	1951, 1952, 1956, 1957, 1958, 1960, 1963, 1964, 1965, 0,
	0, 0, 0, 0, 0, 0, 1953, 1962, 1954, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1969, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1966, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1942, 0, 0, 0, 0, 0,
	0, 1941, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1959, 0, 0, 0, 0,
	0, 0, 0, 0, 1947, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3536,
}

var yyPact = [...]int{
	3911, -1000, -1000, -1000, -310, 14829, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 48327, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 423, 48327,
	-306, 30347, 46467, -1000, -1000, 2641, -1000, 47087, 16701, 48327,
	514, 512, 48327, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 894, -1000, 50807,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 829, 4589,
	50187, 11705, -210, -1000, 1253, -34, 2513, 453, -191, -194,
	1046, 1055, 1051, 1051, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 222, 919, 47707,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 258, 251, 893, 919, 21665, 112,
	107, 1253, 404, -87, 241, -1000, 1127, 4048, 207, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11705, 11705, 14829, -349, 14829, 11705, 48327, 48327, -1000, -1000,
	-1000, -1000, -306, 47087, 829, 4589, 11705, 2513, 453, -191,
	-194, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -87, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 107, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5263, -1000, 1495, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2220, 3040,
	1491, 2512, 775, 46467, 48327, -1000, 154, 775, -1000, -1000,
	-1000, 1253, 3417, -1000, 48327, 48327, 205, 1782, -1000, 564,
	505, 391, 314, 1489, -1000, -1000, -1000, -1000, -1000, -1000,
	681, 3350, -1000, 48327, 48327, 3052, 48327, -1000, 2172, 729,
	-1000, 4850, 3209, 1339, 924, 3066, -1000, -1000, 3036, -1000,
	321, 309, 262, 688, 422, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 307, -1000, 3264, -1000, -1000, 325, -1000, -1000,
	316, -1000, -1000, -1000, 106, -1000, -1000, -1000, -1000, -1000,
	-1000, 9, -1000, -1000, 1074, 1995, 11705, 1885, -1000, 4080,
	1514, -1000, -1000, -1000, 7338, 13574, 13574, 13574, 13574, 48327,
	-1000, -1000, 2869, 11705, 3034, 3033, 3031, 3026, -1000, -1000,
	-1000, -1000, -1000, -1000, 1472, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1892, -1000, -1000, -1000, 14197, -1000,
	3012, 3011, 3003, 3002, 3001, 3000, 2999, 2998, 2997, 2995,
	2994, 2993, 2992, 2991, 2719, 16071, 2988, 2510, 2509, 2987,
	2983, 2979, 2503, 2978, 2968, 2967, 2719, 2719, 2965, 2964,
	2947, 2946, 2945, 2942, 2931, 2930, 2929, 2927, 2925, 2924,
	2923, 2922, 2921, 2920, 2916, 2914, 2913, 2910, 2908, 2905,
	2904, 2903, 2902, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1273, -1000, 2901, 3366,
	2713, -1000, 3251, 3249, 3244, 3239, -261, 2900, 2140, -1000,
	-1000, 114, 3349, 48327, -280, 48327, 2488, -96, 2486, -97,
	-1000, -58, -1000, -1000, 1039, -1000, 1011, -1000, 820, 820,
	820, 48327, 48327, 216, 972, 820, 820, 820, 820, 820,
	867, 820, 3277, 892, 891, 887, 883, 820, -45, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1781, 1776, 3121, 983,
	-1000, -1000, -1000, -1000, 1399, 48327, -1000, 2848, 2475, 1670,
	1670, 3336, 3336, 3276, 735, 733, 712, 1670, 577, -1000,
	1775, 1775, 1775, 1775, 1670, 509, 751, 3281, 3281, 96,
	1775, 82, 1670, 1670, 82, 1670, 1670, -1000, 1806, 217,
	-267, -1000, -1000, -1000, -1000, 1775, 1775, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3259, 3258, 829, 829, 48327, 829,
	212, 48327, 829, 829, 829, 48327, 831, 61, 49567, 48947,
	2237, 2172, 708, 705, 1401, 1734, -1000, 1699, 48327, 48327,
	1699, 1699, 24767, 24147, -1000, 48327, -1000, 3366, 2713, 2711,
	1613, 2710, 2713, -99, 2473, 829, 829, 829, 829, 829,
	300, 829, 829, 829, 829, 829, 48327, 48327, 45847, 829,
	829, 829, 829, 9830, 9830, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14829, 1930, 2023, 206, -8, -294,
	279, -1000, -1000, 48327, 3181, 291, -1000, -1000, -1000, 2727,
	-1000, 2836, 2836, 2836, 2836, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2836, 2836, 2842, 2899, -1000,
	-1000, 2825, 2825, 2825, 2727, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2840, 2840, 2841, 2841, 2840, 48327, -109, -1000, -1000, 11705,
	48327, 3199, 393, 2883, 775, -1000, -1000, 48327, 180, 394,
	3366, 3191, 3281, 3326, -1000, -1000, 1468, 2139, 2470, -1000,
	314, -1000, 554, 314, 1736, -1000, 1083, -1000, -1000, -1000,
	-1000, -1000, 48327, 9, 418, -1000, -1000, 2427, 2882, -1000,
	630, 1195, 1313, -1000, 344, 4127, 39027, 2172, 39027, 48327,
	-1000, -1000, -1000, -1000, -1000, -1000, 99, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 359, -1000, 11705, 11705, 11705, 11705, 11705, -1000, 714,
	12951, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13574, 13574,
	13574, 13574, 13574, 13574, 13574, 13574, 13574, 13574, 13574, 13574,
	2867, 1868, 13574, 13574, 13574, 13574, 27247, 1613, 2816, 1400,
	312, 1514, 1514, 1514, 1514, 11705, -1000, 1784, 1995, 11705,
	11705, 11705, 11705, 48327, -1000, -1000, 5562, 11705, 11705, 4290,
	11705, 3229, 11705, 11705, 11705, 2706, 6083, 48327, 11705, -1000,
	2699, 2694, -1000, -1000, 1940, 11705, -1000, -1000, 11705, -1000,
	-1000, 11705, 13574, 11705, -1000, 11705, 11705, 11705, -1000, -1000,
	1425, 3229, 3229, 3229, 1709, 11705, 11705, 3229, 3229, 3229,
	1694, 3229, 3229, 3229, 3229, 3229, 3229, 3229, 3229, 3229,
	3229, 2692, 2689, 2687, 11082, 3281, -210, -1000, 9207, 3191,
	3281, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -263, 2873, 48327, 2460, 2452, -318, 184, 479, 48327,
	1110, 413, 2138, -100, 2116, 38, 1044, 992, 1015, -1000,
	2440, 1785, 48327, 48327, 3223, -1000, 2872, 48327, 820, 820,
	820, -1000, 43987, 39027, 48327, 48327, 2172, 48327, 48327, 48327,
	820, 820, 820, 820, 48327, -1000, 3131, 39027, 3126, 831,
	-1000, 48327, 1399, 3222, 48327, 413, 3336, 13574, 13574, -1000,
	-1000, 11705, -1000, 45227, 1775, 1670, 1670, -1000, -1000, 48327,
	-1000, -1000, -1000, 1775, 48327, 1775, 1775, 3336, 1775, -1000,
	-1000, -1000, 1670, 1670, -1000, -1000, 11705, -1000, -1000, 1775,
	1775, -1000, -1000, 3336, 48327, 97, 3336, 3336, 98, -1000,
	-1000, -1000, 1670, 48327, 48327, 820, 48327, -1000, 48327, 48327,
	-1000, -1000, 48327, 48327, 4463, 48327, 43987, 44607, 3257, -1000,
	39027, 48327, 48327, 1397, -1000, 862, 36547, -1000, 1334, -1000,
	53, -1000, 30, 61, 1699, 61, 1699, 860, -1000, 618,
	758, 22907, 556, 39027, 6706, -1000, -1000, 1699, 1699, 6706,
	6706, 1520, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1391,
	-1000, 275, 3281, -1000, -1000, -1000, -1000, -1000, 2108, 413,
	48327, 43987, 39027, 2172, 48327, 829, 48327, 48327, 48327, 48327,
	48327, -1000, 2870, 1461, -1000, 3204, 48327, 48327, 48327, 48327,
	1223, -1000, -1000, 19801, 1455, 1223, -1000, 1817, -1000, 11705,
	14829, -246, 11705, 14829, 14829, 11705, 14829, -1000, 11705, 277,
	-1000, -1000, -1000, -1000, 2104, -1000, 2080, -1000, -1000, -1000,
	-1000, -1000, 2437, 2437, -1000, 2079, -1000, -1000, -1000, -1000,
	2068, -1000, -1000, 2066, -1000, -1000, -1000, -1000, -152, 2686,
	1074, -1000, 2436, 3065, -212, -1000, 21045, 48327, 48327, 393,
	-327, 1774, 1772, 1767, -1000, -212, -1000, 20423, 48327, 3281,
	-1000, -225, 3191, 11705, 48327, -1000, 3271, -1000, -1000, 314,
	-1000, 414, 389, -1000, -1000, -1000, -1000, -1000, -1000, 1439,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	417, -88, -89, 1384, -1000, 48327, -1000, -1000, 344, 39027,
	40887, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 264, -1000,
	-1000, 187, -1000, 859, 245, 1733, -1000, -1000, 221, 218,
	195, 917, 1995, -1000, 1839, 1839, 1819, -1000, 765, -1000,
	-1000, -1000, -1000, 2869, -1000, -1000, -1000, 2490, 2049, -1000,
	1812, 1812, 1524, 1524, 1524, 1524, 1524, 1826, 1826, -1000,
	-1000, -1000, 7338, 2867, 13574, 13574, 13574, 13574, 906, 906,
	3857, 2959, -1000, -1000, -1000, -1000, 11705, 188, 1813, -1000,
	11705, 2496, 1373, 2421, 1325, 1436, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2684, 2680, 2454, 3348,
	2677, 11705, -1000, -1000, 1720, 1703, 1698, -1000, 2132, 10459,
	-1000, -1000, -1000, 2676, 1435, 2665, -1000, -1000, -1000, 2664,
	1682, 1204, 2663, 1778, 2653, 2650, 2645, 2642, 1367, 11705,
	11705, 11705, 11705, 2631, 1679, 1674, 11705, 11705, 11705, 11705,
	2629, 11705, 11705, 11705, 11705, 11705, 11705, 11705, 11705, 11705,
	11705, 139, 139, 139, 1356, 1352, -1000, -1000, 1649, -1000,
	1995, -1000, -1000, 3191, -1000, 2866, 2065, 1349, -1000, -1000,
	-302, 2367, 48327, 48327, 183, 48327, 2435, -281, 48327, -1000,
	-1000, 2434, -1000, 2420, -1000, -1000, -1000, 1032, 1007, 997,
	2419, 3198, 3270, 849, 48327, 1098, 2864, 48327, 48327, 48327,
	282, -1000, -1000, 1288, -1000, 245, -26, 520, 1137, 3051,
	3347, -110, 48327, 48327, 48327, 48327, 3221, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 43367, -1000, 2863, 1648, -1000,
	-1000, -1000, 1514, 1514, 1995, 3050, 48327, 48327, 3336, 3336,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1775, 3336, 3336,
	1642, 1670, 1775, -1000, -1000, 1775, -327, -1000, 1775, -1000,
	-327, 1433, -327, 48327, -1000, -1000, -1000, 3219, 2848, 1338,
	-1000, -1000, -1000, 3325, 1467, 797, 797, 1005, 726, 3324,
	18561, -1000, 1575, 1277, 853, 3145, 330, -1000, 1575, -149,
	779, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 641, 639,
	1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
	1575, 1052, 1575, 1575, 1575, 1575, 1575, -1000, 1575, 2862,
	504, -1000, -1000, -1000, -1000, -1000, -1000, 737, 600, 280,
	3255, 401, -1000, 383, 1288, 3254, 416, 48327, 48327, 2986,
	1235, -1000, -1000, -1000, -1000, -1000, 27867, 27867, 22287, 27867,
	-1000, 214, 61, 17, -1000, -1000, 1334, 6706, 1334, 6706,
	2063, -1000, -1000, 851, -1000, -1000, 1137, -1000, 48327, 48327,
	-1000, -1000, 2861, 1766, -1000, -1000, 16071, -1000, 6706, 6706,
	-1000, -1000, 29727, 48327, -1000, -15, -1000, 32, 3191, -1000,
	-1000, 1114, -1000, -1000, 1323, 1137, 3064, 48327, 1114, 1114,
	1114, -1000, -1000, 17321, 48327, 48327, -1000, -1000, -1000, -1000,
	3336, 9830, -1000, 36547, -1000, -1000, 42747, -1000, 42127, 3336,
	1786, -1000, 14829, 2008, 201, -1000, 273, -299, 198, 1909,
	197, 1995, -1000, -1000, 2627, 2626, 1645, -1000, 1644, 2623,
	1640, 1627, 2055, -1000, 75, -1000, 3184, 1163, -1000, 2859,
	-1000, 1626, 3117, -1000, 1322, -1000, 1764, 1623, -1000, -1000,
	-1000, 11705, 41507, 11705, 1163, 1619, 3116, 1322, 3191, 2417,
	-1000, 1321, -1000, 2057, 1427, 202, -1000, -1000, -1000, 48327,
	829, 2427, 1618, 40887, 1269, -1000, 850, 1426, 1415, -1000,
	39027, 310, 39027, -1000, 39027, -1000, -1000, 399, -1000, 48327,
	3186, -1000, -1000, -1000, 2367, 1763, -325, 48327, -1000, -1000,
	-1000, -1000, -1000, 1615, -1000, 906, 906, 3857, 2703, -1000,
	13574, -1000, 13574, 2779, -1000, 1739, -1000, 11705, 1967, 5157,
	11705, 5157, 1379, 26007, 48327, -1000, -1000, 11705, 11705, -1000,
	2746, -1000, -1000, -1000, -1000, 11705, 11705, 2390, -1000, 48327,
	-1000, -1000, -1000, -1000, 26007, -1000, 13574, -1000, -1000, -1000,
	-1000, 11705, 1241, 1241, 2714, 1610, 139, 139, 139, 2668,
	2643, 2632, 1608, 139, 2619, 2608, 2477, 2467, 2459, 2443,
	2433, 2426, 2407, 2383, -1000, 2858, -1000, -1000, 1936, 12328,
	9207, -1000, -1000, 311, 1316, 2054, 2410, 137, -1000, 1760,
	-1000, 2409, 48327, 48327, 1096, -1000, 48327, 3346, -1000, 2404,
	-1000, -1000, -1000, 993, 2400, -1000, 457, 1935, 181, 293,
	2617, 1315, -1000, -1000, 48327, -1000, -1000, -1000, 17321, 2848,
	2855, 2848, 140, 1575, 623, 39027, 696, -1000, 48327, 2060,
	1747, 3063, 776, 3179, 48327, 2854, 388, 2853, 2851, 3218,
	503, 5385, 48327, 1208, -1000, 1411, 4048, -1000, 48327, -1000,
	2172, -1000, 1670, -1000, -1000, 3336, -1000, -1000, 11705, 11705,
	3336, 1670, 1670, -1000, 1775, -1000, 48327, -1000, -327, 503,
	5385, 3216, 4779, 572, 2329, -1000, 48327, -1000, -1000, -1000,
	805, -1000, 1000, 820, 48327, 1855, 1000, 1854, 2850, -1000,
	-1000, 48327, 48327, 48327, 48327, -1000, -1000, 48327, -1000, 48327,
	48327, 48327, 48327, 48327, 40267, -1000, 48327, 48327, -1000, 48327,
	1852, 48327, 1844, 3178, -1000, 1575, 1575, 942, -1000, -1000,
	602, -1000, 40267, 2053, 2051, 2048, 2017, 2399, 2398, 2393,
	1575, 1575, 2014, 2392, 39647, 2391, 1158, 2005, 2003, 2001,
	2042, 2382, 880, -1000, 2374, 2031, 2027, 2024, 48327, 2849,
	2281, 501, -1000, -1000, 1935, 140, 1575, 398, 48327, 1746,
	1745, 623, 516, -27, 23527, -1000, -1000, -1000, 48327, 36547,
	36547, 36547, 36547, 36547, -1000, 3099, 3080, 3094, -1000, 3083,
	3082, 3090, 3070, 48327, 36547, 2848, -1000, 39647, -1000, -1000,
	-1000, 1613, 1607, 2950, 984, 11705, -1000, -1000, 46, 22,
	-1000, -1000, -1000, -1000, 39027, 2373, 556, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3269, 48327, 48327, 838, 2616, 1306,
	-1000, -1000, -1000, 5385, 2836, 2836, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2836, 2836, 2842, -1000, -1000,
	2825, 2825, 2825, 2727, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2840, 2840, 2841, 2841, 2840, -1000,
	-1000, 3334, -1000, 1297, -1000, -1000, 1403, -1000, 3334, 1793,
	-312, 14829, 1773, 1629, -1000, 11705, 14829, 11705, -248, 369,
	-251, -1000, -1000, -1000, 2371, -1000, -1000, -1000, 2000, -1000,
	1991, -1000, 167, 179, 1832, -212, 9207, 402, 48327, -212,
	48327, 9207, -1000, 48327, 177, -338, -339, 169, 395, -212,
	3269, 75, 11705, 3149, -1000, -1000, 48327, 1989, -1000, -1000,
	-1000, 3341, 39027, 2172, 1531, 38407, -1000, 324, -1000, 261,
	589, 2370, -1000, 882, 136, 2369, 2367, -1000, -1000, -1000,
	-1000, 13574, 1514, -1000, -1000, -1000, 1995, 11705, 2615, -1000,
	975, 975, 2266, 2614, 2609, -1000, 2836, 2836, -1000, 2727,
	2825, 2727, 975, 975, 2586, -1000, 2047, 2338, -1000, 2327,
	2323, 11705, -1000, 2585, 3708, 1245, -53, -180, 139, 139,
	-1000, -1000, -1000, -1000, 139, 139, 139, 139, -1000, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 777,
	-90, -271, -91, -276, -1000, 2582, 1293, -1000, -1000, -1000,
	-1000, -1000, 4290, 1290, 535, 535, 2367, 2364, -1000, 848,
	2353, 1027, 48327, 2336, -284, -1000, -1000, 2332, -1000, -1000,
	48327, 2330, -1000, 591, 48327, 48327, 2328, 2316, 1098, 5385,
	2581, 3214, 17941, 3211, 2155, -1000, -1000, -1000, 29107, 578,
	-1000, -1000, -1000, 704, 296, 1987, 566, -1000, 48327, 507,
	3135, 1744, 2314, 48327, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3179, -1000, 991, 451, 35307, 15451, -1000, 405, 48327,
	-1000, 17941, 17941, 405, 454, 1769, -1000, 775, 1164, 148,
	36547, 48327, -1000, 35927, 2580, -1000, 1137, 3336, -1000, 1995,
	1995, -327, 3336, 3336, 1670, -1000, -1000, 454, -1000, 405,
	-1000, 1567, 19181, 555, 502, 500, -1000, 657, -1000, -1000,
	771, 3144, 5385, -1000, 48327, -1000, 48327, -1000, 48327, 48327,
	820, 11705, 3144, 48327, 839, -1000, 1117, 465, 406, 782,
	782, 1284, -1000, 3195, -1000, -1000, 1275, -1000, -1000, -1000,
	-1000, 48327, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26007,
	26007, 3243, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2313, 2312, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 48327, 1605, -1000, 1732,
	1977, 2310, 2155, 29107, 1726, 1699, 2309, 2307, 578, 2060,
	1721, 881, 48327, -1000, 1119, 48327, 48327, -1000, 1255, -1000,
	1718, 3044, 3062, 3044, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3086, -1000, 3084, -1000, -1000, -1000, 1255, -1000, -1000,
	-1000, -1000, -1000, 984, -1000, 3268, 1000, 1000, 1000, 2579,
	-1000, -1000, -1000, 1269, 2578, -1000, -1000, -1000, 3361, -1000,
	-1000, -1000, -1000, -1000, -1000, 17321, 3161, 3332, 3323, 37787,
	3332, -1000, -312, 1652, -1000, 1916, 193, 1878, 48327, -1000,
	-1000, -1000, 2576, 2575, -228, 186, 3321, 3320, 1077, -1000,
	2570, 1256, -212, -1000, -1000, 1163, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -212, -1000, 1163, -1000, 167, -1000, -1000,
	3152, -1000, -1000, 2172, -1000, 254, -1000, -1000, -1000, -1000,
	-1000, -1000, 226, -1000, 48327, -1000, 1219, 135, -1000, 1995,
	-1000, -1000, -1000, -1000, -1000, 5157, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11705, -1000, -1000,
	-1000, 2272, -1000, -1000, 11705, 2567, 2306, 2564, 2304, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3366, -1000, 3319, 1604, 2557,
	2540, 1594, 2537, 2536, -1000, 11705, 2535, 4290, 956, 2303,
	956, -1000, -1000, 408, 28487, 48327, 3339, -1000, 48327, 2302,
	-1000, -1000, 1935, 590, 642, -1000, -1000, -1000, -1000, 855,
	405, 2534, 1166, -1000, -1000, -1000, -1000, 405, -1000, 2299,
	242, -1000, -1000, -1000, -1000, 2292, 2283, 1975, -1000, -1000,
	2012, 1451, 257, -1000, -1000, -1000, -1000, -1000, -1000, 2147,
	48327, 37167, 2154, 1715, -329, -1000, 2820, -1000, 1575, 1575,
	1575, 48327, 1587, -1000, 1575, 1575, 2533, -1000, -1000, 2531,
	2530, -124, 781, 1691, 1636, -1000, 1974, 27867, 36547, 35927,
	1213, -1000, 1380, -1000, -1000, -1000, -1000, -1000, -1000, 3336,
	781, -1000, 550, 1970, 13574, 2805, 13574, 2804, 567, 2789,
	1586, -1000, 48327, -1000, -1000, 48327, 3942, 2784, -1000, 2778,
	3049, 529, 2773, 2772, 48327, 2234, -1000, 3144, 48327, 764,
	3154, -1000, -1000, -1000, 428, -1000, -1000, 606, -1000, 48327,
	-1000, 48327, -1000, 1509, -1000, 26007, -1000, -1000, 1566, -1000,
	2281, 2279, 4290, -1000, -1000, 242, 2276, 6706, -1000, -1000,
	-1000, 3135, 2269, 2147, 48327, -1000, 48327, 1119, 1119, 3366,
	48327, 9207, -1000, -1000, 11705, 2771, -1000, 11705, -1000, -1000,
	-1000, -1000, -1000, 2754, 3146, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1777, -1000, 11705, 11705, -1000, -1000, 817, 14829,
	-253, 338, -1000, -1000, -1000, -230, 2260, -1000, -1000, 3315,
	2254, 2175, 48327, -1000, -1000, 1163, 1163, -228, -1000, -1000,
	1137, -1000, -1000, 1090, 643, -1000, 2529, 2228, -1000, 2193,
	139, -1000, 139, -1000, 237, 11705, -1000, 2248, -1000, -1000,
	-1000, 2245, -1000, -1000, 2170, -1000, 2519, -1000, 2243, -1000,
	-1000, 48327, -1000, -1000, 1025, 2241, -335, 2240, 1935, 1935,
	48327, 5385, -134, -124, 17941, -134, -1000, -1000, 392, -1000,
	-1000, 410, -1000, -1000, 1998, 626, -1000, -1000, 2238, 631,
	-1000, 1119, -1000, 1708, 1874, 2206, 33447, 26007, 27247, 2232,
	-1000, -1000, 35307, 1777, 1777, 5488, 359, 51307, -1000, 2751,
	1061, 1606, -1000, 1966, -1000, 1963, -1000, 3336, 1213, 147,
	-1000, -1000, 1530, -1000, 1061, 2329, 3314, -1000, 3527, 48327,
	3183, 48327, 2741, 1704, 13574, -1000, 771, 3115, -1000, -1000,
	3942, -1000, -1000, 1862, 13574, -1000, -1000, 2231, 27247, 959,
	1702, 1696, 921, 2738, -1000, 610, 3358, -1000, -1000, -1000,
	935, 2735, -1000, 1830, 1827, -1000, 48327, -1000, 33447, 33447,
	648, 648, 33447, 33447, 2731, 782, -1000, -1000, 13574, -1000,
	-1000, 1575, -1000, -1000, -1000, 1575, 1429, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2154, -1000, -1000, 1114, -1000, 3281,
	-1000, -1000, 1995, 48327, 1995, 34687, -1000, 3313, 3300, -1000,
	1995, 252, -1000, -312, 48327, 48327, -232, 1961, -1000, 2227,
	182, -1000, -1000, 1111, -230, -235, 98, 26007, 1612, -1000,
	-1000, -1000, -1000, -1000, 2464, -1000, 916, -1000, -1000, -1000,
	1074, 2388, 2343, -1000, -1000, -1000, -1000, 48327, -1000, 2201,
	-1000, 2226, 2224, 568, -107, -1000, -1000, 420, -1000, -1000,
	-1000, 592, 2183, -1000, -1000, 407, -1000, -1000, -1000, 2147,
	2222, -1000, -1000, 129, -1000, 1611, 1564, -1000, 2727, 11705,
	-1000, -1000, -1000, -1000, -1000, -1000, 763, -1000, 405, 5623,
	-1000, 1277, 26627, -1000, 1090, 763, 504, 32207, 685, 302,
	-1000, 1959, -1000, -1000, 3366, -1000, 653, -1000, 562, -1000,
	1512, -1000, 1506, 34067, 1952, 2897, -1000, 5560, 889, -1000,
	-1000, 3857, -1000, -1000, -1000, -1000, -1000, -1000, 2221, 2212,
	-1000, -1000, -1000, -1000, -1000, 1949, 2726, 31, 3235, 2210,
	-1000, -1000, 2725, 1501, 1481, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1450, 1437, 33447, -1000, -1000, 3857,
	1947, 26007, 1575, -1000, -1000, 1423, 1418, -1000, -1000, -1000,
	-1000, -1000, -296, -1000, -1000, -1000, 2722, -1000, -1000, 3298,
	-232, -238, 2209, 161, 189, -1000, 2208, -1000, -1000, 710,
	-218, 132, 120, 117, -1000, -1000, -1000, 11705, -1000, -1000,
	-1000, 118, -1000, 1597, -1000, -1000, 1935, 48327, 603, -1000,
	-1000, -1000, -1000, 219, -1000, -1000, -1000, -1000, -1000, -1000,
	2206, 2204, -1000, 33447, 3195, 2157, 543, 3296, -1000, 51307,
	-1000, 1575, -1000, 543, 1417, -1000, 1575, 1575, -1000, 464,
	-1000, 1584, -1000, 1926, -1000, 3281, -1000, 458, -1000, 548,
	-1000, -1000, -1000, 1390, -1000, -1000, -1000, 5560, 553, -1000,
	741, 2721, -1000, -1000, 2271, 11705, 2719, 1575, 2233, -103,
	33447, 3048, 3047, 3046, 3045, 1385, -1000, -1000, 26007, -1000,
	-1000, 32827, -1000, 48327, 2175, -1000, -1000, 2203, -1000, 806,
	174, 189, -1000, 3295, 175, 3293, 3288, 1066, 1801, -1000,
	152, 146, 144, -1000, -1000, -1000, -1000, -1000, 2201, 2200,
	2198, 561, -1000, 315, -1000, -1000, -1000, 320, -1000, -1000,
	3195, -1000, 3287, 572, -1000, 26007, -1000, -1000, 32207, 1777,
	1777, -1000, -1000, 1905, -1000, -1000, -1000, -1000, 1896, -1000,
	-1000, -1000, 1374, -1000, 48327, 933, 8584, -1000, 2061, -1000,
	48327, -1000, 3056, -1000, 292, 1358, 320, 648, 320, 648,
	320, 648, 320, 648, 303, -1000, -1000, -1000, 1351, -1000,
	-1000, -1000, 2718, 1887, 186, 171, 3284, -1000, 2175, 3283,
	2175, 2175, -1000, 138, 710, -1000, -1000, -1000, -1000, -1000,
	-1000, 2197, -1000, -1000, -1000, -1000, 1575, 1575, 2190, 2187,
	443, -1000, -1000, -1000, 31587, 555, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 553, 51307, -1000, 8584, 1347, -1000, 1995,
	-1000, 782, -1000, -1000, 3055, 2989, 3345, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 48327, 3233, 25387,
	155, -1000, -1000, -1000, 2186, -1000, 2175, -1000, -1000, 1570,
	-1000, -269, 1884, 1877, -1000, -1000, 48327, -1000, 48327, 550,
	-1000, 51307, 1302, -1000, 8584, -1000, -1000, 3354, -1000, 3352,
	903, 903, 320, 320, 320, 320, -1000, -1000, 48327, -1000,
	1185, -1000, -1000, -1000, 1254, -1000, -1000, -1000, -1000, 2173,
	-1000, -1000, 2168, -1000, -1000, -1000, 1168, 2329, -1000, -1000,
	-1000, -1000, -1000, 1953, 614, -1000, 1056, -1000, 1561, -1000,
	30967, 48327, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 48327,
	7961, -1000, 1118, -1000, -1000, 1995, 48327, -1000,
}

var yyPgo = [...]int{
	0, 186, 3378, 252, 184, 4016, 109, 263, 243, 241,
	259, 4014, 4013, 4012, 4011, 3173, 3171, 4010, 4009, 3994,
	3993, 3992, 3991, 3990, 3989, 3988, 3986, 3984, 3982, 3977,
	3976, 3973, 3971, 3970, 3968, 3966, 3960, 3959, 3958, 3957,
	3947, 3946, 3941, 3938, 3937, 3936, 3935, 256, 3934, 3933,
	3932, 3931, 3930, 3929, 3928, 3923, 3922, 3921, 3918, 3917,
	3916, 3915, 3914, 3910, 3907, 3906, 3905, 3903, 3901, 3900,
	3896, 3895, 3894, 3893, 3892, 3891, 3890, 3889, 3882, 253,
	3877, 3876, 219, 3875, 3169, 3871, 3869, 3868, 3867, 3866,
	3863, 3862, 3861, 247, 3860, 3859, 3844, 3842, 3841, 3838,
	3837, 3836, 3835, 3834, 3829, 3827, 245, 3823, 3821, 3820,
	3819, 265, 3818, 230, 3817, 180, 153, 3816, 3815, 3814,
	3813, 3812, 3810, 3809, 3808, 3807, 3806, 3805, 3804, 3803,
	246, 196, 71, 3802, 50, 3799, 3798, 222, 3797, 155,
	3795, 156, 3794, 3789, 3788, 3787, 3786, 3784, 3783, 3782,
	3781, 3779, 3777, 3776, 3775, 3774, 3773, 3772, 3771, 3770,
	3767, 3762, 3761, 3760, 3759, 51, 3758, 266, 3757, 79,
	3755, 178, 3754, 82, 3753, 54, 134, 269, 2875, 258,
	261, 194, 177, 3752, 3751, 313, 3750, 164, 235, 162,
	103, 29, 3748, 140, 3747, 272, 47, 43, 254, 148,
	58, 167, 136, 3746, 216, 104, 118, 3745, 3744, 147,
	3743, 238, 190, 3742, 114, 3740, 3739, 3738, 3737, 3735,
	201, 195, 3734, 3730, 137, 3723, 3720, 72, 135, 3718,
	84, 151, 173, 126, 3717, 2115, 130, 92, 3716, 133,
	110, 3715, 86, 3714, 3713, 3712, 3709, 191, 3708, 3706,
	152, 77, 3705, 3704, 3703, 67, 3702, 87, 3699, 59,
	3698, 64, 3697, 3696, 3695, 3692, 3690, 3688, 3685, 3684,
	3683, 3682, 3681, 3680, 55, 3678, 3665, 7, 15, 14,
	3663, 26, 3660, 175, 3659, 3658, 168, 3657, 198, 3656,
	3655, 102, 97, 3650, 99, 171, 3649, 9, 27, 78,
	3646, 3645, 225, 1370, 112, 157, 3644, 279, 3643, 3642,
	3641, 163, 3640, 3639, 1660, 3638, 3637, 3636, 3631, 3630,
	3629, 57, 3628, 1, 223, 41, 3627, 139, 142, 3625,
	39, 31, 3623, 44, 127, 208, 141, 107, 3621, 3619,
	3618, 267, 199, 106, 45, 0, 105, 227, 158, 3617,
	3616, 3615, 268, 3614, 240, 207, 237, 262, 270, 187,
	3613, 3607, 76, 3606, 165, 30, 53, 161, 74, 21,
	234, 3605, 1412, 8, 210, 3604, 209, 3603, 197, 16,
	116, 154, 3599, 3596, 34, 273, 3595, 3594, 3591, 138,
	3589, 3588, 169, 81, 3587, 3586, 3582, 3581, 38, 3580,
	37, 13, 3578, 113, 3577, 251, 3574, 257, 146, 179,
	188, 159, 226, 236, 91, 85, 3573, 1699, 150, 108,
	22, 3572, 232, 3571, 182, 125, 3570, 89, 3566, 249,
	271, 212, 3565, 192, 10, 48, 36, 28, 49, 12,
	260, 205, 3563, 3562, 18, 52, 3560, 65, 3559, 19,
	3558, 3557, 40, 3556, 66, 5, 3555, 3553, 17, 20,
	3552, 35, 211, 176, 128, 101, 80, 3551, 3550, 56,
	183, 3549, 145, 166, 174, 3548, 83, 3547, 3546, 3545,
	3544, 296, 3542, 277, 3540, 3534, 3531, 3528, 3525, 3523,
	3522, 3521, 3519, 221, 3518, 117, 42, 3517, 3516, 3515,
	3514, 88, 149, 3512, 3511, 3510, 3509, 33, 143, 3508,
	11, 3507, 25, 23, 32, 3506, 111, 3505, 3, 193,
	3504, 3503, 4, 3501, 3499, 2, 3497, 3494, 132, 3492,
	100, 24, 170, 115, 3491, 3490, 98, 214, 144, 3489,
	3487, 95, 255, 206, 3486, 93, 250, 264, 3485, 220,
	3484, 3482, 3481, 3480, 3479, 3478, 1157, 3477, 3476, 244,
	75, 96, 3475, 231, 122, 3473, 3472, 90, 172, 129,
	124, 61, 94, 3469, 119, 204, 3465, 202, 3464, 239,
	3463, 3461, 121, 3460, 3454, 3450, 3437, 203, 3433, 3430,
	200, 233, 3419, 3417, 274, 3416, 3411, 3408, 3406, 3405,
	3404, 3396, 3391, 3390, 3385, 242, 537, 3381,
}

//line mysql_sql.y:12509
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 600, 603, 603, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 121,
	121, 336, 336, 337, 337, 123, 332, 332, 331, 331,
	124, 125, 126, 579, 579, 127, 128, 157, 578, 578,
	159, 159, 159, 159, 159, 452, 122, 122, 122, 122,
	122, 163, 163, 163, 163, 163, 120, 585, 585, 585,
	586, 586, 117, 146, 145, 148, 148, 147, 147, 144,
	144, 140, 143, 143, 142, 142, 141, 136, 138, 138,
	137, 139, 139, 118, 106, 119, 527, 527, 526, 526,
	525, 525, 477, 477, 478, 478, 323, 323, 323, 524,
	524, 524, 523, 523, 522, 522, 521, 521, 519, 519,
	520, 518, 517, 517, 517, 515, 515, 515, 511, 511,
	513, 512, 512, 514, 506, 506, 509, 509, 507, 507,
	507, 507, 510, 505, 505, 505, 504, 504, 105, 105,
	105, 419, 419, 104, 104, 433, 433, 433, 433, 433,
	431, 431, 431, 431, 431, 431, 430, 430, 429, 429,
	434, 434, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 94, 94, 94, 94, 94, 94, 99,
	99, 99, 100, 591, 591, 590, 590, 592, 592, 592,
	592, 593, 593, 97, 97, 97, 98, 428, 428, 428,
	95, 96, 96, 418, 418, 423, 423, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
	427, 427, 427, 425, 425, 424, 424, 426, 426, 88,
	88, 88, 91, 90, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 89, 89, 89, 89, 89, 89, 83,
	83, 83, 83, 83, 82, 82, 84, 84, 415, 415,
	414, 101, 101, 102, 588, 588, 587, 589, 589, 589,
	589, 103, 109, 109, 109, 109, 109, 109, 109, 109,
	108, 108, 111, 111, 110, 112, 93, 93, 93, 93,
	93, 93, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 552, 552, 552, 554, 554,
	350, 351, 604, 353, 349, 349, 349, 548, 548, 549,
	550, 551, 551, 551, 107, 14, 210, 210, 451, 451,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	13, 81, 86, 86, 87, 287, 287, 288, 282, 282,
	289, 289, 162, 290, 290, 290, 295, 295, 296, 296,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 269, 269, 269, 264, 264, 264, 264, 265,
	265, 266, 266, 267, 267, 267, 267, 268, 268, 342,
	342, 291, 291, 291, 293, 293, 292, 286, 284, 284,
	284, 284, 284, 284, 284, 285, 285, 285, 285, 294,
	294, 79, 85, 85, 85, 85, 566, 566, 80, 577,
	577, 481, 481, 364, 364, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 487, 488, 360, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 54, 57,
	58, 161, 53, 53, 53, 404, 404, 52, 605, 605,
	335, 335, 67, 66, 56, 68, 69, 70, 71, 72,
	73, 51, 65, 65, 65, 65, 65, 65, 65, 65,
	76, 500, 500, 607, 607, 607, 74, 75, 480, 480,
	480, 64, 63, 62, 61, 60, 60, 50, 50, 49,
	49, 55, 152, 59, 153, 153, 357, 357, 357, 359,
	359, 355, 606, 606, 447, 447, 358, 358, 48, 48,
	48, 48, 77, 356, 356, 334, 354, 354, 354, 12,
	12, 10, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 26,
	27, 29, 412, 412, 409, 28, 20, 19, 19, 23,
	22, 18, 18, 21, 24, 25, 25, 9, 9, 9,
	9, 15, 15, 16, 182, 182, 236, 236, 560, 560,
	556, 556, 557, 557, 557, 558, 558, 559, 559, 113,
	494, 494, 494, 494, 494, 494, 8, 8, 205, 205,
	493, 493, 493, 493, 493, 493, 416, 416, 416, 537,
	537, 537, 538, 204, 204, 199, 199, 495, 495, 381,
	539, 539, 503, 503, 502, 502, 501, 501, 202, 202,
	203, 203, 185, 185, 131, 131, 508, 508, 508, 508,
	516, 516, 476, 476, 274, 274, 325, 325, 326, 326,
	175, 175, 176, 176, 176, 176, 176, 176, 594, 594,
	595, 596, 597, 597, 598, 598, 598, 599, 599, 599,
	599, 599, 545, 545, 547, 547, 546, 201, 201, 197,
	197, 198, 198, 198, 196, 196, 195, 194, 194, 193,
	191, 191, 191, 192, 192, 192, 209, 209, 178, 178,
	178, 177, 177, 177, 177, 177, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 179, 179,
	553, 553, 553, 482, 482, 482, 490, 490, 304, 304,
	305, 305, 486, 486, 303, 303, 180, 180, 181, 181,
	181, 181, 302, 302, 301, 190, 190, 189, 188, 188,
	188, 183, 183, 183, 183, 184, 313, 313, 312, 312,
	311, 311, 311, 311, 116, 129, 129, 130, 208, 208,
	310, 309, 309, 309, 309, 207, 207, 206, 206, 200,
	200, 187, 187, 187, 187, 308, 186, 306, 584, 584,
	583, 583, 582, 580, 580, 580, 581, 581, 581, 581,
	529, 529, 529, 529, 529, 343, 343, 343, 348, 348,
	346, 346, 346, 346, 346, 352, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 39, 219,
	220, 40, 221, 221, 222, 222, 223, 223, 224, 225,
	226, 226, 226, 226, 38, 211, 211, 212, 212, 213,
	213, 214, 215, 215, 215, 218, 216, 217, 217, 602,
	602, 601, 37, 37, 30, 166, 166, 167, 167, 167,
	169, 169, 270, 270, 270, 168, 168, 170, 170, 170,
	561, 563, 563, 565, 564, 564, 564, 567, 567, 567,
	567, 567, 568, 568, 568, 568, 569, 569, 31, 149,
	149, 173, 173, 154, 572, 572, 572, 571, 571, 573,
	573, 574, 574, 329, 329, 330, 330, 164, 165, 165,
	156, 151, 172, 172, 172, 172, 172, 174, 174, 238,
	238, 150, 155, 158, 160, 562, 570, 570, 570, 413,
	413, 410, 411, 411, 408, 407, 407, 407, 576, 576,
	575, 575, 575, 344, 344, 32, 403, 403, 405, 406,
	406, 406, 397, 397, 397, 397, 36, 401, 401, 402,
	402, 402, 402, 402, 402, 402, 398, 398, 400, 400,
	396, 396, 396, 396, 396, 396, 396, 35, 171, 171,
	395, 395, 392, 392, 390, 390, 391, 391, 389, 389,
	389, 393, 393, 43, 78, 44, 45, 46, 42, 394,
	394, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 133, 132, 132, 132, 132, 132, 135, 135, 328,
	328, 327, 327, 134, 271, 271, 41, 249, 249, 468,
	468, 463, 463, 463, 463, 463, 484, 484, 484, 464,
	464, 464, 465, 465, 465, 467, 467, 467, 466, 466,
	466, 466, 466, 483, 483, 485, 485, 485, 435, 435,
	436, 436, 436, 439, 439, 455, 455, 456, 456, 454,
	454, 461, 461, 460, 460, 459, 459, 458, 458, 457,
	457, 457, 457, 450, 450, 449, 449, 437, 437, 437,
	437, 437, 438, 438, 438, 448, 448, 453, 453, 300,
	300, 299, 299, 257, 257, 258, 258, 298, 298, 255,
	255, 256, 256, 256, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	535, 535, 536, 260, 260, 272, 272, 272, 272, 272,
	272, 259, 259, 261, 261, 237, 237, 235, 235, 227,
	227, 227, 227, 227, 228, 228, 229, 229, 230, 230,
	230, 234, 234, 233, 233, 233, 233, 231, 231, 232,
	232, 232, 232, 232, 232, 421, 421, 532, 532, 533,
	533, 528, 528, 528, 531, 531, 531, 531, 531, 531,
	531, 534, 534, 534, 530, 530, 239, 322, 322, 322,
	345, 345, 345, 345, 347, 321, 321, 321, 254, 254,
	253, 253, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 420, 420, 361, 361, 362, 362,
	281, 280, 280, 280, 280, 280, 278, 279, 277, 277,
	277, 277, 277, 276, 276, 275, 275, 275, 399, 399,
	273, 273, 263, 263, 263, 262, 262, 262, 462, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 319, 319,
	319, 320, 320, 320, 320, 320, 320, 320, 320, 371,
	371, 377, 377, 544, 544, 543, 240, 240, 240, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 250, 250,
	250, 444, 444, 444, 444, 445, 445, 445, 445, 446,
	446, 446, 442, 442, 443, 443, 382, 383, 383, 491,
	491, 492, 492, 440, 440, 441, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 499, 499,
	499, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 555, 555, 555,
	540, 540, 540, 541, 541, 541, 541, 541, 541, 541,
	541, 541, 541, 541, 541, 542, 542, 542, 542, 542,
	542, 542, 542, 542, 542, 542, 542, 542, 542, 542,
	542, 542, 317, 317, 317, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 384, 384, 385, 385, 496, 496, 496,
	496, 496, 496, 497, 497, 498, 498, 498, 498, 489,
	489, 489, 489, 489, 489, 489, 489, 489, 489, 489,
	489, 489, 489, 489, 489, 489, 489, 489, 489, 489,
	489, 489, 489, 489, 489, 489, 489, 489, 369, 314,
	314, 314, 386, 378, 378, 379, 379, 380, 380, 372,
	372, 372, 372, 372, 372, 373, 373, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 374,
	374, 376, 376, 388, 388, 388, 387, 387, 387, 387,
	387, 387, 387, 252, 252, 252, 252, 366, 366, 366,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 242, 242, 242, 242, 246, 246, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 247, 247, 247, 247, 247, 245, 245, 245,
	245, 245, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 114, 115, 115, 244, 324, 324, 469, 469, 472,
	472, 470, 470, 471, 473, 473, 473, 474, 474, 474,
	475, 475, 475, 479, 479, 333, 333, 333, 341, 341,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	4, 4, 4, 1, 2, 5, 6, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 5, 7, 9, 8, 6, 4, 0, 1, 1,
	0, 1, 5, 2, 2, 6, 9, 6, 9, 4,
	7, 8, 0, 1, 1, 2, 4, 6, 1, 2,
	4, 0, 2, 10, 11, 2, 0, 2, 1, 3,
	3, 3, 0, 2, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 5, 1, 3, 3, 1, 2, 2, 2,
	1, 2, 2, 3, 4, 4, 6, 1, 1, 1,
	2, 4, 6, 1, 4, 1, 3, 3, 4, 4,
	4, 4, 3, 3, 2, 4, 4, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 2, 2, 0, 1, 4, 2, 4, 1,
	5, 3, 2, 1, 2, 2, 4, 4, 5, 2,
	1, 3, 4, 4, 1, 2, 9, 7, 1, 3,
	3, 1, 1, 3, 1, 3, 2, 1, 2, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 2, 4, 3, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 4, 7, 2, 3, 3, 4,
	5, 3, 4, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	1, 1, 1, 1, 6, 4, 1, 1, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	10, 7, 4, 4, 3, 1, 3, 3, 1, 3,
	1, 6, 7, 3, 3, 3, 1, 1, 1, 3,
	2, 4, 5, 5, 6, 5, 5, 3, 2, 2,
	1, 3, 4, 3, 7, 5, 8, 2, 2, 1,
	3, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 2, 1, 3, 2, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 6, 3, 3, 1,
	1, 7, 7, 7, 8, 8, 0, 4, 7, 0,
	3, 0, 2, 0, 1, 1, 1, 1, 4, 2,
	2, 3, 3, 4, 5, 3, 4, 4, 2, 2,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	3, 3, 2, 5, 5, 0, 2, 7, 0, 1,
	0, 1, 5, 5, 3, 3, 2, 4, 4, 4,
	4, 4, 1, 1, 1, 3, 3, 1, 1, 1,
	6, 0, 1, 1, 1, 1, 5, 5, 0, 1,
	1, 3, 3, 3, 4, 7, 7, 5, 4, 7,
	8, 3, 3, 2, 3, 4, 0, 2, 2, 0,
	2, 2, 1, 1, 1, 1, 0, 1, 5, 5,
	6, 4, 3, 1, 3, 1, 1, 3, 5, 2,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 4, 1, 3, 1, 4, 6, 6, 4, 4,
	4, 4, 4, 3, 6, 3, 5, 1, 1, 2,
	2, 11, 8, 9, 1, 3, 2, 4, 0, 2,
	0, 1, 1, 1, 1, 0, 1, 0, 1, 4,
	2, 1, 5, 4, 4, 2, 5, 5, 1, 3,
	2, 1, 5, 4, 4, 2, 0, 5, 4, 0,
	1, 3, 3, 1, 3, 1, 3, 1, 3, 4,
	0, 1, 0, 1, 1, 3, 1, 1, 0, 4,
	1, 3, 2, 1, 0, 8, 0, 4, 7, 4,
	0, 2, 0, 2, 0, 2, 0, 4, 1, 3,
	1, 1, 6, 4, 5, 7, 4, 5, 0, 1,
	3, 8, 0, 6, 0, 4, 6, 1, 1, 1,
	1, 1, 2, 3, 1, 3, 6, 0, 3, 0,
	1, 2, 4, 4, 0, 1, 3, 1, 3, 3,
	0, 1, 1, 0, 2, 2, 0, 2, 3, 3,
	3, 1, 3, 3, 3, 3, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 7, 7,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 2,
	0, 4, 0, 2, 0, 2, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 3, 1, 1, 1,
	1, 4, 4, 4, 3, 3, 2, 2, 2, 2,
	2, 3, 2, 3, 4, 1, 3, 4, 0, 2,
	1, 1, 2, 2, 2, 0, 1, 2, 4, 1,
	3, 1, 3, 2, 3, 1, 4, 3, 0, 1,
	1, 2, 5, 2, 2, 2, 0, 2, 3, 3,
	0, 1, 3, 1, 3, 0, 1, 2, 1, 1,
	0, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	1, 7, 1, 3, 0, 1, 1, 3, 1, 3,
	0, 1, 1, 1, 14, 1, 3, 0, 1, 1,
	3, 1, 1, 2, 4, 1, 1, 1, 1, 0,
	1, 2, 9, 9, 7, 1, 2, 3, 3, 3,
	0, 4, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 4, 1, 1, 1, 3, 3, 4,
	3, 3, 0, 1, 1, 1, 0, 2, 7, 8,
	10, 2, 2, 8, 0, 3, 3, 0, 3, 0,
	3, 0, 5, 1, 3, 0, 3, 3, 0, 2,
	9, 8, 0, 2, 2, 3, 3, 0, 2, 0,
	2, 4, 4, 4, 4, 1, 0, 2, 2, 1,
	3, 2, 1, 3, 2, 1, 3, 2, 0, 1,
	3, 4, 3, 1, 1, 4, 1, 3, 1, 1,
	1, 1, 0, 1, 1, 1, 11, 0, 2, 3,
	3, 2, 2, 3, 1, 1, 1, 3, 3, 4,
	0, 2, 2, 2, 2, 2, 2, 6, 0, 4,
	1, 1, 0, 3, 0, 1, 1, 2, 4, 4,
	4, 0, 1, 8, 2, 4, 4, 4, 9, 0,
	2, 11, 9, 11, 8, 6, 9, 7, 10, 7,
	6, 2, 2, 9, 4, 5, 3, 0, 4, 1,
	3, 0, 3, 6, 0, 2, 10, 0, 2, 0,
	2, 0, 3, 2, 4, 3, 0, 2, 1, 0,
	2, 3, 0, 2, 3, 0, 2, 1, 0, 3,
	2, 4, 3, 0, 1, 0, 1, 1, 0, 6,
	0, 3, 5, 0, 4, 0, 3, 1, 3, 4,
	5, 0, 3, 1, 3, 2, 3, 1, 2, 0,
	4, 6, 5, 0, 2, 0, 2, 4, 5, 4,
	5, 1, 5, 6, 5, 0, 3, 0, 1, 1,
	3, 3, 3, 0, 4, 1, 3, 3, 3, 0,
	1, 1, 3, 2, 3, 3, 3, 4, 4, 3,
	3, 3, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 5, 4, 5,
	1, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 4, 0,
	5, 5, 5, 5, 0, 1, 1, 3, 1, 1,
	1, 1, 1, 7, 9, 7, 9, 2, 1, 7,
	9, 7, 9, 8, 5, 0, 1, 0, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 3, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 2, 1, 2, 2, 1, 1, 2, 2, 2,
	3, 3, 2, 2, 1, 5, 6, 4, 1, 1,
	1, 5, 4, 1, 1, 2, 0, 1, 1, 2,
	5, 0, 1, 1, 2, 2, 3, 3, 1, 1,
	2, 2, 2, 0, 1, 2, 2, 2, 0, 3,
	0, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 3, 5, 2, 2, 2,
	2, 4, 1, 1, 2, 5, 6, 8, 6, 6,
	6, 1, 1, 1, 1, 1, 1, 3, 4, 4,
	4, 7, 9, 7, 7, 7, 9, 7, 7, 0,
	2, 0, 1, 1, 2, 4, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 2, 2, 2, 0, 1,
	1, 1, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 5, 0, 1, 3, 0, 1, 0,
	2, 0, 2, 0, 1, 6, 8, 8, 6, 6,
	5, 5, 5, 6, 6, 6, 6, 5, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 1, 1,
	1, 4, 4, 6, 8, 6, 4, 5, 4, 4,
	4, 3, 4, 6, 6, 7, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 8, 4, 2, 3, 2, 4,
	2, 2, 4, 6, 2, 2, 4, 6, 4, 2,
	4, 4, 4, 0, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 3, 0, 1, 1, 3, 1, 3, 3,
	3, 3, 3, 2, 1, 1, 1, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 1, 3, 4,
	4, 5, 4, 5, 3, 4, 5, 6, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 2, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 4,
	1, 2, 3, 5, 1, 1, 3, 0, 1, 0,
	3, 0, 3, 3, 0, 3, 5, 0, 3, 5,
	0, 1, 1, 0, 1, 1, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -600, -603, -2, -5, 627, -1, -4, -115, -88,
	-7, -14, -117, -118, -8, -113, -9, -10, -12, -92,
	-108, -110, -112, -111, -47, -11, -107, -82, -83, -94,
	-101, -104, -105, -106, -119, -114, -116, -175, -120, -121,
	-122, -163, -125, -127, -128, 617, -89, -90, -91, -33,
	-32, -31, -30, -149, -154, -157, -159, -123, 550, 623,
	453, 14, 502, -15, -16, -545, -17, 262, -349, -350,
	-351, -353, -604, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -152,
	-153, -77, -57, -78, -58, -161, -124, -80, -79, -85,
	-81, -86, -151, -156, -13, -162, -87, 237, -84, 76,
	-95, -96, -97, -98, -99, -100, -102, -103, 377, 383,
	440, 616, 61, -176, -178, 637, 638, 641, 537, 540,
	161, 162, 164, 165, -34, -35, -36, -37, -38, -39,
	-41, -40, -42, -43, -44, -45, -46, 233, 16, 545,
	-18, -21, -19, -22, -20, -28, -29, -27, -24, -26,
	-150, -25, -155, -23, -158, -160, -126, 257, 256, 38,
	323, 324, 325, 381, 255, 234, 236, 15, 31, 42,
	356, -177, 84, 538, 235, -179, 13, 643, -6, -3,
	-2, -136, -140, -144, -147, -148, -145, -146, -4, -115,
	119, 247, 618, -345, 373, 619, 621, 620, 87, 95,
	-338, -340, 453, 262, 377, 383, 616, 638, 641, 537,
	540, 552, 553, 554, 555, 556, 557, 558, 559, 561,
	562, 563, 564, 565, 566, 567, 577, 578, 568, 569,
	570, 571, 572, 573, 574, 575, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, 592,
	505, 602, 603, 604, 605, 533, 560, 596, 597, 598,
	599, 354, 355, 542, 274, 298, 408, 304, 311, 161,
	180, 174, 203, 194, 538, 169, 278, 316, 279, 94,
	164, 488, 109, 465, 437, 167, 293, 295, 297, 534,
	535, 367, 300, 532, 299, 301, 303, 536, 280, 357,
	190, 185, 292, 276, 183, 281, 40, 282, 208, 283,
	284, 547, 461, 353, 467, 308, 52, 435, 184, 462,
	296, 464, 212, 216, 479, 480, 178, 179, 469, 482,
	207, 210, 211, 254, 350, 351, 43, 544, 266, 483,
	214, 206, 201, 491, 312, 310, 205, 177, 200, 277,
	65, 218, 217, 219, 431, 432, 433, 434, 285, 286,
	371, 478, 197, 186, 358, 170, 23, 486, 261, 466,
	384, 287, 305, 313, 213, 215, 268, 273, 328, 546,
	439, 272, 309, 484, 182, 265, 294, 260, 487, 171,
	386, 288, 165, 302, 481, 490, 64, 399, 176, 168,
	634, 251, 162, 270, 275, 289, 290, 291, 531, 315,
	314, 306, 539, 198, 267, 204, 188, 175, 199, 163,
	269, 489, 400, 614, 356, 418, 196, 193, 271, 244,
	485, 468, 166, 422, 401, 191, 317, 609, 610, 611,
	372, 349, 318, 319, 189, 258, 459, 460, 322, 428,
	340, 402, 438, 409, 403, 225, 226, 326, 471, 473,
	209, 612, 329, 330, 331, 463, 332, 333, 334, 335,
	376, 56, 58, 96, 99, 98, 639, 640, 63, 29,
	362, 365, 397, 404, 342, 615, 543, 339, 343, 344,
	366, 25, 420, 388, 424, 423, 48, 49, 50, 53,
	54, 55, 57, 59, 60, 51, 530, 381, 394, 492,
	45, 47, 391, 27, 368, 419, 441, 338, 421, 452,
	46, 450, 451, 472, 26, 370, 369, 62, 44, 427,
	429, 430, 320, 336, 379, 624, 493, 374, 390, 393,
	375, 341, 364, 395, 67, 66, 387, 625, 382, 380,
	337, 548, 549, 345, 576, 359, 436, 527, 526, 525,
	524, 523, 522, 521, 520, 323, 324, 325, 405, 406,
	407, 417, 410, 411, 412, 413, 414, 415, 416, 455,
	456, 626, 474, 476, 477, 475, 239, 642, 360, 361,
	242, 628, 629, 97, 630, 632, 631, 28, 633, 636,
	-426, -424, -345, 538, 616, 383, 537, 540, 377, 356,
	638, 641, 381, 262, 323, 324, 325, 453, 354, -221,
	-345, 642, -185, 246, 39, -235, -345, -185, -84, -16,
	-15, -177, -178, -235, 241, -354, 24, 435, -93, 436,
	237, 84, 77, -345, -9, -106, -8, -113, -82, -175,
	440, -352, -345, 323, 323, -352, 241, -347, 272, 416,
	-345, -481, 247, -430, -403, 273, -429, -405, -432, -406,
	32, 233, 235, 234, 550, 269, 16, 381, 243, 14,
	13, 382, 255, 25, 26, 28, 15, 383, 385, 29,
	386, 389, 390, 391, 42, 394, 395, 262, 87, 95,
	90, 280, -220, -345, -380, -372, 116, -375, -367, -368,
	-370, -323, -519, -365, 84, 143, 144, 151, 117, 644,
	-369, -462, 36, 119, 556, 560, 596, 503, -315, -316,
	-317, -318, -319, -320, -345, -520, -518, 90, 100, 102,
	106, 107, 105, 103, 155, 187, 104, 91, 156, -178,
	87, -540, 566, -339, 589, 602, 603, 604, 605, 588,
	61, -489, -498, 240, -496, 154, 192, 258, 188, 14,
	149, 428, 189, 597, 598, 599, 563, 585, 505, 567,
	577, 592, 558, 559, 561, 553, 554, 555, 557, 568,
	570, 584, -499, 580, 590, 591, 576, 600, 601, 593,
	594, 595, 632, 89, 88, 583, 582, 569, 564, 565,
	571, 552, 562, 572, 573, 581, 586, 587, 365, 109,
	366, 367, 495, 357, 368, 247, 435, 70, 369, 370,
	371, 372, 373, 502, 374, 71, 375, 364, 262, 418,
	376, 191, 209, 507, 506, 508, 499, 496, 494, 497,
	498, 500, 501, 574, 575, 579, -129, -130, 607, -594,
	-307, -595, 6, 7, 8, 9, -596, 156, -585, 437,
	546, 90, 316, 354, 17, 495, 635, 536, 635, 536,
	166, 163, -417, 166, 115, 171, 170, -417, 635, 168,
	634, 326, 268, -394, -166, 354, 418, 332, 96, 272,
	-397, -395, 534, -483, 320, 316, 292, 242, 112, -167,
	252, 251, 110, 495, 240, 392, 311, 56, 58, -556,
	-557, 230, 231, 232, -547, 528, -546, -345, 635, 367,
	98, 99, 634, 27, 241, 378, 268, 473, 471, 472,
	474, 475, 476, 477, -65, -500, -480, 468, 467, -358,
	460, 466, 458, 470, 461, 355, 334, 550, 333, 233,
	628, 535, 529, -333, 402, 438, 492, 493, 379, 439,
	479, 481, 462, 109, 195, 192, 242, 244, 241, 634,
	354, 495, 418, 96, 332, 241, -556, 163, 479, 481,
	437, 272, 416, 41, -423, 428, -422, -424, 480, 491,
	88, 89, 478, -333, 109, 459, 459, -594, -307, -176,
	-178, -116, -545, 536, 635, 242, 354, 418, 272, 243,
	241, 531, 534, 244, 495, 240, 323, 378, 268, 332,
	96, 168, 634, -482, -553, 32, -490, 227, 228, 229,
	33, 34, -1, 123, 643, -372, -372, -6, 646, -6,
	-372, -345, -345, 158, -242, -246, -243, -245, -244, -248,
	-247, 192, 193, 154, 196, 202, 198, 199, 200, 201,
	203, 204, 205, 206, 207, 210, 211, 208, 31, 209,
	258, 188, 189, 190, 191, 212, 174, 194, 543, 220,
	175, 221, 176, 222, 177, 223, 178, 179, 224, 180,
	183, 184, 185, 186, 182, 157, -210, 90, 32, 84,
	157, 90, -202, 264, -185, -235, -227, 157, 644, -202,
	-594, -195, -196, 11, -235, -321, -345, 437, 126, -93,
	77, -93, 436, 77, -548, -549, -550, -552, 237, 436,
	435, -111, 157, 280, 17, -352, -352, 82, -235, -405,
	272, -430, -403, 36, 81, 158, 245, 158, 81, 84,
	379, 354, 418, 380, 495, 241, 392, 244, 272, 393,
	354, 418, 241, 244, 495, 272, 354, 241, 244, 418,
	272, 393, 354, 458, 459, 244, 27, 384, 387, 388,
	459, -504, 491, 158, 115, 112, 113, 114, -372, 133,
	-387, 126, 127, 128, 129, 130, 131, 132, 140, 139,
	150, 143, 144, 145, 146, 147, 148, 149, 141, 142,
	136, 116, 134, 138, 135, 118, 153, -178, -372, -380,
	61, -370, -370, -370, -370, -345, -462, -377, -372, 84,
	84, 84, 84, 157, 103, 90, -372, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, -497,
	84, 84, -384, -385, 84, 84, -365, -321, 84, 90,
	90, 84, 84, 84, 90, 84, 84, 84, -385, -385,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, -196, 158, -195, 84, -195,
	-196, -179, -178, 32, 33, 32, 33, 32, 33, 32,
	33, -597, 625, 84, 100, 639, 225, 17, -345, 634,
	-345, 90, 539, 90, 539, 484, 545, 169, 170, 171,
	-392, 247, -392, -392, -219, -345, -221, 378, 244, 531,
	244, -167, -392, -392, -392, -392, -392, 243, -392, 24,
	241, 241, 241, 241, -392, 502, 126, 126, 59, -558,
	173, 158, -547, -201, 84, 90, -357, 134, 138, -357,
	-303, 18, -303, 24, 270, 270, 270, -357, 310, -605,
	-606, 17, 136, -355, -606, -355, -355, -357, -607, 243,
	469, 43, 271, 270, -197, -198, 22, -197, 463, 459,
	-447, 464, 465, -359, -606, -358, -357, -357, -358, -357,
	-357, -357, 32, 241, 244, 495, 332, 629, -605, -605,
	31, 31, -481, -481, -235, -481, -481, 529, -334, -345,
	-481, -481, -481, -287, -288, -235, -559, 246, -591, -590,
	482, -593, 484, 163, -424, 163, -424, 87, -405, 272,
	272, 158, 126, 24, -425, 126, 137, -424, -424, -425,
	-425, -259, 41, -344, 154, -345, 90, -259, 41, -588,
	-587, -235, -196, -179, -178, 85, 85, 85, 539, 90,
	-481, -481, -481, -481, -481, -483, -481, -481, -481, -481,
	-481, -352, -211, -345, -221, 247, -481, -481, -481, -481,
	-180, -181, 145, -372, -345, -180, -3, -138, -137, 120,
	121, 123, 619, 373, 618, 622, 616, -424, 41, -475,
	400, 399, -469, -471, 84, -470, 84, -470, -470, -470,
	-470, -470, 84, 84, -472, 84, -472, -472, -469, -473,
	84, -473, -474, 84, -474, -473, -345, -451, 545, -378,
	-380, -345, 39, -493, 61, -175, 84, 31, 84, -202,
	-345, 189, 168, 633, -494, 61, -175, 84, 31, -196,
	-131, 39, -198, 21, 157, 100, 90, -111, -93, 77,
	-111, 85, 158, -551, 106, 107, -554, 207, 198, -345,
	-109, 90, -7, -8, -9, -10, -47, -82, -79, -175,
	234, 537, 540, -521, -519, 84, 32, 427, 81, 17,
	-431, 241, 495, 378, 268, 244, 354, -429, -412, -409,
	-407, -344, -405, -408, -407, -434, -321, 459, -132, 442,
	441, 322, -372, -372, -372, -372, -372, 105, 116, 349,
	106, 107, -367, -388, 32, 318, 319, -368, -368, -368,
	-368, -368, -368, -368, -368, -368, -368, -368, -368, -376,
	-386, -462, 84, 136, 134, 138, 135, 118, -370, -370,
	-368, -368, -261, -344, 154, 85, 158, -372, -544, -543,
	120, -372, -372, -372, -372, -345, -541, -542, 509, 510,
	511, 512, 513, 514, 515, 516, 517, 518, 519, 369,
	364, 370, 368, 357, 376, 371, 372, 191, 526, 527,
	520, 521, 522, 523, 524, 525, -378, -378, -372, -541,
	-378, -314, 33, 32, -380, -380, -380, 85, -372, -555,
	347, 346, 348, -199, -345, -378, 85, 85, 85, 100,
	-380, -380, -378, -368, -378, -378, -378, -378, -542, -314,
	-314, -314, -314, 145, -380, -380, -314, -314, -314, -314,
	145, -314, -314, -314, -314, -314, -314, -314, -314, -314,
	-314, 85, 85, 85, 145, -380, -197, -130, -502, -501,
	-372, 41, -131, -198, -598, 626, 84, -321, -586, 90,
	90, 644, 168, 634, 17, 495, -345, 17, 241, -579,
	32, 539, 100, 539, 100, 485, 486, 167, 170, 169,
	90, 116, -345, -345, 35, 84, -211, -392, -392, -392,
	-563, -345, 91, -413, -410, -407, -345, -345, -403, -345,
	-334, -235, -392, -392, -392, -392, -235, -270, 53, 54,
	55, -407, -168, 56, 57, -559, -546, 35, -200, -345,
	-579, -303, -370, -370, -372, -407, 272, -605, -357, -357,
	-335, -334, -359, -354, -359, -359, -303, -355, -357, -357,
	-372, -359, -355, -303, -345, 459, -303, -303, -447, -357,
	-356, -345, -356, -392, -334, -335, -335, -235, -235, -282,
	-289, -283, -290, 264, 238, 362, 363, 236, 234, 11,
	235, -297, 311, -393, 503, -265, -266, 77, 42, -268,
	262, 404, 397, 274, 278, 94, 279, 437, 280, 243,
	282, 283, 284, 299, 301, 254, 285, 286, 287, 428,
	288, 162, 300, 289, 290, 291, 380, -260, 6, 335,
	545, 41, 51, 52, 451, 450, 548, 275, -345, -563,
	-561, 31, -345, 31, -413, -345, -345, 158, 245, -188,
	-190, -187, -183, -184, -189, -306, -308, -186, 84, -235,
	-178, -345, 158, 483, 485, 486, -591, -425, -591, -425,
	245, 32, 427, -428, 427, 32, -403, -422, 479, 481,
	-418, 90, 428, -408, -427, 81, 154, -501, -425, -425,
	-427, -427, 153, 158, -589, 484, 485, 230, -197, 100,
	-579, -237, -235, -563, -412, -403, -345, -481, -237, -237,
	-237, -347, -347, 84, 157, 36, -345, -345, -345, -345,
	-302, 158, -301, 17, -346, -345, 35, 90, 157, -302,
	-139, -137, 122, -372, -6, 618, -372, -6, -6, -372,
	-6, -372, -479, 401, 100, 100, -324, 90, -324, 100,
	100, 100, 551, 85, 90, -416, 81, -495, -381, -539,
	607, -204, 85, -199, -537, -538, -199, -203, -345, -493,
	-227, 126, 126, 126, -495, -204, 85, -537, -197, 608,
	-131, -194, -193, -372, -345, 24, -111, -93, -549, 157,
	354, 158, -200, -431, -411, -408, -433, 145, -345, -419,
	158, 545, 647, 88, 245, -576, -575, 419, 85, 158,
	-505, 246, 502, 90, 644, 435, 225, 226, 105, 349,
	106, 107, -462, -380, -376, -370, -370, -368, -368, -374,
	259, -374, 115, -372, 645, -371, -543, 122, -372, 35,
	158, 35, 158, 82, 157, 85, 85, 17, 17, 85,
	-372, 85, 85, 85, 85, 17, 17, -372, 85, 157,
	85, 85, 85, 85, 82, 85, 158, 85, 85, 85,
	85, 158, -380, -380, -372, -380, 85, 85, 85, -372,
	-372, -372, -380, 85, -372, -372, -372, -372, -372, -372,
	-372, -372, -372, -372, -441, 454, -441, -441, 158, 158,
	158, 85, -131, 84, 100, 158, 640, -328, -327, 90,
	-345, -345, 168, 634, -345, 90, 634, -345, 90, 90,
	168, 171, 171, 170, 90, 36, 24, 309, 24, -220,
	-222, -223, -224, -225, -226, 136, 159, 160, 84, -235,
	-235, -235, -565, 405, -577, 158, 41, -575, 495, -164,
	322, -396, 82, -171, 17, 545, -235, -235, -235, -235,
	-249, 35, 17, -182, -236, -345, 84, 85, 158, -404,
	82, -345, -335, -303, -303, -359, -303, -303, 158, 23,
	-357, -359, -359, -227, -355, -227, 157, -227, -334, -468,
	35, -201, 158, 21, 264, -234, -342, -231, -233, 249,
	-362, -232, 252, -533, 250, 248, 110, 253, 307, 111,
	243, -342, -342, 249, -269, 245, 35, -342, -285, 243,
	352, 307, 250, 21, 264, -284, 243, 111, -345, 249,
	253, 250, 248, -341, 126, -333, 153, 245, 43, 380,
	-341, 549, 264, -341, -341, -341, -341, -341, -341, -341,
	281, 281, -341, -341, -341, -341, -341, -341, -341, -341,
	-341, -341, -341, 163, -341, -341, -341, -341, -341, -341,
	84, 327, 276, 277, 309, -566, 405, 31, 360, 360,
	361, -577, 31, -172, 354, -288, -286, -356, 31, -309,
	-310, -311, -312, -313, 68, 72, 74, 78, 69, 70,
	71, 75, 73, 31, 158, -343, -348, 35, -345, 90,
	-343, -178, -190, -188, -343, 84, -590, -592, 487, 484,
	490, -427, -427, 100, 245, 84, 126, -427, -427, 41,
	-344, -587, 491, 485, -131, 158, 81, -237, -212, -213,
	-214, -215, -242, -321, 193, 196, 198, 199, 200, 201,
	203, 204, 205, 206, 207, 210, 211, 208, 209, 258,
	188, 189, 190, 191, 212, 174, 194, 543, 175, 176,
	177, 178, 179, 180, 183, 184, 185, 186, 182, -345,
	-221, -303, -181, -190, -345, 90, -345, 145, -303, 123,
	-6, 121, -143, -142, -141, 124, 616, 622, 123, 123,
	123, 85, 85, 85, 158, 85, 85, 85, 158, 85,
	158, 100, -508, 464, 40, 158, 84, 85, 158, 61,
	158, 126, 85, 158, -372, -345, 90, -372, 85, 61,
	-131, 90, 158, -191, 37, 38, 157, 437, -345, -519,
	85, -433, 158, 245, 157, 157, -409, 383, -344, -411,
	21, 545, -321, 39, -328, 126, 644, -345, 85, -374,
	-374, 115, -370, -367, 85, 123, -372, 121, -240, -242,
	399, 400, -372, -240, -241, -247, 154, 192, 258, 191,
	190, 188, 399, 400, -259, -345, -372, -372, 85, -372,
	-372, 17, -345, -259, -368, -372, -196, -196, 85, 85,
	-440, -441, -440, -440, 85, 85, 85, 85, -440, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 84,
	100, 102, 100, 102, -501, -599, 63, 624, 62, 427,
	105, 312, 158, 100, 90, 645, 158, 126, 90, -345,
	-345, 17, 241, -345, 17, 90, 171, 90, -578, 316,
	354, -452, 100, 316, 354, 495, 391, 85, 158, -321,
	-212, -201, 84, -201, -568, 466, 407, 417, -341, -364,
	-363, 356, 42, -487, 428, 413, 414, -410, 272, -334,
	-574, 97, 126, 81, 339, 343, 344, 340, 341, 342,
	-390, -391, -389, -393, -561, 84, 84, -175, 35, 134,
	-171, 84, 84, 35, -463, 329, -242, -235, -182, -345,
	17, 158, -560, 157, -1, -345, -403, -357, -303, -372,
	-372, -303, -357, -357, -359, -345, -227, -463, -242, 35,
	-283, 238, 235, -437, 309, 310, -438, -453, 312, -455,
	84, -239, -321, -232, -532, -533, -392, -345, 111, -532,
	111, 84, -239, -321, -321, -286, -321, -345, -345, -345,
	-345, -293, -292, -321, -295, 32, -296, -345, -345, -345,
	-345, 111, -345, 111, -264, 41, 48, 49, 50, -341,
	-341, 195, -267, 41, 427, 429, 430, -295, 100, 100,
	100, 100, 90, 90, 90, -341, -341, 100, 90, -348,
	90, -534, 170, 45, 46, 100, 100, 100, 100, 41,
	90, -272, 41, 292, 296, 293, 294, 295, 90, 100,
	41, 100, 41, 100, 41, -345, 84, -535, -536, 90,
	328, -452, -568, -341, 360, -424, 126, 126, -364, -573,
	322, -174, 495, 32, -205, 238, 235, -561, -415, -414,
	-321, -187, -187, -187, -187, -187, 68, 79, 68, 68,
	68, 73, 68, 73, 68, -311, 79, -415, -189, -201,
	-348, 85, -584, -583, -582, -580, 76, 246, 77, -378,
	484, 488, 489, -411, -360, 90, -418, -209, 24, -235,
	-235, -485, 302, 303, 85, 158, -242, -305, 19, 157,
	-305, 119, -6, -139, -141, -372, -6, -372, 618, 373,
	619, 90, 100, 100, -516, 448, 443, 445, 111, -381,
	-503, -502, 61, -175, -199, -495, -538, -501, -345, 645,
	645, 645, 645, 61, -175, -495, -209, -508, -193, -192,
	44, -345, 100, 17, -408, -403, 145, 145, -345, 384,
	-419, 90, 406, 90, 241, 645, 90, -328, -367, -372,
	85, -250, 179, 178, -250, 35, 85, 85, -470, -470,
	-469, -472, -469, -250, -250, 85, 85, 24, 85, 85,
	85, -372, 85, 85, 158, -491, 504, -492, 578, -440,
	-440, -440, -440, -440, -440, -440, -440, -440, -440, -440,
	-440, -440, -440, -440, -440, -383, -382, 264, 449, 631,
	631, 449, 631, 631, 85, 158, -541, 158, -336, 317,
	-336, -327, 90, 245, 90, 168, -345, 90, 634, 90,
	-345, 90, 309, -345, -345, 90, 90, -224, -242, 85,
	35, -228, -229, -230, -239, -231, -233, 35, -569, 94,
	-564, 90, -345, 91, -570, 94, 408, 156, 358, 41,
	409, 410, 425, 353, 100, 100, 415, -562, -345, -173,
	241, 354, -572, 52, 126, 90, -235, -389, -333, 153,
	283, 332, -300, -299, -345, 90, -228, -175, -235, -228,
	-228, -175, -464, 331, 21, 100, 144, -202, 82, 157,
	-190, -236, -345, 145, 85, -303, -227, -303, -303, -357,
	-464, -175, -449, 313, 84, -447, 84, -447, 111, 340,
	-456, -454, 264, -291, 45, 47, -242, -530, -345, -528,
	-530, -345, -528, -528, -392, -372, -291, -239, 245, 31,
	235, -294, 337, 338, 343, -420, 308, 116, -420, 158,
	-191, 158, -345, -259, -259, 31, 90, 90, -237, 85,
	158, 126, 100, 90, -569, -564, 126, -425, 90, 90,
	-570, -574, 126, -238, 241, -334, 158, -205, -205, -303,
	158, 126, -207, -206, 81, 82, -208, 81, -206, 68,
	68, -303, -582, -581, 24, -533, -533, -533, 85, 85,
	15, -214, 41, -304, 20, 21, 145, -304, 123, 121,
	123, 123, -345, 85, 85, -476, 609, -512, -514, 443,
	21, 21, 15, 246, 85, -495, -495, -516, 45, 46,
	-403, -419, 428, -235, 158, 645, -240, -372, 85, -372,
	85, 90, 85, 90, -196, 21, 85, 158, 85, 85,
	85, 158, 85, 85, -372, 85, -541, -337, 189, 90,
	-337, 354, -346, -345, 17, -345, 90, -452, 309, 309,
	241, 239, -175, 85, 158, -175, 90, -567, 419, 90,
	90, 100, 41, 100, 156, 411, -488, -165, 94, -237,
	32, -205, -571, 94, 126, 644, 84, -341, -341, -341,
	-345, 85, 158, -341, -341, 85, 85, 85, -257, 545,
	-465, 263, 100, 144, 100, 144, 100, -343, -190, -345,
	-303, -560, 157, -303, -465, -439, 314, 100, -368, 84,
	-368, 84, -448, 311, 84, 85, 158, -345, -321, -254,
	-253, -251, 105, 116, 41, 397, -252, 94, 153, 297,
	300, 299, 275, 298, -281, -361, 81, 403, 337, 338,
	-393, 609, 533, 248, 110, 111, 385, -362, 84, 84,
	82, 317, 84, 84, -530, 85, -291, -321, 41, -294,
	41, 350, 308, -292, -345, 153, -259, 85, -536, 90,
	-541, -567, 90, -427, -572, 90, -165, -237, -561, -196,
	-414, -501, -372, 84, -372, 84, 68, 11, 19, -365,
	-372, -380, 247, -6, 619, 373, -274, 610, 90, 21,
	90, -510, 90, -415, -476, -134, -271, -333, 280, 85,
	85, 85, -440, -440, -443, -442, -446, 449, 309, 457,
	-380, 90, 90, 85, 85, 90, -345, 168, 90, 644,
	90, -452, -452, -345, -216, -242, -169, 545, -257, -230,
	-169, 21, 545, 357, 41, 100, 41, 412, 90, -173,
	126, 106, 107, -329, -330, 90, -398, -400, -321, 84,
	-259, -261, 90, -299, -365, -365, -255, -175, 35, -256,
	-297, -393, 545, -133, -132, -255, 545, 84, -466, 162,
	100, 144, 100, 100, -303, -303, -466, -455, 21, 85,
	-434, 85, -434, 84, 126, -368, -454, -457, 61, -251,
	105, -368, 90, -261, -262, 41, 296, 292, 126, 126,
	-263, 41, 276, 277, -273, 84, 307, 15, 195, 84,
	111, 111, -235, -398, -398, -531, 339, 340, 341, 345,
	343, 344, 342, -531, -398, -398, 84, -421, -420, -368,
	-341, -341, 153, -571, -197, -200, -529, -345, 248, 21,
	21, -486, 545, -345, -345, -325, 611, 100, 90, 445,
	-274, -477, 612, -506, -447, -259, 126, 85, -445, 118,
	411, 415, -366, -369, 100, 102, 187, 156, 85, 85,
	-345, -332, -331, 90, 90, 90, 309, 544, -170, 60,
	491, 90, 91, 406, 90, 91, 357, -165, 90, 645,
	158, 126, 85, 158, -469, -372, -435, 264, -175, 158,
	-297, -333, -134, -435, -258, -298, -345, 90, -484, 170,
	330, 545, 100, 144, 100, -196, -467, 170, 330, -438,
	85, 85, 85, -434, 100, 85, -461, -458, 84, -297,
	266, 136, 90, 90, 100, 84, -496, 31, 90, -399,
	84, 85, 85, 85, 85, -398, 100, -259, -341, 85,
	85, 158, 636, 84, 21, -325, -478, 613, 90, -515,
	448, -509, -507, 443, 444, 445, 446, 90, -444, -445,
	415, -366, -369, 607, 455, 455, 455, 645, 158, 126,
	-452, -218, -345, 307, 428, -330, 90, -401, -400, -191,
	85, -436, 316, 21, -297, -341, -436, 85, 158, -341,
	-341, 330, 100, 144, 100, -197, 330, -450, 315, 85,
	-461, -297, -460, -459, 314, 267, 84, 85, -372, -384,
	-341, 85, -276, -275, 541, -398, -401, 82, -401, 82,
	-401, 82, -401, 82, 85, -259, -345, 248, -326, -345,
	-510, 90, -517, 246, -513, -514, 447, -507, 21, 445,
	21, 21, -135, 158, 115, 456, 456, 456, -331, 90,
	90, -217, 35, 450, 384, -402, 254, 350, 351, 94,
	545, 337, 338, -191, 21, -437, -259, -298, -365, -365,
	100, 100, 85, 158, -345, 263, 84, -379, -373, -372,
	263, 85, -345, -280, -278, -279, 81, 462, 305, 306,
	85, -531, -531, -531, -531, -281, 85, 158, -524, 84,
	100, -512, -511, -513, 21, -510, 21, -510, -510, 452,
	-444, 90, -341, -341, 90, 90, 336, -321, 84, -449,
	-459, -458, -379, 85, 158, -420, -279, 81, -278, 81,
	16, 15, -401, -401, -401, -401, -345, -527, 31, 85,
	-523, -522, -322, -518, -345, 448, 449, 90, -510, 126,
	-602, -601, 630, 100, 100, -345, -434, -439, 85, -373,
	-277, 302, 303, 31, 170, -277, -526, -525, -323, 85,
	158, 157, 90, 90, 85, -455, 105, 41, 304, 158,
	126, -522, -345, -525, 41, -372, 157, -345,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 309, 310, 311, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 0, 0,
	0, 0, 0, 687, 688, 0, 651, 0, 0, 0,
	0, 0, 0, 534, 535, 536, 537, 538, 539, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 0, 334, 330,
	253, 254, 255, 256, 257, 258, 341, 342, 511, 0,
	0, 0, 0, 770, -2, 97, 0, 0, 0, 0,
	323, 0, 314, 314, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, -2, 700, 0,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 394, 395, 396,
	390, 391, 393, 392, -2, 0, 0, 700, 0, 0,
	0, 778, 0, 0, 0, 821, 843, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1360, 1361,
	1362, 1363, 2146, 2116, -2, 1886, 1863, 2040, 2041, 1941,
	1952, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186,
	2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196,
	2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206,
	2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216,
	2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226,
	2227, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828,
	1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838,
	1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848,
	1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858,
	1859, 1860, 1861, 1862, 1864, 1865, 1866, 1867, 1868, 1869,
	1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879,
	1880, 1881, 1882, 1883, 1884, 1885, 1887, 1888, 1889, 1890,
	1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
	1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
	1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
	1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930,
	1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940,
	1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951,
	1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963,
	1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973,
	1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983,
	1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993,
	1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
	2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
	2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023,
	2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033,
	2034, 2035, 2036, 2037, 2038, 2039, 2042, 2043, 2044, 2045,
	2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055,
	2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065,
	2066, 2067, 2068, 2069, 2070, 2071, 2072, -2, 2074, 2075,
	2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085,
	2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095,
	2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105,
	2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115,
	2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126,
	2127, 2128, 2129, 2130, 2131, -2, -2, -2, 2135, 2136,
	2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2147,
	2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157,
	2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167,
	0, 307, 305, 1833, 1863, 1886, 1941, 1952, 1953, 1988,
	2040, 2041, 2073, 2116, 2132, 2133, 2134, 2146, 0, 0,
	962, 0, 748, 0, 0, 753, 1309, 748, 335, 689,
	690, 778, 804, 649, 0, 372, 0, 1877, 376, 2123,
	0, 0, 0, 646, 366, 367, 368, 369, 370, 371,
	0, 0, 935, 0, 0, 362, 0, 329, 1943, 2145,
	1364, 0, 0, 0, 0, 0, 196, 1086, 198, 1088,
	202, 210, 0, 0, 0, 215, 216, 219, 220, 221,
	222, 223, 0, 227, 0, 229, 232, 0, 234, 235,
	0, 238, 239, 240, 0, 250, 251, 252, 1089, 1090,
	1091, -2, 125, 960, 1791, 1677, 0, 1684, 1697, 1708,
	1441, 1442, 1443, 1444, 0, 0, 0, 0, 0, 0,
	1452, 1453, 0, 1481, 2182, 2223, 2224, 0, 1461, 1462,
	1463, 1464, 1465, 1466, 136, 148, 149, 1730, 1731, 1732,
	1733, 1734, 1735, 1736, 0, 1738, 1739, 1740, 1648, 1428,
	1360, 0, 2191, 0, 2213, 2218, 2219, 2220, 2221, 2212,
	0, 0, 1633, 0, 1623, 0, 0, -2, -2, 0,
	0, 2013, -2, 2225, 2226, 2227, 2188, 2209, 2217, 2192,
	2193, 2216, 2184, 2185, 2186, 2179, 2180, 2181, 2183, 2195,
	2197, 2208, 0, 2204, 2214, 2215, 2121, 0, 0, 0,
	0, 0, 2163, 150, 151, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1644, -2, -2, 1647, -2, 1650, -2, -2,
	-2, -2, 1655, 1656, -2, 1658, -2, -2, -2, -2,
	-2, -2, -2, 1635, 1636, 1637, 1638, 1627, 1628, 1629,
	1630, 1631, 1632, -2, -2, -2, 804, 885, 0, 804,
	0, 779, 826, 829, 832, 835, 782, 0, 0, 98,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 325, 313, 315, 0, 319, 0, 312, 1122, 1122,
	1122, 0, 0, 0, 0, 1122, 1122, 1122, 1122, 1122,
	0, 1122, 0, 0, 0, 0, 0, 1122, 0, 995,
	1093, 1094, 1095, 1120, 1121, 1194, 0, 0, 0, 705,
	701, 702, 703, 704, 792, 0, 794, 797, 0, 626,
	626, 854, 854, 572, 0, 0, 0, 626, 0, 586,
	578, 0, 0, 0, 626, 0, 0, 799, 799, 0,
	629, 636, 626, 626, -2, 626, 626, 623, 626, 0,
	0, 1134, 592, 593, 594, 578, 578, 597, 598, 599,
	609, 610, 637, 1815, 0, 0, 511, 511, 0, 511,
	511, 0, 511, 511, 511, 0, 707, 1983, 1884, 1958,
	1843, 1943, 2145, 0, 280, 2013, 285, 0, 1885, 1904,
	0, 0, 1922, 0, -2, 0, 351, 804, 0, 0,
	778, 0, 0, 0, 0, 511, 511, 511, 511, 511,
	1193, 511, 511, 511, 511, 511, 0, 0, 0, 511,
	511, 511, 511, 0, 0, 844, 845, 840, 841, 842,
	846, 847, 5, 6, 19, 0, 0, 0, 0, 0,
	0, 104, 103, 0, 1792, 1810, 1743, 1744, 1745, 1797,
	1747, 1801, 1801, 1801, 1801, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1801, 1801, 0, 0, 1790,
	1767, 1799, 1799, 1799, 1797, 1794, 1748, 1749, 1750, 1751,
	1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761,
	1804, 1804, 1807, 1807, 1804, 0, 408, 406, 407, 1673,
	0, 0, 0, 0, 748, 752, 1307, 0, 0, 0,
	804, -2, 0, 0, 650, 373, 1365, 0, 0, 377,
	0, 378, 0, 0, 0, 397, 0, 400, 385, 386,
	387, 381, 0, 176, 0, 364, 365, 0, 0, 331,
	0, 0, 0, 512, 0, 0, 0, 0, 0, 0,
	207, 203, 211, 214, 224, 231, 0, 243, 245, 248,
	204, 212, 217, 218, 225, 246, 205, 208, 209, 213,
	247, 249, 206, 226, 230, 244, 228, 233, 236, 237,
	242, 0, 177, 0, 0, 0, 0, 0, 1683, 0,
	0, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 1677, 0,
	0, 1447, 1448, 1449, 1450, 0, 1454, 0, 1482, 0,
	0, 0, 0, 0, 1737, 1741, 0, 1673, 1673, 0,
	1673, 1669, 0, 0, 0, 0, 0, 0, 1673, 1606,
	0, 0, 1608, 1624, 0, 0, 1610, 1611, 0, 1614,
	1615, 1673, 0, 1673, 1619, 1673, 1673, 1673, 1602, 1603,
	0, 1669, 1669, 1669, 1669, 0, 0, 1669, 1669, 1669,
	1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
	1669, 0, 0, 0, 0, 799, 0, 805, 0, -2,
	0, 823, 825, 827, 828, 830, 831, 833, 834, 836,
	837, 784, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 317, 0, 322,
	0, 0, 0, 0, 0, 959, 0, 0, 1122, 1122,
	1122, 996, 0, 0, 0, 0, 0, 0, 0, 0,
	1122, 1122, 1122, 1122, 0, 1140, 0, 0, 0, 707,
	706, 0, 793, 0, 0, 0, 854, 0, 0, 569,
	570, 0, 571, 0, 578, 626, 626, 584, 585, 580,
	579, 632, 633, 629, 0, 629, 629, 854, 0, 603,
	604, 605, 626, 626, 611, 800, 0, 612, 613, 629,
	0, 634, 635, 854, 0, 0, 854, 854, 0, 621,
	622, 624, 626, 0, 0, 1122, 0, 642, 580, 580,
	1816, 1817, 0, 0, 1131, 0, 0, 0, 0, 645,
	0, 0, 0, 424, 425, 0, 0, 708, 259, 263,
	0, 266, 0, 1983, 0, 1983, 0, 0, 273, 0,
	0, 0, 0, 0, 0, 303, 304, 0, 0, 0,
	0, 294, 297, 1301, 1302, 1083, 1084, 298, 299, 343,
	344, 0, 799, 822, 824, 818, 819, 820, 0, 0,
	0, 0, 0, 0, 0, 511, 0, 0, 0, 0,
	0, 683, 0, 975, 685, 0, 0, 0, 0, 0,
	862, 856, 858, 930, 136, 862, 8, 121, 118, 0,
	19, 0, 0, 19, 19, 0, 19, 308, 0, 1813,
	1811, 1812, 1746, 1798, 0, 1772, 0, 1773, 1774, 1775,
	1786, 1787, 0, 0, 1768, 0, 1769, 1770, 1771, 1762,
	0, 1763, 1764, 0, 1765, 1766, 306, 405, 0, 0,
	1674, 963, 0, 726, 740, 721, 0, 729, 0, 0,
	1309, 0, 0, 0, 709, 740, 711, 0, 729, 799,
	776, 0, 754, 0, 0, 374, 0, 382, 379, 0,
	383, 0, 0, 399, 401, 402, 403, 388, 389, 647,
	360, 361, 352, 353, 354, 355, 356, 357, 358, 359,
	0, 0, 0, 363, 146, 0, 332, 333, 0, 0,
	0, 190, 191, 192, 193, 194, 195, 197, 181, 672,
	674, 1075, 1087, 0, 1078, 0, 200, 241, 173, 0,
	0, 0, 1678, 1679, 1680, 1681, 1682, 1687, 0, 1689,
	1691, 1693, 1695, 0, 1713, -2, -2, 1429, 1430, 1431,
	1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1698,
	1711, 1712, 0, 0, 0, 0, 0, 0, 1709, 1709,
	1704, 0, 1467, 1303, 1304, 1445, 0, 0, 1479, 1483,
	0, 0, 0, 0, 0, 137, 1668, 1573, 1574, 1575,
	1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585,
	1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
	1596, 1597, 1598, 1599, 1600, 1601, 0, 0, 1677, 0,
	0, 0, 1670, 1671, 0, 0, 0, 1561, 0, 0,
	1567, 1568, 1569, 0, 735, 0, 1634, 1607, 1625, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 884, 886, 0, 744,
	746, 747, 773, 754, 780, 0, 0, 0, 96, 101,
	0, 1161, 0, 0, 0, 0, 0, 0, 0, 71,
	73, 0, 1135, 0, 1137, 326, 327, 0, 0, 321,
	0, 0, 0, 0, 0, -2, 0, 0, 0, 0,
	0, 1011, 1012, 509, 1069, 0, 0, 0, 1085, 1110,
	1118, 0, 0, 0, 0, 0, 1167, 997, 1002, 1003,
	1004, 998, 999, 1005, 1006, 0, 795, 0, 0, 899,
	70, 568, 627, 628, 855, 575, 1943, 580, 854, 854,
	587, 581, 588, 631, 589, 590, 591, 629, 854, 854,
	801, 626, 629, 614, 630, 629, 1309, 618, 0, 625,
	1309, 643, 1309, 0, 641, 595, 596, 1169, 797, 422,
	423, 428, 430, 0, 479, 479, 479, 462, 479, 0,
	0, 450, 1818, 0, 0, 0, 0, 459, 1818, 0,
	0, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 0, 0,
	1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
	1818, 0, 1818, 1818, 1818, 1818, 1818, 1286, 1818, 0,
	478, 1132, 469, 470, 471, 472, 477, 0, 0, 506,
	0, 0, 1010, 0, 509, 0, 1052, 0, 0, 867,
	0, 868, 869, 870, 865, 901, 925, 925, 0, 925,
	905, 1309, 0, 0, 271, 272, 260, 0, 261, 0,
	0, 274, 275, 0, 277, 278, 279, 286, 1884, 1958,
	281, 283, 0, 0, 287, 300, 301, 302, 0, 0,
	292, 293, 0, 0, 346, 347, 349, 0, 754, 1136,
	72, 669, 1305, 670, 671, 675, 0, 0, 678, 679,
	680, 681, 682, 977, 0, 0, 1061, 1062, 1063, 1064,
	854, 0, 863, 0, 859, 931, 0, 933, 0, 854,
	0, 119, 19, 0, 112, 109, 0, 0, 0, 0,
	0, 1793, 1742, 1814, 0, 0, 0, 1795, 0, 0,
	0, 0, 0, 102, 756, 716, 0, 720, 737, 0,
	741, 0, 0, 733, 725, 730, 0, 0, 750, 717,
	1308, 0, 0, 0, 710, 0, 0, 715, 754, 0,
	777, 806, 807, 810, 1366, 0, 384, 380, 398, 0,
	511, 0, 0, 0, 184, 1072, 0, 185, 189, 179,
	0, 0, 0, 1077, 0, 1074, 1079, 0, 199, 0,
	0, 174, 175, 1152, 1161, 0, 0, 0, 1688, 1690,
	1692, 1694, 1696, 0, 1699, 1709, 1709, 1705, 0, 1700,
	0, 1702, 0, 1678, 1451, 0, 1484, 0, 0, 0,
	0, 0, 0, 0, 0, 1551, 1552, 0, 0, 1556,
	0, 1558, 1559, 1560, 1562, 0, 0, 0, 1566, 0,
	1605, 1626, 1609, 1612, 0, 1616, 0, 1618, 1620, 1621,
	1622, 0, 804, 804, 0, 0, 1523, 1523, 1523, 0,
	0, 0, 0, 1523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1468, 0, 1469, 1470, 0, 0,
	0, 887, 774, 0, 0, 0, 0, 0, 1159, 0,
	86, 0, 0, 0, 0, 91, 0, 0, 74, 75,
	328, 316, 318, 0, 0, 1123, 0, 0, 0, 0,
	0, 965, 966, 968, 0, 971, 972, 973, 977, 797,
	0, 797, 1022, 1818, 513, 0, 0, 1071, 0, 1041,
	0, 0, 0, -2, 0, 0, 1118, 0, 0, 0,
	1171, 0, 0, 0, 694, 698, 23, 798, 0, 573,
	0, 574, 626, 582, 583, 854, 606, 607, 0, 0,
	854, 626, 626, 617, 629, 638, 0, 639, 1309, 1171,
	0, 0, 1131, 1237, 1205, 440, 0, 1321, 1322, 480,
	0, 1328, 1337, 1122, 1398, 0, 1337, 0, 0, 1339,
	1340, 0, 0, 0, 0, 463, 464, 0, 449, 0,
	0, 0, 0, 0, 0, 448, 0, 0, 490, 0,
	0, 0, 0, 0, 1819, 1818, 1818, 0, 457, 458,
	0, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	1818, 1818, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1277, 0, 0, 0, 0, 0, 0,
	0, 0, 1293, 1294, 0, 1022, 1818, 0, 0, 0,
	0, 513, 1039, 1057, 0, 426, 427, 487, 0, 0,
	0, 0, 0, 0, 891, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 0, 797, 926, 0, 928, 929,
	903, -2, 0, 867, 908, 1673, 264, 265, 0, 0,
	270, 288, 290, 262, 0, 0, 0, 289, 291, 295,
	296, 345, 348, 350, 816, 0, 0, 1195, 0, 978,
	979, 981, 982, 0, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1868, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 976,
	686, 850, 857, 864, 932, 934, 137, 860, 850, 0,
	122, 19, 121, 113, 114, 0, 19, 0, 0, 0,
	0, 1803, 1802, 1788, 0, 1789, 1800, 1805, 0, 1808,
	0, 409, 760, 0, 0, 740, 742, 0, 0, 740,
	0, 0, 749, 0, 0, 0, 0, 0, 0, 740,
	816, 756, 0, 813, 811, 812, 0, 0, 648, 147,
	404, 0, 0, 0, 0, 0, 673, 0, 1076, 181,
	0, 0, 201, 0, 0, 0, 1161, 1156, 1672, 1701,
	1703, 0, 1710, 1706, 1446, 1455, 1480, 0, 0, 1486,
	1498, 1498, 0, 0, 0, 1489, 1801, 1801, 1492, 1797,
	1799, 1797, 1498, 1498, 0, 138, 0, 0, 1557, 0,
	0, 0, 736, 0, 0, 0, 1519, 1521, 1523, 1523,
	1530, 1524, 1531, 1532, 1523, 1523, 1523, 1523, 1537, 1523,
	1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1517,
	0, 0, 1731, 1732, 745, 0, 0, 787, 788, 789,
	790, 791, 0, 0, 61, 61, 1161, 0, 95, 87,
	0, 0, 0, 0, 0, 76, 320, 0, 77, 78,
	0, 0, 85, 0, 0, 0, 0, 0, 970, 0,
	0, 0, 1314, 0, 1026, 1023, 1024, 1025, 0, 1066,
	514, 515, 516, 517, 0, 0, 0, 1070, 0, 0,
	1034, 0, 0, 0, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, -2, 1126, 0, 0, 0, 1314, 1145, 0, 0,
	1150, 1314, 1314, 0, 1179, 0, 1168, 748, 0, -2,
	0, 0, 696, 0, 0, 900, 576, 854, 600, 802,
	803, 1309, 854, 854, 626, 644, 640, 1179, 1170, 0,
	429, 479, 0, 1225, 0, 0, 1231, 0, 1238, 433,
	0, 481, 0, 1327, 1354, 1338, 1354, 1399, 1354, 1354,
	1122, 0, 481, 0, 0, 451, 0, 0, 0, 0,
	0, 447, 484, 810, 434, 436, 437, 438, 488, 489,
	491, 0, 493, 494, 453, 465, 466, 467, 468, 0,
	0, 0, 460, 473, 474, 475, 476, 435, 1254, 1255,
	1256, 1259, 1260, 1261, 1262, 0, 0, 1265, 1266, 1267,
	1268, 1269, 1351, 1352, 1353, 1270, 1271, 1272, 1273, 1274,
	1275, 1276, 1295, 1296, 1297, 1298, 1299, 1300, 1278, 1279,
	1280, 1281, 1282, 1283, 1284, 1285, 0, 0, 1290, 0,
	0, 0, 1026, 0, 0, 0, 0, 0, 1066, 1041,
	0, 1059, 0, 1053, 1054, 0, 0, 718, 854, 338,
	0, 895, 888, 0, 874, 875, 892, 876, 893, 894,
	880, 0, 882, 0, 878, 879, 877, 854, 866, 902,
	927, 904, 907, 909, 910, 916, 0, 0, 0, 0,
	267, 268, 269, 276, 0, 533, 282, 772, 0, 1306,
	676, 677, 1196, 1197, 684, 0, 983, 848, 0, 0,
	848, 117, 120, 0, 115, 0, 0, 0, 0, 107,
	105, 1796, 0, 0, 762, 161, 0, 0, 0, 738,
	0, 743, 740, 724, 734, 723, 731, 732, 751, 1310,
	1311, 1312, 1313, 740, 714, 713, 775, 760, 808, 809,
	0, 1367, 375, 0, 1073, 181, 186, 187, 188, 182,
	180, 1080, 0, 1082, 0, 1154, 0, 0, 1707, 1485,
	1456, 1487, 1499, 1500, 1488, 0, 1458, 1459, 1490, 1491,
	1493, 1494, 1495, 1496, 1497, 1460, 1553, 0, 1555, 1563,
	1564, 0, 1613, 1617, 0, 0, 0, 0, 0, 1528,
	1529, 1533, 1534, 1535, 1536, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 1545, 1546, 1547, 804, 1518, 0, 0, 0,
	0, 0, 0, 0, 785, 0, 0, 0, 63, 0,
	63, 1160, 1162, 0, 930, 0, 0, 92, 0, 0,
	79, 80, 0, 0, 0, 958, 961, 967, 969, 0,
	0, 0, 1315, 1316, 1318, 1319, 1320, 0, 994, 0,
	0, 1014, 1015, 1016, 1028, 0, 0, 0, 519, 520,
	0, 0, 0, 532, 528, 529, 530, 510, 1065, 1048,
	0, 0, 1037, 0, 0, 1047, 0, 1127, 1818, 1818,
	1818, 0, 0, 1239, 1818, 1818, 0, 1147, 1149, 0,
	0, 1243, 1182, 0, 0, 1173, 0, 925, 0, 0,
	854, 695, 698, 699, 796, 577, 615, 619, 616, 854,
	1182, 421, 1203, 0, 0, 0, 0, 0, 1235, 0,
	0, 1207, 0, 452, 482, 0, -2, 0, 1355, 0,
	1341, 1355, 0, 0, 1354, 0, 441, 481, 0, 0,
	0, 495, 499, 500, 0, 497, 1394, 0, 498, 0,
	486, 0, 492, 1257, 1258, 0, 1263, 1264, 0, 1288,
	0, 0, 0, 432, 501, 0, 0, 0, 502, 503,
	508, 1034, 0, 1048, 0, 1058, 0, 1055, 1056, 804,
	0, 0, 871, 896, 0, 0, 872, 0, 873, 881,
	883, 337, 911, 0, 0, 913, 914, 915, 906, 284,
	817, 980, 0, 838, 0, 0, 861, 839, 0, 19,
	0, 0, 110, 1806, 1809, 764, 0, 761, 162, 0,
	0, 0, 0, 728, 739, 722, 712, 762, 814, 815,
	183, 178, 1081, 1164, 0, 1155, 0, 0, 1565, 0,
	1523, 1520, 1523, 1522, 1514, 0, 1471, 0, 1473, 1474,
	1475, 0, 1477, 1478, 0, 783, 0, 59, 0, 62,
	60, 0, 94, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 1000, 1243, 0, 1000, 1027, 1013, 0, 1067,
	1068, 0, 521, 522, 0, 525, 531, 1029, 0, 0,
	1031, 1032, 1033, 0, 0, 1045, 0, 0, 0, 0,
	1119, 1133, 0, 0, 0, -2, 0, -2, 1144, 0,
	1188, 0, 1180, 0, 1172, 0, 1175, 854, 854, -2,
	692, 697, 0, 620, 1188, 1205, 0, 1226, 0, 0,
	0, 0, 0, 0, 0, 1206, 0, 1219, 483, 1356,
	-2, 1370, 1372, 0, 1132, 1375, 1376, 0, 0, 0,
	0, 0, 0, 1420, 1384, 0, 0, 1388, 1389, 1390,
	0, 0, 1393, 0, 1725, 1726, 0, 1397, 0, 0,
	0, 0, 0, 0, 0, 1335, 442, 443, 0, 445,
	446, 1818, 1395, 485, 439, 1818, 455, 1287, 1291, 1292,
	1289, 507, 504, 505, 1037, 1040, 1051, 1060, 719, 799,
	339, 340, 897, 0, 889, 920, 917, 0, 0, 984,
	849, 852, 111, 116, 0, 0, 766, 0, 763, 0,
	757, 759, 172, 727, 764, 132, 164, 0, 0, 1457,
	1554, 1604, 1526, 1527, 0, 1515, 0, 1509, 1510, 1511,
	1516, 0, 0, 786, 781, 64, 90, 0, 93, 68,
	81, 0, 0, 0, 0, 986, 993, 1007, 1138, 1317,
	992, 0, 0, 518, 523, 0, 526, 527, 1049, 1048,
	0, 1035, 1036, 0, 1043, 0, 0, 1106, 1797, 0,
	1128, 1129, 1130, 1240, 1241, 1242, 1198, 1146, 0, -2,
	1251, 0, 0, 1142, 1164, 1198, 0, 0, 1176, 0,
	1183, 0, 1181, 1174, 804, 693, 1185, 431, 1237, 1227,
	0, 1229, 0, 0, 0, 0, 1208, -2, 0, 1371,
	1373, 1374, 1377, 1378, 1379, 1425, 1426, 1427, 0, 0,
	1382, 1422, 1423, 1424, 1383, 0, 0, 0, 0, 0,
	1723, 1724, 1418, 0, 0, 1342, 1344, 1345, 1346, 1347,
	1348, 1349, 1350, 1343, 0, 0, 0, 1334, 1336, 444,
	0, 0, 1818, 1050, 336, 0, 0, 921, 923, 918,
	919, 851, 0, 106, 108, 123, 0, 765, 163, 0,
	766, 134, 0, 155, 0, 1165, 0, 1525, 1512, 0,
	0, 0, 0, 0, 1727, 1728, 1729, 0, 1472, 1476,
	89, 0, 66, 0, 82, 83, 0, 0, 0, 1008,
	1009, 1017, 1018, 0, 1020, 1021, 524, 1030, 1038, 1042,
	1045, 0, 1097, 0, 810, 0, 1200, 0, 1148, 1131,
	1253, 1818, 1151, 1200, 0, 1245, 1818, 1818, 1166, 0,
	1178, 0, 1190, 0, 1184, 799, 420, 0, 1187, 1223,
	1228, 1230, 1232, 0, 1236, 1234, 1209, -2, 0, 1217,
	0, 0, 1380, 1381, 0, 0, 1623, 1818, 0, 1413,
	0, 1097, 1097, 1097, 1097, 0, 496, 454, 0, 898,
	912, 0, 853, 0, 0, 755, 124, 0, 133, 152,
	0, 165, 166, 0, 0, 0, 0, 1157, 0, 1501,
	0, 0, 0, 1505, 1506, 1507, 1508, 65, 68, 0,
	0, 0, 985, 0, 1019, 1044, 1046, 1096, 1107, 1108,
	810, 1141, 0, 1237, 1252, 0, 1143, 1244, 0, 0,
	0, 1177, 1189, 0, 1192, 691, 1186, 1204, 0, 1233,
	1210, 1218, 0, 1213, 0, 0, 0, 1421, 0, 1387,
	0, 1392, 1401, 1414, 0, 0, 1323, 0, 1325, 0,
	1329, 0, 1331, 0, 0, 456, 922, 924, 0, 768,
	758, 135, 139, 0, 161, 158, 0, 167, 0, 0,
	0, 0, 1153, 0, 0, 1502, 1503, 1504, 67, 69,
	84, 0, 987, 988, 1001, 1098, 1818, 1818, 0, 0,
	0, 1104, 1105, 1109, 0, 1225, 1257, 1246, 1247, 1248,
	1191, 1224, 1212, 0, -2, 1220, 0, 0, 1675, 1685,
	1686, 1385, 1391, 1400, 1402, 1403, 0, 1415, 1416, 1417,
	1419, 1097, 1097, 1097, 1097, 1333, 767, 0, 126, 0,
	0, 156, 157, 159, 0, 168, 0, 170, 171, 0,
	1513, 989, 0, 0, 1101, 1102, 0, 1201, 0, 1203,
	1214, -2, 0, 1222, 0, 1386, 1404, 0, 1405, 0,
	0, 0, 1324, 1326, 1330, 1332, 769, 1163, 0, 140,
	0, 142, 144, 145, 1357, 153, 154, 160, 169, 0,
	974, 990, 0, 1099, 1100, 1103, 0, 1205, 1221, 1676,
	1406, 1408, 1409, 0, 0, 1407, 127, 128, 0, 141,
	0, 0, 1158, 991, 1202, 1199, 1410, 1412, 1411, 0,
	0, 143, 1358, 129, 130, 131, 0, 1359,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 117, 3, 3, 3, 148, 140, 3,
	84, 85, 145, 143, 158, 144, 157, 146, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 646, 643,
	127, 126, 128, 3, 647, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 150, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 644, 139, 645, 151,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 118, 119, 120, 121, 122, 123, 124,
	125, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 141, 142, 147, 149, 152, 153, 154, 155, 156,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:834
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:841
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:847
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:855
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:861
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:865
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:880
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:884
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:890
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:895
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:899
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:932
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:946
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:957
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:969
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:973
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:978
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:982
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:988
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    yyDollar[4].str,
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1002
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1006
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1010
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1014
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1021
		{
			yyLOCAL = &tree.ShowCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1030
		{
			yyLOCAL = &tree.PauseCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1039
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].str, yyDollar[4].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1045
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1052
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1061
		{
			yyLOCAL = &tree.ResumeCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1070
		{
			yyLOCAL = &tree.RestartCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1079
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1089
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1099
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1111
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1121
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1131
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1142
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1153
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1167
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1175
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1183
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1191
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1200
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1210
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1222
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1230
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1239
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1249
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1259
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1269
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1289
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1295
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1302
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1310
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1316
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1325
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1335
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1343
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1351
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1359
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1369
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1377
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1387
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1394
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1403
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1413
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1417
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1423
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1427
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1433
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1442
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1452
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1456
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1462
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1471
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1475
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1481
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1502
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1516
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1523
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1527
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1533
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1537
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1543
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1550
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1558
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1562
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1574
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1578
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1592
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1596
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1601
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1608
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1612
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1616
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1622
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1631
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1642
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1646
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1652
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1656
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1662
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1666
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1672
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1696
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1715
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1719
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1723
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1728
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1732
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1741
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1751
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1758
		{
			yyVAL.str = yyDollar[3].str
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1763
		{
			yyVAL.str = "\n"
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1770
		{
			yyVAL.str = yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1775
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1779
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1807
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1811
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1817
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1825
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1845
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1864
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1889
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1893
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1897
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1902
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1906
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1912
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1925
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1936
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1949
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1953
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1963
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1976
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1989
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1995
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2001
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2009
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2019
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2029
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2033
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2037
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2041
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2045
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2049
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2056
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2060
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2066
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2073
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2082
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2086
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2092
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2096
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2100
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2104
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2108
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2112
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2116
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2120
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2124
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2128
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2132
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2136
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2140
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2144
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2148
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2152
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2156
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2160
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2164
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2168
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2172
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2176
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2180
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2184
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2188
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2192
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2196
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2200
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2204
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2208
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2212
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2216
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2220
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2224
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2228
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2232
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2236
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2240
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2244
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2248
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2252
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2256
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2260
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2264
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2268
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2272
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2276
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2280
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2284
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2288
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2292
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2306
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2313
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2320
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2329
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2347
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2351
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2357
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2364
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2372
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2376
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2380
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2384
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2390
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2394
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2400
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2407
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2414
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2423
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2453
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2457
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2461
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2467
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2473
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2477
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2484
		{
			yyVAL.str = yyDollar[3].str
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2490
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2494
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2500
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2508
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2517
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2526
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2534
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2542
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2565
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2588
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2595
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2602
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2610
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2617
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2624
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2633
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2637
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2641
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2647
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2651
		{
			yyVAL.str = yyDollar[1].str
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2657
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2661
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2667
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2671
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2682
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2688
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2693
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2697
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2701
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2705
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2709
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2713
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2717
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2721
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2725
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2731
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2735
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2739
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2743
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2748
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2753
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2759
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2772
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2785
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2798
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2811
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2827
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2834
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2845
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2856
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2860
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2866
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2876
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2882
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2886
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2892
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2898
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2902
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2906
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2910
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2916
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2929
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2935
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2939
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2945
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2949
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2955
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2961
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2972
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2978
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2982
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2986
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2990
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2994
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2998
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3006
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3014
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3024
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3036
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3040
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3048
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3056
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3095
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3099
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3105
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3111
		{
			yyVAL.str = yyDollar[1].str
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3116
		{
			yyVAL.str = "true"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3117
		{
			yyVAL.str = "false"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3118
		{
			yyVAL.str = yyDollar[1].str
		}
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3123
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3129
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3138
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3145
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3153
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3157
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3182
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3205
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3215
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3222
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3231
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3239
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3243
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3249
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3260
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3264
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3270
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3274
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3298
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3308
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3318
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3334
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3352
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3356
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3362
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3366
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3372
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3378
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3386
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3396
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3404
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3414
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3424
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3434
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3441
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3445
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3449
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3453
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3457
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3464
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3470
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3474
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3478
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3482
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3486
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3490
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3494
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3498
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3503
		{
			yyVAL.str = ""
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3534
		{
			yyVAL.str = ""
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3538
		{
			yyVAL.str = string("COLUMN")
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3543
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3549
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3555
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3563
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3567
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3573
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3581
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3588
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3594
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3600
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3606
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3612
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3619
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3626
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3634
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3640
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3652
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3658
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3666
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3670
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3677
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3695
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3710
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3725
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3740
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3753
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3759
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3770
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3783
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3787
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3795
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3799
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3804
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3808
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3824
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3828
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3832
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3836
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3843
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3847
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3851
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3855
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3862
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3866
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3873
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3877
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3881
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3885
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3892
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3899
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3905
		{
			yyVAL.item = nil
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3910
		{
			yyVAL.item = nil
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3955
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3964
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3972
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3980
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3988
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3992
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3996
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4007
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4011
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4017
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4022
		{
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4026
		{
		}
	case 582:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4031
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4041
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4051
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4059
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4065
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4071
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4077
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4083
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4089
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4095
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4104
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4108
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4112
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4116
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4120
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4124
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4128
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4132
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4138
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4147
		{
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4149
		{
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4158
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4168
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4177
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4181
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4185
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4191
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4197
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4203
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4209
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4218
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4229
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4241
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4249
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4255
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4267
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4281
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4287
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4293
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4300
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4304
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4309
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4313
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4317
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4322
		{
			yyVAL.str = ""
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4326
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4332
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4347
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4351
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4357
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4365
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4372
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4380
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4386
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4392
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4397
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4405
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4411
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4416
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4422
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4428
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4432
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4460
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4468
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4476
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4484
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4488
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4494
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4507
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4515
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4524
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4530
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4538
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4546
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4554
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4560
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4568
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4574
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4582
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4588
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4598
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4603
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4610
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4626
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4639
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4650
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4654
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4660
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4666
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4675
		{
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4677
		{
		}
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4680
		{
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4689
		{
		}
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4693
		{
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4698
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4707
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4714
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4720
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4728
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4735
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4742
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4762
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4770
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4780
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4784
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4790
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4797
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4803
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4811
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4818
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4825
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4844
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4848
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4852
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4857
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4861
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4865
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4871
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4880
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4884
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4890
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4894
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4900
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4904
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4910
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4915
		{
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4919
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4926
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4930
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4937
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4942
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4946
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4952
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4956
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4962
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4966
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4971
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4975
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4988
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4999
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5010
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5032
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5055
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5063
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5072
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5076
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5089
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5093
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5098
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5102
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5109
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5114
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5121
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5127
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5131
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5135
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5139
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5143
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5147
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5152
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5156
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5162
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5172
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5187
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5191
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5205
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5209
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5215
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5224
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5228
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5232
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5236
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5240
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5246
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5253
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5262
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5266
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5272
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5280
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5284
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5289
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5293
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5299
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5303
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5307
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5312
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5316
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5322
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5328
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5332
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5338
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5343
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5347
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5351
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5356
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5360
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5364
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5369
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5373
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5381
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5385
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5389
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5403
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5407
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5417
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5427
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5437
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5449
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5457
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5465
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5474
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5482
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5490
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5498
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5506
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5514
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5522
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5530
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5538
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5548
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5559
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5573
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5577
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5581
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5586
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5590
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5594
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5603
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5607
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5612
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5616
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprs: yyDollar[3].exprsUnion(),
				RollUp:       yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5624
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5628
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5633
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5637
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5643
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5647
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5653
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5657
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5661
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5665
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5670
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5678
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5684
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5692
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5702
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5712
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5716
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5722
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5731
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5740
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5749
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:5759
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5769
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5773
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5779
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 879:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5783
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 880:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5793
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 881:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5797
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5801
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 883:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5805
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 884:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5811
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5821
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5825
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5831
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5837
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5841
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5847
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5853
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5857
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 893:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5861
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 894:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5865
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 895:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5871
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5875
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5881
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5885
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5891
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5895
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5901
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5905
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5915
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5928
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5934
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5940
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5954
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5965
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5972
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5976
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5982
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5992
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5996
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6000
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6005
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6009
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6013
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6017
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6022
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6026
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6030
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6034
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6038
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6043
		{
			yyVAL.str = ""
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6047
		{
			yyVAL.str = yyDollar[1].str
		}
	case 927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6051
		{
			yyVAL.str = yyDollar[2].str
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6057
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6061
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 930:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6066
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6070
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6074
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6078
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6082
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6088
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 958:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6130
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6143
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6149
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 961:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6155
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6168
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6173
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6180
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6187
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6191
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6197
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6203
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6208
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6212
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6216
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6220
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6227
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6260
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6265
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6272
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6279
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6283
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6289
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6295
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6299
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6303
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6309
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6315
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6321
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6325
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6331
		{
			yyVAL.str = ""
		}
	case 991:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6338
		{
			yyVAL.str = yyDollar[2].str
		}
	case 992:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6344
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6359
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6376
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6393
		{
			yyVAL.str = yyDollar[1].str
		}
	case 996:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6397
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 997:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6403
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 998:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6407
		{
			yyVAL.str = "DEFINER = "
		}
	case 999:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6411
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1000:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6416
		{
			yyVAL.str = ""
		}
	case 1001:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6420
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1007:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6434
		{
			yyVAL.str = ""
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6442
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6448
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6453
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6459
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6472
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6477
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6482
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6488
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6495
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6502
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6509
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6516
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6524
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6530
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6537
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6544
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6552
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6558
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6567
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6584
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6600
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6619
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6625
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6634
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6652
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6658
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6665
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6673
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6679
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6687
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6693
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6701
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6707
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6716
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6720
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6725
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6729
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6736
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1048:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6741
		{
			yyVAL.str = ""
		}
	case 1049:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6745
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1050:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6751
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6764
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6775
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6779
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6785
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6791
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6797
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6804
		{
			yyVAL.str = ""
		}
	case 1058:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6808
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1059:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6813
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6817
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6823
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6831
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6839
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6847
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6855
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1066:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6860
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6872
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6883
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6992
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6996
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7002
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7015
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7019
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7025
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7038
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7042
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7046
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7051
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7055
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7061
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7068
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7074
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7083
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1085:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7090
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7101
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7105
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7111
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7120
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7124
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7128
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7133
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7137
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7141
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7145
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7151
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7182
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7186
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7212
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7218
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7230
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7236
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7242
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7248
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7254
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7262
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7266
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7272
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7286
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7300
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7304
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7308
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7312
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7316
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7320
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7324
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7330
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7345
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7349
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7360
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7364
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7369
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7373
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7379
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7383
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7389
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7398
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7407
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7413
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7417
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7423
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7434
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7440
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7458
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7476
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7494
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7510
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7514
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7523
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7535
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7544
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7556
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7566
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7576
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7587
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7597
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7608
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7616
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7627
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7634
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7644
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7657
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7665
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7674
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7683
		{
			yyVAL.str = ""
		}
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7687
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7693
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7697
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7702
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7706
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7713
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7725
		{
			yyVAL.str = ""
		}
	case 1165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7729
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1166:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7735
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7756
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7770
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7774
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7778
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7784
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7788
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7795
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7802
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7809
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7816
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7820
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7824
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7828
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7832
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7839
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7846
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7850
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7857
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7864
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7868
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7874
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7880
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7884
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7891
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7898
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7905
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7912
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7916
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7921
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7925
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7929
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7934
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7938
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7951
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7955
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7963
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7971
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7975
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7987
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7991
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7997
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8001
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8007
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8020
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8034
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8038
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8044
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8048
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8054
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8063
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8074
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8078
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8083
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8087
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8093
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8098
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8106
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8110
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8120
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8124
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8135
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8143
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8151
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8159
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8170
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8179
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8189
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8199
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8203
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8208
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8212
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8218
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8222
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8228
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8237
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8247
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8251
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8257
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8261
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8267
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8276
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8286
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8290
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8296
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8300
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8304
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8310
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8314
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8318
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8322
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8326
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8330
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8334
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8339
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8343
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8347
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8351
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8355
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8359
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8363
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8367
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8371
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8375
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8379
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8383
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8387
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8393
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8399
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8403
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8407
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8411
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8415
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8421
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8427
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8433
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8439
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8445
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8451
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8455
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8459
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8463
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8468
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8479
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8483
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8489
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8500
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8504
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8510
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8514
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8518
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8522
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8526
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8530
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8544
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8548
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8557
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8563
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8571
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8575
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8582
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8591
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8599
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8607
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8614
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8618
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8624
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8628
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8632
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8638
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8642
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8648
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8661
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8674
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8713
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8753
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8767
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8773
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8786
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8799
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8812
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8825
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8840
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8850
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8856
		{
			yyVAL.str = ""
		}
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8860
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8870
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8876
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8882
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8903
		{
			yyVAL.str = ""
		}
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8907
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8913
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8919
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8923
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8928
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8936
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8940
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8944
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8948
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8954
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8960
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8964
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8969
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8976
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8980
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8986
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8990
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8996
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9000
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9004
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9008
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9012
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9016
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9021
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9025
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9029
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9033
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9037
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9041
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9045
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9049
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9053
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9057
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9071
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9075
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9079
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9083
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9087
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9091
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9097
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9101
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9106
		{
			yyVAL.str = ""
		}
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9110
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9116
		{
			yyVAL.str = ""
		}
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9120
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1400:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9126
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9143
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9150
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9157
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9164
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9171
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9180
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9186
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9192
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9196
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9200
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9204
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9208
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9213
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9220
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9224
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9228
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9233
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9237
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9242
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9246
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9262
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9268
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9272
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9276
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9280
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9284
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9288
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9292
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9296
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9300
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9304
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9308
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9312
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9316
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9322
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9326
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9330
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9334
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9338
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9342
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9346
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9350
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9354
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9358
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9400
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9404
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9408
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9413
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9421
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9425
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9429
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9433
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9437
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9447
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9451
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9455
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9459
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9463
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9467
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9471
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9477
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9486
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9495
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9506
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9516
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9526
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9535
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9545
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9555
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9565
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9574
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9584
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9588
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9593
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9597
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9603
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9607
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9613
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9622
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9634
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9651
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9668
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9681
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9694
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9706
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9720
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9735
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9750
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9767
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9782
		{
		}
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9789
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9793
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9797
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9803
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9807
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9811
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9815
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9821
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9825
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9829
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9835
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9843
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9853
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9857
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9864
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9869
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9873
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9878
		{
			yyVAL.str = ","
		}
	case 1520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9882
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9887
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9891
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1523:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9896
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9903
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9929
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9941
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9953
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9964
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9975
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9986
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9996
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10006
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10017
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10028
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10039
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10050
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10061
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10072
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10083
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10094
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10105
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10116
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10127
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10138
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10149
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10160
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10178
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10187
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10196
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10205
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10214
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10225
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10234
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10244
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10253
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10262
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10271
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10280
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10292
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10303
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10316
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10328
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10351
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1602:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10387
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10400
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10413
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10425
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10434
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10442
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10450
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10463
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10472
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10483
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10494
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10503
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10515
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10525
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10535
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10544
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10555
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10564
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10574
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10583
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10592
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10602
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10606
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10612
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10616
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10635
		{
		}
	case 1634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10637
		{
		}
	case 1668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10678
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10690
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10694
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10698
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10704
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10709
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10713
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10719
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10723
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10729
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10733
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10740
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10744
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10748
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10757
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10761
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10765
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10770
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10774
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10780
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10784
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10788
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10792
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10796
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10800
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10804
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10808
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10812
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10816
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10824
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10828
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10832
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10836
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10840
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10844
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10848
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10852
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10856
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10860
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10866
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10870
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10876
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10880
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10887
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10891
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10895
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10901
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10905
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10909
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10913
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10917
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10921
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10925
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10931
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10935
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10939
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10943
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10949
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10962
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10967
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10973
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10977
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10990
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10995
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10999
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11003
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11007
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11011
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11018
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11022
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11026
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11030
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11037
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11048
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11053
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11059
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11071
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11083
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11095
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11108
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11121
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11134
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11147
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11160
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11173
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11186
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11199
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11212
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11225
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11240
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11267
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11309
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11345
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11381
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11398
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11410
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11430
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11450
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11470
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11486
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11499
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11512
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11525
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11538
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11550
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11562
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11574
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11586
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11598
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11610
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11622
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11634
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11646
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11658
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11671
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11684
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11697
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11710
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11725
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11733
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11742
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11752
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11775
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11780
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11786
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11793
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11797
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11802
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11806
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11812
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11818
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11825
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11832
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11841
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11848
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11855
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11864
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11868
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11872
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11878
		{
		}
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11880
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11890
		{
			yyVAL.str = ""
		}
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11894
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
