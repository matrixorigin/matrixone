// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const INTEGRAL = 57437
const HEX = 57438
const FLOAT = 57439
const HEXNUM = 57440
const BIT_LITERAL = 57441
const NULL = 57442
const TRUE = 57443
const FALSE = 57444
const LOWER_THAN_CHARSET = 57445
const CHARSET = 57446
const UNIQUE = 57447
const KEY = 57448
const OR = 57449
const PIPE_CONCAT = 57450
const XOR = 57451
const AND = 57452
const NOT = 57453
const BETWEEN = 57454
const CASE = 57455
const WHEN = 57456
const THEN = 57457
const ELSE = 57458
const END = 57459
const ELSEIF = 57460
const LOWER_THAN_EQ = 57461
const LE = 57462
const GE = 57463
const NE = 57464
const NULL_SAFE_EQUAL = 57465
const IS = 57466
const LIKE = 57467
const REGEXP = 57468
const IN = 57469
const ASSIGNMENT = 57470
const ILIKE = 57471
const SHIFT_LEFT = 57472
const SHIFT_RIGHT = 57473
const DIV = 57474
const MOD = 57475
const UNARY = 57476
const COLLATE = 57477
const BINARY = 57478
const UNDERSCORE_BINARY = 57479
const INTERVAL = 57480
const OUT = 57481
const INOUT = 57482
const BEGIN = 57483
const START = 57484
const TRANSACTION = 57485
const COMMIT = 57486
const ROLLBACK = 57487
const WORK = 57488
const CONSISTENT = 57489
const SNAPSHOT = 57490
const CHAIN = 57491
const NO = 57492
const RELEASE = 57493
const PRIORITY = 57494
const QUICK = 57495
const BIT = 57496
const TINYINT = 57497
const SMALLINT = 57498
const MEDIUMINT = 57499
const INT = 57500
const INTEGER = 57501
const BIGINT = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const FLOAT_TYPE = 57506
const DECIMAL = 57507
const NUMERIC = 57508
const DECIMAL_VALUE = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const BOOL = 57516
const CHARACTER = 57517
const VARBINARY = 57518
const NCHAR = 57519
const TEXT = 57520
const TINYTEXT = 57521
const MEDIUMTEXT = 57522
const LONGTEXT = 57523
const BLOB = 57524
const TINYBLOB = 57525
const MEDIUMBLOB = 57526
const LONGBLOB = 57527
const JSON = 57528
const ENUM = 57529
const UUID = 57530
const VECF32 = 57531
const VECF64 = 57532
const GEOMETRY = 57533
const POINT = 57534
const LINESTRING = 57535
const POLYGON = 57536
const GEOMETRYCOLLECTION = 57537
const MULTIPOINT = 57538
const MULTILINESTRING = 57539
const MULTIPOLYGON = 57540
const INT1 = 57541
const INT2 = 57542
const INT3 = 57543
const INT4 = 57544
const INT8 = 57545
const S3OPTION = 57546
const STAGEOPTION = 57547
const SQL_SMALL_RESULT = 57548
const SQL_BIG_RESULT = 57549
const SQL_BUFFER_RESULT = 57550
const LOW_PRIORITY = 57551
const HIGH_PRIORITY = 57552
const DELAYED = 57553
const CREATE = 57554
const ALTER = 57555
const DROP = 57556
const RENAME = 57557
const ANALYZE = 57558
const ADD = 57559
const RETURNS = 57560
const SCHEMA = 57561
const TABLE = 57562
const SEQUENCE = 57563
const INDEX = 57564
const VIEW = 57565
const TO = 57566
const IGNORE = 57567
const IF = 57568
const PRIMARY = 57569
const COLUMN = 57570
const CONSTRAINT = 57571
const SPATIAL = 57572
const FULLTEXT = 57573
const FOREIGN = 57574
const KEY_BLOCK_SIZE = 57575
const SHOW = 57576
const DESCRIBE = 57577
const EXPLAIN = 57578
const DATE = 57579
const ESCAPE = 57580
const REPAIR = 57581
const OPTIMIZE = 57582
const TRUNCATE = 57583
const MAXVALUE = 57584
const PARTITION = 57585
const REORGANIZE = 57586
const LESS = 57587
const THAN = 57588
const PROCEDURE = 57589
const TRIGGER = 57590
const STATUS = 57591
const VARIABLES = 57592
const ROLE = 57593
const PROXY = 57594
const AVG_ROW_LENGTH = 57595
const STORAGE = 57596
const DISK = 57597
const MEMORY = 57598
const CHECKSUM = 57599
const COMPRESSION = 57600
const DATA = 57601
const DIRECTORY = 57602
const DELAY_KEY_WRITE = 57603
const ENCRYPTION = 57604
const ENGINE = 57605
const MAX_ROWS = 57606
const MIN_ROWS = 57607
const PACK_KEYS = 57608
const ROW_FORMAT = 57609
const STATS_AUTO_RECALC = 57610
const STATS_PERSISTENT = 57611
const STATS_SAMPLE_PAGES = 57612
const DYNAMIC = 57613
const COMPRESSED = 57614
const REDUNDANT = 57615
const COMPACT = 57616
const FIXED = 57617
const COLUMN_FORMAT = 57618
const AUTO_RANDOM = 57619
const ENGINE_ATTRIBUTE = 57620
const SECONDARY_ENGINE_ATTRIBUTE = 57621
const INSERT_METHOD = 57622
const RESTRICT = 57623
const CASCADE = 57624
const ACTION = 57625
const PARTIAL = 57626
const SIMPLE = 57627
const CHECK = 57628
const ENFORCED = 57629
const RANGE = 57630
const LIST = 57631
const ALGORITHM = 57632
const LINEAR = 57633
const PARTITIONS = 57634
const SUBPARTITION = 57635
const SUBPARTITIONS = 57636
const CLUSTER = 57637
const TYPE = 57638
const ANY = 57639
const SOME = 57640
const EXTERNAL = 57641
const LOCALFILE = 57642
const URL = 57643
const PREPARE = 57644
const DEALLOCATE = 57645
const RESET = 57646
const EXTENSION = 57647
const INCREMENT = 57648
const CYCLE = 57649
const MINVALUE = 57650
const PUBLICATION = 57651
const SUBSCRIPTIONS = 57652
const PUBLICATIONS = 57653
const PROPERTIES = 57654
const PARSER = 57655
const VISIBLE = 57656
const INVISIBLE = 57657
const BTREE = 57658
const HASH = 57659
const RTREE = 57660
const BSI = 57661
const IVFFLAT = 57662
const MASTER = 57663
const ZONEMAP = 57664
const LEADING = 57665
const BOTH = 57666
const TRAILING = 57667
const UNKNOWN = 57668
const LISTS = 57669
const OP_TYPE = 57670
const REINDEX = 57671
const EXPIRE = 57672
const ACCOUNT = 57673
const ACCOUNTS = 57674
const UNLOCK = 57675
const DAY = 57676
const NEVER = 57677
const PUMP = 57678
const MYSQL_COMPATIBILITY_MODE = 57679
const MODIFY = 57680
const CHANGE = 57681
const SECOND = 57682
const ASCII = 57683
const COALESCE = 57684
const COLLATION = 57685
const HOUR = 57686
const MICROSECOND = 57687
const MINUTE = 57688
const MONTH = 57689
const QUARTER = 57690
const REPEAT = 57691
const REVERSE = 57692
const ROW_COUNT = 57693
const WEEK = 57694
const REVOKE = 57695
const FUNCTION = 57696
const PRIVILEGES = 57697
const TABLESPACE = 57698
const EXECUTE = 57699
const SUPER = 57700
const GRANT = 57701
const OPTION = 57702
const REFERENCES = 57703
const REPLICATION = 57704
const SLAVE = 57705
const CLIENT = 57706
const USAGE = 57707
const RELOAD = 57708
const FILE = 57709
const TEMPORARY = 57710
const ROUTINE = 57711
const EVENT = 57712
const SHUTDOWN = 57713
const NULLX = 57714
const AUTO_INCREMENT = 57715
const APPROXNUM = 57716
const SIGNED = 57717
const UNSIGNED = 57718
const ZEROFILL = 57719
const ENGINES = 57720
const LOW_CARDINALITY = 57721
const AUTOEXTEND_SIZE = 57722
const ADMIN_NAME = 57723
const RANDOM = 57724
const SUSPEND = 57725
const ATTRIBUTE = 57726
const HISTORY = 57727
const REUSE = 57728
const CURRENT = 57729
const OPTIONAL = 57730
const FAILED_LOGIN_ATTEMPTS = 57731
const PASSWORD_LOCK_TIME = 57732
const UNBOUNDED = 57733
const SECONDARY = 57734
const RESTRICTED = 57735
const USER = 57736
const IDENTIFIED = 57737
const CIPHER = 57738
const ISSUER = 57739
const X509 = 57740
const SUBJECT = 57741
const SAN = 57742
const REQUIRE = 57743
const SSL = 57744
const NONE = 57745
const PASSWORD = 57746
const SHARED = 57747
const EXCLUSIVE = 57748
const MAX_QUERIES_PER_HOUR = 57749
const MAX_UPDATES_PER_HOUR = 57750
const MAX_CONNECTIONS_PER_HOUR = 57751
const MAX_USER_CONNECTIONS = 57752
const FORMAT = 57753
const VERBOSE = 57754
const CONNECTION = 57755
const TRIGGERS = 57756
const PROFILES = 57757
const LOAD = 57758
const INLINE = 57759
const INFILE = 57760
const TERMINATED = 57761
const OPTIONALLY = 57762
const ENCLOSED = 57763
const ESCAPED = 57764
const STARTING = 57765
const LINES = 57766
const ROWS = 57767
const IMPORT = 57768
const DISCARD = 57769
const JSONTYPE = 57770
const MODUMP = 57771
const OVER = 57772
const PRECEDING = 57773
const FOLLOWING = 57774
const GROUPS = 57775
const DATABASES = 57776
const TABLES = 57777
const SEQUENCES = 57778
const EXTENDED = 57779
const FULL = 57780
const PROCESSLIST = 57781
const FIELDS = 57782
const COLUMNS = 57783
const OPEN = 57784
const ERRORS = 57785
const WARNINGS = 57786
const INDEXES = 57787
const SCHEMAS = 57788
const NODE = 57789
const LOCKS = 57790
const ROLES = 57791
const TABLE_NUMBER = 57792
const COLUMN_NUMBER = 57793
const TABLE_VALUES = 57794
const TABLE_SIZE = 57795
const NAMES = 57796
const GLOBAL = 57797
const PERSIST = 57798
const SESSION = 57799
const ISOLATION = 57800
const LEVEL = 57801
const READ = 57802
const WRITE = 57803
const ONLY = 57804
const REPEATABLE = 57805
const COMMITTED = 57806
const UNCOMMITTED = 57807
const SERIALIZABLE = 57808
const LOCAL = 57809
const EVENTS = 57810
const PLUGINS = 57811
const CURRENT_TIMESTAMP = 57812
const DATABASE = 57813
const CURRENT_TIME = 57814
const LOCALTIME = 57815
const LOCALTIMESTAMP = 57816
const UTC_DATE = 57817
const UTC_TIME = 57818
const UTC_TIMESTAMP = 57819
const REPLACE = 57820
const CONVERT = 57821
const SEPARATOR = 57822
const TIMESTAMPDIFF = 57823
const CURRENT_DATE = 57824
const CURRENT_USER = 57825
const CURRENT_ROLE = 57826
const SECOND_MICROSECOND = 57827
const MINUTE_MICROSECOND = 57828
const MINUTE_SECOND = 57829
const HOUR_MICROSECOND = 57830
const HOUR_SECOND = 57831
const HOUR_MINUTE = 57832
const DAY_MICROSECOND = 57833
const DAY_SECOND = 57834
const DAY_MINUTE = 57835
const DAY_HOUR = 57836
const YEAR_MONTH = 57837
const SQL_TSI_HOUR = 57838
const SQL_TSI_DAY = 57839
const SQL_TSI_WEEK = 57840
const SQL_TSI_MONTH = 57841
const SQL_TSI_QUARTER = 57842
const SQL_TSI_YEAR = 57843
const SQL_TSI_SECOND = 57844
const SQL_TSI_MINUTE = 57845
const RECURSIVE = 57846
const CONFIG = 57847
const DRAINER = 57848
const SOURCE = 57849
const STREAM = 57850
const HEADERS = 57851
const CONNECTOR = 57852
const CONNECTORS = 57853
const DAEMON = 57854
const PAUSE = 57855
const CANCEL = 57856
const TASK = 57857
const RESUME = 57858
const MATCH = 57859
const AGAINST = 57860
const BOOLEAN = 57861
const LANGUAGE = 57862
const WITH = 57863
const QUERY = 57864
const EXPANSION = 57865
const WITHOUT = 57866
const VALIDATION = 57867
const ADDDATE = 57868
const BIT_AND = 57869
const BIT_OR = 57870
const BIT_XOR = 57871
const CAST = 57872
const COUNT = 57873
const APPROX_COUNT = 57874
const APPROX_COUNT_DISTINCT = 57875
const SERIAL_EXTRACT = 57876
const APPROX_PERCENTILE = 57877
const CURDATE = 57878
const CURTIME = 57879
const DATE_ADD = 57880
const DATE_SUB = 57881
const EXTRACT = 57882
const GROUP_CONCAT = 57883
const MAX = 57884
const MID = 57885
const MIN = 57886
const NOW = 57887
const POSITION = 57888
const SESSION_USER = 57889
const STD = 57890
const STDDEV = 57891
const MEDIAN = 57892
const CLUSTER_CENTERS = 57893
const KMEANS = 57894
const STDDEV_POP = 57895
const STDDEV_SAMP = 57896
const SUBDATE = 57897
const SUBSTR = 57898
const SUBSTRING = 57899
const SUM = 57900
const SYSDATE = 57901
const SYSTEM_USER = 57902
const TRANSLATE = 57903
const TRIM = 57904
const VARIANCE = 57905
const VAR_POP = 57906
const VAR_SAMP = 57907
const AVG = 57908
const RANK = 57909
const ROW_NUMBER = 57910
const DENSE_RANK = 57911
const BIT_CAST = 57912
const NEXTVAL = 57913
const SETVAL = 57914
const CURRVAL = 57915
const LASTVAL = 57916
const ARROW = 57917
const ROW = 57918
const OUTFILE = 57919
const HEADER = 57920
const MAX_FILE_SIZE = 57921
const FORCE_QUOTE = 57922
const PARALLEL = 57923
const UNUSED = 57924
const BINDINGS = 57925
const DO = 57926
const DECLARE = 57927
const LOOP = 57928
const WHILE = 57929
const LEAVE = 57930
const ITERATE = 57931
const UNTIL = 57932
const CALL = 57933
const PREV = 57934
const SLIDING = 57935
const FILL = 57936
const SPBEGIN = 57937
const BACKEND = 57938
const SERVERS = 57939
const HANDLER = 57940
const PERCENT = 57941
const SAMPLE = 57942
const KILL = 57943
const BACKUP = 57944
const FILESYSTEM = 57945
const PARALLELISM = 57946
const QUERY_RESULT = 57947

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:11348

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 118,
	11, 711,
	22, 711,
	-2, 704,
	-1, 138,
	237, 1102,
	239, 1003,
	-2, 1050,
	-1, 163,
	43, 538,
	239, 538,
	266, 545,
	267, 545,
	462, 538,
	-2, 572,
	-1, 204,
	626, 1848,
	-2, 454,
	-1, 500,
	626, 1965,
	-2, 348,
	-1, 558,
	626, 2024,
	-2, 346,
	-1, 559,
	626, 2025,
	-2, 347,
	-1, 560,
	626, 2026,
	-2, 349,
	-1, 686,
	318, 136,
	434, 136,
	435, 136,
	-2, 1753,
	-1, 751,
	82, 1540,
	-2, 1903,
	-1, 752,
	82, 1558,
	-2, 1874,
	-1, 756,
	82, 1559,
	-2, 1902,
	-1, 784,
	82, 1470,
	-2, 2096,
	-1, 785,
	82, 1471,
	-2, 2095,
	-1, 786,
	82, 1472,
	-2, 2085,
	-1, 787,
	82, 2057,
	-2, 2078,
	-1, 788,
	82, 2058,
	-2, 2079,
	-1, 789,
	82, 2059,
	-2, 2087,
	-1, 790,
	82, 2060,
	-2, 2067,
	-1, 791,
	82, 2061,
	-2, 2076,
	-1, 792,
	82, 2062,
	-2, 2088,
	-1, 793,
	82, 2063,
	-2, 2089,
	-1, 794,
	82, 2064,
	-2, 2094,
	-1, 795,
	82, 2065,
	-2, 2099,
	-1, 796,
	82, 2066,
	-2, 2100,
	-1, 797,
	82, 1536,
	-2, 1939,
	-1, 798,
	82, 1537,
	-2, 1737,
	-1, 799,
	82, 1538,
	-2, 1948,
	-1, 800,
	82, 1539,
	-2, 1746,
	-1, 802,
	82, 1542,
	-2, 1754,
	-1, 803,
	82, 1543,
	-2, 1972,
	-1, 805,
	82, 1546,
	-2, 1773,
	-1, 807,
	82, 1548,
	-2, 1984,
	-1, 808,
	82, 1549,
	-2, 1983,
	-1, 809,
	82, 1550,
	-2, 1817,
	-1, 810,
	82, 1551,
	-2, 1898,
	-1, 813,
	82, 1554,
	-2, 1995,
	-1, 815,
	82, 1556,
	-2, 1998,
	-1, 816,
	82, 1557,
	-2, 2000,
	-1, 817,
	82, 1560,
	-2, 2008,
	-1, 818,
	82, 1561,
	-2, 1883,
	-1, 819,
	82, 1562,
	-2, 1928,
	-1, 820,
	82, 1563,
	-2, 1893,
	-1, 821,
	82, 1564,
	-2, 1918,
	-1, 832,
	82, 1448,
	-2, 2090,
	-1, 833,
	82, 1449,
	-2, 2091,
	-1, 834,
	82, 1450,
	-2, 2092,
	-1, 920,
	457, 572,
	458, 572,
	-2, 539,
	-1, 966,
	123, 1737,
	134, 1737,
	154, 1737,
	-2, 1711,
	-1, 1077,
	22, 738,
	-2, 687,
	-1, 1181,
	11, 711,
	22, 711,
	-2, 1332,
	-1, 1257,
	22, 738,
	-2, 687,
	-1, 1575,
	82, 1611,
	-2, 1900,
	-1, 1576,
	82, 1612,
	-2, 1901,
	-1, 1721,
	83, 888,
	-2, 894,
	-1, 2137,
	106, 1042,
	150, 1042,
	189, 1042,
	192, 1042,
	279, 1042,
	-2, 1035,
	-1, 2284,
	11, 711,
	22, 711,
	-2, 831,
	-1, 2316,
	83, 1697,
	155, 1697,
	-2, 1885,
	-1, 2317,
	83, 1697,
	155, 1697,
	-2, 1884,
	-1, 2318,
	83, 1673,
	155, 1673,
	-2, 1871,
	-1, 2319,
	83, 1674,
	155, 1674,
	-2, 1876,
	-1, 2320,
	83, 1675,
	155, 1675,
	-2, 1805,
	-1, 2321,
	83, 1676,
	155, 1676,
	-2, 1799,
	-1, 2322,
	83, 1677,
	155, 1677,
	-2, 1727,
	-1, 2323,
	83, 1678,
	155, 1678,
	-2, 1873,
	-1, 2324,
	83, 1679,
	155, 1679,
	-2, 1803,
	-1, 2325,
	83, 1680,
	155, 1680,
	-2, 1798,
	-1, 2326,
	83, 1681,
	155, 1681,
	-2, 1787,
	-1, 2327,
	83, 1697,
	155, 1697,
	-2, 1788,
	-1, 2328,
	83, 1697,
	155, 1697,
	-2, 1789,
	-1, 2330,
	83, 1686,
	155, 1686,
	-2, 1918,
	-1, 2331,
	83, 1664,
	155, 1664,
	-2, 1903,
	-1, 2332,
	83, 1695,
	155, 1695,
	-2, 1874,
	-1, 2333,
	83, 1695,
	155, 1695,
	-2, 1902,
	-1, 2334,
	83, 1695,
	155, 1695,
	-2, 1755,
	-1, 2335,
	83, 1693,
	155, 1693,
	-2, 1893,
	-1, 2336,
	83, 1690,
	155, 1690,
	-2, 1778,
	-1, 2337,
	82, 1645,
	83, 1645,
	155, 1645,
	392, 1645,
	393, 1645,
	394, 1645,
	-2, 1726,
	-1, 2338,
	82, 1646,
	83, 1646,
	155, 1646,
	392, 1646,
	393, 1646,
	394, 1646,
	-2, 1728,
	-1, 2339,
	82, 1647,
	83, 1647,
	155, 1647,
	392, 1647,
	393, 1647,
	394, 1647,
	-2, 1944,
	-1, 2340,
	82, 1649,
	83, 1649,
	155, 1649,
	392, 1649,
	393, 1649,
	394, 1649,
	-2, 1875,
	-1, 2341,
	82, 1651,
	83, 1651,
	155, 1651,
	392, 1651,
	393, 1651,
	394, 1651,
	-2, 1857,
	-1, 2342,
	82, 1653,
	83, 1653,
	155, 1653,
	392, 1653,
	393, 1653,
	394, 1653,
	-2, 1804,
	-1, 2343,
	82, 1655,
	83, 1655,
	155, 1655,
	392, 1655,
	393, 1655,
	394, 1655,
	-2, 1783,
	-1, 2344,
	82, 1656,
	83, 1656,
	155, 1656,
	392, 1656,
	393, 1656,
	394, 1656,
	-2, 1784,
	-1, 2345,
	82, 1658,
	83, 1658,
	155, 1658,
	392, 1658,
	393, 1658,
	394, 1658,
	-2, 1725,
	-1, 2346,
	83, 1700,
	155, 1700,
	392, 1700,
	393, 1700,
	394, 1700,
	-2, 1760,
	-1, 2347,
	83, 1700,
	155, 1700,
	392, 1700,
	393, 1700,
	394, 1700,
	-2, 1774,
	-1, 2348,
	83, 1703,
	155, 1703,
	392, 1703,
	393, 1703,
	394, 1703,
	-2, 1756,
	-1, 2349,
	83, 1703,
	155, 1703,
	392, 1703,
	393, 1703,
	394, 1703,
	-2, 1820,
	-1, 2350,
	83, 1700,
	155, 1700,
	392, 1700,
	393, 1700,
	394, 1700,
	-2, 1841,
	-1, 2544,
	106, 1042,
	150, 1042,
	189, 1042,
	192, 1042,
	279, 1042,
	-2, 1036,
	-1, 2560,
	80, 632,
	155, 632,
	-2, 1215,
	-1, 2946,
	192, 1042,
	303, 1300,
	-2, 1272,
	-1, 3103,
	106, 1042,
	150, 1042,
	189, 1042,
	192, 1042,
	-2, 1158,
	-1, 3105,
	106, 1042,
	150, 1042,
	189, 1042,
	192, 1042,
	-2, 1158,
	-1, 3117,
	80, 632,
	155, 632,
	-2, 1216,
	-1, 3138,
	192, 1042,
	303, 1300,
	-2, 1273,
	-1, 3275,
	106, 1042,
	150, 1042,
	189, 1042,
	192, 1042,
	-2, 1159,
	-1, 3301,
	83, 1120,
	155, 1120,
	-2, 1042,
	-1, 3429,
	83, 1120,
	155, 1120,
	-2, 1042,
	-1, 3575,
	83, 1124,
	155, 1124,
	-2, 1042,
	-1, 3622,
	83, 1125,
	155, 1125,
	-2, 1042,
}

const yyPrivate = 57344

const yyLast = 46190

var yyAct = [...]int{
	718, 696, 3668, 720, 3642, 2589, 193, 3661, 1805, 3579,
	1555, 3123, 3482, 3216, 3586, 2965, 3585, 3578, 3429, 2932,
	704, 3508, 3467, 3538, 3329, 3032, 3407, 3152, 2583, 2402,
	3033, 3461, 1215, 3428, 1338, 3486, 2592, 3261, 1551, 698,
	592, 3258, 3357, 748, 2586, 3398, 1477, 3220, 1400, 1078,
	3260, 608, 3211, 613, 613, 3468, 1344, 36, 56, 613,
	630, 639, 3470, 1753, 639, 3090, 3265, 2941, 3282, 2563,
	965, 3272, 2905, 694, 1558, 3277, 2182, 3242, 3106, 2868,
	3139, 3030, 2697, 2696, 1895, 1892, 2894, 2679, 3079, 2613,
	2695, 2950, 2689, 2961, 2278, 3108, 2437, 2943, 1860, 650,
	2002, 178, 2758, 1964, 3018, 644, 1612, 2312, 2718, 2185,
	2998, 2692, 2533, 2873, 2878, 688, 2875, 636, 2949, 2871,
	2869, 2870, 2148, 1393, 2913, 1070, 2545, 117, 2262, 2105,
	1755, 2104, 2383, 693, 1998, 1910, 1986, 35, 2866, 2802,
	2731, 896, 1699, 1972, 1473, 2366, 2314, 2741, 1938, 1965,
	2116, 1481, 1478, 1997, 1888, 1466, 2615, 1784, 1973, 2594,
	2267, 1795, 2522, 1311, 2279, 2555, 2183, 592, 2517, 6,
	1863, 2469, 189, 8, 188, 7, 1729, 2147, 1486, 1487,
	2310, 1022, 1554, 1999, 1504, 1549, 2032, 1440, 607, 1379,
	1409, 2128, 1765, 193, 687, 193, 697, 1013, 1014, 1605,
	2178, 1347, 1327, 1764, 613, 2009, 1589, 705, 1540, 1971,
	959, 1091, 2470, 26, 1968, 15, 1954, 1447, 695, 1861,
	1928, 1548, 958, 1378, 2286, 1432, 13, 895, 625, 974,
	14, 1376, 32, 1339, 928, 22, 622, 1728, 836, 1613,
	652, 653, 1323, 23, 16, 10, 872, 169, 175, 179,
	591, 1216, 893, 1439, 878, 1255, 649, 915, 2288, 3120,
	2920, 638, 899, 2006, 2773, 1073, 1977, 1976, 1010, 3392,
	2016, 2503, 2503, 635, 3093, 631, 2503, 1348, 3025, 2425,
	2372, 2370, 1712, 2369, 1454, 2367, 633, 1450, 1280, 1005,
	634, 1006, 632, 177, 1009, 689, 1011, 609, 971, 1006,
	1006, 2103, 2852, 2850, 618, 838, 839, 1274, 973, 2847,
	2849, 176, 52, 165, 139, 3653, 1361, 1706, 1270, 3209,
	1452, 2495, 2493, 2754, 2752, 642, 1943, 3364, 3358, 166,
	1073, 898, 1150, 1151, 1152, 1149, 158, 3212, 3031, 1983,
	167, 938, 1150, 1151, 1152, 1149, 3472, 1004, 1967, 837,
	8, 2829, 7, 1210, 2223, 3247, 1313, 2419, 3243, 116,
	848, 2497, 1113, 3107, 176, 52, 165, 139, 176, 52,
	165, 139, 176, 176, 104, 3414, 176, 1275, 2139, 2411,
	170, 2003, 176, 3382, 176, 3519, 689, 1419, 1418, 1417,
	1502, 1494, 977, 975, 976, 2827, 2014, 1633, 176, 52,
	165, 139, 176, 1303, 176, 2132, 2551, 2304, 1286, 1147,
	176, 52, 165, 139, 648, 2725, 2726, 3560, 176, 3415,
	1499, 1491, 1357, 3142, 940, 1358, 2305, 939, 3384, 1905,
	2774, 1541, 1513, 170, 1545, 1873, 1874, 170, 1276, 1525,
	2724, 1501, 1493, 1713, 1714, 170, 176, 52, 165, 139,
	2766, 170, 116, 2549, 1872, 2384, 121, 122, 1544, 123,
	124, 3154, 1089, 1380, 924, 1382, 116, 170, 937, 849,
	2936, 170, 900, 170, 3145, 969, 970, 2851, 1779, 170,
	1557, 2519, 2292, 2848, 3140, 2291, 1145, 170, 2293, 3162,
	3163, 2520, 1345, 1346, 827, 3141, 826, 828, 829, 902,
	830, 831, 1343, 968, 1140, 967, 1342, 1345, 1346, 3233,
	1086, 1360, 1335, 3475, 3551, 170, 3475, 3589, 3590, 3474,
	3550, 3473, 3549, 1128, 3474, 3473, 1129, 138, 164, 174,
	2092, 102, 3146, 3610, 3553, 3459, 2934, 3646, 3647, 1285,
	2518, 2759, 1546, 3462, 3463, 3464, 3465, 3543, 3034, 163,
	157, 156, 3540, 3540, 1131, 3034, 58, 1453, 1451, 2760,
	1629, 2761, 923, 922, 3361, 1543, 1626, 2498, 2406, 1083,
	1628, 1625, 1627, 1631, 1632, 3557, 2018, 1647, 1630, 2889,
	138, 1094, 174, 3479, 921, 1879, 3048, 1536, 2634, 2256,
	3080, 2010, 3252, 1889, 1561, 897, 3087, 2127, 884, 1883,
	2215, 2416, 163, 2509, 3386, 1951, 901, 933, 3164, 1460,
	1459, 162, 613, 3555, 1143, 1144, 2790, 159, 160, 161,
	1142, 2879, 613, 1082, 1094, 2792, 3161, 2221, 2186, 2525,
	929, 3210, 1116, 2753, 1126, 2683, 2883, 2259, 2258, 3389,
	3249, 639, 639, 2263, 613, 3179, 3232, 2507, 168, 2015,
	2964, 2938, 683, 3150, 3234, 685, 3562, 3563, 3617, 1081,
	684, 2962, 2963, 2887, 947, 2903, 930, 934, 112, 3558,
	3559, 3588, 162, 1359, 113, 3147, 3151, 3149, 3148, 2496,
	1903, 1904, 1542, 2508, 636, 636, 918, 974, 916, 920,
	937, 2914, 1287, 1370, 917, 914, 913, 1127, 919, 904,
	905, 903, 906, 907, 908, 909, 1273, 935, 1333, 936,
	1560, 1559, 3419, 3156, 3157, 1138, 1139, 3501, 2884, 2885,
	931, 932, 1636, 1637, 1638, 1639, 1640, 1641, 1634, 1635,
	3176, 114, 1976, 1074, 2886, 3496, 2556, 1016, 1074, 3391,
	1075, 3051, 2796, 641, 51, 2004, 2502, 1108, 2881, 640,
	1082, 3169, 2688, 2134, 3487, 3503, 971, 927, 974, 3124,
	3164, 3509, 2004, 926, 2004, 2933, 973, 2584, 2585, 2588,
	2588, 3131, 3143, 1322, 1130, 3411, 1096, 1095, 3155, 3180,
	3478, 1006, 3320, 1006, 1006, 3679, 1220, 1006, 637, 1219,
	1006, 2967, 1006, 53, 2021, 2023, 2024, 2307, 1567, 1570,
	1571, 2233, 1121, 1074, 2005, 1123, 2017, 943, 941, 1568,
	942, 2232, 3223, 3109, 1088, 886, 3413, 887, 637, 1096,
	1095, 3510, 2188, 3315, 2368, 3309, 1099, 971, 171, 172,
	637, 173, 2531, 1124, 1455, 1320, 140, 973, 3664, 1389,
	635, 635, 631, 631, 1388, 1345, 1346, 1106, 925, 647,
	53, 1319, 3385, 633, 633, 1085, 1087, 634, 634, 632,
	632, 1283, 608, 3561, 837, 1097, 637, 1318, 2494, 3420,
	2253, 2254, 3248, 2663, 2420, 1077, 3433, 2939, 3399, 1183,
	53, 171, 172, 2942, 173, 1253, 690, 1105, 1258, 140,
	2890, 1071, 53, 140, 3577, 896, 948, 140, 140, 115,
	39, 140, 1101, 1102, 1107, 2846, 50, 140, 3160, 140,
	5, 1345, 1346, 1117, 1189, 3387, 119, 120, 944, 1185,
	1186, 1187, 1188, 140, 1076, 970, 1890, 140, 53, 140,
	2880, 1334, 3412, 1337, 1336, 140, 2793, 2524, 1119, 2224,
	2736, 2737, 3554, 140, 613, 2033, 1372, 2882, 2181, 1341,
	1122, 1125, 592, 592, 938, 3376, 3253, 3377, 2198, 2187,
	3207, 592, 592, 3037, 2189, 1404, 1404, 2635, 613, 2636,
	2637, 140, 1281, 1880, 3665, 1537, 1118, 3159, 2720, 2722,
	648, 946, 2966, 3537, 1377, 2958, 1133, 1882, 2412, 1134,
	639, 1433, 608, 2528, 2529, 2201, 1443, 1443, 2901, 1288,
	2191, 2181, 2204, 1402, 1402, 3432, 1113, 193, 2527, 1228,
	1229, 3379, 2296, 2219, 1406, 2007, 592, 1136, 2190, 1411,
	2962, 2963, 1295, 3376, 2795, 3377, 1301, 1300, 1299, 1298,
	643, 1868, 3073, 2959, 3322, 2022, 2632, 940, 1308, 1569,
	939, 3371, 3378, 3330, 3331, 3332, 3336, 3334, 3335, 3333,
	1284, 2019, 2020, 1120, 3316, 3317, 2110, 2109, 945, 2203,
	2537, 2540, 2541, 2542, 2538, 2539, 885, 1485, 1461, 1488,
	1716, 3576, 3311, 2107, 1496, 2505, 3310, 1007, 1008, 3379,
	2804, 2803, 1012, 938, 612, 612, 1398, 1399, 1259, 2108,
	620, 888, 1112, 1279, 1257, 2654, 2655, 1132, 1717, 1523,
	1277, 1278, 2202, 1715, 851, 3662, 3663, 890, 891, 892,
	3378, 1329, 1330, 1404, 2245, 1404, 1082, 938, 1289, 852,
	2664, 2666, 2667, 2668, 2665, 3283, 1503, 2902, 1492, 974,
	3675, 2192, 1756, 1500, 974, 1137, 1518, 1519, 1371, 2919,
	997, 1002, 1003, 855, 2721, 2066, 636, 1310, 2065, 3670,
	1756, 3680, 1556, 1290, 1291, 1292, 1293, 1294, 1532, 1296,
	1135, 2218, 1384, 1386, 2197, 1302, 940, 2561, 2195, 939,
	3547, 1396, 1397, 1362, 1363, 1349, 1538, 1148, 1352, 1464,
	1434, 1467, 1468, 2276, 1324, 1328, 1328, 1328, 1475, 1476,
	3038, 2995, 1469, 1470, 854, 1387, 2164, 1611, 857, 856,
	940, 2119, 2012, 939, 841, 842, 843, 844, 1324, 1324,
	1113, 1660, 1079, 1079, 2562, 1480, 1483, 2653, 1484, 1412,
	1148, 3671, 618, 3687, 2120, 2121, 1456, 1931, 1522, 3659,
	1425, 2386, 2991, 2960, 2130, 620, 1521, 1577, 1578, 1579,
	1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1553,
	1444, 1431, 1111, 1600, 1601, 1316, 1445, 949, 3076, 3050,
	1321, 2097, 3372, 3624, 3597, 3591, 3469, 1331, 3573, 2277,
	3529, 3504, 1082, 2411, 1110, 1350, 1351, 2971, 1353, 1354,
	1355, 1718, 1150, 1151, 1152, 1149, 1433, 2995, 1697, 1572,
	3492, 1727, 1404, 1731, 1732, 1550, 1734, 1735, 613, 1669,
	1534, 3625, 635, 613, 631, 2562, 1404, 2277, 1708, 1645,
	896, 1539, 1506, 1754, 1531, 633, 1528, 1512, 1404, 634,
	3452, 632, 1511, 3451, 1372, 1514, 2969, 1527, 2163, 630,
	3372, 999, 1000, 1001, 3373, 3625, 3598, 3395, 3446, 2856,
	3574, 1700, 3395, 2012, 1530, 1529, 1526, 2854, 2129, 1778,
	1111, 846, 1547, 3672, 3445, 1552, 1148, 1254, 1785, 1785,
	2277, 1372, 3493, 1372, 1372, 1929, 2739, 613, 613, 1659,
	1727, 1727, 2511, 3444, 1404, 1857, 1858, 1870, 2499, 1642,
	1643, 1726, 1646, 1591, 2401, 1650, 1651, 1652, 2045, 2391,
	1661, 592, 3453, 1404, 1733, 2152, 1598, 1599, 1666, 3443,
	3423, 1667, 2307, 1668, 3422, 1670, 2003, 1871, 3394, 1782,
	3395, 1150, 1151, 1152, 1149, 1677, 1678, 1150, 1151, 1152,
	1149, 613, 1727, 1404, 2174, 1915, 3395, 613, 613, 613,
	1920, 1921, 1696, 1150, 1151, 1152, 1149, 1925, 1926, 1927,
	2102, 3185, 1703, 1933, 1807, 3395, 1906, 3133, 2096, 1113,
	193, 2095, 3099, 193, 193, 2070, 193, 2825, 3066, 1994,
	1852, 1853, 1770, 2044, 1901, 841, 842, 843, 844, 1309,
	1671, 3395, 2012, 1603, 1730, 1390, 2012, 3062, 1777, 2042,
	3395, 1780, 1781, 3120, 1898, 1899, 2188, 2191, 1746, 1884,
	2743, 2564, 1704, 1698, 1660, 1660, 1975, 2979, 2715, 2476,
	1759, 2414, 1660, 1660, 2413, 2405, 2169, 2468, 1876, 1988,
	1878, 1722, 1912, 2307, 2061, 2046, 1786, 1993, 3086, 3134,
	1896, 1897, 1936, 1914, 3100, 2427, 2409, 1891, 2397, 1766,
	3067, 1768, 1769, 1757, 1758, 1771, 1754, 1751, 1982, 1750,
	1404, 2001, 1415, 2393, 2388, 1775, 1923, 1776, 2381, 3063,
	1508, 1942, 974, 1788, 1945, 1946, 1730, 1948, 2188, 2191,
	974, 1761, 1917, 1918, 1919, 1767, 1789, 1790, 1165, 2980,
	2277, 1148, 1196, 636, 2379, 1723, 1724, 1725, 1153, 1148,
	1098, 1068, 2377, 2375, 2151, 2098, 1182, 1737, 1738, 1739,
	1740, 2077, 1066, 3681, 1191, 2076, 1324, 1148, 2152, 1995,
	2389, 1859, 2064, 1978, 2445, 1550, 2055, 1875, 2054, 1877,
	1328, 1856, 846, 1885, 3346, 2394, 2389, 3183, 2192, 1199,
	2382, 971, 1328, 2187, 2181, 2186, 2053, 2184, 2189, 971,
	2011, 973, 1065, 1061, 1062, 1063, 1064, 1515, 2450, 973,
	2449, 2448, 2446, 1072, 1913, 1900, 2380, 2915, 1787, 2924,
	3650, 974, 1970, 1080, 2376, 2376, 2152, 2097, 2787, 3497,
	1970, 1649, 1648, 1148, 1939, 1937, 3284, 1148, 1394, 1325,
	2030, 2031, 721, 731, 1148, 1104, 1762, 1763, 1148, 1395,
	1148, 722, 2190, 723, 727, 730, 726, 724, 725, 1956,
	2192, 1984, 2367, 1772, 1773, 2187, 2181, 2186, 1148, 2184,
	2189, 3112, 2012, 3498, 1356, 2216, 3110, 2447, 853, 1516,
	3285, 2176, 1981, 1783, 3393, 3368, 1979, 1649, 1648, 3313,
	971, 688, 3312, 2916, 613, 613, 613, 3023, 1992, 635,
	973, 631, 1606, 1314, 3298, 3254, 728, 1315, 613, 613,
	613, 613, 633, 3092, 1991, 3113, 634, 1996, 632, 1990,
	3111, 2149, 2434, 2996, 2190, 1168, 1169, 1170, 1171, 1172,
	1165, 2156, 1372, 2989, 1392, 2984, 2981, 2917, 729, 2896,
	2685, 1683, 2026, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
	1165, 2025, 2535, 2504, 2424, 1326, 2034, 2392, 1372, 2298,
	1305, 1366, 1367, 1304, 1369, 2361, 1373, 1374, 1375, 1084,
	2027, 1591, 1940, 1314, 2038, 2210, 1606, 1315, 2039, 1672,
	1673, 1674, 1675, 2028, 2029, 1679, 1680, 1681, 1682, 1684,
	1685, 1686, 1687, 1688, 1689, 1690, 1691, 1676, 1420, 1421,
	1422, 1423, 1424, 858, 1426, 1427, 1428, 1429, 1430, 1448,
	1597, 1940, 1436, 1437, 1438, 2451, 2452, 2745, 1150, 1151,
	1152, 1149, 2071, 2072, 1719, 2074, 1594, 1596, 1593, 3026,
	1595, 3548, 2081, 1391, 1152, 1149, 2281, 2281, 1870, 2281,
	1156, 1157, 1158, 1159, 1160, 1161, 1162, 1154, 2217, 1149,
	3325, 3324, 1442, 1442, 2762, 2624, 2622, 592, 592, 2099,
	3427, 2600, 2598, 2158, 2159, 1082, 3678, 1150, 1151, 1152,
	1149, 1404, 613, 2161, 2162, 2091, 2093, 2094, 2371, 2534,
	1150, 1151, 1152, 1149, 3304, 2113, 1198, 613, 2180, 3024,
	2179, 3255, 3256, 1082, 2351, 608, 974, 2487, 1197, 2488,
	1443, 1220, 1870, 3655, 1219, 2356, 2131, 2358, 3654, 2302,
	3601, 193, 3250, 1164, 1163, 1173, 1174, 1166, 1167, 1168,
	1169, 1170, 1171, 1172, 1165, 3674, 2173, 3677, 1664, 2315,
	3572, 2283, 2294, 2287, 2295, 2157, 2285, 1150, 1151, 1152,
	1149, 3571, 1665, 2160, 3499, 1368, 2436, 3448, 2166, 3436,
	2170, 2167, 2299, 2300, 3084, 2168, 3426, 1150, 1151, 1152,
	1149, 2403, 2404, 3416, 2407, 971, 2363, 2001, 3251, 1410,
	2193, 2194, 2675, 2199, 1404, 973, 1404, 3359, 1404, 1150,
	1151, 1152, 1149, 1082, 1150, 1151, 1152, 1149, 1449, 3287,
	3286, 2426, 1448, 3125, 2818, 3114, 2806, 3582, 3091, 2673,
	2355, 2671, 3083, 2057, 2660, 1562, 1563, 1564, 1565, 1566,
	3085, 2690, 2362, 2888, 2417, 2783, 1404, 2454, 2260, 2421,
	2757, 2874, 2309, 1150, 1151, 1152, 1149, 2756, 2674, 2353,
	1328, 2289, 2461, 1150, 1151, 1152, 1149, 1404, 2360, 1173,
	1174, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1165, 1607,
	1608, 1609, 1610, 2817, 1402, 2672, 2658, 2670, 1644, 2043,
	2659, 2306, 2303, 2657, 2453, 2656, 1654, 1384, 1386, 2056,
	1150, 1151, 1152, 1149, 2648, 1402, 2642, 2641, 3485, 1150,
	1151, 1152, 1149, 2352, 2640, 2462, 2639, 2354, 2500, 1082,
	2101, 2465, 2466, 1082, 1959, 1150, 1151, 1152, 1149, 1958,
	1404, 1957, 2165, 2532, 1150, 1151, 1152, 1149, 1953, 1727,
	2442, 1952, 2463, 1701, 1909, 3238, 2460, 2560, 1908, 2423,
	1907, 3673, 1509, 2566, 1272, 2512, 3217, 3648, 3616, 2315,
	3615, 2418, 3612, 1150, 1151, 1152, 1149, 2399, 3481, 2432,
	2576, 1150, 1151, 1152, 1149, 1150, 1151, 1152, 1149, 1082,
	2410, 3259, 2491, 3466, 3457, 3440, 1550, 2597, 2438, 2415,
	2438, 2408, 3226, 3435, 1082, 1082, 1082, 1785, 2550, 974,
	1082, 3434, 2608, 2609, 2610, 2611, 1082, 2618, 3390, 2619,
	2620, 3388, 2621, 2546, 2623, 2428, 2429, 3225, 1150, 1151,
	1152, 1149, 3516, 2049, 3360, 2618, 2444, 1774, 3306, 2547,
	3268, 2603, 2604, 3237, 3173, 3236, 2607, 2281, 1150, 1151,
	1152, 1149, 2614, 1150, 1151, 1152, 1149, 3215, 2471, 2472,
	1807, 2676, 2431, 3213, 2477, 2567, 3192, 3189, 3187, 592,
	1150, 1151, 1152, 1149, 1727, 1082, 1870, 1870, 1870, 1870,
	2680, 3082, 3081, 733, 118, 1916, 3078, 1082, 1870, 118,
	1701, 2281, 3059, 3057, 3041, 1701, 1701, 2514, 2990, 2516,
	2986, 2569, 2557, 2977, 2595, 2976, 2572, 1404, 2595, 2591,
	2897, 2698, 683, 2513, 2861, 685, 2530, 2860, 613, 613,
	684, 2858, 1730, 2698, 2602, 1150, 1151, 1152, 1149, 2578,
	2565, 2106, 2797, 8, 2559, 7, 2794, 2755, 2041, 1736,
	619, 2729, 2669, 118, 1741, 1941, 2580, 2577, 1944, 3054,
	2661, 1947, 2651, 2649, 1949, 2821, 2645, 2644, 2599, 2593,
	2820, 2643, 2501, 2400, 2606, 3512, 2819, 783, 782, 3381,
	2711, 3380, 2396, 2395, 193, 1150, 1151, 1152, 1149, 193,
	2575, 1150, 1151, 1152, 1149, 1961, 1150, 1151, 1152, 1149,
	1955, 2638, 1150, 1151, 1152, 1149, 1711, 1710, 1510, 1497,
	1660, 1227, 1660, 1223, 1987, 2772, 1222, 1069, 1791, 1792,
	850, 2650, 1150, 1151, 1152, 1149, 2782, 176, 3369, 165,
	139, 3239, 1404, 2222, 3224, 2789, 2225, 2226, 2227, 2228,
	2229, 2230, 2231, 2686, 2681, 2234, 2235, 2236, 2237, 2238,
	2239, 2240, 2241, 2242, 2243, 2244, 2710, 2246, 2247, 2248,
	2249, 2250, 2713, 2251, 972, 2714, 2767, 974, 2712, 3105,
	2727, 118, 1911, 2730, 3104, 2775, 974, 3103, 1911, 1911,
	1911, 3075, 2740, 3071, 3069, 2746, 118, 2723, 118, 2684,
	2750, 3068, 1700, 1468, 2596, 3065, 170, 2771, 1475, 1476,
	3064, 3058, 3056, 1469, 1470, 2699, 2700, 2701, 2702, 3039,
	2036, 3029, 3028, 2040, 2769, 2811, 3014, 2813, 3013, 2485,
	1480, 1483, 2776, 1484, 2925, 2864, 2853, 2823, 2744, 2859,
	2816, 2748, 2786, 2747, 2568, 2808, 1082, 2807, 2801, 2791,
	2738, 2510, 2877, 2573, 2574, 1150, 1151, 1152, 1149, 2378,
	2765, 2374, 2892, 2778, 2052, 2770, 2763, 613, 2779, 2373,
	2777, 2082, 2059, 2075, 2069, 2067, 2785, 2063, 2768, 2906,
	1082, 2062, 2060, 1082, 1082, 2051, 2048, 2798, 2484, 2047,
	1960, 2073, 1870, 2149, 2799, 2923, 2078, 2079, 2080, 1694,
	1693, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 1692,
	2805, 1663, 1662, 2210, 1150, 1151, 1152, 1149, 1653, 176,
	1416, 2814, 2815, 1414, 2812, 2948, 2590, 2951, 3600, 2951,
	2951, 2809, 2810, 1217, 1082, 3511, 2855, 3454, 974, 2909,
	974, 3442, 2912, 974, 3437, 1463, 3340, 2900, 3323, 3319,
	2546, 3297, 3281, 2972, 3200, 3198, 3171, 2968, 3170, 3167,
	3166, 1404, 1404, 2857, 3132, 3129, 3127, 2931, 974, 2830,
	2831, 2935, 2937, 2153, 2970, 2832, 2833, 2834, 2835, 3094,
	2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 170, 2863,
	2921, 2893, 2862, 1474, 1465, 1479, 1482, 1471, 1312, 1402,
	1402, 2899, 2677, 2601, 2553, 2552, 2548, 971, 613, 2973,
	2974, 2515, 2486, 2877, 2918, 2922, 2947, 973, 2908, 2387,
	2297, 2910, 2911, 2483, 1727, 1727, 2252, 2150, 2122, 2926,
	2956, 2180, 2930, 2179, 2927, 2928, 1163, 1173, 1174, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1165, 2952, 2953, 1150,
	1151, 1152, 1149, 2482, 2957, 2100, 1592, 170, 2521, 1922,
	1721, 3302, 2481, 1707, 1535, 1495, 1472, 1271, 1256, 2946,
	1082, 1252, 1251, 1250, 2454, 1249, 1248, 1247, 1246, 1150,
	1151, 1152, 1149, 3027, 1245, 2123, 2124, 2125, 1150, 1151,
	1152, 1149, 2480, 1701, 1244, 1701, 1243, 1242, 1241, 2140,
	2141, 2142, 2143, 1240, 1239, 1238, 2315, 1237, 1236, 1235,
	1234, 1233, 1232, 1701, 1701, 1231, 1230, 1226, 1150, 1151,
	1152, 1149, 1225, 3528, 2479, 2982, 613, 1224, 1221, 2983,
	2988, 2987, 1214, 1213, 3526, 2992, 2993, 1211, 2985, 2478,
	1210, 1209, 3003, 2978, 1208, 1207, 1442, 2475, 2630, 2631,
	1150, 1151, 1152, 1149, 1206, 1205, 3007, 2994, 1204, 1203,
	3010, 3011, 3012, 2646, 2647, 1150, 1151, 1152, 1149, 1202,
	1201, 1200, 3006, 1150, 1151, 1152, 1149, 3016, 1195, 3022,
	1194, 3005, 3295, 1193, 1192, 1115, 1067, 2682, 1164, 1163,
	1173, 1174, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1165,
	3040, 2999, 3000, 3524, 3522, 3168, 2155, 2068, 3042, 2136,
	1103, 3043, 3630, 3628, 3046, 3587, 3002, 3047, 2536, 2954,
	2308, 1963, 1114, 2707, 3060, 3004, 2704, 2703, 2708, 2398,
	118, 118, 972, 3052, 3098, 1164, 1163, 1173, 1174, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1165, 2705, 1306, 2281,
	1870, 3117, 2706, 3074, 974, 2709, 2435, 2273, 2274, 2441,
	3077, 974, 2929, 1410, 3202, 2390, 2455, 2456, 2474, 1748,
	1749, 2895, 3203, 3135, 2458, 2459, 1082, 2944, 1911, 2945,
	2781, 2473, 103, 2438, 55, 2948, 2220, 2464, 610, 1082,
	3178, 2467, 54, 3072, 1150, 1151, 1152, 1149, 3017, 1844,
	1082, 2457, 3182, 1181, 1457, 2433, 1404, 1150, 1151, 1152,
	1149, 2385, 3136, 1562, 1701, 2422, 3089, 1150, 1151, 1152,
	1149, 3201, 1727, 3119, 1505, 3175, 1082, 1150, 1151, 1152,
	1149, 1150, 1151, 1152, 1149, 1489, 2614, 1602, 3126, 615,
	3128, 616, 614, 3115, 1402, 1743, 1744, 1745, 3116, 617,
	2626, 2872, 3158, 3165, 3184, 193, 3122, 2627, 2628, 2629,
	3044, 3045, 2698, 1150, 1151, 1152, 1149, 2112, 1082, 2403,
	2404, 1924, 1109, 2865, 3194, 2579, 3172, 2264, 2554, 2172,
	2570, 2571, 3118, 3177, 2145, 3174, 1752, 3204, 1720, 3181,
	3121, 1649, 1648, 1267, 1268, 1265, 1266, 3639, 3186, 1263,
	1264, 3190, 3188, 3439, 2698, 3191, 2975, 1082, 3195, 1261,
	1262, 3196, 3193, 2261, 2269, 2272, 2273, 2274, 2270, 993,
	2271, 2275, 2257, 1855, 1365, 1082, 1404, 1404, 1364, 1141,
	3009, 2906, 2269, 2272, 2273, 2274, 2270, 2732, 2271, 2275,
	2111, 1989, 3276, 1260, 3276, 1317, 1297, 1340, 3607, 3605,
	3222, 3218, 3565, 3545, 3544, 3219, 3208, 3542, 1082, 3291,
	1082, 3262, 3488, 3455, 1402, 3266, 3354, 3353, 3294, 3292,
	3296, 3270, 3271, 3214, 3264, 3061, 3036, 1404, 3035, 3020,
	2205, 2175, 1507, 3019, 3244, 3246, 3245, 2742, 1756, 2784,
	994, 3273, 974, 2138, 1556, 613, 1556, 1082, 1082, 3632,
	3631, 1082, 1082, 3269, 2050, 1100, 3631, 3280, 2558, 3279,
	3632, 3321, 3015, 1079, 1332, 3266, 63, 3119, 2, 3342,
	3651, 3290, 180, 3, 3337, 3652, 1, 2492, 1705, 1754,
	3206, 3351, 3300, 3262, 3262, 1269, 3299, 3262, 3262, 845,
	3355, 3356, 840, 3307, 3158, 3165, 3305, 3327, 3328, 3303,
	3241, 3338, 3339, 1404, 1381, 2290, 1902, 1408, 3227, 3348,
	3228, 988, 983, 978, 982, 986, 1709, 841, 842, 843,
	844, 3235, 1079, 847, 1413, 2716, 3288, 3289, 619, 2717,
	3343, 3008, 3375, 2719, 2749, 2506, 2751, 3347, 2008, 991,
	2687, 1402, 3349, 981, 2255, 2126, 2891, 1307, 889, 1655,
	1520, 3367, 3362, 996, 1701, 1093, 1517, 1092, 3366, 1701,
	118, 1090, 3408, 1604, 3402, 735, 1966, 3370, 1987, 2678,
	2652, 3350, 3638, 3667, 3374, 3599, 3641, 1533, 1082, 719,
	3536, 3458, 3603, 3460, 3365, 2013, 1146, 2764, 3425, 3396,
	3431, 911, 773, 746, 989, 1212, 1498, 1490, 2828, 2826,
	998, 992, 745, 2800, 3088, 2526, 3405, 3404, 2735, 3410,
	995, 912, 3400, 974, 1556, 1950, 3363, 3421, 3417, 2733,
	2734, 1082, 1458, 979, 118, 1462, 1404, 2822, 3403, 118,
	3222, 2171, 3418, 3507, 3301, 2940, 2587, 3502, 3293, 3130,
	3231, 3229, 118, 3230, 654, 3438, 990, 1881, 590, 956,
	3341, 1962, 655, 2154, 118, 3556, 3441, 3262, 869, 2135,
	870, 862, 2544, 3477, 1402, 2543, 1573, 1155, 1590, 2844,
	2845, 3447, 3471, 1190, 3449, 692, 1082, 2037, 2523, 3153,
	2728, 62, 61, 60, 59, 3456, 980, 1932, 201, 737,
	3489, 1164, 1163, 1173, 1174, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1165, 200, 3257, 3533, 3484, 3643, 717, 716,
	715, 714, 3262, 3483, 3480, 713, 712, 2268, 3506, 2266,
	2265, 3491, 1865, 1082, 1864, 1930, 2904, 2617, 2612, 1796,
	1794, 1404, 3500, 2605, 3531, 3534, 3521, 3523, 3525, 3527,
	2200, 2207, 1793, 3505, 3584, 3517, 3518, 3318, 2662, 3535,
	3221, 3514, 1742, 2196, 1813, 2633, 1810, 1809, 2625, 3262,
	3314, 3308, 1841, 987, 3406, 3275, 3137, 3138, 2955, 1402,
	3539, 1404, 3541, 3520, 3408, 3144, 2144, 1021, 1017, 3530,
	1019, 3095, 3096, 3097, 1020, 1018, 2443, 3101, 3102, 2177,
	3575, 2867, 2118, 2117, 2115, 3564, 3583, 3566, 2114, 984,
	3568, 1282, 985, 3476, 3552, 3240, 2313, 2311, 3001, 1402,
	2997, 1974, 1985, 2780, 3569, 3570, 1866, 1862, 2137, 3567,
	3383, 1747, 863, 2133, 155, 49, 100, 3592, 153, 3593,
	48, 3594, 90, 3595, 89, 99, 3606, 3596, 3608, 3609,
	151, 47, 185, 3604, 3602, 184, 1082, 187, 2898, 3471,
	186, 3611, 183, 2364, 2365, 182, 1150, 1151, 1152, 1149,
	1446, 181, 3546, 3278, 3431, 835, 3620, 38, 37, 33,
	12, 11, 34, 21, 3622, 3623, 3621, 20, 3626, 3637,
	3627, 3645, 3618, 3629, 3644, 3633, 3634, 3635, 3636, 1524,
	19, 25, 31, 30, 111, 110, 29, 109, 3656, 108,
	1082, 3649, 107, 106, 105, 28, 18, 42, 41, 40,
	3657, 3506, 3658, 9, 98, 3660, 96, 27, 97, 94,
	3666, 3669, 95, 93, 91, 74, 73, 72, 87, 86,
	1869, 85, 84, 83, 82, 1633, 1556, 80, 81, 910,
	71, 70, 69, 68, 3676, 67, 92, 78, 88, 79,
	77, 76, 3645, 3683, 75, 3644, 3682, 66, 65, 64,
	137, 136, 3669, 3684, 135, 134, 133, 131, 3688, 2824,
	132, 130, 176, 52, 165, 139, 129, 128, 127, 126,
	125, 43, 44, 45, 46, 3053, 147, 146, 148, 1911,
	166, 150, 3055, 152, 149, 154, 144, 158, 142, 145,
	143, 167, 141, 118, 57, 101, 118, 118, 17, 118,
	24, 4, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 3070, 1164, 1163, 1173, 1174, 1166, 1167, 1168, 1169,
	1170, 1171, 1172, 1165, 0, 104, 0, 0, 0, 0,
	0, 170, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 972, 0, 0, 0, 0,
	3344, 2430, 0, 0, 3345, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 1842, 0,
	0, 0, 0, 1803, 0, 1164, 1163, 1173, 1174, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1165, 0, 1629, 0,
	0, 2035, 0, 0, 1626, 0, 0, 3049, 1628, 1625,
	1627, 1631, 1632, 1844, 1812, 0, 1630, 121, 122, 0,
	123, 124, 0, 1845, 1846, 1164, 1163, 1173, 1174, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1181, 0, 0, 1811,
	0, 0, 1701, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1701, 1819, 0, 3197, 0, 0, 3199,
	1164, 1163, 1173, 1174, 1166, 1167, 1168, 1169, 1170, 1171,
	1172, 1165, 0, 0, 0, 0, 3205, 0, 138, 164,
	174, 0, 102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1633, 0, 0,
	163, 157, 156, 0, 1176, 0, 1180, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3450, 0, 0,
	0, 1835, 1177, 1179, 1175, 0, 1178, 1164, 1163, 1173,
	1174, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1165, 1614,
	1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624,
	1636, 1637, 1638, 1639, 1640, 1641, 1634, 1635, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 159, 160,
	161, 0, 0, 0, 3490, 0, 0, 0, 0, 3494,
	3495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1802, 1804, 1801, 0, 1798, 0, 0, 168,
	0, 1823, 0, 0, 0, 0, 0, 0, 0, 0,
	3515, 0, 1829, 0, 0, 0, 0, 0, 0, 112,
	1814, 0, 1797, 162, 0, 113, 0, 0, 0, 0,
	0, 0, 1817, 1851, 0, 0, 1818, 1820, 1822, 0,
	1824, 1825, 1826, 1830, 1831, 1832, 1834, 1837, 1838, 1839,
	0, 1842, 0, 0, 0, 0, 1803, 1827, 1836, 1828,
	1629, 0, 0, 0, 0, 0, 1626, 0, 0, 1806,
	1628, 1625, 1627, 1631, 1632, 0, 0, 0, 1630, 0,
	0, 0, 114, 0, 0, 0, 1844, 1812, 0, 0,
	0, 1843, 0, 0, 0, 51, 1845, 1846, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2284, 0, 0, 0, 0, 0, 1799, 1800, 0,
	3397, 0, 1811, 0, 0, 0, 0, 0, 3613, 3614,
	0, 0, 0, 0, 0, 1840, 0, 1819, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 0, 0, 0,
	0, 0, 1816, 0, 0, 0, 0, 0, 0, 1815,
	0, 0, 0, 0, 0, 0, 3326, 0, 0, 0,
	0, 0, 0, 0, 0, 1869, 0, 0, 0, 171,
	172, 0, 173, 1833, 118, 0, 0, 140, 0, 0,
	0, 0, 1821, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1835, 1848, 1847, 0, 0, 0,
	0, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622,
	1623, 1624, 1636, 1637, 1638, 1639, 1640, 1641, 1634, 1635,
	0, 0, 0, 0, 0, 0, 1199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 39, 0, 0, 0, 0, 0, 50, 1808, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 120, 0,
	0, 0, 0, 0, 0, 1802, 2582, 1801, 0, 2581,
	0, 0, 0, 0, 1823, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3513, 1829, 0, 0, 0, 0,
	1850, 0, 0, 1849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1817, 1851, 0, 0, 1818,
	1820, 1822, 0, 1824, 1825, 1826, 1830, 1831, 1832, 1834,
	1837, 1838, 1839, 0, 0, 0, 0, 0, 0, 0,
	1827, 1836, 1828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1806, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3580, 0,
	0, 0, 0, 0, 1843, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	1799, 1800, 1039, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1840, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3580, 1816, 0, 0, 0, 0,
	0, 0, 1815, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1833, 0, 0, 0,
	0, 0, 0, 0, 0, 1821, 0, 0, 0, 0,
	0, 0, 3580, 0, 0, 0, 0, 0, 1848, 1847,
	0, 0, 0, 0, 1039, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1869,
	1869, 1869, 1869, 0, 0, 0, 0, 0, 0, 0,
	0, 1869, 1025, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3686, 0,
	0, 1808, 1047, 1051, 1053, 1055, 1057, 1058, 1060, 0,
	1065, 1061, 1062, 1063, 1064, 0, 1042, 1043, 1044, 1045,
	1023, 1024, 1048, 0, 1026, 0, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1038, 1040, 1036, 1037, 1046,
	1039, 0, 0, 1850, 0, 0, 1849, 1050, 1052, 1054,
	1056, 1059, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 118, 0, 1025, 0, 0, 0, 1015, 0,
	0, 0, 0, 0, 0, 1041, 0, 0, 0, 0,
	0, 0, 118, 0, 1047, 1051, 1053, 1055, 1057, 1058,
	1060, 118, 1065, 1061, 1062, 1063, 1064, 0, 1042, 1043,
	1044, 1045, 1023, 1024, 1048, 0, 1026, 0, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1040, 1036,
	1037, 1046, 0, 0, 0, 665, 664, 671, 661, 1050,
	1052, 1054, 1056, 1059, 0, 0, 0, 668, 669, 0,
	670, 674, 0, 0, 656, 0, 0, 0, 0, 0,
	1025, 0, 0, 0, 679, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1041, 0, 0,
	1047, 1051, 1053, 1055, 1057, 1058, 1060, 0, 1065, 1061,
	1062, 1063, 1064, 0, 1042, 1043, 1044, 1045, 1023, 1024,
	1048, 0, 1026, 0, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1038, 1040, 1036, 1037, 1046, 0, 0,
	0, 0, 0, 2439, 2440, 1050, 1052, 1054, 1056, 1059,
	0, 0, 0, 886, 0, 887, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 0, 118, 0, 0, 118, 0,
	0, 0, 0, 1041, 0, 1869, 0, 0, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 881, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 859, 0, 0, 0, 0, 665, 664, 671,
	661, 657, 659, 658, 0, 0, 0, 0, 0, 668,
	669, 663, 670, 674, 0, 0, 656, 1049, 0, 0,
	0, 0, 0, 667, 0, 0, 679, 0, 0, 0,
	682, 0, 0, 0, 0, 0, 0, 660, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 883, 0, 876, 0, 0, 0, 683,
	0, 0, 685, 0, 880, 879, 0, 684, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1049,
	0, 0, 0, 0, 0, 875, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 0, 0, 874,
	0, 0, 0, 873, 0, 0, 662, 666, 672, 860,
	673, 675, 0, 866, 676, 677, 678, 0, 0, 680,
	681, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1049, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 884, 657, 659, 658, 0, 0, 0, 118,
	0, 0, 0, 663, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 667, 0, 0, 865, 0,
	0, 0, 682, 0, 0, 0, 0, 0, 0, 660,
	0, 0, 0, 753, 0, 0, 0, 0, 0, 0,
	0, 0, 360, 0, 484, 517, 506, 589, 472, 0,
	0, 0, 0, 1869, 0, 706, 0, 0, 0, 300,
	0, 0, 330, 521, 503, 513, 504, 489, 490, 491,
	498, 310, 492, 493, 494, 465, 495, 466, 496, 497,
	744, 520, 471, 391, 344, 538, 537, 0, 0, 806,
	814, 0, 0, 0, 0, 882, 0, 0, 0, 0,
	0, 699, 0, 0, 734, 783, 782, 721, 731, 0,
	0, 273, 199, 467, 585, 468, 722, 0, 723, 727,
	730, 726, 724, 725, 0, 798, 0, 0, 0, 0,
	0, 0, 691, 703, 871, 707, 0, 0, 662, 666,
	672, 0, 673, 675, 0, 0, 676, 677, 678, 0,
	0, 680, 681, 0, 0, 0, 0, 0, 118, 700,
	701, 0, 0, 0, 0, 754, 0, 702, 0, 0,
	749, 728, 732, 0, 0, 0, 0, 263, 396, 413,
	274, 387, 426, 279, 394, 269, 359, 383, 0, 0,
	265, 411, 393, 341, 320, 321, 264, 0, 378, 298,
	312, 295, 357, 729, 752, 756, 294, 820, 750, 421,
	267, 0, 420, 356, 407, 412, 342, 336, 266, 409,
	340, 335, 324, 302, 821, 325, 326, 316, 368, 334,
	369, 317, 346, 345, 347, 0, 0, 118, 0, 0,
	449, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 579, 747, 0, 582, 0, 423,
	0, 0, 804, 0, 0, 0, 395, 0, 0, 327,
	0, 0, 0, 751, 0, 381, 362, 817, 0, 0,
	379, 332, 408, 370, 414, 397, 422, 375, 371, 258,
	398, 297, 343, 270, 272, 292, 299, 301, 303, 304,
	352, 353, 365, 386, 399, 400, 401, 296, 280, 380,
	281, 314, 282, 259, 288, 286, 289, 388, 290, 261,
	366, 405, 0, 309, 376, 339, 262, 338, 367, 404,
	403, 271, 430, 436, 437, 525, 0, 442, 603, 604,
	605, 451, 456, 457, 458, 460, 461, 462, 463, 526,
	543, 510, 480, 444, 534, 477, 481, 482, 546, 1657,
	1656, 1658, 435, 328, 329, 0, 307, 255, 256, 599,
	802, 358, 548, 581, 473, 0, 816, 797, 799, 800,
	803, 807, 808, 809, 810, 811, 813, 815, 819, 598,
	0, 527, 542, 601, 541, 595, 364, 0, 385, 539,
	486, 0, 531, 505, 0, 532, 501, 536, 118, 475,
	0, 392, 416, 428, 445, 448, 476, 561, 562, 563,
	260, 447, 565, 566, 567, 568, 569, 570, 571, 564,
	818, 508, 485, 511, 427, 488, 487, 0, 0, 522,
	755, 523, 524, 348, 349, 350, 351, 805, 549, 278,
	446, 374, 0, 509, 0, 0, 0, 0, 0, 0,
	0, 0, 514, 515, 512, 606, 0, 572, 573, 0,
	0, 440, 441, 306, 313, 459, 315, 277, 363, 308,
	425, 322, 0, 452, 516, 453, 575, 578, 576, 577,
	355, 318, 319, 389, 323, 333, 377, 424, 361, 382,
	275, 415, 390, 337, 502, 529, 827, 801, 826, 828,
	829, 825, 830, 831, 812, 711, 0, 759, 823, 822,
	824, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 556, 555, 554, 553, 552, 551, 550,
	0, 0, 499, 402, 287, 252, 283, 284, 291, 596,
	593, 406, 597, 0, 257, 479, 331, 0, 372, 305,
	544, 545, 790, 766, 767, 768, 708, 769, 763, 764,
	709, 765, 791, 757, 787, 788, 736, 760, 770, 786,
	771, 789, 792, 793, 832, 833, 777, 761, 224, 834,
	774, 794, 785, 784, 772, 758, 795, 796, 743, 738,
	775, 776, 762, 778, 779, 780, 710, 739, 740, 741,
	742, 0, 0, 0, 431, 432, 433, 455, 417, 478,
	594, 0, 0, 0, 0, 0, 0, 0, 528, 540,
	574, 0, 583, 584, 586, 588, 781, 753, 600, 469,
	470, 580, 0, 0, 0, 0, 360, 0, 484, 517,
	506, 589, 472, 0, 0, 0, 0, 0, 0, 706,
	0, 0, 0, 300, 1702, 0, 330, 521, 503, 513,
	504, 489, 490, 491, 498, 310, 492, 493, 494, 465,
	495, 466, 496, 497, 744, 520, 471, 391, 344, 538,
	537, 0, 0, 806, 814, 0, 0, 0, 0, 0,
	0, 0, 1893, 0, 0, 699, 0, 0, 734, 783,
	782, 721, 731, 0, 0, 273, 199, 467, 585, 468,
	722, 0, 723, 727, 730, 726, 724, 725, 0, 798,
	0, 0, 0, 0, 0, 0, 691, 703, 0, 707,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 700, 701, 0, 0, 0, 0, 754,
	0, 702, 0, 0, 1894, 728, 732, 0, 0, 0,
	0, 263, 396, 413, 274, 387, 426, 279, 394, 269,
	359, 383, 0, 0, 265, 411, 393, 341, 320, 321,
	264, 0, 378, 298, 312, 295, 357, 729, 752, 756,
	294, 820, 750, 421, 267, 0, 420, 356, 407, 412,
	342, 336, 266, 409, 340, 335, 324, 302, 821, 325,
	326, 316, 368, 334, 369, 317, 346, 345, 347, 0,
	0, 0, 0, 0, 449, 450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 579, 747,
	0, 582, 0, 423, 0, 0, 804, 0, 0, 0,
	395, 0, 0, 327, 0, 0, 0, 751, 0, 381,
	362, 817, 0, 0, 379, 332, 408, 370, 414, 397,
	422, 375, 371, 258, 398, 297, 343, 270, 272, 292,
	299, 301, 303, 304, 352, 353, 365, 386, 399, 400,
	401, 296, 280, 380, 281, 314, 282, 259, 288, 286,
	289, 388, 290, 261, 366, 405, 0, 309, 376, 339,
	262, 338, 367, 404, 403, 271, 430, 436, 437, 525,
	0, 442, 603, 604, 605, 451, 456, 457, 458, 460,
	461, 462, 463, 526, 543, 510, 480, 444, 534, 477,
	481, 482, 546, 0, 0, 0, 435, 328, 329, 0,
	307, 255, 256, 599, 802, 358, 548, 581, 473, 0,
	816, 797, 799, 800, 803, 807, 808, 809, 810, 811,
	813, 815, 819, 598, 0, 527, 542, 601, 541, 595,
	364, 0, 385, 539, 486, 0, 531, 505, 0, 532,
	501, 536, 0, 475, 0, 392, 416, 428, 445, 448,
	476, 561, 562, 563, 260, 447, 565, 566, 567, 568,
	569, 570, 571, 564, 818, 508, 485, 511, 427, 488,
	487, 0, 0, 522, 755, 523, 524, 348, 349, 350,
	351, 805, 549, 278, 446, 374, 0, 509, 0, 0,
	0, 0, 0, 0, 0, 0, 514, 515, 512, 606,
	0, 572, 573, 0, 0, 440, 441, 306, 313, 459,
	315, 277, 363, 308, 425, 322, 0, 452, 516, 453,
	575, 578, 576, 577, 355, 318, 319, 389, 323, 333,
	377, 424, 361, 382, 275, 415, 390, 337, 502, 529,
	827, 801, 826, 828, 829, 825, 830, 831, 812, 711,
	0, 759, 823, 822, 824, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 556, 555, 554,
	553, 552, 551, 550, 0, 0, 499, 402, 287, 252,
	283, 284, 291, 596, 593, 406, 597, 0, 257, 479,
	331, 0, 372, 305, 544, 545, 790, 766, 767, 768,
	708, 769, 763, 764, 709, 765, 791, 757, 787, 788,
	736, 760, 770, 786, 771, 789, 792, 793, 832, 833,
	777, 761, 224, 834, 774, 794, 785, 784, 772, 758,
	795, 796, 743, 738, 775, 776, 762, 778, 779, 780,
	710, 739, 740, 741, 742, 0, 0, 0, 431, 432,
	433, 455, 417, 478, 594, 0, 0, 0, 0, 0,
	0, 0, 528, 540, 574, 0, 583, 584, 586, 588,
	781, 0, 600, 469, 470, 580, 176, 753, 0, 0,
	0, 0, 0, 0, 0, 0, 360, 0, 484, 517,
	506, 589, 472, 0, 0, 0, 0, 0, 0, 706,
	0, 0, 0, 300, 0, 0, 330, 521, 503, 513,
	504, 489, 490, 491, 498, 310, 492, 493, 494, 465,
	495, 466, 496, 497, 1184, 520, 471, 391, 344, 538,
	537, 0, 0, 806, 814, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 699, 0, 0, 734, 783,
	782, 721, 731, 0, 0, 273, 199, 467, 585, 468,
	722, 0, 723, 727, 730, 726, 724, 725, 0, 798,
	0, 0, 0, 0, 0, 0, 691, 703, 0, 707,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 700, 701, 0, 0, 0, 0, 754,
	0, 702, 0, 0, 749, 728, 732, 0, 0, 0,
	0, 263, 396, 413, 274, 387, 426, 279, 394, 269,
	359, 383, 0, 0, 265, 411, 393, 341, 320, 321,
	264, 0, 378, 298, 312, 295, 357, 729, 752, 756,
	294, 820, 750, 421, 267, 0, 420, 356, 407, 412,
	342, 336, 266, 409, 340, 335, 324, 302, 821, 325,
	326, 316, 368, 334, 369, 317, 346, 345, 347, 0,
	0, 0, 0, 0, 449, 450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 579, 747,
	0, 582, 0, 423, 0, 0, 804, 0, 0, 0,
	395, 0, 0, 327, 0, 0, 0, 751, 0, 381,
	362, 817, 0, 0, 379, 332, 408, 370, 414, 397,
	422, 375, 371, 258, 398, 297, 343, 270, 272, 292,
	299, 301, 303, 304, 352, 353, 365, 386, 399, 400,
	401, 296, 280, 380, 281, 314, 282, 259, 288, 286,
	289, 388, 290, 261, 366, 405, 0, 309, 376, 339,
	262, 338, 367, 404, 403, 271, 430, 436, 437, 525,
	0, 442, 603, 604, 605, 451, 456, 457, 458, 460,
	461, 462, 463, 526, 543, 510, 480, 444, 534, 477,
	481, 482, 546, 0, 0, 0, 435, 328, 329, 0,
	307, 255, 256, 599, 802, 358, 548, 581, 473, 0,
	816, 797, 799, 800, 803, 807, 808, 809, 810, 811,
	813, 815, 819, 598, 0, 527, 542, 601, 541, 595,
	364, 0, 385, 539, 486, 0, 531, 505, 0, 532,
	501, 536, 0, 475, 0, 392, 416, 428, 445, 448,
	476, 561, 562, 563, 260, 447, 565, 566, 567, 568,
	569, 570, 571, 564, 818, 508, 485, 511, 427, 488,
	487, 0, 0, 522, 755, 523, 524, 348, 349, 350,
	351, 805, 549, 278, 446, 374, 0, 509, 0, 0,
	0, 0, 0, 0, 0, 0, 514, 515, 512, 606,
	0, 572, 573, 0, 0, 440, 441, 306, 313, 459,
	315, 277, 363, 308, 425, 322, 0, 452, 516, 453,
	575, 578, 576, 577, 355, 318, 319, 389, 323, 333,
	377, 424, 361, 382, 275, 415, 390, 337, 502, 529,
	827, 801, 826, 828, 829, 825, 830, 831, 812, 711,
	0, 759, 823, 822, 824, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 556, 555, 554,
	553, 552, 551, 550, 0, 0, 499, 402, 287, 252,
	283, 284, 291, 596, 593, 406, 597, 0, 257, 479,
	331, 140, 372, 305, 544, 545, 790, 766, 767, 768,
	708, 769, 763, 764, 709, 765, 791, 757, 787, 788,
	736, 760, 770, 786, 771, 789, 792, 793, 832, 833,
	777, 761, 224, 834, 774, 794, 785, 784, 772, 758,
	795, 796, 743, 738, 775, 776, 762, 778, 779, 780,
	710, 739, 740, 741, 742, 0, 0, 0, 431, 432,
	433, 455, 417, 478, 594, 0, 0, 0, 0, 0,
	0, 0, 528, 540, 574, 0, 583, 584, 586, 588,
	781, 753, 600, 469, 470, 580, 0, 0, 0, 0,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 706, 0, 0, 0, 300, 3685, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 744, 520,
	471, 391, 344, 538, 537, 0, 0, 806, 814, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 699,
	0, 0, 734, 783, 782, 721, 731, 0, 0, 273,
	199, 467, 585, 468, 722, 0, 723, 727, 730, 726,
	724, 725, 0, 798, 0, 0, 0, 0, 0, 0,
	691, 703, 0, 707, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 700, 701, 0,
	0, 0, 0, 754, 0, 702, 0, 0, 749, 728,
	732, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 729, 752, 756, 294, 820, 750, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 821, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 747, 0, 582, 0, 423, 0, 0,
	804, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 751, 0, 381, 362, 817, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 802, 358,
	548, 581, 473, 0, 816, 797, 799, 800, 803, 807,
	808, 809, 810, 811, 813, 815, 819, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 818, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 755, 523,
	524, 348, 349, 350, 351, 805, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 827, 801, 826, 828, 829, 825,
	830, 831, 812, 711, 0, 759, 823, 822, 824, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	790, 766, 767, 768, 708, 769, 763, 764, 709, 765,
	791, 757, 787, 788, 736, 760, 770, 786, 771, 789,
	792, 793, 832, 833, 777, 761, 224, 834, 774, 794,
	785, 784, 772, 758, 795, 796, 743, 738, 775, 776,
	762, 778, 779, 780, 710, 739, 740, 741, 742, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 781, 753, 600, 469, 470, 580,
	0, 0, 0, 0, 360, 0, 484, 517, 506, 589,
	472, 0, 0, 0, 0, 0, 0, 706, 0, 0,
	0, 300, 0, 0, 330, 521, 503, 513, 504, 489,
	490, 491, 498, 310, 492, 493, 494, 465, 495, 466,
	496, 497, 744, 520, 471, 391, 344, 538, 537, 0,
	0, 806, 814, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 699, 0, 0, 734, 783, 782, 721,
	731, 0, 0, 273, 199, 467, 585, 468, 722, 0,
	723, 727, 730, 726, 724, 725, 0, 798, 0, 0,
	0, 0, 0, 0, 691, 703, 0, 707, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 700, 701, 0, 0, 0, 0, 754, 0, 702,
	0, 0, 749, 728, 732, 0, 0, 0, 0, 263,
	396, 413, 274, 387, 426, 279, 394, 269, 359, 383,
	0, 0, 265, 411, 393, 341, 320, 321, 264, 0,
	378, 298, 312, 295, 357, 729, 752, 756, 294, 820,
	750, 421, 267, 0, 420, 356, 407, 412, 342, 336,
	266, 409, 340, 335, 324, 302, 821, 325, 326, 316,
	368, 334, 369, 317, 346, 345, 347, 0, 0, 0,
	0, 0, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 747, 0, 582,
	0, 423, 0, 0, 804, 0, 0, 0, 395, 0,
	0, 327, 0, 0, 0, 751, 0, 381, 362, 817,
	3581, 0, 379, 332, 408, 370, 414, 397, 422, 375,
	371, 258, 398, 297, 343, 270, 272, 292, 299, 301,
	303, 304, 352, 353, 365, 386, 399, 400, 401, 296,
	280, 380, 281, 314, 282, 259, 288, 286, 289, 388,
	290, 261, 366, 405, 0, 309, 376, 339, 262, 338,
	367, 404, 403, 271, 430, 436, 437, 525, 0, 442,
	603, 604, 605, 451, 456, 457, 458, 460, 461, 462,
	463, 526, 543, 510, 480, 444, 534, 477, 481, 482,
	546, 0, 0, 0, 435, 328, 329, 0, 307, 255,
	256, 599, 802, 358, 548, 581, 473, 0, 816, 797,
	799, 800, 803, 807, 808, 809, 810, 811, 813, 815,
	819, 598, 0, 527, 542, 601, 541, 595, 364, 0,
	385, 539, 486, 0, 531, 505, 0, 532, 501, 536,
	0, 475, 0, 392, 416, 428, 445, 448, 476, 561,
	562, 563, 260, 447, 565, 566, 567, 568, 569, 570,
	571, 564, 818, 508, 485, 511, 427, 488, 487, 0,
	0, 522, 755, 523, 524, 348, 349, 350, 351, 805,
	549, 278, 446, 374, 0, 509, 0, 0, 0, 0,
	0, 0, 0, 0, 514, 515, 512, 606, 0, 572,
	573, 0, 0, 440, 441, 306, 313, 459, 315, 277,
	363, 308, 425, 322, 0, 452, 516, 453, 575, 578,
	576, 577, 355, 318, 319, 389, 323, 333, 377, 424,
	361, 382, 275, 415, 390, 337, 502, 529, 827, 801,
	826, 828, 829, 825, 830, 831, 812, 711, 0, 759,
	823, 822, 824, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 556, 555, 554, 553, 552,
	551, 550, 0, 0, 499, 402, 287, 252, 283, 284,
	291, 596, 593, 406, 597, 0, 257, 479, 331, 0,
	372, 305, 544, 545, 790, 766, 767, 768, 708, 769,
	763, 764, 709, 765, 791, 757, 787, 788, 736, 760,
	770, 786, 771, 789, 792, 793, 832, 833, 777, 761,
	224, 834, 774, 794, 785, 784, 772, 758, 795, 796,
	743, 738, 775, 776, 762, 778, 779, 780, 710, 739,
	740, 741, 742, 0, 0, 0, 431, 432, 433, 455,
	417, 478, 594, 0, 0, 0, 0, 0, 0, 0,
	528, 540, 574, 0, 583, 584, 586, 588, 781, 753,
	600, 469, 470, 580, 0, 0, 0, 0, 360, 0,
	484, 517, 506, 589, 472, 0, 0, 0, 0, 0,
	0, 706, 0, 0, 0, 300, 1702, 0, 330, 521,
	503, 513, 504, 489, 490, 491, 498, 310, 492, 493,
	494, 465, 495, 466, 496, 497, 744, 520, 471, 391,
	344, 538, 537, 0, 0, 806, 814, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 699, 0, 0,
	734, 783, 782, 721, 731, 0, 0, 273, 199, 467,
	585, 468, 722, 0, 723, 727, 730, 726, 724, 725,
	0, 798, 0, 0, 0, 0, 0, 0, 691, 703,
	0, 707, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 700, 701, 0, 0, 0,
	0, 754, 0, 702, 0, 0, 749, 728, 732, 0,
	0, 0, 0, 263, 396, 413, 274, 387, 426, 279,
	394, 269, 359, 383, 0, 0, 265, 411, 393, 341,
	320, 321, 264, 0, 378, 298, 312, 295, 357, 729,
	752, 756, 294, 820, 750, 421, 267, 0, 420, 356,
	407, 412, 342, 336, 266, 409, 340, 335, 324, 302,
	821, 325, 326, 316, 368, 334, 369, 317, 346, 345,
	347, 0, 0, 0, 0, 0, 449, 450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 747, 0, 582, 0, 423, 0, 0, 804, 0,
	0, 0, 395, 0, 0, 327, 0, 0, 0, 751,
	0, 381, 362, 817, 0, 0, 379, 332, 408, 370,
	414, 397, 422, 375, 371, 258, 398, 297, 343, 270,
	272, 292, 299, 301, 303, 304, 352, 353, 365, 386,
	399, 400, 401, 296, 280, 380, 281, 314, 282, 259,
	288, 286, 289, 388, 290, 261, 366, 405, 0, 309,
	376, 339, 262, 338, 367, 404, 403, 271, 430, 436,
	437, 525, 0, 442, 603, 604, 605, 451, 456, 457,
	458, 460, 461, 462, 463, 526, 543, 510, 480, 444,
	534, 477, 481, 482, 546, 0, 0, 0, 435, 328,
	329, 0, 307, 255, 256, 599, 802, 358, 548, 581,
	473, 0, 816, 797, 799, 800, 803, 807, 808, 809,
	810, 811, 813, 815, 819, 598, 0, 527, 542, 601,
	541, 595, 364, 0, 385, 539, 486, 0, 531, 505,
	0, 532, 501, 536, 0, 475, 0, 392, 416, 428,
	445, 448, 476, 561, 562, 563, 260, 447, 565, 566,
	567, 568, 569, 570, 571, 564, 818, 508, 485, 511,
	427, 488, 487, 0, 0, 522, 755, 523, 524, 348,
	349, 350, 351, 805, 549, 278, 446, 374, 0, 509,
	0, 0, 0, 0, 0, 0, 0, 0, 514, 515,
	512, 606, 0, 572, 573, 0, 0, 440, 441, 306,
	313, 459, 315, 277, 363, 308, 425, 322, 0, 452,
	516, 453, 575, 578, 576, 577, 355, 318, 319, 389,
	323, 333, 377, 424, 361, 382, 275, 415, 390, 337,
	502, 529, 827, 801, 826, 828, 829, 825, 830, 831,
	812, 711, 0, 759, 823, 822, 824, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 556,
	555, 554, 553, 552, 551, 550, 0, 0, 499, 402,
	287, 252, 283, 284, 291, 596, 593, 406, 597, 0,
	257, 479, 331, 0, 372, 305, 544, 545, 790, 766,
	767, 768, 708, 769, 763, 764, 709, 765, 791, 757,
	787, 788, 736, 760, 770, 786, 771, 789, 792, 793,
	832, 833, 777, 761, 224, 834, 774, 794, 785, 784,
	772, 758, 795, 796, 743, 738, 775, 776, 762, 778,
	779, 780, 710, 739, 740, 741, 742, 0, 0, 0,
	431, 432, 433, 455, 417, 478, 594, 0, 0, 0,
	0, 0, 0, 0, 528, 540, 574, 0, 583, 584,
	586, 588, 781, 753, 600, 469, 470, 580, 0, 0,
	0, 0, 360, 0, 484, 517, 506, 589, 472, 0,
	0, 0, 0, 0, 0, 706, 0, 0, 0, 300,
	0, 0, 330, 521, 503, 513, 504, 489, 490, 491,
	498, 310, 492, 493, 494, 465, 495, 466, 496, 497,
	744, 520, 471, 391, 344, 538, 537, 0, 0, 806,
	814, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 699, 0, 0, 734, 783, 782, 721, 731, 0,
	0, 273, 199, 467, 585, 468, 722, 0, 723, 727,
	730, 726, 724, 725, 0, 798, 0, 0, 0, 0,
	0, 0, 691, 703, 0, 707, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 700,
	701, 1441, 0, 0, 0, 754, 0, 702, 0, 0,
	749, 728, 732, 0, 0, 0, 0, 263, 396, 413,
	274, 387, 426, 279, 394, 269, 359, 383, 0, 0,
	265, 411, 393, 341, 320, 321, 264, 0, 378, 298,
	312, 295, 357, 729, 752, 756, 294, 820, 750, 421,
	267, 0, 420, 356, 407, 412, 342, 336, 266, 409,
	340, 335, 324, 302, 821, 325, 326, 316, 368, 334,
	369, 317, 346, 345, 347, 0, 0, 0, 0, 0,
	449, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 579, 747, 0, 582, 0, 423,
	0, 0, 804, 0, 0, 0, 395, 0, 0, 327,
	0, 0, 0, 751, 0, 381, 362, 817, 0, 0,
	379, 332, 408, 370, 414, 397, 422, 375, 371, 258,
	398, 297, 343, 270, 272, 292, 299, 301, 303, 304,
	352, 353, 365, 386, 399, 400, 401, 296, 280, 380,
	281, 314, 282, 259, 288, 286, 289, 388, 290, 261,
	366, 405, 0, 309, 376, 339, 262, 338, 367, 404,
	403, 271, 430, 436, 437, 525, 0, 442, 603, 604,
	605, 451, 456, 457, 458, 460, 461, 462, 463, 526,
	543, 510, 480, 444, 534, 477, 481, 482, 546, 0,
	0, 0, 435, 328, 329, 0, 307, 255, 256, 599,
	802, 358, 548, 581, 473, 0, 816, 797, 799, 800,
	803, 807, 808, 809, 810, 811, 813, 815, 819, 598,
	0, 527, 542, 601, 541, 595, 364, 0, 385, 539,
	486, 0, 531, 505, 0, 532, 501, 536, 0, 475,
	0, 392, 416, 428, 445, 448, 476, 561, 562, 563,
	260, 447, 565, 566, 567, 568, 569, 570, 571, 564,
	818, 508, 485, 511, 427, 488, 487, 0, 0, 522,
	755, 523, 524, 348, 349, 350, 351, 805, 549, 278,
	446, 374, 0, 509, 0, 0, 0, 0, 0, 0,
	0, 0, 514, 515, 512, 606, 0, 572, 573, 0,
	0, 440, 441, 306, 313, 459, 315, 277, 363, 308,
	425, 322, 0, 452, 516, 453, 575, 578, 576, 577,
	355, 318, 319, 389, 323, 333, 377, 424, 361, 382,
	275, 415, 390, 337, 502, 529, 827, 801, 826, 828,
	829, 825, 830, 831, 812, 711, 0, 759, 823, 822,
	824, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 556, 555, 554, 553, 552, 551, 550,
	0, 0, 499, 402, 287, 252, 283, 284, 291, 596,
	593, 406, 597, 0, 257, 479, 331, 0, 372, 305,
	544, 545, 790, 766, 767, 768, 708, 769, 763, 764,
	709, 765, 791, 757, 787, 788, 736, 760, 770, 786,
	771, 789, 792, 793, 832, 833, 777, 761, 224, 834,
	774, 794, 785, 784, 772, 758, 795, 796, 743, 738,
	775, 776, 762, 778, 779, 780, 710, 739, 740, 741,
	742, 0, 0, 0, 431, 432, 433, 455, 417, 478,
	594, 0, 0, 0, 0, 0, 0, 0, 528, 540,
	574, 0, 583, 584, 586, 588, 781, 0, 600, 469,
	470, 580, 753, 0, 0, 2058, 0, 0, 0, 0,
	0, 360, 0, 484, 517, 506, 589, 472, 0, 0,
	0, 0, 0, 0, 706, 0, 0, 0, 300, 0,
	0, 330, 521, 503, 513, 504, 489, 490, 491, 498,
	310, 492, 493, 494, 465, 495, 466, 496, 497, 744,
	520, 471, 391, 344, 538, 537, 0, 0, 806, 814,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	699, 0, 0, 734, 783, 782, 721, 731, 0, 0,
	273, 199, 467, 585, 468, 722, 0, 723, 727, 730,
	726, 724, 725, 0, 798, 0, 0, 0, 0, 0,
	0, 691, 703, 0, 707, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 700, 701,
	0, 0, 0, 0, 754, 0, 702, 0, 0, 749,
	728, 732, 0, 0, 0, 0, 263, 396, 413, 274,
	387, 426, 279, 394, 269, 359, 383, 0, 0, 265,
	411, 393, 341, 320, 321, 264, 0, 378, 298, 312,
	295, 357, 729, 752, 756, 294, 820, 750, 421, 267,
	0, 420, 356, 407, 412, 342, 336, 266, 409, 340,
	335, 324, 302, 821, 325, 326, 316, 368, 334, 369,
	317, 346, 345, 347, 0, 0, 0, 0, 0, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 747, 0, 582, 0, 423, 0,
	0, 804, 0, 0, 0, 395, 0, 0, 327, 0,
	0, 0, 751, 0, 381, 362, 817, 0, 0, 379,
	332, 408, 370, 414, 397, 422, 375, 371, 258, 398,
	297, 343, 270, 272, 292, 299, 301, 303, 304, 352,
	353, 365, 386, 399, 400, 401, 296, 280, 380, 281,
	314, 282, 259, 288, 286, 289, 388, 290, 261, 366,
	405, 0, 309, 376, 339, 262, 338, 367, 404, 403,
	271, 430, 436, 437, 525, 0, 442, 603, 604, 605,
	451, 456, 457, 458, 460, 461, 462, 463, 526, 543,
	510, 480, 444, 534, 477, 481, 482, 546, 0, 0,
	0, 435, 328, 329, 0, 307, 255, 256, 599, 802,
	358, 548, 581, 473, 0, 816, 797, 799, 800, 803,
	807, 808, 809, 810, 811, 813, 815, 819, 598, 0,
	527, 542, 601, 541, 595, 364, 0, 385, 539, 486,
	0, 531, 505, 0, 532, 501, 536, 0, 475, 0,
	392, 416, 428, 445, 448, 476, 561, 562, 563, 260,
	447, 565, 566, 567, 568, 569, 570, 571, 564, 818,
	508, 485, 511, 427, 488, 487, 0, 0, 522, 755,
	523, 524, 348, 349, 350, 351, 805, 549, 278, 446,
	374, 0, 509, 0, 0, 0, 0, 0, 0, 0,
	0, 514, 515, 512, 606, 0, 572, 573, 0, 0,
	440, 441, 306, 313, 459, 315, 277, 363, 308, 425,
	322, 0, 452, 516, 453, 575, 578, 576, 577, 355,
	318, 319, 389, 323, 333, 377, 424, 361, 382, 275,
	415, 390, 337, 502, 529, 827, 801, 826, 828, 829,
	825, 830, 831, 812, 711, 0, 759, 823, 822, 824,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 556, 555, 554, 553, 552, 551, 550, 0,
	0, 499, 402, 287, 252, 283, 284, 291, 596, 593,
	406, 597, 0, 257, 479, 331, 0, 372, 305, 544,
	545, 790, 766, 767, 768, 708, 769, 763, 764, 709,
	765, 791, 757, 787, 788, 736, 760, 770, 786, 771,
	789, 792, 793, 832, 833, 777, 761, 224, 834, 774,
	794, 785, 784, 772, 758, 795, 796, 743, 738, 775,
	776, 762, 778, 779, 780, 710, 739, 740, 741, 742,
	0, 0, 0, 431, 432, 433, 455, 417, 478, 594,
	0, 0, 0, 0, 0, 0, 0, 528, 540, 574,
	0, 583, 584, 586, 588, 781, 753, 600, 469, 470,
	580, 0, 0, 0, 0, 360, 0, 484, 517, 506,
	589, 472, 0, 0, 0, 0, 0, 0, 706, 0,
	0, 0, 300, 0, 0, 330, 521, 503, 513, 504,
	489, 490, 491, 498, 310, 492, 493, 494, 465, 495,
	466, 496, 497, 744, 520, 471, 391, 344, 538, 537,
	0, 0, 806, 814, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 699, 0, 0, 734, 783, 782,
	721, 731, 0, 0, 273, 199, 467, 585, 468, 722,
	0, 723, 727, 730, 726, 724, 725, 0, 798, 0,
	0, 0, 0, 0, 0, 691, 703, 0, 707, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 700, 701, 1695, 0, 0, 0, 754, 0,
	702, 0, 0, 749, 728, 732, 0, 0, 0, 0,
	263, 396, 413, 274, 387, 426, 279, 394, 269, 359,
	383, 0, 0, 265, 411, 393, 341, 320, 321, 264,
	0, 378, 298, 312, 295, 357, 729, 752, 756, 294,
	820, 750, 421, 267, 0, 420, 356, 407, 412, 342,
	336, 266, 409, 340, 335, 324, 302, 821, 325, 326,
	316, 368, 334, 369, 317, 346, 345, 347, 0, 0,
	0, 0, 0, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 747, 0,
	582, 0, 423, 0, 0, 804, 0, 0, 0, 395,
	0, 0, 327, 0, 0, 0, 751, 0, 381, 362,
	817, 0, 0, 379, 332, 408, 370, 414, 397, 422,
	375, 371, 258, 398, 297, 343, 270, 272, 292, 299,
	301, 303, 304, 352, 353, 365, 386, 399, 400, 401,
	296, 280, 380, 281, 314, 282, 259, 288, 286, 289,
	388, 290, 261, 366, 405, 0, 309, 376, 339, 262,
	338, 367, 404, 403, 271, 430, 436, 437, 525, 0,
	442, 603, 604, 605, 451, 456, 457, 458, 460, 461,
	462, 463, 526, 543, 510, 480, 444, 534, 477, 481,
	482, 546, 0, 0, 0, 435, 328, 329, 0, 307,
	255, 256, 599, 802, 358, 548, 581, 473, 0, 816,
	797, 799, 800, 803, 807, 808, 809, 810, 811, 813,
	815, 819, 598, 0, 527, 542, 601, 541, 595, 364,
	0, 385, 539, 486, 0, 531, 505, 0, 532, 501,
	536, 0, 475, 0, 392, 416, 428, 445, 448, 476,
	561, 562, 563, 260, 447, 565, 566, 567, 568, 569,
	570, 571, 564, 818, 508, 485, 511, 427, 488, 487,
	0, 0, 522, 755, 523, 524, 348, 349, 350, 351,
	805, 549, 278, 446, 374, 0, 509, 0, 0, 0,
	0, 0, 0, 0, 0, 514, 515, 512, 606, 0,
	572, 573, 0, 0, 440, 441, 306, 313, 459, 315,
	277, 363, 308, 425, 322, 0, 452, 516, 453, 575,
	578, 576, 577, 355, 318, 319, 389, 323, 333, 377,
	424, 361, 382, 275, 415, 390, 337, 502, 529, 827,
	801, 826, 828, 829, 825, 830, 831, 812, 711, 0,
	759, 823, 822, 824, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 556, 555, 554, 553,
	552, 551, 550, 0, 0, 499, 402, 287, 252, 283,
	284, 291, 596, 593, 406, 597, 0, 257, 479, 331,
	0, 372, 305, 544, 545, 790, 766, 767, 768, 708,
	769, 763, 764, 709, 765, 791, 757, 787, 788, 736,
	760, 770, 786, 771, 789, 792, 793, 832, 833, 777,
	761, 224, 834, 774, 794, 785, 784, 772, 758, 795,
	796, 743, 738, 775, 776, 762, 778, 779, 780, 710,
	739, 740, 741, 742, 0, 0, 0, 431, 432, 433,
	455, 417, 478, 594, 0, 0, 0, 0, 0, 0,
	0, 528, 540, 574, 0, 583, 584, 586, 588, 781,
	753, 600, 469, 470, 580, 0, 0, 0, 0, 360,
	0, 484, 517, 506, 589, 472, 0, 0, 0, 0,
	0, 0, 706, 0, 0, 0, 300, 0, 0, 330,
	521, 503, 513, 504, 489, 490, 491, 498, 310, 492,
	493, 494, 465, 495, 466, 496, 497, 744, 520, 471,
	391, 344, 538, 537, 0, 0, 806, 814, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 699, 0,
	0, 734, 783, 782, 721, 731, 0, 0, 273, 199,
	467, 585, 468, 722, 0, 723, 727, 730, 726, 724,
	725, 0, 798, 0, 0, 0, 0, 0, 0, 691,
	703, 0, 707, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 700, 701, 0, 0,
	0, 0, 754, 0, 702, 0, 0, 749, 728, 732,
	0, 0, 0, 0, 263, 396, 413, 274, 387, 426,
	279, 394, 269, 359, 383, 0, 0, 265, 411, 393,
	341, 320, 321, 264, 0, 378, 298, 312, 295, 357,
	729, 752, 756, 294, 820, 750, 421, 267, 0, 420,
	356, 407, 412, 342, 336, 266, 409, 340, 335, 324,
	302, 821, 325, 326, 316, 368, 334, 369, 317, 346,
	345, 347, 0, 0, 0, 0, 0, 449, 450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 747, 0, 582, 0, 423, 0, 0, 804,
	0, 0, 0, 395, 0, 0, 327, 0, 0, 0,
	751, 0, 381, 362, 817, 0, 0, 379, 332, 408,
	370, 414, 397, 422, 375, 371, 258, 398, 297, 343,
	270, 272, 292, 299, 301, 303, 304, 352, 353, 365,
	386, 399, 400, 401, 296, 280, 380, 281, 314, 282,
	259, 288, 286, 289, 388, 290, 261, 366, 405, 0,
	309, 376, 339, 262, 338, 367, 404, 403, 271, 430,
	436, 437, 525, 0, 442, 603, 604, 605, 451, 456,
	457, 458, 460, 461, 462, 463, 526, 543, 510, 480,
	444, 534, 477, 481, 482, 546, 0, 0, 0, 435,
	328, 329, 0, 307, 255, 256, 599, 802, 358, 548,
	581, 473, 0, 816, 797, 799, 800, 803, 807, 808,
	809, 810, 811, 813, 815, 819, 598, 0, 527, 542,
	601, 541, 595, 364, 0, 385, 539, 486, 0, 531,
	505, 0, 532, 501, 536, 0, 475, 0, 392, 416,
	428, 445, 448, 476, 561, 562, 563, 260, 447, 565,
	566, 567, 568, 569, 570, 571, 564, 818, 508, 485,
	511, 427, 488, 487, 0, 0, 522, 755, 523, 524,
	348, 349, 350, 351, 805, 549, 278, 446, 374, 0,
	509, 0, 0, 0, 0, 0, 0, 0, 0, 514,
	515, 512, 606, 0, 572, 573, 0, 0, 440, 441,
	306, 313, 459, 315, 277, 363, 308, 425, 322, 0,
	452, 516, 453, 575, 578, 576, 577, 355, 318, 319,
	389, 323, 333, 377, 424, 361, 382, 275, 415, 390,
	337, 502, 529, 827, 801, 826, 828, 829, 825, 830,
	831, 812, 711, 0, 759, 823, 822, 824, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	556, 555, 554, 553, 552, 551, 550, 0, 0, 499,
	402, 287, 252, 283, 284, 291, 596, 593, 406, 597,
	0, 257, 479, 331, 0, 372, 305, 544, 545, 790,
	766, 767, 768, 708, 769, 763, 764, 709, 765, 791,
	757, 787, 788, 736, 760, 770, 786, 771, 789, 792,
	793, 832, 833, 777, 761, 224, 834, 774, 794, 785,
	784, 772, 758, 795, 796, 743, 738, 775, 776, 762,
	778, 779, 780, 710, 739, 740, 741, 742, 0, 0,
	0, 431, 432, 433, 455, 417, 478, 594, 0, 0,
	0, 0, 0, 0, 0, 528, 540, 574, 0, 583,
	584, 586, 588, 781, 753, 600, 469, 470, 580, 0,
	0, 0, 0, 360, 0, 484, 517, 506, 589, 472,
	0, 0, 0, 0, 0, 0, 706, 0, 0, 0,
	300, 0, 0, 330, 521, 503, 513, 504, 489, 490,
	491, 498, 310, 492, 493, 494, 465, 495, 466, 496,
	497, 744, 520, 471, 391, 344, 538, 537, 0, 0,
	806, 814, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 699, 0, 0, 734, 783, 782, 721, 731,
	0, 0, 273, 199, 467, 585, 468, 2489, 0, 2490,
	727, 730, 726, 724, 725, 0, 798, 0, 0, 0,
	0, 0, 0, 691, 703, 0, 707, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	700, 701, 0, 0, 0, 0, 754, 0, 702, 0,
	0, 749, 728, 732, 0, 0, 0, 0, 263, 396,
	413, 274, 387, 426, 279, 394, 269, 359, 383, 0,
	0, 265, 411, 393, 341, 320, 321, 264, 0, 378,
	298, 312, 295, 357, 729, 752, 756, 294, 820, 750,
	421, 267, 0, 420, 356, 407, 412, 342, 336, 266,
	409, 340, 335, 324, 302, 821, 325, 326, 316, 368,
	334, 369, 317, 346, 345, 347, 0, 0, 0, 0,
	0, 449, 450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 747, 0, 582, 0,
	423, 0, 0, 804, 0, 0, 0, 395, 0, 0,
	327, 0, 0, 0, 751, 0, 381, 362, 817, 0,
	0, 379, 332, 408, 370, 414, 397, 422, 375, 371,
	258, 398, 297, 343, 270, 272, 292, 299, 301, 303,
	304, 352, 353, 365, 386, 399, 400, 401, 296, 280,
	380, 281, 314, 282, 259, 288, 286, 289, 388, 290,
	261, 366, 405, 0, 309, 376, 339, 262, 338, 367,
	404, 403, 271, 430, 436, 437, 525, 0, 442, 603,
	604, 605, 451, 456, 457, 458, 460, 461, 462, 463,
	526, 543, 510, 480, 444, 534, 477, 481, 482, 546,
	0, 0, 0, 435, 328, 329, 0, 307, 255, 256,
	599, 802, 358, 548, 581, 473, 0, 816, 797, 799,
	800, 803, 807, 808, 809, 810, 811, 813, 815, 819,
	598, 0, 527, 542, 601, 541, 595, 364, 0, 385,
	539, 486, 0, 531, 505, 0, 532, 501, 536, 0,
	475, 0, 392, 416, 428, 445, 448, 476, 561, 562,
	563, 260, 447, 565, 566, 567, 568, 569, 570, 571,
	564, 818, 508, 485, 511, 427, 488, 487, 0, 0,
	522, 755, 523, 524, 348, 349, 350, 351, 805, 549,
	278, 446, 374, 0, 509, 0, 0, 0, 0, 0,
	0, 0, 0, 514, 515, 512, 606, 0, 572, 573,
	0, 0, 440, 441, 306, 313, 459, 315, 277, 363,
	308, 425, 322, 0, 452, 516, 453, 575, 578, 576,
	577, 355, 318, 319, 389, 323, 333, 377, 424, 361,
	382, 275, 415, 390, 337, 502, 529, 827, 801, 826,
	828, 829, 825, 830, 831, 812, 711, 0, 759, 823,
	822, 824, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 556, 555, 554, 553, 552, 551,
	550, 0, 0, 499, 402, 287, 252, 283, 284, 291,
	596, 593, 406, 597, 0, 257, 479, 331, 0, 372,
	305, 544, 545, 790, 766, 767, 768, 708, 769, 763,
	764, 709, 765, 791, 757, 787, 788, 736, 760, 770,
	786, 771, 789, 792, 793, 832, 833, 777, 761, 224,
	834, 774, 794, 785, 784, 772, 758, 795, 796, 743,
	738, 775, 776, 762, 778, 779, 780, 710, 739, 740,
	741, 742, 0, 0, 0, 431, 432, 433, 455, 417,
	478, 594, 0, 0, 0, 0, 0, 0, 0, 528,
	540, 574, 0, 583, 584, 586, 588, 781, 753, 600,
	469, 470, 580, 0, 0, 0, 0, 360, 0, 484,
	517, 506, 589, 472, 0, 0, 1574, 0, 0, 0,
	706, 0, 0, 0, 300, 0, 0, 330, 521, 503,
	513, 504, 489, 490, 491, 498, 310, 492, 493, 494,
	465, 495, 466, 496, 497, 744, 520, 471, 391, 344,
	538, 537, 0, 0, 806, 814, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 699, 0, 0, 734,
	783, 782, 721, 731, 0, 0, 273, 199, 467, 585,
	468, 722, 0, 723, 727, 730, 726, 724, 725, 0,
	798, 0, 0, 0, 0, 0, 0, 0, 703, 0,
	707, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 700, 701, 0, 0, 0, 0,
	754, 0, 702, 0, 0, 749, 728, 732, 0, 0,
	0, 0, 263, 396, 413, 274, 387, 426, 279, 394,
	269, 359, 383, 0, 0, 265, 411, 393, 341, 320,
	321, 264, 0, 378, 298, 312, 295, 357, 729, 752,
	756, 294, 820, 750, 421, 267, 0, 420, 356, 407,
	412, 342, 336, 266, 409, 340, 335, 324, 302, 821,
	325, 326, 316, 368, 334, 369, 317, 346, 345, 347,
	0, 0, 0, 0, 0, 449, 450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 579,
	747, 0, 582, 0, 423, 0, 0, 804, 0, 0,
	0, 395, 0, 0, 327, 0, 0, 0, 751, 0,
	381, 362, 817, 0, 0, 379, 332, 408, 370, 414,
	397, 422, 375, 371, 258, 398, 297, 343, 270, 272,
	292, 299, 301, 303, 304, 352, 353, 365, 386, 399,
	400, 401, 296, 280, 380, 281, 314, 282, 259, 288,
	286, 289, 388, 290, 261, 366, 405, 0, 309, 376,
	339, 262, 338, 367, 404, 403, 271, 430, 1575, 1576,
	525, 0, 442, 603, 604, 605, 451, 456, 457, 458,
	460, 461, 462, 463, 526, 543, 510, 480, 444, 534,
	477, 481, 482, 546, 0, 0, 0, 435, 328, 329,
	0, 307, 255, 256, 599, 802, 358, 548, 581, 473,
	0, 816, 797, 799, 800, 803, 807, 808, 809, 810,
	811, 813, 815, 819, 598, 0, 527, 542, 601, 541,
	595, 364, 0, 385, 539, 486, 0, 531, 505, 0,
	532, 501, 536, 0, 475, 0, 392, 416, 428, 445,
	448, 476, 561, 562, 563, 260, 447, 565, 566, 567,
	568, 569, 570, 571, 564, 818, 508, 485, 511, 427,
	488, 487, 0, 0, 522, 755, 523, 524, 348, 349,
	350, 351, 805, 549, 278, 446, 374, 0, 509, 0,
	0, 0, 0, 0, 0, 0, 0, 514, 515, 512,
	606, 0, 572, 573, 0, 0, 440, 441, 306, 313,
	459, 315, 277, 363, 308, 425, 322, 0, 452, 516,
	453, 575, 578, 576, 577, 355, 318, 319, 389, 323,
	333, 377, 424, 361, 382, 275, 415, 390, 337, 502,
	529, 827, 801, 826, 828, 829, 825, 830, 831, 812,
	711, 0, 759, 823, 822, 824, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 556, 555,
	554, 553, 552, 551, 550, 0, 0, 499, 402, 287,
	252, 283, 284, 291, 596, 593, 406, 597, 0, 257,
	479, 331, 0, 372, 305, 544, 545, 790, 766, 767,
	768, 708, 769, 763, 764, 709, 765, 791, 757, 787,
	788, 736, 760, 770, 786, 771, 789, 792, 793, 832,
	833, 777, 761, 224, 834, 774, 794, 785, 784, 772,
	758, 795, 796, 743, 738, 775, 776, 762, 778, 779,
	780, 710, 739, 740, 741, 742, 0, 0, 0, 431,
	432, 433, 455, 417, 478, 594, 0, 0, 0, 0,
	0, 0, 0, 528, 540, 574, 0, 583, 584, 586,
	588, 781, 753, 600, 469, 470, 580, 0, 0, 0,
	0, 360, 0, 484, 517, 506, 589, 472, 0, 0,
	0, 0, 0, 0, 706, 0, 0, 0, 300, 0,
	0, 330, 521, 503, 513, 504, 489, 490, 491, 498,
	310, 492, 493, 494, 465, 495, 466, 496, 497, 744,
	520, 471, 391, 344, 538, 537, 0, 0, 806, 814,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	699, 0, 0, 734, 783, 782, 721, 731, 0, 0,
	273, 199, 467, 585, 468, 722, 0, 723, 727, 730,
	726, 724, 725, 0, 798, 0, 0, 0, 0, 0,
	0, 0, 703, 0, 707, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 700, 701,
	0, 0, 0, 0, 754, 0, 702, 0, 0, 749,
	728, 732, 0, 0, 0, 0, 263, 396, 413, 274,
	387, 426, 279, 394, 269, 359, 383, 0, 0, 265,
	411, 393, 341, 320, 321, 264, 0, 378, 298, 312,
	295, 357, 729, 752, 756, 294, 820, 750, 421, 267,
	0, 420, 356, 407, 412, 342, 336, 266, 409, 340,
	335, 324, 302, 821, 325, 326, 316, 368, 334, 369,
	317, 346, 345, 347, 0, 0, 0, 0, 0, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 747, 0, 582, 0, 423, 0,
	0, 804, 0, 0, 0, 395, 0, 0, 327, 0,
	0, 0, 751, 0, 381, 362, 817, 0, 0, 379,
	332, 408, 370, 414, 397, 422, 375, 371, 258, 398,
	297, 343, 270, 272, 292, 299, 301, 303, 304, 352,
	353, 365, 386, 399, 400, 401, 296, 280, 380, 281,
	314, 282, 259, 288, 286, 289, 388, 290, 261, 366,
	405, 0, 309, 376, 339, 262, 338, 367, 404, 403,
	271, 430, 436, 437, 525, 0, 442, 603, 604, 605,
	451, 456, 457, 458, 460, 461, 462, 463, 526, 543,
	510, 480, 444, 534, 477, 481, 482, 546, 0, 0,
	0, 435, 328, 329, 0, 307, 255, 256, 599, 802,
	358, 548, 581, 473, 0, 816, 797, 799, 800, 803,
	807, 808, 809, 810, 811, 813, 815, 819, 598, 0,
	527, 542, 601, 541, 595, 364, 0, 385, 539, 486,
	0, 531, 505, 0, 532, 501, 536, 0, 475, 0,
	392, 416, 428, 445, 448, 476, 561, 562, 563, 260,
	447, 565, 566, 567, 568, 569, 570, 571, 564, 818,
	508, 485, 511, 427, 488, 487, 0, 0, 522, 755,
	523, 524, 348, 349, 350, 351, 805, 549, 278, 446,
	374, 0, 509, 0, 0, 0, 0, 0, 0, 0,
	0, 514, 515, 512, 606, 0, 572, 573, 0, 0,
	440, 441, 306, 313, 459, 315, 277, 363, 308, 425,
	322, 0, 452, 516, 453, 575, 578, 576, 577, 355,
	318, 319, 389, 323, 333, 377, 424, 361, 382, 275,
	415, 390, 337, 502, 529, 827, 801, 826, 828, 829,
	825, 830, 831, 812, 711, 0, 759, 823, 822, 824,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 556, 555, 554, 553, 552, 551, 550, 0,
	0, 499, 402, 287, 252, 283, 284, 291, 596, 593,
	406, 597, 0, 257, 479, 331, 0, 372, 305, 544,
	545, 790, 766, 767, 768, 708, 769, 763, 764, 709,
	765, 791, 757, 787, 788, 736, 760, 770, 786, 771,
	789, 792, 793, 832, 833, 777, 761, 224, 834, 774,
	794, 785, 784, 772, 758, 795, 796, 743, 738, 775,
	776, 762, 778, 779, 780, 710, 739, 740, 741, 742,
	0, 0, 0, 431, 432, 433, 455, 417, 478, 594,
	0, 0, 0, 0, 0, 0, 0, 528, 540, 574,
	0, 583, 584, 586, 588, 781, 753, 600, 469, 470,
	580, 0, 0, 0, 0, 360, 0, 484, 517, 506,
	589, 472, 0, 0, 0, 0, 0, 0, 706, 0,
	0, 0, 300, 0, 0, 330, 521, 503, 513, 504,
	489, 490, 491, 498, 310, 492, 493, 494, 465, 495,
	466, 496, 497, 744, 520, 471, 391, 344, 538, 537,
	0, 0, 806, 814, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 734, 783, 782,
	721, 731, 0, 0, 273, 199, 467, 585, 468, 722,
	0, 723, 727, 730, 726, 724, 725, 0, 798, 0,
	0, 0, 0, 0, 0, 691, 703, 0, 707, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 700, 701, 0, 0, 0, 0, 754, 0,
	702, 0, 0, 749, 728, 732, 0, 0, 0, 0,
	263, 396, 413, 274, 387, 426, 279, 394, 269, 359,
	383, 0, 0, 265, 411, 393, 341, 320, 321, 264,
	0, 378, 298, 312, 295, 357, 729, 752, 756, 294,
	820, 750, 421, 267, 0, 420, 356, 407, 412, 342,
	336, 266, 409, 340, 335, 324, 302, 821, 325, 326,
	316, 368, 334, 369, 317, 346, 345, 347, 0, 0,
	0, 0, 0, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 747, 0,
	582, 0, 423, 0, 0, 804, 0, 0, 0, 395,
	0, 0, 327, 0, 0, 0, 751, 0, 381, 362,
	817, 0, 0, 379, 332, 408, 370, 414, 397, 422,
	375, 371, 258, 398, 297, 343, 270, 272, 292, 299,
	301, 303, 304, 352, 353, 365, 386, 399, 400, 401,
	296, 280, 380, 281, 314, 282, 259, 288, 286, 289,
	388, 290, 261, 366, 405, 0, 309, 376, 339, 262,
	338, 367, 404, 403, 271, 430, 436, 437, 525, 0,
	442, 603, 604, 605, 451, 456, 457, 458, 460, 461,
	462, 463, 526, 543, 510, 480, 444, 534, 477, 481,
	482, 546, 0, 0, 0, 435, 328, 329, 0, 307,
	255, 256, 599, 802, 358, 548, 581, 473, 0, 816,
	797, 799, 800, 803, 807, 808, 809, 810, 811, 813,
	815, 819, 598, 0, 527, 542, 601, 541, 595, 364,
	0, 385, 539, 486, 0, 531, 505, 0, 532, 501,
	536, 0, 475, 0, 392, 416, 428, 445, 448, 476,
	561, 562, 563, 260, 447, 565, 566, 567, 568, 569,
	570, 571, 564, 818, 508, 485, 511, 427, 488, 487,
	0, 0, 522, 755, 523, 524, 348, 349, 350, 351,
	805, 549, 278, 446, 374, 0, 509, 0, 0, 0,
	0, 0, 0, 0, 0, 514, 515, 512, 606, 0,
	572, 573, 0, 0, 440, 441, 306, 313, 459, 315,
	277, 363, 308, 425, 322, 0, 452, 516, 453, 575,
	578, 576, 577, 355, 318, 319, 389, 323, 333, 377,
	424, 361, 382, 275, 415, 390, 337, 502, 529, 827,
	801, 826, 828, 829, 825, 830, 831, 812, 711, 0,
	759, 823, 822, 824, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 556, 555, 554, 553,
	552, 551, 550, 0, 0, 499, 402, 287, 252, 283,
	284, 291, 596, 593, 406, 597, 0, 257, 479, 331,
	0, 372, 305, 544, 545, 790, 766, 767, 768, 708,
	769, 763, 764, 709, 765, 791, 757, 787, 788, 736,
	760, 770, 786, 771, 789, 792, 793, 832, 833, 777,
	761, 224, 834, 774, 794, 785, 784, 772, 758, 795,
	796, 743, 738, 775, 776, 762, 778, 779, 780, 710,
	739, 740, 741, 742, 0, 0, 0, 431, 432, 433,
	455, 417, 478, 594, 0, 0, 0, 0, 0, 0,
	0, 528, 540, 574, 0, 583, 584, 586, 588, 781,
	0, 600, 469, 470, 580, 176, 52, 165, 139, 0,
	0, 0, 0, 0, 0, 360, 0, 484, 517, 506,
	589, 472, 0, 166, 0, 0, 0, 0, 0, 0,
	158, 0, 300, 0, 167, 330, 521, 503, 513, 504,
	489, 490, 491, 498, 310, 492, 493, 494, 465, 495,
	466, 496, 497, 116, 520, 471, 391, 344, 538, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 170, 0, 0, 198, 0, 0,
	0, 0, 0, 0, 273, 199, 467, 585, 468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 396, 413, 274, 387, 426, 279, 394, 269, 359,
	383, 0, 0, 265, 411, 393, 341, 320, 321, 264,
	0, 378, 298, 312, 295, 357, 0, 410, 438, 294,
	429, 0, 421, 267, 0, 420, 356, 407, 412, 342,
	336, 266, 409, 340, 335, 324, 302, 454, 325, 326,
	316, 368, 334, 369, 317, 346, 345, 347, 0, 0,
	0, 0, 0, 449, 450, 0, 0, 0, 0, 0,
	0, 138, 164, 174, 0, 102, 0, 579, 0, 0,
	582, 0, 423, 0, 0, 191, 0, 0, 0, 395,
	0, 0, 327, 163, 157, 156, 439, 0, 381, 362,
	203, 0, 0, 379, 332, 408, 370, 414, 397, 422,
	375, 371, 258, 398, 297, 343, 270, 272, 292, 299,
	301, 303, 304, 352, 353, 365, 386, 399, 400, 401,
	296, 280, 380, 281, 314, 282, 259, 288, 286, 289,
	388, 290, 261, 366, 405, 0, 309, 376, 339, 262,
	338, 367, 404, 403, 271, 430, 436, 437, 525, 0,
	442, 558, 559, 560, 451, 456, 457, 458, 460, 461,
	462, 463, 526, 543, 510, 480, 444, 534, 477, 481,
	482, 546, 0, 0, 0, 435, 328, 329, 0, 307,
	255, 256, 418, 293, 358, 548, 581, 473, 0, 535,
	474, 483, 285, 507, 519, 518, 354, 434, 194, 530,
	533, 464, 204, 0, 527, 542, 500, 541, 205, 364,
	0, 385, 539, 486, 0, 531, 505, 0, 532, 501,
	536, 0, 475, 0, 392, 416, 428, 445, 448, 476,
	561, 562, 563, 260, 447, 565, 566, 567, 568, 569,
	570, 571, 564, 419, 508, 485, 511, 427, 488, 487,
	0, 0, 522, 443, 523, 524, 348, 349, 350, 351,
	311, 549, 278, 446, 374, 114, 509, 0, 0, 0,
	0, 0, 0, 0, 0, 514, 515, 512, 202, 0,
	572, 573, 0, 0, 440, 441, 306, 313, 459, 315,
	277, 363, 308, 425, 322, 0, 452, 516, 453, 575,
	578, 576, 577, 355, 318, 319, 389, 323, 333, 377,
	424, 361, 382, 275, 415, 390, 337, 502, 529, 0,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	247, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 556, 555, 554, 553,
	552, 551, 550, 0, 0, 499, 402, 287, 252, 283,
	284, 291, 373, 268, 406, 384, 0, 257, 479, 331,
	140, 372, 305, 544, 545, 208, 209, 210, 211, 212,
	213, 214, 215, 253, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 229, 230, 231, 232, 547,
	223, 224, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 0, 0, 0, 254,
	248, 249, 250, 251, 0, 0, 0, 431, 432, 433,
	455, 417, 478, 206, 39, 192, 195, 197, 196, 0,
	50, 528, 540, 574, 5, 583, 584, 586, 588, 587,
	119, 207, 469, 470, 580, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 0, 484, 517, 506,
	589, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 330, 521, 503, 513, 504,
	489, 490, 491, 498, 310, 492, 493, 494, 465, 495,
	466, 496, 497, 116, 520, 471, 391, 344, 538, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 198, 0, 0,
	0, 0, 0, 0, 273, 199, 467, 585, 468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 276, 2188,
	2191, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 396, 413, 274, 387, 426, 279, 394, 269, 359,
	383, 0, 0, 265, 411, 393, 341, 320, 321, 264,
	0, 378, 298, 312, 295, 357, 0, 410, 438, 294,
	429, 0, 421, 267, 0, 420, 356, 407, 412, 342,
	336, 266, 409, 340, 335, 324, 302, 454, 325, 326,
	316, 368, 334, 369, 317, 346, 345, 347, 0, 0,
	0, 0, 0, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 0, 0,
	582, 2192, 423, 0, 0, 0, 2187, 0, 2186, 395,
	2184, 2189, 327, 0, 0, 0, 439, 0, 381, 362,
	602, 0, 0, 379, 332, 408, 370, 414, 397, 422,
	375, 371, 258, 398, 297, 343, 270, 272, 292, 299,
	301, 303, 304, 352, 353, 365, 386, 399, 400, 401,
	296, 280, 380, 281, 314, 282, 259, 288, 286, 289,
	388, 290, 261, 366, 405, 2190, 309, 376, 339, 262,
	338, 367, 404, 403, 271, 430, 436, 437, 525, 0,
	442, 603, 604, 605, 451, 456, 457, 458, 460, 461,
	462, 463, 526, 543, 510, 480, 444, 534, 477, 481,
	482, 546, 0, 0, 0, 435, 328, 329, 0, 307,
	255, 256, 599, 293, 358, 548, 581, 473, 0, 535,
	474, 483, 285, 507, 519, 518, 354, 434, 0, 530,
	533, 464, 598, 0, 527, 542, 601, 541, 595, 364,
	0, 385, 539, 486, 0, 531, 505, 0, 532, 501,
	536, 0, 475, 0, 392, 416, 428, 445, 448, 476,
	561, 562, 563, 260, 447, 565, 566, 567, 568, 569,
	570, 571, 564, 419, 508, 485, 511, 427, 488, 487,
	0, 0, 522, 443, 523, 524, 348, 349, 350, 351,
	311, 549, 278, 446, 374, 0, 509, 0, 0, 0,
	0, 0, 0, 0, 0, 514, 515, 512, 606, 0,
	572, 573, 0, 0, 440, 441, 306, 313, 459, 315,
	277, 363, 308, 425, 322, 0, 452, 516, 453, 575,
	578, 576, 577, 355, 318, 319, 389, 323, 333, 377,
	424, 361, 382, 275, 415, 390, 337, 502, 529, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 556, 555, 554, 553,
	552, 551, 550, 0, 0, 499, 402, 287, 252, 283,
	284, 291, 596, 593, 406, 597, 0, 257, 479, 331,
	140, 372, 305, 544, 545, 208, 209, 210, 211, 212,
	213, 214, 215, 253, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 229, 230, 231, 232, 547,
	223, 224, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 0, 0, 0, 254,
	248, 249, 250, 251, 0, 0, 0, 431, 432, 433,
	455, 417, 478, 594, 0, 0, 0, 0, 0, 0,
	0, 528, 540, 574, 0, 583, 584, 586, 588, 587,
	0, 600, 469, 470, 580, 360, 0, 484, 517, 506,
	589, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 330, 521, 503, 513, 504,
	489, 490, 491, 498, 310, 492, 493, 494, 465, 495,
	466, 496, 497, 0, 520, 471, 391, 344, 538, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1218, 0, 0, 198, 0, 0,
	721, 731, 0, 0, 273, 199, 467, 585, 468, 722,
	0, 723, 727, 730, 726, 724, 725, 0, 276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 728, 0, 0, 0, 0, 0,
	263, 396, 413, 274, 387, 426, 279, 394, 269, 359,
	383, 0, 0, 265, 411, 393, 341, 320, 321, 264,
	0, 378, 298, 312, 295, 357, 729, 410, 438, 294,
	429, 0, 421, 267, 0, 420, 356, 407, 412, 342,
	336, 266, 409, 340, 335, 324, 302, 454, 325, 326,
	316, 368, 334, 369, 317, 346, 345, 347, 0, 0,
	0, 0, 0, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 0, 0,
	582, 0, 423, 0, 0, 0, 0, 0, 0, 395,
	0, 0, 327, 0, 0, 0, 439, 0, 381, 362,
	602, 0, 0, 379, 332, 408, 370, 414, 397, 422,
	375, 371, 258, 398, 297, 343, 270, 272, 292, 299,
	301, 303, 304, 352, 353, 365, 386, 399, 400, 401,
	296, 280, 380, 281, 314, 282, 259, 288, 286, 289,
	388, 290, 261, 366, 405, 0, 309, 376, 339, 262,
	338, 367, 404, 403, 271, 430, 436, 437, 525, 0,
	442, 603, 604, 605, 451, 456, 457, 458, 460, 461,
	462, 463, 526, 543, 510, 480, 444, 534, 477, 481,
	482, 546, 0, 0, 0, 435, 328, 329, 0, 307,
	255, 256, 599, 293, 358, 548, 581, 473, 0, 535,
	474, 483, 285, 507, 519, 518, 354, 434, 0, 530,
	533, 464, 598, 0, 527, 542, 601, 541, 595, 364,
	0, 385, 539, 486, 0, 531, 505, 0, 532, 501,
	536, 0, 475, 0, 392, 416, 428, 445, 448, 476,
	561, 562, 563, 260, 447, 565, 566, 567, 568, 569,
	570, 571, 564, 419, 508, 485, 511, 427, 488, 487,
	0, 0, 522, 443, 523, 524, 348, 349, 350, 351,
	311, 549, 278, 446, 374, 0, 509, 0, 0, 0,
	0, 0, 0, 0, 0, 514, 515, 512, 606, 0,
	572, 573, 0, 0, 440, 441, 306, 313, 459, 315,
	277, 363, 308, 425, 322, 0, 452, 516, 453, 575,
	578, 576, 577, 355, 318, 319, 389, 323, 333, 377,
	424, 361, 382, 275, 415, 390, 337, 502, 529, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 556, 555, 554, 553,
	552, 551, 550, 0, 0, 499, 402, 287, 252, 283,
	284, 291, 596, 593, 406, 597, 0, 257, 479, 331,
	0, 372, 305, 544, 545, 208, 209, 210, 211, 212,
	213, 214, 215, 253, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 229, 230, 231, 232, 547,
	223, 224, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 0, 0, 0, 254,
	248, 249, 250, 251, 0, 0, 0, 431, 432, 433,
	455, 417, 478, 594, 0, 0, 0, 0, 0, 0,
	0, 528, 540, 574, 0, 583, 584, 586, 588, 587,
	0, 600, 469, 470, 580, 176, 52, 165, 139, 0,
	0, 0, 0, 0, 0, 360, 623, 484, 517, 506,
	589, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 330, 521, 503, 513, 504,
	489, 490, 491, 498, 310, 492, 493, 494, 465, 495,
	466, 496, 497, 0, 520, 471, 391, 344, 538, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 629,
	0, 0, 0, 0, 628, 0, 0, 198, 0, 0,
	0, 0, 0, 0, 273, 199, 467, 585, 468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 396, 413, 274, 387, 426, 279, 394, 269, 359,
	383, 0, 0, 265, 411, 393, 341, 320, 321, 264,
	0, 378, 298, 312, 295, 357, 0, 410, 438, 294,
	429, 0, 421, 267, 0, 420, 356, 407, 412, 342,
	336, 266, 409, 340, 335, 324, 302, 454, 325, 326,
	316, 368, 334, 369, 317, 346, 345, 347, 0, 0,
	0, 0, 0, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 579, 0, 0,
	582, 0, 423, 0, 0, 0, 0, 0, 0, 395,
	0, 0, 327, 0, 0, 0, 439, 0, 381, 362,
	602, 0, 0, 379, 332, 408, 370, 414, 397, 422,
	375, 371, 258, 398, 297, 343, 270, 272, 292, 299,
	301, 303, 304, 352, 353, 365, 386, 399, 400, 401,
	296, 280, 380, 281, 314, 282, 259, 288, 286, 289,
	388, 290, 261, 366, 405, 0, 309, 376, 339, 262,
	338, 367, 404, 403, 271, 430, 436, 437, 525, 0,
	442, 603, 604, 605, 451, 456, 457, 458, 460, 461,
	462, 463, 526, 543, 510, 480, 444, 534, 477, 481,
	482, 546, 0, 0, 0, 435, 328, 329, 0, 307,
	255, 256, 599, 293, 358, 548, 581, 473, 0, 535,
	474, 483, 285, 507, 519, 518, 354, 434, 0, 530,
	533, 464, 598, 0, 527, 542, 601, 541, 595, 364,
	0, 385, 539, 486, 0, 531, 505, 0, 532, 501,
	536, 0, 475, 0, 392, 416, 428, 445, 448, 476,
	561, 562, 563, 260, 447, 565, 566, 567, 568, 569,
	570, 571, 564, 419, 508, 485, 511, 427, 488, 487,
	0, 0, 522, 443, 523, 524, 348, 349, 350, 351,
	624, 626, 278, 446, 374, 637, 509, 0, 0, 0,
	0, 0, 0, 0, 0, 514, 515, 512, 606, 0,
	572, 573, 0, 0, 440, 441, 306, 313, 459, 315,
	277, 363, 308, 425, 322, 0, 452, 516, 453, 575,
	578, 576, 577, 355, 318, 319, 389, 323, 333, 377,
	424, 361, 382, 275, 415, 390, 337, 502, 529, 0,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	247, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 556, 555, 554, 553,
	552, 551, 550, 0, 0, 499, 402, 287, 252, 283,
	284, 291, 596, 593, 406, 597, 0, 257, 479, 331,
	140, 372, 305, 544, 545, 208, 209, 210, 211, 212,
	213, 214, 215, 253, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 229, 230, 231, 232, 547,
	223, 224, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 0, 0, 0, 254,
	248, 249, 250, 251, 0, 0, 0, 431, 432, 433,
	455, 417, 478, 594, 0, 0, 0, 0, 0, 0,
	0, 528, 540, 574, 0, 583, 584, 586, 588, 587,
	0, 600, 469, 470, 580, 360, 0, 484, 517, 506,
	589, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 330, 521, 503, 513, 504,
	489, 490, 491, 498, 310, 492, 493, 494, 465, 495,
	466, 496, 497, 0, 520, 471, 391, 344, 538, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	0, 0, 0, 0, 273, 199, 467, 585, 468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 276, 2188,
	2191, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 396, 413, 274, 387, 426, 279, 394, 269, 359,
	383, 0, 0, 265, 411, 393, 341, 320, 321, 264,
	0, 378, 298, 312, 295, 357, 0, 410, 438, 294,
	429, 0, 421, 267, 0, 420, 356, 407, 412, 342,
	336, 266, 409, 340, 335, 324, 302, 454, 325, 326,
	316, 368, 334, 369, 317, 346, 345, 347, 0, 0,
	0, 0, 0, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 0, 0,
	582, 2192, 423, 0, 0, 0, 2187, 0, 2186, 395,
	2184, 2189, 327, 0, 0, 0, 439, 0, 381, 362,
	602, 0, 0, 379, 332, 408, 370, 414, 397, 422,
	375, 371, 258, 398, 297, 343, 270, 272, 292, 299,
	301, 303, 304, 352, 353, 365, 386, 399, 400, 401,
	296, 280, 380, 281, 314, 282, 259, 288, 286, 289,
	388, 290, 261, 366, 405, 2190, 309, 376, 339, 262,
	338, 367, 404, 403, 271, 430, 436, 437, 525, 0,
	442, 603, 604, 605, 451, 456, 457, 458, 460, 461,
	462, 463, 526, 543, 510, 480, 444, 534, 477, 481,
	482, 546, 0, 0, 0, 435, 328, 329, 0, 307,
	255, 256, 599, 293, 358, 548, 581, 473, 0, 535,
	474, 483, 285, 507, 519, 518, 354, 434, 0, 530,
	533, 464, 598, 0, 527, 542, 601, 541, 595, 364,
	0, 385, 539, 486, 0, 531, 505, 0, 532, 501,
	536, 0, 475, 0, 392, 416, 428, 445, 448, 476,
	561, 562, 563, 260, 447, 565, 566, 567, 568, 569,
	570, 571, 564, 419, 508, 485, 511, 427, 488, 487,
	0, 0, 522, 443, 523, 524, 348, 349, 350, 351,
	311, 549, 278, 446, 374, 0, 509, 0, 0, 0,
	0, 0, 0, 0, 0, 514, 515, 512, 606, 0,
	572, 573, 0, 0, 440, 441, 306, 313, 459, 315,
	277, 363, 308, 425, 322, 0, 452, 516, 453, 575,
	578, 576, 577, 355, 318, 319, 389, 323, 333, 377,
	424, 361, 382, 275, 415, 390, 337, 502, 529, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 556, 555, 554, 553,
	552, 551, 550, 0, 0, 499, 402, 287, 252, 283,
	284, 291, 596, 593, 406, 597, 0, 257, 479, 331,
	0, 372, 305, 544, 545, 208, 209, 210, 211, 212,
	213, 214, 215, 253, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 229, 230, 231, 232, 547,
	223, 224, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 0, 0, 0, 254,
	248, 249, 250, 251, 0, 0, 0, 431, 432, 433,
	455, 417, 478, 594, 0, 0, 0, 0, 0, 0,
	0, 528, 540, 574, 0, 583, 584, 586, 588, 587,
	0, 600, 469, 470, 580, 360, 0, 484, 517, 506,
	589, 472, 0, 1039, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 330, 521, 503, 513, 504,
	489, 490, 491, 498, 310, 492, 493, 494, 465, 495,
	466, 496, 497, 0, 520, 471, 391, 344, 538, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	0, 0, 0, 0, 273, 199, 467, 585, 468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1025, 0, 0, 0, 0, 0, 0,
	263, 396, 413, 274, 387, 426, 279, 394, 269, 359,
	383, 0, 0, 2337, 2340, 2341, 2342, 2343, 2344, 2345,
	0, 2350, 2346, 2347, 2348, 2349, 0, 2332, 2333, 2334,
	2335, 1023, 2316, 2338, 0, 2317, 356, 2318, 2319, 2320,
	2321, 2322, 2323, 2324, 2325, 2326, 2329, 2330, 2327, 2328,
	2336, 368, 334, 369, 317, 346, 345, 347, 1050, 1052,
	1054, 1056, 1059, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 0, 0,
	582, 0, 423, 0, 0, 0, 0, 0, 0, 395,
	0, 0, 327, 0, 0, 0, 2331, 0, 381, 362,
	602, 0, 0, 379, 332, 408, 370, 414, 397, 422,
	375, 371, 258, 398, 297, 343, 270, 272, 292, 299,
	301, 303, 304, 352, 353, 365, 386, 399, 400, 401,
	296, 280, 380, 281, 314, 282, 259, 288, 286, 289,
	388, 290, 261, 366, 405, 0, 309, 376, 339, 262,
	338, 367, 404, 403, 271, 430, 436, 437, 525, 0,
	442, 603, 604, 605, 451, 456, 457, 458, 460, 461,
	462, 463, 526, 543, 510, 480, 444, 534, 477, 481,
	482, 546, 0, 0, 0, 435, 328, 329, 0, 307,
	255, 256, 599, 293, 358, 548, 581, 473, 0, 535,
	474, 483, 285, 507, 519, 518, 354, 434, 0, 530,
	533, 464, 598, 0, 527, 542, 601, 541, 595, 364,
	0, 385, 539, 486, 0, 531, 505, 0, 532, 501,
	536, 0, 475, 0, 392, 416, 428, 445, 448, 476,
	561, 562, 563, 260, 447, 565, 566, 567, 568, 569,
	570, 571, 564, 419, 508, 485, 511, 427, 488, 487,
	0, 0, 522, 443, 523, 524, 348, 349, 350, 351,
	311, 549, 278, 446, 374, 0, 509, 0, 0, 0,
	0, 0, 0, 0, 0, 514, 515, 512, 606, 0,
	572, 573, 0, 0, 440, 441, 306, 313, 459, 315,
	277, 363, 308, 425, 322, 0, 452, 516, 453, 575,
	578, 576, 577, 355, 318, 319, 389, 323, 333, 377,
	424, 361, 382, 275, 415, 390, 337, 502, 529, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 556, 555, 554, 553,
	552, 551, 550, 0, 0, 499, 402, 287, 252, 283,
	284, 291, 596, 593, 406, 597, 0, 257, 2339, 331,
	0, 372, 305, 544, 545, 208, 209, 210, 211, 212,
	213, 214, 215, 253, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 229, 230, 231, 232, 547,
	223, 224, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 0, 0, 0, 254,
	248, 249, 250, 251, 0, 0, 0, 431, 432, 433,
	455, 417, 478, 594, 0, 0, 0, 0, 0, 0,
	0, 528, 540, 574, 0, 583, 584, 586, 588, 587,
	0, 600, 469, 470, 580, 360, 0, 484, 517, 506,
	589, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 330, 521, 503, 513, 504,
	489, 490, 491, 498, 310, 492, 493, 494, 465, 495,
	466, 496, 497, 0, 520, 471, 391, 344, 538, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	0, 0, 0, 0, 273, 199, 467, 585, 468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 276, 0,
	2209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 396, 413, 274, 387, 426, 279, 394, 269, 359,
	383, 0, 0, 265, 411, 393, 341, 320, 321, 264,
	0, 378, 298, 312, 295, 357, 0, 410, 438, 294,
	429, 0, 421, 267, 0, 420, 356, 407, 412, 342,
	336, 266, 409, 340, 335, 324, 302, 454, 325, 326,
	316, 368, 334, 369, 317, 346, 345, 347, 0, 0,
	0, 0, 0, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 0, 0,
	582, 2208, 423, 0, 0, 0, 2214, 2211, 2213, 395,
	0, 2212, 327, 0, 0, 0, 439, 0, 381, 362,
	602, 0, 2206, 379, 332, 408, 370, 414, 397, 422,
	375, 371, 258, 398, 297, 343, 270, 272, 292, 299,
	301, 303, 304, 352, 353, 365, 386, 399, 400, 401,
	296, 280, 380, 281, 314, 282, 259, 288, 286, 289,
	388, 290, 261, 366, 405, 0, 309, 376, 339, 262,
	338, 367, 404, 403, 271, 430, 436, 437, 525, 0,
	442, 603, 604, 605, 451, 456, 457, 458, 460, 461,
	462, 463, 526, 543, 510, 480, 444, 534, 477, 481,
	482, 546, 0, 0, 0, 435, 328, 329, 0, 307,
	255, 256, 599, 293, 358, 548, 581, 473, 0, 535,
	474, 483, 285, 507, 519, 518, 354, 434, 0, 530,
	533, 464, 598, 0, 527, 542, 601, 541, 595, 364,
	0, 385, 539, 486, 0, 531, 505, 0, 532, 501,
	536, 0, 475, 0, 392, 416, 428, 445, 448, 476,
	561, 562, 563, 260, 447, 565, 566, 567, 568, 569,
	570, 571, 564, 419, 508, 485, 511, 427, 488, 487,
	0, 0, 522, 443, 523, 524, 348, 349, 350, 351,
	311, 549, 278, 446, 374, 0, 509, 0, 0, 0,
	0, 0, 0, 0, 0, 514, 515, 512, 606, 0,
	572, 573, 0, 0, 440, 441, 306, 313, 459, 315,
	277, 363, 308, 425, 322, 0, 452, 516, 453, 575,
	578, 576, 577, 355, 318, 319, 389, 323, 333, 377,
	424, 361, 382, 275, 415, 390, 337, 502, 529, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 556, 555, 554, 553,
	552, 551, 550, 0, 0, 499, 402, 287, 252, 283,
	284, 291, 596, 593, 406, 597, 0, 257, 479, 331,
	0, 372, 305, 544, 545, 208, 209, 210, 211, 212,
	213, 214, 215, 253, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 229, 230, 231, 232, 547,
	223, 224, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 0, 0, 0, 254,
	248, 249, 250, 251, 0, 0, 0, 431, 432, 433,
	455, 417, 478, 594, 0, 0, 0, 0, 0, 0,
	0, 528, 540, 574, 0, 583, 584, 586, 588, 587,
	0, 600, 469, 470, 580, 360, 0, 484, 517, 506,
	589, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 330, 521, 503, 513, 504,
	489, 490, 491, 498, 310, 492, 493, 494, 465, 495,
	466, 496, 497, 0, 520, 471, 391, 344, 538, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	0, 0, 0, 0, 273, 199, 467, 585, 468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 276, 0,
	2209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 396, 413, 274, 387, 426, 279, 394, 269, 359,
	383, 0, 0, 265, 411, 393, 341, 320, 321, 264,
	0, 378, 298, 312, 295, 357, 0, 410, 438, 294,
	429, 0, 421, 267, 0, 420, 356, 407, 412, 342,
	336, 266, 409, 340, 335, 324, 302, 454, 325, 326,
	316, 368, 334, 369, 317, 346, 345, 347, 0, 0,
	0, 0, 0, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 0, 0,
	582, 2208, 423, 0, 0, 0, 2214, 2211, 2213, 395,
	0, 2212, 327, 0, 0, 0, 439, 0, 381, 362,
	602, 0, 0, 379, 332, 408, 370, 414, 397, 422,
	375, 371, 258, 398, 297, 343, 270, 272, 292, 299,
	301, 303, 304, 352, 353, 365, 386, 399, 400, 401,
	296, 280, 380, 281, 314, 282, 259, 288, 286, 289,
	388, 290, 261, 366, 405, 0, 309, 376, 339, 262,
	338, 367, 404, 403, 271, 430, 436, 437, 525, 0,
	442, 603, 604, 605, 451, 456, 457, 458, 460, 461,
	462, 463, 526, 543, 510, 480, 444, 534, 477, 481,
	482, 546, 0, 0, 0, 435, 328, 329, 0, 307,
	255, 256, 599, 293, 358, 548, 581, 473, 0, 535,
	474, 483, 285, 507, 519, 518, 354, 434, 0, 530,
	533, 464, 598, 0, 527, 542, 601, 541, 595, 364,
	0, 385, 539, 486, 0, 531, 505, 0, 532, 501,
	536, 0, 475, 0, 392, 416, 428, 445, 448, 476,
	561, 562, 563, 260, 447, 565, 566, 567, 568, 569,
	570, 571, 564, 419, 508, 485, 511, 427, 488, 487,
	0, 0, 522, 443, 523, 524, 348, 349, 350, 351,
	311, 549, 278, 446, 374, 0, 509, 0, 0, 0,
	0, 0, 0, 0, 0, 514, 515, 512, 606, 0,
	572, 573, 0, 0, 440, 441, 306, 313, 459, 315,
	277, 363, 308, 425, 322, 0, 452, 516, 453, 575,
	578, 576, 577, 355, 318, 319, 389, 323, 333, 377,
	424, 361, 382, 275, 415, 390, 337, 502, 529, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 556, 555, 554, 553,
	552, 551, 550, 0, 0, 499, 402, 287, 252, 283,
	284, 291, 596, 593, 406, 597, 0, 257, 479, 331,
	0, 372, 305, 544, 545, 208, 209, 210, 211, 212,
	213, 214, 215, 253, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 229, 230, 231, 232, 547,
	223, 224, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 0, 0, 0, 254,
	248, 249, 250, 251, 0, 0, 0, 431, 432, 433,
	455, 417, 478, 594, 0, 0, 0, 0, 0, 0,
	0, 528, 540, 574, 0, 583, 584, 586, 588, 587,
	0, 600, 469, 470, 580, 360, 0, 484, 517, 506,
	589, 472, 0, 0, 0, 0, 0, 1934, 0, 0,
	0, 0, 300, 0, 0, 330, 521, 503, 513, 504,
	489, 490, 491, 498, 310, 492, 493, 494, 465, 495,
	466, 496, 497, 0, 520, 471, 391, 344, 538, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	1935, 0, 0, 0, 273, 199, 467, 585, 468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 276, 0,
	0, 1150, 1151, 1152, 1149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 396, 413, 274, 387, 426, 279, 394, 269, 359,
	383, 0, 0, 265, 411, 393, 341, 320, 321, 264,
	0, 378, 298, 312, 295, 357, 0, 410, 438, 294,
	429, 0, 421, 267, 0, 420, 356, 407, 412, 342,
	336, 266, 409, 340, 335, 324, 302, 454, 325, 326,
	316, 368, 334, 369, 317, 346, 345, 347, 0, 0,
	0, 0, 0, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 0, 0,
	582, 0, 423, 0, 0, 0, 0, 0, 0, 395,
	0, 0, 327, 0, 0, 0, 439, 0, 381, 362,
	602, 0, 0, 379, 332, 408, 370, 414, 397, 422,
	375, 371, 258, 398, 297, 343, 270, 272, 292, 299,
	301, 303, 304, 352, 353, 365, 386, 399, 400, 401,
	296, 280, 380, 281, 314, 282, 259, 288, 286, 289,
	388, 290, 261, 366, 405, 0, 309, 376, 339, 262,
	338, 367, 404, 403, 271, 430, 436, 437, 525, 0,
	442, 603, 604, 605, 451, 456, 457, 458, 460, 461,
	462, 463, 526, 543, 510, 480, 444, 534, 477, 481,
	482, 546, 0, 0, 0, 435, 328, 329, 0, 307,
	255, 256, 599, 293, 358, 548, 581, 473, 0, 535,
	474, 483, 285, 507, 519, 518, 354, 434, 0, 530,
	533, 464, 598, 0, 527, 542, 601, 541, 595, 364,
	0, 385, 539, 486, 0, 531, 505, 0, 532, 501,
	536, 0, 475, 0, 392, 416, 428, 445, 448, 476,
	561, 562, 563, 260, 447, 565, 566, 567, 568, 569,
	570, 571, 564, 419, 508, 485, 511, 427, 488, 487,
	0, 0, 522, 443, 523, 524, 348, 349, 350, 351,
	311, 549, 278, 446, 374, 0, 509, 0, 0, 0,
	0, 0, 0, 0, 0, 514, 515, 512, 606, 0,
	572, 573, 0, 0, 440, 441, 306, 313, 459, 315,
	277, 363, 308, 425, 322, 0, 452, 516, 453, 575,
	578, 576, 577, 355, 318, 319, 389, 323, 333, 377,
	424, 361, 382, 275, 415, 390, 337, 502, 529, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 556, 555, 554, 553,
	552, 551, 550, 0, 0, 499, 402, 287, 252, 283,
	284, 291, 596, 593, 406, 597, 0, 257, 479, 331,
	0, 372, 305, 544, 545, 208, 209, 210, 211, 212,
	213, 214, 215, 253, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 229, 230, 231, 232, 547,
	223, 224, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 0, 0, 0, 254,
	248, 249, 250, 251, 0, 0, 0, 431, 432, 433,
	455, 417, 478, 594, 0, 0, 0, 0, 0, 0,
	0, 528, 540, 574, 0, 583, 584, 586, 588, 587,
	176, 600, 469, 470, 580, 0, 0, 0, 0, 0,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 116, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	1980, 0, 198, 0, 0, 0, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 140, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 176, 600, 469, 470, 580,
	0, 0, 0, 0, 0, 360, 0, 484, 517, 506,
	589, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 330, 521, 503, 513, 504,
	489, 490, 491, 498, 310, 492, 493, 494, 465, 495,
	466, 496, 497, 116, 520, 471, 391, 344, 538, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 170, 1969, 0, 198, 0, 0,
	0, 0, 0, 0, 273, 199, 467, 585, 468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 396, 413, 274, 387, 426, 279, 394, 269, 359,
	383, 0, 0, 265, 411, 393, 341, 320, 321, 264,
	0, 378, 298, 312, 295, 357, 0, 410, 438, 294,
	429, 0, 421, 267, 0, 420, 356, 407, 412, 342,
	336, 266, 409, 340, 335, 324, 302, 454, 325, 326,
	316, 368, 334, 369, 317, 346, 345, 347, 0, 0,
	0, 0, 0, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 0, 0,
	582, 0, 423, 0, 0, 0, 0, 0, 0, 395,
	0, 0, 327, 0, 0, 0, 439, 0, 381, 362,
	602, 0, 0, 379, 332, 408, 370, 414, 397, 422,
	375, 371, 258, 398, 297, 343, 270, 272, 292, 299,
	301, 303, 304, 352, 353, 365, 386, 399, 400, 401,
	296, 280, 380, 281, 314, 282, 259, 288, 286, 289,
	388, 290, 261, 366, 405, 0, 309, 376, 339, 262,
	338, 367, 404, 403, 271, 430, 436, 437, 525, 0,
	442, 603, 604, 605, 451, 456, 457, 458, 460, 461,
	462, 463, 526, 543, 510, 480, 444, 534, 477, 481,
	482, 546, 0, 0, 0, 435, 328, 329, 0, 307,
	255, 256, 599, 293, 358, 548, 581, 473, 0, 535,
	474, 483, 285, 507, 519, 518, 354, 434, 0, 530,
	533, 464, 598, 0, 527, 542, 601, 541, 595, 364,
	0, 385, 539, 486, 0, 531, 505, 0, 532, 501,
	536, 0, 475, 0, 392, 416, 428, 445, 448, 476,
	561, 562, 563, 260, 447, 565, 566, 567, 568, 569,
	570, 571, 564, 419, 508, 485, 511, 427, 488, 487,
	0, 0, 522, 443, 523, 524, 348, 349, 350, 351,
	311, 549, 278, 446, 374, 0, 509, 0, 0, 0,
	0, 0, 0, 0, 0, 514, 515, 512, 606, 0,
	572, 573, 0, 0, 440, 441, 306, 313, 459, 315,
	277, 363, 308, 425, 322, 0, 452, 516, 453, 575,
	578, 576, 577, 355, 318, 319, 389, 323, 333, 377,
	424, 361, 382, 275, 415, 390, 337, 502, 529, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 556, 555, 554, 553,
	552, 551, 550, 0, 0, 499, 402, 287, 252, 283,
	284, 291, 596, 593, 406, 597, 0, 257, 479, 331,
	140, 372, 305, 544, 545, 208, 209, 210, 211, 212,
	213, 214, 215, 253, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 229, 230, 231, 232, 547,
	223, 224, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 0, 0, 0, 254,
	248, 249, 250, 251, 0, 0, 0, 431, 432, 433,
	455, 417, 478, 594, 0, 0, 0, 0, 0, 0,
	0, 528, 540, 574, 0, 583, 584, 586, 588, 587,
	0, 600, 469, 470, 580, 360, 0, 484, 517, 506,
	589, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 955, 0, 330, 521, 503, 513, 504,
	489, 490, 491, 498, 310, 492, 493, 494, 465, 495,
	466, 496, 497, 0, 520, 471, 391, 344, 538, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 962, 963,
	0, 0, 0, 0, 273, 199, 467, 585, 468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 396, 950, 274, 387, 426, 279, 394, 269, 359,
	383, 0, 0, 265, 411, 393, 341, 320, 321, 264,
	0, 378, 298, 312, 295, 357, 0, 410, 438, 294,
	429, 940, 421, 267, 939, 420, 356, 407, 412, 342,
	336, 266, 409, 340, 335, 324, 302, 454, 325, 326,
	316, 368, 334, 369, 317, 346, 345, 347, 0, 0,
	0, 0, 0, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 0, 0,
	582, 0, 423, 0, 0, 0, 0, 0, 0, 395,
	0, 0, 327, 0, 0, 0, 439, 0, 381, 362,
	602, 0, 0, 379, 332, 408, 370, 414, 397, 422,
	953, 371, 258, 398, 297, 343, 270, 272, 292, 299,
	301, 303, 304, 352, 353, 365, 386, 399, 400, 401,
	296, 280, 380, 281, 314, 282, 259, 288, 286, 289,
	388, 290, 261, 366, 405, 0, 309, 376, 339, 262,
	338, 367, 404, 403, 271, 430, 436, 437, 525, 0,
	442, 603, 604, 605, 451, 456, 457, 458, 460, 461,
	462, 463, 526, 543, 510, 480, 444, 534, 477, 481,
	482, 546, 0, 0, 0, 435, 328, 329, 0, 307,
	255, 256, 599, 293, 358, 548, 581, 473, 0, 535,
	474, 483, 285, 507, 519, 518, 354, 434, 0, 530,
	533, 464, 598, 0, 527, 542, 601, 541, 595, 364,
	0, 385, 539, 486, 0, 531, 505, 0, 532, 501,
	536, 0, 475, 0, 392, 416, 428, 445, 448, 476,
	561, 562, 563, 260, 447, 565, 566, 567, 568, 569,
	570, 954, 564, 419, 508, 485, 511, 427, 488, 487,
	0, 0, 522, 957, 523, 524, 348, 349, 350, 351,
	311, 549, 278, 446, 374, 0, 509, 0, 0, 0,
	0, 0, 0, 0, 0, 514, 515, 512, 606, 0,
	572, 573, 0, 0, 440, 441, 306, 313, 459, 315,
	277, 363, 308, 425, 322, 0, 452, 516, 453, 575,
	578, 576, 577, 964, 951, 960, 952, 323, 333, 377,
	424, 361, 382, 275, 415, 390, 961, 502, 529, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 556, 555, 554, 553,
	552, 551, 550, 0, 0, 499, 402, 287, 252, 283,
	284, 291, 596, 593, 406, 597, 0, 257, 479, 331,
	0, 372, 305, 544, 545, 208, 209, 210, 211, 212,
	213, 214, 215, 253, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 229, 230, 231, 232, 547,
	223, 224, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 0, 0, 0, 254,
	248, 249, 250, 251, 0, 0, 0, 431, 432, 433,
	455, 417, 478, 594, 0, 0, 0, 0, 0, 0,
	0, 528, 540, 574, 0, 583, 584, 586, 588, 587,
	176, 600, 469, 470, 580, 0, 0, 0, 0, 0,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 116, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1867,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 140, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 962, 963, 0, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 966, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 940, 421, 267, 939,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 964, 1886,
	960, 1887, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 961, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 2691,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 2694, 0,
	0, 2693, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 1407, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 1405, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1403, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 1401, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 1405, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1403, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3640, 0, 198, 783, 0, 0, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 1405, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1403, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 1405, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3267, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 2280, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 2282, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 2301, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 1405, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 783, 0, 0, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3619,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 3409, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 3532, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3263,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3424, 0, 198, 0, 0, 0, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 3352, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 2907, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2924,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1867,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3021,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 2876, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2788,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 1405, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 2282, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 2616,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2000,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2359,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 0, 600, 469, 470, 580,
	360, 0, 484, 517, 506, 589, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
	330, 521, 503, 513, 504, 489, 490, 491, 498, 310,
	492, 493, 494, 465, 495, 466, 496, 497, 0, 520,
	471, 391, 344, 538, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 2357, 0, 0, 0, 273,
	199, 467, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 396, 413, 274, 387,
	426, 279, 394, 269, 359, 383, 0, 0, 265, 411,
	393, 341, 320, 321, 264, 0, 378, 298, 312, 295,
	357, 0, 410, 438, 294, 429, 0, 421, 267, 0,
	420, 356, 407, 412, 342, 336, 266, 409, 340, 335,
	324, 302, 454, 325, 326, 316, 368, 334, 369, 317,
	346, 345, 347, 0, 0, 0, 0, 0, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 582, 0, 423, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 327, 0, 0,
	0, 439, 0, 381, 362, 602, 0, 0, 379, 332,
	408, 370, 414, 397, 422, 375, 371, 258, 398, 297,
	343, 270, 272, 292, 299, 301, 303, 304, 352, 353,
	365, 386, 399, 400, 401, 296, 280, 380, 281, 314,
	282, 259, 288, 286, 289, 388, 290, 261, 366, 405,
	0, 309, 376, 339, 262, 338, 367, 404, 403, 271,
	430, 436, 437, 525, 0, 442, 603, 604, 605, 451,
	456, 457, 458, 460, 461, 462, 463, 526, 543, 510,
	480, 444, 534, 477, 481, 482, 546, 0, 0, 0,
	435, 328, 329, 0, 307, 255, 256, 599, 293, 358,
	548, 581, 473, 0, 535, 474, 483, 285, 507, 519,
	518, 354, 434, 0, 530, 533, 464, 598, 0, 527,
	542, 601, 541, 595, 364, 0, 385, 539, 486, 0,
	531, 505, 0, 532, 501, 536, 0, 475, 0, 392,
	416, 428, 445, 448, 476, 561, 562, 563, 260, 447,
	565, 566, 567, 568, 569, 570, 571, 564, 419, 508,
	485, 511, 427, 488, 487, 0, 0, 522, 443, 523,
	524, 348, 349, 350, 351, 311, 549, 278, 446, 374,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 515, 512, 606, 0, 572, 573, 0, 0, 440,
	441, 306, 313, 459, 315, 277, 363, 308, 425, 322,
	0, 452, 516, 453, 575, 578, 576, 577, 355, 318,
	319, 389, 323, 333, 377, 424, 361, 382, 275, 415,
	390, 337, 502, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 556, 555, 554, 553, 552, 551, 550, 0, 0,
	499, 402, 287, 252, 283, 284, 291, 596, 593, 406,
	597, 0, 257, 479, 331, 0, 372, 305, 544, 545,
	208, 209, 210, 211, 212, 213, 214, 215, 253, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	229, 230, 231, 232, 547, 223, 224, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 0, 0, 254, 248, 249, 250, 251, 0,
	0, 0, 431, 432, 433, 455, 417, 478, 594, 0,
	0, 0, 0, 0, 0, 0, 528, 540, 574, 0,
	583, 584, 586, 588, 587, 2146, 600, 469, 470, 580,
	0, 360, 0, 484, 517, 506, 589, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 330, 521, 503, 513, 504, 489, 490, 491, 498,
	310, 492, 493, 494, 465, 495, 466, 496, 497, 0,
	520, 471, 391, 344, 538, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 0, 0,
	273, 199, 467, 585, 468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 396, 413, 274,
	387, 426, 279, 394, 269, 359, 383, 0, 0, 265,
	411, 393, 341, 320, 321, 264, 0, 378, 298, 312,
	295, 357, 0, 410, 438, 294, 429, 0, 421, 267,
	0, 420, 356, 407, 412, 342, 336, 266, 409, 340,
	335, 324, 302, 454, 325, 326, 316, 368, 334, 369,
	317, 346, 345, 347, 0, 0, 0, 0, 0, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 0, 0, 582, 0, 423, 0,
	0, 0, 0, 0, 0, 395, 0, 0, 327, 0,
	0, 0, 439, 0, 381, 362, 602, 0, 0, 379,
	332, 408, 370, 414, 397, 422, 375, 371, 258, 398,
	297, 343, 270, 272, 292, 299, 301, 303, 304, 352,
	353, 365, 386, 399, 400, 401, 296, 280, 380, 281,
	314, 282, 259, 288, 286, 289, 388, 290, 261, 366,
	405, 0, 309, 376, 339, 262, 338, 367, 404, 403,
	271, 430, 436, 437, 525, 0, 442, 603, 604, 605,
	451, 456, 457, 458, 460, 461, 462, 463, 526, 543,
	510, 480, 444, 534, 477, 481, 482, 546, 0, 0,
	0, 435, 328, 329, 0, 307, 255, 256, 599, 293,
	358, 548, 581, 473, 0, 535, 474, 483, 285, 507,
	519, 518, 354, 434, 0, 530, 533, 464, 598, 0,
	527, 542, 601, 541, 595, 364, 0, 385, 539, 486,
	0, 531, 505, 0, 532, 501, 536, 0, 475, 0,
	392, 416, 428, 445, 448, 476, 561, 562, 563, 260,
	447, 565, 566, 567, 568, 569, 570, 571, 564, 419,
	508, 485, 511, 427, 488, 487, 0, 0, 522, 443,
	523, 524, 348, 349, 350, 351, 311, 549, 278, 446,
	374, 0, 509, 0, 0, 0, 0, 0, 0, 0,
	0, 514, 515, 512, 606, 0, 572, 573, 0, 0,
	440, 441, 306, 313, 459, 315, 277, 363, 308, 425,
	322, 0, 452, 516, 453, 575, 578, 576, 577, 355,
	318, 319, 389, 323, 333, 377, 424, 361, 382, 275,
	415, 390, 337, 502, 529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 556, 555, 554, 553, 552, 551, 550, 0,
	0, 499, 402, 287, 252, 283, 284, 291, 596, 593,
	406, 597, 0, 257, 479, 331, 0, 372, 305, 544,
	545, 208, 209, 210, 211, 212, 213, 214, 215, 253,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 229, 230, 231, 232, 547, 223, 224, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 0, 0, 0, 254, 248, 249, 250, 251,
	0, 0, 0, 431, 432, 433, 455, 417, 478, 594,
	0, 0, 0, 0, 0, 0, 0, 528, 540, 574,
	0, 583, 584, 586, 588, 587, 0, 600, 469, 470,
	580, 360, 0, 484, 517, 506, 589, 472, 0, 1854,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 330, 521, 503, 513, 504, 489, 490, 491, 498,
	310, 492, 493, 494, 465, 495, 466, 496, 497, 0,
	520, 471, 391, 344, 538, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 0, 0,
	273, 199, 467, 585, 468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 396, 413, 274,
	387, 426, 279, 394, 269, 359, 383, 0, 0, 265,
	411, 393, 341, 320, 321, 264, 0, 378, 298, 312,
	295, 357, 0, 410, 438, 294, 429, 0, 421, 267,
	0, 420, 356, 407, 412, 342, 336, 266, 409, 340,
	335, 324, 302, 454, 325, 326, 316, 368, 334, 369,
	317, 346, 345, 347, 0, 0, 0, 0, 0, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 0, 0, 582, 0, 423, 0,
	0, 0, 0, 0, 0, 395, 0, 0, 327, 0,
	0, 0, 439, 0, 381, 362, 602, 0, 0, 379,
	332, 408, 370, 414, 397, 422, 375, 371, 258, 398,
	297, 343, 270, 272, 292, 299, 301, 303, 304, 352,
	353, 365, 386, 399, 400, 401, 296, 280, 380, 281,
	314, 282, 259, 288, 286, 289, 388, 290, 261, 366,
	405, 0, 309, 376, 339, 262, 338, 367, 404, 403,
	271, 430, 436, 437, 525, 0, 442, 603, 604, 605,
	451, 456, 457, 458, 460, 461, 462, 463, 526, 543,
	510, 480, 444, 534, 477, 481, 482, 546, 0, 0,
	0, 435, 328, 329, 0, 307, 255, 256, 599, 293,
	358, 548, 581, 473, 0, 535, 474, 483, 285, 507,
	519, 518, 354, 434, 0, 530, 533, 464, 598, 0,
	527, 542, 601, 541, 595, 364, 0, 385, 539, 486,
	0, 531, 505, 0, 532, 501, 536, 0, 475, 0,
	392, 416, 428, 445, 448, 476, 561, 562, 563, 260,
	447, 565, 566, 567, 568, 569, 570, 571, 564, 419,
	508, 485, 511, 427, 488, 487, 0, 0, 522, 443,
	523, 524, 348, 349, 350, 351, 311, 549, 278, 446,
	374, 0, 509, 0, 0, 0, 0, 0, 0, 0,
	0, 514, 515, 512, 606, 0, 572, 573, 0, 0,
	440, 441, 306, 313, 459, 315, 277, 363, 308, 425,
	322, 0, 452, 516, 453, 575, 578, 576, 577, 355,
	318, 319, 389, 323, 333, 377, 424, 361, 382, 275,
	415, 390, 337, 502, 529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 556, 555, 554, 553, 552, 551, 550, 0,
	0, 499, 402, 287, 252, 283, 284, 291, 596, 593,
	406, 597, 0, 257, 479, 331, 0, 372, 305, 544,
	545, 208, 209, 210, 211, 212, 213, 214, 215, 253,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 229, 230, 231, 232, 547, 223, 224, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 0, 0, 0, 254, 248, 249, 250, 251,
	0, 0, 0, 431, 432, 433, 455, 417, 478, 594,
	0, 0, 0, 0, 0, 0, 0, 528, 540, 574,
	0, 583, 584, 586, 588, 587, 0, 600, 469, 470,
	580, 360, 0, 484, 517, 506, 589, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 330, 521, 503, 513, 504, 489, 490, 491, 498,
	310, 492, 493, 494, 465, 495, 466, 496, 497, 0,
	520, 471, 391, 344, 538, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 1405, 0, 0, 0,
	273, 199, 467, 585, 468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 396, 413, 274,
	387, 426, 279, 394, 269, 359, 383, 0, 0, 265,
	411, 393, 341, 320, 321, 264, 0, 378, 298, 312,
	295, 357, 0, 410, 438, 294, 429, 0, 421, 267,
	0, 420, 356, 407, 412, 342, 336, 266, 409, 340,
	335, 324, 302, 454, 325, 326, 316, 368, 334, 369,
	317, 346, 345, 347, 0, 0, 0, 0, 0, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 0, 0, 582, 0, 423, 0,
	0, 0, 0, 0, 0, 395, 0, 0, 327, 0,
	0, 0, 439, 0, 381, 362, 602, 0, 0, 379,
	332, 408, 370, 414, 397, 422, 1760, 371, 258, 398,
	297, 343, 270, 272, 292, 299, 301, 303, 304, 352,
	353, 365, 386, 399, 400, 401, 296, 280, 380, 281,
	314, 282, 259, 288, 286, 289, 388, 290, 261, 366,
	405, 0, 309, 376, 339, 262, 338, 367, 404, 403,
	271, 430, 436, 437, 525, 0, 442, 603, 604, 605,
	451, 456, 457, 458, 460, 461, 462, 463, 526, 543,
	510, 480, 444, 534, 477, 481, 482, 546, 0, 0,
	0, 435, 328, 329, 0, 307, 255, 256, 599, 293,
	358, 548, 581, 473, 0, 535, 474, 483, 285, 507,
	519, 518, 354, 434, 0, 530, 533, 464, 598, 0,
	527, 542, 601, 541, 595, 364, 0, 385, 539, 486,
	0, 531, 505, 0, 532, 501, 536, 0, 475, 0,
	392, 416, 428, 445, 448, 476, 561, 562, 563, 260,
	447, 565, 566, 567, 568, 569, 570, 571, 564, 419,
	508, 485, 511, 427, 488, 487, 0, 0, 522, 443,
	523, 524, 348, 349, 350, 351, 311, 549, 278, 446,
	374, 0, 509, 0, 0, 0, 0, 0, 0, 0,
	0, 514, 515, 512, 606, 0, 572, 573, 0, 0,
	440, 441, 306, 313, 459, 315, 277, 363, 308, 425,
	322, 0, 452, 516, 453, 575, 578, 576, 577, 355,
	318, 319, 389, 323, 333, 377, 424, 361, 382, 275,
	415, 390, 337, 502, 529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 556, 555, 554, 553, 552, 551, 550, 0,
	0, 499, 402, 287, 252, 283, 284, 291, 596, 593,
	406, 597, 0, 257, 479, 331, 0, 372, 305, 544,
	545, 208, 209, 210, 211, 212, 213, 214, 215, 253,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 229, 230, 231, 232, 547, 223, 224, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 0, 0, 0, 254, 248, 249, 250, 251,
	0, 0, 0, 431, 432, 433, 455, 417, 478, 594,
	0, 0, 0, 0, 0, 0, 0, 528, 540, 574,
	0, 583, 584, 586, 588, 587, 0, 600, 469, 470,
	580, 360, 0, 484, 517, 506, 589, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 330, 521, 503, 513, 504, 489, 490, 491, 498,
	310, 492, 493, 494, 465, 495, 466, 496, 497, 0,
	520, 471, 391, 344, 538, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 0, 0,
	273, 199, 467, 585, 468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 396, 413, 274,
	387, 426, 279, 394, 269, 359, 383, 0, 0, 265,
	411, 393, 341, 320, 321, 264, 0, 378, 298, 312,
	295, 357, 0, 410, 438, 294, 429, 0, 421, 267,
	0, 420, 356, 407, 412, 342, 336, 266, 409, 340,
	335, 324, 302, 454, 325, 326, 316, 368, 334, 369,
	317, 346, 345, 347, 0, 0, 0, 0, 0, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 0, 0, 582, 0, 423, 0,
	0, 1435, 0, 0, 0, 395, 0, 0, 327, 0,
	0, 0, 439, 0, 381, 362, 602, 0, 0, 379,
	332, 408, 370, 414, 397, 422, 375, 371, 258, 398,
	297, 343, 270, 272, 292, 299, 301, 303, 304, 352,
	353, 365, 386, 399, 400, 401, 296, 280, 380, 281,
	314, 282, 259, 288, 286, 289, 388, 290, 261, 366,
	405, 0, 309, 376, 339, 262, 338, 367, 404, 403,
	271, 430, 436, 437, 525, 0, 442, 603, 604, 605,
	451, 456, 457, 458, 460, 461, 462, 463, 526, 543,
	510, 480, 444, 534, 477, 481, 482, 546, 0, 0,
	0, 435, 328, 329, 0, 307, 255, 256, 599, 293,
	358, 548, 581, 473, 0, 535, 474, 483, 285, 507,
	519, 518, 354, 434, 0, 530, 533, 464, 598, 0,
	527, 542, 601, 541, 595, 364, 0, 385, 539, 486,
	0, 531, 505, 0, 532, 501, 536, 0, 475, 0,
	392, 416, 428, 445, 448, 476, 561, 562, 563, 260,
	447, 565, 566, 567, 568, 569, 570, 571, 564, 419,
	508, 485, 511, 427, 488, 487, 0, 0, 522, 443,
	523, 524, 348, 349, 350, 351, 311, 549, 278, 446,
	374, 0, 509, 0, 0, 0, 0, 0, 0, 0,
	0, 514, 515, 512, 606, 0, 572, 573, 0, 0,
	440, 441, 306, 313, 459, 315, 277, 363, 308, 425,
	322, 0, 452, 516, 453, 575, 578, 576, 577, 355,
	318, 319, 389, 323, 333, 377, 424, 361, 382, 275,
	415, 390, 337, 502, 529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 556, 555, 554, 553, 552, 551, 550, 0,
	0, 499, 402, 287, 252, 283, 284, 291, 596, 593,
	406, 597, 0, 257, 479, 331, 0, 372, 305, 544,
	545, 208, 209, 210, 211, 212, 213, 214, 215, 253,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 229, 230, 231, 232, 547, 223, 224, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 0, 0, 0, 254, 248, 249, 250, 251,
	0, 0, 0, 431, 432, 433, 455, 417, 478, 594,
	0, 0, 0, 0, 0, 0, 0, 528, 540, 574,
	0, 583, 584, 586, 588, 587, 0, 600, 469, 470,
	580, 360, 0, 484, 517, 506, 589, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 330, 521, 503, 513, 504, 489, 490, 491, 498,
	310, 492, 493, 494, 465, 495, 466, 496, 497, 0,
	520, 471, 391, 344, 538, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 0, 0,
	273, 199, 467, 585, 468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 396, 413, 274,
	387, 426, 279, 394, 269, 359, 383, 0, 0, 265,
	411, 393, 341, 320, 321, 264, 0, 378, 298, 312,
	295, 357, 0, 410, 438, 294, 429, 0, 421, 267,
	0, 420, 356, 407, 412, 342, 336, 266, 409, 340,
	335, 324, 302, 454, 325, 326, 316, 368, 334, 369,
	317, 346, 345, 347, 0, 0, 0, 0, 0, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 0, 621, 582, 0, 423, 0,
	0, 0, 0, 0, 0, 395, 0, 0, 327, 0,
	0, 0, 439, 0, 381, 362, 602, 0, 0, 379,
	332, 408, 370, 414, 397, 422, 375, 371, 258, 398,
	297, 343, 270, 272, 292, 299, 301, 303, 304, 352,
	353, 365, 386, 399, 400, 401, 296, 280, 380, 281,
	314, 282, 259, 288, 286, 289, 388, 290, 261, 366,
	405, 0, 309, 376, 339, 262, 338, 367, 404, 403,
	271, 430, 436, 437, 525, 0, 442, 603, 604, 605,
	451, 456, 457, 458, 460, 461, 462, 463, 526, 543,
	510, 480, 444, 534, 477, 481, 482, 546, 0, 0,
	0, 435, 328, 329, 0, 307, 255, 256, 599, 293,
	358, 548, 581, 473, 0, 535, 474, 483, 285, 507,
	519, 518, 354, 434, 0, 530, 533, 464, 598, 0,
	527, 542, 601, 541, 595, 364, 0, 385, 539, 486,
	0, 531, 505, 0, 532, 501, 536, 0, 475, 0,
	392, 416, 428, 445, 448, 476, 561, 562, 563, 260,
	447, 565, 566, 567, 568, 569, 570, 571, 564, 419,
	508, 485, 511, 427, 488, 487, 0, 0, 522, 443,
	523, 524, 348, 349, 350, 351, 311, 549, 278, 446,
	374, 0, 509, 0, 0, 0, 0, 0, 0, 0,
	0, 514, 515, 512, 606, 0, 572, 573, 0, 0,
	440, 441, 306, 313, 459, 315, 277, 363, 308, 425,
	322, 0, 452, 516, 453, 575, 578, 576, 577, 355,
	318, 319, 389, 323, 333, 377, 424, 361, 382, 275,
	415, 390, 337, 502, 529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 556, 555, 554, 553, 552, 551, 550, 0,
	0, 499, 402, 287, 252, 283, 284, 291, 596, 593,
	406, 597, 0, 257, 479, 331, 0, 372, 305, 544,
	545, 208, 209, 210, 211, 212, 213, 214, 215, 253,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 229, 230, 231, 232, 547, 223, 224, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 0, 0, 0, 254, 248, 249, 250, 251,
	0, 0, 0, 431, 432, 433, 455, 417, 478, 594,
	0, 0, 0, 0, 0, 0, 0, 528, 540, 574,
	0, 583, 584, 586, 588, 587, 0, 600, 469, 470,
	580, 360, 0, 484, 517, 506, 589, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 330, 521, 503, 513, 504, 489, 490, 491, 498,
	310, 492, 493, 494, 465, 495, 466, 496, 497, 0,
	520, 471, 391, 344, 538, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 0, 0,
	273, 199, 467, 585, 468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 396, 413, 274,
	387, 426, 279, 394, 269, 359, 383, 0, 0, 265,
	411, 393, 341, 320, 321, 264, 0, 378, 298, 312,
	295, 357, 0, 410, 438, 294, 429, 0, 421, 267,
	0, 420, 356, 407, 412, 342, 336, 266, 409, 340,
	335, 324, 302, 454, 325, 326, 316, 368, 334, 369,
	317, 346, 345, 347, 0, 0, 0, 0, 0, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 0, 0, 582, 0, 423, 0,
	0, 0, 0, 0, 0, 395, 0, 0, 327, 0,
	0, 0, 439, 0, 381, 362, 602, 0, 0, 379,
	332, 408, 370, 414, 397, 422, 375, 371, 258, 398,
	297, 343, 270, 272, 292, 299, 301, 303, 304, 352,
	353, 365, 386, 399, 400, 401, 296, 280, 380, 281,
	314, 282, 259, 288, 286, 289, 388, 290, 261, 366,
	405, 0, 309, 376, 339, 262, 338, 367, 404, 403,
	271, 430, 436, 437, 525, 0, 442, 603, 604, 605,
	451, 456, 457, 458, 460, 461, 462, 463, 526, 543,
	510, 480, 444, 534, 477, 481, 482, 546, 0, 0,
	0, 435, 328, 329, 0, 307, 255, 256, 599, 293,
	358, 548, 581, 473, 0, 535, 474, 483, 285, 507,
	519, 518, 354, 434, 0, 530, 533, 464, 598, 0,
	527, 542, 601, 541, 595, 364, 0, 385, 539, 486,
	0, 531, 505, 0, 532, 501, 536, 0, 475, 0,
	392, 416, 428, 445, 448, 476, 561, 562, 563, 260,
	447, 565, 566, 567, 568, 569, 570, 571, 564, 419,
	508, 485, 511, 427, 488, 487, 0, 0, 522, 443,
	523, 524, 348, 349, 350, 351, 311, 549, 278, 446,
	374, 0, 509, 0, 0, 0, 0, 0, 0, 0,
	0, 514, 515, 512, 606, 0, 572, 573, 0, 0,
	440, 441, 306, 313, 459, 315, 277, 363, 308, 425,
	322, 0, 452, 516, 453, 575, 578, 576, 577, 355,
	318, 319, 389, 323, 333, 377, 424, 361, 382, 275,
	415, 390, 337, 502, 529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 556, 555, 554, 553, 552, 551, 550, 894,
	0, 499, 402, 287, 252, 283, 284, 291, 596, 593,
	406, 597, 0, 257, 479, 331, 0, 372, 305, 544,
	545, 208, 209, 210, 211, 212, 213, 214, 215, 253,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 229, 230, 231, 232, 547, 223, 224, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 0, 0, 0, 254, 248, 249, 250, 251,
	0, 0, 0, 431, 432, 433, 455, 417, 478, 594,
	0, 0, 0, 0, 0, 0, 0, 528, 540, 574,
	0, 583, 584, 586, 588, 587, 0, 600, 469, 470,
	580, 360, 0, 484, 517, 506, 589, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 611, 300, 0,
	0, 330, 521, 503, 513, 504, 489, 490, 491, 498,
	310, 492, 493, 494, 465, 495, 466, 496, 497, 0,
	520, 471, 391, 344, 538, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 0, 0,
	273, 199, 467, 585, 468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 396, 413, 274,
	387, 426, 279, 394, 269, 359, 383, 0, 0, 265,
	411, 393, 341, 320, 321, 264, 0, 378, 298, 312,
	295, 357, 0, 410, 438, 294, 429, 0, 421, 267,
	0, 420, 356, 407, 412, 342, 336, 266, 409, 340,
	335, 324, 302, 454, 325, 326, 316, 368, 334, 369,
	317, 346, 345, 347, 0, 0, 0, 0, 0, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 0, 0, 582, 0, 423, 0,
	0, 0, 0, 0, 0, 395, 0, 0, 327, 0,
	0, 0, 439, 0, 381, 362, 602, 0, 0, 379,
	332, 408, 370, 414, 397, 422, 375, 371, 258, 398,
	297, 343, 270, 272, 292, 299, 301, 303, 304, 352,
	353, 365, 386, 399, 400, 401, 296, 280, 380, 281,
	314, 282, 259, 288, 286, 289, 388, 290, 261, 366,
	405, 0, 309, 376, 339, 262, 338, 367, 404, 403,
	271, 430, 436, 437, 525, 0, 442, 603, 604, 605,
	451, 456, 457, 458, 460, 461, 462, 463, 526, 543,
	510, 480, 444, 534, 477, 481, 482, 546, 0, 0,
	0, 435, 328, 329, 0, 307, 255, 256, 599, 293,
	358, 548, 581, 473, 0, 535, 474, 483, 285, 507,
	519, 518, 354, 434, 0, 530, 533, 464, 598, 0,
	527, 542, 601, 541, 595, 364, 0, 385, 539, 486,
	0, 531, 505, 0, 532, 501, 536, 0, 475, 0,
	392, 416, 428, 445, 448, 476, 561, 562, 563, 260,
	447, 565, 566, 567, 568, 569, 570, 571, 564, 419,
	508, 485, 511, 427, 488, 487, 0, 0, 522, 443,
	523, 524, 348, 349, 350, 351, 311, 549, 278, 446,
	374, 0, 509, 0, 0, 0, 0, 0, 0, 0,
	0, 514, 515, 512, 606, 0, 572, 573, 0, 0,
	440, 441, 306, 313, 459, 315, 277, 363, 308, 425,
	322, 0, 452, 516, 453, 575, 578, 576, 577, 355,
	318, 319, 389, 323, 333, 377, 424, 361, 382, 275,
	415, 390, 337, 502, 529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 556, 555, 554, 553, 552, 551, 550, 0,
	0, 499, 402, 287, 252, 283, 284, 291, 596, 593,
	406, 597, 0, 257, 479, 331, 0, 372, 305, 544,
	545, 208, 209, 210, 211, 212, 213, 214, 215, 253,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 229, 230, 231, 232, 547, 223, 224, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 0, 0, 0, 254, 248, 249, 250, 251,
	0, 0, 0, 431, 432, 433, 455, 417, 478, 594,
	0, 0, 0, 0, 0, 0, 0, 528, 540, 574,
	0, 583, 584, 586, 588, 587, 0, 600, 469, 470,
	580, 360, 0, 484, 517, 506, 589, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 330, 521, 503, 513, 504, 489, 490, 491, 498,
	310, 492, 493, 494, 465, 495, 466, 496, 497, 0,
	520, 471, 391, 344, 538, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 0, 0,
	273, 199, 467, 585, 468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 396, 413, 274,
	387, 426, 279, 394, 269, 359, 383, 0, 0, 265,
	411, 393, 341, 320, 321, 264, 0, 378, 298, 312,
	295, 357, 0, 410, 438, 294, 429, 0, 421, 267,
	0, 420, 356, 407, 412, 342, 336, 266, 409, 340,
	335, 324, 302, 454, 325, 326, 316, 368, 334, 369,
	317, 346, 345, 347, 0, 0, 0, 0, 0, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 0, 0, 582, 0, 423, 0,
	0, 0, 0, 0, 0, 395, 0, 0, 327, 0,
	0, 0, 439, 0, 381, 362, 602, 0, 0, 379,
	332, 408, 370, 414, 397, 422, 375, 371, 258, 398,
	297, 343, 270, 272, 292, 299, 301, 303, 304, 352,
	353, 365, 386, 399, 400, 401, 296, 280, 380, 281,
	314, 282, 259, 288, 286, 289, 388, 290, 261, 366,
	405, 0, 309, 376, 339, 262, 338, 367, 404, 403,
	271, 430, 436, 437, 525, 0, 442, 603, 604, 605,
	451, 456, 457, 458, 460, 461, 462, 463, 526, 543,
	510, 480, 444, 534, 477, 481, 482, 546, 0, 0,
	0, 435, 328, 329, 0, 307, 255, 256, 599, 293,
	358, 548, 581, 473, 0, 535, 474, 483, 285, 507,
	519, 518, 354, 434, 0, 530, 533, 464, 598, 0,
	527, 542, 601, 541, 595, 364, 0, 385, 539, 486,
	0, 531, 505, 0, 532, 501, 536, 0, 475, 0,
	392, 416, 428, 445, 448, 476, 561, 562, 563, 260,
	447, 565, 566, 567, 568, 569, 570, 571, 564, 419,
	508, 485, 511, 427, 488, 487, 0, 0, 522, 443,
	523, 524, 348, 349, 350, 351, 311, 549, 278, 446,
	374, 0, 509, 0, 0, 0, 0, 0, 0, 0,
	0, 514, 515, 512, 606, 0, 572, 573, 0, 0,
	440, 441, 306, 313, 459, 315, 277, 363, 308, 425,
	322, 0, 452, 516, 453, 575, 578, 576, 577, 355,
	318, 319, 389, 323, 333, 377, 424, 361, 382, 275,
	415, 390, 337, 502, 529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 556, 555, 554, 553, 552, 551, 550, 0,
	0, 499, 402, 287, 252, 283, 284, 291, 596, 593,
	406, 597, 0, 257, 479, 331, 0, 372, 305, 544,
	545, 208, 209, 210, 211, 212, 213, 214, 215, 253,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 229, 230, 231, 232, 547, 223, 224, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 0, 0, 0, 254, 248, 249, 250, 251,
	0, 0, 0, 431, 432, 433, 455, 417, 478, 594,
	0, 0, 0, 0, 0, 0, 0, 528, 540, 574,
	0, 583, 584, 586, 588, 587, 0, 600, 469, 470,
	580, 360, 0, 484, 517, 506, 589, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 330, 521, 503, 513, 504, 489, 490, 491, 498,
	310, 492, 493, 494, 465, 495, 466, 496, 497, 0,
	520, 471, 391, 344, 538, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 0, 0,
	273, 199, 467, 585, 468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 396, 1385, 274,
	387, 426, 279, 394, 269, 359, 383, 0, 0, 265,
	411, 393, 341, 320, 321, 264, 0, 378, 298, 312,
	295, 357, 0, 410, 438, 294, 429, 0, 421, 267,
	0, 420, 356, 407, 412, 342, 336, 266, 409, 340,
	335, 324, 302, 454, 325, 326, 316, 368, 334, 369,
	317, 346, 345, 347, 0, 0, 0, 0, 0, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 0, 0, 582, 0, 423, 0,
	0, 0, 0, 0, 0, 395, 0, 0, 327, 0,
	0, 0, 439, 0, 381, 362, 602, 0, 0, 379,
	332, 408, 370, 414, 397, 422, 375, 371, 258, 398,
	297, 343, 270, 272, 292, 299, 301, 303, 304, 352,
	353, 365, 386, 399, 400, 401, 296, 280, 380, 281,
	314, 282, 259, 288, 286, 289, 388, 290, 261, 366,
	405, 0, 309, 376, 339, 262, 338, 367, 404, 403,
	271, 430, 436, 437, 525, 0, 442, 603, 604, 605,
	451, 456, 457, 458, 460, 461, 462, 463, 526, 543,
	510, 480, 444, 534, 477, 481, 482, 546, 0, 0,
	0, 435, 328, 329, 0, 307, 255, 256, 599, 293,
	358, 548, 581, 473, 0, 535, 474, 483, 285, 507,
	519, 518, 354, 434, 0, 530, 533, 464, 598, 0,
	527, 542, 601, 541, 595, 364, 0, 385, 539, 486,
	0, 531, 505, 0, 532, 501, 536, 0, 475, 0,
	392, 416, 428, 445, 448, 476, 561, 562, 563, 260,
	447, 565, 566, 567, 568, 569, 570, 571, 564, 419,
	508, 485, 511, 427, 488, 487, 0, 0, 522, 443,
	523, 524, 348, 349, 350, 351, 311, 549, 278, 446,
	374, 0, 509, 0, 0, 0, 0, 0, 0, 0,
	0, 514, 515, 512, 606, 0, 572, 573, 0, 0,
	440, 441, 306, 313, 459, 315, 277, 363, 308, 425,
	322, 0, 452, 516, 453, 575, 578, 576, 577, 355,
	318, 319, 389, 323, 333, 377, 424, 361, 382, 275,
	415, 390, 337, 502, 529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 556, 555, 554, 553, 552, 551, 550, 0,
	0, 499, 402, 287, 252, 283, 284, 291, 596, 593,
	406, 597, 0, 257, 479, 331, 0, 372, 305, 544,
	545, 208, 209, 210, 211, 212, 213, 214, 215, 253,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 229, 230, 231, 232, 547, 223, 224, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 0, 0, 0, 254, 248, 249, 250, 251,
	0, 0, 0, 431, 432, 433, 455, 417, 478, 594,
	0, 0, 0, 0, 0, 0, 0, 528, 540, 574,
	0, 583, 584, 586, 588, 587, 0, 600, 469, 470,
	580, 360, 0, 484, 517, 506, 589, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 330, 521, 503, 513, 504, 489, 490, 491, 498,
	310, 492, 493, 494, 465, 495, 466, 496, 497, 0,
	520, 471, 391, 344, 538, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 0, 0,
	273, 199, 467, 585, 468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 396, 1383, 274,
	387, 426, 279, 394, 269, 359, 383, 0, 0, 265,
	411, 393, 341, 320, 321, 264, 0, 378, 298, 312,
	295, 357, 0, 410, 438, 294, 429, 0, 421, 267,
	0, 420, 356, 407, 412, 342, 336, 266, 409, 340,
	335, 324, 302, 454, 325, 326, 316, 368, 334, 369,
	317, 346, 345, 347, 0, 0, 0, 0, 0, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 0, 0, 582, 0, 423, 0,
	0, 0, 0, 0, 0, 395, 0, 0, 327, 0,
	0, 0, 439, 0, 381, 362, 602, 0, 0, 379,
	332, 408, 370, 414, 397, 422, 375, 371, 258, 398,
	297, 343, 270, 272, 292, 299, 301, 303, 304, 352,
	353, 365, 386, 399, 400, 401, 296, 280, 380, 281,
	314, 282, 259, 288, 286, 289, 388, 290, 261, 366,
	405, 0, 309, 376, 339, 262, 338, 367, 404, 403,
	271, 430, 436, 437, 525, 0, 442, 603, 604, 605,
	451, 456, 457, 458, 460, 461, 462, 463, 526, 543,
	510, 480, 444, 534, 477, 481, 482, 546, 0, 0,
	0, 435, 328, 329, 0, 307, 255, 256, 599, 293,
	358, 548, 581, 473, 0, 535, 474, 483, 285, 507,
	519, 518, 354, 434, 0, 530, 533, 464, 598, 0,
	527, 542, 601, 541, 595, 364, 0, 385, 539, 486,
	0, 531, 505, 0, 532, 501, 536, 0, 475, 0,
	392, 416, 428, 445, 448, 476, 561, 562, 563, 260,
	447, 565, 566, 567, 568, 569, 570, 571, 564, 419,
	508, 485, 511, 427, 488, 487, 0, 0, 522, 443,
	523, 524, 348, 349, 350, 351, 311, 549, 278, 446,
	374, 0, 509, 0, 0, 0, 0, 0, 0, 0,
	0, 514, 515, 512, 606, 0, 572, 573, 0, 0,
	440, 441, 306, 313, 459, 315, 277, 363, 308, 425,
	322, 0, 452, 516, 453, 575, 578, 576, 577, 355,
	318, 319, 389, 323, 333, 377, 424, 361, 382, 275,
	415, 390, 337, 502, 529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 556, 555, 554, 553, 552, 551, 550, 0,
	0, 499, 402, 287, 252, 283, 284, 291, 596, 593,
	406, 597, 0, 257, 479, 331, 0, 372, 305, 544,
	545, 208, 209, 210, 211, 212, 213, 214, 215, 253,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 229, 230, 231, 232, 547, 223, 224, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 0, 0, 0, 254, 248, 249, 250, 251,
	0, 0, 0, 431, 432, 433, 455, 417, 478, 594,
	0, 0, 0, 0, 0, 0, 0, 528, 540, 574,
	0, 583, 584, 586, 588, 587, 0, 600, 469, 470,
	580, 360, 0, 484, 517, 506, 589, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 330, 521, 503, 513, 504, 489, 490, 491, 498,
	310, 492, 493, 494, 465, 495, 466, 496, 497, 0,
	520, 471, 391, 344, 538, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 0, 0,
	273, 199, 467, 585, 468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 396, 413, 274,
	387, 426, 279, 394, 269, 359, 383, 0, 0, 265,
	411, 393, 341, 320, 321, 264, 0, 378, 298, 312,
	295, 357, 0, 410, 438, 294, 429, 0, 421, 267,
	0, 420, 356, 407, 412, 342, 336, 266, 409, 340,
	335, 324, 302, 454, 325, 326, 316, 368, 334, 369,
	317, 346, 345, 347, 0, 0, 0, 0, 0, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 0, 0, 582, 0, 423, 0,
	0, 0, 0, 0, 0, 395, 0, 0, 327, 0,
	0, 0, 439, 0, 381, 362, 602, 0, 0, 379,
	332, 408, 370, 414, 397, 422, 375, 371, 258, 398,
	297, 343, 270, 272, 686, 299, 301, 303, 304, 352,
	353, 365, 386, 399, 400, 401, 296, 280, 380, 281,
	314, 282, 259, 288, 286, 289, 388, 290, 261, 366,
	405, 0, 309, 376, 339, 262, 338, 367, 404, 403,
	271, 430, 436, 437, 525, 0, 442, 603, 604, 605,
	451, 456, 457, 458, 460, 461, 462, 463, 526, 543,
	510, 480, 444, 534, 477, 481, 482, 546, 0, 0,
	0, 435, 328, 329, 0, 307, 255, 256, 599, 293,
	358, 548, 581, 473, 0, 535, 474, 483, 285, 507,
	519, 518, 354, 434, 0, 530, 533, 464, 598, 0,
	527, 542, 601, 541, 595, 364, 0, 385, 539, 486,
	0, 531, 505, 0, 532, 501, 536, 0, 475, 0,
	392, 416, 428, 445, 448, 476, 561, 562, 563, 260,
	447, 565, 566, 567, 568, 569, 570, 571, 564, 419,
	508, 485, 511, 427, 488, 487, 0, 0, 522, 443,
	523, 524, 348, 349, 350, 351, 311, 549, 278, 446,
	374, 0, 509, 0, 0, 0, 0, 0, 0, 0,
	0, 514, 515, 512, 606, 0, 572, 573, 0, 0,
	440, 441, 306, 313, 459, 315, 277, 363, 308, 425,
	322, 0, 452, 516, 453, 575, 578, 576, 577, 355,
	318, 319, 389, 323, 333, 377, 424, 361, 382, 275,
	415, 390, 337, 502, 529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 556, 555, 554, 553, 552, 551, 550, 0,
	0, 499, 402, 287, 252, 283, 284, 291, 596, 593,
	406, 597, 0, 257, 479, 331, 0, 372, 305, 544,
	545, 208, 209, 210, 211, 212, 213, 214, 215, 253,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 229, 230, 231, 232, 547, 223, 224, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 0, 0, 0, 254, 248, 249, 250, 251,
	0, 0, 0, 431, 432, 433, 455, 417, 478, 594,
	0, 0, 0, 0, 0, 0, 0, 528, 540, 574,
	0, 583, 584, 586, 588, 587, 0, 600, 469, 470,
	580, 360, 0, 484, 517, 506, 589, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 330, 521, 503, 513, 504, 489, 490, 491, 498,
	310, 492, 493, 494, 465, 495, 466, 496, 497, 0,
	520, 471, 391, 344, 538, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 0, 0,
	273, 199, 467, 585, 468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 396, 413, 274,
	387, 426, 279, 394, 269, 359, 383, 0, 0, 265,
	411, 393, 341, 320, 321, 264, 0, 378, 298, 312,
	295, 357, 0, 410, 438, 294, 429, 0, 421, 267,
	0, 420, 356, 407, 412, 342, 336, 266, 409, 340,
	335, 324, 302, 454, 325, 326, 316, 368, 334, 369,
	317, 346, 345, 347, 0, 0, 0, 0, 0, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 0, 0, 582, 0, 423, 0,
	0, 0, 0, 0, 0, 395, 0, 0, 327, 0,
	0, 0, 439, 0, 381, 362, 602, 0, 0, 379,
	332, 408, 370, 414, 397, 422, 645, 371, 258, 398,
	297, 343, 270, 272, 292, 299, 301, 303, 304, 352,
	353, 365, 386, 399, 400, 401, 296, 280, 380, 281,
	314, 282, 259, 288, 286, 289, 388, 290, 261, 366,
	405, 0, 309, 376, 339, 262, 338, 367, 404, 403,
	271, 430, 436, 437, 525, 0, 442, 603, 604, 605,
	451, 456, 457, 458, 460, 461, 462, 463, 526, 543,
	510, 480, 444, 534, 477, 481, 482, 546, 0, 0,
	0, 435, 328, 329, 0, 307, 255, 256, 599, 293,
	358, 548, 581, 473, 0, 535, 474, 483, 285, 507,
	519, 518, 354, 434, 0, 530, 533, 464, 598, 0,
	527, 542, 601, 541, 595, 364, 0, 385, 539, 486,
	0, 531, 505, 0, 532, 501, 536, 0, 475, 0,
	392, 416, 428, 445, 448, 476, 561, 562, 563, 260,
	447, 565, 566, 567, 568, 569, 570, 646, 564, 419,
	508, 485, 511, 427, 488, 487, 0, 0, 522, 443,
	523, 524, 348, 349, 350, 351, 311, 549, 278, 446,
	374, 0, 509, 0, 0, 0, 0, 0, 0, 0,
	0, 514, 515, 512, 606, 0, 572, 573, 0, 0,
	440, 441, 306, 313, 459, 315, 277, 363, 308, 425,
	322, 0, 452, 516, 453, 575, 578, 576, 577, 355,
	318, 319, 389, 323, 333, 377, 424, 361, 382, 275,
	415, 390, 337, 502, 529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 556, 555, 554, 553, 552, 551, 550, 0,
	0, 499, 402, 287, 252, 283, 284, 291, 596, 593,
	406, 597, 0, 257, 479, 331, 0, 372, 305, 544,
	545, 208, 209, 210, 211, 212, 213, 214, 215, 253,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 229, 230, 231, 232, 547, 223, 224, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 0, 0, 0, 254, 248, 249, 250, 251,
	0, 0, 0, 431, 432, 433, 455, 417, 478, 594,
	0, 0, 0, 1842, 0, 0, 0, 528, 540, 574,
	176, 583, 584, 586, 588, 587, 0, 600, 469, 470,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3274, 0, 0, 0, 0, 0, 1844, 0,
	0, 1842, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1844, 0, 0, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1819,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1819, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1835, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1835, 0, 0, 0, 0, 0,
	0, 0, 1842, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1823, 1844, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1829, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1842, 0, 0, 1817, 1851, 0,
	0, 1818, 1820, 1822, 1823, 1824, 1825, 1826, 1830, 1831,
	1832, 1834, 1837, 1838, 1839, 1829, 0, 0, 1819, 0,
	0, 0, 1827, 1836, 1828, 0, 0, 0, 0, 1844,
	0, 0, 0, 0, 0, 1817, 1851, 0, 0, 1818,
	1820, 1822, 0, 1824, 1825, 1826, 1830, 1831, 1832, 1834,
	1837, 1838, 1839, 0, 0, 0, 1843, 0, 0, 0,
	1827, 1836, 1828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 665, 664, 671, 661, 0, 0,
	1819, 3401, 0, 0, 0, 1835, 668, 669, 0, 670,
	674, 0, 0, 656, 1843, 0, 0, 0, 0, 0,
	1840, 0, 0, 679, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1816, 0, 0,
	0, 0, 0, 0, 1815, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1840, 0,
	0, 0, 0, 0, 0, 0, 683, 1835, 1833, 685,
	0, 0, 0, 0, 684, 1816, 0, 1821, 0, 0,
	0, 0, 1815, 0, 0, 1823, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1829, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1833, 0, 0, 0,
	0, 0, 0, 0, 0, 1821, 1817, 1851, 0, 0,
	1818, 1820, 1822, 0, 1824, 1825, 1826, 1830, 1831, 1832,
	1834, 1837, 1838, 1839, 0, 0, 0, 0, 0, 0,
	0, 1827, 1836, 1828, 0, 0, 0, 1823, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1829, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1843, 0, 0, 1817, 1851,
	0, 0, 1818, 1820, 1822, 140, 1824, 1825, 1826, 1830,
	1831, 1832, 1834, 1837, 1838, 1839, 0, 0, 0, 0,
	0, 0, 0, 1827, 1836, 1828, 0, 0, 0, 0,
	657, 659, 658, 0, 0, 0, 0, 0, 0, 1840,
	663, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 667, 0, 0, 0, 1816, 1843, 0, 682,
	0, 0, 0, 1815, 0, 0, 660, 0, 0, 0,
	651, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1833, 0, 0,
	0, 0, 0, 0, 0, 0, 1821, 0, 0, 0,
	0, 1840, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1816, 0,
	0, 0, 0, 0, 0, 1815, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1833,
	0, 0, 0, 0, 0, 0, 0, 0, 1821, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 662, 666, 672, 0, 673,
	675, 0, 0, 676, 677, 678, 0, 0, 680, 681,
}

var yyPact = [...]int{
	298, -1000, -1000, -1000, -330, 13632, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42468,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	42468, -325, 41868, 41868, -1000, -1000, 2394, -1000, 40668, 15452,
	42468, 430, 424, 42468, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 793, -1000, 44868, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 737, 45801, 44268, 10606, -244, -1000, 1198, -70,
	2312, 941, 959, 1031, 1031, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4747, 881,
	41268, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 235, 570, 881, 20262, 53, 51, 1198,
	405, -136, -135, -137, 2995, -1000, 1108, 3679, 169, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10606, 10606, 13632, -358, 13632, 10606, 42468, 42468, -1000, -1000,
	-1000, -1000, -325, 40668, 737, 45801, 10606, 2312, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -135, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -136, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -137, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 51, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	4493, -1000, 1438, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2774, 1427, 2309,
	631, 42468, -1000, 111, 631, -1000, -1000, -1000, 1198, 3231,
	-1000, 42468, 42468, 139, 1676, -1000, 433, 385, 391, 237,
	1426, -1000, -1000, -1000, -1000, -1000, -1000, 550, 3158, -1000,
	42468, 42468, 2800, 42468, -1000, 2217, 579, 4904, 3006, 1195,
	851, 2813, -1000, -1000, 2773, -1000, 260, 565, 286, 749,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 264, -1000, 3072,
	-1000, -1000, 243, -1000, -1000, 234, -1000, -1000, -1000, 34,
	-1000, -1000, -1000, -1000, -1000, -1000, -75, -1000, -1000, 1022,
	2066, 10606, 1747, -1000, 3821, -1000, -1000, -1000, -1000, 6373,
	12418, 12418, 12418, 12418, -1000, -1000, 2645, 10606, 2772, 2771,
	2768, 2766, -1000, -1000, -1000, -1000, -1000, -1000, 1418, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1828, -1000,
	-1000, -1000, 13022, -1000, 2759, 2758, 2757, 2747, 2746, 2743,
	2742, 2733, 2732, 2729, 2728, 2725, 2721, 2720, 2521, 14842,
	2716, 2308, 2305, 2715, 2710, 2705, 2303, 2521, 2521, 2704,
	2703, 2700, 2699, 2698, 2697, 2696, 2695, 2693, 2692, 2691,
	2686, 2685, 2684, 2682, 2672, 2666, 2665, 2664, 2663, 2661,
	2660, 2659, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1202, -1000, 2656, 3172, 2576,
	-1000, 3047, 3037, 3033, 3031, -292, 2655, 2057, -1000, -1000,
	86, -1000, -100, -1000, -1000, 934, -1000, 925, -1000, 729,
	42468, 42468, 168, 759, 729, 729, 729, 729, 729, 783,
	729, 3092, 792, 791, 790, 789, 729, -92, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1670, 1667, 2859, 868, -1000,
	-1000, -1000, -1000, 1314, 42468, -1000, 2586, 1602, 1602, 3091,
	601, 585, 569, 1602, 467, -1000, 1652, 1652, 1652, 1652,
	1602, 469, 667, 3095, 3095, 50, 1652, 13, 1602, 1602,
	13, 1602, 1602, 1672, 185, -298, -1000, -1000, -1000, -1000,
	1652, 1652, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3067,
	3063, 737, 737, 42468, 171, 42468, 737, 737, 737, 742,
	-12, 43668, 43068, 2217, 576, 571, 1320, 1740, -1000, 1545,
	42468, 42468, 1545, 1545, 23267, 22667, -1000, 42468, -1000, 3172,
	2576, 2510, 1459, 2507, 2576, -143, -144, -145, 737, 737,
	737, 737, 737, 213, 737, 737, 737, 737, 737, 42468,
	42468, 40068, 737, 737, 737, 8789, 8789, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 13632, 1905, 1900, 167,
	-46, -323, 233, -1000, -1000, 42468, 2933, 217, -1000, -1000,
	-1000, 2533, -1000, 2582, 2582, 2582, 2582, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2582, 2582, 2585, 2654,
	-1000, -1000, 2581, 2581, 2581, 2533, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2583, 2583, 2584, 2584, 2583, 42468, 10606, 42468, 2966,
	360, 2653, -1000, 42468, 2301, 359, 3172, 2955, 3095, 3131,
	-1000, -1000, 1396, 2055, 2300, -1000, 237, -1000, 355, 237,
	1554, -1000, 1033, -1000, -1000, -1000, -1000, -1000, 42468, -75,
	351, -1000, -1000, 2271, 2652, -1000, 555, 1097, 1294, -1000,
	194, 4692, 34667, 2217, 34667, 42468, -1000, -1000, -1000, -1000,
	-1000, -1000, 28, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 276, -1000, 10606, 10606,
	10606, 10606, 10606, -1000, 696, 11814, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 12418, 12418, 12418, 12418, 12418, 12418, 12418,
	12418, 12418, 12418, 12418, 12418, 2644, 1725, 12418, 12418, 12418,
	12418, 1459, 2924, 1318, 271, -1000, -1000, -1000, -1000, -1000,
	1615, 2066, 10606, 10606, 10606, 10606, 42468, -1000, -1000, 3467,
	10606, 10606, 3739, 10606, 3029, 10606, 10606, 10606, 2505, 5159,
	42468, 10606, -1000, 2499, 2498, -1000, -1000, 1875, 10606, -1000,
	-1000, 10606, -1000, -1000, 10606, 12418, 10606, -1000, -1000, -1000,
	209, 3029, 3029, 3029, 1685, 10606, 10606, 3029, 3029, 3029,
	1629, 3029, 3029, 3029, 3029, 3029, 3029, 3029, 3029, 2496,
	2487, 2486, 10002, 3095, -244, -1000, 8185, 2955, 3095, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -294,
	2651, 42468, 2299, 2298, -342, -35, 939, 903, 932, -1000,
	42468, 1741, 3023, -1000, 2648, 42468, 729, 729, 729, -1000,
	42468, 34667, 42468, 42468, 2217, 42468, 42468, 42468, 729, 729,
	729, 729, 42468, -1000, 2962, 34667, 2883, 742, -1000, 42468,
	1314, 3021, 42468, 3140, 12418, 12418, -1000, 39468, 1652, 1602,
	1602, -1000, -1000, 42468, -1000, -1000, -1000, 1652, 42468, 1652,
	1652, 3140, 1652, -1000, -1000, -1000, 1602, 1602, -1000, -1000,
	10606, -1000, -1000, 1652, 1652, -1000, -1000, 3140, 42468, 26,
	3140, 3140, 35, -1000, -1000, -1000, 1602, 42468, 42468, 729,
	42468, -1000, 42468, 42468, -1000, -1000, 42468, 42468, 3792, 42468,
	38868, 3062, -1000, 34667, 42468, 42468, 32267, -1000, 1252, -1000,
	-22, -1000, -43, -12, 1545, -12, 1545, -1000, 553, 567,
	21467, 505, 34667, 5763, -1000, -1000, 1545, 1545, 5763, 5763,
	1495, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1309, -1000,
	203, 3095, -1000, -1000, -1000, -1000, -1000, 2053, 2051, 2047,
	42468, 42468, 34667, 2217, 42468, 737, 42468, 42468, 42468, 42468,
	42468, -1000, 2647, 1392, -1000, 3005, 42468, 42468, 42468, 1210,
	-1000, -1000, 18452, 1368, 1210, -1000, 1722, -1000, 10606, 13632,
	-277, 10606, 13632, 13632, 10606, 13632, -1000, 10606, 211, -1000,
	-1000, -1000, -1000, 2044, -1000, 2041, -1000, -1000, -1000, -1000,
	-1000, 2292, 2292, -1000, 2034, -1000, -1000, -1000, -1000, 2032,
	-1000, -1000, 2027, -1000, -1000, -1000, 2477, 1022, -1000, 2287,
	2812, -245, -1000, 19662, 42468, 42468, -360, -361, -1000, -245,
	-1000, 19057, 42468, 3095, -1000, -255, 2955, 10606, 42468, -1000,
	3087, -1000, -1000, 237, -1000, 397, 348, -1000, -1000, -1000,
	-1000, -1000, -1000, 1363, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1304, -1000, 42468, -1000, -1000, 194, 34667,
	36467, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 226, -1000,
	-1000, 177, -1000, 774, 179, 1547, -1000, -1000, 154, 182,
	148, 830, 2066, -1000, 1753, 1753, 1767, -1000, 692, -1000,
	-1000, -1000, -1000, 2645, -1000, -1000, -1000, 1931, 2569, -1000,
	1613, 1613, 1421, 1421, 1421, 1421, 1421, 1633, 1633, -1000,
	-1000, -1000, 6373, 2644, 12418, 12418, 12418, 12418, 690, 690,
	3754, 3709, -1000, 10606, 1689, -1000, 10606, 2293, 1324, 2054,
	1308, 1361, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2476, 2473, 2206, 3157, 2472, 10606, -1000, -1000,
	1543, 1525, 1523, -1000, 2016, 9398, -1000, -1000, -1000, 2469,
	1360, 2468, -1000, -1000, -1000, 2464, 1519, 1065, 2462, 2722,
	2461, 1300, 10606, 10606, 10606, 10606, 2460, 1512, 1508, 10606,
	10606, 10606, 10606, 2458, 10606, 10606, 10606, 10606, 10606, 10606,
	10606, 10606, 83, 83, 83, 1296, 1293, -1000, -1000, 1502,
	-1000, 2066, -1000, -1000, 2955, -1000, 2643, 2023, 1285, -1000,
	-1000, -320, 2233, -1000, -1000, 908, 921, 889, 3086, 3001,
	42468, 1068, 2616, 42468, 42468, 42468, 199, -1000, 1193, -1000,
	179, -83, 435, 1055, 2799, 3146, -160, 42468, 42468, 42468,
	42468, 3019, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	38268, -1000, 2615, 1501, -1000, -1000, 10606, -1000, -1000, 2796,
	42468, 42468, 3140, 3140, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1652, 3140, 3140, 1173, 1602, 1652, -1000, -1000, 1652,
	-1000, -1000, 1652, -1000, -1000, 1352, -1000, 42468, -1000, -1000,
	-1000, 3014, 2586, 1269, -1000, -1000, -1000, 3130, 1451, 703,
	703, 923, 756, 3129, 17252, -1000, 1582, 1011, 772, 2913,
	254, -1000, 1582, -188, 679, 1582, 1582, 1582, 1582, 1582,
	1582, 1582, 534, 524, 1582, 1582, 1582, 1582, 1582, 1582,
	1582, 1582, 1582, 1582, 1582, 954, 1582, 1582, 1582, 1582,
	1582, -1000, 1582, 2614, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 598, 191, 3061, 284, 283, 1193, 3052, 295, 3016,
	1152, -1000, -1000, -1000, -1000, 25667, 25667, 20867, 25667, -1000,
	176, -12, 5, -1000, -1000, 1252, 5763, 1252, 5763, -1000,
	-1000, 771, -1000, -1000, 1055, -1000, 42468, 42468, -1000, -1000,
	2608, 1666, -1000, -1000, 14842, -1000, 5763, 5763, -1000, -1000,
	26267, 42468, -1000, -77, -1000, -52, 2955, -1000, -1000, -1000,
	1247, -1000, -1000, 1251, 1055, 2811, 42468, 1247, 1247, 1247,
	-1000, -1000, 16652, 42468, 42468, -1000, -1000, -1000, 3140, 8789,
	-1000, 32267, -1000, -1000, 37667, -1000, 37067, 3140, 1675, -1000,
	13632, 1878, 164, -1000, 223, -324, 161, 1788, 160, 2066,
	-1000, -1000, 2456, 2448, 1500, -1000, 1499, 2446, 1491, 1465,
	-1000, -2, -1000, 2941, 1076, -1000, 2607, -1000, 1461, 2874,
	-1000, 1234, -1000, 1664, 1460, -1000, 2275, 2274, 1076, 1445,
	2838, 1234, 2955, 2265, -1000, 1229, -1000, 1954, 1351, 138,
	-1000, -1000, -1000, 42468, 2271, 1443, 36467, 1118, -1000, 747,
	1350, 1347, -1000, 34667, 225, 34667, -1000, 34667, -1000, -1000,
	336, -1000, 42468, 2946, -1000, -1000, -1000, 2233, 1661, -345,
	42468, -1000, -1000, -1000, -1000, -1000, 1442, -1000, 690, 690,
	3754, 3669, -1000, 12418, -1000, 12418, 2892, 1632, -1000, 10606,
	1858, 4401, 10606, 4401, 1453, 24467, 42468, -1000, -1000, 10606,
	10606, -1000, 2888, -1000, -1000, -1000, -1000, 10606, 10606, 2129,
	-1000, 42468, -1000, -1000, -1000, -1000, 24467, -1000, 12418, -1000,
	10606, 1201, 1201, 2878, 1424, 83, 83, 83, 2868, 2855,
	2734, 1416, 83, 2726, 2711, 2679, 2649, 2640, 2610, 2475,
	2416, -1000, 2600, -1000, -1000, 1830, 11210, 8185, -1000, -1000,
	259, 1223, 2021, 2264, 121, -1000, 1660, -1000, -1000, -1000,
	907, 335, -1000, 219, 2438, 1217, -1000, -1000, 42468, -1000,
	-1000, -1000, 16652, 2586, 2599, 2586, 81, 1582, 587, 34667,
	564, -1000, 42468, 1814, 1659, 2809, 727, 2928, 42468, 2594,
	371, 2593, 2592, 3013, 413, 4579, 42468, 1150, -1000, 1337,
	3679, -1000, 42468, 2066, -1000, 2217, -1000, 1602, -1000, -1000,
	3140, -1000, -1000, 10606, 10606, 3140, 1602, 1602, 1652, 42468,
	-1000, 413, 4579, 3010, 4075, 462, 2514, -1000, 42468, -1000,
	-1000, -1000, 715, -1000, 892, 729, 42468, 1784, 892, 1783,
	2591, -1000, -1000, 42468, 42468, 42468, 42468, -1000, -1000, 42468,
	-1000, 42468, 42468, 42468, 42468, 42468, 35867, -1000, 42468, 42468,
	-1000, 42468, 1778, 42468, 1777, 2979, -1000, 1582, 1582, 844,
	-1000, -1000, 547, -1000, 35867, 2019, 2017, 2010, 2009, 2263,
	2259, 2258, 1582, 1582, 2007, 2255, 35267, 2254, 1050, 1998,
	1996, 1989, 1993, 2252, 832, -1000, 2244, 1990, 1988, 1961,
	42468, 2590, 2182, -1000, -1000, 81, 1582, 281, 42468, 1647,
	587, 434, 1949, 22067, 42468, 32267, 32267, 32267, 32267, -1000,
	2829, 2828, -1000, 2849, 2825, 2857, 42468, 32267, 2586, -1000,
	35267, -1000, -1000, -1000, 1459, 1415, 3034, 902, 10606, -1000,
	-1000, -37, -66, -1000, -1000, -1000, 34667, 2243, 505, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3083, 42468, 42468, 642,
	2437, 1211, -1000, -1000, -1000, 4579, 2582, 2582, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2582, 2582, 2585,
	-1000, -1000, 2581, 2581, 2581, 2533, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2583, 2583, 2584, 2584,
	2583, -1000, -1000, 3138, -1000, 1205, -1000, -1000, 1336, -1000,
	3138, 1731, -332, 13632, 1683, 1571, -1000, 10606, 13632, 10606,
	-279, 267, -281, -1000, -1000, -1000, 2239, -1000, -1000, -1000,
	1960, -1000, 1953, 100, 123, 1776, -245, 8185, 389, 42468,
	-245, 42468, 8185, -1000, 42468, -363, -1000, 369, -245, 3083,
	-2, 10606, 2906, -1000, -1000, 42468, 1948, -1000, -1000, -1000,
	3142, 34667, 2217, 1516, 34067, -1000, 239, -1000, 224, 537,
	2238, -1000, 787, 117, 2234, 2233, -1000, -1000, -1000, -1000,
	12418, -1000, -1000, -1000, -1000, 2066, 10606, 2435, -1000, 905,
	905, 1991, 2434, 2432, -1000, 2582, 2582, -1000, 2533, 2581,
	2533, 905, 905, 2427, -1000, 2000, 2273, -1000, 2267, 2262,
	10606, -1000, 2424, 3606, 1302, -102, -218, 83, 83, -1000,
	-1000, -1000, -1000, 83, 83, 83, 83, -1000, 83, 83,
	83, 83, 83, 83, 83, 83, 645, -133, -306, -139,
	-314, -1000, 2423, 1192, -1000, -1000, -1000, -1000, -1000, 3739,
	1184, -1000, -1000, 2233, 2223, -1000, -1000, -1000, 42468, 2219,
	2216, 1068, 4579, 2422, 3008, 16052, 2986, 1959, -1000, -1000,
	-1000, 33467, 529, -1000, -1000, -1000, 595, 316, 1946, 482,
	-1000, 42468, 295, 2889, 1646, 2212, 42468, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2928, -1000, 848, 339, 31067, 14242,
	-1000, 363, 16052, 16052, 363, 366, 1626, -1000, 631, 1059,
	106, 32267, 42468, -1000, 31667, 2421, -1000, 1055, 3140, -1000,
	2066, 2066, -1000, 3140, 3140, 1602, -1000, 366, -1000, 363,
	-1000, 1379, 17852, 456, 454, 388, -1000, 543, -1000, -1000,
	623, 2902, 4579, -1000, 42468, -1000, 42468, -1000, 42468, 42468,
	729, 10606, 2902, 42468, 744, -1000, -1000, 1002, 330, 313,
	678, 678, 1171, -1000, 3002, -1000, -1000, 1122, -1000, -1000,
	-1000, -1000, 42468, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	24467, 24467, 3045, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2207, 2205, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 42468, 1414, -1000,
	1643, 1959, 33467, 1642, 1545, 2202, 529, 1814, 1640, -1000,
	2200, -1000, 1077, 42468, 42468, -1000, 1132, -1000, 1630, 2792,
	2807, 2792, -1000, -1000, -1000, -1000, 2827, -1000, 2783, -1000,
	-1000, 1132, -1000, -1000, -1000, -1000, -1000, 902, -1000, 3076,
	892, 892, 892, 2415, -1000, -1000, -1000, 1118, 2413, -1000,
	-1000, -1000, 3167, -1000, -1000, -1000, -1000, -1000, -1000, 16652,
	2927, 3133, 3128, 32867, 3133, -1000, -332, 1607, -1000, 1801,
	158, 1739, 42468, -1000, -1000, -1000, 2409, 2408, -257, 119,
	3127, 3125, 948, -1000, 2406, 1106, -245, -1000, -1000, 1076,
	-1000, -1000, -1000, 2196, -245, -1000, 1076, -1000, 100, -1000,
	-1000, 2985, -1000, -1000, 2217, -1000, 207, -1000, -1000, -1000,
	-1000, -1000, -1000, 165, -1000, 42468, -1000, 1104, 116, -1000,
	2066, -1000, -1000, -1000, -1000, -1000, 4401, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10606, -1000,
	-1000, -1000, 2256, -1000, -1000, 10606, 2399, 2195, 2398, 2194,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3172, -1000, 3124, 1394, 2397, 2392,
	1375, 2388, 2381, -1000, 10606, 2380, 3739, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 797, 363, 2378, 1103, -1000, -1000,
	-1000, -1000, 363, -1000, 2188, 178, -1000, -1000, -1000, 2184,
	2183, 1935, -1000, -1000, 1943, 1365, 192, -1000, -1000, -1000,
	-1000, -1000, -1000, 1949, 1936, 1620, -350, -1000, 2567, -1000,
	1582, 1582, 1582, 42468, 1369, -1000, 1582, 1582, 2374, -1000,
	2371, 2366, -175, 554, 1609, 1604, -1000, 1928, 25667, 32267,
	31667, 1114, -1000, 1329, -1000, -1000, -1000, -1000, -1000, 3140,
	554, -1000, 449, 1926, 12418, 2554, 12418, 2553, 464, 2552,
	1364, -1000, 42468, -1000, -1000, 42468, 382, 2548, -1000, 2547,
	2795, 438, 2546, 2544, 42468, 2151, -1000, 2902, 42468, 689,
	2919, -1000, -1000, -1000, 301, -1000, -1000, 475, -1000, 42468,
	-1000, 42468, -1000, 1467, -1000, 24467, -1000, -1000, 1358, -1000,
	2182, 2170, -1000, 178, 2169, 5763, -1000, -1000, 2889, 2168,
	-1000, 42468, 1077, 1077, 3172, 42468, 8185, -1000, -1000, 10606,
	2543, -1000, 10606, -1000, -1000, -1000, -1000, -1000, 2542, 2923,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1584, -1000, 10606,
	10606, -1000, -1000, 717, 13632, -285, 265, -1000, -1000, -1000,
	-259, 2165, -1000, -1000, 3122, 2159, 2068, 42468, -1000, -1000,
	1076, -1000, 1076, -257, -1000, -1000, 1055, -1000, -1000, 977,
	536, -1000, 2331, 2134, -1000, 2109, 83, -1000, 83, -1000,
	204, 10606, -1000, 2147, -1000, -1000, -1000, 2145, -1000, -1000,
	2062, -1000, 2328, 4579, -180, -175, 16052, -180, -1000, -1000,
	334, -1000, -1000, 289, -1000, -1000, 1901, 551, -1000, -1000,
	-1000, 1612, 1818, 2093, 29267, 24467, 25067, 2142, -1000, -1000,
	31067, 1584, 1584, 45467, 276, 45728, -1000, 2540, 966, 1569,
	-1000, 1923, -1000, 1922, -1000, 3140, 1114, 105, -1000, -1000,
	1507, -1000, 966, 2514, 3118, -1000, 3275, 42468, 2769, 42468,
	2539, 1611, 12418, -1000, 623, 2670, -1000, -1000, 382, -1000,
	-1000, 1812, 12418, -1000, -1000, 2140, 25067, 784, 1599, 1596,
	782, 2537, -1000, 479, 3166, -1000, -1000, -1000, 842, 2536,
	-1000, 1773, 1772, -1000, 42468, -1000, 29267, 29267, 710, 710,
	29267, 29267, 2534, 678, -1000, -1000, 12418, -1000, -1000, 1582,
	-1000, -1000, -1000, 1582, 1464, -1000, -1000, -1000, -1000, -1000,
	-1000, 1936, -1000, -1000, 3095, -1000, -1000, 2066, 42468, 2066,
	30467, -1000, 3116, 3115, -1000, 2066, 1022, -1000, -332, 42468,
	42468, -269, 1910, -1000, 2136, 126, -1000, -1000, 1036, -259,
	-271, 35, 24467, 1592, -1000, -1000, -1000, -1000, -1000, 2325,
	-1000, 926, -1000, -1000, -1000, 1022, 2278, 2276, -1000, -1000,
	-154, -1000, -1000, 368, -1000, -1000, -1000, 516, 2123, -1000,
	-1000, 288, -1000, -1000, 2120, -1000, -1000, 114, -1000, 1591,
	1325, -1000, 2533, 10606, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 618, -1000, 363, 45666, -1000, 1011, -1000, 977,
	618, 28067, 608, 278, -1000, 1896, -1000, -1000, 3172, -1000,
	545, -1000, 461, -1000, 1321, -1000, 1317, 29867, 1889, 1807,
	-1000, 45505, 743, -1000, -1000, 3754, -1000, -1000, -1000, -1000,
	-1000, -1000, 2113, 2105, -1000, -1000, -1000, -1000, -1000, 1882,
	2532, 7, 3042, 2097, -1000, -1000, 2529, 1316, 1290, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1271, 1255,
	29267, -1000, -1000, 3754, 1880, 24467, 1582, -1000, -1000, 1240,
	1237, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2525, -1000,
	-1000, 3112, -269, -1000, 2096, 94, 107, -1000, 2095, -1000,
	-1000, 858, -247, 77, 76, 68, -1000, -1000, -1000, 10606,
	-1000, -1000, 42468, 477, -1000, -1000, -1000, 162, -1000, -1000,
	-1000, -1000, 2093, 2080, -1000, 29267, 3002, 2025, 442, 3111,
	-1000, 45728, -1000, 1582, -1000, 442, 1207, -1000, 1582, 1582,
	-1000, 411, -1000, 1562, -1000, 1877, -1000, 3095, -1000, 393,
	-1000, 444, -1000, -1000, -1000, 1188, -1000, -1000, -1000, 45505,
	451, -1000, 558, 2523, -1000, -1000, 2272, 10606, 2521, 1582,
	2139, -149, 29267, 2794, 2793, 2724, 2713, 1187, -1000, -1000,
	24467, -1000, -1000, 28667, 42468, 2068, -1000, -1000, 741, 112,
	107, -1000, 3106, 109, 3103, 3102, 1015, 1749, -1000, 73,
	71, 65, -1000, -1000, -1000, -1000, 499, -1000, 236, -1000,
	-1000, -1000, 325, -1000, -1000, 3002, -1000, 3101, 462, -1000,
	24467, -1000, -1000, 28067, 1584, 1584, -1000, -1000, 1874, -1000,
	-1000, -1000, -1000, 1863, -1000, -1000, -1000, 1185, -1000, 42468,
	812, 7581, -1000, 1944, -1000, 42468, -1000, 2806, -1000, 216,
	1182, 325, 710, 325, 710, 325, 710, 325, 710, 230,
	-1000, -1000, -1000, 1181, -1000, -1000, 2516, 1843, 119, 113,
	3098, -1000, 2068, 3097, 2068, 2068, -1000, 88, 858, -1000,
	-1000, -1000, 2074, -1000, -1000, -1000, -1000, 1582, 1582, 2072,
	2070, 328, -1000, -1000, -1000, 27467, 456, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 451, 45728, -1000, 7581, 1180, -1000,
	2066, -1000, 678, -1000, -1000, 2804, 2803, 3154, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42468, 3036,
	23867, 96, -1000, -1000, -1000, 2069, -1000, 2068, -1000, -1000,
	1527, -1000, -300, 1841, 1836, -1000, -1000, 42468, -1000, 42468,
	449, -1000, 45728, 1146, -1000, 7581, -1000, -1000, 3165, -1000,
	3160, 807, 807, 325, 325, 325, 325, -1000, -1000, 42468,
	-1000, 1066, -1000, -1000, -1000, 1199, -1000, -1000, -1000, -1000,
	2063, -1000, -1000, 1867, -1000, -1000, -1000, 1047, 2514, -1000,
	-1000, -1000, -1000, -1000, 1855, 485, -1000, 996, -1000, 1470,
	-1000, 26867, 42468, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	42468, 6977, -1000, 1069, -1000, -1000, 2066, 42468, -1000,
}

var yyPgo = [...]int{
	0, 169, 3192, 249, 174, 3731, 101, 245, 226, 215,
	244, 3730, 3728, 3725, 2962, 2954, 3724, 3722, 3720, 3719,
	3718, 3716, 3715, 3714, 3713, 3711, 3708, 3707, 3706, 3704,
	3703, 3702, 3701, 3700, 3699, 3698, 3697, 3696, 3691, 3690,
	3687, 3686, 3685, 3684, 3681, 3680, 243, 3679, 3678, 3677,
	3674, 3671, 3670, 3669, 3668, 3667, 3666, 3665, 3663, 3662,
	3661, 3660, 3659, 3658, 3657, 3654, 3653, 3652, 3651, 3649,
	3648, 3647, 3646, 3645, 3644, 3643, 3642, 3639, 3638, 213,
	3637, 2952, 3636, 3634, 3633, 3629, 3628, 3627, 3626, 228,
	3625, 3624, 3623, 3622, 3619, 3617, 3616, 3615, 3614, 3613,
	3612, 232, 3611, 3610, 3609, 3597, 235, 3593, 230, 3592,
	172, 137, 3591, 3590, 3589, 3588, 3587, 3585, 238, 184,
	74, 3583, 47, 3582, 3581, 217, 3580, 148, 3575, 145,
	3574, 3573, 3572, 3570, 3567, 3565, 3562, 3561, 3560, 3555,
	3554, 3552, 3550, 3548, 3546, 3545, 3544, 3543, 92, 3542,
	254, 3541, 77, 3540, 3538, 128, 57, 127, 247, 2273,
	248, 253, 187, 177, 98, 3537, 2958, 3536, 219, 224,
	170, 29, 3533, 136, 3532, 255, 49, 34, 233, 158,
	63, 163, 125, 3531, 214, 111, 110, 3530, 3528, 140,
	225, 180, 3527, 107, 3526, 3525, 3524, 3523, 3521, 194,
	188, 3518, 3514, 150, 3513, 3512, 138, 3511, 79, 121,
	166, 119, 3509, 1031, 122, 135, 120, 96, 3506, 146,
	3505, 3504, 3500, 3498, 181, 3497, 3496, 139, 80, 3495,
	3487, 3486, 71, 3485, 78, 3484, 48, 3482, 66, 3481,
	3480, 3478, 3477, 3476, 3475, 3474, 3473, 3472, 3470, 3468,
	3467, 52, 3466, 3465, 7, 16, 14, 3464, 27, 3462,
	161, 3461, 3460, 3453, 3450, 3449, 97, 89, 3448, 93,
	156, 3447, 8, 26, 72, 3446, 3445, 220, 130, 104,
	147, 3444, 306, 3442, 3440, 3439, 160, 3437, 577, 3436,
	3435, 3431, 3430, 3429, 3428, 36, 3427, 216, 42, 3425,
	129, 131, 3424, 41, 70, 192, 203, 3423, 3409, 3408,
	600, 200, 94, 38, 0, 3407, 164, 3404, 3403, 3402,
	261, 3401, 236, 202, 157, 356, 257, 201, 3400, 3399,
	76, 3398, 162, 39, 62, 133, 73, 20, 218, 3397,
	886, 9, 186, 3395, 206, 3393, 178, 17, 179, 149,
	3390, 3389, 32, 251, 3388, 3387, 3386, 126, 3385, 3382,
	288, 75, 3381, 3380, 3379, 3378, 50, 3376, 37, 12,
	3375, 99, 3373, 241, 3372, 182, 134, 185, 176, 153,
	221, 237, 82, 83, 3371, 1708, 154, 100, 15, 3370,
	222, 3369, 210, 123, 3368, 85, 3367, 240, 256, 208,
	3364, 183, 10, 45, 35, 28, 44, 11, 171, 212,
	3363, 3361, 22, 55, 3360, 56, 3359, 19, 3357, 3356,
	67, 5, 3355, 3354, 18, 21, 3353, 33, 207, 165,
	124, 95, 68, 3352, 3351, 46, 155, 3345, 144, 152,
	151, 3342, 81, 3336, 3335, 3331, 849, 3330, 246, 3329,
	3328, 3325, 3324, 3322, 3320, 3319, 3318, 3317, 3316, 103,
	43, 3315, 3313, 3312, 3311, 84, 142, 3307, 3306, 3305,
	3304, 31, 132, 3303, 13, 3302, 25, 23, 30, 3301,
	102, 3300, 3, 196, 3299, 3297, 4, 3296, 3295, 1,
	2, 3293, 3292, 118, 3291, 91, 24, 159, 109, 3290,
	3289, 87, 209, 143, 3286, 3285, 106, 239, 199, 3283,
	58, 227, 252, 3281, 211, 3277, 3276, 3275, 3273, 3270,
	3269, 1091, 3268, 3267, 231, 69, 90, 116, 3266, 3265,
	3264, 88, 168, 113, 114, 65, 86, 3260, 112, 205,
	3258, 191, 3255, 3253, 3251, 108, 3249, 3245, 3243, 3236,
	190, 3227, 3226, 189, 223, 3225, 3224, 305, 3212, 3209,
	3205, 3198, 3197, 3196, 3195, 3190, 3188, 3186, 242, 277,
	3184,
}

//line mysql_sql.y:11348
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObejectInfo {
	v, _ := st.union.(tree.ObejectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 563, 566, 566, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 116, 116, 145, 542, 542, 115, 548,
	548, 548, 549, 549, 112, 134, 133, 136, 136, 135,
	135, 132, 132, 128, 131, 131, 130, 130, 129, 124,
	126, 126, 125, 127, 127, 113, 101, 114, 492, 492,
	491, 491, 490, 490, 443, 443, 489, 489, 489, 488,
	488, 488, 487, 487, 486, 486, 485, 485, 483, 483,
	484, 482, 481, 481, 481, 479, 479, 479, 475, 475,
	477, 476, 476, 478, 470, 470, 473, 473, 471, 471,
	471, 471, 474, 469, 469, 469, 468, 468, 100, 100,
	100, 387, 387, 99, 99, 401, 401, 401, 401, 401,
	399, 399, 399, 399, 399, 399, 398, 398, 397, 397,
	402, 402, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 90, 90, 90, 90, 90, 95, 95, 95,
	554, 554, 553, 553, 555, 555, 555, 555, 556, 556,
	93, 93, 93, 94, 396, 396, 396, 91, 92, 92,
	386, 386, 391, 391, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 395, 395, 395,
	393, 393, 392, 392, 394, 394, 84, 84, 84, 87,
	86, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	85, 85, 85, 85, 85, 85, 80, 80, 80, 80,
	80, 79, 79, 81, 81, 383, 383, 382, 96, 96,
	97, 551, 551, 550, 552, 552, 552, 552, 98, 104,
	104, 104, 104, 104, 104, 104, 103, 103, 106, 106,
	105, 107, 89, 89, 89, 89, 89, 89, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 517, 517, 517, 519, 519, 318, 319, 567, 321,
	317, 317, 317, 513, 513, 514, 515, 516, 516, 516,
	102, 11, 11, 11, 11, 11, 11, 11, 11, 13,
	78, 83, 83, 259, 259, 264, 264, 265, 265, 265,
	270, 270, 271, 271, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 246, 246, 246, 241,
	241, 241, 241, 242, 242, 243, 243, 244, 244, 244,
	244, 245, 245, 311, 311, 266, 266, 266, 268, 268,
	267, 263, 261, 261, 261, 261, 261, 261, 261, 262,
	262, 262, 262, 269, 269, 76, 82, 82, 82, 530,
	530, 77, 541, 541, 446, 446, 332, 332, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 451, 452, 328, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 53, 56, 52,
	52, 52, 372, 372, 51, 568, 568, 306, 306, 64,
	63, 55, 65, 66, 67, 68, 69, 70, 50, 62,
	62, 62, 62, 62, 62, 62, 62, 73, 464, 464,
	570, 570, 570, 71, 72, 445, 445, 445, 61, 60,
	59, 58, 57, 57, 49, 49, 48, 48, 54, 140,
	141, 141, 325, 325, 325, 327, 327, 323, 569, 569,
	415, 415, 326, 326, 47, 47, 47, 47, 74, 324,
	324, 305, 322, 322, 322, 12, 12, 10, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 25, 26, 28, 380, 380, 377, 27,
	19, 18, 18, 22, 21, 17, 17, 20, 23, 24,
	24, 9, 9, 9, 9, 14, 14, 15, 163, 163,
	214, 214, 525, 525, 521, 521, 522, 522, 522, 523,
	523, 524, 524, 108, 458, 458, 458, 458, 458, 458,
	8, 185, 185, 457, 457, 457, 457, 457, 457, 384,
	384, 384, 502, 502, 502, 503, 184, 184, 179, 179,
	459, 459, 349, 504, 504, 467, 467, 466, 466, 465,
	465, 182, 182, 183, 183, 166, 166, 119, 119, 472,
	472, 472, 472, 480, 480, 442, 442, 251, 251, 298,
	298, 299, 299, 156, 156, 157, 157, 157, 157, 157,
	157, 557, 557, 558, 559, 560, 560, 561, 561, 561,
	562, 562, 562, 562, 562, 510, 510, 512, 512, 511,
	181, 181, 177, 177, 178, 178, 178, 176, 176, 175,
	174, 174, 173, 171, 171, 171, 172, 172, 172, 189,
	189, 159, 159, 159, 158, 158, 158, 158, 158, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 160, 160, 518, 518, 518, 447, 447, 447, 454,
	454, 279, 279, 280, 280, 278, 278, 161, 161, 162,
	162, 162, 162, 277, 277, 276, 164, 164, 170, 169,
	169, 165, 165, 165, 165, 287, 287, 286, 286, 286,
	286, 111, 117, 117, 118, 188, 188, 285, 284, 284,
	284, 187, 187, 186, 186, 180, 180, 168, 168, 168,
	168, 283, 167, 281, 547, 547, 546, 546, 545, 543,
	543, 543, 544, 544, 544, 544, 494, 494, 494, 494,
	494, 312, 312, 312, 316, 316, 315, 315, 315, 315,
	315, 320, 7, 7, 7, 7, 7, 7, 7, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 38, 198, 199, 39, 200, 200, 201, 201,
	202, 202, 203, 204, 205, 205, 205, 205, 37, 190,
	190, 191, 191, 192, 192, 193, 194, 194, 194, 197,
	195, 196, 196, 565, 565, 564, 36, 36, 29, 149,
	149, 150, 150, 150, 152, 152, 247, 247, 247, 151,
	151, 153, 153, 153, 526, 529, 527, 527, 531, 531,
	531, 532, 532, 532, 532, 533, 533, 30, 137, 142,
	536, 536, 536, 535, 535, 537, 537, 538, 538, 302,
	302, 303, 303, 147, 148, 148, 144, 139, 155, 155,
	155, 155, 155, 138, 143, 146, 528, 534, 534, 534,
	381, 381, 378, 379, 379, 376, 375, 375, 375, 540,
	540, 539, 539, 539, 313, 313, 31, 371, 371, 373,
	374, 374, 374, 365, 365, 365, 365, 35, 369, 369,
	370, 370, 370, 370, 370, 370, 370, 366, 366, 368,
	368, 364, 364, 364, 364, 364, 364, 364, 34, 154,
	154, 363, 363, 360, 360, 358, 358, 359, 359, 357,
	357, 357, 361, 361, 42, 75, 43, 44, 45, 41,
	362, 362, 33, 33, 33, 33, 33, 33, 33, 33,
	121, 120, 120, 120, 120, 120, 123, 123, 301, 301,
	300, 300, 122, 248, 248, 40, 226, 226, 434, 434,
	429, 429, 429, 429, 429, 449, 449, 449, 430, 430,
	430, 431, 431, 431, 433, 433, 433, 432, 432, 432,
	432, 432, 448, 448, 450, 450, 450, 403, 403, 404,
	404, 404, 407, 407, 421, 421, 422, 422, 420, 420,
	427, 427, 426, 426, 425, 425, 424, 424, 423, 423,
	423, 423, 418, 418, 417, 417, 405, 405, 405, 405,
	405, 406, 406, 406, 416, 416, 419, 419, 275, 275,
	274, 274, 234, 234, 235, 235, 273, 273, 232, 232,
	233, 233, 233, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 500, 500,
	501, 237, 237, 249, 249, 249, 249, 249, 249, 236,
	236, 238, 238, 215, 215, 213, 213, 213, 213, 206,
	206, 207, 207, 208, 208, 208, 212, 212, 211, 211,
	211, 211, 209, 209, 210, 210, 210, 210, 210, 210,
	389, 389, 497, 497, 498, 498, 493, 493, 493, 496,
	496, 496, 496, 496, 496, 496, 499, 499, 499, 495,
	495, 216, 296, 296, 296, 314, 314, 314, 314, 295,
	295, 295, 231, 231, 230, 230, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 388, 388,
	329, 329, 330, 330, 258, 257, 257, 257, 257, 257,
	255, 256, 254, 254, 254, 254, 254, 253, 253, 252,
	252, 252, 367, 367, 250, 250, 240, 240, 240, 239,
	239, 239, 428, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	293, 293, 293, 294, 294, 294, 294, 294, 294, 294,
	294, 339, 339, 345, 345, 509, 509, 508, 217, 217,
	217, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	227, 227, 227, 412, 412, 412, 412, 413, 413, 413,
	413, 414, 414, 414, 410, 410, 411, 411, 350, 351,
	351, 455, 455, 456, 456, 408, 408, 409, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 463, 463,
	463, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 520, 520, 520,
	505, 505, 505, 506, 506, 506, 506, 506, 506, 506,
	506, 506, 506, 506, 506, 507, 507, 507, 507, 507,
	507, 507, 507, 507, 507, 507, 507, 507, 507, 507,
	507, 507, 291, 291, 291, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	352, 352, 353, 353, 460, 460, 460, 460, 460, 460,
	461, 461, 462, 462, 462, 462, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 337, 288, 288, 288, 354,
	346, 346, 347, 347, 348, 348, 340, 340, 340, 340,
	340, 340, 341, 341, 343, 343, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 342, 342, 344, 344,
	356, 356, 356, 355, 355, 355, 355, 355, 355, 355,
	229, 229, 229, 229, 334, 334, 334, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 219,
	219, 219, 219, 223, 223, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 224,
	224, 224, 224, 224, 222, 222, 222, 222, 222, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 109, 110, 110,
	221, 297, 297, 435, 435, 438, 438, 436, 436, 437,
	439, 439, 439, 440, 440, 440, 441, 441, 441, 444,
	444, 304, 304, 304, 310, 310, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 6, 1, 2, 4, 0,
	1, 1, 0, 1, 5, 2, 2, 6, 9, 6,
	9, 4, 7, 8, 0, 1, 1, 2, 4, 6,
	1, 2, 4, 0, 2, 10, 10, 2, 0, 2,
	1, 3, 3, 3, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 2, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 2, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 1, 1, 2, 2, 1, 1, 1,
	3, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 4,
	1, 3, 3, 1, 2, 2, 2, 1, 2, 2,
	3, 4, 4, 6, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 2,
	2, 0, 1, 4, 2, 4, 1, 5, 3, 2,
	1, 2, 2, 4, 4, 5, 2, 1, 3, 4,
	4, 1, 2, 9, 7, 1, 3, 3, 1, 1,
	3, 1, 3, 2, 1, 2, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 2, 4,
	3, 3, 1, 1, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 5, 3, 4, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 1, 1, 1, 1,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 10,
	7, 4, 4, 1, 3, 1, 6, 3, 3, 3,
	1, 1, 1, 3, 2, 4, 5, 5, 6, 5,
	5, 3, 2, 2, 1, 3, 4, 3, 7, 5,
	8, 2, 2, 1, 3, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 2, 1, 3,
	2, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	6, 3, 3, 1, 1, 7, 7, 8, 8, 0,
	4, 7, 0, 3, 0, 2, 0, 1, 1, 1,
	1, 4, 2, 2, 3, 3, 4, 5, 3, 4,
	4, 2, 2, 2, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 2,
	5, 5, 0, 2, 7, 0, 1, 0, 1, 5,
	5, 3, 3, 2, 4, 4, 4, 4, 4, 1,
	1, 1, 3, 3, 1, 1, 1, 6, 0, 1,
	1, 1, 1, 5, 5, 0, 1, 1, 3, 3,
	3, 4, 6, 7, 4, 4, 7, 8, 3, 3,
	3, 4, 0, 2, 2, 0, 2, 2, 1, 1,
	1, 1, 0, 1, 4, 4, 5, 4, 3, 1,
	3, 1, 1, 3, 5, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 4, 1, 3, 1, 4,
	6, 6, 4, 4, 4, 4, 4, 3, 6, 3,
	5, 1, 1, 2, 2, 11, 8, 9, 1, 3,
	2, 4, 0, 2, 0, 1, 1, 1, 1, 0,
	1, 0, 1, 4, 2, 1, 5, 4, 4, 2,
	5, 1, 3, 2, 1, 5, 4, 4, 2, 0,
	5, 4, 0, 1, 3, 3, 1, 3, 1, 3,
	1, 3, 4, 0, 1, 0, 1, 1, 3, 1,
	1, 0, 4, 1, 3, 2, 1, 0, 8, 0,
	4, 7, 4, 0, 2, 0, 2, 0, 2, 0,
	4, 1, 3, 1, 1, 6, 4, 5, 7, 4,
	5, 0, 1, 3, 8, 0, 6, 0, 4, 6,
	1, 1, 1, 1, 1, 2, 3, 1, 3, 6,
	0, 3, 0, 1, 2, 4, 4, 0, 1, 3,
	1, 3, 3, 0, 1, 1, 0, 2, 2, 0,
	2, 3, 3, 3, 1, 3, 3, 3, 3, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 7, 7, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 2, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 3, 1, 1,
	1, 4, 4, 4, 3, 2, 2, 2, 3, 2,
	3, 4, 1, 3, 4, 0, 2, 1, 1, 2,
	2, 0, 1, 2, 4, 1, 3, 1, 3, 2,
	3, 1, 4, 3, 0, 1, 1, 2, 5, 2,
	2, 2, 0, 2, 3, 3, 0, 1, 3, 1,
	3, 0, 1, 2, 1, 1, 0, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 1, 7, 1, 3, 0, 1,
	1, 3, 1, 3, 0, 1, 1, 1, 14, 1,
	3, 0, 1, 1, 3, 1, 1, 2, 4, 1,
	1, 1, 1, 0, 1, 2, 9, 9, 7, 1,
	2, 3, 3, 3, 0, 4, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 4, 1, 1, 3, 4,
	3, 0, 1, 1, 1, 0, 2, 7, 8, 8,
	0, 3, 3, 0, 3, 0, 3, 0, 5, 1,
	3, 0, 3, 3, 0, 2, 9, 6, 0, 2,
	2, 3, 3, 4, 4, 4, 1, 0, 2, 2,
	1, 3, 2, 1, 3, 2, 1, 3, 2, 0,
	1, 3, 4, 3, 1, 1, 4, 1, 3, 1,
	1, 1, 1, 0, 1, 1, 1, 11, 0, 2,
	3, 3, 2, 2, 3, 1, 1, 1, 3, 3,
	4, 0, 2, 2, 2, 2, 2, 2, 6, 0,
	4, 1, 1, 0, 3, 0, 1, 1, 2, 4,
	4, 4, 0, 1, 8, 2, 4, 4, 4, 9,
	0, 2, 11, 9, 11, 8, 6, 9, 7, 10,
	2, 2, 9, 4, 5, 3, 0, 4, 1, 3,
	0, 3, 6, 0, 2, 10, 0, 2, 0, 2,
	0, 3, 2, 4, 3, 0, 2, 1, 0, 2,
	3, 0, 2, 3, 0, 2, 1, 0, 3, 2,
	4, 3, 0, 1, 0, 1, 1, 0, 6, 0,
	3, 5, 0, 4, 0, 3, 1, 3, 4, 5,
	0, 3, 1, 3, 2, 3, 1, 2, 0, 4,
	6, 5, 0, 2, 0, 2, 4, 5, 4, 5,
	1, 5, 6, 5, 0, 3, 0, 1, 1, 3,
	3, 3, 0, 4, 1, 3, 3, 3, 0, 1,
	1, 3, 2, 3, 3, 3, 4, 4, 3, 3,
	3, 3, 4, 4, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 5, 4, 1, 3,
	3, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 5, 7, 0,
	1, 1, 3, 1, 1, 1, 1, 1, 7, 9,
	7, 9, 2, 1, 7, 9, 7, 9, 8, 5,
	0, 1, 0, 1, 1, 1, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 3, 1, 3, 5, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 2, 1, 2, 2, 1,
	1, 2, 2, 2, 3, 3, 2, 2, 1, 5,
	6, 4, 1, 1, 1, 5, 4, 1, 1, 2,
	0, 1, 1, 2, 5, 0, 1, 1, 2, 2,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 2,
	2, 2, 0, 3, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 3,
	5, 2, 2, 2, 2, 1, 1, 2, 5, 6,
	8, 6, 6, 6, 1, 1, 1, 1, 1, 1,
	4, 4, 4, 7, 9, 7, 7, 7, 9, 7,
	7, 0, 2, 0, 1, 1, 2, 4, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 2, 2, 2,
	0, 1, 1, 1, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 5, 0, 1, 3, 0,
	1, 0, 2, 0, 2, 0, 1, 6, 8, 8,
	6, 6, 5, 5, 5, 6, 6, 6, 6, 5,
	6, 6, 6, 6, 6, 6, 6, 6, 1, 1,
	1, 4, 4, 6, 8, 6, 4, 5, 4, 4,
	4, 3, 4, 6, 6, 7, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 8, 4, 2, 3, 2, 4,
	2, 2, 4, 6, 2, 2, 4, 6, 4, 2,
	0, 1, 2, 3, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 3,
	0, 1, 1, 3, 1, 3, 3, 3, 3, 3,
	2, 1, 1, 1, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 1, 3, 4, 4, 5, 4,
	5, 3, 4, 5, 6, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 2, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 4, 4, 1, 2, 3, 5,
	1, 1, 3, 0, 1, 0, 3, 0, 3, 3,
	0, 3, 5, 0, 3, 5, 0, 1, 1, 0,
	1, 1, 2, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -563, -566, -2, -5, 612, -1, -4, -110, -84,
	-7, -112, -113, -8, -108, -9, -10, -12, -88, -103,
	-105, -107, -106, -46, -11, -102, -79, -80, -90, -96,
	-99, -100, -101, -114, -109, -111, -156, -115, -116, 602,
	-85, -86, -87, -32, -31, -30, -29, -137, -142, -145,
	608, 446, 14, 495, -14, -15, -510, -16, 258, -317,
	-318, -319, -321, -567, -47, -48, -49, -57, -58, -59,
	-60, -61, -71, -72, -73, -50, -51, -52, -55, -53,
	-64, -63, -65, -66, -67, -68, -69, -70, -54, -140,
	-141, -74, -56, -75, -77, -76, -82, -78, -83, -139,
	-144, -13, 233, -81, 76, -91, -92, -93, -94, -95,
	-97, -98, 370, 376, 433, 601, 61, -157, -159, 618,
	619, 158, 159, 161, 162, -33, -34, -35, -36, -37,
	-38, -40, -39, -41, -42, -43, -44, -45, 229, 16,
	538, -17, -20, -18, -21, -19, -27, -28, -26, -23,
	-25, -138, -24, -143, -22, -146, 253, 252, 38, 319,
	320, 321, 374, 251, 230, 15, 31, 42, 350, -158,
	82, 530, 531, 533, 231, -160, 13, 623, -6, -3,
	-2, -124, -128, -132, -135, -136, -133, -134, -4, -110,
	116, 243, 603, -314, 366, 604, 606, 605, 85, 93,
	-307, -309, 446, 258, 370, 376, 601, 619, 543, 544,
	545, 546, 547, 548, 549, 550, 552, 553, 554, 555,
	556, 557, 558, 568, 569, 559, 560, 561, 562, 563,
	564, 565, 566, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 498, 588, 589,
	590, 591, 526, 551, 587, 348, 349, 535, 270, 294,
	401, 300, 307, 158, 177, 171, 199, 191, 531, 166,
	274, 312, 275, 92, 161, 481, 106, 458, 430, 164,
	289, 291, 293, 527, 528, 360, 296, 525, 295, 297,
	299, 529, 276, 351, 187, 182, 288, 272, 180, 277,
	40, 278, 204, 279, 280, 540, 454, 347, 460, 304,
	52, 428, 181, 455, 292, 457, 208, 212, 472, 473,
	175, 176, 462, 475, 203, 206, 207, 250, 344, 345,
	43, 537, 262, 476, 210, 202, 198, 484, 308, 306,
	201, 174, 197, 273, 65, 214, 213, 215, 424, 425,
	426, 427, 281, 282, 364, 471, 194, 183, 352, 167,
	23, 479, 257, 459, 377, 283, 301, 309, 209, 211,
	264, 269, 539, 530, 432, 268, 305, 477, 179, 261,
	290, 256, 480, 168, 533, 379, 284, 162, 298, 474,
	483, 64, 392, 173, 165, 247, 159, 266, 271, 285,
	286, 287, 524, 311, 310, 302, 532, 195, 263, 200,
	185, 172, 196, 160, 265, 482, 393, 599, 350, 411,
	193, 190, 267, 240, 478, 461, 163, 415, 394, 188,
	313, 595, 596, 597, 365, 343, 314, 315, 186, 254,
	452, 453, 318, 421, 334, 395, 431, 402, 396, 221,
	222, 322, 464, 466, 205, 598, 323, 324, 325, 456,
	326, 327, 328, 329, 369, 56, 58, 94, 96, 620,
	621, 63, 29, 355, 358, 390, 397, 336, 600, 536,
	333, 337, 338, 359, 25, 413, 381, 417, 416, 48,
	49, 50, 53, 54, 55, 57, 59, 60, 51, 523,
	374, 387, 485, 45, 47, 384, 27, 361, 412, 434,
	332, 414, 445, 46, 443, 444, 465, 26, 363, 362,
	62, 44, 420, 422, 423, 316, 330, 372, 609, 486,
	367, 383, 386, 368, 335, 357, 388, 67, 66, 380,
	610, 375, 373, 331, 541, 542, 339, 567, 353, 429,
	520, 519, 518, 517, 516, 515, 514, 513, 319, 320,
	321, 398, 399, 400, 410, 403, 404, 405, 406, 407,
	408, 409, 448, 449, 611, 467, 469, 470, 468, 235,
	622, 354, 238, 613, 614, 95, 615, 617, 616, 28,
	-394, -392, -314, 531, 601, 376, 530, 533, 370, 350,
	619, 374, 258, 319, 320, 321, 446, -200, -314, 622,
	-166, 39, -213, -314, -166, -81, -15, -14, -158, -159,
	-213, 237, -322, 24, 428, -89, 429, 233, 82, 77,
	-314, -9, -101, -8, -108, -79, -156, 433, -320, -314,
	319, 319, -320, 237, -314, 268, 409, -446, 243, -398,
	-371, 269, -397, -373, -400, -374, 32, 229, 231, 230,
	265, 16, 374, 239, 14, 13, 375, 251, 25, 26,
	28, 15, 376, 378, 29, 379, 382, 383, 384, 42,
	387, 388, 258, 85, 93, 88, 276, -199, -314, -348,
	-340, 113, -343, -335, -336, -338, -489, -483, -333, 82,
	140, 141, 148, 114, -337, -428, 36, 116, 547, 551,
	587, 496, -289, -290, -291, -292, -293, -294, -314, -484,
	-482, 88, 97, 99, 103, 104, 102, 100, 152, 184,
	101, 89, 153, -159, 85, -505, 557, -308, 580, 588,
	589, 590, 591, 579, 61, -453, -462, 236, -460, 151,
	189, 254, 185, 14, 146, 421, 186, 554, 576, 498,
	558, 568, 583, 549, 550, 552, 544, 545, 546, 548,
	559, 561, 575, -463, 571, 581, 582, 567, 584, 585,
	586, 617, 87, 86, 574, 573, 560, 555, 556, 562,
	543, 553, 563, 564, 572, 577, 578, 358, 106, 359,
	360, 488, 351, 361, 243, 428, 70, 362, 363, 364,
	365, 366, 495, 367, 71, 368, 357, 258, 411, 369,
	188, 205, 500, 499, 501, 492, 489, 487, 490, 491,
	493, 494, 565, 566, 570, -117, -118, 593, -557, -282,
	-558, 6, 7, 8, 9, -559, 153, -548, 430, 539,
	88, 163, 160, -385, 163, 112, 168, 167, -385, 165,
	322, 264, -362, -149, 348, 411, 326, 94, 268, -365,
	-363, 527, -448, 316, 312, 288, 238, 109, -150, 248,
	247, 107, 488, 236, 385, 307, 56, 58, -521, -522,
	226, 227, 228, -512, 521, -511, -314, 360, 96, 27,
	237, 371, 264, 466, 464, 465, 467, 468, 469, 470,
	-62, -464, -445, 461, 460, -326, 453, 459, 451, 463,
	454, 349, 328, 327, 229, 613, 528, 522, -304, 395,
	431, 485, 486, 372, 432, 472, 474, 455, 106, 192,
	189, 238, 240, 237, 348, 488, 411, 94, 326, -521,
	160, 472, 474, 268, 409, 41, -391, 421, -390, -392,
	473, 484, 86, 87, 471, -304, 106, 452, 452, -557,
	-282, -157, -159, -111, -510, 529, 529, 529, 238, 348,
	411, 268, 239, 237, 524, 527, 240, 488, 236, 319,
	371, 264, 326, 94, 165, -447, -518, 32, -454, 223,
	224, 225, 33, 34, -1, 120, 623, -340, -340, -6,
	626, -6, -340, -314, -314, 155, -219, -223, -220, -222,
	-221, -225, -224, 189, 190, 151, 193, 195, 196, 197,
	198, 199, 200, 201, 202, 203, 206, 207, 204, 31,
	205, 254, 185, 186, 187, 188, 208, 171, 191, 536,
	216, 172, 217, 173, 218, 174, 219, 175, 176, 220,
	177, 180, 181, 182, 183, 179, 154, 82, 154, 88,
	-182, 260, -213, 154, 627, -182, -557, -175, -176, 11,
	-213, -295, -314, 430, 123, -89, 77, -89, 429, 77,
	-513, -514, -515, -517, 233, 429, 428, -106, 154, 276,
	17, -320, -320, 80, -213, -373, 268, -398, -371, 36,
	79, 155, 241, 155, 79, 82, 372, 348, 411, 373,
	488, 237, 385, 240, 268, 386, 348, 411, 237, 240,
	488, 268, 348, 237, 240, 411, 268, 386, 451, 452,
	240, 27, 377, 380, 381, 452, -468, 484, 155, 112,
	109, 110, 111, -340, 130, -355, 123, 124, 125, 126,
	127, 128, 129, 137, 136, 147, 140, 141, 142, 143,
	144, 145, 146, 138, 139, 133, 113, 131, 135, 132,
	115, -159, -340, -348, 61, -338, -338, -338, -338, -428,
	-345, -340, 82, 82, 82, 82, 154, 100, 88, -340,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, -461, 82, 82, -352, -353, 82, 82, -333,
	-295, 82, 88, 88, 82, 82, 82, 88, -353, -353,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, -176, 155, -175, 82, -175, -176, -160,
	-159, 32, 33, 32, 33, 32, 33, 32, 33, -560,
	610, 82, 97, 620, 221, 477, 538, 166, 167, 168,
	-360, 243, -198, -314, -200, 371, 240, 524, 240, -150,
	-360, -360, -360, -360, -360, 239, -360, 24, 237, 237,
	237, 237, -360, 495, 123, 123, 59, -523, 170, 155,
	-512, -181, 82, -325, 131, 135, -325, 24, 266, 266,
	266, -325, 306, -568, -569, 17, 133, -323, -569, -323,
	-323, -325, -570, 239, 462, 43, 267, 266, -177, -178,
	22, -177, 456, 452, -415, 457, 458, -327, -569, -326,
	-325, -325, -326, -325, -325, -325, 32, 237, 240, 488,
	326, 614, -568, -568, 31, 31, -446, -446, -213, -446,
	522, -305, -314, -446, -446, -446, -524, 242, -554, -553,
	475, -556, 477, 160, -392, 160, -392, -373, 268, 268,
	155, 123, 24, -393, 123, 134, -392, -392, -393, -393,
	-236, 41, -313, 151, -314, 88, -236, 41, -551, -550,
	-213, -176, -160, -159, 83, 83, 83, 532, 532, 532,
	-446, -446, -446, -446, -446, -448, -446, -446, -446, -446,
	-446, -320, -190, -314, -200, 243, -446, -446, -446, -161,
	-162, 142, -340, -314, -161, -3, -126, -125, 117, 118,
	120, 604, 366, 603, 607, 601, -392, 41, -441, 393,
	392, -435, -437, 82, -436, 82, -436, -436, -436, -436,
	-436, 82, 82, -438, 82, -438, -438, -435, -439, 82,
	-439, -440, 82, -440, -439, -314, -346, -348, -314, 39,
	-457, 61, -156, 82, 31, 82, -314, 88, -458, 61,
	-156, 82, 31, -176, -119, 39, -178, 21, 154, 97,
	88, -106, -89, 77, -106, 83, 155, -516, 103, 104,
	-519, 203, 195, -314, -104, 88, -7, -8, -9, -10,
	-46, -79, -156, -485, -483, 82, 32, 420, 79, 17,
	-399, 237, 488, 371, 264, 240, 348, -397, -380, -377,
	-375, -313, -373, -376, -375, -402, -295, 452, -120, 435,
	434, 318, -340, -340, -340, -340, -340, 102, 113, 343,
	103, 104, -335, -356, 32, 314, 315, -336, -336, -336,
	-336, -336, -336, -336, -336, -336, -336, -336, -336, -344,
	-354, -428, 82, 133, 131, 135, 132, 115, -338, -338,
	-336, -336, 83, 155, -509, -508, 117, -340, -340, -340,
	-340, -314, -506, -507, 502, 503, 504, 505, 506, 507,
	508, 509, 510, 511, 512, 362, 357, 363, 361, 351,
	369, 364, 365, 188, 519, 520, 513, 514, 515, 516,
	517, 518, -346, -346, -340, -506, -346, -288, 33, 32,
	-348, -348, -348, 83, -340, -520, 341, 340, 342, -179,
	-314, -346, 83, 83, 83, 97, -348, -348, -346, -336,
	-346, -507, -288, -288, -288, -288, 142, -348, -348, -288,
	-288, -288, -288, 142, -288, -288, -288, -288, -288, -288,
	-288, -288, 83, 83, 83, 142, -348, -177, -118, -466,
	-465, -340, 41, -119, -178, -561, 611, 82, -295, -549,
	88, 88, 624, 478, 479, 164, 167, 166, -314, 113,
	35, 82, -190, -360, -360, -360, -526, -314, -381, -378,
	-375, -314, -314, -371, -314, -314, -213, -360, -360, -360,
	-360, -213, -247, 53, 54, 55, -375, -151, 56, 57,
	-524, -511, 35, -180, -314, -278, 18, -338, -338, -375,
	268, -568, -325, -325, -306, -305, -327, -322, -327, -327,
	-278, -323, -325, -325, -340, -327, -323, -278, -314, 452,
	-278, -278, -415, -325, -324, -314, -324, -360, -305, -306,
	-306, -213, -213, -259, -264, -260, -265, 260, 234, 355,
	356, 232, 230, 11, 231, -272, 307, -361, 496, -242,
	-243, 77, 42, -245, 258, 397, 390, 270, 274, 92,
	275, 430, 276, 239, 278, 279, 280, 295, 297, 250,
	281, 282, 283, 421, 284, 159, 296, 285, 286, 287,
	373, -237, 6, 329, 41, 51, 52, 444, 443, 541,
	538, 271, -526, -526, 31, 31, -381, -314, -314, -169,
	-164, -168, -165, -170, -281, -283, -167, 82, -213, -159,
	-314, 155, 476, 478, 479, -554, -393, -554, -393, 32,
	420, -396, 420, 32, -371, -390, 472, 474, -386, 88,
	421, -376, -395, 79, 151, -465, -393, -393, -395, -395,
	150, 155, -552, 477, 478, 226, -177, 97, 97, 97,
	-215, -213, -526, -380, -371, -314, -446, -215, -215, -215,
	-314, -314, 82, 154, 36, -314, -314, -314, -277, 155,
	-276, 17, -315, -314, 35, 88, 154, -277, -127, -125,
	119, -340, -6, 603, -340, -6, -6, -340, -6, -340,
	-444, 394, 97, 97, -297, 88, -297, 97, 97, 97,
	83, 88, -384, 79, -459, -349, -504, 593, -184, 83,
	-179, -502, -503, -179, -183, -314, 627, 627, -459, -184,
	83, -502, -177, 594, -119, -174, -173, -340, -314, 24,
	-106, -89, -514, 154, 155, -180, -399, -379, -376, -401,
	142, -314, -387, 155, 538, 627, 86, 241, -540, -539,
	412, 83, 155, -469, 242, 495, 88, 624, 428, 221,
	222, 102, 343, 103, 104, -428, -348, -344, -338, -338,
	-336, -336, -342, 255, -342, 112, -340, -339, -508, 119,
	-340, 35, 155, 35, 155, 80, 154, 83, 83, 17,
	17, 83, -340, 83, 83, 83, 83, 17, 17, -340,
	83, 154, 83, 83, 83, 83, 80, 83, 155, 83,
	155, -348, -348, -340, -348, 83, 83, 83, -340, -340,
	-340, -348, 83, -340, -340, -340, -340, -340, -340, -340,
	-340, -409, 447, -409, -409, 155, 155, 155, 83, -119,
	82, 97, 155, 621, -301, -300, 88, 165, 168, 168,
	167, 24, 36, -199, -201, -202, -203, -204, -205, 133,
	156, 157, 82, -213, -213, -213, -529, 398, -541, 155,
	41, -539, 488, -147, 318, -364, 80, -154, 17, 538,
	-213, -213, -213, -213, -226, 35, 17, -163, -214, -314,
	82, 83, 155, -340, -372, 80, -314, -306, -278, -278,
	-327, -278, -278, 155, 23, -325, -327, -327, -323, 154,
	-305, -434, 35, -181, 155, 21, 260, -212, -311, -209,
	-211, 245, -330, -210, 248, -498, 246, 244, 107, 249,
	303, 108, 239, -311, -311, 245, -246, 241, 35, -311,
	-262, 239, 346, 303, 246, 21, 260, -261, 239, 108,
	-314, 245, 249, 246, 244, -310, 123, -304, 150, 241,
	43, 373, -310, 542, 260, -310, -310, -310, -310, -310,
	-310, -310, 277, 277, -310, -310, -310, -310, -310, -310,
	-310, -310, -310, -310, -310, 160, -310, -310, -310, -310,
	-310, -310, 82, 272, 273, -530, 398, 31, 354, 354,
	-541, 31, -155, 348, 31, -284, -285, -286, -287, 68,
	72, 74, 69, 70, 71, 75, 31, 155, -312, -316,
	35, -314, 88, -312, -159, -164, -169, -312, 82, -553,
	-555, 480, 477, 483, -395, -395, 241, 82, 123, -395,
	-395, 41, -313, -550, 484, 478, -119, 155, 79, -215,
	-191, -192, -193, -194, -219, -295, 190, 193, 195, 196,
	197, 198, 199, 200, 201, 202, 203, 206, 207, 204,
	205, 254, 185, 186, 187, 188, 208, 171, 191, 536,
	172, 173, 174, 175, 176, 177, 180, 181, 182, 183,
	179, -314, -200, -278, -162, -164, -314, 88, -314, 142,
	-278, 120, -6, 118, -131, -130, -129, 121, 601, 607,
	120, 120, 120, 83, 83, 83, 155, 83, 83, 83,
	155, 83, 155, -472, 457, 40, 155, 82, 83, 155,
	61, 155, 123, 83, 155, 88, 88, 83, 61, -119,
	88, 155, -171, 37, 38, 154, 430, -314, -483, 83,
	-401, 155, 241, 154, 154, -377, 376, -313, -379, 21,
	538, -295, 39, -301, 123, 624, -314, 83, -342, -342,
	112, -338, -335, 83, 120, -340, 118, -217, -219, 392,
	393, -340, -217, -218, -224, 151, 189, 254, 188, 187,
	185, 392, 393, -236, -314, -340, -340, 83, -340, -340,
	17, -314, -236, -336, -340, -176, -176, 83, 83, -408,
	-409, -408, -408, 83, 83, 83, 83, -408, 83, 83,
	83, 83, 83, 83, 83, 83, 82, 97, 99, 97,
	99, -465, -562, 63, 609, 62, 420, 102, 308, 155,
	97, 88, 625, 155, 123, 168, -542, 312, 348, 384,
	83, 155, -295, -191, -181, 82, -181, -532, 459, 400,
	410, -310, -332, -331, 350, 42, -451, 421, 406, 407,
	-378, 268, -314, -538, 95, 123, 79, 333, 337, 338,
	334, 335, 336, -358, -359, -357, -361, -526, 82, 82,
	-156, 35, 82, 82, 35, -429, 323, -219, -213, -163,
	-314, 17, 155, -525, 154, -1, -314, -371, -325, -278,
	-340, -340, -278, -325, -325, -327, -314, -429, -219, 35,
	-260, 234, 231, -405, 305, 306, -406, -419, 308, -421,
	82, -216, -295, -210, -497, -498, -360, -314, 108, -497,
	108, 82, -216, -295, -295, -263, -324, -295, -314, -314,
	-314, -314, -268, -267, -295, -270, 32, -271, -314, -314,
	-314, -314, 108, -314, 108, -241, 41, 48, 49, 50,
	-310, -310, 192, -244, 41, 420, 422, 423, -270, 97,
	97, 97, 97, 88, 88, 88, -310, -310, 97, 88,
	-316, 88, -499, 167, 45, 46, 97, 97, 97, 97,
	41, 88, -249, 41, 288, 292, 289, 290, 291, 88,
	97, 41, 97, 41, 97, 41, -314, 82, -500, -501,
	88, -532, -310, 354, -392, 123, -332, -537, 318, -148,
	92, 32, -185, 234, 231, -526, -383, -382, -295, -168,
	-168, -168, -168, 68, 68, 68, 73, 68, 73, 68,
	-286, -383, -170, -181, -316, 83, -547, -546, -545, -543,
	76, 242, 77, -346, 477, 481, 482, -379, -328, 88,
	-386, -189, 24, -213, -213, -450, 298, 299, 83, 155,
	-219, -280, 19, 154, -280, 116, -6, -127, -129, -340,
	-6, -340, 603, 366, 604, 88, 97, 97, -480, 441,
	436, 438, 108, -349, -467, -466, 61, -156, -179, -459,
	-503, -465, -314, 627, 61, -156, -459, -189, -472, -173,
	-172, 44, -314, 97, 17, -376, -371, 142, 142, -314,
	377, -387, 88, 399, 88, 237, 625, 88, -301, -335,
	-340, 83, -227, 176, 175, -227, 35, 83, 83, -436,
	-436, -435, -438, -435, -227, -227, 83, 83, 24, 83,
	83, 83, -340, 83, 83, 155, -455, 497, -456, 569,
	-408, -408, -408, -408, -408, -408, -408, -408, -408, -408,
	-408, -408, -408, -408, -351, -350, 260, 442, 616, 616,
	442, 616, 616, 83, 155, -506, 155, -300, 88, -314,
	88, 88, -203, -219, 83, 35, -206, -207, -208, -216,
	-209, -211, 35, -533, 92, -527, 88, -314, -534, 92,
	401, 153, 352, 41, 402, 403, 418, 347, 97, 97,
	408, -528, -314, -155, -536, 52, 123, 88, -213, -357,
	-304, 150, 279, 326, -275, -274, -314, 88, -206, -156,
	-206, -206, -156, -430, 325, 21, 97, 141, -182, 80,
	154, -164, -214, -314, 142, 83, -278, -278, -278, -325,
	-430, -156, -417, 309, 82, -415, 82, -415, 108, 334,
	-422, -420, 260, -266, 45, 47, -219, -495, -314, -493,
	-495, -314, -493, -493, -360, -340, -266, -216, 241, 31,
	231, -269, 331, 332, 337, -388, 304, 113, -388, 155,
	-171, 155, -314, -236, -236, 31, 88, 88, -215, 83,
	155, 123, -533, -527, 123, -393, 88, -534, -538, 123,
	88, 155, -185, -185, -278, 155, 123, -187, -186, 79,
	80, -188, 79, -186, 68, 68, -278, -545, -544, 24,
	-498, -498, -498, 83, 83, 15, -193, 41, -279, 20,
	21, 142, -279, 120, 118, 120, 120, -314, 83, 83,
	-442, 595, -476, -478, 436, 21, 21, 15, 242, 83,
	-459, 88, -459, -480, 45, 46, -371, -387, 421, -213,
	155, 625, -217, -340, 83, -340, 83, 88, 83, 88,
	-176, 21, 83, 155, 83, 83, 83, 155, 83, 83,
	-340, 83, -506, 235, -156, 83, 155, -156, 88, -531,
	412, 88, 88, 97, 41, 97, 153, 404, -452, -148,
	-535, 92, 123, 624, 82, -310, -310, -310, -314, 83,
	155, -310, -310, 83, 83, 83, -234, 538, -431, 259,
	97, 141, 97, 141, 97, -312, -164, -314, -278, -525,
	154, -278, -431, -407, 310, 97, -336, 82, -336, 82,
	-416, 307, 82, 83, 155, -314, -295, -231, -230, -228,
	102, 113, 41, 390, -229, 92, 150, 293, 296, 295,
	271, 294, -258, -329, 79, 396, 331, 332, -361, 595,
	526, 244, 107, 108, 378, -330, 82, 82, 80, 313,
	82, 82, -495, 83, -266, -295, 41, -269, 41, 344,
	304, -267, -314, 150, -236, 83, -501, 88, -531, 88,
	-395, -536, 88, -526, -176, -382, -465, -340, 82, -340,
	82, 68, 11, 19, -333, -340, -348, 243, -6, 604,
	366, -251, 596, 88, 21, 88, -474, 88, -383, -442,
	-122, -248, -304, 276, 83, 83, 83, -408, -408, -411,
	-410, -414, 442, 305, 450, -348, 88, 88, 83, 83,
	-195, -219, -152, 538, -234, -208, -152, 21, 538, 351,
	41, 97, 41, 405, 123, 103, 104, -302, -303, 88,
	-366, -368, -295, 82, -236, -238, -313, 151, 88, -274,
	-333, -333, -232, -156, 35, -233, -272, -361, -121, -120,
	-232, 82, -432, 159, 97, 141, 97, 97, -278, -278,
	-432, -421, 21, 83, -402, 83, -402, 82, 123, -336,
	-420, -423, 61, -228, 102, -336, 88, -238, -239, 41,
	292, 288, 123, 123, -240, 41, 272, 273, -250, 82,
	303, 15, 192, 82, 108, 108, -213, -366, -366, -496,
	333, 334, 335, 339, 337, 338, 336, -496, -366, -366,
	82, -389, -388, -336, -310, -310, 150, -535, -177, -180,
	-494, -314, 244, 21, 21, -314, -314, -298, 597, 97,
	88, 438, -251, -443, 598, -470, -415, -236, 123, 83,
	-413, 115, 404, 408, -334, -337, 97, 99, 184, 153,
	83, 83, 537, -153, 60, 484, 88, 399, 88, 351,
	88, 625, 155, 123, 83, 155, -435, -340, -403, 260,
	-156, 155, -272, -304, -122, -403, -235, -273, -314, 88,
	-449, 167, 324, 538, 97, 141, 97, -176, -433, 167,
	324, -406, 83, 83, 83, -402, 97, 83, -427, -424,
	82, -272, 262, 133, 88, 88, 97, 82, -460, 31,
	88, -367, 82, 83, 83, 83, 83, -366, 97, -236,
	-310, 83, 83, 155, 82, 21, -298, 88, -479, 441,
	-473, -471, 436, 437, 438, 439, 88, -412, -413, 408,
	-334, -337, 593, 448, 448, 448, -197, -314, 303, 421,
	-303, 88, -369, -368, -171, 83, -404, 312, 21, -272,
	-310, -404, 83, 155, -310, -310, 324, 97, 141, 97,
	-177, 324, -418, 311, 83, -427, -272, -426, -425, 310,
	263, 82, 83, -340, -352, -310, 83, -253, -252, 534,
	-366, -369, 80, -369, 80, -369, 80, -369, 80, 83,
	-236, -314, 244, -299, -314, -474, -481, 242, -477, -478,
	440, -471, 21, 438, 21, 21, -123, 155, 112, 449,
	449, 449, -196, 35, 443, 377, -370, 250, 344, 345,
	92, 538, 331, 332, -171, 21, -405, -236, -273, -333,
	-333, 97, 97, 83, 155, -314, 259, 82, -347, -341,
	-340, 259, 83, -314, -257, -255, -256, 79, 455, 301,
	302, 83, -496, -496, -496, -496, -258, 83, 155, -488,
	82, 97, -476, -475, -477, 21, -474, 21, -474, -474,
	445, -412, 88, -310, -310, 88, 88, 330, -295, 82,
	-417, -425, -424, -347, 83, 155, -388, -256, 79, -255,
	79, 16, 15, -369, -369, -369, -369, -314, -492, 31,
	83, -487, -486, -296, -482, -314, 441, 442, 88, -474,
	123, -565, -564, 615, 97, 97, -314, -402, -407, 83,
	-341, -254, 298, 299, 31, 167, -254, -491, -490, -489,
	83, 155, 154, 88, 88, 83, -421, 102, 41, 300,
	155, 123, -486, -314, -490, 41, -340, 154, -314,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 0,
	266, 267, 268, 862, 863, 864, 865, 866, 867, 868,
	0, 0, 0, 0, 621, 622, 0, 587, 0, 0,
	0, 0, 0, 0, 477, 478, 479, 480, 481, 482,
	483, 484, 485, 486, 487, 488, 489, 490, 491, 492,
	493, 494, 495, 496, 497, 498, 499, 500, 501, 502,
	503, 504, 505, 506, 361, 362, 363, 364, 365, 366,
	367, 368, 0, 291, 287, 212, 213, 214, 215, 216,
	298, 299, 454, 0, 0, 0, 0, 703, -2, 59,
	0, 280, 0, 271, 271, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, -2, 634,
	0, 588, 589, 590, 591, 592, 593, 594, 595, 596,
	597, 598, 599, 600, 601, 602, 350, 351, 352, 346,
	347, 349, 348, -2, 0, 634, 0, 0, 0, 711,
	0, 0, 0, 0, 0, 754, 776, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1265, 1266,
	1267, 1268, 2038, 2008, -2, 1782, 1759, 1933, 2067, 2068,
	2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078,
	2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088,
	2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098,
	2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
	2109, 2110, 2111, 2112, 2113, 1716, 1717, 1718, 1719, 1720,
	1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730,
	1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740,
	1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1760, 1761,
	1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771,
	1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
	1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
	1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832,
	1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842,
	1843, 1844, 1845, 1846, 1847, 1849, 1850, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873,
	1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883,
	1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893,
	1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903,
	1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913,
	1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923,
	1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1934,
	1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
	1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
	1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964,
	-2, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974,
	1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
	1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
	1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
	2005, 2006, 2007, 2009, 2010, 2011, 2012, 2013, 2014, 2015,
	2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, -2, -2,
	-2, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035,
	2036, 2037, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,
	2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
	0, 264, 262, 1729, 1759, 1782, 1836, 1847, 1848, 1882,
	1933, 1965, 2008, 2024, 2025, 2026, 2038, 0, 886, 0,
	681, 0, 686, 1215, 681, 292, 623, 624, 711, 737,
	585, 0, 328, 0, 1773, 332, 2015, 0, 0, 0,
	582, 322, 323, 324, 325, 326, 327, 0, 0, 861,
	0, 0, 318, 0, 286, 1838, 2037, 0, 0, 0,
	0, 0, 156, 997, 158, 999, 162, 169, 0, 0,
	174, 175, 178, 179, 180, 181, 182, 0, 186, 0,
	188, 191, 0, 193, 194, 0, 197, 198, 199, 0,
	209, 210, 211, 1000, 1001, 1002, -2, 87, 884, 1687,
	1574, 0, 1581, 1594, 1605, 1345, 1346, 1347, 1348, 0,
	0, 0, 0, 0, 1355, 1356, 0, 1383, 2071, 2112,
	2113, 0, 1364, 1365, 1366, 1367, 1368, 1369, 96, 108,
	109, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 0, 1635,
	1636, 1637, 1545, 1332, 1265, 0, 2080, 0, 2102, 2107,
	2108, 2109, 2110, 2101, 0, 0, 1530, 0, 1520, 0,
	0, -2, -2, 0, 0, 1907, -2, 2077, 2098, 2106,
	2081, 2082, 2105, 2073, 2074, 2075, 2068, 2069, 2070, 2072,
	2084, 2086, 2097, 0, 2093, 2103, 2104, 2013, 0, 0,
	0, 2054, 110, 111, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1541, -2, -2, 1544, -2, 1547, -2, -2, -2,
	-2, 1552, 1553, -2, 1555, -2, -2, -2, -2, -2,
	-2, -2, 1532, 1533, 1534, 1535, 1524, 1525, 1526, 1527,
	1528, 1529, -2, -2, -2, 737, 812, 0, 737, 0,
	712, 759, 762, 765, 768, 715, 0, 0, 60, 61,
	0, 281, 282, 270, 272, 0, 276, 0, 269, 1033,
	0, 0, 0, 0, 1033, 1033, 1033, 1033, 1033, 0,
	1033, 0, 0, 0, 0, 0, 1033, 0, 919, 1004,
	1005, 1006, 1031, 1032, 1103, 0, 0, 0, 639, 635,
	636, 637, 638, 725, 0, 727, 730, 562, 562, 509,
	0, 0, 0, 562, 0, 523, 515, 0, 0, 0,
	562, 0, 0, 732, 732, 0, 565, 572, 562, 562,
	-2, 562, 562, 562, 0, 0, 1045, 529, 530, 531,
	515, 515, 534, 535, 536, 546, 547, 573, 1711, 0,
	0, 454, 454, 0, 454, 0, 454, 454, 454, 641,
	1877, 1780, 1853, 1838, 2037, 0, 237, 1907, 242, 0,
	1781, 1800, 0, 0, 1818, 0, -2, 0, 308, 737,
	0, 0, 711, 0, 0, 0, 0, 0, 454, 454,
	454, 454, 454, 1102, 454, 454, 454, 454, 454, 0,
	0, 0, 454, 454, 454, 0, 0, 777, 778, 773,
	774, 775, 779, 780, 5, 6, 19, 0, 0, 0,
	0, 0, 0, 66, 65, 0, 1688, 1706, 1640, 1641,
	1642, 1693, 1644, 1697, 1697, 1697, 1697, 1673, 1674, 1675,
	1676, 1677, 1678, 1679, 1680, 1681, 1697, 1697, 0, 0,
	1686, 1664, 1695, 1695, 1695, 1693, 1690, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1700, 1700, 1703, 1703, 1700, 0, 1570, 0, 0,
	0, 0, 685, 0, 0, 0, 737, -2, 0, 0,
	586, 329, 1269, 0, 0, 333, 0, 334, 0, 0,
	0, 353, 0, 356, 341, 342, 343, 337, 0, 136,
	0, 320, 321, 0, 0, 288, 0, 0, 0, 455,
	0, 0, 0, 0, 0, 0, 166, 163, 170, 173,
	183, 190, 0, 202, 204, 207, 164, 171, 176, 177,
	184, 205, 165, 167, 168, 172, 206, 208, 185, 189,
	203, 187, 192, 195, 196, 201, 0, 137, 0, 0,
	0, 0, 0, 1580, 0, 0, 1613, 1614, 1615, 1616,
	1617, 1618, 1619, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, -2, 1574, 0, 0, 1351, 1352, 1353, 1354, 1357,
	0, 1384, 0, 0, 0, 0, 0, 1634, 1638, 0,
	1570, 1570, 0, 1570, 1566, 0, 0, 0, 0, 0,
	0, 1570, 1506, 0, 0, 1508, 1521, 0, 0, 1510,
	1511, 0, 1514, 1515, 1570, 0, 1570, 1519, 1502, 1503,
	0, 1566, 1566, 1566, 1566, 0, 0, 1566, 1566, 1566,
	1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 0,
	0, 0, 0, 732, 0, 738, 0, -2, 0, 756,
	758, 760, 761, 763, 764, 766, 767, 769, 770, 717,
	0, 0, 62, 0, 0, 0, 0, 274, 0, 279,
	0, 0, 0, 883, 0, 0, 1033, 1033, 1033, 920,
	0, 0, 0, 0, 0, 0, 0, 0, 1033, 1033,
	1033, 1033, 0, 1051, 0, 0, 0, 641, 640, 0,
	726, 0, 0, 785, 0, 0, 508, 0, 515, 562,
	562, 521, 522, 517, 516, 568, 569, 565, 0, 565,
	565, 785, 0, 540, 541, 542, 562, 562, 548, 733,
	0, 549, 550, 565, 0, 570, 571, 785, 0, 0,
	785, 785, 0, 558, 559, 560, 562, 0, 0, 1033,
	0, 578, 517, 517, 1712, 1713, 0, 0, 1042, 0,
	0, 0, 581, 0, 0, 0, 0, 642, 217, 220,
	0, 223, 0, 1877, 0, 1877, 0, 230, 0, 0,
	0, 0, 0, 0, 260, 261, 0, 0, 0, 0,
	251, 254, 1209, 1210, 994, 995, 255, 256, 300, 301,
	0, 732, 755, 757, 751, 752, 753, 0, 0, 0,
	0, 0, 0, 0, 0, 454, 0, 0, 0, 0,
	0, 617, 0, 899, 619, 0, 0, 0, 0, 793,
	787, 789, 856, 96, 793, 8, 83, 80, 0, 19,
	0, 0, 19, 19, 0, 19, 265, 0, 1709, 1707,
	1708, 1643, 1694, 0, 1669, 0, 1670, 1671, 1672, 1682,
	1683, 0, 0, 1665, 0, 1666, 1667, 1668, 1659, 0,
	1660, 1661, 0, 1662, 1663, 263, 0, 1571, 887, 0,
	659, 673, 654, 0, 662, 0, 1216, 0, 643, 673,
	645, 0, 662, 732, 709, 0, 687, 0, 0, 330,
	0, 338, 335, 0, 339, 0, 0, 355, 357, 358,
	359, 344, 345, 583, 316, 317, 309, 310, 311, 312,
	313, 314, 315, 319, 106, 0, 289, 290, 0, 0,
	0, 150, 151, 152, 153, 154, 155, 157, 141, 606,
	608, 986, 998, 0, 989, 0, 160, 200, 133, 0,
	0, 0, 1575, 1576, 1577, 1578, 1579, 1584, 0, 1586,
	1588, 1590, 1592, 0, 1610, -2, -2, 1333, 1334, 1335,
	1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1595,
	1608, 1609, 0, 0, 0, 0, 0, 0, 1606, 1606,
	1601, 0, 1349, 0, 1381, 1385, 0, 0, 0, 0,
	0, 97, 1565, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
	1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
	1500, 1501, 0, 0, 1574, 0, 0, 0, 1567, 1568,
	0, 0, 0, 1461, 0, 0, 1467, 1468, 1469, 0,
	668, 0, 1531, 1507, 1522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 811, 813, 0,
	677, 679, 680, 706, 687, 713, 0, 0, 0, 58,
	63, 0, 1070, 283, 284, 0, 0, 278, 0, 0,
	0, -2, 0, 0, 0, 0, 0, 934, 452, 980,
	0, 0, 0, 996, 1021, 1029, 0, 0, 0, 0,
	0, 1076, 921, 926, 927, 928, 922, 923, 929, 930,
	0, 728, 0, 0, 825, 507, 0, 563, 564, 512,
	1838, 517, 785, 785, 524, 518, 525, 567, 526, 527,
	528, 565, 785, 785, 734, 562, 565, 551, 566, 565,
	554, 555, 0, 561, 574, 579, 575, 0, 577, 532,
	533, 1078, 730, 371, 372, 373, 375, 0, 423, 423,
	423, 406, 423, 0, 0, 394, 1714, 0, 0, 0,
	0, 403, 1714, 0, 0, 1714, 1714, 1714, 1714, 1714,
	1714, 1714, 0, 0, 1714, 1714, 1714, 1714, 1714, 1714,
	1714, 1714, 1714, 1714, 1714, 0, 1714, 1714, 1714, 1714,
	1714, 1195, 1714, 0, 1043, 413, 414, 415, 416, 421,
	422, 0, 449, 0, 0, 0, 452, 0, 968, 798,
	0, 799, 800, 796, 827, 851, 851, 0, 851, 831,
	1215, 0, 0, 228, 229, 218, 0, 219, 0, 231,
	232, 0, 234, 235, 236, 243, 1780, 1853, 238, 240,
	0, 0, 244, 257, 258, 259, 0, 0, 249, 250,
	0, 0, 303, 304, 306, 0, 687, 1046, 1047, 1048,
	603, 1213, 604, 605, 609, 0, 0, 612, 613, 614,
	615, 616, 901, 0, 0, 973, 974, 975, 785, 0,
	794, 0, 790, 857, 0, 859, 0, 785, 0, 81,
	19, 0, 74, 71, 0, 0, 0, 0, 0, 1689,
	1639, 1710, 0, 0, 0, 1691, 0, 0, 0, 0,
	64, 689, 650, 0, 653, 670, 0, 674, 0, 0,
	666, 658, 663, 0, 0, 683, 0, 0, 644, 0,
	0, 649, 687, 0, 710, 739, 740, 743, 1270, 0,
	340, 336, 354, 0, 0, 0, 0, 144, 983, 0,
	145, 149, 139, 0, 0, 0, 988, 0, 985, 990,
	0, 159, 0, 0, 134, 135, 1061, 1070, 0, 0,
	0, 1585, 1587, 1589, 1591, 1593, 0, 1596, 1606, 1606,
	1602, 0, 1597, 0, 1599, 0, 1575, 0, 1386, 0,
	0, 0, 0, 0, 0, 0, 0, 1451, 1452, 0,
	0, 1456, 0, 1458, 1459, 1460, 1462, 0, 0, 0,
	1466, 0, 1505, 1523, 1509, 1512, 0, 1516, 0, 1518,
	0, 737, 737, 0, 0, 1425, 1425, 1425, 0, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 1370, 0, 1371, 1372, 0, 0, 0, 814, 707,
	0, 0, 0, 0, 0, 1068, 0, 285, 273, 275,
	0, 0, 1034, 0, 0, 889, 890, 892, 0, 895,
	896, 897, 901, 730, 0, 730, 941, 1714, 456, 0,
	0, 982, 0, 957, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 628, 632,
	23, 731, 0, 786, 510, 0, 511, 562, 519, 520,
	785, 543, 544, 0, 0, 785, 562, 562, 565, 0,
	576, 1080, 0, 0, 1042, 1146, 1114, 384, 0, 1226,
	1227, 424, 0, 1233, 1242, 1033, 1302, 0, 1242, 0,
	0, 1244, 1245, 0, 0, 0, 0, 407, 408, 0,
	393, 0, 0, 0, 0, 0, 0, 392, 0, 0,
	434, 0, 0, 0, 0, 0, 1715, 1714, 1714, 0,
	401, 402, 0, 405, 0, 0, 0, 0, 0, 0,
	0, 0, 1714, 1714, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1186, 0, 0, 0, 0,
	0, 0, 0, 1201, 1202, 941, 1714, 0, 0, 0,
	456, 955, 964, 0, 0, 0, 0, 0, 0, 818,
	0, 0, 817, 0, 0, 0, 0, 0, 730, 852,
	0, 854, 855, 829, -2, 0, 798, 834, 1570, 221,
	222, 0, 0, 227, 245, 247, 0, 0, 0, 246,
	248, 252, 253, 302, 305, 307, 749, 0, 0, 1104,
	0, 902, 903, 905, 906, 0, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1764,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 900, 620, 783, 788, 795, 858, 860, 97, 791,
	783, 0, 84, 19, 83, 75, 76, 0, 19, 0,
	0, 0, 0, 1699, 1698, 1684, 0, 1685, 1696, 1701,
	0, 1704, 0, 693, 0, 0, 673, 675, 0, 0,
	673, 0, 0, 682, 0, 0, 1217, 0, 673, 749,
	689, 0, 746, 744, 745, 0, 0, 584, 107, 360,
	0, 0, 0, 0, 0, 607, 0, 987, 141, 0,
	0, 161, 0, 0, 0, 1070, 1065, 1569, 1598, 1600,
	0, 1607, 1603, 1350, 1358, 1382, 0, 0, 1388, 1400,
	1400, 0, 0, 0, 1391, 1697, 1697, 1394, 1693, 1695,
	1693, 1400, 1400, 0, 98, 0, 0, 1457, 0, 0,
	0, 669, 0, 0, 0, 1421, 1423, 1425, 1425, 1432,
	1426, 1433, 1434, 1425, 1425, 1425, 1425, 1439, 1425, 1425,
	1425, 1425, 1425, 1425, 1425, 1425, 1419, 0, 0, 1628,
	1629, 678, 0, 0, 720, 721, 722, 723, 724, 0,
	0, 53, 54, 1070, 0, 277, 55, 56, 0, 0,
	0, 894, 0, 0, 0, 1219, 0, 945, 942, 943,
	944, 0, 977, 457, 458, 459, 460, 0, 0, 0,
	981, 0, 968, 950, 0, 0, 0, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, -2, 1037, 0, 0, 0, 1219,
	1056, 0, 1219, 1219, 0, 1088, 0, 1077, 681, 0,
	-2, 0, 0, 630, 0, 0, 826, 513, 785, 537,
	735, 736, 552, 785, 785, 562, 580, 1088, 1079, 0,
	374, 423, 0, 1134, 0, 0, 1140, 0, 1147, 377,
	0, 425, 0, 1232, 1259, 1243, 1259, 1303, 1259, 1259,
	1033, 0, 425, 0, 0, 395, 431, 0, 0, 0,
	0, 0, 391, 428, 743, 378, 380, 381, 382, 432,
	433, 435, 0, 437, 438, 397, 409, 410, 411, 412,
	0, 0, 0, 404, 417, 418, 419, 420, 379, 1163,
	1164, 1165, 1168, 1169, 1170, 1171, 0, 0, 1174, 1175,
	1176, 1177, 1178, 1256, 1257, 1258, 1179, 1180, 1181, 1182,
	1183, 1184, 1185, 1203, 1204, 1205, 1206, 1207, 1208, 1187,
	1188, 1189, 1190, 1191, 1192, 1193, 1194, 0, 0, 1198,
	0, 945, 0, 0, 0, 0, 977, 957, 0, 967,
	0, 969, 970, 0, 0, 651, 785, 295, 0, 821,
	815, 0, 804, 819, 820, 807, 0, 809, 0, 805,
	806, 785, 797, 828, 853, 830, 833, 835, 836, 842,
	0, 0, 0, 0, 224, 225, 226, 233, 0, 476,
	239, 705, 0, 1214, 610, 611, 1105, 1106, 618, 0,
	907, 781, 0, 0, 781, 79, 82, 0, 77, 0,
	0, 0, 0, 69, 67, 1692, 0, 0, 695, 121,
	0, 0, 0, 671, 0, 676, 673, 657, 667, 656,
	664, 665, 684, 0, 673, 648, 647, 708, 693, 741,
	742, 0, 1271, 331, 0, 984, 141, 146, 147, 148,
	142, 140, 991, 0, 993, 0, 1063, 0, 0, 1604,
	1387, 1359, 1389, 1401, 1402, 1390, 0, 1361, 1362, 1392,
	1393, 1395, 1396, 1397, 1398, 1399, 1363, 1453, 0, 1455,
	1463, 1464, 0, 1513, 1517, 0, 0, 0, 0, 0,
	1430, 1431, 1435, 1436, 1437, 1438, 1440, 1441, 1442, 1443,
	1444, 1445, 1446, 1447, 737, 1420, 0, 0, 0, 0,
	0, 0, 0, 718, 0, 0, 0, 1069, 1071, 57,
	882, 885, 891, 893, 0, 0, 0, 1220, 1221, 1223,
	1224, 1225, 0, 918, 0, 0, 936, 937, 947, 0,
	0, 0, 462, 463, 0, 0, 0, 475, 471, 472,
	473, 453, 976, 964, 953, 0, 0, 963, 0, 1038,
	1714, 1714, 1714, 0, 0, 1148, 1714, 1714, 0, 1058,
	0, 0, 1152, 1091, 0, 0, 1082, 0, 851, 0,
	0, 785, 629, 632, 633, 729, 514, 556, 553, 785,
	1091, 370, 1112, 0, 0, 0, 0, 0, 1144, 0,
	0, 1116, 0, 396, 426, 0, -2, 0, 1260, 0,
	1246, 1260, 0, 0, 1259, 0, 385, 425, 0, 0,
	0, 439, 443, 444, 0, 441, 1298, 0, 442, 0,
	430, 0, 436, 1166, 1167, 0, 1172, 1173, 0, 1197,
	0, 0, 445, 0, 0, 0, 446, 451, 950, 0,
	965, 0, 971, 972, 737, 0, 0, 801, 822, 0,
	0, 802, 0, 803, 808, 810, 294, 837, 0, 0,
	839, 840, 841, 832, 241, 750, 904, 0, 771, 0,
	0, 792, 772, 0, 19, 0, 0, 72, 1702, 1705,
	697, 0, 694, 122, 0, 0, 0, 0, 661, 672,
	655, 1218, 646, 695, 747, 748, 143, 138, 992, 1073,
	0, 1064, 0, 0, 1465, 0, 1425, 1422, 1425, 1424,
	1416, 0, 1373, 0, 1375, 1376, 1377, 0, 1379, 1380,
	0, 716, 0, 0, 924, 1152, 0, 924, 946, 935,
	0, 978, 979, 0, 464, 465, 0, 468, 474, 948,
	949, 0, 0, 961, 0, 0, 0, 0, 1030, 1044,
	0, 0, 0, -2, 0, -2, 1055, 0, 1097, 0,
	1089, 0, 1081, 0, 1084, 785, 785, -2, 626, 631,
	0, 557, 1097, 1114, 0, 1135, 0, 0, 0, 0,
	0, 0, 0, 1115, 0, 1128, 427, 1261, -2, 1274,
	1276, 0, 1043, 1279, 1280, 0, 0, 0, 0, 0,
	0, 1324, 1288, 0, 0, 1292, 1293, 1294, 0, 0,
	1297, 0, 1622, 1623, 0, 1301, 0, 0, 0, 0,
	0, 0, 0, 1240, 386, 387, 0, 389, 390, 1714,
	1299, 429, 383, 1714, 399, 1196, 1199, 1200, 450, 447,
	448, 953, 956, 652, 732, 296, 297, 823, 0, 816,
	846, 843, 0, 0, 908, 782, 784, 73, 78, 0,
	0, 699, 0, 696, 0, 690, 692, 132, 660, 697,
	94, 124, 0, 0, 1360, 1454, 1504, 1428, 1429, 0,
	1417, 0, 1411, 1412, 1413, 1418, 0, 0, 719, 714,
	0, 910, 917, 931, 1049, 1222, 916, 0, 0, 461,
	466, 0, 469, 470, 0, 951, 952, 0, 959, 0,
	0, 1017, 1693, 0, 1039, 1040, 1211, 1212, 1041, 1149,
	1150, 1151, 1107, 1057, 0, -2, 1160, 0, 1053, 1073,
	1107, 0, 1085, 0, 1092, 0, 1090, 1083, 737, 627,
	1094, 376, 1146, 1136, 0, 1138, 0, 0, 0, 0,
	1117, -2, 0, 1275, 1277, 1278, 1281, 1282, 1283, 1329,
	1330, 1331, 0, 0, 1286, 1326, 1327, 1328, 1287, 0,
	0, 0, 0, 0, 1620, 1621, 1322, 0, 0, 1247,
	1249, 1250, 1251, 1252, 1253, 1254, 1255, 1248, 0, 0,
	0, 1239, 1241, 388, 0, 0, 1714, 966, 293, 0,
	0, 847, 849, 844, 845, 68, 70, 85, 0, 698,
	123, 0, 699, 86, 0, 115, 0, 1074, 0, 1427,
	1414, 0, 0, 0, 0, 0, 1624, 1625, 1626, 0,
	1374, 1378, 0, 0, 932, 933, 938, 0, 940, 467,
	954, 958, 961, 0, 1008, 0, 743, 0, 1109, 0,
	1059, 1042, 1162, 1714, 1060, 1109, 0, 1154, 1714, 1714,
	1075, 0, 1087, 0, 1099, 0, 1093, 732, 369, 0,
	1096, 1132, 1137, 1139, 1141, 0, 1145, 1143, 1118, -2,
	0, 1126, 0, 0, 1284, 1285, 0, 0, 1520, 1714,
	0, 1317, 0, 1008, 1008, 1008, 1008, 0, 440, 398,
	0, 824, 838, 0, 0, 0, 688, 95, 112, 0,
	125, 126, 0, 0, 0, 0, 1066, 0, 1403, 0,
	0, 0, 1407, 1408, 1409, 1410, 0, 909, 0, 939,
	960, 962, 1007, 1018, 1019, 743, 1052, 0, 1146, 1161,
	0, 1054, 1153, 0, 0, 0, 1086, 1098, 0, 1101,
	625, 1095, 1113, 0, 1142, 1119, 1127, 0, 1122, 0,
	0, 0, 1325, 0, 1291, 0, 1296, 1305, 1318, 0,
	0, 1228, 0, 1230, 0, 1234, 0, 1236, 0, 0,
	400, 848, 850, 0, 701, 691, 99, 0, 121, 118,
	0, 127, 0, 0, 0, 0, 1062, 0, 0, 1404,
	1405, 1406, 0, 911, 912, 925, 1009, 1714, 1714, 0,
	0, 0, 1015, 1016, 1020, 0, 1134, 1166, 1155, 1156,
	1157, 1100, 1133, 1121, 0, -2, 1129, 0, 0, 1572,
	1582, 1583, 1289, 1295, 1304, 1306, 1307, 0, 1319, 1320,
	1321, 1323, 1008, 1008, 1008, 1008, 1238, 700, 0, 88,
	0, 0, 116, 117, 119, 0, 128, 0, 130, 131,
	0, 1415, 913, 0, 0, 1012, 1013, 0, 1110, 0,
	1112, 1123, -2, 0, 1131, 0, 1290, 1308, 0, 1309,
	0, 0, 0, 1229, 1231, 1235, 1237, 702, 1072, 0,
	100, 0, 102, 104, 105, 1262, 113, 114, 120, 129,
	0, 898, 914, 0, 1010, 1011, 1014, 0, 1114, 1130,
	1573, 1310, 1312, 1313, 0, 0, 1311, 89, 90, 0,
	101, 0, 0, 1067, 915, 1111, 1108, 1314, 1316, 1315,
	0, 0, 103, 1263, 91, 92, 93, 0, 1264,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 114, 3, 3, 3, 145, 137, 3,
	82, 83, 142, 140, 155, 141, 154, 143, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 626, 623,
	124, 123, 125, 3, 627, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 147, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 624, 136, 625, 148,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	115, 116, 117, 118, 119, 120, 121, 122, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 138, 139,
	144, 146, 149, 150, 151, 152, 153, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:800
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:807
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:813
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:821
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:827
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:831
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:846
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:850
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:856
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:861
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:865
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:897
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:905
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp:   yyDollar[2].str,
				IsS3:        false,
				Dir:         yyDollar[4].str,
				Parallelism: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:914
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp: yyDollar[2].str,
				IsS3:      true,
				Option:    yyDollar[5].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:924
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Obeject:     yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:934
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:944
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:957
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:977
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:983
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:990
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:998
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1004
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1013
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1023
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1031
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1039
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1047
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1057
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1065
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1075
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1082
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1091
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1101
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1105
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1111
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1115
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1121
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1130
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1140
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1144
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1150
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1159
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1163
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1169
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1190
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1203
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1210
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1214
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1220
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1224
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1230
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1237
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1245
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1249
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1263
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1267
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1271
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1276
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1280
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1284
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1290
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1299
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1310
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1314
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1320
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1324
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1330
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1334
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1340
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1364
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1383
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1387
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1391
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1396
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1400
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1409
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1419
		{
			yyVAL.str = ""
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1426
		{
			yyVAL.str = yyDollar[3].str
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1431
		{
			yyVAL.str = "\n"
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1438
		{
			yyVAL.str = yyDollar[3].str
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1443
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1447
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1475
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1479
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1485
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1493
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1513
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1532
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1557
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1561
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1565
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1570
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1574
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1580
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1593
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1604
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1617
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1621
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1631
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1644
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1657
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1663
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1669
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1676
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1684
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1693
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1697
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1701
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1705
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1709
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1713
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1720
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1724
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1730
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1737
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1746
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1750
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1756
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1760
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1764
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1768
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1772
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1776
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1780
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1784
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1788
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1792
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1796
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1800
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1804
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1808
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1812
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1816
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1820
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1824
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1828
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1832
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1836
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1840
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1844
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1848
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1852
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1856
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1860
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1864
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1868
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1872
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1876
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1880
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1884
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1888
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1892
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1896
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1900
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1904
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1908
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1912
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1916
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1920
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1924
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1928
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1932
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1936
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1940
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1944
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1948
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1952
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1965
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1972
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1979
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1989
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1993
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:1999
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2006
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2014
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2018
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2022
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2026
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2032
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2036
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2042
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2049
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2056
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2065
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2095
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2099
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2103
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2109
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2115
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2119
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2126
		{
			yyVAL.str = yyDollar[3].str
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2132
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2136
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2142
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2150
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2159
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2168
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2176
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2184
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2207
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2230
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2237
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2244
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2252
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2259
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2266
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2275
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2279
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2283
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2289
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2293
		{
			yyVAL.str = yyDollar[1].str
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2299
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2303
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2309
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2313
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2324
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2330
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2335
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2339
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2343
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2347
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2351
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2355
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2359
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2363
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2367
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2373
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2377
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2381
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2385
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2390
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2395
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2401
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2414
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2427
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2440
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2453
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2469
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2476
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2487
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2498
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2502
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2508
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2518
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2524
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2528
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2534
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2540
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2544
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2548
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2552
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2558
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2570
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2576
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2580
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2586
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2590
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2596
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2602
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2613
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2619
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2623
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2627
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2631
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2635
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2639
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2647
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2655
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2665
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2677
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2681
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2689
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2697
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2736
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2740
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2746
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2752
		{
			yyVAL.str = yyDollar[1].str
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2757
		{
			yyVAL.str = "true"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2758
		{
			yyVAL.str = "false"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2759
		{
			yyVAL.str = yyDollar[1].str
		}
	case 360:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2764
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2781
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2804
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2814
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2821
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2830
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2834
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2840
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2844
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			partitionDef := &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2863
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2873
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2889
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2907
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2911
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2917
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2921
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2927
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2933
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2941
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2951
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2959
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2969
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr *tree.AttributeDefault
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2979
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr *tree.AttributeDefault
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2989
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2996
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3000
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3004
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3008
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3012
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3019
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3025
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3029
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3033
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3037
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3041
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3045
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3049
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3053
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3058
		{
			yyVAL.str = ""
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3089
		{
			yyVAL.str = ""
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3093
		{
			yyVAL.str = string("COLUMN")
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3098
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3104
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3110
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3118
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3122
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3128
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3136
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3143
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3149
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3155
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3161
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3167
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3174
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3181
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3189
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3195
		{
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = int64(yyDollar[6].item.(int64))
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3202
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3208
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3216
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3220
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3227
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3245
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3259
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3273
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3286
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3292
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3303
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3316
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3320
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3325
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3329
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3334
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3338
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3354
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3358
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3362
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3366
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3370
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3374
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3378
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryDefault{}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3382
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryCount{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3386
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalDefault{}
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3390
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalCount{Value: yyDollar[4].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3394
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentNone{}
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3398
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentDefault{}
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3402
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentOptional{}
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3406
		{
			yyLOCAL = &tree.UserMiscOptionFailedLoginAttempts{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3410
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeCount{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3414
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeUnbounded{}
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3420
		{
			yyVAL.item = nil
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3425
		{
			yyVAL.item = nil
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3466
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3475
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3483
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3487
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3491
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{tree.NewRole(yyDollar[5].cstrUnion().Compare())}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3500
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3504
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3510
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3515
		{
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3519
		{
		}
	case 519:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3524
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3534
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3544
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3552
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3558
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3564
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3570
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3576
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3582
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3588
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3597
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3601
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3605
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3609
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3613
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3617
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3621
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3625
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3631
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3640
		{
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3642
		{
		}
	case 543:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3651
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3661
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3670
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3674
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3678
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3684
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3690
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3696
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3702
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3711
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3721
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3733
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3737
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3743
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3755
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3769
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3775
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3782
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3786
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3791
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3795
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3799
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3804
		{
			yyVAL.str = ""
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3808
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3814
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3827
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3831
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3837
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3842
		{
			yyLOCAL = &tree.ShowCreateView{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3846
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3850
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3856
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3862
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3866
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3872
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3878
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3882
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3886
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3892
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3896
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3922
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3930
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3938
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3946
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3950
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3956
		{
			yyLOCAL = &tree.User{
				Username: yyDollar[1].usernameRecordUnion().Username,
				Hostname: yyDollar[1].usernameRecordUnion().Hostname,
			}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3965
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3973
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3982
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3988
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3996
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4004
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4012
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4018
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4026
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4032
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4040
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4046
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4056
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4061
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4068
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4084
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4097
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4108
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4112
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4118
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4123
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4130
		{
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4132
		{
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4135
		{
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4144
		{
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4148
		{
		}
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4153
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4162
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4169
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4175
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4183
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4190
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4197
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4217
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4227
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4231
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4237
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4244
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4250
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4258
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4265
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4272
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4291
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4295
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4299
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4304
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4308
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4312
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4318
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4327
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4331
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4337
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4341
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4347
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4351
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4357
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4362
		{
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4366
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4373
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4377
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4384
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4389
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4393
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4399
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4403
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4409
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4413
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4418
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4422
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4435
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4446
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4457
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4479
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4502
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4510
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4519
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4523
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4536
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4540
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4545
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4549
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4556
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4561
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4568
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4574
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4578
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4582
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4586
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4590
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4594
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4599
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4603
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4609
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4619
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4634
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4638
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4652
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4656
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4662
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4671
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4675
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4679
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4683
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4687
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4693
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4700
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4709
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4713
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4719
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4727
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4731
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4736
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4740
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4746
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4750
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4754
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4759
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4763
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4769
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4775
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4779
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:4785
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4790
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4794
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4798
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4803
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4807
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4811
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4816
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4820
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4828
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4832
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4836
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4850
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4854
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4864
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4874
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4884
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4896
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4904
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4912
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4921
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4929
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4937
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4945
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4953
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4961
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4969
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4977
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4985
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4995
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5006
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5020
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5024
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5028
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5033
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5037
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5041
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5050
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5054
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5059
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5063
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5068
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5072
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5078
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5082
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5088
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5092
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5097
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5101
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5106
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5114
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5120
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5128
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5136
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5146
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5152
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5161
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5170
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5179
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5189
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5193
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5203
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5207
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5211
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5215
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 811:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5221
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5231
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5235
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5241
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5247
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5251
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5257
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5263
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5267
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5271
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5277
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5281
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5287
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5291
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5297
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5301
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5307
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5311
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5321
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5334
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5340
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5346
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:  tree.FuncName2ResolvableFunctionReference(name),
					Exprs: yyDollar[3].exprsUnion(),
					Type:  tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5359
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5370
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5377
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5381
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5387
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5397
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5401
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5405
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5410
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5414
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5418
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5422
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5427
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5431
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5435
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5439
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5443
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5448
		{
			yyVAL.str = ""
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5452
		{
			yyVAL.str = yyDollar[1].str
		}
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5456
		{
			yyVAL.str = yyDollar[2].str
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5462
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 856:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5468
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5472
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5476
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5480
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5484
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5490
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 882:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5530
		{
			yyLOCAL = &tree.CreateExtension{
				Language: yyDollar[3].str,
				Name:     tree.Identifier(yyDollar[5].str),
				Filename: tree.Identifier(yyDollar[7].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5540
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5546
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 885:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5552
		{
			yyLOCAL = &tree.CreateProcedure{
				Name: yyDollar[3].procNameUnion(),
				Args: yyDollar[5].procArgsUnion(),
				Body: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5562
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5567
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5573
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5580
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5584
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5590
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5596
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5601
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5605
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5609
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5613
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5620
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				return 1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				return 1
			}

			yyLOCAL = &tree.CreateFunction{
				Replace:    yyDollar[2].sourceOptionalUnion(),
				Name:       yyDollar[4].functionNameUnion(),
				Args:       yyDollar[6].funcArgsUnion(),
				ReturnType: yyDollar[9].funcReturnUnion(),
				Language:   yyDollar[11].str,
				Import:     yyDollar[12].boolValUnion(),
				Body:       yyDollar[13].str,
				Handler:    yyDollar[14].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5644
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5649
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5655
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5662
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5666
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5672
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5678
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5682
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5686
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5692
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5698
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5704
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5708
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5714
		{
			yyVAL.str = ""
		}
	case 915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5721
		{
			yyVAL.str = yyDollar[2].str
		}
	case 916:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5727
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5736
		{
			yyLOCAL = &tree.CreateView{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5748
		{
			yyLOCAL = &tree.CreateAccount{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         yyDollar[4].str,
				AuthOption:   yyDollar[5].accountAuthOptionUnion(),
				StatusOption: yyDollar[6].accountStatusUnion(),
				Comment:      yyDollar[7].accountCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5760
		{
			yyVAL.str = yyDollar[1].str
		}
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5764
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5770
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5774
		{
			yyVAL.str = "DEFINER = "
		}
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5778
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 924:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5783
		{
			yyVAL.str = ""
		}
	case 925:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:5787
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 931:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5801
		{
			yyVAL.str = ""
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5809
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 935:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:5815
		{
			yyLOCAL = tree.AccountAuthOption{
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5825
		{
			yyVAL.str = yyDollar[1].str
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5829
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 938:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5835
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5842
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5848
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5856
		{
			yyLOCAL = tree.AccountStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5862
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusOpen,
			}
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5869
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusSuspend,
			}
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5876
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusRestricted,
			}
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5884
		{
			yyLOCAL = tree.AccountComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5890
		{
			yyLOCAL = tree.AccountComment{
				Exist:   true,
				Comment: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5899
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Users:              yyDollar[4].usersUnion(),
				Role:               yyDollar[5].accountRoleUnion(),
				MiscOpt:            yyDollar[6].userMiscOptionUnion(),
				CommentOrAttribute: yyDollar[7].accountCommentOrAttributeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5911
		{
			yyLOCAL = &tree.CreatePublication{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Database:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				AccountsSet: yyDollar[7].accountsSetOptionUnion(),
				Comment:     yyDollar[8].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5923
		{
			yyLOCAL = &tree.CreateStage{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Url:         yyDollar[5].str,
				Credentials: yyDollar[6].stageCredentialsUnion(),
				Status:      yyDollar[7].stageStatusUnion(),
				Comment:     yyDollar[8].stageCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5935
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5941
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5948
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5956
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5962
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5970
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5976
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:5984
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:5990
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5999
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6003
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6008
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6012
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6019
		{
			yyVAL.str = yyDollar[3].str
		}
	case 964:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6024
		{
			yyVAL.str = ""
		}
	case 965:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6028
		{
			yyVAL.str = yyDollar[2].str
		}
	case 966:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6034
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6047
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var comment = yyDollar[6].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, comment)
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6056
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6060
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6066
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6072
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6078
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6087
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6095
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6103
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6111
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 977:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6116
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6122
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: true,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6130
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: false,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6236
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6240
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6246
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6256
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6260
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6266
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6276
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6280
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6284
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6289
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6293
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6299
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6306
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6312
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6321
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 996:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6328
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6337
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6341
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6347
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6361
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6365
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6369
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6374
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6378
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6382
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6386
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6392
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = &tree.IndexOption{IType: tree.INDEX_TYPE_INVALID}
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Table:       yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6413
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6417
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6443
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6447
		{
			yyLOCAL = &tree.IndexOption{AlgoParamList: int64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6451
		{
			yyLOCAL = &tree.IndexOption{AlgoParamVectorOpType: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6455
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6459
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6463
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6467
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6473
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6477
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6483
		{
			// Order is parsed but just ignored as MySQL dtree.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6488
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6493
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6497
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6501
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6505
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6509
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6513
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6517
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6523
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Name:               tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SubscriptionOption: yyDollar[5].subscriptionOptionUnion(),
				CreateOptions:      yyDollar[6].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6534
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6538
		{
			yyLOCAL = &tree.SubscriptionOption{From: tree.Identifier(yyDollar[2].str), Publication: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6548
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6552
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6557
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6561
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6567
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6571
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6577
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6581
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6585
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6590
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6594
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6600
		{
			yyLOCAL = &tree.CreateConnector{
				TableName: yyDollar[4].tableNameUnion(),
				Options:   yyDollar[7].connectorOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6609
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6615
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6633
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6651
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6669
		{
			yyLOCAL = &tree.CreateSource{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				SourceName:  yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Options:     yyDollar[9].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6680
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6684
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6690
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6702
		{
			yyLOCAL = &tree.CreateTable{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Param:       yyDollar[9].loadParamUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6711
		{
			yyLOCAL = &tree.CreateTable{
				IsClusterTable:  true,
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6723
		{
			yyLOCAL = &tree.CreateTable{
				IsDynamicTable: true,
				IfNotExists:    yyDollar[4].ifNotExistsUnion(),
				Table:          *yyDollar[5].tableNameUnion(),
				AsSource:       yyDollar[7].selectUnion(),
				DTOptions:      yyDollar[8].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6733
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				AsSource:    yyDollar[6].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6743
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				AsSource:    yyDollar[9].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6754
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				AsSource:    yyDollar[7].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6764
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				AsSource:    yyDollar[10].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6777
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6784
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6794
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6807
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6815
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6824
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6833
		{
			yyVAL.str = ""
		}
	case 1067:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6837
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6843
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6847
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6852
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6856
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:6863
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6875
		{
			yyVAL.str = ""
		}
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6879
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1075:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6885
		{
			yyLOCAL = &tree.CreateSequence{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        yyDollar[4].tableNameUnion(),
				Type:        yyDollar[5].columnTypeUnion(),
				IncrementBy: yyDollar[6].incrementByOptionUnion(),
				MinValue:    yyDollar[7].minValueOptionUnion(),
				MaxValue:    yyDollar[8].maxValueOptionUnion(),
				StartWith:   yyDollar[9].startWithOptionUnion(),
				Cycle:       yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6898
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6912
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6916
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6920
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6926
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6930
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6937
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6944
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6951
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6958
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6962
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6966
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6970
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6974
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6981
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6988
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6992
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6999
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7006
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7010
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7016
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7022
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7026
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7033
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7040
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7047
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7054
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7058
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7063
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7067
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7071
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7076
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7080
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7090
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7094
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()},
			}

		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7101
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: yyDollar[4].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7108
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7112
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7121
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7125
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7131
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7135
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7141
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7150
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7160
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7164
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7170
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7174
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7180
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7187
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7196
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7200
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7205
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7209
		{
			expr := tree.NewMaxValue()
			yyLOCAL = &tree.ValuesLessThan{ValueList: tree.Exprs{expr}}
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7214
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7218
		{
			yyLOCAL = &tree.ValuesIn{ValueList: yyDollar[4].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7223
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7227
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7237
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7241
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7252
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7260
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7268
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7276
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7287
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:    yyDollar[1].boolValUnion(),
					Algorithm: yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7296
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7306
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7316
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7320
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7325
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7329
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7335
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7339
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7345
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7349
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7354
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7358
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7364
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7368
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7374
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7378
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7383
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7387
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7393
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7397
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7401
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7407
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7411
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7415
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7419
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7423
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7427
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7431
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7436
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7440
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7444
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7448
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7452
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7456
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7460
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7464
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7468
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7472
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7476
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7480
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7484
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7488
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7492
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7496
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7500
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7504
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7508
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7512
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7516
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7520
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7524
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7528
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7532
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7536
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7540
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7544
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7550
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7554
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:7560
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7566
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7570
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7576
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7580
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7584
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7588
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7592
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7596
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7610
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7614
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7623
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7628
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7633
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			atType := tree.ATTIMESTAMPNONE
			if yyDollar[3].str != "" {
				t := strings.ToLower(yyDollar[3].str)
				switch t {
				case "timestamp":
					atType = tree.ATTIMESTAMPTIME
				case "snapshot":
					atType = tree.ATTIMESTAMPSNAPSHOT
				default:
					yylex.Error("Invalid the type of at timestamp")
					return 1
				}
			}
			atTs := &tree.AtTimeStampClause{
				TimeStampExpr: &tree.TimeStampExpr{
					Type: atType,
					Expr: yyDollar[5].str,
				},
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7657
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			atType := tree.ATTIMESTAMPNONE
			if yyDollar[5].str != "" {
				t := strings.ToLower(yyDollar[5].str)
				switch t {
				case "timestamp":
					atType = tree.ATTIMESTAMPTIME
				case "snapshot":
					atType = tree.ATTIMESTAMPSNAPSHOT
				default:
					yylex.Error("Invalid the type of at timestamp")
					return 1
				}
			}
			atTs := &tree.AtTimeStampClause{
				TimeStampExpr: &tree.TimeStampExpr{
					Type: atType,
					Expr: yyDollar[7].str,
				},
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7682
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7689
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7693
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7699
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7703
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7707
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7713
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7717
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7723
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7732
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7741
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7774
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7809
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7823
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7829
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7838
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7847
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7856
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7865
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7875
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7883
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7889
		{
			yyVAL.str = ""
		}
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7893
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7903
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7909
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7915
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7936
		{
			yyVAL.str = ""
		}
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7940
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:7946
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7952
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7956
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7960
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7966
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7970
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7974
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7978
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7984
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7988
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7992
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7997
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8001
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8007
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8011
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8017
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8021
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8025
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8029
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8033
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8037
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8042
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8046
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8050
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8054
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8058
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8062
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8066
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8070
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8074
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8078
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8091
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8095
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8099
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8103
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8107
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8111
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8117
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8121
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8126
		{
			yyVAL.str = ""
		}
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8130
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8136
		{
			yyVAL.str = ""
		}
	case 1303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8140
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1304:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8146
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8158
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8165
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8172
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8179
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8186
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8195
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8201
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8207
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8211
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8215
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8219
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8223
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8228
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8235
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8239
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8243
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8248
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8252
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8257
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8261
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8277
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8283
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8287
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8291
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8295
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8299
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8303
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8307
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8311
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8315
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8319
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8323
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8327
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8331
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8337
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8341
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8345
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8349
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8353
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8357
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8361
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8365
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8369
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8373
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8377
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8381
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8386
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8394
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8398
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8402
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8406
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8410
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8419
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8423
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8427
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8431
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8435
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8439
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8445
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8453
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8461
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8471
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8481
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8491
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8500
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8510
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8520
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8530
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8539
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8549
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8553
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8558
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8562
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8568
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8572
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:8578
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8587
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8599
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8616
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8633
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8646
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8659
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8671
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8685
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8700
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8715
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8732
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8747
		{
		}
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8754
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8758
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8762
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8768
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8772
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8776
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8780
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8786
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8790
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8794
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8800
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8808
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8818
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8822
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8829
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8834
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8838
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8843
		{
			yyVAL.str = ","
		}
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8847
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8852
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8856
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1425:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8861
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8868
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8894
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8905
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8916
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8926
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8936
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8946
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8955
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8964
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8974
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8984
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8994
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9004
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9014
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9024
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9034
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9044
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9054
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9064
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9074
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9084
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9103
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9111
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9119
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9127
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9135
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9145
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9153
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9162
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9170
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9178
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9186
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9194
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9205
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9215
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9227
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9238
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9260
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9296
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9308
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9320
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9331
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9339
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9346
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9353
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9365
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9373
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9383
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9393
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9401
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9412
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9421
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9430
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9438
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9448
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9456
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9466
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9470
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9476
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9480
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9499
		{
		}
	case 1531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9501
		{
		}
	case 1565:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9542
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9553
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9557
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9561
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:9567
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9572
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9576
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9582
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9586
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9592
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9596
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9603
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9607
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9611
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9619
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9623
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9627
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9632
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9636
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9642
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9646
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9650
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9654
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9658
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9662
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9666
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9670
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9674
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9678
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9686
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9690
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9694
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9698
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9702
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9706
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9710
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9714
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9718
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9722
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9728
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9732
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9738
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9742
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9749
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9753
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9757
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9763
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9767
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9771
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9775
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9779
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9783
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9787
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9793
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9797
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9801
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9805
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9811
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9824
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9829
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9835
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9839
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9852
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9857
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9861
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9865
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9869
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9873
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9880
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9884
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9888
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9892
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9899
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9910
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9915
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9921
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9933
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9945
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9957
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9970
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9983
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9996
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10009
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10022
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10035
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10048
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10061
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10074
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10087
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10102
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10129
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10171
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10207
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10243
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10260
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10272
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10292
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10312
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10332
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10348
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10361
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10374
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10387
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10400
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10412
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10424
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10436
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10448
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10460
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10472
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10484
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10496
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10508
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10521
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10534
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10547
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10560
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10575
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10583
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10592
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10602
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10625
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10630
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10636
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10643
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10647
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10652
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10656
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10662
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10668
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10675
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10682
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10691
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10698
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10705
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10714
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10718
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10722
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10728
		{
		}
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10730
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10740
		{
			yyVAL.str = ""
		}
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10744
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
