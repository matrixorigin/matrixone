// Code generated by goyacc -o mysql_sql.go -c mysql mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const DISTINCTROW = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const SUBQUERY_AS_EXPR = 57394
const LOWER_THAN_STRING = 57395
const ID = 57396
const AT_ID = 57397
const AT_AT_ID = 57398
const STRING = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const INTEGRAL = 57404
const HEX = 57405
const BIT_LITERAL = 57406
const FLOAT = 57407
const HEXNUM = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const LOWER_THAN_CHARSET = 57412
const CHARSET = 57413
const UNIQUE = 57414
const KEY = 57415
const OR = 57416
const PIPE_CONCAT = 57417
const XOR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const LE = 57427
const GE = 57428
const NE = 57429
const NULL_SAFE_EQUAL = 57430
const IS = 57431
const LIKE = 57432
const REGEXP = 57433
const IN = 57434
const ASSIGNMENT = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const BEGIN = 57445
const START = 57446
const TRANSACTION = 57447
const COMMIT = 57448
const ROLLBACK = 57449
const WORK = 57450
const CONSISTENT = 57451
const SNAPSHOT = 57452
const CHAIN = 57453
const NO = 57454
const RELEASE = 57455
const BIT = 57456
const TINYINT = 57457
const SMALLINT = 57458
const MEDIUMINT = 57459
const INT = 57460
const INTEGER = 57461
const BIGINT = 57462
const INTNUM = 57463
const REAL = 57464
const DOUBLE = 57465
const FLOAT_TYPE = 57466
const DECIMAL = 57467
const NUMERIC = 57468
const DECIMAL_VALUE = 57469
const TIME = 57470
const TIMESTAMP = 57471
const DATETIME = 57472
const YEAR = 57473
const CHAR = 57474
const VARCHAR = 57475
const BOOL = 57476
const CHARACTER = 57477
const VARBINARY = 57478
const NCHAR = 57479
const TEXT = 57480
const TINYTEXT = 57481
const MEDIUMTEXT = 57482
const LONGTEXT = 57483
const BLOB = 57484
const TINYBLOB = 57485
const MEDIUMBLOB = 57486
const LONGBLOB = 57487
const JSON = 57488
const ENUM = 57489
const GEOMETRY = 57490
const POINT = 57491
const LINESTRING = 57492
const POLYGON = 57493
const GEOMETRYCOLLECTION = 57494
const MULTIPOINT = 57495
const MULTILINESTRING = 57496
const MULTIPOLYGON = 57497
const INT1 = 57498
const INT2 = 57499
const INT3 = 57500
const INT4 = 57501
const INT8 = 57502
const SQL_SMALL_RESULT = 57503
const SQL_BIG_RESULT = 57504
const SQL_BUFFER_RESULT = 57505
const CREATE = 57506
const ALTER = 57507
const DROP = 57508
const RENAME = 57509
const ANALYZE = 57510
const ADD = 57511
const SCHEMA = 57512
const TABLE = 57513
const INDEX = 57514
const VIEW = 57515
const TO = 57516
const IGNORE = 57517
const IF = 57518
const PRIMARY = 57519
const COLUMN = 57520
const CONSTRAINT = 57521
const SPATIAL = 57522
const FULLTEXT = 57523
const FOREIGN = 57524
const KEY_BLOCK_SIZE = 57525
const SHOW = 57526
const DESCRIBE = 57527
const EXPLAIN = 57528
const DATE = 57529
const ESCAPE = 57530
const REPAIR = 57531
const OPTIMIZE = 57532
const TRUNCATE = 57533
const MAXVALUE = 57534
const PARTITION = 57535
const REORGANIZE = 57536
const LESS = 57537
const THAN = 57538
const PROCEDURE = 57539
const TRIGGER = 57540
const STATUS = 57541
const VARIABLES = 57542
const ROLE = 57543
const PROXY = 57544
const AVG_ROW_LENGTH = 57545
const STORAGE = 57546
const DISK = 57547
const MEMORY = 57548
const CHECKSUM = 57549
const COMPRESSION = 57550
const DATA = 57551
const DIRECTORY = 57552
const DELAY_KEY_WRITE = 57553
const ENCRYPTION = 57554
const ENGINE = 57555
const MAX_ROWS = 57556
const MIN_ROWS = 57557
const PACK_KEYS = 57558
const ROW_FORMAT = 57559
const STATS_AUTO_RECALC = 57560
const STATS_PERSISTENT = 57561
const STATS_SAMPLE_PAGES = 57562
const DYNAMIC = 57563
const COMPRESSED = 57564
const REDUNDANT = 57565
const COMPACT = 57566
const FIXED = 57567
const COLUMN_FORMAT = 57568
const AUTO_RANDOM = 57569
const RESTRICT = 57570
const CASCADE = 57571
const ACTION = 57572
const PARTIAL = 57573
const SIMPLE = 57574
const CHECK = 57575
const ENFORCED = 57576
const RANGE = 57577
const LIST = 57578
const ALGORITHM = 57579
const LINEAR = 57580
const PARTITIONS = 57581
const SUBPARTITION = 57582
const SUBPARTITIONS = 57583
const TYPE = 57584
const ANY = 57585
const SOME = 57586
const PREPARE = 57587
const DEALLOCATE = 57588
const PROPERTIES = 57589
const PARSER = 57590
const VISIBLE = 57591
const INVISIBLE = 57592
const BTREE = 57593
const HASH = 57594
const RTREE = 57595
const BSI = 57596
const ZONEMAP = 57597
const LEADING = 57598
const BOTH = 57599
const TRAILING = 57600
const UNKNOWN = 57601
const EXPIRE = 57602
const ACCOUNT = 57603
const UNLOCK = 57604
const DAY = 57605
const NEVER = 57606
const SECOND = 57607
const ASCII = 57608
const COALESCE = 57609
const COLLATION = 57610
const HOUR = 57611
const MICROSECOND = 57612
const MINUTE = 57613
const MONTH = 57614
const QUARTER = 57615
const REPEAT = 57616
const REVERSE = 57617
const ROW_COUNT = 57618
const WEEK = 57619
const REVOKE = 57620
const FUNCTION = 57621
const PRIVILEGES = 57622
const TABLESPACE = 57623
const EXECUTE = 57624
const SUPER = 57625
const GRANT = 57626
const OPTION = 57627
const REFERENCES = 57628
const REPLICATION = 57629
const SLAVE = 57630
const CLIENT = 57631
const USAGE = 57632
const RELOAD = 57633
const FILE = 57634
const TEMPORARY = 57635
const ROUTINE = 57636
const EVENT = 57637
const SHUTDOWN = 57638
const NULLX = 57639
const AUTO_INCREMENT = 57640
const APPROXNUM = 57641
const SIGNED = 57642
const UNSIGNED = 57643
const ZEROFILL = 57644
const USER = 57645
const IDENTIFIED = 57646
const CIPHER = 57647
const ISSUER = 57648
const X509 = 57649
const SUBJECT = 57650
const SAN = 57651
const REQUIRE = 57652
const SSL = 57653
const NONE = 57654
const PASSWORD = 57655
const MAX_QUERIES_PER_HOUR = 57656
const MAX_UPDATES_PER_HOUR = 57657
const MAX_CONNECTIONS_PER_HOUR = 57658
const MAX_USER_CONNECTIONS = 57659
const FORMAT = 57660
const VERBOSE = 57661
const CONNECTION = 57662
const LOAD = 57663
const INFILE = 57664
const TERMINATED = 57665
const OPTIONALLY = 57666
const ENCLOSED = 57667
const ESCAPED = 57668
const STARTING = 57669
const LINES = 57670
const DATABASES = 57671
const TABLES = 57672
const EXTENDED = 57673
const FULL = 57674
const PROCESSLIST = 57675
const FIELDS = 57676
const COLUMNS = 57677
const OPEN = 57678
const ERRORS = 57679
const WARNINGS = 57680
const INDEXES = 57681
const SCHEMAS = 57682
const NAMES = 57683
const GLOBAL = 57684
const SESSION = 57685
const ISOLATION = 57686
const LEVEL = 57687
const READ = 57688
const WRITE = 57689
const ONLY = 57690
const REPEATABLE = 57691
const COMMITTED = 57692
const UNCOMMITTED = 57693
const SERIALIZABLE = 57694
const LOCAL = 57695
const EXCEPT = 57696
const CURRENT_TIMESTAMP = 57697
const DATABASE = 57698
const CURRENT_TIME = 57699
const LOCALTIME = 57700
const LOCALTIMESTAMP = 57701
const UTC_DATE = 57702
const UTC_TIME = 57703
const UTC_TIMESTAMP = 57704
const REPLACE = 57705
const CONVERT = 57706
const SEPARATOR = 57707
const CURRENT_DATE = 57708
const CURRENT_USER = 57709
const CURRENT_ROLE = 57710
const SECOND_MICROSECOND = 57711
const MINUTE_MICROSECOND = 57712
const MINUTE_SECOND = 57713
const HOUR_MICROSECOND = 57714
const HOUR_SECOND = 57715
const HOUR_MINUTE = 57716
const DAY_MICROSECOND = 57717
const DAY_SECOND = 57718
const DAY_MINUTE = 57719
const DAY_HOUR = 57720
const YEAR_MONTH = 57721
const SQL_TSI_HOUR = 57722
const SQL_TSI_DAY = 57723
const SQL_TSI_WEEK = 57724
const SQL_TSI_MONTH = 57725
const SQL_TSI_QUARTER = 57726
const SQL_TSI_YEAR = 57727
const SQL_TSI_SECOND = 57728
const SQL_TSI_MINUTE = 57729
const RECURSIVE = 57730
const CONFIG = 57731
const MATCH = 57732
const AGAINST = 57733
const BOOLEAN = 57734
const LANGUAGE = 57735
const WITH = 57736
const QUERY = 57737
const EXPANSION = 57738
const ADDDATE = 57739
const BIT_AND = 57740
const BIT_OR = 57741
const BIT_XOR = 57742
const CAST = 57743
const COUNT = 57744
const APPROX_COUNT_DISTINCT = 57745
const APPROX_PERCENTILE = 57746
const CURDATE = 57747
const CURTIME = 57748
const DATE_ADD = 57749
const DATE_SUB = 57750
const EXTRACT = 57751
const GROUP_CONCAT = 57752
const MAX = 57753
const MID = 57754
const MIN = 57755
const NOW = 57756
const POSITION = 57757
const SESSION_USER = 57758
const STD = 57759
const STDDEV = 57760
const STDDEV_POP = 57761
const STDDEV_SAMP = 57762
const SUBDATE = 57763
const SUBSTR = 57764
const SUBSTRING = 57765
const SUM = 57766
const SYSDATE = 57767
const SYSTEM_USER = 57768
const TRANSLATE = 57769
const TRIM = 57770
const VARIANCE = 57771
const VAR_POP = 57772
const VAR_SAMP = 57773
const AVG = 57774
const ROW = 57775
const OUTFILE = 57776
const HEADER = 57777
const MAX_FILE_SIZE = 57778
const FORCE_QUOTE = 57779
const UNUSED = 57780

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"INTEGRAL",
	"HEX",
	"BIT_LITERAL",
	"FLOAT",
	"HEXNUM",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"TYPE",
	"ANY",
	"SOME",
	"PREPARE",
	"DEALLOCATE",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"EXPIRE",
	"ACCOUNT",
	"UNLOCK",
	"DAY",
	"NEVER",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"LOAD",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"DATABASES",
	"TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EXCEPT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT_DISTINCT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"UNUSED",
	"';'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:6633

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 59,
	17, 380,
	-2, 361,
	-1, 64,
	189, 529,
	-2, 565,
	-1, 77,
	216, 267,
	217, 267,
	-2, 288,
	-1, 334,
	58, 1348,
	457, 1348,
	-2, 97,
	-1, 353,
	58, 690,
	457, 690,
	-2, 527,
	-1, 354,
	58, 520,
	457, 520,
	-2, 528,
	-1, 360,
	17, 381,
	-2, 344,
	-1, 419,
	89, 1227,
	100, 1227,
	119, 1227,
	-2, 1055,
	-1, 599,
	17, 381,
	-2, 344,
	-1, 622,
	53, 1377,
	-2, 1384,
	-1, 630,
	53, 1378,
	-2, 1392,
	-1, 632,
	53, 1374,
	-2, 1394,
	-1, 633,
	53, 1375,
	-2, 1395,
	-1, 638,
	53, 1376,
	-2, 1401,
	-1, 639,
	53, 1379,
	-2, 1402,
	-1, 640,
	53, 1380,
	-2, 1403,
	-1, 641,
	53, 819,
	-2, 1404,
	-1, 642,
	53, 820,
	-2, 1405,
	-1, 643,
	53, 821,
	-2, 1406,
	-1, 645,
	53, 1381,
	-2, 1408,
	-1, 646,
	53, 838,
	-2, 1409,
	-1, 647,
	53, 837,
	-2, 1410,
	-1, 650,
	53, 1382,
	-2, 1413,
	-1, 651,
	53, 1383,
	-2, 1414,
	-1, 657,
	53, 900,
	-2, 1227,
	-1, 658,
	53, 909,
	-2, 1253,
	-1, 659,
	53, 913,
	-2, 1292,
	-1, 660,
	53, 924,
	-2, 1353,
	-1, 661,
	53, 926,
	-2, 1363,
	-1, 662,
	53, 914,
	-2, 1368,
	-1, 663,
	53, 922,
	-2, 1372,
	-1, 664,
	53, 903,
	-2, 1373,
	-1, 825,
	1, 555,
	55, 555,
	456, 555,
	-2, 562,
	-1, 954,
	17, 380,
	-2, 748,
	-1, 1000,
	119, 1065,
	-2, 1063,
	-1, 1002,
	119, 469,
	-2, 1060,
	-1, 1003,
	119, 470,
	-2, 1061,
	-1, 1199,
	1, 556,
	55, 556,
	456, 556,
	-2, 562,
	-1, 1258,
	53, 967,
	-2, 1370,
	-1, 1259,
	53, 968,
	-2, 1371,
	-1, 1699,
	74, 562,
	115, 562,
	149, 562,
	152, 562,
	-2, 602,
	-1, 1701,
	250, 715,
	-2, 696,
	-1, 1797,
	74, 562,
	115, 562,
	149, 562,
	152, 562,
	-2, 603,
	-1, 1825,
	250, 715,
	-2, 697,
	-1, 2202,
	54, 577,
	55, 577,
	-2, 562,
	-1, 2206,
	54, 577,
	55, 577,
	-2, 562,
	-1, 2218,
	54, 581,
	55, 581,
	-2, 562,
	-1, 2221,
	54, 582,
	55, 582,
	-2, 562,
}

const yyPrivate = 57344

const yyLast = 22205

var yyAct = [...]int{
	815, 1261, 2208, 2206, 2205, 2213, 2179, 667, 2153, 1855,
	804, 2044, 685, 2124, 2168, 1837, 2105, 2019, 2106, 1793,
	490, 2022, 2000, 551, 1186, 665, 1693, 95, 881, 586,
	306, 312, 1955, 312, 1854, 321, 2007, 1543, 98, 486,
	1719, 1826, 417, 1864, 1434, 1844, 1853, 95, 323, 1539,
	611, 536, 1742, 1527, 1845, 1735, 355, 355, 864, 1753,
	310, 22, 94, 1745, 1576, 1411, 1548, 1555, 1705, 621,
	1594, 1757, 1192, 1544, 982, 1583, 802, 1479, 1602, 991,
	888, 992, 997, 1567, 418, 697, 59, 316, 594, 1441,
	436, 1262, 1345, 749, 95, 1000, 983, 1331, 1249, 799,
	676, 857, 309, 15, 58, 541, 307, 6, 3, 1405,
	1801, 832, 1200, 817, 1263, 59, 308, 5, 800, 774,
	377, 1260, 666, 614, 361, 1275, 360, 668, 524, 449,
	861, 1168, 330, 330, 1159, 488, 460, 833, 890, 302,
	834, 921, 435, 595, 409, 326, 299, 791, 474, 325,
	578, 883, 22, 1175, 91, 327, 1875, 503, 1789, 1692,
	812, 985, 613, 311, 433, 362, 1171, 90, 88, 1387,
	2071, 424, 426, 1528, 564, 1406, 2061, 59, 90, 410,
	26, 46, 27, 90, 317, 26, 46, 27, 534, 1394,
	90, 425, 851, 558, 15, 562, 314, 90, 6, 523,
	446, 373, 846, 847, 90, 1397, 357, 396, 5, 420,
	836, 422, 807, 90, 86, 26, 46, 27, 430, 429,
	2093, 746, 565, 550, 743, 86, 549, 552, 553, 514,
	86, 1504, 765, 552, 553, 518, 2091, 86, 2109, 2110,
	1956, 1957, 1958, 1959, 745, 382, 2128, 1953, 428, 1531,
	421, 86, 2032, 1532, 2035, 1533, 1878, 1694, 811, 1373,
	86, 1556, 1557, 1558, 1559, 463, 454, 1414, 1412, 1409,
	1413, 1415, 858, 1408, 1407, 1580, 1577, 1414, 1412, 509,
	1413, 1415, 1173, 397, 1171, 1861, 1741, 1740, 505, 516,
	517, 1842, 432, 1786, 515, 1689, 792, 1940, 504, 95,
	453, 1730, 2095, 1447, 1253, 1254, 2070, 510, 2119, 452,
	1726, 313, 1930, 375, 312, 2198, 95, 2214, 1252, 1253,
	1254, 2133, 794, 372, 371, 2090, 2046, 2140, 1579, 1250,
	2068, 1924, 2189, 1729, 2008, 2009, 2010, 2012, 2011, 2108,
	1417, 1418, 1419, 1420, 367, 2021, 463, 1893, 1892, 359,
	427, 470, 2042, 2043, 2052, 2046, 2097, 2098, 1915, 574,
	491, 548, 547, 2215, 512, 2180, 2209, 1881, 1919, 448,
	1480, 537, 2073, 2074, 563, 500, 1391, 1395, 559, 2030,
	1222, 1179, 819, 539, 1690, 513, 451, 507, 315, 59,
	59, 426, 401, 1552, 758, 759, 1737, 1736, 1432, 508,
	511, 1220, 1219, 431, 793, 535, 355, 1218, 496, 506,
	425, 568, 418, 418, 418, 465, 464, 355, 355, 538,
	849, 540, 1727, 566, 567, 850, 1217, 495, 848, 399,
	398, 939, 1667, 312, 2193, 436, 370, 1560, 617, 617,
	872, 403, 402, 456, 457, 2157, 366, 591, 529, 1534,
	1444, 748, 1385, 1384, 1372, 1641, 1638, 1639, 1640, 1366,
	1212, 1672, 1184, 1671, 1670, 1668, 1152, 763, 902, 2171,
	751, 593, 453, 95, 95, 95, 95, 468, 762, 466,
	450, 775, 330, 543, 788, 1520, 761, 579, 1985, 542,
	555, 556, 2175, 588, 588, 2096, 465, 464, 580, 374,
	355, 355, 453, 355, 1522, 526, 1553, 597, 744, 1446,
	2166, 805, 520, 458, 1568, 2020, 544, 2072, 552, 553,
	1669, 355, 355, 1528, 1251, 2056, 491, 789, 769, 616,
	616, 528, 1170, 59, 552, 553, 1662, 355, 577, 355,
	1368, 825, 859, 1224, 59, 95, 1157, 455, 598, 600,
	422, 599, 1174, 59, 1521, 573, 502, 1194, 1725, 841,
	824, 1920, 1921, 355, 1388, 584, 585, 1917, 2172, 1346,
	768, 1916, 89, 545, 766, 355, 418, 330, 355, 806,
	829, 839, 1169, 89, 767, 1728, 820, 84, 89, 421,
	596, 581, 582, 583, 873, 89, 608, 771, 754, 610,
	388, 741, 89, 400, 355, 355, 880, 95, 576, 89,
	436, 842, 1346, 889, 1485, 330, 1403, 899, 89, 814,
	809, 822, 818, 603, 604, 605, 606, 607, 884, 554,
	895, 787, 557, 1673, 1674, 826, 821, 828, 1265, 1264,
	810, 1423, 882, 1926, 795, 1651, 885, 898, 895, 837,
	838, 330, 388, 830, 831, 813, 803, 776, 777, 778,
	779, 546, 843, 1549, 1552, 827, 1925, 808, 1709, 1704,
	865, 1910, 956, 423, 2204, 390, 865, 865, 389, 1414,
	1412, 330, 1413, 1415, 2169, 2170, 404, 875, 823, 835,
	2188, 2185, 1273, 1887, 2150, 1794, 860, 1986, 1988, 1989,
	1990, 1987, 1274, 878, 439, 444, 445, 2134, 2080, 1996,
	903, 896, 897, 898, 895, 870, 871, 1994, 2028, 2027,
	856, 2174, 2002, 874, 855, 1270, 2129, 390, 876, 1980,
	389, 2187, 867, 868, 869, 940, 941, 942, 943, 944,
	945, 946, 939, 1338, 877, 1995, 989, 989, 994, 2118,
	1979, 1978, 886, 1993, 879, 1424, 954, 1336, 1337, 1335,
	1975, 1969, 955, 942, 943, 944, 945, 946, 939, 1966,
	963, 1965, 1002, 889, 1876, 425, 1869, 1553, 961, 1868,
	1867, 1863, 1546, 950, 1862, 953, 1547, 1550, 965, 1992,
	1003, 929, 1982, 1857, 957, 958, 959, 960, 1715, 951,
	952, 949, 1467, 938, 937, 947, 948, 940, 941, 942,
	943, 944, 945, 946, 939, 896, 897, 898, 895, 1714,
	95, 95, 1713, 1779, 1664, 1991, 1712, 988, 1981, 1183,
	1516, 426, 979, 752, 2101, 2001, 306, 2050, 1551, 1167,
	2049, 59, 996, 1214, 2026, 973, 1466, 492, 493, 494,
	425, 2218, 355, 1154, 884, 1189, 1191, 1187, 1188, 1778,
	1983, 1976, 441, 442, 443, 1182, 1490, 1155, 896, 897,
	898, 895, 885, 355, 995, 2102, 422, 1972, 1971, 1970,
	981, 896, 897, 898, 895, 1912, 1877, 1001, 896, 897,
	898, 895, 617, 1151, 95, 1150, 1865, 896, 897, 898,
	895, 1245, 1435, 1247, 340, 1792, 339, 343, 335, 896,
	897, 898, 895, 1164, 1790, 2196, 1215, 1722, 331, 2025,
	1565, 1271, 1272, 1203, 1204, 1205, 1564, 1563, 330, 350,
	1562, 1181, 896, 897, 898, 895, 1201, 1180, 1206, 975,
	1178, 896, 897, 898, 895, 936, 1208, 935, 1210, 1229,
	906, 907, 908, 909, 910, 911, 912, 904, 2077, 865,
	865, 865, 753, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
	1326, 1327, 1328, 1329, 1330, 1255, 1355, 835, 1340, 1341,
	1211, 1240, 1209, 616, 1237, 1207, 979, 1241, 1242, 1243,
	1244, 1488, 712, 711, 1487, 364, 1450, 2223, 1225, 1226,
	1227, 1221, 1951, 1357, 1230, 363, 1231, 1494, 2076, 1268,
	1450, 1493, 1935, 2186, 324, 1238, 1617, 896, 897, 898,
	895, 2057, 1310, 1946, 896, 897, 898, 895, 1942, 1870,
	1266, 1267, 1941, 1269, 896, 897, 898, 895, 1780, 1305,
	1306, 1307, 1308, 1309, 1777, 602, 1315, 1316, 1317, 1318,
	1333, 896, 897, 898, 895, 1450, 1347, 1769, 1350, 938,
	937, 947, 948, 940, 941, 942, 943, 944, 945, 946,
	939, 356, 2217, 2216, 1339, 1360, 1177, 2199, 1734, 333,
	332, 336, 2195, 2194, 1371, 1177, 2183, 338, 1349, 1351,
	1352, 1348, 1177, 2182, 1699, 1359, 2156, 2155, 1356, 342,
	1358, 1681, 1605, 947, 948, 940, 941, 942, 943, 944,
	945, 946, 939, 796, 1937, 2116, 1582, 1624, 1628, 1630,
	1632, 1634, 1635, 1637, 1581, 1641, 1638, 1639, 1640, 1937,
	2111, 1619, 1620, 1621, 1622, 1603, 1604, 1625, 1497, 1606,
	1495, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615,
	1616, 1623, 1492, 1374, 1233, 2099, 1491, 453, 1489, 1627,
	1629, 1631, 1633, 1636, 2088, 2087, 775, 1937, 2066, 1765,
	1937, 2065, 355, 1937, 2064, 355, 1937, 2063, 453, 1459,
	355, 896, 897, 898, 895, 1400, 1456, 1390, 1449, 393,
	1618, 896, 897, 898, 895, 1764, 1431, 337, 341, 797,
	1354, 345, 798, 1763, 1353, 347, 348, 349, 2055, 2054,
	351, 352, 1361, 1429, 1950, 1949, 790, 896, 897, 898,
	895, 1948, 1947, 355, 601, 896, 897, 898, 895, 1454,
	1700, 388, 1171, 95, 95, 1658, 750, 1440, 1944, 1945,
	1402, 1944, 1943, 1682, 1422, 1937, 1936, 1236, 1684, 1379,
	1443, 1389, 1380, 1450, 1656, 1382, 938, 937, 947, 948,
	940, 941, 942, 943, 944, 945, 946, 939, 1437, 1438,
	893, 1455, 1450, 1642, 1398, 1399, 1378, 818, 1156, 1392,
	1377, 1375, 422, 896, 897, 898, 895, 1450, 1458, 500,
	1386, 1450, 1457, 1236, 1376, 22, 1370, 1369, 1367, 1401,
	1425, 1364, 1363, 1595, 1596, 1679, 390, 1236, 1235, 389,
	1201, 519, 1421, 891, 1426, 498, 1427, 1177, 1176, 499,
	59, 1343, 1433, 1428, 1233, 1430, 1436, 896, 897, 898,
	895, 756, 755, 1185, 1153, 497, 1474, 15, 387, 498,
	609, 6, 575, 1439, 90, 2219, 391, 2165, 1929, 1445,
	1661, 5, 1197, 2159, 1655, 1451, 2141, 1448, 1452, 1453,
	2138, 469, 500, 1477, 1478, 989, 2136, 1508, 989, 2079,
	2017, 1511, 896, 897, 898, 895, 896, 897, 898, 895,
	2005, 2003, 889, 1998, 355, 1960, 1744, 1933, 355, 355,
	1932, 86, 355, 1514, 1931, 1626, 1928, 1461, 1462, 1463,
	1464, 1465, 1923, 1469, 2146, 453, 1654, 1470, 1471, 1472,
	1473, 1515, 1908, 612, 1542, 1754, 1746, 95, 1758, 1761,
	954, 1503, 1751, 1750, 1505, 1717, 1710, 1510, 896, 897,
	898, 895, 1334, 1475, 86, 1482, 1333, 1484, 1486, 425,
	1507, 1404, 1381, 1362, 95, 1587, 1506, 1509, 1653, 59,
	1499, 1498, 1566, 1234, 865, 1512, 1652, 1223, 1500, 1476,
	865, 2144, 1518, 1648, 1523, 1525, 1517, 1216, 1513, 980,
	896, 897, 898, 895, 1647, 978, 1561, 977, 896, 897,
	898, 895, 976, 1519, 974, 896, 897, 898, 895, 355,
	922, 1526, 971, 970, 968, 355, 896, 897, 898, 895,
	967, 966, 2107, 384, 1646, 386, 396, 1569, 1570, 964,
	383, 381, 380, 392, 385, 934, 394, 395, 1675, 933,
	1571, 1572, 1678, 932, 1677, 355, 896, 897, 898, 895,
	931, 1586, 930, 1645, 1573, 1587, 928, 95, 927, 926,
	925, 924, 1589, 923, 920, 919, 1703, 918, 917, 916,
	915, 1660, 1643, 914, 1657, 896, 897, 898, 895, 1649,
	1650, 1644, 913, 376, 772, 588, 1666, 1592, 355, 747,
	355, 588, 1698, 501, 1416, 1680, 750, 1663, 1232, 1683,
	1163, 2163, 1676, 896, 897, 898, 895, 1733, 521, 896,
	897, 898, 895, 1160, 1161, 1166, 1697, 1718, 1165, 1688,
	1707, 1685, 781, 1659, 476, 479, 480, 481, 477, 780,
	478, 482, 2121, 1701, 1706, 784, 1706, 1702, 1708, 782,
	785, 59, 1711, 2203, 783, 1591, 1716, 938, 937, 947,
	948, 940, 941, 942, 943, 944, 945, 946, 939, 1590,
	1724, 1365, 561, 560, 588, 1202, 1720, 896, 897, 898,
	895, 786, 1738, 480, 481, 1342, 1187, 1188, 1748, 1749,
	1529, 896, 897, 898, 895, 525, 1686, 1723, 1747, 1536,
	1195, 845, 1752, 1687, 1879, 1756, 1732, 896, 897, 898,
	895, 1755, 1535, 887, 484, 1265, 1264, 355, 355, 531,
	532, 95, 1149, 527, 2160, 2084, 2082, 2037, 2036, 1829,
	2034, 453, 1798, 1963, 1961, 1846, 1848, 1791, 1846, 1846,
	1542, 1759, 1731, 1762, 1696, 1695, 1585, 364, 453, 530,
	1770, 363, 1584, 1772, 1460, 1774, 1787, 363, 1767, 1775,
	1776, 1773, 1771, 1442, 1832, 750, 2148, 2147, 2147, 1843,
	1827, 1782, 1785, 1766, 1383, 1840, 1841, 467, 2148, 1795,
	1823, 1828, 298, 1849, 1850, 483, 1768, 378, 32, 1,
	1847, 1851, 1311, 1783, 1784, 533, 2161, 471, 760, 438,
	462, 757, 461, 459, 865, 85, 1859, 476, 479, 480,
	481, 477, 1344, 478, 482, 1833, 476, 479, 480, 481,
	477, 1276, 478, 482, 698, 1866, 984, 990, 1999, 2120,
	1883, 2152, 1852, 2078, 2123, 770, 684, 2029, 1530, 1952,
	2031, 1873, 938, 937, 947, 948, 940, 941, 942, 943,
	944, 945, 946, 939, 1954, 1396, 1872, 1393, 522, 1501,
	1502, 710, 701, 969, 355, 703, 742, 440, 700, 1858,
	1578, 365, 437, 95, 1886, 379, 1860, 1691, 1739, 1760,
	1743, 2212, 1848, 2202, 2178, 1911, 2158, 2045, 2197, 2089,
	2139, 2132, 2041, 1843, 1839, 1880, 1545, 1909, 328, 1781,
	852, 1871, 569, 407, 1913, 2018, 773, 1554, 1927, 1410,
	1193, 1172, 801, 1884, 1885, 1964, 1888, 1889, 1890, 1891,
	329, 1835, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
	1902, 1903, 1904, 1905, 1906, 1907, 1934, 1997, 1938, 2069,
	1720, 2004, 368, 1834, 1836, 938, 937, 947, 948, 940,
	941, 942, 943, 944, 945, 946, 939, 1196, 1481, 453,
	369, 1199, 453, 453, 453, 491, 1977, 1198, 453, 1256,
	1962, 905, 1332, 972, 962, 619, 1483, 675, 1939, 938,
	937, 947, 948, 940, 941, 942, 943, 944, 945, 946,
	939, 2039, 669, 2024, 1575, 59, 1574, 2013, 355, 355,
	1967, 1968, 2023, 1842, 1838, 2006, 1973, 1974, 2014, 2015,
	2016, 2040, 840, 31, 30, 1830, 29, 2033, 485, 894,
	998, 699, 97, 1213, 999, 2038, 1874, 2047, 2048, 95,
	2125, 683, 682, 681, 680, 475, 453, 937, 947, 948,
	940, 941, 942, 943, 944, 945, 946, 939, 453, 473,
	472, 320, 319, 892, 2104, 2103, 2059, 2053, 2060, 1788,
	1922, 1984, 1918, 1914, 882, 2051, 1797, 1796, 1824, 1825,
	1831, 1601, 1597, 1599, 588, 588, 1600, 1598, 1665, 1593,
	2075, 1540, 2062, 1541, 2083, 1538, 2085, 2086, 2081, 1537,
	1162, 1158, 986, 993, 2067, 447, 2092, 2094, 816, 92,
	318, 1239, 11, 10, 764, 9, 14, 21, 2100, 20,
	2127, 19, 54, 53, 52, 2112, 2113, 2114, 2115, 2131,
	51, 18, 2126, 8, 50, 2058, 49, 48, 17, 16,
	44, 42, 41, 40, 2130, 938, 937, 947, 948, 940,
	941, 942, 943, 944, 945, 946, 939, 2135, 39, 2137,
	2142, 38, 37, 2145, 2143, 36, 43, 35, 34, 2154,
	33, 12, 2149, 63, 62, 61, 60, 453, 23, 453,
	2151, 24, 25, 70, 69, 66, 805, 2162, 805, 2164,
	68, 67, 65, 28, 2117, 13, 7, 2127, 2177, 4,
	2, 0, 0, 2173, 0, 0, 453, 2167, 0, 2126,
	2176, 0, 2181, 0, 0, 805, 2184, 0, 0, 0,
	0, 0, 2154, 2190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2200, 0, 0, 0, 0, 0,
	0, 0, 2201, 0, 0, 0, 0, 0, 0, 2211,
	0, 2210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2222, 2221, 2220, 2211, 0, 0, 0, 0, 0,
	0, 0, 0, 1112, 1099, 0, 1061, 1114, 1035, 1050,
	1122, 1051, 1052, 1086, 1014, 1070, 222, 1048, 1006, 1038,
	1039, 1008, 1045, 1009, 1036, 1063, 166, 1034, 1102, 1073,
	192, 1120, 0, 0, 252, 206, 0, 2192, 1066, 1104,
	1068, 1091, 1060, 1087, 1022, 1080, 1115, 1049, 1084, 1116,
	0, 0, 0, 0, 0, 492, 493, 494, 0, 0,
	0, 0, 148, 0, 0, 0, 0, 0, 1083, 1109,
	1047, 0, 151, 1113, 1067, 1085, 0, 0, 1007, 1081,
	0, 1012, 1015, 1121, 1107, 1042, 1043, 0, 0, 0,
	0, 0, 0, 0, 1064, 1069, 1088, 1057, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1040, 0, 1077,
	0, 0, 0, 1017, 1013, 0, 1062, 0, 140, 257,
	271, 149, 248, 284, 154, 255, 145, 221, 244, 142,
	269, 254, 203, 186, 187, 141, 0, 239, 164, 178,
	161, 219, 0, 1111, 296, 160, 287, 1016, 279, 144,
	1148, 278, 218, 266, 270, 204, 198, 143, 268, 202,
	197, 190, 168, 182, 231, 196, 232, 183, 208, 207,
	209, 1132, 1133, 1134, 1135, 1136, 1144, 1145, 0, 1021,
	0, 1041, 1089, 0, 1005, 1097, 1105, 1059, 281, 1108,
	1056, 1055, 1139, 0, 1138, 256, 1140, 1141, 191, 1103,
	1037, 1046, 297, 1044, 242, 224, 1110, 1076, 229, 240,
	194, 267, 233, 272, 258, 280, 236, 234, 136, 259,
	163, 205, 146, 147, 159, 165, 167, 169, 170, 214,
	215, 227, 247, 260, 261, 262, 162, 155, 241, 156,
	180, 157, 137, 249, 158, 138, 228, 265, 1137, 176,
	237, 201, 139, 200, 230, 264, 263, 288, 294, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1146, 0, 1147, 293, 173, 1004, 276, 0, 220,
	1100, 1010, 1020, 1018, 1053, 1078, 1079, 216, 292, 1093,
	1096, 1094, 1123, 245, 0, 0, 0, 0, 0, 185,
	226, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1011, 0, 253, 274, 286, 277, 1054,
	1028, 1065, 285, 1031, 1029, 1092, 1030, 1082, 1125, 210,
	211, 212, 213, 177, 0, 153, 1074, 1058, 1126, 1127,
	1128, 1129, 1130, 1131, 1033, 1106, 172, 179, 0, 181,
	152, 225, 175, 283, 188, 1098, 217, 184, 250, 189,
	195, 238, 282, 223, 243, 150, 273, 251, 199, 174,
	1027, 1032, 1026, 1071, 1072, 1117, 1118, 1119, 1090, 1019,
	1101, 1023, 1025, 1024, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1095, 0, 1075, 135, 0, 193, 1124,
	235, 171, 706, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 677, 0,
	0, 0, 166, 0, 0, 0, 192, 0, 0, 0,
	252, 206, 1496, 0, 0, 0, 720, 726, 1142, 1143,
	289, 290, 291, 275, 0, 0, 0, 670, 0, 0,
	0, 620, 712, 711, 686, 695, 0, 0, 148, 687,
	0, 694, 688, 692, 691, 689, 690, 0, 657, 0,
	0, 0, 0, 0, 0, 618, 674, 0, 678, 938,
	937, 947, 948, 940, 941, 942, 943, 944, 945, 946,
	939, 0, 0, 0, 0, 0, 0, 0, 0, 671,
	672, 0, 0, 0, 0, 707, 0, 673, 0, 0,
	709, 0, 696, 0, 140, 257, 271, 149, 248, 284,
	154, 255, 145, 221, 244, 142, 269, 254, 203, 186,
	187, 141, 0, 239, 164, 178, 161, 219, 693, 705,
	663, 160, 661, 704, 279, 144, 0, 278, 218, 266,
	270, 204, 198, 143, 268, 202, 197, 190, 168, 182,
	231, 196, 232, 183, 208, 207, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 702, 0, 0, 281, 0, 0, 719, 0, 0,
	0, 256, 0, 0, 191, 0, 0, 0, 664, 0,
	242, 224, 729, 0, 229, 240, 194, 267, 233, 272,
	258, 280, 236, 234, 136, 259, 163, 205, 146, 147,
	159, 165, 167, 169, 170, 214, 215, 227, 247, 260,
	261, 262, 162, 155, 241, 156, 180, 157, 137, 249,
	158, 138, 228, 265, 0, 176, 237, 201, 139, 200,
	230, 264, 263, 288, 294, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1313, 1312, 1314,
	293, 173, 0, 276, 717, 220, 728, 713, 714, 715,
	718, 721, 722, 659, 662, 723, 725, 727, 730, 245,
	0, 0, 0, 0, 0, 185, 226, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 253, 274, 286, 660, 0, 0, 0, 285, 0,
	0, 0, 0, 0, 708, 210, 211, 212, 213, 658,
	0, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 179, 0, 181, 152, 225, 175, 283,
	188, 0, 217, 184, 250, 189, 195, 238, 282, 223,
	243, 150, 273, 251, 199, 174, 736, 716, 735, 737,
	738, 734, 739, 740, 724, 679, 0, 732, 731, 733,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 193, 0, 235, 171, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 114, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 0, 0, 289, 290, 291, 275,
	90, 0, 706, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 677, 0,
	0, 0, 166, 0, 0, 0, 192, 0, 0, 0,
	252, 206, 0, 0, 0, 0, 720, 726, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 670, 0, 0,
	0, 620, 712, 711, 686, 695, 0, 0, 148, 687,
	0, 694, 688, 692, 691, 689, 690, 0, 657, 0,
	0, 0, 0, 0, 0, 618, 674, 0, 678, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 671,
	672, 0, 0, 0, 0, 707, 0, 673, 0, 0,
	709, 0, 696, 0, 140, 257, 271, 149, 248, 284,
	154, 255, 145, 221, 244, 142, 269, 254, 203, 186,
	187, 141, 0, 239, 164, 178, 161, 219, 693, 705,
	663, 160, 661, 704, 279, 144, 0, 278, 218, 266,
	270, 204, 198, 143, 268, 202, 197, 190, 168, 182,
	231, 196, 232, 183, 208, 207, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 702, 0, 0, 281, 0, 0, 719, 0, 0,
	0, 256, 0, 0, 191, 0, 0, 0, 664, 0,
	242, 224, 729, 0, 229, 240, 194, 267, 233, 272,
	258, 280, 236, 234, 136, 259, 163, 205, 146, 147,
	159, 165, 167, 169, 170, 214, 215, 227, 247, 260,
	261, 262, 162, 155, 241, 156, 180, 157, 137, 249,
	158, 138, 228, 265, 0, 176, 237, 201, 139, 200,
	230, 264, 263, 288, 294, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 173, 0, 276, 717, 220, 728, 713, 714, 715,
	718, 721, 722, 659, 662, 723, 725, 727, 730, 245,
	0, 0, 0, 0, 0, 185, 226, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 253, 274, 286, 660, 0, 0, 0, 285, 0,
	0, 0, 0, 0, 708, 210, 211, 212, 213, 658,
	0, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 179, 0, 181, 152, 225, 175, 283,
	188, 0, 217, 184, 250, 189, 195, 238, 282, 223,
	243, 150, 273, 251, 199, 174, 736, 716, 735, 737,
	738, 734, 739, 740, 724, 679, 0, 732, 731, 733,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 193, 89, 235, 171, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 114, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 706, 0, 289, 290, 291, 275,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	677, 0, 0, 0, 166, 866, 0, 0, 192, 0,
	0, 0, 252, 206, 0, 0, 0, 0, 720, 726,
	0, 0, 0, 0, 0, 0, 862, 0, 0, 670,
	0, 0, 0, 620, 712, 711, 686, 695, 0, 0,
	148, 687, 0, 694, 688, 692, 691, 689, 690, 0,
	657, 0, 0, 0, 0, 0, 0, 618, 674, 0,
	678, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 671, 672, 0, 0, 0, 0, 707, 0, 673,
	0, 0, 863, 0, 696, 0, 140, 257, 271, 149,
	248, 284, 154, 255, 145, 221, 244, 142, 269, 254,
	203, 186, 187, 141, 0, 239, 164, 178, 161, 219,
	693, 705, 663, 160, 661, 704, 279, 144, 0, 278,
	218, 266, 270, 204, 198, 143, 268, 202, 197, 190,
	168, 182, 231, 196, 232, 183, 208, 207, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 702, 0, 0, 281, 0, 0, 719,
	0, 0, 0, 256, 0, 0, 191, 0, 0, 0,
	664, 0, 242, 224, 729, 0, 229, 240, 194, 267,
	233, 272, 258, 280, 236, 234, 136, 259, 163, 205,
	146, 147, 159, 165, 167, 169, 170, 214, 215, 227,
	247, 260, 261, 262, 162, 155, 241, 156, 180, 157,
	137, 249, 158, 138, 228, 265, 0, 176, 237, 201,
	139, 200, 230, 264, 263, 288, 294, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 173, 0, 276, 717, 220, 728, 713,
	714, 715, 718, 721, 722, 659, 662, 723, 725, 727,
	730, 245, 0, 0, 0, 0, 0, 185, 226, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 253, 274, 286, 660, 0, 0, 0,
	285, 0, 0, 0, 0, 0, 708, 210, 211, 212,
	213, 658, 0, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 179, 0, 181, 152, 225,
	175, 283, 188, 0, 217, 184, 250, 189, 195, 238,
	282, 223, 243, 150, 273, 251, 199, 174, 736, 716,
	735, 737, 738, 734, 739, 740, 724, 679, 0, 732,
	731, 733, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 193, 0, 235, 171,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 114, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 706, 0, 289, 290,
	291, 275, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 677, 0, 0, 0, 166, 2191, 0, 0,
	192, 0, 0, 0, 252, 206, 0, 0, 0, 0,
	720, 726, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 670, 0, 0, 0, 620, 712, 711, 686, 695,
	0, 0, 148, 687, 0, 694, 688, 692, 691, 689,
	690, 0, 657, 0, 0, 0, 0, 0, 0, 618,
	674, 0, 678, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 671, 672, 0, 0, 0, 0, 707,
	0, 673, 0, 0, 709, 0, 696, 0, 140, 257,
	271, 149, 248, 284, 154, 255, 145, 221, 244, 142,
	269, 254, 203, 186, 187, 141, 0, 239, 164, 178,
	161, 219, 693, 705, 663, 160, 661, 704, 279, 144,
	0, 278, 218, 266, 270, 204, 198, 143, 268, 202,
	197, 190, 168, 182, 231, 196, 232, 183, 208, 207,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 0, 0, 281, 0,
	0, 719, 0, 0, 0, 256, 0, 0, 191, 0,
	0, 0, 664, 0, 242, 224, 729, 0, 229, 240,
	194, 267, 233, 272, 258, 280, 236, 234, 136, 259,
	163, 205, 146, 147, 159, 165, 167, 169, 170, 214,
	215, 227, 247, 260, 261, 262, 162, 155, 241, 156,
	180, 157, 137, 249, 158, 138, 228, 265, 0, 176,
	237, 201, 139, 200, 230, 264, 263, 288, 294, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 173, 0, 276, 717, 220,
	728, 713, 714, 715, 718, 721, 722, 659, 662, 723,
	725, 727, 730, 245, 0, 0, 0, 0, 0, 185,
	226, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 253, 274, 286, 660, 0,
	0, 0, 285, 0, 0, 0, 0, 0, 708, 210,
	211, 212, 213, 658, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 179, 0, 181,
	152, 225, 175, 283, 188, 0, 217, 184, 250, 189,
	195, 238, 282, 223, 243, 150, 273, 251, 199, 174,
	736, 716, 735, 737, 738, 734, 739, 740, 724, 679,
	0, 732, 731, 733, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 193, 0,
	235, 171, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 114, 637, 638,
	639, 640, 641, 642, 643, 644, 645, 646, 647, 648,
	649, 650, 651, 652, 653, 654, 655, 656, 706, 0,
	289, 290, 291, 275, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 677, 0, 0, 0, 166, 866,
	0, 0, 192, 0, 0, 0, 252, 206, 0, 0,
	0, 0, 720, 726, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 670, 0, 0, 0, 620, 712, 711,
	686, 695, 0, 0, 148, 687, 0, 694, 688, 692,
	691, 689, 690, 0, 657, 0, 0, 0, 0, 0,
	0, 618, 674, 0, 678, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 671, 672, 0, 0, 0,
	0, 707, 0, 673, 0, 0, 709, 0, 696, 0,
	140, 257, 271, 149, 248, 284, 154, 255, 145, 221,
	244, 142, 269, 254, 203, 186, 187, 141, 0, 239,
	164, 178, 161, 219, 693, 705, 663, 160, 661, 704,
	279, 144, 0, 278, 218, 266, 270, 204, 198, 143,
	268, 202, 197, 190, 168, 182, 231, 196, 232, 183,
	208, 207, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 702, 0, 0,
	281, 0, 0, 719, 0, 0, 0, 256, 0, 0,
	191, 0, 0, 0, 664, 0, 242, 224, 729, 0,
	229, 240, 194, 267, 233, 272, 258, 280, 236, 234,
	136, 259, 163, 205, 146, 147, 159, 165, 167, 169,
	170, 214, 215, 227, 247, 260, 261, 262, 162, 155,
	241, 156, 180, 157, 137, 249, 158, 138, 228, 265,
	0, 176, 237, 201, 139, 200, 230, 264, 263, 288,
	294, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 173, 0, 276,
	717, 220, 728, 713, 714, 715, 718, 721, 722, 659,
	662, 723, 725, 727, 730, 245, 0, 0, 0, 0,
	0, 185, 226, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 253, 274, 286,
	660, 0, 0, 0, 285, 0, 0, 0, 0, 0,
	708, 210, 211, 212, 213, 658, 0, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 179,
	0, 181, 152, 225, 175, 283, 188, 0, 217, 184,
	250, 189, 195, 238, 282, 223, 243, 150, 273, 251,
	199, 174, 736, 716, 735, 737, 738, 734, 739, 740,
	724, 679, 0, 732, 731, 733, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	193, 0, 235, 171, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 114,
	637, 638, 639, 640, 641, 642, 643, 644, 645, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	0, 0, 289, 290, 291, 275, 706, 0, 0, 1468,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 677, 0, 0, 0, 166, 0, 0, 0,
	192, 0, 0, 0, 252, 206, 0, 0, 0, 0,
	720, 726, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 670, 0, 0, 0, 620, 712, 711, 686, 695,
	0, 0, 148, 687, 0, 694, 688, 692, 691, 689,
	690, 0, 657, 0, 0, 0, 0, 0, 0, 618,
	674, 0, 678, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 671, 672, 0, 0, 0, 0, 707,
	0, 673, 0, 0, 709, 0, 696, 0, 140, 257,
	271, 149, 248, 284, 154, 255, 145, 221, 244, 142,
	269, 254, 203, 186, 187, 141, 0, 239, 164, 178,
	161, 219, 693, 705, 663, 160, 661, 704, 279, 144,
	0, 278, 218, 266, 270, 204, 198, 143, 268, 202,
	197, 190, 168, 182, 231, 196, 232, 183, 208, 207,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 0, 0, 281, 0,
	0, 719, 0, 0, 0, 256, 0, 0, 191, 0,
	0, 0, 664, 0, 242, 224, 729, 0, 229, 240,
	194, 267, 233, 272, 258, 280, 236, 234, 136, 259,
	163, 205, 146, 147, 159, 165, 167, 169, 170, 214,
	215, 227, 247, 260, 261, 262, 162, 155, 241, 156,
	180, 157, 137, 249, 158, 138, 228, 265, 0, 176,
	237, 201, 139, 200, 230, 264, 263, 288, 294, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 173, 0, 276, 717, 220,
	728, 713, 714, 715, 718, 721, 722, 659, 662, 723,
	725, 727, 730, 245, 0, 0, 0, 0, 0, 185,
	226, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 253, 274, 286, 660, 0,
	0, 0, 285, 0, 0, 0, 0, 0, 708, 210,
	211, 212, 213, 658, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 179, 0, 181,
	152, 225, 175, 283, 188, 0, 217, 184, 250, 189,
	195, 238, 282, 223, 243, 150, 273, 251, 199, 174,
	736, 716, 735, 737, 738, 734, 739, 740, 724, 679,
	0, 732, 731, 733, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 193, 0,
	235, 171, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 114, 637, 638,
	639, 640, 641, 642, 643, 644, 645, 646, 647, 648,
	649, 650, 651, 652, 653, 654, 655, 656, 706, 0,
	289, 290, 291, 275, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 677, 0, 0, 0, 166, 0,
	0, 0, 192, 0, 0, 0, 252, 206, 0, 0,
	0, 0, 720, 726, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 670, 0, 0, 0, 620, 712, 711,
	686, 695, 0, 0, 148, 687, 0, 694, 688, 692,
	691, 689, 690, 0, 657, 0, 0, 0, 0, 0,
	0, 618, 674, 0, 678, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 671, 672, 615, 0, 0,
	0, 707, 0, 673, 0, 0, 709, 0, 696, 0,
	140, 257, 271, 149, 248, 284, 154, 255, 145, 221,
	244, 142, 269, 254, 203, 186, 187, 141, 0, 239,
	164, 178, 161, 219, 693, 705, 663, 160, 661, 704,
	279, 144, 0, 278, 218, 266, 270, 204, 198, 143,
	268, 202, 197, 190, 168, 182, 231, 196, 232, 183,
	208, 207, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 702, 0, 0,
	281, 0, 0, 719, 0, 0, 0, 256, 0, 0,
	191, 0, 0, 0, 664, 0, 242, 224, 729, 0,
	229, 240, 194, 267, 233, 272, 258, 280, 236, 234,
	136, 259, 163, 205, 146, 147, 159, 165, 167, 169,
	170, 214, 215, 227, 247, 260, 261, 262, 162, 155,
	241, 156, 180, 157, 137, 249, 158, 138, 228, 265,
	0, 176, 237, 201, 139, 200, 230, 264, 263, 288,
	294, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 173, 0, 276,
	717, 220, 728, 713, 714, 715, 718, 721, 722, 659,
	662, 723, 725, 727, 730, 245, 0, 0, 0, 0,
	0, 185, 226, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 253, 274, 286,
	660, 0, 0, 0, 285, 0, 0, 0, 0, 0,
	708, 210, 211, 212, 213, 658, 0, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 179,
	0, 181, 152, 225, 175, 283, 188, 0, 217, 184,
	250, 189, 195, 238, 282, 223, 243, 150, 273, 251,
	199, 174, 736, 716, 735, 737, 738, 734, 739, 740,
	724, 679, 0, 732, 731, 733, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	193, 0, 235, 171, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 114,
	637, 638, 639, 640, 641, 642, 643, 644, 645, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	706, 0, 289, 290, 291, 275, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 677, 0, 0, 0,
	166, 0, 0, 0, 192, 0, 0, 0, 252, 206,
	0, 0, 0, 0, 720, 726, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 670, 0, 0, 0, 620,
	712, 711, 686, 695, 0, 0, 148, 687, 0, 694,
	688, 692, 691, 689, 690, 0, 657, 0, 0, 0,
	0, 0, 0, 618, 674, 0, 678, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 671, 672, 0,
	0, 0, 0, 707, 0, 673, 0, 0, 709, 0,
	696, 0, 140, 257, 271, 149, 248, 284, 154, 255,
	145, 221, 244, 142, 269, 254, 203, 186, 187, 141,
	0, 239, 164, 178, 161, 219, 693, 705, 663, 160,
	661, 704, 279, 144, 0, 278, 218, 266, 270, 204,
	198, 143, 268, 202, 197, 190, 168, 182, 231, 196,
	232, 183, 208, 207, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 702,
	0, 0, 281, 0, 0, 719, 0, 0, 0, 256,
	0, 0, 191, 0, 0, 0, 664, 0, 242, 224,
	729, 0, 229, 240, 194, 267, 233, 272, 258, 280,
	236, 234, 136, 259, 163, 205, 146, 147, 159, 165,
	167, 169, 170, 214, 215, 227, 247, 260, 261, 262,
	162, 155, 241, 156, 180, 157, 137, 249, 158, 138,
	228, 265, 0, 176, 237, 201, 139, 200, 230, 264,
	263, 288, 294, 295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 173,
	0, 276, 717, 220, 728, 713, 714, 715, 718, 721,
	722, 659, 662, 723, 725, 727, 730, 245, 0, 0,
	0, 0, 0, 185, 226, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 253,
	274, 286, 660, 0, 0, 0, 285, 0, 0, 0,
	0, 0, 708, 210, 211, 212, 213, 658, 0, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 179, 0, 181, 152, 225, 175, 283, 188, 0,
	217, 184, 250, 189, 195, 238, 282, 223, 243, 150,
	273, 251, 199, 174, 736, 716, 735, 737, 738, 734,
	739, 740, 724, 679, 0, 732, 731, 733, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 193, 0, 235, 171, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 114, 637, 638, 639, 640, 641, 642, 643, 644,
	645, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 706, 0, 289, 290, 291, 275, 0, 0,
	0, 0, 222, 0, 1257, 0, 0, 0, 677, 0,
	0, 0, 166, 0, 0, 0, 192, 0, 0, 0,
	252, 206, 0, 0, 0, 0, 720, 726, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 670, 0, 0,
	0, 620, 712, 711, 686, 695, 0, 0, 148, 687,
	0, 694, 688, 692, 691, 689, 690, 0, 657, 0,
	0, 0, 0, 0, 0, 0, 674, 0, 678, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 671,
	672, 0, 0, 0, 0, 707, 0, 673, 0, 0,
	709, 0, 696, 0, 140, 257, 271, 149, 248, 284,
	154, 255, 145, 221, 244, 142, 269, 254, 203, 186,
	187, 141, 0, 239, 164, 178, 161, 219, 693, 705,
	663, 160, 661, 704, 279, 144, 0, 278, 218, 266,
	270, 204, 198, 143, 268, 202, 197, 190, 168, 182,
	231, 196, 232, 183, 208, 207, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 702, 0, 0, 281, 0, 0, 719, 0, 0,
	0, 256, 0, 0, 191, 0, 0, 0, 664, 0,
	242, 224, 729, 0, 229, 240, 194, 267, 233, 272,
	258, 280, 236, 234, 136, 259, 163, 205, 146, 147,
	159, 165, 167, 169, 170, 214, 215, 227, 247, 260,
	261, 262, 162, 155, 241, 156, 180, 157, 137, 249,
	158, 138, 228, 265, 0, 176, 237, 201, 139, 200,
	230, 264, 263, 288, 1258, 1259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 173, 0, 276, 717, 220, 728, 713, 714, 715,
	718, 721, 722, 659, 662, 723, 725, 727, 730, 245,
	0, 0, 0, 0, 0, 185, 226, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 253, 274, 286, 660, 0, 0, 0, 285, 0,
	0, 0, 0, 0, 708, 210, 211, 212, 213, 658,
	0, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 179, 0, 181, 152, 225, 175, 283,
	188, 0, 217, 184, 250, 189, 195, 238, 282, 223,
	243, 150, 273, 251, 199, 174, 736, 716, 735, 737,
	738, 734, 739, 740, 724, 679, 0, 732, 731, 733,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 193, 0, 235, 171, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 114, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 706, 0, 289, 290, 291, 275,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	677, 0, 0, 0, 166, 0, 0, 0, 192, 0,
	0, 0, 252, 206, 0, 0, 0, 0, 720, 726,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 670,
	0, 0, 0, 620, 712, 711, 686, 695, 0, 0,
	148, 687, 0, 694, 688, 692, 691, 689, 690, 0,
	657, 0, 0, 0, 0, 0, 0, 0, 674, 0,
	678, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 671, 672, 0, 0, 0, 0, 707, 0, 673,
	0, 0, 709, 0, 696, 0, 140, 257, 271, 149,
	248, 284, 154, 255, 145, 221, 244, 142, 269, 254,
	203, 186, 187, 141, 0, 239, 164, 178, 161, 219,
	693, 705, 663, 160, 661, 704, 279, 144, 0, 278,
	218, 266, 270, 204, 198, 143, 268, 202, 197, 190,
	168, 182, 231, 196, 232, 183, 208, 207, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 702, 0, 0, 281, 0, 0, 719,
	0, 0, 0, 256, 0, 0, 191, 0, 0, 0,
	664, 0, 242, 224, 729, 0, 229, 240, 194, 267,
	233, 272, 258, 280, 236, 234, 136, 259, 163, 205,
	146, 147, 159, 165, 167, 169, 170, 214, 215, 227,
	247, 260, 261, 262, 162, 155, 241, 156, 180, 157,
	137, 249, 158, 138, 228, 265, 0, 176, 237, 201,
	139, 200, 230, 264, 263, 288, 294, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 173, 0, 276, 717, 220, 728, 713,
	714, 715, 718, 721, 722, 659, 662, 723, 725, 727,
	730, 245, 0, 0, 0, 0, 0, 185, 226, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 253, 274, 286, 660, 0, 0, 0,
	285, 0, 0, 0, 0, 0, 708, 210, 211, 212,
	213, 658, 0, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 179, 0, 181, 152, 225,
	175, 283, 188, 0, 217, 184, 250, 189, 195, 238,
	282, 223, 243, 150, 273, 251, 199, 174, 736, 716,
	735, 737, 738, 734, 739, 740, 724, 679, 0, 732,
	731, 733, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 193, 0, 235, 171,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 114, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 706, 0, 289, 290,
	291, 275, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 677, 0, 0, 0, 166, 0, 0, 0,
	192, 0, 0, 0, 252, 206, 0, 0, 0, 0,
	720, 726, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 712, 711, 686, 695,
	0, 0, 148, 687, 0, 694, 688, 692, 691, 689,
	690, 0, 657, 0, 0, 0, 0, 0, 0, 618,
	674, 0, 678, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 671, 672, 0, 0, 0, 0, 707,
	0, 673, 0, 0, 709, 0, 696, 0, 140, 257,
	271, 149, 248, 284, 154, 255, 145, 221, 244, 142,
	269, 254, 203, 186, 187, 141, 0, 239, 164, 178,
	161, 219, 693, 705, 663, 160, 661, 704, 279, 144,
	0, 278, 218, 266, 270, 204, 198, 143, 268, 202,
	197, 190, 168, 182, 231, 196, 232, 183, 208, 207,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 0, 0, 281, 0,
	0, 719, 0, 0, 0, 256, 0, 0, 191, 0,
	0, 0, 664, 0, 242, 224, 729, 0, 229, 240,
	194, 267, 233, 272, 258, 280, 236, 234, 136, 259,
	163, 205, 146, 147, 159, 165, 167, 169, 170, 214,
	215, 227, 247, 260, 261, 262, 162, 155, 241, 156,
	180, 157, 137, 249, 158, 138, 228, 265, 0, 176,
	237, 201, 139, 200, 230, 264, 263, 288, 294, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 173, 0, 276, 717, 220,
	728, 713, 714, 715, 718, 721, 722, 659, 662, 723,
	725, 727, 730, 245, 0, 0, 0, 0, 0, 185,
	226, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 253, 274, 286, 660, 0,
	0, 0, 285, 0, 0, 0, 0, 0, 708, 210,
	211, 212, 213, 658, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 179, 0, 181,
	152, 225, 175, 283, 188, 0, 217, 184, 250, 189,
	195, 238, 282, 223, 243, 150, 273, 251, 199, 174,
	736, 716, 735, 737, 738, 734, 739, 740, 724, 679,
	0, 732, 731, 733, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 193, 0,
	235, 171, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 114, 637, 638,
	639, 640, 641, 642, 643, 644, 645, 646, 647, 648,
	649, 650, 651, 652, 653, 654, 655, 656, 0, 0,
	289, 290, 291, 275, 340, 0, 339, 343, 335, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 331, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 350,
	192, 0, 0, 0, 252, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 353, 0, 0, 354, 0,
	0, 0, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 257,
	271, 149, 248, 284, 154, 255, 145, 221, 244, 142,
	269, 254, 203, 186, 187, 141, 0, 239, 164, 178,
	161, 219, 0, 0, 296, 160, 287, 0, 279, 144,
	0, 278, 218, 266, 270, 204, 198, 143, 268, 202,
	197, 190, 168, 182, 231, 196, 232, 183, 208, 207,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 333,
	332, 336, 0, 0, 0, 0, 0, 338, 281, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 191, 342,
	0, 0, 297, 0, 242, 224, 0, 0, 229, 240,
	194, 267, 233, 334, 258, 280, 236, 358, 136, 259,
	163, 205, 146, 147, 159, 165, 167, 169, 170, 214,
	215, 227, 247, 260, 261, 262, 162, 155, 241, 156,
	180, 157, 137, 249, 158, 138, 228, 265, 1296, 176,
	237, 201, 139, 200, 230, 264, 263, 288, 294, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 173, 0, 276, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 216, 292, 0,
	0, 0, 0, 245, 0, 0, 0, 337, 341, 344,
	226, 345, 346, 0, 0, 347, 348, 349, 0, 0,
	351, 352, 0, 0, 0, 253, 274, 286, 277, 0,
	0, 0, 285, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 177, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 179, 0, 181,
	152, 225, 175, 283, 188, 0, 217, 184, 250, 189,
	195, 238, 282, 223, 243, 150, 273, 251, 199, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1292, 0, 1289, 0, 0, 0, 1291, 1288, 1290, 1294,
	1295, 0, 0, 0, 1293, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 193, 0,
	235, 171, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 0, 0,
	289, 290, 291, 275, 340, 0, 339, 343, 335, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 331, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 350,
	192, 0, 0, 0, 252, 206, 1277, 1278, 1279, 1280,
	1281, 1282, 1283, 1284, 1285, 1286, 1287, 1299, 1300, 1301,
	1302, 1303, 1304, 1297, 1298, 353, 0, 0, 354, 0,
	0, 0, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 257,
	271, 149, 248, 284, 154, 255, 145, 221, 244, 142,
	269, 254, 203, 186, 187, 141, 0, 239, 164, 178,
	161, 219, 0, 0, 296, 160, 287, 0, 279, 144,
	0, 278, 218, 266, 270, 204, 198, 143, 268, 202,
	197, 190, 168, 182, 231, 196, 232, 183, 208, 207,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 333,
	332, 336, 0, 0, 0, 0, 0, 338, 281, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 191, 342,
	0, 0, 297, 0, 242, 224, 0, 0, 229, 240,
	194, 267, 233, 334, 258, 280, 236, 234, 136, 259,
	163, 205, 146, 147, 159, 165, 167, 169, 170, 214,
	215, 227, 247, 260, 261, 262, 162, 155, 241, 156,
	180, 157, 137, 249, 158, 138, 228, 265, 0, 176,
	237, 201, 139, 200, 230, 264, 263, 288, 294, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 173, 0, 276, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 216, 292, 0,
	0, 0, 0, 245, 0, 0, 0, 337, 341, 344,
	226, 345, 346, 0, 0, 347, 348, 349, 0, 0,
	351, 352, 0, 0, 0, 253, 274, 286, 277, 0,
	0, 0, 285, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 177, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 179, 0, 181,
	152, 225, 175, 283, 188, 0, 217, 184, 250, 189,
	195, 238, 282, 223, 243, 150, 273, 251, 199, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 193, 0,
	235, 171, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 0, 0,
	289, 290, 291, 275, 90, 0, 26, 46, 27, 0,
	0, 0, 0, 0, 0, 0, 222, 300, 0, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	192, 0, 0, 0, 252, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 305, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 257,
	271, 149, 248, 284, 154, 255, 145, 221, 244, 142,
	269, 254, 203, 186, 187, 141, 0, 239, 164, 178,
	161, 219, 0, 0, 296, 160, 287, 0, 279, 144,
	0, 278, 218, 266, 270, 204, 198, 143, 268, 202,
	197, 190, 168, 182, 231, 196, 232, 183, 208, 207,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 191, 0,
	0, 0, 297, 0, 242, 224, 0, 0, 229, 240,
	194, 267, 233, 272, 258, 280, 236, 234, 136, 259,
	163, 205, 146, 147, 159, 165, 167, 169, 170, 214,
	215, 227, 247, 260, 261, 262, 162, 155, 241, 156,
	180, 157, 137, 249, 158, 138, 228, 265, 0, 176,
	237, 201, 139, 200, 230, 264, 263, 288, 294, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 173, 0, 276, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 216, 292, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 185,
	226, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 253, 274, 286, 277, 0,
	0, 0, 285, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 301, 303, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 179, 0, 181,
	152, 225, 175, 283, 188, 0, 217, 184, 250, 189,
	195, 238, 282, 223, 243, 150, 273, 251, 199, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 193, 89,
	235, 171, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 222, 0,
	289, 290, 291, 275, 0, 0, 0, 0, 166, 0,
	0, 0, 192, 0, 0, 0, 252, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 1549, 1552, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 257, 271, 149, 248, 284, 154, 255, 145, 221,
	244, 142, 269, 254, 203, 186, 187, 141, 0, 239,
	164, 178, 161, 219, 0, 0, 296, 160, 287, 0,
	279, 144, 0, 278, 218, 266, 270, 204, 198, 143,
	268, 202, 197, 190, 168, 182, 231, 196, 232, 183,
	208, 207, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1553,
	281, 0, 0, 0, 1546, 0, 1545, 256, 1547, 1550,
	191, 0, 0, 0, 297, 0, 242, 224, 0, 0,
	229, 240, 194, 267, 233, 272, 258, 280, 236, 234,
	136, 259, 163, 205, 146, 147, 159, 165, 167, 169,
	170, 214, 215, 227, 247, 260, 261, 262, 162, 155,
	241, 156, 180, 157, 137, 249, 158, 138, 228, 265,
	1551, 176, 237, 201, 139, 200, 230, 264, 263, 288,
	294, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 173, 0, 276,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 216,
	292, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 185, 226, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 253, 274, 286,
	277, 0, 0, 0, 285, 0, 0, 0, 0, 0,
	0, 210, 211, 212, 213, 177, 0, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 179,
	0, 181, 152, 225, 175, 283, 188, 0, 217, 184,
	250, 189, 195, 238, 282, 223, 243, 150, 273, 251,
	199, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	193, 0, 235, 171, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	0, 222, 289, 290, 291, 275, 900, 0, 0, 0,
	0, 166, 0, 0, 0, 192, 0, 0, 0, 252,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 901, 0, 0, 0, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 151, 0, 0,
	896, 897, 898, 895, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 257, 271, 149, 248, 284, 154,
	255, 145, 221, 244, 142, 269, 254, 203, 186, 187,
	141, 0, 239, 164, 178, 161, 219, 0, 0, 296,
	160, 287, 0, 279, 144, 0, 278, 218, 266, 270,
	204, 198, 143, 268, 202, 197, 190, 168, 182, 231,
	196, 232, 183, 208, 207, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	256, 0, 0, 191, 0, 0, 0, 297, 0, 242,
	224, 0, 0, 229, 240, 194, 267, 233, 272, 258,
	280, 236, 234, 136, 259, 163, 205, 146, 147, 159,
	165, 167, 169, 170, 214, 215, 227, 247, 260, 261,
	262, 162, 155, 241, 156, 180, 157, 137, 249, 158,
	138, 228, 265, 0, 176, 237, 201, 139, 200, 230,
	264, 263, 288, 294, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	173, 0, 276, 0, 220, 0, 0, 0, 0, 0,
	0, 0, 216, 292, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 185, 226, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	253, 274, 286, 277, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 177, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 172, 179, 0, 181, 152, 225, 175, 283, 188,
	0, 217, 184, 250, 189, 195, 238, 282, 223, 243,
	150, 273, 251, 199, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 193, 0, 235, 171, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 222, 0, 289, 290, 291, 275, 0,
	0, 0, 0, 166, 406, 0, 0, 192, 0, 0,
	0, 252, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 414, 415, 0, 0, 0, 0, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 257, 271, 149, 248,
	284, 154, 255, 145, 221, 244, 142, 269, 254, 203,
	186, 187, 141, 0, 239, 164, 178, 161, 219, 0,
	0, 296, 160, 287, 390, 279, 144, 389, 278, 218,
	266, 270, 204, 198, 143, 268, 202, 197, 190, 168,
	182, 231, 196, 232, 183, 208, 207, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 191, 0, 0, 0, 297,
	0, 242, 224, 0, 0, 229, 240, 194, 267, 233,
	272, 258, 280, 405, 234, 136, 259, 163, 205, 146,
	147, 159, 165, 167, 169, 170, 214, 215, 227, 247,
	260, 261, 262, 162, 155, 241, 156, 180, 157, 137,
	249, 158, 138, 228, 265, 0, 176, 237, 201, 139,
	200, 230, 264, 263, 288, 294, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 173, 0, 276, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 216, 292, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 185, 226, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 253, 274, 286, 277, 0, 0, 0, 285,
	0, 0, 0, 0, 0, 408, 210, 211, 212, 213,
	177, 0, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 179, 0, 181, 152, 225, 175,
	283, 188, 0, 416, 411, 412, 189, 195, 238, 282,
	223, 243, 150, 273, 251, 413, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 193, 0, 235, 171, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 90, 0, 289, 290, 291,
	275, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 0,
	0, 192, 0, 0, 0, 252, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 987, 0, 96, 0, 0, 0,
	0, 0, 0, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	257, 271, 149, 248, 284, 154, 255, 145, 221, 244,
	142, 269, 254, 203, 186, 187, 141, 0, 239, 164,
	178, 161, 219, 0, 0, 296, 160, 287, 0, 279,
	144, 0, 278, 218, 266, 270, 204, 198, 143, 268,
	202, 197, 190, 168, 182, 231, 196, 232, 183, 208,
	207, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 191,
	0, 0, 0, 297, 0, 242, 224, 0, 0, 229,
	240, 194, 267, 233, 272, 258, 280, 236, 234, 136,
	259, 163, 205, 146, 147, 159, 165, 167, 169, 170,
	214, 215, 227, 247, 260, 261, 262, 162, 155, 241,
	156, 180, 157, 137, 249, 158, 138, 228, 265, 0,
	176, 237, 201, 139, 200, 230, 264, 263, 288, 294,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 173, 0, 276, 0,
	220, 0, 0, 0, 0, 0, 0, 0, 216, 292,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	185, 226, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 253, 274, 286, 277,
	0, 0, 0, 285, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 177, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 172, 179, 0,
	181, 152, 225, 175, 283, 188, 0, 217, 184, 250,
	189, 195, 238, 282, 223, 243, 150, 273, 251, 199,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 193,
	89, 235, 171, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 222,
	0, 289, 290, 291, 275, 0, 0, 0, 0, 166,
	0, 0, 0, 192, 0, 0, 0, 252, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 414,
	415, 0, 0, 0, 0, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 257, 271, 149, 248, 284, 154, 255, 145,
	221, 244, 142, 269, 254, 203, 186, 187, 141, 0,
	239, 164, 178, 161, 219, 0, 0, 296, 160, 287,
	390, 279, 144, 389, 278, 218, 266, 270, 204, 198,
	143, 268, 202, 197, 190, 168, 182, 231, 196, 232,
	183, 208, 207, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 191, 0, 0, 0, 297, 0, 242, 224, 0,
	0, 229, 240, 194, 267, 233, 272, 258, 280, 236,
	234, 136, 259, 163, 205, 146, 147, 159, 165, 167,
	169, 170, 214, 215, 227, 247, 260, 261, 262, 162,
	155, 241, 156, 180, 157, 137, 249, 158, 138, 228,
	265, 0, 176, 237, 201, 139, 200, 230, 264, 263,
	288, 294, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 173, 0,
	276, 0, 220, 0, 0, 0, 0, 0, 0, 0,
	216, 292, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 185, 226, 0, 246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 274,
	286, 277, 0, 0, 0, 285, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 177, 0, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	179, 0, 181, 152, 225, 175, 283, 188, 0, 416,
	411, 412, 189, 195, 238, 282, 223, 243, 150, 273,
	251, 413, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 193, 0, 235, 171, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 0, 0, 289, 290, 291, 275, 222, 0, 570,
	0, 0, 0, 0, 0, 0, 0, 166, 571, 0,
	0, 192, 0, 0, 0, 252, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 353, 0, 0, 354,
	0, 0, 0, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	257, 271, 149, 248, 284, 154, 255, 145, 221, 244,
	142, 269, 254, 203, 186, 187, 141, 0, 239, 164,
	178, 161, 219, 0, 0, 296, 160, 287, 0, 279,
	144, 0, 278, 218, 266, 270, 204, 198, 143, 268,
	202, 197, 190, 168, 182, 231, 196, 232, 183, 208,
	207, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 191,
	0, 0, 0, 297, 0, 242, 224, 0, 0, 229,
	240, 194, 267, 233, 272, 258, 280, 236, 234, 136,
	259, 163, 205, 146, 147, 159, 165, 167, 169, 170,
	214, 215, 227, 247, 260, 261, 262, 162, 155, 241,
	156, 180, 157, 137, 249, 158, 138, 228, 265, 0,
	176, 237, 201, 139, 200, 230, 264, 263, 288, 294,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 173, 0, 276, 0,
	220, 0, 0, 0, 0, 0, 0, 0, 216, 292,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	185, 226, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 253, 274, 286, 277,
	0, 0, 0, 285, 0, 0, 0, 0, 572, 0,
	210, 211, 212, 213, 177, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 172, 179, 0,
	181, 152, 225, 175, 283, 188, 0, 217, 184, 250,
	189, 195, 238, 282, 223, 243, 150, 273, 251, 199,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 193,
	0, 235, 171, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 0,
	0, 289, 290, 291, 275, 222, 0, 854, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 192,
	0, 0, 0, 252, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 353, 0, 0, 354, 0, 0,
	0, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 257, 271,
	149, 248, 284, 154, 255, 145, 221, 244, 142, 269,
	254, 203, 186, 187, 141, 0, 239, 164, 178, 161,
	219, 0, 0, 296, 160, 287, 0, 279, 144, 0,
	278, 218, 266, 270, 204, 198, 143, 268, 202, 197,
	190, 168, 182, 231, 196, 232, 183, 208, 207, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 191, 0, 0,
	0, 297, 0, 242, 224, 0, 0, 229, 240, 194,
	267, 233, 272, 258, 280, 236, 234, 136, 259, 163,
	205, 146, 147, 159, 165, 167, 169, 170, 214, 215,
	227, 247, 260, 261, 262, 162, 155, 241, 156, 180,
	157, 137, 249, 158, 138, 228, 265, 0, 176, 237,
	201, 139, 200, 230, 264, 263, 288, 294, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 173, 0, 276, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 216, 292, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 185, 226,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 274, 286, 277, 0, 0,
	0, 285, 0, 0, 0, 0, 853, 0, 210, 211,
	212, 213, 177, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 179, 0, 181, 152,
	225, 175, 283, 188, 0, 217, 184, 250, 189, 195,
	238, 282, 223, 243, 150, 273, 251, 199, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 193, 0, 235,
	171, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 222, 0, 289,
	290, 291, 275, 0, 0, 0, 0, 166, 592, 0,
	0, 192, 0, 0, 0, 252, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 590,
	0, 0, 0, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 589, 0, 0, 0, 140,
	257, 271, 149, 248, 284, 154, 255, 145, 221, 244,
	142, 269, 254, 203, 186, 187, 141, 0, 239, 164,
	178, 161, 219, 0, 0, 296, 160, 287, 0, 279,
	144, 0, 278, 218, 266, 270, 204, 198, 143, 268,
	202, 197, 190, 168, 182, 231, 196, 232, 183, 208,
	207, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 191,
	0, 0, 0, 297, 0, 242, 224, 0, 0, 229,
	240, 194, 267, 233, 272, 258, 280, 236, 234, 136,
	259, 163, 205, 146, 147, 159, 165, 167, 169, 170,
	214, 215, 227, 247, 260, 261, 262, 162, 155, 241,
	156, 180, 157, 137, 249, 158, 138, 228, 265, 0,
	176, 237, 201, 139, 200, 230, 264, 263, 288, 294,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 173, 0, 276, 0,
	220, 0, 0, 0, 0, 0, 0, 0, 216, 292,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	185, 226, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 253, 274, 286, 277,
	0, 0, 0, 285, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 177, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 172, 179, 0,
	181, 152, 225, 175, 283, 188, 0, 217, 184, 250,
	189, 195, 238, 282, 223, 243, 150, 273, 251, 199,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 193,
	0, 235, 171, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 222,
	0, 289, 290, 291, 275, 0, 0, 0, 0, 166,
	587, 0, 0, 192, 0, 0, 0, 252, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 590, 0, 0, 0, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 589, 0, 0,
	0, 140, 257, 271, 149, 248, 284, 154, 255, 145,
	221, 244, 142, 269, 254, 203, 186, 187, 141, 0,
	239, 164, 178, 161, 219, 0, 0, 296, 160, 287,
	0, 279, 144, 0, 278, 218, 266, 270, 204, 198,
	143, 268, 202, 197, 190, 168, 182, 231, 196, 232,
	183, 208, 207, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 191, 0, 0, 0, 297, 0, 242, 224, 0,
	0, 229, 240, 194, 267, 233, 272, 258, 280, 236,
	234, 136, 259, 163, 205, 146, 147, 159, 165, 167,
	169, 170, 214, 215, 227, 247, 260, 261, 262, 162,
	155, 241, 156, 180, 157, 137, 249, 158, 138, 228,
	265, 0, 176, 237, 201, 139, 200, 230, 264, 263,
	288, 294, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 173, 0,
	276, 0, 220, 0, 0, 0, 0, 0, 0, 0,
	216, 292, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 185, 226, 0, 246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 274,
	286, 277, 0, 0, 0, 285, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 177, 0, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	179, 0, 181, 152, 225, 175, 283, 188, 0, 217,
	184, 250, 189, 195, 238, 282, 223, 243, 150, 273,
	251, 199, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 193, 0, 235, 171, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 222, 0, 289, 290, 291, 275, 0, 0, 0,
	0, 166, 0, 0, 0, 192, 0, 0, 0, 252,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2122, 0,
	96, 712, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 257, 271, 149, 248, 284, 154,
	255, 145, 221, 244, 142, 269, 254, 203, 186, 187,
	141, 0, 239, 164, 178, 161, 219, 0, 0, 296,
	160, 287, 0, 279, 144, 0, 278, 218, 266, 270,
	204, 198, 143, 268, 202, 197, 190, 168, 182, 231,
	196, 232, 183, 208, 207, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	256, 0, 0, 191, 0, 0, 0, 297, 0, 242,
	224, 0, 0, 229, 240, 194, 267, 233, 272, 258,
	280, 236, 234, 136, 259, 163, 205, 146, 147, 159,
	165, 167, 169, 170, 214, 215, 227, 247, 260, 261,
	262, 162, 155, 241, 156, 180, 157, 137, 249, 158,
	138, 228, 265, 0, 176, 237, 201, 139, 200, 230,
	264, 263, 288, 294, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	173, 0, 276, 0, 220, 0, 0, 0, 0, 0,
	0, 0, 216, 292, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 185, 226, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	253, 274, 286, 277, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 177, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 172, 179, 0, 181, 152, 225, 175, 283, 188,
	0, 217, 184, 250, 189, 195, 238, 282, 223, 243,
	150, 273, 251, 199, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 193, 0, 235, 171, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 222, 0, 289, 290, 291, 275, 0,
	0, 0, 0, 166, 0, 0, 0, 192, 0, 0,
	0, 252, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 590, 0, 0, 0, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 589, 0, 0, 0, 140, 257, 271, 149, 248,
	284, 154, 255, 145, 221, 244, 142, 269, 254, 203,
	186, 187, 141, 0, 239, 164, 178, 161, 219, 0,
	0, 296, 160, 287, 0, 279, 144, 0, 278, 218,
	266, 270, 204, 198, 143, 268, 202, 197, 190, 168,
	182, 231, 196, 232, 183, 208, 207, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 191, 0, 0, 0, 297,
	0, 242, 224, 0, 0, 229, 240, 194, 267, 233,
	272, 258, 280, 236, 234, 136, 259, 163, 205, 146,
	147, 159, 165, 167, 169, 170, 214, 215, 227, 247,
	260, 261, 262, 162, 155, 241, 156, 180, 157, 137,
	249, 158, 138, 228, 265, 0, 176, 237, 201, 139,
	200, 230, 264, 263, 288, 294, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 173, 0, 276, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 216, 292, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 185, 226, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 253, 274, 286, 277, 0, 0, 0, 285,
	0, 0, 0, 0, 0, 0, 210, 211, 212, 213,
	177, 0, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 179, 0, 181, 152, 225, 175,
	283, 188, 0, 217, 184, 250, 189, 195, 238, 282,
	223, 243, 150, 273, 251, 199, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 193, 0, 235, 171, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 222, 0, 289, 290, 291,
	275, 0, 0, 0, 0, 166, 0, 0, 0, 192,
	0, 0, 0, 252, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 590, 0, 0,
	0, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1721, 0, 0, 0, 140, 257, 271,
	149, 248, 284, 154, 255, 145, 221, 244, 142, 269,
	254, 203, 186, 187, 141, 0, 239, 164, 178, 161,
	219, 0, 0, 296, 160, 287, 0, 279, 144, 0,
	278, 218, 266, 270, 204, 198, 143, 268, 202, 197,
	190, 168, 182, 231, 196, 232, 183, 208, 207, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 191, 0, 0,
	0, 297, 0, 242, 224, 0, 0, 229, 240, 194,
	267, 233, 272, 258, 280, 236, 234, 136, 259, 163,
	205, 146, 147, 159, 165, 167, 169, 170, 214, 215,
	227, 247, 260, 261, 262, 162, 155, 241, 156, 180,
	157, 137, 249, 158, 138, 228, 265, 0, 176, 237,
	201, 139, 200, 230, 264, 263, 288, 294, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 173, 0, 276, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 216, 292, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 185, 226,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 274, 286, 277, 0, 0,
	0, 285, 0, 0, 0, 0, 0, 0, 210, 211,
	212, 213, 177, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 179, 0, 181, 152,
	225, 175, 283, 188, 0, 217, 184, 250, 189, 195,
	238, 282, 223, 243, 150, 273, 251, 199, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 193, 0, 235,
	171, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 222, 0, 289,
	290, 291, 275, 0, 0, 0, 0, 166, 0, 0,
	0, 192, 0, 0, 0, 252, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 590,
	0, 0, 0, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	257, 271, 149, 248, 284, 154, 255, 145, 221, 244,
	142, 269, 254, 203, 186, 187, 141, 0, 239, 164,
	178, 161, 219, 0, 0, 296, 160, 287, 0, 279,
	144, 0, 278, 218, 266, 270, 204, 198, 143, 268,
	202, 197, 190, 168, 182, 231, 196, 232, 183, 208,
	207, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 191,
	0, 0, 0, 297, 0, 242, 224, 0, 0, 229,
	240, 194, 267, 233, 272, 258, 280, 236, 234, 136,
	259, 163, 205, 146, 147, 159, 165, 167, 169, 170,
	214, 215, 227, 247, 260, 261, 262, 162, 155, 241,
	156, 180, 157, 137, 249, 158, 138, 228, 265, 0,
	176, 237, 201, 139, 200, 230, 264, 263, 288, 294,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 173, 0, 276, 0,
	220, 0, 0, 0, 0, 0, 0, 0, 216, 292,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	185, 226, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 253, 274, 286, 277,
	0, 0, 0, 285, 0, 0, 0, 0, 0, 1524,
	210, 211, 212, 213, 177, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 172, 179, 0,
	181, 152, 225, 175, 283, 188, 0, 217, 184, 250,
	189, 195, 238, 282, 223, 243, 150, 273, 251, 199,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 193,
	0, 235, 171, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 222,
	0, 289, 290, 291, 275, 0, 0, 0, 0, 166,
	1228, 0, 0, 192, 0, 0, 0, 252, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 590, 0, 0, 0, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 257, 271, 149, 248, 284, 154, 255, 145,
	221, 244, 142, 269, 254, 203, 186, 187, 141, 0,
	239, 164, 178, 161, 219, 0, 0, 296, 160, 287,
	0, 279, 144, 0, 278, 218, 266, 270, 204, 198,
	143, 268, 202, 197, 190, 168, 182, 231, 196, 232,
	183, 208, 207, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 191, 0, 0, 0, 297, 0, 242, 224, 0,
	0, 229, 240, 194, 267, 233, 272, 258, 280, 236,
	234, 136, 259, 163, 205, 146, 147, 159, 165, 167,
	169, 170, 214, 215, 227, 247, 260, 261, 262, 162,
	155, 241, 156, 180, 157, 137, 249, 158, 138, 228,
	265, 0, 176, 237, 201, 139, 200, 230, 264, 263,
	288, 294, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 173, 0,
	276, 0, 220, 0, 0, 0, 0, 0, 0, 0,
	216, 292, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 185, 226, 0, 246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 274,
	286, 277, 0, 0, 0, 285, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 177, 0, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	179, 0, 181, 152, 225, 175, 283, 188, 0, 217,
	184, 250, 189, 195, 238, 282, 223, 243, 150, 273,
	251, 199, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 193, 0, 235, 171, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 222, 0, 289, 290, 291, 275, 0, 0, 0,
	0, 166, 0, 0, 0, 192, 0, 0, 0, 252,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 712, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 257, 271, 149, 248, 284, 154,
	255, 145, 221, 244, 142, 269, 254, 203, 186, 187,
	141, 0, 239, 164, 178, 161, 219, 0, 0, 296,
	160, 287, 0, 279, 144, 0, 278, 218, 266, 270,
	204, 198, 143, 268, 202, 197, 190, 168, 182, 231,
	196, 232, 183, 208, 207, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	256, 0, 0, 191, 0, 0, 0, 297, 0, 242,
	224, 0, 0, 229, 240, 194, 267, 233, 272, 258,
	280, 236, 234, 136, 259, 163, 205, 146, 147, 159,
	165, 167, 169, 170, 214, 215, 227, 247, 260, 261,
	262, 162, 155, 241, 156, 180, 157, 137, 249, 158,
	138, 228, 265, 0, 176, 237, 201, 139, 200, 230,
	264, 263, 288, 294, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	173, 0, 276, 0, 220, 0, 0, 0, 0, 0,
	0, 0, 216, 292, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 185, 226, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	253, 274, 286, 277, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 177, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 172, 179, 0, 181, 152, 225, 175, 283, 188,
	0, 217, 184, 250, 189, 195, 238, 282, 223, 243,
	150, 273, 251, 199, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 193, 0, 235, 171, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 222, 0, 289, 290, 291, 275, 0,
	0, 0, 0, 166, 0, 0, 0, 192, 0, 0,
	0, 252, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1856, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 257, 271, 149, 248,
	284, 154, 255, 145, 221, 244, 142, 269, 254, 203,
	186, 187, 141, 0, 239, 164, 178, 161, 219, 0,
	0, 296, 160, 287, 0, 279, 144, 0, 278, 218,
	266, 270, 204, 198, 143, 268, 202, 197, 190, 168,
	182, 231, 196, 232, 183, 208, 207, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 191, 0, 0, 0, 297,
	0, 242, 224, 0, 0, 229, 240, 194, 267, 233,
	272, 258, 280, 236, 234, 136, 259, 163, 205, 146,
	147, 159, 165, 167, 169, 170, 214, 215, 227, 247,
	260, 261, 262, 162, 155, 241, 156, 180, 157, 137,
	249, 158, 138, 228, 265, 0, 176, 237, 201, 139,
	200, 230, 264, 263, 288, 294, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 173, 0, 276, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 216, 292, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 185, 226, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 253, 274, 286, 277, 0, 0, 0, 285,
	0, 0, 0, 0, 0, 0, 210, 211, 212, 213,
	177, 0, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 179, 0, 181, 152, 225, 175,
	283, 188, 0, 217, 184, 250, 189, 195, 238, 282,
	223, 243, 150, 273, 251, 199, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 193, 0, 235, 171, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 222, 0, 289, 290, 291,
	275, 0, 0, 0, 0, 166, 0, 0, 0, 192,
	0, 0, 0, 252, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 590, 0, 0,
	0, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 257, 271,
	149, 248, 284, 154, 255, 145, 221, 244, 142, 269,
	254, 203, 186, 187, 141, 0, 239, 164, 178, 161,
	219, 0, 0, 296, 160, 287, 0, 279, 144, 0,
	278, 218, 266, 270, 204, 198, 143, 268, 202, 197,
	190, 168, 182, 231, 196, 232, 183, 208, 207, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 191, 0, 0,
	0, 297, 0, 242, 224, 0, 0, 229, 240, 194,
	267, 233, 272, 258, 280, 236, 234, 136, 259, 163,
	205, 146, 147, 159, 165, 167, 169, 170, 214, 215,
	227, 247, 260, 261, 262, 162, 155, 241, 156, 180,
	157, 137, 249, 158, 138, 228, 265, 0, 176, 237,
	201, 139, 200, 230, 264, 263, 288, 294, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 173, 0, 276, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 216, 292, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 185, 226,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 274, 286, 277, 0, 0,
	0, 285, 0, 0, 0, 0, 0, 0, 210, 211,
	212, 213, 177, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 179, 0, 181, 152,
	225, 175, 283, 188, 0, 217, 184, 250, 189, 195,
	238, 282, 223, 243, 150, 273, 251, 199, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 193, 0, 235,
	171, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 222, 0, 289,
	290, 291, 275, 0, 0, 0, 0, 166, 0, 0,
	0, 192, 0, 0, 0, 252, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1588, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	257, 271, 149, 248, 284, 154, 255, 145, 221, 244,
	142, 269, 254, 203, 186, 187, 141, 0, 239, 164,
	178, 161, 219, 0, 0, 296, 160, 287, 0, 279,
	144, 0, 278, 218, 266, 270, 204, 198, 143, 268,
	202, 197, 190, 168, 182, 231, 196, 232, 183, 208,
	207, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 191,
	0, 0, 0, 297, 0, 242, 224, 0, 0, 229,
	240, 194, 267, 233, 272, 258, 280, 236, 234, 136,
	259, 163, 205, 146, 147, 159, 165, 167, 169, 170,
	214, 215, 227, 247, 260, 261, 262, 162, 155, 241,
	156, 180, 157, 137, 249, 158, 138, 228, 265, 0,
	176, 237, 201, 139, 200, 230, 264, 263, 288, 294,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 173, 0, 276, 0,
	220, 0, 0, 0, 0, 0, 0, 0, 216, 292,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	185, 226, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 253, 274, 286, 277,
	0, 0, 0, 285, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 177, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 172, 179, 0,
	181, 152, 225, 175, 283, 188, 0, 217, 184, 250,
	189, 195, 238, 282, 223, 243, 150, 273, 251, 199,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 193,
	0, 235, 171, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 222,
	0, 289, 290, 291, 275, 0, 0, 0, 0, 166,
	0, 0, 0, 192, 0, 0, 0, 252, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 257, 271, 149, 248, 284, 154, 255, 145,
	221, 244, 142, 269, 254, 203, 186, 187, 141, 0,
	239, 164, 178, 161, 219, 0, 0, 296, 160, 287,
	0, 279, 144, 0, 278, 218, 266, 270, 204, 198,
	143, 268, 202, 197, 190, 168, 182, 231, 196, 232,
	183, 208, 207, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 191, 0, 0, 0, 297, 0, 242, 224, 0,
	0, 229, 240, 194, 267, 233, 272, 258, 280, 236,
	234, 136, 259, 163, 205, 146, 147, 159, 165, 167,
	169, 170, 214, 215, 227, 247, 260, 261, 262, 162,
	155, 241, 156, 180, 157, 137, 249, 158, 138, 228,
	265, 0, 176, 237, 201, 139, 200, 230, 264, 263,
	288, 294, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 173, 0,
	276, 0, 220, 0, 0, 0, 0, 0, 0, 0,
	216, 292, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 185, 226, 0, 246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 274,
	286, 277, 0, 0, 0, 285, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 177, 0, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	179, 0, 181, 152, 225, 175, 283, 188, 0, 217,
	184, 250, 189, 195, 238, 282, 223, 243, 150, 273,
	251, 199, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 193, 0, 235, 171, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 222, 0, 289, 290, 291, 275, 0, 0, 0,
	0, 166, 0, 0, 0, 192, 0, 0, 0, 252,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 257, 271, 149, 248, 284, 154,
	255, 145, 221, 244, 142, 269, 254, 203, 186, 187,
	141, 0, 239, 164, 178, 161, 219, 0, 0, 296,
	160, 287, 0, 279, 144, 0, 278, 218, 266, 270,
	204, 198, 143, 268, 202, 197, 190, 168, 182, 231,
	196, 232, 183, 208, 207, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	256, 0, 0, 191, 0, 0, 0, 297, 0, 242,
	224, 0, 0, 229, 240, 194, 267, 233, 272, 258,
	280, 236, 234, 136, 259, 163, 205, 146, 147, 159,
	165, 167, 169, 170, 214, 215, 227, 247, 260, 261,
	262, 162, 155, 241, 156, 180, 157, 137, 249, 158,
	138, 228, 265, 0, 176, 237, 201, 139, 200, 230,
	264, 263, 288, 294, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	173, 0, 276, 0, 220, 0, 0, 0, 0, 0,
	0, 0, 216, 292, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 185, 226, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	253, 274, 286, 277, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 177, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 172, 179, 0, 181, 152, 225, 175, 283, 188,
	0, 217, 184, 250, 189, 195, 238, 282, 223, 243,
	150, 273, 251, 199, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 193, 0, 235, 171, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 222, 0, 289, 290, 291, 275, 0,
	0, 0, 0, 166, 0, 0, 0, 192, 0, 0,
	0, 252, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 1246, 0, 0, 0, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 257, 271, 149, 248,
	284, 154, 255, 145, 221, 244, 142, 269, 254, 203,
	186, 187, 141, 0, 239, 164, 178, 161, 219, 0,
	0, 296, 160, 287, 0, 279, 144, 0, 278, 218,
	266, 270, 204, 198, 143, 268, 202, 197, 190, 168,
	182, 231, 196, 232, 183, 208, 207, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 191, 0, 0, 0, 297,
	0, 242, 224, 0, 0, 229, 240, 194, 267, 233,
	272, 258, 280, 236, 234, 136, 259, 163, 205, 146,
	147, 159, 165, 167, 169, 170, 214, 215, 227, 247,
	260, 261, 262, 162, 155, 241, 156, 180, 157, 137,
	249, 158, 138, 228, 265, 0, 176, 237, 201, 139,
	200, 230, 264, 263, 288, 294, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 173, 0, 276, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 216, 292, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 185, 226, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 253, 274, 286, 277, 0, 0, 0, 285,
	0, 0, 0, 0, 0, 0, 210, 211, 212, 213,
	177, 0, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 179, 0, 181, 152, 225, 175,
	283, 188, 0, 217, 184, 250, 189, 195, 238, 282,
	223, 243, 150, 273, 251, 199, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 193, 0, 235, 171, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 222, 0, 289, 290, 291,
	275, 0, 0, 0, 0, 166, 0, 0, 0, 192,
	0, 0, 0, 252, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 353, 0, 0, 354, 0, 0,
	0, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 257, 271,
	149, 248, 284, 154, 255, 145, 221, 244, 142, 269,
	254, 203, 186, 187, 141, 0, 239, 164, 178, 161,
	219, 0, 0, 296, 160, 287, 0, 279, 144, 0,
	278, 218, 266, 270, 204, 198, 143, 268, 202, 197,
	190, 168, 182, 231, 196, 232, 183, 208, 207, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 191, 0, 0,
	0, 297, 0, 242, 224, 0, 0, 229, 240, 194,
	267, 233, 272, 258, 280, 236, 234, 136, 259, 163,
	205, 146, 147, 159, 165, 167, 169, 170, 214, 215,
	227, 247, 260, 261, 262, 162, 155, 241, 156, 180,
	157, 137, 249, 158, 138, 228, 265, 0, 176, 237,
	201, 139, 200, 230, 264, 263, 288, 294, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 173, 0, 276, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 216, 292, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 185, 226,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 274, 286, 277, 0, 0,
	0, 285, 0, 0, 0, 0, 0, 0, 210, 211,
	212, 213, 177, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 179, 0, 181, 152,
	225, 175, 283, 188, 0, 217, 184, 250, 189, 195,
	238, 282, 223, 243, 150, 273, 251, 199, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 193, 0, 235,
	171, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 222, 0, 289,
	290, 291, 275, 0, 0, 0, 0, 166, 0, 0,
	0, 192, 0, 0, 0, 252, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	257, 271, 149, 248, 284, 154, 255, 145, 221, 244,
	142, 269, 254, 203, 186, 187, 141, 0, 239, 164,
	178, 161, 219, 0, 0, 296, 160, 287, 0, 279,
	144, 0, 278, 218, 266, 270, 204, 198, 143, 268,
	202, 197, 190, 168, 182, 231, 196, 232, 183, 208,
	207, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	0, 0, 1190, 0, 0, 0, 256, 0, 0, 191,
	0, 0, 0, 297, 0, 242, 224, 0, 0, 229,
	240, 194, 267, 233, 272, 258, 280, 236, 234, 136,
	259, 163, 205, 146, 147, 159, 165, 167, 169, 170,
	214, 215, 227, 247, 260, 261, 262, 162, 155, 241,
	156, 180, 157, 137, 249, 158, 138, 228, 265, 0,
	176, 237, 201, 139, 200, 230, 264, 263, 288, 294,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 173, 0, 276, 0,
	220, 0, 0, 0, 0, 0, 0, 0, 216, 292,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	185, 226, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 253, 274, 286, 277,
	0, 0, 0, 285, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 177, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 172, 179, 0,
	181, 152, 225, 175, 283, 188, 0, 217, 184, 250,
	189, 195, 238, 282, 223, 243, 150, 273, 251, 199,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 193,
	0, 235, 171, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 222,
	0, 289, 290, 291, 275, 0, 0, 0, 0, 166,
	0, 0, 0, 192, 0, 0, 0, 252, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 590, 0, 0, 0, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 257, 271, 149, 248, 284, 154, 255, 145,
	221, 244, 142, 269, 254, 203, 186, 187, 141, 0,
	239, 164, 178, 161, 219, 0, 0, 296, 160, 287,
	0, 279, 144, 0, 278, 218, 266, 270, 204, 198,
	143, 268, 202, 197, 190, 168, 182, 231, 196, 232,
	183, 208, 207, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 191, 0, 0, 0, 297, 0, 242, 224, 0,
	0, 229, 240, 194, 267, 233, 272, 258, 280, 236,
	234, 136, 259, 163, 205, 146, 147, 159, 165, 167,
	169, 170, 214, 215, 227, 247, 260, 261, 262, 162,
	155, 241, 156, 180, 157, 137, 249, 158, 138, 228,
	265, 0, 176, 237, 201, 139, 200, 230, 264, 263,
	288, 294, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 173, 0,
	276, 0, 220, 0, 0, 0, 0, 0, 0, 0,
	216, 292, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 185, 226, 0, 246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 274,
	286, 844, 0, 0, 0, 285, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 177, 0, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	179, 0, 181, 152, 225, 175, 283, 188, 0, 217,
	184, 250, 189, 195, 238, 282, 223, 243, 150, 273,
	251, 199, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 193, 0, 235, 171, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 222, 0, 289, 290, 291, 275, 0, 0, 0,
	0, 166, 0, 0, 0, 192, 0, 0, 0, 252,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 257, 271, 149, 248, 284, 154,
	255, 145, 221, 244, 142, 269, 254, 203, 186, 187,
	141, 0, 239, 164, 178, 161, 219, 0, 0, 296,
	160, 287, 0, 279, 144, 0, 278, 218, 266, 270,
	204, 198, 143, 268, 202, 197, 190, 168, 182, 231,
	196, 232, 183, 208, 207, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	256, 0, 0, 191, 0, 0, 0, 297, 0, 242,
	224, 0, 0, 229, 240, 194, 267, 233, 272, 258,
	280, 236, 234, 136, 259, 163, 205, 146, 147, 159,
	165, 167, 169, 170, 214, 215, 227, 247, 260, 261,
	262, 162, 155, 241, 156, 180, 157, 137, 249, 158,
	138, 228, 265, 0, 176, 237, 201, 139, 200, 230,
	264, 263, 288, 294, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	173, 0, 276, 0, 220, 0, 0, 0, 0, 0,
	0, 0, 216, 292, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 185, 226, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	253, 274, 286, 277, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 177, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 172, 179, 0, 181, 152, 225, 175, 283, 188,
	0, 217, 184, 250, 189, 195, 238, 282, 223, 243,
	150, 273, 251, 199, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 434, 0,
	0, 135, 0, 193, 0, 235, 171, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 222, 0, 289, 290, 291, 275, 0,
	0, 0, 93, 166, 0, 0, 0, 192, 0, 0,
	0, 252, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 257, 271, 149, 248,
	284, 154, 255, 145, 221, 244, 142, 269, 254, 203,
	186, 187, 141, 0, 239, 164, 178, 161, 219, 0,
	0, 296, 160, 287, 0, 279, 144, 0, 278, 218,
	266, 270, 204, 198, 143, 268, 202, 197, 190, 168,
	182, 231, 196, 232, 183, 208, 207, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 191, 0, 0, 0, 297,
	0, 242, 224, 0, 0, 229, 240, 194, 267, 233,
	272, 258, 280, 236, 234, 136, 259, 163, 205, 146,
	147, 159, 165, 167, 169, 170, 214, 215, 227, 247,
	260, 261, 262, 162, 155, 241, 156, 180, 157, 137,
	249, 158, 138, 228, 265, 0, 176, 237, 201, 139,
	200, 230, 264, 263, 288, 294, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 173, 0, 276, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 216, 292, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 185, 226, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 253, 274, 286, 277, 0, 0, 0, 285,
	0, 0, 0, 0, 0, 0, 210, 211, 212, 213,
	177, 0, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 179, 0, 181, 152, 225, 175,
	283, 188, 0, 217, 184, 250, 189, 195, 238, 282,
	223, 243, 150, 273, 251, 199, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 193, 0, 235, 171, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 222, 0, 289, 290, 291,
	275, 0, 0, 0, 0, 166, 0, 0, 0, 192,
	0, 0, 0, 252, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 257, 271,
	149, 248, 284, 154, 255, 145, 221, 244, 142, 269,
	254, 203, 186, 187, 141, 0, 239, 164, 178, 161,
	219, 0, 0, 296, 160, 287, 0, 279, 144, 0,
	278, 218, 266, 270, 204, 198, 143, 268, 202, 197,
	190, 168, 182, 231, 196, 232, 183, 208, 207, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 191, 0, 0,
	0, 297, 0, 242, 224, 0, 0, 229, 240, 194,
	267, 233, 272, 258, 280, 236, 234, 136, 259, 163,
	205, 146, 147, 159, 165, 167, 169, 170, 214, 215,
	227, 247, 260, 261, 262, 162, 155, 241, 156, 180,
	157, 137, 249, 158, 138, 228, 265, 0, 176, 237,
	201, 139, 200, 230, 264, 263, 288, 294, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 173, 0, 276, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 216, 292, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 185, 226,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 274, 286, 277, 0, 0,
	0, 285, 0, 0, 0, 0, 0, 0, 210, 211,
	212, 213, 177, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 179, 0, 181, 152,
	225, 175, 283, 188, 0, 217, 184, 250, 189, 195,
	238, 282, 223, 243, 150, 273, 251, 199, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 193, 0, 235,
	171, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 0, 222, 289,
	290, 291, 275, 487, 0, 0, 0, 0, 166, 0,
	0, 0, 192, 0, 0, 0, 252, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 492, 493, 494,
	489, 0, 0, 0, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 257, 271, 149, 248, 284, 154, 255, 145, 221,
	244, 142, 269, 254, 203, 186, 187, 141, 0, 239,
	164, 178, 161, 219, 0, 0, 296, 160, 287, 0,
	279, 144, 0, 278, 218, 266, 270, 204, 198, 143,
	268, 202, 197, 190, 168, 182, 231, 196, 232, 183,
	208, 207, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 0, 0, 0, 0, 0, 0, 256, 0, 0,
	191, 0, 0, 0, 297, 0, 242, 224, 0, 0,
	229, 240, 194, 267, 233, 272, 258, 280, 236, 234,
	136, 259, 163, 205, 146, 147, 159, 165, 167, 169,
	170, 214, 215, 227, 247, 260, 261, 262, 162, 155,
	241, 156, 180, 157, 137, 249, 158, 138, 228, 265,
	0, 176, 237, 201, 139, 200, 230, 264, 263, 288,
	294, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 173, 0, 276,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 216,
	292, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 185, 226, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 253, 274, 286,
	277, 0, 0, 0, 285, 0, 0, 0, 0, 0,
	0, 210, 211, 212, 213, 177, 0, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 179,
	0, 181, 152, 225, 175, 283, 188, 0, 217, 184,
	250, 189, 195, 238, 282, 223, 243, 150, 273, 251,
	199, 174, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 192,
	0, 0, 0, 252, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	193, 0, 235, 171, 492, 493, 494, 489, 0, 0,
	0, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 290, 291, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 257, 271,
	149, 248, 284, 154, 255, 145, 221, 244, 142, 269,
	254, 203, 186, 187, 141, 0, 239, 164, 178, 161,
	219, 0, 0, 296, 160, 287, 0, 279, 144, 0,
	278, 218, 266, 270, 204, 198, 143, 268, 202, 197,
	190, 168, 182, 231, 196, 232, 183, 208, 207, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 191, 0, 0,
	0, 297, 0, 242, 224, 0, 0, 229, 240, 194,
	267, 233, 272, 258, 280, 236, 234, 136, 259, 163,
	205, 146, 147, 159, 165, 167, 169, 170, 214, 215,
	227, 247, 260, 261, 262, 162, 155, 241, 156, 180,
	157, 137, 249, 158, 138, 228, 265, 0, 176, 237,
	201, 139, 200, 230, 264, 263, 288, 294, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 173, 0, 276, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 216, 292, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 185, 226,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 274, 286, 277, 0, 0,
	0, 285, 0, 0, 0, 0, 0, 0, 210, 211,
	212, 213, 177, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 179, 0, 181, 152,
	225, 175, 283, 188, 0, 217, 184, 250, 189, 195,
	238, 282, 223, 243, 150, 273, 251, 199, 174, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 0, 192, 0, 0, 0,
	252, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 193, 0, 235,
	171, 492, 493, 494, 0, 0, 0, 0, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 291, 275, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 257, 271, 149, 248, 284,
	154, 255, 145, 221, 244, 142, 269, 254, 203, 186,
	187, 141, 0, 239, 164, 178, 161, 219, 0, 0,
	296, 160, 287, 0, 279, 144, 0, 278, 218, 266,
	270, 204, 198, 143, 268, 202, 197, 190, 168, 182,
	231, 196, 232, 183, 208, 207, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 191, 0, 0, 0, 297, 0,
	242, 224, 0, 0, 229, 240, 194, 267, 233, 272,
	258, 280, 236, 234, 136, 259, 163, 205, 146, 147,
	159, 165, 167, 169, 170, 214, 215, 227, 247, 260,
	261, 262, 162, 155, 241, 156, 180, 157, 137, 249,
	158, 138, 228, 265, 0, 176, 237, 201, 139, 200,
	230, 264, 263, 288, 294, 295, 0, 0, 0, 896,
	897, 898, 895, 0, 0, 1617, 0, 0, 0, 0,
	293, 173, 0, 276, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 216, 292, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 185, 226, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 253, 274, 286, 277, 0, 0, 0, 285, 0,
	0, 0, 0, 0, 0, 210, 211, 212, 213, 177,
	1296, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 179, 0, 181, 152, 225, 175, 283,
	188, 1605, 217, 184, 250, 189, 195, 238, 282, 223,
	243, 150, 273, 251, 199, 174, 1624, 1628, 1630, 1632,
	1634, 1635, 1637, 0, 1641, 1638, 1639, 1640, 0, 0,
	1619, 1620, 1621, 1622, 1603, 1604, 1625, 0, 1606, 0,
	1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616,
	1623, 0, 135, 0, 193, 0, 235, 171, 1627, 1629,
	1631, 1633, 1636, 90, 0, 26, 46, 27, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1821, 0, 0,
	0, 0, 0, 73, 0, 0, 0, 83, 0, 1618,
	0, 0, 0, 0, 0, 0, 289, 290, 291, 275,
	0, 1202, 0, 0, 0, 47, 0, 0, 0, 0,
	86, 0, 1292, 0, 1289, 0, 0, 0, 1291, 1288,
	1290, 1294, 1295, 0, 0, 2207, 1293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1803, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1821, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1202, 0, 0, 0, 0, 79, 80, 0,
	81, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1803, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1277, 1278,
	1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1299,
	1300, 1301, 1302, 1303, 1304, 1297, 1298, 0, 64, 78,
	87, 0, 45, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 72,
	71, 1807, 1821, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1811, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1202, 0, 0, 0,
	0, 0, 1800, 0, 1626, 0, 1802, 1804, 1806, 0,
	1808, 1809, 1810, 1812, 1813, 1814, 1816, 1817, 1818, 1819,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	75, 1803, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1807, 0, 0, 0, 1822, 0, 0, 0,
	0, 0, 0, 1811, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 0, 76, 0, 56, 0,
	0, 0, 0, 1800, 0, 0, 0, 1802, 1804, 1806,
	1820, 1808, 1809, 1810, 1812, 1813, 1814, 1816, 1817, 1818,
	1819, 0, 0, 0, 0, 0, 0, 1799, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 0, 0, 0,
	0, 0, 1815, 0, 0, 0, 0, 1822, 0, 1805,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1820, 0, 0, 0, 0, 1807, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1811, 1799, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 1815, 0, 0, 0, 1800, 0, 0,
	1805, 1802, 1804, 1806, 0, 1808, 1809, 1810, 1812, 1813,
	1814, 1816, 1817, 1818, 1819, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1822, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1820, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1799, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1815, 0, 0,
	0, 0, 0, 0, 1805,
}

var yyPact = [...]int{
	21667, -1000, -302, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 19675, 1741, -1000, 8418,
	20107, 49, 20107, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 200, 16651, 20107, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 7968, 7518, 123, -1000, 1712,
	-1000, -1000, -1000, -1000, 126, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1157, -37, 305,
	307, 312, 312, 9715, 1712, 1338, 184, 30, -1000, 19243,
	684, 21667, 159, 20107, -1000, 361, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16651, 20107,
	-71, 458, -1000, 207, 177, 161, 360, -1000, -1000, -1000,
	-1000, 1736, -1000, 20107, 1310, 20107, 1737, -1000, -1000, -1000,
	1661, 20540, 184, -1000, 1285, 1308, -1000, -1000, 1520, -1000,
	99, 1, -23, 89, -1000, -1000, 146, -1000, -1000, -1000,
	-1000, -1000, 39, -1000, -8, -1000, -16, -1000, -1000, -1000,
	-112, -1000, -1000, -1000, -1000, -1000, 1261, 321, 1538, -171,
	1638, 1676, 1338, 1703, 1669, 0, 178, 178, 194, 178,
	-1000, -1000, -1000, -1000, -1000, -1000, 392, 392, 562, 145,
	-1000, -1000, -124, -142, 392, 392, -142, 5, -1000, 1613,
	1612, -1000, -1000, -1000, -1000, -1000, -1000, 181, -1000, -189,
	-1000, 295, -1000, 281, -1000, 11029, 141, 1288, 519, -1000,
	398, 20107, 20107, 20107, 398, 398, 12331, 11899, 352, -1000,
	1676, 1338, -1000, 1712, 1712, 1169, 990, 181, 181, 181,
	181, 181, 20107, 1286, 20107, -1000, 1360, 5300, 5300, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 191, 1516, -1000,
	20107, 1564, -1000, 351, 768, 902, -1000, -1000, 207, 1277,
	-1000, 323, -1000, -1000, -1000, -1000, 20107, 172, -1000, 934,
	1511, 20107, 16651, 16651, 16651, 16651, -1000, 1569, 1562, -1000,
	1579, 1575, 1611, 20107, -1000, -1000, -1000, 20897, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1161, 1712, 108, 898, 15787,
	17947, 20107, 15787, -1000, -1000, -1000, -1000, -1000, -135, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 108,
	15787, 15787, -81, -1000, -1000, -291, 1638, 5742, -1000, -1000,
	5742, -1000, -1000, 192, 178, -1000, 15787, 540, 17947, 790,
	20107, 1723, 6626, 1723, 20107, -1000, -1000, 392, 392, -1000,
	562, 562, -1000, -1000, -137, 1723, 1723, -118, 20107, 178,
	-1000, -1000, 18811, 1647, -162, 302, 291, 297, -1000, -1000,
	-179, -1000, -1000, 1235, 11467, 10591, 212, 15787, 3526, -1000,
	-1000, 398, 398, 398, 3526, 3526, 325, -1000, -1000, -1000,
	-1000, -1000, -1000, 20107, 1638, -1000, -1000, -1000, 1676, 1638,
	1676, -1000, -1000, 15787, 17947, 20107, 20107, 21254, -1000, 20107,
	1286, 1660, 20107, 1259, -1000, -1000, 9283, 349, 5742, 861,
	1509, -1000, -1000, 1500, 1497, 1496, 1495, 1494, 1492, 1491,
	-1000, 1437, -1000, -1000, 1490, 1488, 1487, 1486, -1000, -1000,
	-1000, -1000, -1000, -1000, 1485, -1000, -1000, -1000, 1483, 1437,
	-1000, -1000, 1479, 1477, 1470, 1466, 1462, -1000, -1000, -1000,
	-1000, -1000, -1000, 887, 885, 702, -1000, -1000, -1000, -1000,
	3084, 6626, 6626, 6626, 6626, -1000, -1000, 1381, 5742, 1456,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 7068, -1000, 1448, 1447,
	1441, 1440, 1439, 1437, 1431, 879, 1429, 1424, 1422, 6626,
	1416, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1259, -1000, -289, -1000, 10159, 20107, 20107, -1000, 1706,
	5742, 2228, -1000, 1673, -1000, 207, 80, -1000, -1000, -1000,
	-1000, -1000, -1000, 347, -1000, -1000, -1000, -1000, -1000, -1000,
	1280, -1000, 20107, 1224, -1000, 457, 1543, 1530, 1543, -1000,
	-1000, -1000, -1000, 1558, -1000, 1555, -1000, -1000, 1360, -1000,
	-1000, 475, -1000, -1000, -1000, -1000, -1000, -8, -16, 1178,
	-1000, -39, 95, -1000, 1263, -1000, -1000, -1000, 475, 1178,
	190, 877, 871, -1000, 811, 343, 1279, -1000, 832, 18379,
	20107, 230, 1646, 1235, 1301, 1616, -1000, -1000, -1000, 1723,
	1723, 1723, 392, 21254, 562, 20107, 562, -1000, -1000, 562,
	-1000, 341, 20107, 230, 1414, -1000, -1000, -1000, 299, 277,
	272, 17947, 189, -1000, -1000, 1235, -1000, -1000, -1000, 1404,
	454, -1000, -1000, 6626, -1000, 1104, -1000, 3526, 3526, 3526,
	-1000, -1000, 14491, -1000, -1000, 1638, -1000, 1638, 1178, 1235,
	1528, 1270, -1000, -1000, -1000, -1000, -1000, 1400, 1253, -1000,
	1723, 5300, -1000, 16651, -1000, 5742, 5742, 5742, 5742, -1000,
	17515, -1000, 17083, -1000, 248, 6184, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5742, 1665, 1665, 1665, 5742, 618, 5742,
	5742, -1000, 637, 7620, 1665, 1665, 1665, 1665, 1665, -1000,
	2634, 1665, 1665, 1665, 1665, -1000, -1000, 6626, 6626, 6626,
	6626, 6626, 6626, 6626, 6626, 6626, 6626, 6626, 6626, 1379,
	660, 6626, 6626, 6626, 990, 1600, 1267, -1000, -1000, -1000,
	-1000, -1000, 484, 1104, 5742, 21442, 5742, 5742, 5742, -1000,
	1149, 1145, -1000, -1000, 5742, -1000, 5742, 6626, 5742, -1000,
	1665, 1723, 1158, -1000, 1390, -1000, 1247, 1608, -1000, 340,
	1244, -1000, 451, 1242, -1000, 1676, 1104, -1000, 335, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -78,
	-1000, -1000, 20107, 934, 1239, 1706, 20107, 5742, -1000, -1000,
	5742, 1389, -1000, 5742, -1000, -1000, -1000, -1000, 1733, 334,
	333, 15787, -1000, 153, 15787, -1000, -1000, 20107, 185, 15787,
	-3, -146, 5742, 5742, 20107, 5742, -1000, -1000, -1000, 1360,
	535, 1388, -236, -1000, -55, -1000, 1524, 72, -1000, 1616,
	-1000, 526, -1000, -1000, -1000, -1000, 1723, -1000, 392, -1000,
	392, 562, 20107, -1000, -1000, -236, 1141, -1000, -1000, -1000,
	268, 1235, 15787, 842, 212, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 20107, 20107, 21667, -1000, 20107, 1720, -1000, 1196,
	1746, -1000, 568, 568, 550, -1000, -1000, 331, -1000, -1000,
	233, -1000, -1000, -1000, -1000, -1000, 1381, -1000, -1000, -1000,
	1133, 1001, 1104, 5742, -1000, -1000, 5742, 5742, 1206, 5742,
	1131, 1237, 1233, -1000, 1124, 1713, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 5742, 5742, 5742, 5742, 5742,
	791, 4858, -1000, -1000, -1000, 5742, 5742, 5742, 5742, 1000,
	1905, -1000, 656, 656, 319, 319, 319, 319, 319, 630,
	630, -1000, -1000, -1000, 3084, 1379, 6626, 6626, 6626, 165,
	2004, 1848, -1000, 5742, 527, -1000, 5742, 940, -1000, 1103,
	855, 1101, 1097, -1000, -1000, 956, 1085, 2618, 1083, 5742,
	1720, -289, 4410, 198, 20107, -289, 20107, 20107, 4410, -1000,
	20107, -1000, 2228, 765, -1000, -1000, -1000, 1676, -1000, 1104,
	1104, 20107, 1104, 15787, 378, 447, -1000, 14059, 15787, -1000,
	-1000, 15787, 112, 1633, -1000, -1000, -96, -87, 1104, 1104,
	330, -1000, 1659, 1645, 8850, -1000, -70, -1000, -1000, -1000,
	357, -1000, 870, 867, 866, 860, 20107, -1000, -1000, -1000,
	-1000, -1000, 425, 425, 425, -1000, 1723, 1723, 392, -1000,
	-2, -46, -1000, 1178, 1069, -1000, -1000, -1000, -1000, 1061,
	-1000, 1708, 1700, 16651, 16219, -1000, -1000, -1000, -1000, -1000,
	5742, 1584, 1570, 1512, 986, 1218, -1000, -1000, -1000, -1000,
	5742, 1506, 1478, 1449, 1419, 1408, -1000, 5742, 5742, 634,
	1401, 1393, 1351, 1299, 1199, -1000, 165, 2004, 1155, -1000,
	6626, 6626, 1295, 448, -1000, 5742, 738, 316, 13195, -1000,
	5742, -1000, -1000, -1000, 13195, -1000, 6626, -1000, 1250, 1708,
	-1000, 1046, 1189, -1000, -289, -1000, -1000, 1158, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1193, 1178,
	-1000, -1000, -1000, -1000, 15787, 1650, 230, -1000, -6, 196,
	-293, -83, 1699, 1698, 20107, 184, 20107, 1039, 1176, -1000,
	-1000, -1000, 21495, 588, -1000, 20107, 593, 317, 178, 317,
	592, 1373, -1000, -1000, -70, -1000, 761, 757, 754, 733,
	-45, -1000, -1000, -1000, -1000, -1000, 1372, 13195, -1000, 13627,
	857, -1000, -1000, 1723, -1000, -2, -1000, 279, 304, 24,
	1696, -1000, -1000, -1000, 5742, 5742, 1746, -1000, -1000, 1104,
	-1000, -1000, -1000, 1023, -1000, 261, 261, -31, -1000, -1000,
	-1000, 1333, -1000, 1363, 1363, 1333, 1333, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1370, 1369, -1000, 1333,
	1362, 1362, 1333, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1365, 1365,
	1366, 1365, -1000, 1148, -1000, -1000, -1000, -1000, -1000, 1140,
	1114, 5742, -1000, -1000, -1000, -1000, -1000, -1000, 6626, -1000,
	-1000, -1000, -1000, 1104, 5742, 1002, -1000, 1333, 1363, -1000,
	1333, 1362, 1333, 261, 261, 989, 804, 983, 1814, -1000,
	-1000, -1000, 4410, 1158, -1000, -1000, 15787, 15787, -238, -9,
	20107, -295, 854, -1000, 1691, 845, 635, -1000, 1360, 21867,
	8850, 1670, -1000, -1000, 20107, 20107, -1000, 20107, 20107, 178,
	5742, -1000, -1000, -1000, -1000, -1000, -1000, 15355, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 728, -1000, -1000,
	-1000, 842, 1104, 1001, -1000, -1000, -1000, -1000, -1000, -34,
	-1000, -1000, -1000, -1000, 719, -1000, 716, -1000, -1000, -1000,
	836, 836, -1000, -1000, 715, -1000, -1000, -1000, 714, -1000,
	-1000, 711, -1000, -1000, -1000, -1000, 974, -1000, 1104, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5742,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -118, -298, 709,
	-1000, 826, -86, -1000, -1000, 1651, 157, 21753, -1000, 425,
	425, 578, 425, 425, 425, 425, 121, 120, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 1359, -1000, -1000, 1670, -1000, -1000, 601, 6626,
	-1000, -1000, 825, 13627, 329, 339, 1349, -1000, 81, 590,
	567, -1000, 20107, -1000, 1343, 1297, 53, 1341, -1000, 1337,
	1334, 20107, 957, 1191, -1000, 1333, 5742, 17, -1000, -1000,
	-1000, -1000, 977, 973, 1187, -1000, 1184, 968, 1167, 1160,
	-1000, 947, -98, -100, -1000, 1332, -1000, -1000, 1688, 184,
	-1000, 1687, 21867, -1000, 706, 704, 425, 425, 696, 819,
	818, 817, 425, 425, 695, 801, 20897, 686, 685, 664,
	763, 800, 459, 760, 688, 680, 20107, 1330, 775, -1000,
	-1000, 2004, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 657, 1328, -1000, -1000, 1327, 15355, 66,
	66, 15355, 15355, 15355, 1317, 264, -1000, 15355, 1631, 864,
	-1000, -1000, -1000, -1000, 784, -1000, -1000, -1000, 654, -1000,
	653, -1000, 187, -92, -100, -1000, 1684, -88, 1682, 1681,
	20107, 635, -1000, 100, -1000, -1000, -1000, 13195, 13195, -1000,
	-1000, -1000, -1000, 780, 777, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 133, 20107, 1154,
	-1000, 436, 966, 5742, -231, 15355, 1122, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1119, 1116, 1113, 15355, -1000, -1000,
	-1000, 79, 106, -1000, -1000, 1631, -1000, 953, 903, 1316,
	643, -83, 1680, -1000, 635, 1679, 635, 635, 1110, -1000,
	-1000, 69, 183, 167, -1000, 226, -1000, -1000, -1000, -1000,
	-1000, -1000, 134, 1100, -1000, 775, 774, -1000, 820, 1452,
	-1000, -10, 1075, -1000, -1000, -1000, -1000, 1060, -1000, -1000,
	425, 689, 43, -1000, -1000, -1000, -1000, -1000, 1582, 12763,
	-99, -1000, 666, -1000, 635, -1000, -1000, -1000, 20107, 64,
	642, 6626, 1313, 6626, 1307, 73, 1303, -1000, -1000, -1000,
	-1000, -1000, 264, -1000, -1000, 1411, 1354, 1727, -1000, -1000,
	-1000, -1000, 106, 106, 106, 106, -12, 629, -1000, 790,
	-1000, 20107, -1000, 1042, -1000, -1000, -1000, 326, -1000, -1000,
	-1000, -1000, 1300, 1678, -1000, 1711, 20107, 1526, 20107, 1294,
	421, 6626, -1000, -1000, 1739, -1000, 1728, 439, 439, -1000,
	-1000, -1000, 667, -1000, 403, -1000, 14923, 20107, -1000, 155,
	71, -1000, 1038, -1000, 1031, 20107, 626, 958, -1000, -1000,
	-1000, 661, 85, -1000, 20107, 3968, -1000, 315, 1028, -1000,
	858, 57, -1000, -1000, 1022, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1104, 20107, -1000, 155, 1590, -1000, 609, -1000,
	-1000, -1000, 21682, 154, -1000, -1000, 21682, 60, -1000, 150,
	-1000, -1000, 1018, -1000, 794, 1292, -1000, 60, 21867, 5742,
	-1000, 21867, 942, -1000,
}

var yyPgo = [...]int{
	0, 108, 2160, 2159, 116, 106, 2156, 2155, 2153, 2152,
	2151, 2150, 2145, 2144, 2143, 2142, 2141, 2138, 2136, 2135,
	2134, 2133, 2131, 2130, 2128, 2127, 2126, 2125, 2122, 2121,
	2118, 2103, 2102, 2101, 2100, 102, 2099, 2098, 2097, 2096,
	2094, 2093, 139, 2091, 2090, 2084, 2083, 2082, 2081, 2079,
	2077, 2076, 2075, 2074, 2073, 2072, 128, 60, 104, 587,
	85, 168, 162, 123, 2071, 87, 184, 2070, 2069, 24,
	113, 2068, 126, 124, 88, 143, 81, 80, 50, 2065,
	2063, 2062, 134, 2061, 2060, 2059, 2055, 49, 2053, 73,
	35, 28, 2051, 2049, 2048, 70, 2047, 2046, 2043, 2042,
	78, 2041, 55, 41, 2040, 2039, 2038, 2037, 2036, 29,
	2035, 40, 2033, 2032, 2031, 2030, 2029, 2028, 2026, 14,
	16, 18, 2025, 2024, 15, 2, 2023, 138, 93, 75,
	89, 2022, 165, 2021, 2020, 2019, 148, 2005, 114, 2004,
	2003, 2002, 2001, 9, 2000, 43, 1996, 1995, 1994, 42,
	1993, 1992, 1991, 95, 38, 83, 82, 1990, 1989, 1988,
	135, 20, 76, 0, 151, 39, 1986, 1984, 1983, 163,
	146, 140, 1982, 105, 245, 111, 44, 1974, 37, 64,
	1966, 1964, 1962, 98, 69, 25, 1947, 122, 1946, 91,
	77, 1945, 97, 1944, 121, 1, 96, 1943, 141, 1942,
	1941, 1939, 112, 1937, 1931, 51, 110, 1930, 1927, 1912,
	46, 1911, 34, 21, 1909, 149, 155, 1890, 1882, 1881,
	118, 99, 72, 1880, 1879, 65, 1877, 109, 67, 119,
	1876, 603, 101, 53, 17, 1875, 144, 1873, 179, 150,
	130, 1872, 1870, 145, 1014, 147, 1868, 131, 10, 1865,
	1862, 11, 1861, 23, 1860, 1859, 1858, 1857, 6, 1856,
	1854, 1853, 3, 5, 1851, 4, 100, 52, 63, 1850,
	59, 71, 1849, 1848, 1847, 1846, 1845, 195, 1842, 1841,
	1840, 1839, 1838, 1837, 1836, 74, 1835, 1833, 1832, 1831,
	58, 1830, 1829, 1828, 1827, 1826, 32, 1825, 1824, 19,
	1810, 26, 1809, 1808, 1807, 12, 127, 1806, 1805, 13,
	1804, 1803, 7, 8, 1801, 1799, 45, 54, 36, 68,
	66, 1798, 22, 1797, 79, 1796, 1794, 125, 1791, 92,
	1782, 1775, 142, 164, 1773, 136, 1772, 1771, 1770, 1769,
	1768, 1765, 1762, 1759, 1758, 1757, 137, 1755,
}

//line mysql_sql.y:6633
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 343, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 50, 315, 315, 314, 314, 313,
	313, 312, 312, 312, 311, 311, 311, 310, 310, 309,
	309, 308, 308, 306, 306, 307, 305, 304, 304, 302,
	302, 300, 300, 301, 301, 295, 295, 298, 298, 296,
	296, 296, 296, 299, 294, 294, 294, 293, 293, 49,
	49, 49, 233, 233, 48, 48, 247, 247, 247, 247,
	247, 245, 245, 245, 245, 244, 244, 243, 243, 248,
	248, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 43, 43, 43, 43, 46, 47,
	241, 241, 241, 241, 241, 242, 242, 242, 44, 45,
	45, 232, 232, 237, 237, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 240, 240, 240,
	239, 239, 238, 238, 37, 37, 37, 40, 39, 231,
	231, 231, 231, 231, 231, 231, 231, 38, 38, 38,
	38, 38, 38, 36, 36, 35, 230, 230, 229, 53,
	53, 53, 53, 52, 52, 55, 55, 54, 42, 42,
	42, 42, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 338, 338, 338, 340, 340, 167, 168, 344, 166,
	166, 166, 334, 334, 335, 336, 337, 337, 337, 51,
	7, 34, 34, 277, 277, 180, 180, 181, 181, 179,
	179, 179, 179, 179, 179, 280, 281, 176, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 26,
	26, 33, 345, 345, 345, 31, 32, 276, 276, 276,
	30, 29, 28, 27, 27, 25, 25, 24, 24, 173,
	173, 175, 175, 171, 346, 346, 253, 253, 174, 174,
	23, 23, 172, 172, 150, 170, 170, 170, 6, 8,
	8, 8, 8, 8, 8, 14, 13, 11, 10, 9,
	12, 5, 4, 284, 284, 284, 284, 284, 284, 323,
	323, 323, 324, 81, 81, 76, 76, 285, 285, 196,
	325, 325, 292, 292, 291, 291, 290, 290, 79, 79,
	80, 80, 68, 68, 56, 56, 297, 297, 297, 297,
	303, 303, 274, 274, 116, 116, 146, 146, 147, 147,
	57, 57, 58, 58, 58, 58, 58, 58, 331, 331,
	333, 333, 332, 78, 78, 74, 74, 75, 75, 75,
	73, 73, 72, 71, 71, 70, 69, 69, 69, 60,
	60, 59, 59, 59, 59, 59, 132, 132, 132, 61,
	61, 339, 339, 339, 278, 278, 278, 283, 283, 129,
	129, 130, 130, 128, 128, 62, 62, 63, 63, 63,
	63, 127, 127, 126, 64, 64, 65, 65, 67, 67,
	67, 67, 137, 137, 136, 136, 136, 136, 84, 84,
	135, 134, 134, 134, 83, 83, 82, 82, 77, 77,
	66, 66, 133, 347, 347, 131, 159, 159, 159, 165,
	165, 158, 158, 158, 158, 158, 169, 164, 164, 160,
	160, 161, 161, 161, 3, 3, 3, 17, 17, 17,
	17, 21, 21, 341, 341, 15, 227, 227, 226, 226,
	228, 228, 228, 228, 222, 222, 223, 223, 223, 223,
	224, 224, 224, 225, 225, 225, 225, 221, 221, 220,
	218, 218, 218, 219, 219, 219, 219, 219, 219, 162,
	162, 16, 215, 215, 216, 216, 216, 217, 217, 209,
	209, 209, 209, 20, 213, 213, 214, 214, 214, 214,
	214, 210, 210, 212, 212, 208, 208, 208, 208, 208,
	19, 207, 207, 205, 205, 203, 203, 204, 204, 202,
	202, 202, 206, 206, 18, 279, 279, 249, 249, 252,
	252, 259, 259, 260, 260, 258, 258, 265, 265, 264,
	264, 263, 263, 262, 262, 261, 261, 256, 256, 255,
	255, 250, 250, 250, 250, 250, 251, 251, 254, 254,
	257, 257, 107, 107, 108, 108, 108, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 321, 321, 322, 110,
	110, 110, 114, 114, 114, 114, 114, 114, 109, 109,
	111, 111, 91, 91, 90, 90, 85, 85, 86, 86,
	87, 87, 88, 88, 89, 89, 89, 89, 89, 89,
	235, 235, 319, 319, 320, 320, 316, 316, 316, 318,
	318, 318, 318, 318, 317, 317, 92, 144, 144, 144,
	163, 163, 163, 143, 143, 143, 106, 106, 105, 105,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 234, 234, 177, 177, 178, 178, 124,
	122, 122, 123, 123, 123, 123, 120, 121, 119, 119,
	119, 119, 119, 118, 118, 117, 117, 117, 211, 211,
	115, 115, 113, 113, 113, 112, 112, 112, 266, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 188, 188, 193, 193, 330, 330, 329, 93,
	93, 93, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 102, 102, 102, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 289,
	289, 289, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 342, 342, 342, 326, 326, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 141, 141,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 197, 197, 198, 198, 286, 286, 286,
	286, 286, 286, 287, 287, 288, 288, 288, 288, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 186, 138, 138,
	138, 199, 194, 194, 195, 195, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 191, 191, 191, 191,
	191, 183, 183, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 190, 190, 192, 192, 201, 201, 201, 200,
	200, 200, 200, 200, 200, 200, 104, 104, 104, 104,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	95, 95, 95, 95, 99, 99, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	100, 100, 100, 100, 98, 98, 98, 98, 98, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 97, 145, 145, 267, 267, 270,
	270, 268, 268, 269, 271, 271, 271, 272, 272, 272,
	273, 273, 273, 275, 275, 149, 149, 149, 155, 155,
	148, 148, 156, 156, 157, 157, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
}

var yyR2 = [...]int{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 14, 0, 2, 1, 3, 3,
	3, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 0,
	3, 0, 3, 0, 3, 0, 2, 1, 2, 3,
	4, 3, 3, 1, 0, 1, 1, 0, 1, 9,
	4, 7, 0, 3, 7, 4, 1, 3, 3, 3,
	1, 0, 1, 1, 1, 1, 3, 1, 4, 1,
	3, 1, 2, 1, 1, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	2, 1, 1, 1, 3, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 6,
	3, 1, 1, 1, 1, 1, 1, 1, 2, 4,
	6, 1, 4, 1, 3, 3, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 2, 2, 0,
	4, 2, 4, 1, 5, 3, 2, 1, 2, 2,
	4, 4, 5, 2, 1, 7, 1, 3, 3, 1,
	1, 1, 1, 4, 4, 2, 4, 3, 1, 1,
	1, 1, 2, 3, 4, 7, 2, 3, 3, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 1, 1, 1, 1, 6,
	1, 7, 9, 0, 2, 0, 1, 1, 2, 2,
	2, 1, 4, 2, 2, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 5, 1, 1, 1, 5, 5, 0, 1, 1,
	2, 2, 3, 6, 7, 4, 4, 7, 8, 0,
	2, 0, 2, 2, 1, 1, 1, 1, 0, 1,
	4, 5, 1, 3, 1, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 6, 4, 4,
	3, 6, 4, 2, 1, 5, 4, 4, 2, 0,
	1, 3, 3, 1, 3, 1, 3, 1, 3, 4,
	0, 1, 0, 1, 1, 3, 1, 1, 0, 4,
	1, 3, 2, 1, 0, 8, 0, 4, 7, 4,
	0, 2, 0, 2, 0, 2, 0, 4, 1, 3,
	1, 1, 4, 3, 4, 5, 4, 5, 2, 3,
	1, 3, 6, 0, 3, 0, 1, 2, 4, 4,
	0, 1, 3, 1, 3, 2, 0, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 1, 2, 2, 7,
	7, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 2, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 3, 1, 1, 4, 4,
	4, 3, 2, 2, 2, 3, 2, 3, 0, 2,
	1, 1, 2, 2, 0, 1, 2, 4, 1, 3,
	1, 4, 3, 0, 1, 2, 0, 1, 2, 1,
	1, 0, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 8, 11, 0, 1, 6, 0, 2, 1, 2,
	2, 2, 2, 2, 0, 1, 2, 2, 2, 2,
	1, 3, 2, 2, 2, 2, 2, 1, 3, 2,
	1, 3, 2, 0, 3, 3, 5, 5, 4, 1,
	1, 4, 1, 3, 1, 3, 2, 1, 1, 0,
	1, 1, 1, 11, 0, 2, 3, 2, 3, 1,
	1, 1, 3, 3, 4, 0, 2, 2, 2, 2,
	5, 1, 1, 0, 3, 0, 1, 1, 2, 4,
	4, 4, 0, 1, 10, 0, 1, 0, 6, 0,
	4, 0, 3, 1, 3, 4, 5, 0, 3, 1,
	3, 2, 3, 1, 2, 0, 6, 0, 2, 0,
	2, 4, 5, 4, 5, 1, 6, 5, 0, 3,
	0, 1, 0, 1, 1, 3, 2, 3, 3, 4,
	4, 3, 3, 3, 3, 4, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 5, 4, 1, 3, 3, 0,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 0, 1, 1, 3,
	1, 1, 2, 1, 7, 7, 7, 7, 8, 5,
	0, 1, 0, 1, 1, 1, 1, 3, 3, 1,
	1, 1, 1, 1, 0, 1, 3, 1, 3, 5,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 2,
	1, 2, 2, 1, 1, 2, 2, 2, 2, 2,
	1, 5, 6, 1, 2, 0, 1, 1, 2, 5,
	0, 1, 1, 1, 2, 2, 3, 3, 1, 1,
	2, 2, 2, 0, 1, 2, 2, 2, 0, 3,
	0, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 3, 5, 2, 2, 2,
	2, 1, 1, 2, 5, 6, 6, 6, 1, 1,
	1, 1, 0, 2, 0, 1, 1, 2, 4, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 2, 2,
	2, 0, 1, 1, 5, 4, 4, 5, 5, 5,
	5, 4, 5, 5, 5, 5, 5, 5, 5, 1,
	1, 1, 4, 4, 6, 8, 6, 4, 5, 5,
	4, 6, 6, 7, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 2, 3, 2, 4, 6, 2, 2, 4, 6,
	4, 2, 2, 0, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 3, 0, 1, 1, 3, 3, 3, 3, 3,
	2, 3, 4, 3, 4, 1, 3, 4, 3, 4,
	1, 1, 1, 3, 4, 4, 5, 3, 4, 5,
	6, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 1, 1, 3, 0, 1, 0,
	3, 0, 3, 3, 0, 3, 5, 0, 3, 5,
	0, 1, 1, 0, 1, 1, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -343, -2, -1, -3, -4, -5, -6, -41, -52,
	-54, -55, -22, -7, -51, -35, -36, -37, -43, -48,
	-49, -50, -57, -17, -16, -15, 8, 10, -8, -166,
	-167, -168, -344, -23, -24, -25, -27, -28, -29, -30,
	-31, -32, -33, -26, -34, 185, 9, 48, -38, -39,
	-40, -44, -45, -46, -47, 295, 301, 338, -58, -60,
	-18, -19, -20, -21, 181, -9, -12, -10, -11, -13,
	-14, 203, 202, 26, 262, 263, 299, 201, 182, 120,
	121, 123, 124, 30, -59, -331, 53, 183, -61, 411,
	6, 456, -68, 27, -90, -163, 57, -151, -154, 414,
	415, 416, 417, 418, 419, 420, 421, 422, 423, 424,
	425, 426, 427, 428, 429, 430, 431, 432, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 449, 408, 220, 244, 247, 254,
	120, 137, 131, 159, 151, 128, 224, 225, 64, 123,
	367, 74, 352, 337, 126, 239, 241, 243, 246, 226,
	147, 142, 238, 222, 140, 227, 28, 228, 164, 229,
	230, 413, 348, 277, 371, 354, 251, 335, 141, 349,
	242, 351, 165, 169, 359, 301, 135, 136, 356, 361,
	163, 200, 32, 410, 212, 362, 167, 162, 158, 370,
	255, 253, 161, 134, 157, 223, 37, 171, 170, 172,
	331, 332, 333, 334, 231, 232, 289, 358, 154, 143,
	281, 129, 18, 365, 207, 353, 302, 233, 248, 210,
	256, 166, 168, 214, 219, 412, 218, 252, 363, 139,
	211, 240, 206, 366, 130, 295, 304, 234, 124, 245,
	360, 369, 36, 317, 133, 127, 197, 121, 216, 221,
	235, 236, 237, 258, 257, 249, 155, 213, 160, 132,
	156, 122, 215, 368, 318, 455, 279, 320, 153, 150,
	217, 190, 364, 355, 125, 324, 319, 148, 259, 452,
	453, 454, 290, 276, 260, 261, 146, 204, 11, -170,
	19, 335, -42, 336, 185, 53, -163, -5, -4, -35,
	-57, -169, -163, 262, -169, 188, -65, -66, -67, -131,
	-133, -90, 53, -163, -244, -215, -243, -216, -246, -217,
	-162, 20, 182, 181, 215, 10, 183, 299, 189, 8,
	6, 300, 201, 9, 301, 303, 304, 307, 308, 309,
	31, 312, 313, 57, 60, -163, -244, -215, 219, 226,
	-72, -73, -132, 15, 5, -279, 320, 218, -209, -207,
	310, 198, 197, 75, 373, 187, 406, -149, -345, -276,
	355, 354, -174, 353, 346, 357, 348, 181, 74, 152,
	149, 189, 356, 32, 359, 360, 349, 320, 125, 122,
	-231, 80, 130, 129, -231, 218, 29, -237, 330, -236,
	-238, 359, 360, 370, 58, 59, 358, -149, -163, 74,
	-73, -132, -72, -59, -60, -58, -60, 320, 218, 189,
	188, 373, 262, -333, 405, -332, -163, -278, -339, 20,
	-283, 178, 179, 180, 21, 22, -1, -79, 210, -90,
	119, -65, -143, -163, 337, 89, -42, -42, 336, -334,
	-335, -336, -338, 185, 336, 335, 119, 11, -169, 51,
	-90, 30, -134, -135, -136, -137, 40, 44, 46, 41,
	42, 43, 47, -347, 23, -159, -165, 23, -160, 60,
	-161, -154, 57, 58, 59, -58, -60, 50, 54, 11,
	54, 53, 457, 58, 297, 311, 320, 298, 310, 190,
	218, 311, 218, 346, 190, 302, 305, 306, 347, 50,
	191, 50, -293, 370, -56, 27, -75, 17, -61, -60,
	16, 20, 21, -341, 188, 405, -205, 193, -205, 189,
	-205, -173, 97, -173, -346, 11, 99, 217, 216, 350,
	347, -253, 351, 352, -174, -173, -173, -174, 188, 373,
	30, 30, -277, 193, 363, 411, 128, 129, 130, -241,
	20, 29, 329, -215, 218, 54, 89, 19, -239, 89,
	100, -238, -238, -238, -239, -239, -109, 29, -162, 116,
	60, -109, 29, 119, -74, -75, -61, -60, -73, -72,
	-73, 55, 55, -277, -277, -277, -277, -277, -169, 54,
	-333, -78, 53, -62, -63, 107, -189, -163, 81, -191,
	57, -184, 414, 415, 416, 417, 418, 419, 420, 421,
	422, 423, 424, 425, 426, 427, 428, 430, 431, 432,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 446, 447, 448, 449, 74, 335, 289,
	320, 148, 290, 146, 204, -185, -187, -312, -306, -182,
	53, 105, 106, 113, 82, -186, -266, 24, 84, 381,
	-139, -140, -141, -142, -307, -305, 60, 65, 68, 71,
	72, 70, 69, 144, 67, 61, 118, -60, -326, -152,
	-282, -288, 187, -286, 149, 145, 8, 111, 330, 116,
	-289, 59, 58, 283, 284, 285, 373, 280, 286, 193,
	42, 287, 288, 291, 380, 292, 43, 293, 282, 208,
	294, 384, 383, 385, 377, 374, 372, 375, 376, 378,
	379, -62, -284, 33, -57, 53, 30, 53, -163, -128,
	12, 119, 65, 60, -42, 55, 54, -337, 71, 72,
	-340, 163, 155, -163, -53, 60, -5, -4, -35, -57,
	-308, -306, 53, -230, -229, -143, -66, -66, -66, -66,
	40, 40, 40, 45, 40, 45, 40, -136, -163, -165,
	55, -245, 188, 296, 214, -243, 215, 301, 304, -221,
	-220, -218, -162, -216, -248, -143, -162, 347, -245, -221,
	-220, 339, 451, -56, -189, -163, -71, -70, -189, 190,
	-205, -221, 81, -215, -161, -163, -128, -187, -128, -90,
	-173, -173, -175, -346, -171, -346, 347, -128, -128, -253,
	-172, -163, -205, -221, 320, 24, 364, 365, 126, 129,
	128, 371, -242, 329, 20, -215, -236, -232, 60, 330,
	-220, -240, 50, 116, -290, -189, 29, -239, -239, -239,
	-240, -240, 115, -163, -56, -74, -56, -75, -221, -215,
	-163, -91, -90, -164, -161, -154, -332, 23, -77, -163,
	-127, 54, -126, 11, -158, 80, 77, 78, 79, -163,
	23, 60, 119, -189, 96, -200, 89, 90, 91, 92,
	93, 94, 95, 53, 53, 53, 53, 53, 53, 53,
	53, -198, 53, 53, 53, 53, 53, 53, 53, -198,
	53, 53, 53, 53, 53, 60, 60, 102, 101, 112,
	105, 106, 107, 108, 109, 110, 111, 103, 104, 99,
	81, 97, 98, 83, -60, -189, -195, -187, -187, -187,
	-187, -266, -193, -189, 53, -189, 53, 53, 53, -287,
	53, 53, -197, -198, 53, 60, 53, 53, 53, -187,
	53, -127, -285, -196, -325, 450, -81, 55, -76, -163,
	-323, -324, -76, -80, -163, -73, -189, -156, -157, -148,
	-153, -160, -161, -154, 278, 186, 20, 80, 23, 25,
	283, 315, 83, 116, 16, 84, 149, 115, 285, 381,
	284, 181, 46, 383, 385, 384, 374, 372, 322, 326,
	328, 325, 373, 346, 29, 10, 26, 202, 21, 22,
	109, 183, 87, 88, 205, 24, 203, 72, 19, 49,
	11, 13, 14, 286, 321, 193, 192, 99, 339, 189,
	44, 8, 118, 27, 96, 323, 40, 76, 42, 97,
	17, 375, 376, 31, 338, 407, 209, 111, 287, 288,
	47, 81, 329, 70, 50, 77, 15, 45, 98, 184,
	380, 43, 327, 291, 293, 405, 292, 187, 357, 6,
	282, 382, 30, 201, 41, 188, 347, 86, 191, 71,
	208, 145, 5, 75, 9, 48, 51, 377, 378, 379,
	33, 85, 12, 294, 411, 330, 340, 341, 342, 343,
	344, 345, 173, 174, 175, 176, 177, 250, 196, 194,
	198, 199, 450, 451, 178, 179, 273, 275, 152, 19,
	-42, -335, 119, 54, -77, -128, 54, 89, -83, -82,
	50, 51, -84, 50, -82, 40, 40, -78, -247, 107,
	57, 54, -219, 321, 457, 58, 55, 54, -247, 191,
	60, 60, 54, 18, 119, 54, -69, 25, 26, -90,
	193, -90, -222, -223, 327, 24, -208, 51, -203, -204,
	-202, -206, 29, -128, -128, -128, -173, -164, -175, -170,
	-175, -171, 119, -150, -163, -222, 53, 127, 130, 130,
	129, -215, 191, 53, 89, -240, -240, -240, 29, -162,
	-56, -56, 50, 54, 53, 55, 54, -128, -63, -64,
	-65, -189, -189, -189, -189, -163, 60, -163, 107, -183,
	81, 276, 70, 71, 72, -184, -201, 20, 260, 261,
	-194, -195, -189, -138, 21, 20, -138, -138, -189, -138,
	107, -195, -195, 55, 65, -327, -328, 386, 387, 388,
	389, 390, 391, 392, 393, 394, 395, 396, 287, 282,
	288, 286, 280, 294, 289, 290, 148, 403, 404, 397,
	398, 399, 400, 401, 402, -138, -138, -138, -138, -138,
	-189, -342, 274, 273, 275, -138, -138, -138, -138, -185,
	-185, -185, -185, -185, -185, -185, -185, -185, -185, -185,
	-185, -192, -199, -266, 53, 99, 97, 98, 83, -187,
	-185, -185, 55, 54, -330, -329, 85, -189, -327, -194,
	-189, -194, -194, 55, 55, -195, -194, -185, -194, -138,
	-128, 54, 53, 55, 54, 33, 119, 54, 89, 55,
	54, -74, 119, 337, -163, -306, 55, -73, -229, -189,
	-189, 53, -189, 11, 119, 119, -220, 16, 411, -162,
	-143, 191, -221, -294, 192, 380, -297, 351, -189, -189,
	-163, -70, -78, 81, 53, -227, 411, 329, 328, 324,
	-224, -225, 323, 325, 322, 326, 50, 268, 269, 270,
	271, -202, -149, 115, 229, -128, -173, -173, -175, -163,
	-227, 55, 130, -221, -176, 60, -232, -90, -90, -1,
	-163, -130, 13, 54, 119, -183, 276, 70, -266, 55,
	54, -189, -189, -189, 23, -195, 55, 55, 55, 55,
	11, -189, -189, -189, -189, -189, 55, 11, 11, -189,
	-189, -189, -189, -189, -195, -192, -187, -185, -185, -190,
	205, 80, -189, -188, -329, 87, -189, 54, 51, 55,
	11, 55, 55, 55, 51, 55, 54, 55, -189, -130,
	-196, -292, -291, -290, 33, -57, -76, -285, -163, -324,
	-290, -163, -156, -153, -161, -154, 65, -74, -77, -221,
	107, 107, 57, -162, 330, -162, -221, -233, 411, 27,
	-303, 345, 340, 342, 119, 23, 24, -85, -86, -87,
	-92, -88, -143, -178, -89, 196, 194, 198, -320, 75,
	199, 250, 76, 189, -226, -228, 331, 332, 333, 334,
	80, -225, 60, 60, 60, 60, -90, -155, 89, -155,
	-155, -128, -128, -173, -180, -181, -179, 278, -280, 330,
	321, 55, 55, -129, 14, 16, -65, -163, 107, -189,
	55, 55, 55, -93, -95, 317, 318, -99, -96, -98,
	-97, -101, -100, 149, 150, 116, 153, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 164, 30, 204, 145,
	146, 147, 148, 165, 131, 151, 409, 173, 132, 174,
	133, 175, 134, 176, 135, 136, 177, 137, 140, 141,
	142, 139, 55, -189, 55, 55, 55, 55, 55, -189,
	-189, 11, 55, 55, 55, 55, 55, -190, 80, -187,
	-184, 55, 88, -189, 86, -94, -100, 116, 149, 204,
	148, 147, 145, 317, 318, -109, -189, -109, -185, 55,
	-129, 55, 54, -285, 55, -162, 16, 23, -222, 301,
	188, -274, 452, -301, 340, 16, 16, -57, -90, 55,
	54, -95, -89, -163, 76, -319, -320, -205, -319, 76,
	53, -228, 65, 65, 65, 65, -225, 53, -109, -111,
	-162, 116, 60, -128, -179, 279, 31, 118, 281, 29,
	277, 16, -189, -195, 55, -102, 136, 135, -102, -273,
	318, 317, -267, -269, 53, -268, 53, -268, -267, -267,
	53, 53, -267, -270, 53, -270, -267, -271, 53, -271,
	-272, 53, -271, 55, 55, 55, -189, -184, -189, 55,
	-267, -268, -267, -270, -267, -102, -102, 55, 55, 19,
	55, 55, -290, -162, -162, -233, 302, -90, -116, 453,
	60, 16, 60, -299, 60, -78, -107, -108, -125, 315,
	220, -206, 224, 64, 225, 337, 226, 189, 228, 229,
	230, 200, 231, 232, 233, 330, 234, 235, 236, 237,
	298, 5, 264, -87, -106, -105, -103, 70, 81, 29,
	315, -104, 64, 115, 243, 221, 244, -124, -177, 194,
	75, 76, 303, -178, -316, -317, -163, -317, -163, -316,
	-316, -205, -189, -210, -212, -143, 53, 65, -281, -176,
	-275, 319, 65, 65, -145, 60, -145, 65, 65, 65,
	55, -189, -295, -253, -146, 454, 65, 60, 342, 23,
	-249, 210, 54, -125, -155, -155, -149, 115, -155, -155,
	-155, -155, 227, 227, -155, -155, -155, -155, -155, -155,
	-155, -155, -155, -155, -155, -155, -155, -155, 53, -103,
	70, -185, 60, -111, -112, 29, 242, 238, -113, 29,
	222, 223, -115, 53, 250, 76, 76, -90, 53, 51,
	259, 53, 53, 53, -317, 55, 55, 54, -267, -189,
	280, 55, 55, 55, 54, 55, 55, 55, 54, 55,
	54, 55, -302, 345, -298, -296, 340, 341, 342, 343,
	53, 16, -57, 16, -125, 65, 65, -155, -155, 65,
	60, 60, 60, -155, -155, 65, 60, -165, 65, 65,
	65, 65, 29, 60, -114, 29, 238, 242, 239, 240,
	241, 65, 29, 65, 29, 65, 29, -163, 53, -321,
	-322, 60, 65, 53, -211, 53, -210, -318, 268, 269,
	270, 272, 271, -318, -210, -210, -210, 53, -235, -234,
	251, 81, -213, -212, -69, 55, 60, 65, 65, -304,
	192, -300, 344, -296, 16, 342, 16, 16, -147, -163,
	-299, -250, 252, 253, -251, -257, 255, -109, -109, 60,
	60, -110, 221, -91, 55, 54, 89, 55, -189, -118,
	-117, 407, -210, 55, 55, 55, 55, -210, 251, -214,
	200, 64, 411, 266, 267, -69, 55, 55, -311, 53,
	65, -301, 16, -299, 16, -299, -299, 55, 54, -255,
	256, 53, -253, 53, -253, 76, 269, 222, 223, 55,
	-322, 60, 55, -122, -123, -120, -121, 50, 349, 248,
	249, 55, -213, -213, -213, -213, 55, -155, 60, 265,
	-315, 30, 55, -310, -309, -144, -305, -163, 345, 60,
	-299, -163, -252, 257, 65, -185, 53, -185, 53, -254,
	254, 53, -234, -121, 50, -120, 50, 10, 9, -124,
	65, -161, -314, -313, -312, 55, 54, 119, -259, 53,
	16, 55, -248, 55, -248, 53, 89, -185, -119, 245,
	246, 30, 129, -119, 54, 89, -309, -163, -260, -258,
	210, -251, 55, 55, -248, 65, 55, 70, 29, 247,
	-313, 29, -189, 119, 55, 54, 57, -256, 258, 55,
	-163, -258, -261, 33, 65, -265, -262, 53, -125, 212,
	-265, -125, -264, -263, 257, 213, 55, 54, 57, 53,
	-263, -262, -195, 55,
}

var yyDef = [...]int{
	23, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 474, 475, 476, 0, 0, 298, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 230, 0, 0, 184, 164, 165,
	166, 124, 125, 126, 127, 0, 0, 0, 360, -2,
	477, 478, 479, 480, -2, 299, 300, 301, 302, 303,
	304, 219, 220, 221, 216, 217, 218, -2, 0, 177,
	0, 169, 169, 0, 380, 0, 0, 0, 391, 0,
	404, 23, 338, 0, 343, 654, 690, 691, 692, 1384,
	1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
	1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404,
	1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414,
	1415, 1416, 1417, 1418, 1419, 1211, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245,
	1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
	1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
	1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
	1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
	1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
	1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345,
	1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355,
	1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
	1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 0, 202,
	0, 1253, 206, 0, 0, 0, 295, 198, 199, 200,
	201, 0, 466, 0, 195, 0, 0, 426, 427, 450,
	453, 456, 0, 183, 0, 0, 85, 522, 87, 524,
	0, 91, 93, 94, -2, 98, 99, 100, 101, 102,
	103, 104, 0, 106, 1261, 108, 1322, 111, 112, 113,
	0, 122, 123, -2, -2, 519, 0, 0, 1310, 67,
	-2, 0, 0, 0, 396, 483, 553, 553, 0, 553,
	566, 530, 531, 532, 551, 552, 279, 279, 0, 0,
	270, 271, 0, 288, 279, 279, 288, 0, 1055, 0,
	0, 262, 263, 264, 268, 269, 289, 233, 178, 179,
	168, 0, 173, 0, 167, 1312, 0, 138, 0, 143,
	0, 1260, 1326, 1275, 0, 0, 1293, 0, 162, -2,
	375, 0, 381, 380, 380, 0, 380, 233, 233, 233,
	233, 233, 0, 368, 0, 370, 373, 0, 0, 405,
	406, 401, 402, 403, 407, 408, 3, 0, 0, 342,
	0, 413, 203, 693, 0, 0, 207, 208, 0, 0,
	222, 0, 225, 211, 212, 213, 0, 0, 197, 0,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 440,
	0, 0, 0, 0, 454, 455, 457, 0, 459, 460,
	469, 470, 471, 472, 473, 0, 380, 81, 0, 0,
	0, 0, 0, 526, 92, 121, 95, 96, 0, 116,
	118, 120, 119, 105, 117, 107, 109, 110, 115, 81,
	0, 0, 0, 68, 363, 0, 344, 0, 393, 395,
	0, 397, 398, 0, 553, 484, 0, 0, 0, 0,
	0, 413, 0, 413, 0, 284, 285, 279, 279, 272,
	281, 0, 286, 287, 0, 413, 413, 0, 0, 553,
	1056, 1057, 0, 0, 0, 0, 171, 0, 176, 128,
	133, 131, 132, 134, 0, 0, 0, 0, 0, 160,
	161, 0, 0, 0, 0, 0, 151, 154, 648, 649,
	520, 155, 156, 0, 344, 376, 392, 394, 375, -2,
	0, 389, 390, 0, 0, 0, 0, 0, 310, 0,
	369, 0, 0, 421, 415, 417, 461, 31, 0, 945,
	690, 950, -2, 1385, 1386, 1387, 1388, 1389, 1390, 1391,
	-2, 1393, -2, -2, 1396, 1397, 1398, 1400, -2, -2,
	-2, -2, -2, -2, 1407, -2, -2, -2, 1411, 1412,
	-2, -2, 1415, 1416, 1417, 1418, 1419, -2, -2, -2,
	-2, -2, -2, -2, -2, 961, 761, 762, 763, 764,
	0, 0, 0, 0, 0, 771, 772, 0, 784, 0,
	778, 779, 780, 781, 43, 44, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 908, 748, 0, 0,
	0, 893, 0, 883, 0, 921, 0, 0, 0, 0,
	0, 45, 46, 899, 901, 902, 904, 905, 906, 907,
	910, 911, 912, 915, 916, 917, 918, 919, 920, 923,
	925, 895, 896, 897, 898, 887, 888, 889, 890, 891,
	892, 421, 312, 330, 314, 0, 319, 0, 655, 380,
	0, 0, 204, 0, 209, 0, 0, 224, 226, 227,
	228, 214, 215, 296, 193, 194, 189, 190, 191, 192,
	196, 41, 0, 413, 186, 0, 444, 438, 0, 431,
	442, 443, 434, 0, 436, 0, 432, 433, 373, 458,
	452, 0, 82, 83, 84, 86, 97, 0, 0, 75,
	507, 513, 510, 523, 0, 89, 525, 114, 0, 70,
	0, 0, 0, 364, 377, 31, 382, 383, 386, 0,
	0, 494, 0, 521, 545, -2, 259, 280, 260, 413,
	413, 413, 279, 0, 281, 0, 281, 275, 276, 0,
	290, 292, 0, 494, 1353, 234, 180, 181, 0, 0,
	175, 0, 0, 135, 136, 137, 144, 139, 141, 0,
	0, 145, 157, 158, 159, 336, 337, 0, 0, 0,
	149, 150, 0, 163, 362, 344, 366, 344, 305, 306,
	0, 308, 652, 309, 467, 468, 371, 0, 0, 448,
	413, 0, 422, 0, 418, 0, 0, 0, 0, 462,
	0, 464, 0, 940, 0, 0, 969, 970, 971, 972,
	973, 974, 975, 932, 928, 928, 928, 0, 928, 0,
	0, 868, 0, 0, 928, 928, 928, 928, 928, 869,
	0, 928, 928, 928, 928, 882, 876, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 934, 0, 767, 768, 769,
	770, 773, 0, 785, 0, 0, 932, 932, 932, 871,
	0, 0, 873, 884, 0, 877, 932, 0, 932, 881,
	928, 413, 313, 327, 0, 331, 0, 0, 323, 325,
	318, 320, 0, 0, 340, 375, 414, 694, 0, 1062,
	-2, 1064, -2, -2, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
	1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
	1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
	1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
	1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131,
	1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
	1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
	1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161,
	1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
	1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 0,
	210, 223, 0, 0, 0, 380, 0, 0, 428, 445,
	0, 0, 429, 0, 430, 435, 437, 451, 0, 76,
	80, 0, 509, 0, 0, 512, 88, 0, 0, 0,
	64, 346, 0, 0, 0, 0, 385, 387, 388, 373,
	0, 0, 486, 495, 0, 554, 0, 0, 550, -2,
	557, 0, 563, 261, 265, 266, 413, 282, 279, 283,
	279, 281, 0, 291, 294, 486, 0, 182, 170, 172,
	0, 130, 0, 0, 0, 146, 147, 148, 152, 153,
	365, 367, 0, 0, 23, 374, 0, 411, 416, 423,
	424, 936, 937, 938, 939, 463, 465, 32, 419, 941,
	0, 943, 946, 951, 952, 948, 0, 966, -2, -2,
	0, 933, 934, 0, 929, 930, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 0, 0, 0, 0, 0,
	0, 0, 834, 835, 836, 0, 0, 0, 0, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 953, 964, 965, 0, 0, 0, 0, 0, 962,
	957, 0, 765, 0, 782, 786, 0, 0, 927, 0,
	934, 0, 0, 894, 872, 0, 0, 0, 0, 0,
	411, 330, 332, 0, 0, 330, 0, 0, 0, 339,
	0, 311, 0, 0, 297, 42, 229, 375, 187, 188,
	446, 0, 439, 0, 0, 0, 508, 0, 0, 511,
	90, 0, 72, 0, 65, 66, 350, 0, 378, 379,
	32, 384, 0, 0, 656, 485, 0, 496, 497, 498,
	499, 500, 0, 0, 0, 0, 0, 546, 547, 548,
	549, 558, 1058, 1058, 1058, 273, 413, 413, 279, 293,
	235, 0, 174, 129, 0, 247, 140, 307, 653, 0,
	449, 409, 0, 0, 0, 942, 944, 947, 949, 822,
	0, 0, 0, 0, 0, 0, 811, 805, 806, 886,
	0, 0, 0, 0, 0, 0, 830, 0, 0, 0,
	0, 0, 0, 0, 0, 954, 962, 958, 0, 955,
	0, 0, 935, 0, 787, 0, 0, 0, 0, 823,
	0, 827, 870, 874, 0, 878, 0, 880, 0, 409,
	328, 0, 333, 334, 330, 317, 324, 316, 326, 321,
	322, 341, 695, 1063, 1060, 1061, 205, 185, 0, 74,
	77, 78, 79, 514, 0, 515, 494, 71, 0, 0,
	352, 53, 0, 0, 0, 0, 0, 0, 657, 658,
	660, 661, 0, 0, 663, 717, 0, 672, 553, 672,
	0, 0, 674, 675, 487, 488, 0, 0, 0, 0,
	0, 502, 503, 504, 505, 506, 0, 0, 1059, 0,
	0, 277, 274, 413, 231, 236, 237, 0, 241, 0,
	0, 142, 372, 399, 0, 0, 425, 33, 420, 935,
	807, 808, 809, 0, 789, 801, 801, 1050, 991, 992,
	993, 1037, 995, 1041, 1041, 1037, 1037, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 0, 0, 1014, 1037,
	1039, 1039, 1037, 1034, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1044, 1044,
	1047, 1044, 810, 0, 829, 812, 813, 816, 814, 0,
	0, 0, 828, 817, 818, 804, 931, 956, 0, 963,
	959, 766, 774, 783, 0, 0, 792, 1037, 1041, 795,
	1037, 1039, 1037, 801, 801, 0, 0, 0, 0, 815,
	400, 329, 0, 315, 447, 518, 0, 0, 72, 0,
	0, 354, 0, 351, 0, 0, 0, 481, 373, -2,
	0, -2, 662, 718, 684, 684, 673, 684, 684, 553,
	0, 489, 490, 491, 492, 493, 501, 0, 559, 560,
	650, 651, 561, 278, 238, 239, 240, 0, 243, 244,
	246, 0, 410, 412, 775, 790, 802, 803, 791, 1053,
	1051, 1052, 994, 1038, 0, 1019, 0, 1020, 1021, 1022,
	0, 0, 1015, 1016, 0, 1017, 1018, 1010, 0, 1011,
	1012, 0, 1013, 826, 831, 832, 0, 960, 788, 776,
	793, 794, 796, 797, 798, 799, 800, 777, 824, 0,
	875, 879, 335, 516, 517, 69, 73, 55, 356, 0,
	353, 0, 347, 349, 63, 0, 567, -2, 604, 1058,
	1058, 0, 1058, 1058, 1058, 1058, 0, 0, 1058, 1058,
	1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
	1058, 1058, 0, 659, 686, -2, 698, 700, 0, 0,
	703, 704, 0, 0, 0, 0, 740, 710, 0, 0,
	978, 979, 0, 716, 0, 676, 685, 0, 685, 0,
	0, 684, 0, 0, 541, 1037, 0, 0, 245, 232,
	990, 1054, 0, 0, 0, 1035, 0, 0, 0, 0,
	833, 0, 49, 0, 345, 0, 355, 54, 0, 0,
	564, 0, 562, 606, 0, 0, 1058, 1058, 0, 0,
	0, 0, 1058, 1058, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 699,
	701, 702, 705, 706, 707, 745, 746, 747, 708, 742,
	743, 744, 709, 0, 0, 976, 977, 738, 0, 0,
	0, 0, 0, 0, 0, 670, 534, 0, 386, 0,
	242, 1043, 1042, 1032, 0, 1033, 1040, 1045, 0, 1048,
	0, 825, 47, 51, 56, 57, 0, 0, 0, 0,
	0, 0, 482, 600, 605, 607, 608, 0, 0, 611,
	612, 613, 614, 0, 0, 617, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 642, 643, 644, 645, 646,
	647, 627, 628, 629, 630, 631, 632, 639, 0, 0,
	636, 0, 0, 0, 733, 0, 0, 677, 679, 680,
	681, 682, 683, 678, 0, 0, 0, 0, 669, 671,
	713, 0, 533, 542, 543, 386, 1036, 0, 0, 34,
	0, 53, 0, 58, 0, 0, 0, 0, 0, 358,
	348, 589, 0, 0, 595, 0, 601, 609, 610, 615,
	616, 633, 0, 0, 635, 0, 0, 741, 0, 720,
	734, 0, 0, 534, 534, 534, 534, 0, 714, 535,
	1058, 0, 0, 539, 540, 544, 1046, 1049, 25, 0,
	0, 50, 0, 59, 0, 61, 62, 357, 0, 569,
	0, 0, 0, 0, 0, 598, 0, 640, 641, 634,
	637, 638, 711, 719, 721, 722, 723, 0, 735, 736,
	737, 739, 664, 665, 666, 667, 0, 0, 537, 0,
	24, 0, 35, 0, 37, 39, 40, 687, 48, 52,
	60, 359, 571, 0, 590, 0, 0, 0, 0, 0,
	0, 0, 712, 724, 0, 725, 0, 0, 0, 668,
	536, 538, 26, 27, 0, 36, 0, 0, 568, 0,
	600, 591, 0, 593, 0, 0, 0, 0, 726, 728,
	729, 0, 0, 727, 0, 0, 38, 688, 0, 573,
	0, 587, 592, 594, 0, 599, 597, 730, 732, 731,
	28, 29, 30, 0, 572, 0, 585, 570, 0, 596,
	689, 574, -2, 0, 588, 575, -2, 0, 583, 0,
	576, 584, 0, 579, 0, 0, 578, 0, -2, 0,
	580, -2, 0, 586,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 110, 102, 3,
	53, 55, 107, 105, 54, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 456,
	90, 89, 91, 3, 457, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:508
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:514
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:540
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:544
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 24:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:550
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				File:              yyDollar[5].str,
				DuplicateHandling: yyDollar[6].duplicateKeyUnion(),
				Table:             yyDollar[9].tableNameUnion(),
				Fields:            yyDollar[10].fieldsUnion(),
				Lines:             yyDollar[11].linesUnion(),
				IgnoredLines:      uint64(yyDollar[12].int64ValUnion()),
				ColumnList:        yyDollar[13].loadColumnsUnion(),
				Assignments:       yyDollar[14].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:565
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:569
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:575
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:579
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:585
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:592
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:601
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:605
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:609
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:614
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:618
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:622
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:628
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:637
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:648
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:652
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:658
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:662
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:668
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:672
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:678
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:702
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//        	yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:721
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:725
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:730
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:734
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:742
		{
			yyVAL.str = ""
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:746
		{
			yyVAL.str = yyDollar[3].str
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:751
		{
			yyVAL.str = "\n"
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:755
		{
			yyVAL.str = yyDollar[3].str
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:760
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:764
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:788
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:792
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:798
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:804
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:822
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:839
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:862
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:866
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:870
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:875
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:879
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:885
		{
			yyLOCAL = &tree.Grant{
				Privileges:  yyDollar[2].privilegesUnion(),
				ObjType:     yyDollar[4].objectTypeUnion(),
				Level:       yyDollar[5].privilegeLevelUnion(),
				Users:       yyDollar[7].usersUnion(),
				GrantOption: yyDollar[9].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:895
		{
			yyLOCAL = &tree.Grant{
				IsGrantRole:      true,
				RolesInGrantRole: yyDollar[2].rolesUnion(),
				Users:            yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:903
		{
			yyLOCAL = &tree.Grant{
				IsProxy:     true,
				ProxyUser:   yyDollar[4].userUnion(),
				Users:       yyDollar[6].usersUnion(),
				GrantOption: yyDollar[7].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:913
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:917
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:927
		{
			yyLOCAL = &tree.Revoke{
				Privileges: yyDollar[2].privilegesUnion(),
				ObjType:    yyDollar[4].objectTypeUnion(),
				Level:      yyDollar[5].privilegeLevelUnion(),
				Users:      yyDollar[7].usersUnion(),
				Roles:      nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:937
		{
			yyLOCAL = &tree.Revoke{
				IsRevokeRole:      true,
				RolesInRevokeRole: yyDollar[2].rolesUnion(),
				Users:             yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:947
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:953
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_GLOBAL,
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:959
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
				DbName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:966
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				DbName:  yyDollar[1].str,
				TabName: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:974
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:982
		{
			yyLOCAL = tree.OBJECT_TYPE_NONE
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:986
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:990
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:994
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1000
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1004
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1010
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1017
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1026
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1030
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1036
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1040
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1044
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1048
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1052
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1056
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1060
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1064
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1068
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1072
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1076
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1080
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1084
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1088
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1092
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1096
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1100
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1104
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1108
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1112
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1116
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1120
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1124
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1128
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1132
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1136
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1140
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1144
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1148
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1152
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1156
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1160
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1164
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1176
		{
			yyLOCAL = yyDollar[3].setRoleUnion()
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1182
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1190
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL_EXCEPT, Roles: yyDollar[3].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1194
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_DEFAULT, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1198
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1202
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1206
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1212
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1216
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1220
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1226
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1232
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1236
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:1243
		{
			yyVAL.str = yyDollar[3].str
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1249
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1253
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1259
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1267
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1276
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1284
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1292
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1315
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1338
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1345
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1352
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     yyDollar[1].str,
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1360
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1367
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1374
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1383
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1387
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1391
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1397
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1401
		{
			yyVAL.str = yyDollar[1].str
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1408
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1419
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1425
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1430
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1434
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1438
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1442
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1446
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1450
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1454
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1458
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1464
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1468
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1472
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1476
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1481
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1486
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1492
		{
			yyLOCAL = &tree.Use{Name: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1496
		{
			yyLOCAL = &tree.Use{}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1502
		{
			yyLOCAL = &tree.Update{
				Table:   yyDollar[2].tableExprUnion(),
				Exprs:   yyDollar[4].updateExprsUnion(),
				Where:   yyDollar[5].whereUnion(),
				OrderBy: yyDollar[6].orderByUnion(),
				Limit:   yyDollar[7].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1515
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1519
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1525
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1534
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1540
		{
			yyLOCAL = tree.NewPrepare(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1544
		{
			yyLOCAL = tree.NewPrepareFromStr(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1550
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1554
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1560
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1569
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1575
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1580
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1585
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1589
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1593
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1597
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1605
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1613
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1623
		{
			explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
			explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1655
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1659
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:1665
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1671
		{
			yyVAL.str = yyDollar[1].str
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1676
		{
			yyVAL.str = "true"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1677
		{
			yyVAL.str = "false"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1678
		{
			yyVAL.str = yyDollar[1].str
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1683
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1693
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: false,
				Users:      yyDollar[4].usersUnion(),
				TlsOpts:    yyDollar[5].tlsOptionsUnion(),
				ResOpts:    yyDollar[6].resourceOptionsUnion(),
				MiscOpts:   yyDollar[7].userMiscOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1704
		{
			auth := &tree.User{
				AuthString: yyDollar[9].str,
				ByAuth:     true,
			}
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: true,
				UserFunc:   auth,
			}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1717
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1721
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1726
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1730
		{
			yyLOCAL = yyDollar[1].userMiscOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1736
		{
			yyLOCAL = []tree.UserMiscOption{yyDollar[1].userMiscOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1740
		{
			yyLOCAL = append(yyDollar[1].userMiscOptionsUnion(), yyDollar[2].userMiscOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1746
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1750
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1754
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1758
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1762
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1766
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1772
		{
			yyVAL.item = nil
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1777
		{
			yyVAL.item = nil
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1799
		{
			yyLOCAL = &tree.ShowTarget{Target: yyDollar[2].str, Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1803
		{
			yyLOCAL = &tree.ShowTarget{Target: "charset", Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1809
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: *yyDollar[4].tableNameUnion(),
				Where:     yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1823
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1833
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1842
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1846
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1850
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1856
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1862
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1868
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1874
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1884
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1896
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1900
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1906
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1918
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1931
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1935
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1940
		{
			yyVAL.str = ""
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:1944
		{
			yyVAL.str = yyDollar[2].str
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1950
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1963
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1967
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1973
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1977
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1983
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1987
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1996
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2000
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2004
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].str, yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2021
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2030
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2039
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].str),
				TableName: *yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2049
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2055
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].str), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2061
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2067
		{
			yyLOCAL = &tree.Delete{
				Table:   yyDollar[3].tableExprUnion(),
				Where:   yyDollar[4].whereUnion(),
				OrderBy: yyDollar[5].orderByUnion(),
				Limit:   yyDollar[6].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2082
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2091
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2098
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2104
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2112
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2119
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2126
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2145
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2149
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2153
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:2159
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2168
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2172
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2178
		{
			yyVAL.str = yyDollar[1].str
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2182
		{
			yyVAL.str = yyDollar[3].str
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2188
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2192
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2198
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2203
		{
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2207
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2214
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2218
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2225
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2230
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2234
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2240
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2244
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2250
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2254
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2259
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2263
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2276
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2283
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2290
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2308
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2327
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2333
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2340
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2344
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2357
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2361
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2366
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2370
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2377
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2382
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2389
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2395
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2399
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Ep: yyDollar[3].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2403
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2407
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2411
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2415
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2421
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2428
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2437
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2441
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:2447
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].str), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2455
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2459
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2464
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2468
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2474
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2478
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2482
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2487
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2491
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2497
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2503
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2507
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:2513
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2518
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2522
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2526
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2533
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2537
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2543
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2547
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2557
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2567
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2577
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2589
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2597
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2605
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2615
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2626
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2644
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2648
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2652
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2661
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2665
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2670
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2674
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2679
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2683
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2689
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2693
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2699
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2703
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: tree.UnrestrictedIdentifier(yyDollar[2].str)}
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2707
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2711
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].str, yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2716
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2724
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2730
		{
			yyLOCAL = &tree.From{
				Tables: yyDollar[2].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2738
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2742
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2752
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2761
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2771
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2780
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2790
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2794
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2804
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2808
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2812
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2816
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2822
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2826
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2832
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2838
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2842
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2846
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2852
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2856
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2862
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2866
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2872
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2876
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2882
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2886
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[3].str),
					Cols:  yyDollar[4].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:2899
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2904
		{
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2905
		{
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:2909
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2921
		{
			yyVAL.str = ""
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2925
		{
			yyVAL.str = yyDollar[1].str
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2929
		{
			yyVAL.str = yyDollar[2].str
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2938
		{
			yyVAL.str = ""
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2942
		{
			yyVAL.str = yyDollar[1].str
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2946
		{
			yyVAL.str = yyDollar[2].str
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2950
		{
			yyVAL.str = yyDollar[1].str
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2954
		{
			yyVAL.str = yyDollar[2].str
		}
	case 481:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2987
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2997
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[8].tableNameUnion(),
				ColNames:    yyDollar[9].identifierListUnion(),
				AsSource:    yyDollar[11].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3008
		{
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3013
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Users:       yyDollar[4].usersUnion(),
				TlsOpts:     yyDollar[5].tlsOptionsUnion(),
				ResOpts:     yyDollar[6].resourceOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3023
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3027
		{
			yyLOCAL = yyDollar[2].resourceOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3033
		{
			yyLOCAL = []tree.ResourceOption{yyDollar[1].resourceOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3037
		{
			yyLOCAL = append(yyDollar[1].resourceOptionsUnion(), yyDollar[2].resourceOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3043
		{
			yyLOCAL = &tree.ResourceOptionMaxQueriesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3047
		{
			yyLOCAL = &tree.ResourceOptionMaxUpdatesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3051
		{
			yyLOCAL = &tree.ResourceOptionMaxConnectionPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3055
		{
			yyLOCAL = &tree.ResourceOptionMaxUserConnections{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3061
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3068
		{
			t := &tree.TlsOptionNone{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3073
		{
			t := &tree.TlsOptionSSL{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3078
		{
			t := &tree.TlsOptionX509{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3083
		{
			yyLOCAL = yyDollar[2].tlsOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3089
		{
			yyLOCAL = []tree.TlsOption{yyDollar[1].tlsOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3093
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[3].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3097
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[2].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3103
		{
			yyLOCAL = &tree.TlsOptionIssuer{Issuer: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3107
		{
			yyLOCAL = &tree.TlsOptionSubject{Subject: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3111
		{
			yyLOCAL = &tree.TlsOptionCipher{Cipher: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3115
		{
			yyLOCAL = &tree.TlsOptionSan{San: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3121
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3125
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3131
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthPlugin: yyDollar[2].authRecordUnion().AuthPlugin,
				AuthString: yyDollar[2].authRecordUnion().AuthString,
				HashString: yyDollar[2].authRecordUnion().HashString,
				ByAuth:     yyDollar[2].authRecordUnion().ByAuth,
			}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3144
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3148
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3152
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3157
		{
			yyLOCAL = &tree.AuthRecord{}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3161
		{
			yyLOCAL = &tree.AuthRecord{
				AuthString: yyDollar[3].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3168
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3174
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				AuthString: yyDollar[5].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3182
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				HashString: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3189
		{
			yyLOCAL = &tree.AuthRecord{
				HashString: yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3201
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3210
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3214
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3220
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: "%"}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3224
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3228
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3237
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3241
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3245
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3249
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3255
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].str),
				Table:       *yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3274
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3278
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3300
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3304
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3308
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3312
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3316
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3322
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3326
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3332
		{
			// Order is parsed but just ignored as MySQL did.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3337
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3342
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3346
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3350
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3354
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3358
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3364
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:   yyDollar[3].ifNotExistsUnion(),
				Name:          tree.Identifier(yyDollar[4].str),
				CreateOptions: yyDollar[5].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3378
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3382
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3387
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3391
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3397
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3401
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3407
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3411
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3415
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3420
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3424
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3430
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3442
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3446
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3451
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3455
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3465
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3469
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3478
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3482
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3488
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3492
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3498
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3507
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3517
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3521
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3527
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3531
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3537
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3544
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3553
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3557
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3562
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3566
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3571
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3575
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3585
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3589
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3600
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3608
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3616
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3624
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3635
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3645
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3655
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3659
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3664
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3668
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3673
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3677
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3683
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3687
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3691
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3697
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3701
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3705
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3709
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3713
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3717
		{
			yyLOCAL = tree.NewTableOptionComment(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3721
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3725
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3729
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3733
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3737
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3741
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3745
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3749
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3753
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3757
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3761
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3765
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3769
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3773
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3777
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3781
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3785
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3789
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3793
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3797
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3801
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].str, yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3805
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3809
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3816
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3820
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:3826
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3831
		{
			yyVAL.str = ""
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3835
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3839
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3845
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3849
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3853
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3857
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3861
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3865
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3879
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3883
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3892
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3897
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3903
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3910
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3914
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3920
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3924
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3930
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.Name = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3940
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3946
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3955
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3964
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invail the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3987
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3996
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4006
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4014
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4020
		{
			yyVAL.str = ""
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4024
		{
			yyVAL.str = yyDollar[1].str
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4034
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4040
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4046
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4060
		{
			yyVAL.str = ""
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:4067
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4073
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4077
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4081
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4092
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4096
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4100
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4105
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4109
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4115
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4119
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4125
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4129
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4133
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4137
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4141
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4145
		{
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4149
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4153
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4157
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4161
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4165
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4169
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4173
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4183
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4187
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4192
		{
			yyVAL.str = ""
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4196
		{
			yyVAL.str = yyDollar[1].str
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4202
		{
			yyVAL.str = ""
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4206
		{
			yyVAL.str = yyDollar[2].str
		}
	case 719:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:4212
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4223
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4233
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4240
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4247
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4254
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4263
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4269
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4275
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4279
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4283
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4287
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4291
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4296
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4303
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4307
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4311
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4316
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4320
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4325
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4329
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:4345
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4351
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4355
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4359
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4363
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4367
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4371
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4375
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4379
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4383
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4387
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4391
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4395
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4399
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4405
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4409
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4413
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4417
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4421
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4425
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4429
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4433
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4437
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4441
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4445
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4449
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4454
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4462
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4466
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4470
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4479
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4483
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4487
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4491
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4496
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4500
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4505
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4509
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4515
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4519
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:4525
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4535
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4552
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4569
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4582
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4595
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4607
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4621
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4636
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4651
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4668
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4683
		{
		}
	case 804:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4689
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4698
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4706
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4714
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4723
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4732
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4741
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[4].exprsUnion(),
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4750
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4759
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4768
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4777
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4786
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4795
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4804
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4813
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4829
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4837
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4845
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4853
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4861
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			timeUinit := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4870
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4878
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4887
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4896
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4904
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4912
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4921
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4941
		{
			yyVAL.str = yyDollar[1].str
		}
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4977
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4989
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5003
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5011
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5018
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5025
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5037
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5045
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5056
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5065
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5074
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5082
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5092
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5100
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5108
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5118
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5122
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5128
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5132
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5151
		{
		}
	case 894:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5153
		{
		}
	case 927:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5193
		{
			name := tree.SetUnresolvedName("interval")
			arg2 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5203
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5207
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5211
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:5217
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5222
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5226
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5232
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5236
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5243
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5247
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5251
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5259
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5263
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5267
		{
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5271
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5275
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5280
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5285
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5291
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5295
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5299
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5303
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5310
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5314
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5320
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5324
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5328
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5332
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5336
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5340
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5344
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5348
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5354
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5358
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5364
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5368
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5375
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5379
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5383
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5389
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5393
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5397
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5401
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5405
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5409
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5413
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5419
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5423
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5427
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5431
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5437
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5441
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5454
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5459
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5463
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5467
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5471
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_hexnum)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5485
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5489
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_bit)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5503
		{
			yyLOCAL = tree.NewArgExpr()
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5509
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5520
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5525
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5531
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5543
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5555
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5567
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5580
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5593
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5606
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5619
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5632
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5645
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5658
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5671
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5684
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5697
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5712
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5735
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 53 {
				yylex.Error("For float(M), M must between 0 and 53.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5772
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 18 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5820
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5837
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5849
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5864
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5884
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5904
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5920
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5933
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5946
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5959
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5972
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5984
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5996
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6008
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6020
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6032
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6044
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6056
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6068
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6080
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6093
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6108
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6131
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6136
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6142
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6149
		{
			yyLOCAL = 6
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6153
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6158
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6162
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6168
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6174
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6181
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6188
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6197
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 10, // this is the default precision for decimal
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6204
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6211
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6220
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6224
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6228
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6234
		{
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6236
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6246
		{
			yyVAL.str = ""
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6250
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
